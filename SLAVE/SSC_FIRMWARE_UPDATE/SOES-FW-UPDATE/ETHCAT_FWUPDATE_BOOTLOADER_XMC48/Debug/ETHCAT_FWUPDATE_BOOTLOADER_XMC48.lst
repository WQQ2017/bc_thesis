
ETHCAT_FWUPDATE_BOOTLOADER_XMC48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .abm          00000014  0800ffe0  0c00ffe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  3 .data         00000038  1ffe8800  0c000fa0  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000118  1ffe8838  0c000fd8  00010838  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00000670  00000000  00000000  00017ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004f93  00000000  00000000  00018668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c50  00000000  00000000  0001d5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002107  00000000  00000000  0001e24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001bb4  00000000  00000000  00020354  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003c25  00000000  00000000  00021f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038e4  00000000  00000000  00025b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005e0  00000000  00000000  00029411  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000001d8  00000000  00000000  000299f1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000fa0 	.word	0x0c000fa0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000038 	.word	0x00000038
 8000254:	0c000fa0 	.word	0x0c000fa0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8838 	.word	0x1ffe8838
 8000264:	00000118 	.word	0x00000118
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08000f55 	.word	0x08000f55
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08000eb1 	.word	0x08000eb1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80002aa:	bf00      	nop
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  __DSB();
  __enable_irq();

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba4      	ldr	r3, [pc, #656]	; (80005ec <SystemCoreClockSetup+0x298>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a99      	ldr	r2, [pc, #612]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038c:	4b98      	ldr	r3, [pc, #608]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a95      	ldr	r2, [pc, #596]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a0:	4b94      	ldr	r3, [pc, #592]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a90      	ldr	r2, [pc, #576]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b4:	4b8f      	ldr	r3, [pc, #572]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d029      	beq.n	8000422 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8a      	ldr	r2, [pc, #552]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d0:	4b89      	ldr	r3, [pc, #548]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f993 	bl	8000708 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4981      	ldr	r1, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f2:	4a81      	ldr	r2, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80003fa:	4a7e      	ldr	r2, [pc, #504]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fc:	4b7d      	ldr	r3, [pc, #500]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000406:	4a7b      	ldr	r2, [pc, #492]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000408:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000410:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000412:	bf00      	nop
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800041c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000420:	d1f8      	bne.n	8000414 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a74      	ldr	r2, [pc, #464]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000424:	4b73      	ldr	r3, [pc, #460]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800042e:	4a71      	ldr	r2, [pc, #452]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800043c:	4a70      	ldr	r2, [pc, #448]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000440:	4a6c      	ldr	r2, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000442:	4b6c      	ldr	r3, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800044c:	4a69      	ldr	r2, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800044e:	4b69      	ldr	r3, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045a:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000464:	bf00      	nop
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800047e:	bf00      	nop
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1f9      	bne.n	8000480 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 800048c:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800048e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000492:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 8000494:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004b4:	4a54      	ldr	r2, [pc, #336]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80004b6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004c0:	4a52      	ldr	r2, [pc, #328]	; (800060c <SystemCoreClockSetup+0x2b8>)
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c4:	4a4b      	ldr	r2, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ce:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004d4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80004d6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004da:	f7ff fedf 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004e0:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004e2:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 80004e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80004e8:	f7ff fed8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004f0:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 80004f2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80004f6:	f7ff fed1 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004fe:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8000500:	f241 7070 	movw	r0, #6000	; 0x1770
 8000504:	f7ff feca 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 800050c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800050e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000512:	f7ff fec3 	bl	800029c <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d031      	beq.n	8000596 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000548:	f023 0302 	bic.w	r3, r3, #2
 800054c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800055c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800055e:	f000 f8d3 	bl	8000708 <OSCHP_GetFrequency>
 8000562:	4602      	mov	r2, r0
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	0d1b      	lsrs	r3, r3, #20
 800056c:	3b01      	subs	r3, #1
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000584:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000586:	bf00      	nop
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000590:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000594:	d1f8      	bne.n	8000588 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 80005b2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01f      	b.n	800062c <SystemCoreClockSetup+0x2d8>
 80005ec:	50004200 	.word	0x50004200
 80005f0:	50004400 	.word	0x50004400
 80005f4:	50004710 	.word	0x50004710
 80005f8:	50004700 	.word	0x50004700
 80005fc:	6b5fca6b 	.word	0x6b5fca6b
 8000600:	010b2f00 	.word	0x010b2f00
 8000604:	50004600 	.word	0x50004600
 8000608:	00010005 	.word	0x00010005
 800060c:	01200003 	.word	0x01200003
 8000610:	01052f00 	.word	0x01052f00
 8000614:	01032f00 	.word	0x01032f00
 8000618:	01022f00 	.word	0x01022f00
 800061c:	01012f00 	.word	0x01012f00
 8000620:	01002f00 	.word	0x01002f00
 8000624:	00010002 	.word	0x00010002
 8000628:	02006300 	.word	0x02006300
 800062c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800062e:	f000 f801 	bl	8000634 <SystemCoreClockUpdate>
}
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d03e      	beq.n	80006c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000658:	f000 f856 	bl	8000708 <OSCHP_GetFrequency>
 800065c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d020      	beq.n	80006ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 80006c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	3301      	adds	r3, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <SystemCoreClockUpdate+0xd0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600
 80006fc:	50004710 	.word	0x50004710
 8000700:	016e3600 	.word	0x016e3600
 8000704:	2003ffc0 	.word	0x2003ffc0

08000708 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <OSCHP_GetFrequency+0x10>)
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	00b71b00 	.word	0x00b71b00

0800071c <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8000724:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2250      	movs	r2, #80	; 0x50
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	0c005554 	.word	0x0c005554

0800073c <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <XMC_FLASH_lLoadPageCommand+0x28>)
 8000748:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <XMC_FLASH_lLoadPageCommand+0x2c>)
 8000752:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	0c0055f0 	.word	0x0c0055f0
 8000768:	0c0055f4 	.word	0x0c0055f4

0800076c <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <XMC_FLASH_lWritePageCommand+0x3c>)
 8000776:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	22aa      	movs	r2, #170	; 0xaa
 800077c:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <XMC_FLASH_lWritePageCommand+0x40>)
 8000780:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <XMC_FLASH_lWritePageCommand+0x3c>)
 800078a:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	22a0      	movs	r2, #160	; 0xa0
 8000790:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	22aa      	movs	r2, #170	; 0xaa
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	0c005554 	.word	0x0c005554
 80007ac:	0c00aaa8 	.word	0x0c00aaa8

080007b0 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <XMC_FLASH_lClearStatusCommand+0x1c>)
 80007b8:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	22f5      	movs	r2, #245	; 0xf5
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	0c005554 	.word	0x0c005554

080007d0 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 80007da:	f7ff ffe9 	bl	80007b0 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 80007de:	f7ff ff9d 	bl	800071c <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e011      	b.n	800080c <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4608      	mov	r0, r1
 8000800:	4619      	mov	r1, r3
 8000802:	f7ff ff9b 	bl	800073c <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3302      	adds	r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b3f      	cmp	r3, #63	; 0x3f
 8000810:	d9ea      	bls.n	80007e8 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffaa 	bl	800076c <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <XMC_FLASH_ProgramPage+0x64>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000820:	3310      	adds	r3, #16
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f6      	bne.n	800081a <XMC_FLASH_ProgramPage+0x4a>
}
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	58001000 	.word	0x58001000

08000838 <XMC_FLASH_lErasePhysicalSectorCommand>:

/*
 * Command to erase physical sector which is starting with the specified address
 */
void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8000842:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	22aa      	movs	r2, #170	; 0xaa
 8000848:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 800084c:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2255      	movs	r2, #85	; 0x55
 8000852:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8000856:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8000860:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	22aa      	movs	r2, #170	; 0xaa
 8000866:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 800086a:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2255      	movs	r2, #85	; 0x55
 8000870:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]
  *address = 0x40U;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	0c005554 	.word	0x0c005554
 800088c:	0c00aaa8 	.word	0x0c00aaa8

08000890 <XMC_FLASH_ErasePhysicalSector>:

 /* 
  * This API erase the physical sector
  */
void XMC_FLASH_ErasePhysicalSector(uint32_t *address)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8000898:	f7ff ff8a 	bl	80007b0 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lErasePhysicalSectorCommand(address);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ffcb 	bl	8000838 <XMC_FLASH_lErasePhysicalSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80008a2:	bf00      	nop
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <XMC_FLASH_ErasePhysicalSector+0x2c>)
 80008a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008aa:	3310      	adds	r3, #16
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f6      	bne.n	80008a4 <XMC_FLASH_ErasePhysicalSector+0x14>
}
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58001000 	.word	0x58001000

080008c0 <XMC_SCU_SetBootMode>:
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
}

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <XMC_SCU_SetBootMode+0x1c>)
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	6113      	str	r3, [r2, #16]
}
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	50004000 	.word	0x50004000

080008e0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	0f1b      	lsrs	r3, r3, #28
 80008ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008f4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	461a      	mov	r2, r3
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000904:	4413      	add	r3, r2
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	601a      	str	r2, [r3, #0]
}
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	50004414 	.word	0x50004414

08000918 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	0f1b      	lsrs	r3, r3, #28
 8000924:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800092c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	461a      	mov	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800093c:	4413      	add	r3, r2
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	50004648 	.word	0x50004648

08000950 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	6852      	ldr	r2, [r2, #4]
 8000960:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6892      	ldr	r2, [r2, #8]
 800096a:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <XMC_FCE_Enable+0x20>)
 8000982:	f7ff ffc9 	bl	8000918 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <XMC_FCE_Enable+0x20>)
 8000988:	f7ff ffaa 	bl	80008e0 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <XMC_FCE_Enable+0x24>)
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <XMC_FCE_Enable+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 0301 	bic.w	r3, r3, #1
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000040 	.word	0x20000040
 80009a0:	50020000 	.word	0x50020000

080009a4 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <XMC_FCE_CalculateCRC32+0x26>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <XMC_FCE_CalculateCRC32+0x2c>
  {
    status = XMC_FCE_STATUS_ERROR;
 80009ca:	2302      	movs	r3, #2
 80009cc:	75fb      	strb	r3, [r7, #23]
 80009ce:	e013      	b.n	80009f8 <XMC_FCE_CalculateCRC32+0x54>
  }
  else
  {
    while (0UL != length)
 80009d0:	e00a      	b.n	80009e8 <XMC_FCE_CalculateCRC32+0x44>
    {
      engine->kernel_ptr->IR = *data;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	601a      	str	r2, [r3, #0]
      data++;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3304      	adds	r3, #4
 80009e0:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3b04      	subs	r3, #4
 80009e6:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f1      	bne.n	80009d2 <XMC_FCE_CalculateCRC32+0x2e>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	699a      	ldr	r2, [r3, #24]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	371c      	adds	r7, #28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <XMC_FCE_GetCRCResult>:
 *
 * \par<b>Description: </b><br>
 * Read the final CRC value from RES register <br>
 */
__STATIC_INLINE void XMC_FCE_GetCRCResult(const XMC_FCE_t *const engine, uint32_t *result)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  *result= engine->kernel_ptr->RES;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <Flash_lGetPhysicalSector>:
 *
 * @return : start address of physical sector
 *
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e016      	b.n	8000a70 <Flash_lGetPhysicalSector+0x3c>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <Flash_lGetPhysicalSector+0x50>)
 8000a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d80c      	bhi.n	8000a6a <Flash_lGetPhysicalSector+0x36>
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <Flash_lGetPhysicalSector+0x50>)
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d904      	bls.n	8000a6a <Flash_lGetPhysicalSector+0x36>
      return physical_sector_addresses[sector_number];
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <Flash_lGetPhysicalSector+0x50>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	e006      	b.n	8000a78 <Flash_lGetPhysicalSector+0x44>
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b09      	cmp	r3, #9
 8000a74:	d9e5      	bls.n	8000a42 <Flash_lGetPhysicalSector+0xe>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
      return physical_sector_addresses[sector_number];
  }
  /* should not be reached */
  return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	1ffe8800 	.word	0x1ffe8800

08000a88 <Flash_lGetPhysicalSectorNumber>:
 *
 * @return : sector number
 *
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e00b      	b.n	8000aae <Flash_lGetPhysicalSectorNumber+0x26>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <Flash_lGetPhysicalSectorNumber+0x3c>)
 8000a9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d101      	bne.n	8000aa8 <Flash_lGetPhysicalSectorNumber+0x20>
      return sector_number;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	e006      	b.n	8000ab6 <Flash_lGetPhysicalSectorNumber+0x2e>
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b09      	cmp	r3, #9
 8000ab2:	d9f0      	bls.n	8000a96 <Flash_lGetPhysicalSectorNumber+0xe>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
      return sector_number;
  }
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	1ffe8800 	.word	0x1ffe8800

08000ac8 <Flash_lGetPhysicalSectorAddress>:
 *
 * @return : start address of the physical sector
 *
 */
uint32_t* Flash_lGetPhysicalSectorAddress(uint8_t physical_sector_number)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  return physical_sector_addresses[physical_sector_number];
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <Flash_lGetPhysicalSectorAddress+0x20>)
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	1ffe8800 	.word	0x1ffe8800

08000aec <Flash_lCheckPhysicalSectorNumberInRange>:
 * @return : FLASH_SECTOR_NOT_IN_RANGE - sector does not overlap with address range
 *           FLASH_SECTOR_IN_RANGE - sector overlaps with address range
 *
 */
uint8_t Flash_lCheckPhysicalSectorNumberInRange(uint32_t* ptr_startaddress, uint32_t size_bytes, uint32_t sector_number)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint8_t hit=FLASH_SECTOR_NOT_IN_RANGE;
 8000af8:	2305      	movs	r3, #5
 8000afa:	75fb      	strb	r3, [r7, #23]
  uint32_t* ptr_endaddress=ptr_startaddress + size_bytes / 4;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]

  /* Check if startaddress is inside physical sector */
  if ((ptr_startaddress>=physical_sector_addresses[sector_number]) && (ptr_startaddress<physical_sector_addresses[sector_number+1]))
 8000b08:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d809      	bhi.n	8000b2a <Flash_lCheckPhysicalSectorNumberInRange+0x3e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d901      	bls.n	8000b2a <Flash_lCheckPhysicalSectorNumberInRange+0x3e>
    hit=FLASH_SECTOR_IN_RANGE;
 8000b26:	2304      	movs	r3, #4
 8000b28:	75fb      	strb	r3, [r7, #23]
  /* Check if endaddress is inside physical sector */
  if ((ptr_endaddress>=physical_sector_addresses[sector_number]) && (ptr_endaddress<physical_sector_addresses[sector_number+1]))
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d809      	bhi.n	8000b4c <Flash_lCheckPhysicalSectorNumberInRange+0x60>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d901      	bls.n	8000b4c <Flash_lCheckPhysicalSectorNumberInRange+0x60>
    hit=FLASH_SECTOR_IN_RANGE;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	75fb      	strb	r3, [r7, #23]
  /* Check if complete physical sector is covered by range  */
  if ((physical_sector_addresses[sector_number]>=ptr_startaddress) && (physical_sector_addresses[sector_number+1]<(ptr_endaddress)))
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d309      	bcc.n	8000b6e <Flash_lCheckPhysicalSectorNumberInRange+0x82>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <Flash_lCheckPhysicalSectorNumberInRange+0x90>)
 8000b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d201      	bcs.n	8000b6e <Flash_lCheckPhysicalSectorNumberInRange+0x82>
    hit=FLASH_SECTOR_IN_RANGE;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	75fb      	strb	r3, [r7, #23]

  return hit;
 8000b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	1ffe8800 	.word	0x1ffe8800

08000b80 <FLASHPROG_Init>:
 *
 * @return : none
 *
 */
void FLASHPROG_Init(uint32_t* dest_address, uint32_t max_size, uint8_t erase, uint8_t check_prog)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	460b      	mov	r3, r1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71bb      	strb	r3, [r7, #6]
  gl_flash_write_address = dest_address;
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <FLASHPROG_Init+0x5c>)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	6013      	str	r3, [r2, #0]
  gl_flash_write_start_address = dest_address;
 8000b9c:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <FLASHPROG_Init+0x60>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6013      	str	r3, [r2, #0]
  gl_flash_max_size = max_size;
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <FLASHPROG_Init+0x64>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	6013      	str	r3, [r2, #0]
  gl_flash_check_prog = check_prog;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <FLASHPROG_Init+0x68>)
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	7013      	strb	r3, [r2, #0]
  gl_flash_bytes_written = 0;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <FLASHPROG_Init+0x6c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
  if (erase == FLASH_OPT_NO_ERASE)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b65      	cmp	r3, #101	; 0x65
 8000bb8:	d104      	bne.n	8000bc4 <FLASHPROG_Init+0x44>
    gl_flash_erased = 0xffffU;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <FLASHPROG_Init+0x70>)
 8000bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc0:	801a      	strh	r2, [r3, #0]
 8000bc2:	e002      	b.n	8000bca <FLASHPROG_Init+0x4a>
  else
    gl_flash_erased = 0U;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <FLASHPROG_Init+0x70>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
  gl_flash_page_prep_index = 0U;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <FLASHPROG_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	1ffe8838 	.word	0x1ffe8838
 8000be0:	1ffe883c 	.word	0x1ffe883c
 8000be4:	1ffe8848 	.word	0x1ffe8848
 8000be8:	1ffe8844 	.word	0x1ffe8844
 8000bec:	1ffe8840 	.word	0x1ffe8840
 8000bf0:	1ffe8846 	.word	0x1ffe8846
 8000bf4:	1ffe894c 	.word	0x1ffe894c

08000bf8 <FLASHPROG_Data>:
 * @return : FLASH_FULL_ERROR - no more space left inside destination
 *           FLASH_PROG_ERROR - programming error
 *
 */
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t result = FLASH_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  uint32_t bytes_processed = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 8000c0a:	e07e      	b.n	8000d0a <FLASHPROG_Data+0x112>
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 8000c0c:	e00f      	b.n	8000c2e <FLASHPROG_Data+0x36>
    {
      gl_flash_page_prep[gl_flash_page_prep_index]=((uint8_t*)src_data)[bytes_processed];
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	440a      	add	r2, r1
 8000c18:	7811      	ldrb	r1, [r2, #0]
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <FLASHPROG_Data+0x130>)
 8000c1c:	54d1      	strb	r1, [r2, r3]
      bytes_processed+=1;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
      gl_flash_page_prep_index++;
 8000c24:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000c2c:	6013      	str	r3, [r2, #0]
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d803      	bhi.n	8000c3e <FLASHPROG_Data+0x46>
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d8e7      	bhi.n	8000c0e <FLASHPROG_Data+0x16>
      bytes_processed+=1;
      gl_flash_page_prep_index++;
    }

    /* Complete page prepared ? */
    if (gl_flash_page_prep_index == XMC_FLASH_BYTES_PER_PAGE)
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c46:	d160      	bne.n	8000d0a <FLASHPROG_Data+0x112>
    {
      if ((gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE) <= gl_flash_max_size)
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <FLASHPROG_Data+0x134>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <FLASHPROG_Data+0x138>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d856      	bhi.n	8000d06 <FLASHPROG_Data+0x10e>
      {
        /* One complete page is prepared; start programming */

        /* Check if physical sector already has been deleted; if not, delete */
        uint32_t* PhysicalSector = Flash_lGetPhysicalSector(gl_flash_write_address);
 8000c58:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <FLASHPROG_Data+0x13c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fee9 	bl	8000a34 <Flash_lGetPhysicalSector>
 8000c62:	6138      	str	r0, [r7, #16]
        uint8_t PhysicalSectorNumber = Flash_lGetPhysicalSectorNumber(PhysicalSector);
 8000c64:	6938      	ldr	r0, [r7, #16]
 8000c66:	f7ff ff0f 	bl	8000a88 <Flash_lGetPhysicalSectorNumber>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
        if (!(gl_flash_erased & 1 << PhysicalSectorNumber))
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <FLASHPROG_Data+0x140>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	fa42 f303 	asr.w	r3, r2, r3
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <FLASHPROG_Data+0xaa>
        {
          XMC_FLASH_ErasePhysicalSector(PhysicalSector);
 8000c82:	6938      	ldr	r0, [r7, #16]
 8000c84:	f7ff fe04 	bl	8000890 <XMC_FLASH_ErasePhysicalSector>
          gl_flash_erased |= (1<<PhysicalSectorNumber);
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <FLASHPROG_Data+0x140>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <FLASHPROG_Data+0x140>)
 8000ca0:	801a      	strh	r2, [r3, #0]
        }

        /* Program page */
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <FLASHPROG_Data+0x13c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	491f      	ldr	r1, [pc, #124]	; (8000d28 <FLASHPROG_Data+0x130>)
 8000caa:	f7ff fd91 	bl	80007d0 <XMC_FLASH_ProgramPage>

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <FLASHPROG_Data+0x144>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2bc8      	cmp	r3, #200	; 0xc8
 8000cb4:	d117      	bne.n	8000ce6 <FLASHPROG_Data+0xee>
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e011      	b.n	8000ce0 <FLASHPROG_Data+0xe8>
          {
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <FLASHPROG_Data+0x13c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4916      	ldr	r1, [pc, #88]	; (8000d28 <FLASHPROG_Data+0x130>)
 8000cce:	440b      	add	r3, r1
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d001      	beq.n	8000cda <FLASHPROG_Data+0xe2>
              result = FLASH_PROG_ERROR;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce4:	d9ea      	bls.n	8000cbc <FLASHPROG_Data+0xc4>
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
              result = FLASH_PROG_ERROR;
          }
        }

        gl_flash_write_address = gl_flash_write_address + XMC_FLASH_BYTES_PER_PAGE / 4;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <FLASHPROG_Data+0x13c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <FLASHPROG_Data+0x13c>)
 8000cf0:	6013      	str	r3, [r2, #0]
        gl_flash_bytes_written = gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <FLASHPROG_Data+0x134>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <FLASHPROG_Data+0x134>)
 8000cfc:	6013      	str	r3, [r2, #0]
        gl_flash_page_prep_index=0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <FLASHPROG_Data+0x12c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e001      	b.n	8000d0a <FLASHPROG_Data+0x112>
      }
      else
      {
        result = FLASH_FULL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d903      	bls.n	8000d1a <FLASHPROG_Data+0x122>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f43f af79 	beq.w	8000c0c <FLASHPROG_Data+0x14>
      {
        result = FLASH_FULL_ERROR;
      }
    }
  }
  return result;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	1ffe894c 	.word	0x1ffe894c
 8000d28:	1ffe884c 	.word	0x1ffe884c
 8000d2c:	1ffe8840 	.word	0x1ffe8840
 8000d30:	1ffe8848 	.word	0x1ffe8848
 8000d34:	1ffe8838 	.word	0x1ffe8838
 8000d38:	1ffe8846 	.word	0x1ffe8846
 8000d3c:	1ffe8844 	.word	0x1ffe8844

08000d40 <FLASHPROG_Close>:
 *
 * @return : none
 *
 */
uint32_t FLASHPROG_Close(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Data remaining in page preparation ? */
  if (gl_flash_page_prep_index!=0)
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <FLASHPROG_Close+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d017      	beq.n	8000d7c <FLASHPROG_Close+0x3c>
  {
    if ((gl_flash_bytes_written + 256) < gl_flash_max_size)
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <FLASHPROG_Close+0x48>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <FLASHPROG_Close+0x4c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d20d      	bcs.n	8000d78 <FLASHPROG_Close+0x38>
    {
      /* Programm remaining data */
      XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <FLASHPROG_Close+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <FLASHPROG_Close+0x54>)
 8000d64:	f7ff fd34 	bl	80007d0 <XMC_FLASH_ProgramPage>
      gl_flash_bytes_written = gl_flash_bytes_written + gl_flash_page_prep_index;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <FLASHPROG_Close+0x48>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <FLASHPROG_Close+0x44>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <FLASHPROG_Close+0x48>)
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e001      	b.n	8000d7c <FLASHPROG_Close+0x3c>
    }
    else
    {
      return FLASH_FULL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <FLASHPROG_Close+0x3e>
    }
  }
  return FLASH_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	1ffe894c 	.word	0x1ffe894c
 8000d88:	1ffe8840 	.word	0x1ffe8840
 8000d8c:	1ffe8848 	.word	0x1ffe8848
 8000d90:	1ffe8838 	.word	0x1ffe8838
 8000d94:	1ffe884c 	.word	0x1ffe884c

08000d98 <FLASHPROG_Delete_physical_sector>:
 *
 * @return : none
 *
 */
void FLASHPROG_Delete_physical_sector(uint32_t* ptr_sector_startaddress)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  XMC_FLASH_ErasePhysicalSector(ptr_sector_startaddress);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fd75 	bl	8000890 <XMC_FLASH_ErasePhysicalSector>
}
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <FLASHPROG_Delete_physical_sectors>:
 *
 * @return : none
 *
 */
void FLASHPROG_Delete_physical_sectors(uint32_t* ptr_startaddress, uint32_t size_bytes)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e013      	b.n	8000de4 <FLASHPROG_Delete_physical_sectors+0x38>
  {
    if (Flash_lCheckPhysicalSectorNumberInRange(ptr_startaddress, size_bytes, sector_number)==FLASH_SECTOR_IN_RANGE)
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	6839      	ldr	r1, [r7, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f7ff fe92 	bl	8000aec <Flash_lCheckPhysicalSectorNumberInRange>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d107      	bne.n	8000dde <FLASHPROG_Delete_physical_sectors+0x32>
    {
      XMC_FLASH_ErasePhysicalSector(Flash_lGetPhysicalSectorAddress(sector_number));
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fe79 	bl	8000ac8 <Flash_lGetPhysicalSectorAddress>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd59 	bl	8000890 <XMC_FLASH_ErasePhysicalSector>
 */
void FLASHPROG_Delete_physical_sectors(uint32_t* ptr_startaddress, uint32_t size_bytes)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	3301      	adds	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d9e8      	bls.n	8000dbc <FLASHPROG_Delete_physical_sectors+0x10>
    if (Flash_lCheckPhysicalSectorNumberInRange(ptr_startaddress, size_bytes, sector_number)==FLASH_SECTOR_IN_RANGE)
    {
      XMC_FLASH_ErasePhysicalSector(Flash_lGetPhysicalSectorAddress(sector_number));
    }
  }
}
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <FLASHPROG_CRC32_check>:
 * @return : FLASH_OK - CRC32 check is ok
 *           FLAHS_CRC_ERROR - CRC32 check failed
 *
 */
uint32_t FLASHPROG_CRC32_check(uint32_t* ptr_startaddress, uint32_t size_bytes)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t crc32_result;
  uint32_t crc32_expected;
  XMC_FCE_STATUS_t fce_status;

  XMC_FCE_Enable();
 8000dfa:	f7ff fdbf 	bl	800097c <XMC_FCE_Enable>
  XMC_FCE_Init(&FCE_config0);
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <FLASHPROG_CRC32_check+0x64>)
 8000e00:	f7ff fda6 	bl	8000950 <XMC_FCE_Init>
  fce_status = XMC_FCE_CalculateCRC32(&FCE_config0,  ptr_startaddress, size_bytes - 4, &crc32_result);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	1f1a      	subs	r2, r3, #4
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <FLASHPROG_CRC32_check+0x64>)
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f7ff fdc8 	bl	80009a4 <XMC_FCE_CalculateCRC32>
 8000e14:	4603      	mov	r3, r0
 8000e16:	75fb      	strb	r3, [r7, #23]
  XMC_FCE_GetCRCResult(&FCE_config0, &crc32_result);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <FLASHPROG_CRC32_check+0x64>)
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fdf8 	bl	8000a14 <XMC_FCE_GetCRCResult>
  if (fce_status == XMC_FCE_STATUS_OK)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10f      	bne.n	8000e4a <FLASHPROG_CRC32_check+0x5a>
  {
    crc32_expected = *(ptr_startaddress + size_bytes/4 - 1);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e32:	3b01      	subs	r3, #1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
    if (crc32_result != crc32_expected)
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d001      	beq.n	8000e4a <FLASHPROG_CRC32_check+0x5a>
    {
      return FLASH_CRC_ERROR;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e000      	b.n	8000e4c <FLASHPROG_CRC32_check+0x5c>
    }
  }
  return FLASH_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	1ffe882c 	.word	0x1ffe882c

08000e58 <XMC_SCU_RESET_ClearDeviceResetReason>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* Clear RSTSTAT.RSTSTAT bitfield */
  SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <XMC_SCU_RESET_ClearDeviceResetReason+0x14>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	609a      	str	r2, [r3, #8]
}
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	50004400 	.word	0x50004400

08000e70 <BL_FlashABM0_Restart>:

/****************************************************************
* API IMPLEMENTATION
***************************************************************/
void BL_FlashABM0_Restart(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Restart in alternative bootmode 0 */
  /* Clear the reset cause field for proper reset detection of the ssw */
  XMC_SCU_RESET_ClearDeviceResetReason();
 8000e74:	f7ff fff0 	bl	8000e58 <XMC_SCU_RESET_ClearDeviceResetReason>
  /* Set ABM0 as boot mode in SWCON field of STCON register */
  XMC_SCU_SetBootMode(XMC_SCU_BOOTMODE_ABM0);
 8000e78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e7c:	f7ff fd20 	bl	80008c0 <XMC_SCU_SetBootMode>
  /* Trigger power on reset */
  PPB->AIRCR = 1 << PPB_AIRCR_SYSRESETREQ_Pos
 8000e80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e84:	4a01      	ldr	r2, [pc, #4]	; (8000e8c <BL_FlashABM0_Restart+0x1c>)
 8000e86:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
		            |0x5FA<<PPB_AIRCR_VECTKEY_Pos
					| 0x1 << PPB_AIRCR_PRIGROUP_Pos;
}
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	05fa0104 	.word	0x05fa0104

08000e90 <BL_Normal_Restart>:

void BL_Normal_Restart(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Restart in alternative bootmode 0 */
  /* Clear the reset cause field for proper reset detection of the ssw */
  XMC_SCU_RESET_ClearDeviceResetReason();
 8000e94:	f7ff ffe0 	bl	8000e58 <XMC_SCU_RESET_ClearDeviceResetReason>
  /* Set ABM0 as boot mode in SWCON field of STCON register */
  XMC_SCU_SetBootMode(XMC_SCU_BOOTMODE_NORMAL);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fd11 	bl	80008c0 <XMC_SCU_SetBootMode>
  /* Trigger power on reset */
  PPB->AIRCR = 1 << PPB_AIRCR_SYSRESETREQ_Pos
 8000e9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ea2:	4a02      	ldr	r2, [pc, #8]	; (8000eac <BL_Normal_Restart+0x1c>)
 8000ea4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
		            |0x5FA<<PPB_AIRCR_VECTKEY_Pos
					| 0x1 << PPB_AIRCR_PRIGROUP_Pos;
}
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	05fa0104 	.word	0x05fa0104

08000eb0 <main>:
 * @brief main() - Application entry point
 *
 * Initializes the DAVE(TM) subsystem, LEDs and USB device stack. Processing of the USB stack.
 */
uint32_t main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  uint32_t firmware_size_bytes;
  uint32_t* ptr_backupdata = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  firmware_size_bytes = (START_ADDRESS_BACKUP_PARTITION + METAINFO_OFFSET / 4)[63];
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <main+0x98>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	603b      	str	r3, [r7, #0]

  /* check metainfo if firmware for update is available inside backup partition */
  if ( (firmware_size_bytes > 0) && (firmware_size_bytes < APP_PARTITION_MAX_SIZE) )
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d025      	beq.n	8000f12 <main+0x62>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ecc:	d221      	bcs.n	8000f12 <main+0x62>
  {
    /* metainfo indicates a new firmware is available inside backup partition */
    /* check CRC32 of firmware inside backup partition */
    if (FLASHPROG_CRC32_check(START_ADDRESS_BACKUP_PARTITION,
 8000ece:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	f7ff ff8c 	bl	8000df0 <FLASHPROG_CRC32_check>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d119      	bne.n	8000f12 <main+0x62>
    		                  firmware_size_bytes) == FLASH_OK)
    {
      /* CRC32 of backup partition is OK - start programming */

      /* program new firmware into application partition */
      FLASHPROG_Init(START_ADDRESS_APP_PARTITION,
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <main+0x9c>)
 8000ee0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8000ee4:	2264      	movs	r2, #100	; 0x64
 8000ee6:	23c8      	movs	r3, #200	; 0xc8
 8000ee8:	f7ff fe4a 	bl	8000b80 <FLASHPROG_Init>
                     APP_PARTITION_MAX_SIZE,
                     FLASH_OPT_ERASE,
                     FLASH_OPT_CHECK);
      FLASHPROG_Data(START_ADDRESS_BACKUP_PARTITION, firmware_size_bytes);
 8000eec:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 8000ef0:	6839      	ldr	r1, [r7, #0]
 8000ef2:	f7ff fe81 	bl	8000bf8 <FLASHPROG_Data>
      FLASHPROG_Close();
 8000ef6:	f7ff ff23 	bl	8000d40 <FLASHPROG_Close>

      /* delete EEPROM content (2nd 64k sector) */
      FLASHPROG_Delete_physical_sector(XMC_FLASH_PHY_SECTOR_4);
 8000efa:	4815      	ldr	r0, [pc, #84]	; (8000f50 <main+0xa0>)
 8000efc:	f7ff ff4c 	bl	8000d98 <FLASHPROG_Delete_physical_sector>

      /* Check CRC32 of firmware inside application partition*/
      if (FLASHPROG_CRC32_check(START_ADDRESS_APP_PARTITION,
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <main+0x9c>)
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	f7ff ff74 	bl	8000df0 <FLASHPROG_CRC32_check>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <main+0x62>
    		                          firmware_size_bytes) != FLASH_OK)
      {
        /* Restart to retry programming */
        BL_Normal_Restart();
 8000f0e:	f7ff ffbf 	bl	8000e90 <BL_Normal_Restart>
  /* CRC32 checked software from backup partition was just successfully programmed
   * into application partition.
   * In any case, make sure backup partition is erased before restarting firmware inside
   * application partition.
   */
  ptr_backupdata = START_ADDRESS_BACKUP_PARTITION;
 8000f12:	f04f 6341 	mov.w	r3, #202375168	; 0xc100000
 8000f16:	607b      	str	r3, [r7, #4]
  while(ptr_backupdata<START_ADDRESS_BACKUP_PARTITION + BACKUP_PARTITION_MAX_SIZE / 4)
 8000f18:	e00a      	b.n	8000f30 <main+0x80>
  {
    /* is erase needed? */
    if (*ptr_backupdata!=0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <main+0x7a>
    {
      /* erase backup partition */
      FLASHPROG_Delete_physical_sectors(ptr_backupdata, 1);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	2101      	movs	r1, #1
 8000f26:	f7ff ff41 	bl	8000dac <FLASHPROG_Delete_physical_sectors>
    }
    ptr_backupdata++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	607b      	str	r3, [r7, #4]
   * into application partition.
   * In any case, make sure backup partition is erased before restarting firmware inside
   * application partition.
   */
  ptr_backupdata = START_ADDRESS_BACKUP_PARTITION;
  while(ptr_backupdata<START_ADDRESS_BACKUP_PARTITION + BACKUP_PARTITION_MAX_SIZE / 4)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 6f42 	cmp.w	r3, #203423744	; 0xc200000
 8000f36:	d3f0      	bcc.n	8000f1a <main+0x6a>
    }
    ptr_backupdata++;
  }

  /* Restart inside application partition */
  BL_FlashABM0_Restart();
 8000f38:	f7ff ff9a 	bl	8000e70 <BL_FlashABM0_Restart>

  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	0c1ffffc 	.word	0x0c1ffffc
 8000f4c:	0c020000 	.word	0x0c020000
 8000f50:	0c010000 	.word	0x0c010000

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <__libc_init_array+0x3c>)
 8000f58:	4c0e      	ldr	r4, [pc, #56]	; (8000f94 <__libc_init_array+0x40>)
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	10a4      	asrs	r4, r4, #2
 8000f5e:	2500      	movs	r5, #0
 8000f60:	461e      	mov	r6, r3
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	d004      	beq.n	8000f70 <__libc_init_array+0x1c>
 8000f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f6a:	4798      	blx	r3
 8000f6c:	3501      	adds	r5, #1
 8000f6e:	e7f8      	b.n	8000f62 <__libc_init_array+0xe>
 8000f70:	f7ff fd4a 	bl	8000a08 <_init>
 8000f74:	4c08      	ldr	r4, [pc, #32]	; (8000f98 <__libc_init_array+0x44>)
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <__libc_init_array+0x48>)
 8000f78:	1ae4      	subs	r4, r4, r3
 8000f7a:	10a4      	asrs	r4, r4, #2
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	461e      	mov	r6, r3
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	d004      	beq.n	8000f8e <__libc_init_array+0x3a>
 8000f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f88:	4798      	blx	r3
 8000f8a:	3501      	adds	r5, #1
 8000f8c:	e7f8      	b.n	8000f80 <__libc_init_array+0x2c>
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	1ffe8838 	.word	0x1ffe8838
 8000f94:	1ffe8838 	.word	0x1ffe8838
 8000f98:	1ffe8838 	.word	0x1ffe8838
 8000f9c:	1ffe8838 	.word	0x1ffe8838
