
ETHCAT_FWUPDATE_SSC_APPLICATION_XMC48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ae96  08020000  0c020000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  2 .data         00000d18  1ffe8800  0c02ae96  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001864  1ffe9518  0c02bbae  00019518  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 000015b0  00000000  00000000  00019518  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000225c0  00000000  00000000  0001aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052ef  00000000  00000000  0003d088  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b749  00000000  00000000  00042377  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000056bc  00000000  00000000  0004dac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000d950  00000000  00000000  0005317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad92  00000000  00000000  00060acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001298  00000000  00000000  0006b85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000cd2  00000000  00000000  0006caf6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <__Vectors>:
 8020000:	00 88 fe 1f 01 02 02 08 99 02 02 08 99 02 02 08     ................
 8020010:	99 02 02 08 99 02 02 08 99 02 02 08 00 00 00 00     ................
	...
 802002c:	99 02 02 08 99 02 02 08 00 00 00 00 99 02 02 08     ................
 802003c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802004c:	99 02 02 08 99 02 02 08 61 a2 02 08 99 02 02 08     ........a.......
 802005c:	99 02 02 08 6d a2 02 08 00 00 00 00 00 00 00 00     ....m...........
 802006c:	00 00 00 00 99 02 02 08 00 00 00 00 99 02 02 08     ................
 802007c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802008c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802009c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200ac:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200bc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200cc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200dc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200ec:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200fc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802010c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802011c:	99 02 02 08 99 02 02 08 09 98 02 08 99 02 02 08     ................
 802012c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802013c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802014c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802015c:	99 02 02 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 802016c:	00 00 00 00 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802017c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802018c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802019c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201ac:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201bc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201cc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201dc:	00 00 00 00 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201ec:	99 02 02 08 99 02 02 08 fd 97 02 08 99 02 02 08     ................
 80201fc:	00 00 00 00                                         ....

08020200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8020200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8020278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8020204:	481d      	ldr	r0, [pc, #116]	; (802027c <__zero_table_end__+0x4>)
    blx  r0
 8020206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8020208:	4c1d      	ldr	r4, [pc, #116]	; (8020280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 802020a:	4d1e      	ldr	r5, [pc, #120]	; (8020284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 802020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 802020e:	da09      	bge.n	8020224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8020210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8020212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8020214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8020216:	3b04      	subs	r3, #4
	ittt	ge
 8020218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 802021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 802021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 802021e:	e7fa      	bge.n	8020216 <Reset_Handler+0x16>

	adds	r4, #12
 8020220:	340c      	adds	r4, #12
	b	.L_loop0
 8020222:	e7f3      	b.n	802020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8020224:	4b18      	ldr	r3, [pc, #96]	; (8020288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8020226:	4c19      	ldr	r4, [pc, #100]	; (802028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8020228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 802022a:	da08      	bge.n	802023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 802022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 802022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8020230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8020232:	3a04      	subs	r2, #4
	itt	ge
 8020234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8020236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8020238:	e7fb      	bge.n	8020232 <Reset_Handler+0x32>

	adds	r3, #8
 802023a:	3308      	adds	r3, #8
	b	.L_loop2
 802023c:	e7f4      	b.n	8020228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 802023e:	4814      	ldr	r0, [pc, #80]	; (8020290 <__zero_table_end__+0x18>)
    blx  r0
 8020240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8020242:	4814      	ldr	r0, [pc, #80]	; (8020294 <__zero_table_end__+0x1c>)
    blx  r0
 8020244:	4780      	blx	r0
	...

08020248 <__copy_table_start__>:
 8020248:	0c02ae96 	.word	0x0c02ae96
 802024c:	1ffe8800 	.word	0x1ffe8800
 8020250:	00000d18 	.word	0x00000d18
 8020254:	0c02ae96 	.word	0x0c02ae96
 8020258:	1ffe8800 	.word	0x1ffe8800
 802025c:	00000000 	.word	0x00000000

08020260 <__copy_table_end__>:
 8020260:	1ffe9518 	.word	0x1ffe9518
 8020264:	00001864 	.word	0x00001864
 8020268:	20000000 	.word	0x20000000
 802026c:	00000000 	.word	0x00000000
 8020270:	20000000 	.word	0x20000000
 8020274:	00000000 	.word	0x00000000

08020278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8020278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 802027c:	0802029d 	.word	0x0802029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8020280:	08020248 	.word	0x08020248
	ldr	r5, =__copy_table_end__
 8020284:	08020260 	.word	0x08020260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8020288:	08020260 	.word	0x08020260
	ldr	r4, =__zero_table_end__
 802028c:	08020278 	.word	0x08020278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8020290:	0802a285 	.word	0x0802a285
    blx  r0
#endif

    ldr  r0, =main
 8020294:	0802a241 	.word	0x0802a241

08020298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8020298:	e7fe      	b.n	8020298 <BusFault_Handler>
	...

0802029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 802029c:	b598      	push	{r3, r4, r7, lr}
 802029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80202a0:	4a05      	ldr	r2, [pc, #20]	; (80202b8 <SystemInit+0x1c>)
 80202a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80202a6:	4614      	mov	r4, r2
 80202a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80202aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80202ae:	f009 fae7 	bl	8029880 <SystemCoreSetup>
  SystemCoreClockSetup();
 80202b2:	f009 fb63 	bl	802997c <SystemCoreClockSetup>
}
 80202b6:	bd98      	pop	{r3, r4, r7, pc}
 80202b8:	2003ffc4 	.word	0x2003ffc4

080202bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	b084      	sub	sp, #16
 80202c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80202c2:	4b2f      	ldr	r3, [pc, #188]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 80202c4:	68db      	ldr	r3, [r3, #12]
 80202c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d03e      	beq.n	802034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80202ce:	4b2d      	ldr	r3, [pc, #180]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202d0:	68db      	ldr	r3, [r3, #12]
 80202d2:	f003 0301 	and.w	r3, r3, #1
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d002      	beq.n	80202e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80202da:	4b2b      	ldr	r3, [pc, #172]	; (8020388 <SystemCoreClockUpdate+0xcc>)
 80202dc:	60fb      	str	r3, [r7, #12]
 80202de:	e002      	b.n	80202e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80202e0:	f009 fb2e 	bl	8029940 <OSCHP_GetFrequency>
 80202e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80202e6:	4b27      	ldr	r3, [pc, #156]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	f003 0304 	and.w	r3, r3, #4
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d020      	beq.n	8020334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80202f2:	4b24      	ldr	r3, [pc, #144]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202f4:	689b      	ldr	r3, [r3, #8]
 80202f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80202fa:	0e1b      	lsrs	r3, r3, #24
 80202fc:	3301      	adds	r3, #1
 80202fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020300:	4b20      	ldr	r3, [pc, #128]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020302:	689b      	ldr	r3, [r3, #8]
 8020304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8020308:	0a1b      	lsrs	r3, r3, #8
 802030a:	3301      	adds	r3, #1
 802030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 802030e:	4b1d      	ldr	r3, [pc, #116]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020310:	689b      	ldr	r3, [r3, #8]
 8020312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8020316:	0c1b      	lsrs	r3, r3, #16
 8020318:	3301      	adds	r3, #1
 802031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 802031c:	68bb      	ldr	r3, [r7, #8]
 802031e:	683a      	ldr	r2, [r7, #0]
 8020320:	fb02 f303 	mul.w	r3, r2, r3
 8020324:	68fa      	ldr	r2, [r7, #12]
 8020326:	fbb2 f3f3 	udiv	r3, r2, r3
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	fb02 f303 	mul.w	r3, r2, r3
 8020330:	60fb      	str	r3, [r7, #12]
 8020332:	e00d      	b.n	8020350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020334:	4b13      	ldr	r3, [pc, #76]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020336:	689b      	ldr	r3, [r3, #8]
 8020338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802033c:	3301      	adds	r3, #1
 802033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8020340:	68fa      	ldr	r2, [r7, #12]
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	fbb2 f3f3 	udiv	r3, r2, r3
 8020348:	60fb      	str	r3, [r7, #12]
 802034a:	e001      	b.n	8020350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 802034c:	4b0e      	ldr	r3, [pc, #56]	; (8020388 <SystemCoreClockUpdate+0xcc>)
 802034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8020350:	4b0b      	ldr	r3, [pc, #44]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 8020352:	68db      	ldr	r3, [r3, #12]
 8020354:	b2db      	uxtb	r3, r3
 8020356:	3301      	adds	r3, #1
 8020358:	68fa      	ldr	r2, [r7, #12]
 802035a:	fbb2 f3f3 	udiv	r3, r2, r3
 802035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8020360:	4b07      	ldr	r3, [pc, #28]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 8020362:	691b      	ldr	r3, [r3, #16]
 8020364:	f003 0301 	and.w	r3, r3, #1
 8020368:	3301      	adds	r3, #1
 802036a:	68fa      	ldr	r2, [r7, #12]
 802036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8020372:	4a06      	ldr	r2, [pc, #24]	; (802038c <SystemCoreClockUpdate+0xd0>)
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	6013      	str	r3, [r2, #0]
}
 8020378:	3710      	adds	r7, #16
 802037a:	46bd      	mov	sp, r7
 802037c:	bd80      	pop	{r7, pc}
 802037e:	bf00      	nop
 8020380:	50004600 	.word	0x50004600
 8020384:	50004710 	.word	0x50004710
 8020388:	016e3600 	.word	0x016e3600
 802038c:	2003ffc0 	.word	0x2003ffc0

08020390 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 8020390:	b480      	push	{r7}
 8020392:	b083      	sub	sp, #12
 8020394:	af00      	add	r7, sp, #0
 8020396:	4603      	mov	r3, r0
 8020398:	80fb      	strh	r3, [r7, #6]

}
 802039a:	370c      	adds	r7, #12
 802039c:	46bd      	mov	sp, r7
 802039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a2:	4770      	bx	lr

080203a4 <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 80203a4:	b480      	push	{r7}
 80203a6:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203a8:	2300      	movs	r3, #0
}
 80203aa:	4618      	mov	r0, r3
 80203ac:	46bd      	mov	sp, r7
 80203ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b2:	4770      	bx	lr

080203b4 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////
void FWUPDATE_StateTransitionInit(void);
UINT16 APPL_StopMailboxHandler(void)
{
 80203b4:	b580      	push	{r7, lr}
 80203b6:	af00      	add	r7, sp, #0
	FWUPDATE_StateTransitionInit();
 80203b8:	f009 fb88 	bl	8029acc <FWUPDATE_StateTransitionInit>
    return ALSTATUSCODE_NOERROR;
 80203bc:	2300      	movs	r3, #0
}
 80203be:	4618      	mov	r0, r3
 80203c0:	bd80      	pop	{r7, pc}
 80203c2:	bf00      	nop

080203c4 <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 80203c4:	b480      	push	{r7}
 80203c6:	b083      	sub	sp, #12
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 80203cc:	2300      	movs	r3, #0
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	370c      	adds	r7, #12
 80203d2:	46bd      	mov	sp, r7
 80203d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d8:	4770      	bx	lr
 80203da:	bf00      	nop

080203dc <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 80203dc:	b480      	push	{r7}
 80203de:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203e0:	2300      	movs	r3, #0
}
 80203e2:	4618      	mov	r0, r3
 80203e4:	46bd      	mov	sp, r7
 80203e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ea:	4770      	bx	lr

080203ec <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 80203ec:	b480      	push	{r7}
 80203ee:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203f0:	2300      	movs	r3, #0
}
 80203f2:	4618      	mov	r0, r3
 80203f4:	46bd      	mov	sp, r7
 80203f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fa:	4770      	bx	lr

080203fc <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 80203fc:	b480      	push	{r7}
 80203fe:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020400:	2300      	movs	r3, #0
}
 8020402:	4618      	mov	r0, r3
 8020404:	46bd      	mov	sp, r7
 8020406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802040a:	4770      	bx	lr

0802040c <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 802040c:	b590      	push	{r4, r7, lr}
 802040e:	b089      	sub	sp, #36	; 0x24
 8020410:	af00      	add	r7, sp, #0
 8020412:	6078      	str	r0, [r7, #4]
 8020414:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 8020416:	2300      	movs	r3, #0
 8020418:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 802041a:	2300      	movs	r3, #0
 802041c:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 802041e:	2300      	movs	r3, #0
 8020420:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 8020422:	2300      	movs	r3, #0
 8020424:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 8020426:	2300      	movs	r3, #0
 8020428:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 802042a:	2300      	movs	r3, #0
 802042c:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 802042e:	2300      	movs	r3, #0
 8020430:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8020432:	2300      	movs	r3, #0
 8020434:	82fb      	strh	r3, [r7, #22]
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8020436:	2300      	movs	r3, #0
 8020438:	833b      	strh	r3, [r7, #24]
 802043a:	e039      	b.n	80204b0 <APPL_GenerateMapping+0xa4>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 802043c:	8b3b      	ldrh	r3, [r7, #24]
 802043e:	4a4b      	ldr	r2, [pc, #300]	; (802056c <APPL_GenerateMapping+0x160>)
 8020440:	005b      	lsls	r3, r3, #1
 8020442:	4413      	add	r3, r2
 8020444:	885b      	ldrh	r3, [r3, #2]
 8020446:	4618      	mov	r0, r3
 8020448:	f003 ff54 	bl	80242f4 <OBJ_GetObjectHandle>
 802044c:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 802044e:	693b      	ldr	r3, [r7, #16]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d025      	beq.n	80204a0 <APPL_GenerateMapping+0x94>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8020454:	693b      	ldr	r3, [r7, #16]
 8020456:	699b      	ldr	r3, [r3, #24]
 8020458:	881b      	ldrh	r3, [r3, #0]
 802045a:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 802045c:	2300      	movs	r3, #0
 802045e:	82fb      	strh	r3, [r7, #22]
 8020460:	e019      	b.n	8020496 <APPL_GenerateMapping+0x8a>
            {
                pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8020462:	693b      	ldr	r3, [r7, #16]
 8020464:	699c      	ldr	r4, [r3, #24]
 8020466:	8afb      	ldrh	r3, [r7, #22]
 8020468:	b2db      	uxtb	r3, r3
 802046a:	3301      	adds	r3, #1
 802046c:	b2db      	uxtb	r3, r3
 802046e:	4618      	mov	r0, r3
 8020470:	6939      	ldr	r1, [r7, #16]
 8020472:	f004 f9bd 	bl	80247f0 <OBJ_GetEntryOffset>
 8020476:	4603      	mov	r3, r0
 8020478:	08db      	lsrs	r3, r3, #3
 802047a:	b29b      	uxth	r3, r3
 802047c:	4423      	add	r3, r4
 802047e:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8020480:	68bb      	ldr	r3, [r7, #8]
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	b29b      	uxth	r3, r3
 8020486:	b2db      	uxtb	r3, r3
 8020488:	b29a      	uxth	r2, r3
 802048a:	8b7b      	ldrh	r3, [r7, #26]
 802048c:	4413      	add	r3, r2
 802048e:	837b      	strh	r3, [r7, #26]
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
        if(pPDO != NULL)
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020490:	8afb      	ldrh	r3, [r7, #22]
 8020492:	3301      	adds	r3, #1
 8020494:	82fb      	strh	r3, [r7, #22]
 8020496:	8afa      	ldrh	r2, [r7, #22]
 8020498:	89fb      	ldrh	r3, [r7, #14]
 802049a:	429a      	cmp	r2, r3
 802049c:	d3e1      	bcc.n	8020462 <APPL_GenerateMapping+0x56>
 802049e:	e004      	b.n	80204aa <APPL_GenerateMapping+0x9e>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 80204a0:	2300      	movs	r3, #0
 80204a2:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 80204a4:	2325      	movs	r3, #37	; 0x25
 80204a6:	83fb      	strh	r3, [r7, #30]
            break;
 80204a8:	e007      	b.n	80204ba <APPL_GenerateMapping+0xae>
    UINT16 PDOSubindex0 = 0;
    UINT32 *pPDOEntry = NULL;
    UINT16 PDOEntryCnt = 0;
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80204aa:	8b3b      	ldrh	r3, [r7, #24]
 80204ac:	3301      	adds	r3, #1
 80204ae:	833b      	strh	r3, [r7, #24]
 80204b0:	4b2e      	ldr	r3, [pc, #184]	; (802056c <APPL_GenerateMapping+0x160>)
 80204b2:	881b      	ldrh	r3, [r3, #0]
 80204b4:	8b3a      	ldrh	r2, [r7, #24]
 80204b6:	429a      	cmp	r2, r3
 80204b8:	d3c0      	bcc.n	802043c <APPL_GenerateMapping+0x30>
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
            break;
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 80204ba:	8b7b      	ldrh	r3, [r7, #26]
 80204bc:	3307      	adds	r3, #7
 80204be:	10db      	asrs	r3, r3, #3
 80204c0:	837b      	strh	r3, [r7, #26]

    if(result == 0)
 80204c2:	8bfb      	ldrh	r3, [r7, #30]
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d141      	bne.n	802054c <APPL_GenerateMapping+0x140>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80204c8:	2300      	movs	r3, #0
 80204ca:	833b      	strh	r3, [r7, #24]
 80204cc:	e039      	b.n	8020542 <APPL_GenerateMapping+0x136>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 80204ce:	8b3b      	ldrh	r3, [r7, #24]
 80204d0:	4a27      	ldr	r2, [pc, #156]	; (8020570 <APPL_GenerateMapping+0x164>)
 80204d2:	005b      	lsls	r3, r3, #1
 80204d4:	4413      	add	r3, r2
 80204d6:	885b      	ldrh	r3, [r3, #2]
 80204d8:	4618      	mov	r0, r3
 80204da:	f003 ff0b 	bl	80242f4 <OBJ_GetObjectHandle>
 80204de:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 80204e0:	693b      	ldr	r3, [r7, #16]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d025      	beq.n	8020532 <APPL_GenerateMapping+0x126>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80204e6:	693b      	ldr	r3, [r7, #16]
 80204e8:	699b      	ldr	r3, [r3, #24]
 80204ea:	881b      	ldrh	r3, [r3, #0]
 80204ec:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80204ee:	2300      	movs	r3, #0
 80204f0:	82fb      	strh	r3, [r7, #22]
 80204f2:	e019      	b.n	8020528 <APPL_GenerateMapping+0x11c>
                {
                    pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 80204f4:	693b      	ldr	r3, [r7, #16]
 80204f6:	699c      	ldr	r4, [r3, #24]
 80204f8:	8afb      	ldrh	r3, [r7, #22]
 80204fa:	b2db      	uxtb	r3, r3
 80204fc:	3301      	adds	r3, #1
 80204fe:	b2db      	uxtb	r3, r3
 8020500:	4618      	mov	r0, r3
 8020502:	6939      	ldr	r1, [r7, #16]
 8020504:	f004 f974 	bl	80247f0 <OBJ_GetEntryOffset>
 8020508:	4603      	mov	r3, r0
 802050a:	08db      	lsrs	r3, r3, #3
 802050c:	b29b      	uxth	r3, r3
 802050e:	4423      	add	r3, r4
 8020510:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8020512:	68bb      	ldr	r3, [r7, #8]
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	b29b      	uxth	r3, r3
 8020518:	b2db      	uxtb	r3, r3
 802051a:	b29a      	uxth	r2, r3
 802051c:	8bbb      	ldrh	r3, [r7, #28]
 802051e:	4413      	add	r3, r2
 8020520:	83bb      	strh	r3, [r7, #28]
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
            if(pPDO != NULL)
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020522:	8afb      	ldrh	r3, [r7, #22]
 8020524:	3301      	adds	r3, #1
 8020526:	82fb      	strh	r3, [r7, #22]
 8020528:	8afa      	ldrh	r2, [r7, #22]
 802052a:	89fb      	ldrh	r3, [r7, #14]
 802052c:	429a      	cmp	r2, r3
 802052e:	d3e1      	bcc.n	80204f4 <APPL_GenerateMapping+0xe8>
 8020530:	e004      	b.n	802053c <APPL_GenerateMapping+0x130>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 8020532:	2300      	movs	r3, #0
 8020534:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8020536:	2324      	movs	r3, #36	; 0x24
 8020538:	83fb      	strh	r3, [r7, #30]
                break;
 802053a:	e007      	b.n	802054c <APPL_GenerateMapping+0x140>
    OutputSize = (OutputSize + 7) >> 3;

    if(result == 0)
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 802053c:	8b3b      	ldrh	r3, [r7, #24]
 802053e:	3301      	adds	r3, #1
 8020540:	833b      	strh	r3, [r7, #24]
 8020542:	4b0b      	ldr	r3, [pc, #44]	; (8020570 <APPL_GenerateMapping+0x164>)
 8020544:	881b      	ldrh	r3, [r3, #0]
 8020546:	8b3a      	ldrh	r2, [r7, #24]
 8020548:	429a      	cmp	r2, r3
 802054a:	d3c0      	bcc.n	80204ce <APPL_GenerateMapping+0xc2>
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
                break;
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 802054c:	8bbb      	ldrh	r3, [r7, #28]
 802054e:	3307      	adds	r3, #7
 8020550:	10db      	asrs	r3, r3, #3
 8020552:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	8bba      	ldrh	r2, [r7, #28]
 8020558:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	8b7a      	ldrh	r2, [r7, #26]
 802055e:	801a      	strh	r2, [r3, #0]
    return result;
 8020560:	8bfb      	ldrh	r3, [r7, #30]
}
 8020562:	4618      	mov	r0, r3
 8020564:	3724      	adds	r7, #36	; 0x24
 8020566:	46bd      	mov	sp, r7
 8020568:	bd90      	pop	{r4, r7, pc}
 802056a:	bf00      	nop
 802056c:	1ffe8868 	.word	0x1ffe8868
 8020570:	1ffe886c 	.word	0x1ffe886c

08020574 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 8020574:	b580      	push	{r7, lr}
 8020576:	b082      	sub	sp, #8
 8020578:	af00      	add	r7, sp, #0
 802057a:	6078      	str	r0, [r7, #4]
	memcpy(pData, &(((UINT16 *)&IN_GENERIC0x6000)[1]), SIZEOF(IN_GENERIC0x6000));
 802057c:	6878      	ldr	r0, [r7, #4]
 802057e:	4903      	ldr	r1, [pc, #12]	; (802058c <APPL_InputMapping+0x18>)
 8020580:	220c      	movs	r2, #12
 8020582:	f009 feb5 	bl	802a2f0 <memcpy>
}
 8020586:	3708      	adds	r7, #8
 8020588:	46bd      	mov	sp, r7
 802058a:	bd80      	pop	{r7, pc}
 802058c:	1ffe8872 	.word	0x1ffe8872

08020590 <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 8020590:	b580      	push	{r7, lr}
 8020592:	b082      	sub	sp, #8
 8020594:	af00      	add	r7, sp, #0
 8020596:	6078      	str	r0, [r7, #4]
	memcpy(&(((UINT16 *)&OUT_GENERIC0x7000)[1]), pData, SIZEOF(IN_GENERIC0x6000));
 8020598:	4803      	ldr	r0, [pc, #12]	; (80205a8 <APPL_OutputMapping+0x18>)
 802059a:	6879      	ldr	r1, [r7, #4]
 802059c:	220c      	movs	r2, #12
 802059e:	f009 fea7 	bl	802a2f0 <memcpy>
}
 80205a2:	3708      	adds	r7, #8
 80205a4:	46bd      	mov	sp, r7
 80205a6:	bd80      	pop	{r7, pc}
 80205a8:	1ffe887e 	.word	0x1ffe887e

080205ac <APPL_Application>:
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////

void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC);
void APPL_Application(void)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	af00      	add	r7, sp, #0
	process_app(&OUT_GENERIC0x7000, &IN_GENERIC0x6000);
 80205b0:	4802      	ldr	r0, [pc, #8]	; (80205bc <APPL_Application+0x10>)
 80205b2:	4903      	ldr	r1, [pc, #12]	; (80205c0 <APPL_Application+0x14>)
 80205b4:	f009 fd7c 	bl	802a0b0 <process_app>
}
 80205b8:	bd80      	pop	{r7, pc}
 80205ba:	bf00      	nop
 80205bc:	1ffe887c 	.word	0x1ffe887c
 80205c0:	1ffe8870 	.word	0x1ffe8870

080205c4 <BL_Start>:
 \param    State        Current state

 \brief Dummy BL_Start function
*////////////////////////////////////////////////////////////////////////////////////////
void BL_Start( UINT8 State)
{
 80205c4:	b480      	push	{r7}
 80205c6:	b083      	sub	sp, #12
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	4603      	mov	r3, r0
 80205cc:	71fb      	strb	r3, [r7, #7]
}
 80205ce:	370c      	adds	r7, #12
 80205d0:	46bd      	mov	sp, r7
 80205d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d6:	4770      	bx	lr

080205d8 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 80205d8:	b480      	push	{r7}
 80205da:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 80205dc:	4b03      	ldr	r3, [pc, #12]	; (80205ec <COE_GetObjectDictionary+0x14>)
 80205de:	681b      	ldr	r3, [r3, #0]
}
 80205e0:	4618      	mov	r0, r3
 80205e2:	46bd      	mov	sp, r7
 80205e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e8:	4770      	bx	lr
 80205ea:	bf00      	nop
 80205ec:	1ffe951c 	.word	0x1ffe951c

080205f0 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 80205f0:	b580      	push	{r7, lr}
 80205f2:	b082      	sub	sp, #8
 80205f4:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 80205f6:	4b34      	ldr	r3, [pc, #208]	; (80206c8 <COE_ObjInit+0xd8>)
 80205f8:	2220      	movs	r2, #32
 80205fa:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 80205fc:	4b32      	ldr	r3, [pc, #200]	; (80206c8 <COE_ObjInit+0xd8>)
 80205fe:	2200      	movs	r2, #0
 8020600:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 8020602:	4b31      	ldr	r3, [pc, #196]	; (80206c8 <COE_ObjInit+0xd8>)
 8020604:	2200      	movs	r2, #0
 8020606:	605a      	str	r2, [r3, #4]
    /* only for DC Mode important: the subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the outputs are put to the hardware to allow the
        master a very exactly calculation of delay times*/
    sSyncManOutPar.u32ShiftTime     = 0;
 8020608:	4b2f      	ldr	r3, [pc, #188]	; (80206c8 <COE_ObjInit+0xd8>)
 802060a:	2200      	movs	r2, #0
 802060c:	609a      	str	r2, [r3, #8]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 802060e:	4b2e      	ldr	r3, [pc, #184]	; (80206c8 <COE_ObjInit+0xd8>)
 8020610:	f244 021f 	movw	r2, #16415	; 0x401f
 8020614:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8020616:	4b2c      	ldr	r3, [pc, #176]	; (80206c8 <COE_ObjInit+0xd8>)
 8020618:	4a2c      	ldr	r2, [pc, #176]	; (80206cc <COE_ObjInit+0xdc>)
 802061a:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 802061c:	4b2a      	ldr	r3, [pc, #168]	; (80206c8 <COE_ObjInit+0xd8>)
 802061e:	2200      	movs	r2, #0
 8020620:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 8020622:	4b29      	ldr	r3, [pc, #164]	; (80206c8 <COE_ObjInit+0xd8>)
 8020624:	2200      	movs	r2, #0
 8020626:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8020628:	4b27      	ldr	r3, [pc, #156]	; (80206c8 <COE_ObjInit+0xd8>)
 802062a:	2200      	movs	r2, #0
 802062c:	621a      	str	r2, [r3, #32]

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 802062e:	4b26      	ldr	r3, [pc, #152]	; (80206c8 <COE_ObjInit+0xd8>)
 8020630:	2200      	movs	r2, #0
 8020632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_START(V5.11) ECAT4*/
    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 8020636:	4b26      	ldr	r3, [pc, #152]	; (80206d0 <COE_ObjInit+0xe0>)
 8020638:	2220      	movs	r2, #32
 802063a:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 802063c:	4b24      	ldr	r3, [pc, #144]	; (80206d0 <COE_ObjInit+0xe0>)
 802063e:	2200      	movs	r2, #0
 8020640:	805a      	strh	r2, [r3, #2]

    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 8020642:	4b21      	ldr	r3, [pc, #132]	; (80206c8 <COE_ObjInit+0xd8>)
 8020644:	685b      	ldr	r3, [r3, #4]
 8020646:	4a22      	ldr	r2, [pc, #136]	; (80206d0 <COE_ObjInit+0xe0>)
 8020648:	6053      	str	r3, [r2, #4]
    /* only for DC Mode important: subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the inputs are got to the hardware to allow the
        master a very exactly calculation of delay times,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManInPar.u32ShiftTime     = 0;
 802064a:	4b21      	ldr	r3, [pc, #132]	; (80206d0 <COE_ObjInit+0xe0>)
 802064c:	2200      	movs	r2, #0
 802064e:	609a      	str	r2, [r3, #8]
    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 8020650:	4b1d      	ldr	r3, [pc, #116]	; (80206c8 <COE_ObjInit+0xd8>)
 8020652:	899a      	ldrh	r2, [r3, #12]
 8020654:	4b1e      	ldr	r3, [pc, #120]	; (80206d0 <COE_ObjInit+0xe0>)
 8020656:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8020658:	4b1d      	ldr	r3, [pc, #116]	; (80206d0 <COE_ObjInit+0xe0>)
 802065a:	4a1c      	ldr	r2, [pc, #112]	; (80206cc <COE_ObjInit+0xdc>)
 802065c:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 802065e:	4b1c      	ldr	r3, [pc, #112]	; (80206d0 <COE_ObjInit+0xe0>)
 8020660:	2200      	movs	r2, #0
 8020662:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8020664:	4b1a      	ldr	r3, [pc, #104]	; (80206d0 <COE_ObjInit+0xe0>)
 8020666:	2200      	movs	r2, #0
 8020668:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 802066a:	4b19      	ldr	r3, [pc, #100]	; (80206d0 <COE_ObjInit+0xe0>)
 802066c:	2200      	movs	r2, #0
 802066e:	621a      	str	r2, [r3, #32]

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8020670:	4b17      	ldr	r3, [pc, #92]	; (80206d0 <COE_ObjInit+0xe0>)
 8020672:	2200      	movs	r2, #0
 8020674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8020678:	4b16      	ldr	r3, [pc, #88]	; (80206d4 <COE_ObjInit+0xe4>)
 802067a:	2200      	movs	r2, #0
 802067c:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 802067e:	f000 f92f 	bl	80208e0 <COE_ObjDictionaryInit>
 8020682:	4603      	mov	r3, r0
 8020684:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8020686:	88fb      	ldrh	r3, [r7, #6]
 8020688:	2b00      	cmp	r3, #0
 802068a:	d001      	beq.n	8020690 <COE_ObjInit+0xa0>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 802068c:	f000 f8e8 	bl	8020860 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 8020690:	4b11      	ldr	r3, [pc, #68]	; (80206d8 <COE_ObjInit+0xe8>)
 8020692:	2200      	movs	r2, #0
 8020694:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8020696:	4b11      	ldr	r3, [pc, #68]	; (80206dc <COE_ObjInit+0xec>)
 8020698:	2200      	movs	r2, #0
 802069a:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 802069c:	4b10      	ldr	r3, [pc, #64]	; (80206e0 <COE_ObjInit+0xf0>)
 802069e:	2200      	movs	r2, #0
 80206a0:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 80206a2:	4b10      	ldr	r3, [pc, #64]	; (80206e4 <COE_ObjInit+0xf4>)
 80206a4:	2200      	movs	r2, #0
 80206a6:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 80206a8:	4b0f      	ldr	r3, [pc, #60]	; (80206e8 <COE_ObjInit+0xf8>)
 80206aa:	2200      	movs	r2, #0
 80206ac:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 80206ae:	4b0f      	ldr	r3, [pc, #60]	; (80206ec <COE_ObjInit+0xfc>)
 80206b0:	2200      	movs	r2, #0
 80206b2:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 80206b4:	4b0e      	ldr	r3, [pc, #56]	; (80206f0 <COE_ObjInit+0x100>)
 80206b6:	2200      	movs	r2, #0
 80206b8:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 80206ba:	4b0e      	ldr	r3, [pc, #56]	; (80206f4 <COE_ObjInit+0x104>)
 80206bc:	2200      	movs	r2, #0
 80206be:	601a      	str	r2, [r3, #0]
}
 80206c0:	3708      	adds	r7, #8
 80206c2:	46bd      	mov	sp, r7
 80206c4:	bd80      	pop	{r7, pc}
 80206c6:	bf00      	nop
 80206c8:	1ffeacdc 	.word	0x1ffeacdc
 80206cc:	0001e848 	.word	0x0001e848
 80206d0:	1ffeac98 	.word	0x1ffeac98
 80206d4:	1ffead20 	.word	0x1ffead20
 80206d8:	1ffead40 	.word	0x1ffead40
 80206dc:	1ffead41 	.word	0x1ffead41
 80206e0:	1ffead72 	.word	0x1ffead72
 80206e4:	1ffead74 	.word	0x1ffead74
 80206e8:	1ffead50 	.word	0x1ffead50
 80206ec:	1ffead2c 	.word	0x1ffead2c
 80206f0:	1ffead3c 	.word	0x1ffead3c
 80206f4:	1ffead54 	.word	0x1ffead54

080206f8 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 80206f8:	b480      	push	{r7}
 80206fa:	b085      	sub	sp, #20
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	2b00      	cmp	r3, #0
 8020704:	d062      	beq.n	80207cc <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 8020706:	4b35      	ldr	r3, [pc, #212]	; (80207dc <COE_AddObjectToDic+0xe4>)
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	2b00      	cmp	r3, #0
 802070c:	d10c      	bne.n	8020728 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 802070e:	4a33      	ldr	r2, [pc, #204]	; (80207dc <COE_AddObjectToDic+0xe4>)
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8020714:	4b31      	ldr	r3, [pc, #196]	; (80207dc <COE_AddObjectToDic+0xe4>)
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	2200      	movs	r2, #0
 802071a:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 802071c:	4b2f      	ldr	r3, [pc, #188]	; (80207dc <COE_AddObjectToDic+0xe4>)
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	2200      	movs	r2, #0
 8020722:	601a      	str	r2, [r3, #0]
            return 0;
 8020724:	2300      	movs	r3, #0
 8020726:	e052      	b.n	80207ce <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8020728:	4b2c      	ldr	r3, [pc, #176]	; (80207dc <COE_AddObjectToDic+0xe4>)
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	891a      	ldrh	r2, [r3, #8]
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	891b      	ldrh	r3, [r3, #8]
 8020732:	429a      	cmp	r2, r3
 8020734:	d90f      	bls.n	8020756 <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	2200      	movs	r2, #0
 802073a:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 802073c:	4b27      	ldr	r3, [pc, #156]	; (80207dc <COE_AddObjectToDic+0xe4>)
 802073e:	681a      	ldr	r2, [r3, #0]
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8020744:	4b25      	ldr	r3, [pc, #148]	; (80207dc <COE_AddObjectToDic+0xe4>)
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	687a      	ldr	r2, [r7, #4]
 802074a:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 802074c:	4a23      	ldr	r2, [pc, #140]	; (80207dc <COE_AddObjectToDic+0xe4>)
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	6013      	str	r3, [r2, #0]
            return 0;
 8020752:	2300      	movs	r3, #0
 8020754:	e03b      	b.n	80207ce <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8020756:	4b21      	ldr	r3, [pc, #132]	; (80207dc <COE_AddObjectToDic+0xe4>)
 8020758:	681b      	ldr	r3, [r3, #0]
 802075a:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 802075c:	e033      	b.n	80207c6 <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	891a      	ldrh	r2, [r3, #8]
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	891b      	ldrh	r3, [r3, #8]
 8020766:	429a      	cmp	r2, r3
 8020768:	d101      	bne.n	802076e <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 802076a:	2301      	movs	r3, #1
 802076c:	e02f      	b.n	80207ce <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 802076e:	68fb      	ldr	r3, [r7, #12]
 8020770:	891a      	ldrh	r2, [r3, #8]
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	891b      	ldrh	r3, [r3, #8]
 8020776:	429a      	cmp	r2, r3
 8020778:	d913      	bls.n	80207a2 <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 802077a:	68fb      	ldr	r3, [r7, #12]
 802077c:	681a      	ldr	r2, [r3, #0]
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	68fa      	ldr	r2, [r7, #12]
 8020786:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 8020788:	68fb      	ldr	r3, [r7, #12]
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d003      	beq.n	8020798 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 8020790:	68fb      	ldr	r3, [r7, #12]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	687a      	ldr	r2, [r7, #4]
 8020796:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	687a      	ldr	r2, [r7, #4]
 802079c:	601a      	str	r2, [r3, #0]

                    return 0;
 802079e:	2300      	movs	r3, #0
 80207a0:	e015      	b.n	80207ce <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 80207a2:	68fb      	ldr	r3, [r7, #12]
 80207a4:	685b      	ldr	r3, [r3, #4]
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d10a      	bne.n	80207c0 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	687a      	ldr	r2, [r7, #4]
 80207ae:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	68fa      	ldr	r2, [r7, #12]
 80207b4:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	2200      	movs	r2, #0
 80207ba:	605a      	str	r2, [r3, #4]
                    return 0;
 80207bc:	2300      	movs	r3, #0
 80207be:	e006      	b.n	80207ce <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	685b      	ldr	r3, [r3, #4]
 80207c4:	60fb      	str	r3, [r7, #12]
            return 0;
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
            while(pDicEntry != NULL)
 80207c6:	68fb      	ldr	r3, [r7, #12]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	d1c8      	bne.n	802075e <COE_AddObjectToDic+0x66>
                    pDicEntry = pDicEntry->pNext;
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 80207cc:	2301      	movs	r3, #1
}
 80207ce:	4618      	mov	r0, r3
 80207d0:	3714      	adds	r7, #20
 80207d2:	46bd      	mov	sp, r7
 80207d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d8:	4770      	bx	lr
 80207da:	bf00      	nop
 80207dc:	1ffe951c 	.word	0x1ffe951c

080207e0 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 80207e0:	b480      	push	{r7}
 80207e2:	b087      	sub	sp, #28
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	4603      	mov	r3, r0
 80207e8:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 80207ea:	4b1c      	ldr	r3, [pc, #112]	; (802085c <COE_RemoveDicEntry+0x7c>)
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 80207f0:	e02b      	b.n	802084a <COE_RemoveDicEntry+0x6a>
    {
        if(pDicEntry->Index == index)
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	891b      	ldrh	r3, [r3, #8]
 80207f6:	88fa      	ldrh	r2, [r7, #6]
 80207f8:	429a      	cmp	r2, r3
 80207fa:	d123      	bne.n	8020844 <COE_RemoveDicEntry+0x64>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 80207fc:	697b      	ldr	r3, [r7, #20]
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 8020802:	697b      	ldr	r3, [r7, #20]
 8020804:	685b      	ldr	r3, [r3, #4]
 8020806:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8020808:	693b      	ldr	r3, [r7, #16]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d002      	beq.n	8020814 <COE_RemoveDicEntry+0x34>
                pPrevEntry->pNext = pNextEntry;
 802080e:	693b      	ldr	r3, [r7, #16]
 8020810:	68fa      	ldr	r2, [r7, #12]
 8020812:	605a      	str	r2, [r3, #4]

            if(pNextEntry != NULL)
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d002      	beq.n	8020820 <COE_RemoveDicEntry+0x40>
                pNextEntry->pPrev = pPrevEntry;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	693a      	ldr	r2, [r7, #16]
 802081e:	601a      	str	r2, [r3, #0]

            pDicEntry->pPrev = NULL;
 8020820:	697b      	ldr	r3, [r7, #20]
 8020822:	2200      	movs	r2, #0
 8020824:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 8020826:	697b      	ldr	r3, [r7, #20]
 8020828:	2200      	movs	r2, #0
 802082a:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 802082c:	697b      	ldr	r3, [r7, #20]
 802082e:	891a      	ldrh	r2, [r3, #8]
 8020830:	4b0a      	ldr	r3, [pc, #40]	; (802085c <COE_RemoveDicEntry+0x7c>)
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	891b      	ldrh	r3, [r3, #8]
 8020836:	429a      	cmp	r2, r3
 8020838:	d103      	bne.n	8020842 <COE_RemoveDicEntry+0x62>
            {
                ObjDicList = pNextEntry;
 802083a:	4a08      	ldr	r2, [pc, #32]	; (802085c <COE_RemoveDicEntry+0x7c>)
 802083c:	68fb      	ldr	r3, [r7, #12]
 802083e:	6013      	str	r3, [r2, #0]
            }
            return;
 8020840:	e006      	b.n	8020850 <COE_RemoveDicEntry+0x70>
 8020842:	e005      	b.n	8020850 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8020844:	697b      	ldr	r3, [r7, #20]
 8020846:	685b      	ldr	r3, [r3, #4]
 8020848:	617b      	str	r3, [r7, #20]
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;

    while(pDicEntry != NULL)
 802084a:	697b      	ldr	r3, [r7, #20]
 802084c:	2b00      	cmp	r3, #0
 802084e:	d1d0      	bne.n	80207f2 <COE_RemoveDicEntry+0x12>
            return;
        }

        pDicEntry = pDicEntry->pNext;
    }
}
 8020850:	371c      	adds	r7, #28
 8020852:	46bd      	mov	sp, r7
 8020854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020858:	4770      	bx	lr
 802085a:	bf00      	nop
 802085c:	1ffe951c 	.word	0x1ffe951c

08020860 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8020860:	b580      	push	{r7, lr}
 8020862:	b082      	sub	sp, #8
 8020864:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 8020866:	4b0c      	ldr	r3, [pc, #48]	; (8020898 <COE_ClearObjDictionary+0x38>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 802086c:	2300      	movs	r3, #0
 802086e:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 8020870:	e009      	b.n	8020886 <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	891b      	ldrh	r3, [r3, #8]
 8020876:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	685b      	ldr	r3, [r3, #4]
 802087c:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 802087e:	887b      	ldrh	r3, [r7, #2]
 8020880:	4618      	mov	r0, r3
 8020882:	f7ff ffad 	bl	80207e0 <COE_RemoveDicEntry>
void COE_ClearObjDictionary(void)
{
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
    UINT16 Index = 0;

    while(pObjEntry != NULL)
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	2b00      	cmp	r3, #0
 802088a:	d1f2      	bne.n	8020872 <COE_ClearObjDictionary+0x12>
        Index = pObjEntry->Index;
        pObjEntry = pObjEntry->pNext;

        COE_RemoveDicEntry(Index);
    }
    ObjDicList = NULL;
 802088c:	4b02      	ldr	r3, [pc, #8]	; (8020898 <COE_ClearObjDictionary+0x38>)
 802088e:	2200      	movs	r2, #0
 8020890:	601a      	str	r2, [r3, #0]
}
 8020892:	3708      	adds	r7, #8
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}
 8020898:	1ffe951c 	.word	0x1ffe951c

0802089c <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b084      	sub	sp, #16
 80208a0:	af00      	add	r7, sp, #0
 80208a2:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 80208a4:	2300      	movs	r3, #0
 80208a6:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 80208ac:	e00c      	b.n	80208c8 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 80208ae:	68b8      	ldr	r0, [r7, #8]
 80208b0:	f7ff ff22 	bl	80206f8 <COE_AddObjectToDic>
 80208b4:	4603      	mov	r3, r0
 80208b6:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 80208b8:	89fb      	ldrh	r3, [r7, #14]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d001      	beq.n	80208c2 <AddObjectsToObjDictionary+0x26>
            return result;
 80208be:	89fb      	ldrh	r3, [r7, #14]
 80208c0:	e009      	b.n	80208d6 <AddObjectsToObjDictionary+0x3a>

        pEntry++;
 80208c2:	68bb      	ldr	r3, [r7, #8]
 80208c4:	3328      	adds	r3, #40	; 0x28
 80208c6:	60bb      	str	r3, [r7, #8]
UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
    UINT16 result = 0;
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;

    while(pEntry->Index != 0xFFFF)
 80208c8:	68bb      	ldr	r3, [r7, #8]
 80208ca:	891b      	ldrh	r3, [r3, #8]
 80208cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80208d0:	4293      	cmp	r3, r2
 80208d2:	d1ec      	bne.n	80208ae <AddObjectsToObjDictionary+0x12>
            return result;

        pEntry++;
    }

    return result;
 80208d4:	89fb      	ldrh	r3, [r7, #14]

}
 80208d6:	4618      	mov	r0, r3
 80208d8:	3710      	adds	r7, #16
 80208da:	46bd      	mov	sp, r7
 80208dc:	bd80      	pop	{r7, pc}
 80208de:	bf00      	nop

080208e0 <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 80208e0:	b580      	push	{r7, lr}
 80208e2:	b082      	sub	sp, #8
 80208e4:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 80208e6:	2300      	movs	r3, #0
 80208e8:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 80208ea:	4b0b      	ldr	r3, [pc, #44]	; (8020918 <COE_ObjDictionaryInit+0x38>)
 80208ec:	2200      	movs	r2, #0
 80208ee:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 80208f0:	480a      	ldr	r0, [pc, #40]	; (802091c <COE_ObjDictionaryInit+0x3c>)
 80208f2:	f7ff ffd3 	bl	802089c <AddObjectsToObjDictionary>
 80208f6:	4603      	mov	r3, r0
 80208f8:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 80208fa:	88fb      	ldrh	r3, [r7, #6]
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	d001      	beq.n	8020904 <COE_ObjDictionaryInit+0x24>
        return result;
 8020900:	88fb      	ldrh	r3, [r7, #6]
 8020902:	e005      	b.n	8020910 <COE_ObjDictionaryInit+0x30>
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8020904:	4806      	ldr	r0, [pc, #24]	; (8020920 <COE_ObjDictionaryInit+0x40>)
 8020906:	f7ff ffc9 	bl	802089c <AddObjectsToObjDictionary>
 802090a:	4603      	mov	r3, r0
 802090c:	80fb      	strh	r3, [r7, #6]
    }

    return result;
 802090e:	88fb      	ldrh	r3, [r7, #6]
}
 8020910:	4618      	mov	r0, r3
 8020912:	3708      	adds	r7, #8
 8020914:	46bd      	mov	sp, r7
 8020916:	bd80      	pop	{r7, pc}
 8020918:	1ffe951c 	.word	0x1ffe951c
 802091c:	1ffe89d4 	.word	0x1ffe89d4
 8020920:	1ffe8888 	.word	0x1ffe8888

08020924 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8020924:	b5b0      	push	{r4, r5, r7, lr}
 8020926:	b084      	sub	sp, #16
 8020928:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 802092a:	2300      	movs	r3, #0
 802092c:	71fb      	strb	r3, [r7, #7]
    if(pSdoPendFunc != NULL)
 802092e:	4b2f      	ldr	r3, [pc, #188]	; (80209ec <COE_Main+0xc8>)
 8020930:	681b      	ldr	r3, [r3, #0]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d057      	beq.n	80209e6 <COE_Main+0xc2>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8020936:	4b2d      	ldr	r3, [pc, #180]	; (80209ec <COE_Main+0xc8>)
 8020938:	681c      	ldr	r4, [r3, #0]
 802093a:	4b2d      	ldr	r3, [pc, #180]	; (80209f0 <COE_Main+0xcc>)
 802093c:	8818      	ldrh	r0, [r3, #0]
 802093e:	4b2d      	ldr	r3, [pc, #180]	; (80209f4 <COE_Main+0xd0>)
 8020940:	7819      	ldrb	r1, [r3, #0]
 8020942:	4b2d      	ldr	r3, [pc, #180]	; (80209f8 <COE_Main+0xd4>)
 8020944:	681a      	ldr	r2, [r3, #0]
 8020946:	4b2d      	ldr	r3, [pc, #180]	; (80209fc <COE_Main+0xd8>)
 8020948:	681d      	ldr	r5, [r3, #0]
 802094a:	4b2d      	ldr	r3, [pc, #180]	; (8020a00 <COE_Main+0xdc>)
 802094c:	781b      	ldrb	r3, [r3, #0]
 802094e:	9300      	str	r3, [sp, #0]
 8020950:	462b      	mov	r3, r5
 8020952:	47a0      	blx	r4
 8020954:	4603      	mov	r3, r0
 8020956:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8020958:	79fb      	ldrb	r3, [r7, #7]
 802095a:	2bff      	cmp	r3, #255	; 0xff
 802095c:	d043      	beq.n	80209e6 <COE_Main+0xc2>
        {
            switch(u8PendingSdo)
 802095e:	4b29      	ldr	r3, [pc, #164]	; (8020a04 <COE_Main+0xe0>)
 8020960:	781b      	ldrb	r3, [r3, #0]
 8020962:	3b01      	subs	r3, #1
 8020964:	2b03      	cmp	r3, #3
 8020966:	d829      	bhi.n	80209bc <COE_Main+0x98>
 8020968:	a201      	add	r2, pc, #4	; (adr r2, 8020970 <COE_Main+0x4c>)
 802096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802096e:	bf00      	nop
 8020970:	08020999 	.word	0x08020999
 8020974:	08020981 	.word	0x08020981
 8020978:	080209a7 	.word	0x080209a7
 802097c:	080209a7 	.word	0x080209a7
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 8020980:	4b21      	ldr	r3, [pc, #132]	; (8020a08 <COE_Main+0xe4>)
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	2b00      	cmp	r3, #0
 8020986:	d007      	beq.n	8020998 <COE_Main+0x74>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8020988:	4b1f      	ldr	r3, [pc, #124]	; (8020a08 <COE_Main+0xe4>)
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	4618      	mov	r0, r3
 802098e:	f009 fca7 	bl	802a2e0 <free>
                        pSdoSegData = NULL;
 8020992:	4b1d      	ldr	r3, [pc, #116]	; (8020a08 <COE_Main+0xe4>)
 8020994:	2200      	movs	r2, #0
 8020996:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8020998:	79fb      	ldrb	r3, [r7, #7]
 802099a:	4618      	mov	r0, r3
 802099c:	2100      	movs	r1, #0
 802099e:	2200      	movs	r2, #0
 80209a0:	f005 fc04 	bl	80261ac <SDOS_SdoRes>
                break;
 80209a4:	e00a      	b.n	80209bc <COE_Main+0x98>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 80209a6:	4b14      	ldr	r3, [pc, #80]	; (80209f8 <COE_Main+0xd4>)
 80209a8:	681a      	ldr	r2, [r3, #0]
 80209aa:	4b14      	ldr	r3, [pc, #80]	; (80209fc <COE_Main+0xd8>)
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	79f9      	ldrb	r1, [r7, #7]
 80209b0:	4608      	mov	r0, r1
 80209b2:	4611      	mov	r1, r2
 80209b4:	461a      	mov	r2, r3
 80209b6:	f005 fbf9 	bl	80261ac <SDOS_SdoRes>
                    break;
 80209ba:	bf00      	nop

            }

            u8PendingSdo = 0;
 80209bc:	4b11      	ldr	r3, [pc, #68]	; (8020a04 <COE_Main+0xe0>)
 80209be:	2200      	movs	r2, #0
 80209c0:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 80209c2:	4b0b      	ldr	r3, [pc, #44]	; (80209f0 <COE_Main+0xcc>)
 80209c4:	2200      	movs	r2, #0
 80209c6:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 80209c8:	4b0a      	ldr	r3, [pc, #40]	; (80209f4 <COE_Main+0xd0>)
 80209ca:	2200      	movs	r2, #0
 80209cc:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 80209ce:	4b0a      	ldr	r3, [pc, #40]	; (80209f8 <COE_Main+0xd4>)
 80209d0:	2200      	movs	r2, #0
 80209d2:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 80209d4:	4b09      	ldr	r3, [pc, #36]	; (80209fc <COE_Main+0xd8>)
 80209d6:	2200      	movs	r2, #0
 80209d8:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <COE_Main+0xdc>)
 80209dc:	2200      	movs	r2, #0
 80209de:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 80209e0:	4b02      	ldr	r3, [pc, #8]	; (80209ec <COE_Main+0xc8>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	601a      	str	r2, [r3, #0]
        }
    }
}
 80209e6:	3708      	adds	r7, #8
 80209e8:	46bd      	mov	sp, r7
 80209ea:	bdb0      	pop	{r4, r5, r7, pc}
 80209ec:	1ffead3c 	.word	0x1ffead3c
 80209f0:	1ffead72 	.word	0x1ffead72
 80209f4:	1ffead74 	.word	0x1ffead74
 80209f8:	1ffead50 	.word	0x1ffead50
 80209fc:	1ffead2c 	.word	0x1ffead2c
 8020a00:	1ffead41 	.word	0x1ffead41
 8020a04:	1ffead40 	.word	0x1ffead40
 8020a08:	1ffead54 	.word	0x1ffead54

08020a0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020a0c:	b480      	push	{r7}
 8020a0e:	b083      	sub	sp, #12
 8020a10:	af00      	add	r7, sp, #0
 8020a12:	4603      	mov	r3, r0
 8020a14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8020a16:	4908      	ldr	r1, [pc, #32]	; (8020a38 <NVIC_EnableIRQ+0x2c>)
 8020a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020a1c:	095b      	lsrs	r3, r3, #5
 8020a1e:	79fa      	ldrb	r2, [r7, #7]
 8020a20:	f002 021f 	and.w	r2, r2, #31
 8020a24:	2001      	movs	r0, #1
 8020a26:	fa00 f202 	lsl.w	r2, r0, r2
 8020a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8020a2e:	370c      	adds	r7, #12
 8020a30:	46bd      	mov	sp, r7
 8020a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a36:	4770      	bx	lr
 8020a38:	e000e100 	.word	0xe000e100

08020a3c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8020a3c:	b480      	push	{r7}
 8020a3e:	b083      	sub	sp, #12
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	4603      	mov	r3, r0
 8020a44:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8020a46:	4909      	ldr	r1, [pc, #36]	; (8020a6c <NVIC_DisableIRQ+0x30>)
 8020a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020a4c:	095b      	lsrs	r3, r3, #5
 8020a4e:	79fa      	ldrb	r2, [r7, #7]
 8020a50:	f002 021f 	and.w	r2, r2, #31
 8020a54:	2001      	movs	r0, #1
 8020a56:	fa00 f202 	lsl.w	r2, r0, r2
 8020a5a:	3320      	adds	r3, #32
 8020a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8020a60:	370c      	adds	r7, #12
 8020a62:	46bd      	mov	sp, r7
 8020a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a68:	4770      	bx	lr
 8020a6a:	bf00      	nop
 8020a6c:	e000e100 	.word	0xe000e100

08020a70 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 8020a70:	b480      	push	{r7}
 8020a72:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8020a74:	4b04      	ldr	r3, [pc, #16]	; (8020a88 <XMC_ECAT_GetALEventRegister+0x18>)
 8020a76:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8020a7a:	b29b      	uxth	r3, r3
}
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	46bd      	mov	sp, r7
 8020a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a84:	4770      	bx	lr
 8020a86:	bf00      	nop
 8020a88:	54010000 	.word	0x54010000

08020a8c <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020a8c:	b580      	push	{r7, lr}
 8020a8e:	b082      	sub	sp, #8
 8020a90:	af00      	add	r7, sp, #0
 8020a92:	6078      	str	r0, [r7, #4]
 8020a94:	460b      	mov	r3, r1
 8020a96:	807b      	strh	r3, [r7, #2]
 8020a98:	4613      	mov	r3, r2
 8020a9a:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8020a9c:	887b      	ldrh	r3, [r7, #2]
 8020a9e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020aa2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020aa6:	883a      	ldrh	r2, [r7, #0]
 8020aa8:	6878      	ldr	r0, [r7, #4]
 8020aaa:	4619      	mov	r1, r3
 8020aac:	f009 fc20 	bl	802a2f0 <memcpy>
}
 8020ab0:	3708      	adds	r7, #8
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	bd80      	pop	{r7, pc}
 8020ab6:	bf00      	nop

08020ab8 <HW_EscReadIsr>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscReadIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020ab8:	b580      	push	{r7, lr}
 8020aba:	b082      	sub	sp, #8
 8020abc:	af00      	add	r7, sp, #0
 8020abe:	6078      	str	r0, [r7, #4]
 8020ac0:	460b      	mov	r3, r1
 8020ac2:	807b      	strh	r3, [r7, #2]
 8020ac4:	4613      	mov	r3, r2
 8020ac6:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8020ac8:	887a      	ldrh	r2, [r7, #2]
 8020aca:	883b      	ldrh	r3, [r7, #0]
 8020acc:	6878      	ldr	r0, [r7, #4]
 8020ace:	4611      	mov	r1, r2
 8020ad0:	461a      	mov	r2, r3
 8020ad2:	f7ff ffdb 	bl	8020a8c <HW_EscRead>
}
 8020ad6:	3708      	adds	r7, #8
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bd80      	pop	{r7, pc}

08020adc <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b082      	sub	sp, #8
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
 8020ae4:	460b      	mov	r3, r1
 8020ae6:	807b      	strh	r3, [r7, #2]
 8020ae8:	4613      	mov	r3, r2
 8020aea:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8020aec:	887b      	ldrh	r3, [r7, #2]
 8020aee:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020af2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020af6:	883a      	ldrh	r2, [r7, #0]
 8020af8:	4618      	mov	r0, r3
 8020afa:	6879      	ldr	r1, [r7, #4]
 8020afc:	f009 fbf8 	bl	802a2f0 <memcpy>
}
 8020b00:	3708      	adds	r7, #8
 8020b02:	46bd      	mov	sp, r7
 8020b04:	bd80      	pop	{r7, pc}
 8020b06:	bf00      	nop

08020b08 <HW_EscWriteIsr>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWriteIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020b08:	b580      	push	{r7, lr}
 8020b0a:	b082      	sub	sp, #8
 8020b0c:	af00      	add	r7, sp, #0
 8020b0e:	6078      	str	r0, [r7, #4]
 8020b10:	460b      	mov	r3, r1
 8020b12:	807b      	strh	r3, [r7, #2]
 8020b14:	4613      	mov	r3, r2
 8020b16:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 8020b18:	887a      	ldrh	r2, [r7, #2]
 8020b1a:	883b      	ldrh	r3, [r7, #0]
 8020b1c:	6878      	ldr	r0, [r7, #4]
 8020b1e:	4611      	mov	r1, r2
 8020b20:	461a      	mov	r2, r3
 8020b22:	f7ff ffdb 	bl	8020adc <HW_EscWrite>
}
 8020b26:	3708      	adds	r7, #8
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	bd80      	pop	{r7, pc}

08020b2c <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8020b30:	f7ff ff9e 	bl	8020a70 <XMC_ECAT_GetALEventRegister>
 8020b34:	4603      	mov	r3, r0
}
 8020b36:	4618      	mov	r0, r3
 8020b38:	bd80      	pop	{r7, pc}
 8020b3a:	bf00      	nop

08020b3c <HW_GetALEventRegister_Isr>:
 * Special function for ESC access from interrupt service routines if required, otherwise this function is defined as
 * HW_GetALEventRegister.
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister_Isr(void)
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	af00      	add	r7, sp, #0
  return HW_GetALEventRegister();
 8020b40:	f7ff fff4 	bl	8020b2c <HW_GetALEventRegister>
 8020b44:	4603      	mov	r3, r0
}
 8020b46:	4618      	mov	r0, r3
 8020b48:	bd80      	pop	{r7, pc}
 8020b4a:	bf00      	nop

08020b4c <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 8020b4c:	b580      	push	{r7, lr}
 8020b4e:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 8020b50:	206d      	movs	r0, #109	; 0x6d
 8020b52:	f7ff ff5b 	bl	8020a0c <NVIC_EnableIRQ>
}
 8020b56:	bd80      	pop	{r7, pc}

08020b58 <DISABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to disable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void DISABLE_ESC_INT(void)
{
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(ECAT0_0_IRQn);
 8020b5c:	206d      	movs	r0, #109	; 0x6d
 8020b5e:	f7ff ff6d 	bl	8020a3c <NVIC_DisableIRQ>
}
 8020b62:	bd80      	pop	{r7, pc}

08020b64 <PDO_InputMapping>:
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8020b64:	b580      	push	{r7, lr}
 8020b66:	af00      	add	r7, sp, #0
    APPL_InputMapping((UINT16*)aPdInputData);
 8020b68:	4806      	ldr	r0, [pc, #24]	; (8020b84 <PDO_InputMapping+0x20>)
 8020b6a:	f7ff fd03 	bl	8020574 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 8020b6e:	4b06      	ldr	r3, [pc, #24]	; (8020b88 <PDO_InputMapping+0x24>)
 8020b70:	881a      	ldrh	r2, [r3, #0]
 8020b72:	4b06      	ldr	r3, [pc, #24]	; (8020b8c <PDO_InputMapping+0x28>)
 8020b74:	881b      	ldrh	r3, [r3, #0]
 8020b76:	4803      	ldr	r0, [pc, #12]	; (8020b84 <PDO_InputMapping+0x20>)
 8020b78:	4611      	mov	r1, r2
 8020b7a:	461a      	mov	r2, r3
 8020b7c:	f7ff ffc4 	bl	8020b08 <HW_EscWriteIsr>
}
 8020b80:	bd80      	pop	{r7, pc}
 8020b82:	bf00      	nop
 8020b84:	1ffea7b4 	.word	0x1ffea7b4
 8020b88:	1ffea86a 	.word	0x1ffea86a
 8020b8c:	1ffea850 	.word	0x1ffea850

08020b90 <PDO_OutputMapping>:
\brief    This function will copies the outputs from the ESC memory to the local memory
          to the hardware. This function is only called in case of an SM2 
          (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8020b90:	b580      	push	{r7, lr}
 8020b92:	af00      	add	r7, sp, #0

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 8020b94:	4b06      	ldr	r3, [pc, #24]	; (8020bb0 <PDO_OutputMapping+0x20>)
 8020b96:	881a      	ldrh	r2, [r3, #0]
 8020b98:	4b06      	ldr	r3, [pc, #24]	; (8020bb4 <PDO_OutputMapping+0x24>)
 8020b9a:	881b      	ldrh	r3, [r3, #0]
 8020b9c:	4806      	ldr	r0, [pc, #24]	; (8020bb8 <PDO_OutputMapping+0x28>)
 8020b9e:	4611      	mov	r1, r2
 8020ba0:	461a      	mov	r2, r3
 8020ba2:	f7ff ff89 	bl	8020ab8 <HW_EscReadIsr>

    APPL_OutputMapping((UINT16*) aPdOutputData);
 8020ba6:	4804      	ldr	r0, [pc, #16]	; (8020bb8 <PDO_OutputMapping+0x28>)
 8020ba8:	f7ff fcf2 	bl	8020590 <APPL_OutputMapping>
}
 8020bac:	bd80      	pop	{r7, pc}
 8020bae:	bf00      	nop
 8020bb0:	1ffea832 	.word	0x1ffea832
 8020bb4:	1ffea826 	.word	0x1ffea826
 8020bb8:	1ffea76c 	.word	0x1ffea76c

08020bbc <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8020bbc:	b580      	push	{r7, lr}
 8020bbe:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 8020bc0:	4b0f      	ldr	r3, [pc, #60]	; (8020c00 <ECAT_CheckTimer+0x44>)
 8020bc2:	685b      	ldr	r3, [r3, #4]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d105      	bne.n	8020bd4 <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 8020bc8:	4b0e      	ldr	r3, [pc, #56]	; (8020c04 <ECAT_CheckTimer+0x48>)
 8020bca:	881b      	ldrh	r3, [r3, #0]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	b29a      	uxth	r2, r3
 8020bd0:	4b0c      	ldr	r3, [pc, #48]	; (8020c04 <ECAT_CheckTimer+0x48>)
 8020bd2:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 8020bd4:	4b0c      	ldr	r3, [pc, #48]	; (8020c08 <ECAT_CheckTimer+0x4c>)
 8020bd6:	781b      	ldrb	r3, [r3, #0]
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d00d      	beq.n	8020bf8 <ECAT_CheckTimer+0x3c>
 8020bdc:	4b0b      	ldr	r3, [pc, #44]	; (8020c0c <ECAT_CheckTimer+0x50>)
 8020bde:	881b      	ldrh	r3, [r3, #0]
 8020be0:	b21b      	sxth	r3, r3
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	dd08      	ble.n	8020bf8 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 8020be6:	4b09      	ldr	r3, [pc, #36]	; (8020c0c <ECAT_CheckTimer+0x50>)
 8020be8:	881b      	ldrh	r3, [r3, #0]
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	b29b      	uxth	r3, r3
 8020bee:	3b01      	subs	r3, #1
 8020bf0:	b29b      	uxth	r3, r3
 8020bf2:	b29a      	uxth	r2, r3
 8020bf4:	4b05      	ldr	r3, [pc, #20]	; (8020c0c <ECAT_CheckTimer+0x50>)
 8020bf6:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 8020bf8:	f002 faec 	bl	80231d4 <DC_CheckWatchdog>
}
 8020bfc:	bd80      	pop	{r7, pc}
 8020bfe:	bf00      	nop
 8020c00:	1ffeacdc 	.word	0x1ffeacdc
 8020c04:	1ffea804 	.word	0x1ffea804
 8020c08:	1ffea84e 	.word	0x1ffea84e
 8020c0c:	1ffea858 	.word	0x1ffea858

08020c10 <HandleBusCycleCalculation>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief    This function is called from the PDI_Isr and is used to calculate the bus cycle time 
  *////////////////////////////////////////////////////////////////////////////////////////
void HandleBusCycleCalculation(void)
{
 8020c10:	b580      	push	{r7, lr}
 8020c12:	b084      	sub	sp, #16
 8020c14:	af00      	add	r7, sp, #0
    /*calculate the cycle time if device is in SM Sync mode and Cycle time was not calculated yet*/
    if ( !bDcSyncActive && bEscIntEnabled)
 8020c16:	4b2c      	ldr	r3, [pc, #176]	; (8020cc8 <HandleBusCycleCalculation+0xb8>)
 8020c18:	781b      	ldrb	r3, [r3, #0]
 8020c1a:	f083 0301 	eor.w	r3, r3, #1
 8020c1e:	b2db      	uxtb	r3, r3
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d04e      	beq.n	8020cc2 <HandleBusCycleCalculation+0xb2>
 8020c24:	4b29      	ldr	r3, [pc, #164]	; (8020ccc <HandleBusCycleCalculation+0xbc>)
 8020c26:	781b      	ldrb	r3, [r3, #0]
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d04a      	beq.n	8020cc2 <HandleBusCycleCalculation+0xb2>
    {
        BOOL bTiggerCalcCycleTime = FALSE;
 8020c2c:	2300      	movs	r3, #0
 8020c2e:	73fb      	strb	r3, [r7, #15]

        if(sSyncManOutPar.u16GetCycleTime == 1)
 8020c30:	4b27      	ldr	r3, [pc, #156]	; (8020cd0 <HandleBusCycleCalculation+0xc0>)
 8020c32:	8b9b      	ldrh	r3, [r3, #28]
 8020c34:	2b01      	cmp	r3, #1
 8020c36:	d101      	bne.n	8020c3c <HandleBusCycleCalculation+0x2c>
            bTiggerCalcCycleTime = TRUE;
 8020c38:	2301      	movs	r3, #1
 8020c3a:	73fb      	strb	r3, [r7, #15]
        if(bTiggerCalcCycleTime)
 8020c3c:	7bfb      	ldrb	r3, [r7, #15]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d017      	beq.n	8020c72 <HandleBusCycleCalculation+0x62>
        {
            /*get bus cycle time triggered */
            sSyncManOutPar.u32CycleTime = 0;
 8020c42:	4b23      	ldr	r3, [pc, #140]	; (8020cd0 <HandleBusCycleCalculation+0xc0>)
 8020c44:	2200      	movs	r2, #0
 8020c46:	605a      	str	r2, [r3, #4]
            sSyncManOutPar.u16GetCycleTime = 0;
 8020c48:	4b21      	ldr	r3, [pc, #132]	; (8020cd0 <HandleBusCycleCalculation+0xc0>)
 8020c4a:	2200      	movs	r2, #0
 8020c4c:	839a      	strh	r2, [r3, #28]

            sSyncManInPar.u32CycleTime  = 0;
 8020c4e:	4b21      	ldr	r3, [pc, #132]	; (8020cd4 <HandleBusCycleCalculation+0xc4>)
 8020c50:	2200      	movs	r2, #0
 8020c52:	605a      	str	r2, [r3, #4]
            sSyncManInPar.u16GetCycleTime = 0;
 8020c54:	4b1f      	ldr	r3, [pc, #124]	; (8020cd4 <HandleBusCycleCalculation+0xc4>)
 8020c56:	2200      	movs	r2, #0
 8020c58:	839a      	strh	r2, [r3, #28]
            
            u16BusCycleCntMs = 0;
 8020c5a:	4b1f      	ldr	r3, [pc, #124]	; (8020cd8 <HandleBusCycleCalculation+0xc8>)
 8020c5c:	2200      	movs	r2, #0
 8020c5e:	801a      	strh	r2, [r3, #0]
            bCycleTimeMeasurementStarted = TRUE;
 8020c60:	4b1e      	ldr	r3, [pc, #120]	; (8020cdc <HandleBusCycleCalculation+0xcc>)
 8020c62:	2201      	movs	r2, #1
 8020c64:	701a      	strb	r2, [r3, #0]
            StartTimerCnt = (UINT32) HW_GetTimer();
 8020c66:	f008 fddb 	bl	8029820 <HW_GetTimer>
 8020c6a:	4602      	mov	r2, r0
 8020c6c:	4b1c      	ldr	r3, [pc, #112]	; (8020ce0 <HandleBusCycleCalculation+0xd0>)
 8020c6e:	601a      	str	r2, [r3, #0]
 8020c70:	e027      	b.n	8020cc2 <HandleBusCycleCalculation+0xb2>
        }
        else
        {
            if(bCycleTimeMeasurementStarted == TRUE)
 8020c72:	4b1a      	ldr	r3, [pc, #104]	; (8020cdc <HandleBusCycleCalculation+0xcc>)
 8020c74:	781b      	ldrb	r3, [r3, #0]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d023      	beq.n	8020cc2 <HandleBusCycleCalculation+0xb2>
            {
                UINT32 CurTimerCnt = (UINT32)HW_GetTimer();
 8020c7a:	f008 fdd1 	bl	8029820 <HW_GetTimer>
 8020c7e:	60b8      	str	r0, [r7, #8]
/*ECATCHANGE_START(V5.11) ECAT3*/
                UINT32 CalcCycleTime = 0;
 8020c80:	2300      	movs	r3, #0
 8020c82:	607b      	str	r3, [r7, #4]


#if ECAT_TIMER_INC_P_MS
                CalcCycleTime = (UINT32)u16BusCycleCntMs * 1000000 + (((INT32)(CurTimerCnt-StartTimerCnt))*1000000/ECAT_TIMER_INC_P_MS);    //get elapsed cycle time in ns
 8020c84:	4b14      	ldr	r3, [pc, #80]	; (8020cd8 <HandleBusCycleCalculation+0xc8>)
 8020c86:	881b      	ldrh	r3, [r3, #0]
 8020c88:	461a      	mov	r2, r3
 8020c8a:	4b16      	ldr	r3, [pc, #88]	; (8020ce4 <HandleBusCycleCalculation+0xd4>)
 8020c8c:	fb03 f302 	mul.w	r3, r3, r2
 8020c90:	4a13      	ldr	r2, [pc, #76]	; (8020ce0 <HandleBusCycleCalculation+0xd0>)
 8020c92:	6812      	ldr	r2, [r2, #0]
 8020c94:	68b9      	ldr	r1, [r7, #8]
 8020c96:	1a8a      	subs	r2, r1, r2
 8020c98:	4611      	mov	r1, r2
 8020c9a:	4a12      	ldr	r2, [pc, #72]	; (8020ce4 <HandleBusCycleCalculation+0xd4>)
 8020c9c:	fb02 f201 	mul.w	r2, r2, r1
 8020ca0:	4413      	add	r3, r2
 8020ca2:	607b      	str	r3, [r7, #4]
#endif

/*ECATCHANGE_START(V5.11) ECAT4*/
                sSyncManOutPar.u32CycleTime = CalcCycleTime;
 8020ca4:	4a0a      	ldr	r2, [pc, #40]	; (8020cd0 <HandleBusCycleCalculation+0xc0>)
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	6053      	str	r3, [r2, #4]
/*ECATCHANGE_END(V5.11) ECAT4*/
                sSyncManInPar.u32CycleTime  = CalcCycleTime;
 8020caa:	4a0a      	ldr	r2, [pc, #40]	; (8020cd4 <HandleBusCycleCalculation+0xc4>)
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	6053      	str	r3, [r2, #4]
                u16BusCycleCntMs = 0;
 8020cb0:	4b09      	ldr	r3, [pc, #36]	; (8020cd8 <HandleBusCycleCalculation+0xc8>)
 8020cb2:	2200      	movs	r2, #0
 8020cb4:	801a      	strh	r2, [r3, #0]
                StartTimerCnt = 0;
 8020cb6:	4b0a      	ldr	r3, [pc, #40]	; (8020ce0 <HandleBusCycleCalculation+0xd0>)
 8020cb8:	2200      	movs	r2, #0
 8020cba:	601a      	str	r2, [r3, #0]
                bCycleTimeMeasurementStarted = FALSE;
 8020cbc:	4b07      	ldr	r3, [pc, #28]	; (8020cdc <HandleBusCycleCalculation+0xcc>)
 8020cbe:	2200      	movs	r2, #0
 8020cc0:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.11) ECAT3*/
            /* CiA402 Motion controller cycle time is only set if DC Synchronisation is active*/
            }
        }
    }
}
 8020cc2:	3710      	adds	r7, #16
 8020cc4:	46bd      	mov	sp, r7
 8020cc6:	bd80      	pop	{r7, pc}
 8020cc8:	1ffea85b 	.word	0x1ffea85b
 8020ccc:	1ffea863 	.word	0x1ffea863
 8020cd0:	1ffeacdc 	.word	0x1ffeacdc
 8020cd4:	1ffeac98 	.word	0x1ffeac98
 8020cd8:	1ffea804 	.word	0x1ffea804
 8020cdc:	1ffea75c 	.word	0x1ffea75c
 8020ce0:	1ffea758 	.word	0x1ffea758
 8020ce4:	000f4240 	.word	0x000f4240

08020ce8 <PDI_Isr>:
/*ECATCHANGE_END(V5.11) ECAT6*/

void PDI_Isr(void)
{
 8020ce8:	b580      	push	{r7, lr}
 8020cea:	b082      	sub	sp, #8
 8020cec:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 8020cee:	4b49      	ldr	r3, [pc, #292]	; (8020e14 <PDI_Isr+0x12c>)
 8020cf0:	781b      	ldrb	r3, [r3, #0]
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	f000 808a 	beq.w	8020e0c <PDI_Isr+0x124>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020cf8:	f7ff ff20 	bl	8020b3c <HW_GetALEventRegister_Isr>
 8020cfc:	4603      	mov	r3, r0
 8020cfe:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020d00:	88fb      	ldrh	r3, [r7, #6]
 8020d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d037      	beq.n	8020d7a <PDI_Isr+0x92>
        {
            if(bDcRunning && bDcSyncActive)
 8020d0a:	4b43      	ldr	r3, [pc, #268]	; (8020e18 <PDI_Isr+0x130>)
 8020d0c:	781b      	ldrb	r3, [r3, #0]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d006      	beq.n	8020d20 <PDI_Isr+0x38>
 8020d12:	4b42      	ldr	r3, [pc, #264]	; (8020e1c <PDI_Isr+0x134>)
 8020d14:	781b      	ldrb	r3, [r3, #0]
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d002      	beq.n	8020d20 <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8020d1a:	4b41      	ldr	r3, [pc, #260]	; (8020e20 <PDI_Isr+0x138>)
 8020d1c:	2200      	movs	r2, #0
 8020d1e:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 8020d20:	4b40      	ldr	r3, [pc, #256]	; (8020e24 <PDI_Isr+0x13c>)
 8020d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d005      	beq.n	8020d34 <PDI_Isr+0x4c>
                sSyncManOutPar.u16SmEventMissedCounter--;
 8020d28:	4b3e      	ldr	r3, [pc, #248]	; (8020e24 <PDI_Isr+0x13c>)
 8020d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020d2c:	3b01      	subs	r3, #1
 8020d2e:	b29a      	uxth	r2, r3
 8020d30:	4b3c      	ldr	r3, [pc, #240]	; (8020e24 <PDI_Isr+0x13c>)
 8020d32:	851a      	strh	r2, [r3, #40]	; 0x28


/*ECATCHANGE_START(V5.11) ECAT6*/
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8020d34:	f7ff ff6c 	bl	8020c10 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT6*/

        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8020d38:	4b3b      	ldr	r3, [pc, #236]	; (8020e28 <PDI_Isr+0x140>)
 8020d3a:	2201      	movs	r2, #1
 8020d3c:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8020d3e:	4b3b      	ldr	r3, [pc, #236]	; (8020e2c <PDI_Isr+0x144>)
 8020d40:	781b      	ldrb	r3, [r3, #0]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d002      	beq.n	8020d4c <PDI_Isr+0x64>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8020d46:	f7ff ff23 	bl	8020b90 <PDO_OutputMapping>
 8020d4a:	e016      	b.n	8020d7a <PDI_Isr+0x92>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020d4c:	4b38      	ldr	r3, [pc, #224]	; (8020e30 <PDI_Isr+0x148>)
 8020d4e:	881b      	ldrh	r3, [r3, #0]
 8020d50:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020d54:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020d58:	781b      	ldrb	r3, [r3, #0]
 8020d5a:	b2da      	uxtb	r2, r3
 8020d5c:	4b35      	ldr	r3, [pc, #212]	; (8020e34 <PDI_Isr+0x14c>)
 8020d5e:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020d60:	4b33      	ldr	r3, [pc, #204]	; (8020e30 <PDI_Isr+0x148>)
 8020d62:	881b      	ldrh	r3, [r3, #0]
 8020d64:	461a      	mov	r2, r3
 8020d66:	4b34      	ldr	r3, [pc, #208]	; (8020e38 <PDI_Isr+0x150>)
 8020d68:	881b      	ldrh	r3, [r3, #0]
 8020d6a:	4413      	add	r3, r2
 8020d6c:	461a      	mov	r2, r3
 8020d6e:	4b33      	ldr	r3, [pc, #204]	; (8020e3c <PDI_Isr+0x154>)
 8020d70:	4413      	add	r3, r2
 8020d72:	781b      	ldrb	r3, [r3, #0]
 8020d74:	b2da      	uxtb	r2, r3
 8020d76:	4b2f      	ldr	r3, [pc, #188]	; (8020e34 <PDI_Isr+0x14c>)
 8020d78:	701a      	strb	r2, [r3, #0]
        }
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if (( ALEvent & PROCESS_INPUT_EVENT ) && (nPdOutputSize == 0))
 8020d7a:	88fb      	ldrh	r3, [r7, #6]
 8020d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d005      	beq.n	8020d90 <PDI_Isr+0xa8>
 8020d84:	4b2c      	ldr	r3, [pc, #176]	; (8020e38 <PDI_Isr+0x150>)
 8020d86:	881b      	ldrh	r3, [r3, #0]
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d101      	bne.n	8020d90 <PDI_Isr+0xa8>
        {
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8020d8c:	f7ff ff40 	bl	8020c10 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT4*/

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 8020d90:	4b24      	ldr	r3, [pc, #144]	; (8020e24 <PDI_Isr+0x13c>)
 8020d92:	885b      	ldrh	r3, [r3, #2]
 8020d94:	2b01      	cmp	r3, #1
 8020d96:	d101      	bne.n	8020d9c <PDI_Isr+0xb4>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8020d98:	f000 f9ba 	bl	8021110 <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8020d9c:	4b28      	ldr	r3, [pc, #160]	; (8020e40 <PDI_Isr+0x158>)
 8020d9e:	781b      	ldrb	r3, [r3, #0]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d009      	beq.n	8020db8 <PDI_Isr+0xd0>
/*ECATCHANGE_START(V5.11) ESM7*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8020da4:	4b27      	ldr	r3, [pc, #156]	; (8020e44 <PDI_Isr+0x15c>)
 8020da6:	885b      	ldrh	r3, [r3, #2]
 8020da8:	2b01      	cmp	r3, #1
 8020daa:	d003      	beq.n	8020db4 <PDI_Isr+0xcc>
 8020dac:	4b25      	ldr	r3, [pc, #148]	; (8020e44 <PDI_Isr+0x15c>)
 8020dae:	885b      	ldrh	r3, [r3, #2]
 8020db0:	2b22      	cmp	r3, #34	; 0x22
 8020db2:	d101      	bne.n	8020db8 <PDI_Isr+0xd0>
/*ECATCHANGE_END(V5.11) ESM7*/
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8020db4:	f7ff fed6 	bl	8020b64 <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8020db8:	f7ff fec0 	bl	8020b3c <HW_GetALEventRegister_Isr>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020dc0:	88fb      	ldrh	r3, [r7, #6]
 8020dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d020      	beq.n	8020e0c <PDI_Isr+0x124>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8020dca:	4b16      	ldr	r3, [pc, #88]	; (8020e24 <PDI_Isr+0x13c>)
 8020dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020dce:	3301      	adds	r3, #1
 8020dd0:	b29a      	uxth	r2, r3
 8020dd2:	4b14      	ldr	r3, [pc, #80]	; (8020e24 <PDI_Isr+0x13c>)
 8020dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8020dd6:	4b13      	ldr	r3, [pc, #76]	; (8020e24 <PDI_Isr+0x13c>)
 8020dd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8020dda:	4b1a      	ldr	r3, [pc, #104]	; (8020e44 <PDI_Isr+0x15c>)
 8020ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020dde:	4b14      	ldr	r3, [pc, #80]	; (8020e30 <PDI_Isr+0x148>)
 8020de0:	881b      	ldrh	r3, [r3, #0]
 8020de2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020de6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020dea:	781b      	ldrb	r3, [r3, #0]
 8020dec:	b2da      	uxtb	r2, r3
 8020dee:	4b11      	ldr	r3, [pc, #68]	; (8020e34 <PDI_Isr+0x14c>)
 8020df0:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020df2:	4b0f      	ldr	r3, [pc, #60]	; (8020e30 <PDI_Isr+0x148>)
 8020df4:	881b      	ldrh	r3, [r3, #0]
 8020df6:	461a      	mov	r2, r3
 8020df8:	4b0f      	ldr	r3, [pc, #60]	; (8020e38 <PDI_Isr+0x150>)
 8020dfa:	881b      	ldrh	r3, [r3, #0]
 8020dfc:	4413      	add	r3, r2
 8020dfe:	461a      	mov	r2, r3
 8020e00:	4b0e      	ldr	r3, [pc, #56]	; (8020e3c <PDI_Isr+0x154>)
 8020e02:	4413      	add	r3, r2
 8020e04:	781b      	ldrb	r3, [r3, #0]
 8020e06:	b2da      	uxtb	r2, r3
 8020e08:	4b0a      	ldr	r3, [pc, #40]	; (8020e34 <PDI_Isr+0x14c>)
 8020e0a:	701a      	strb	r2, [r3, #0]
    }
    } //if(bEscIntEnabled)
}
 8020e0c:	3708      	adds	r7, #8
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	bd80      	pop	{r7, pc}
 8020e12:	bf00      	nop
 8020e14:	1ffea863 	.word	0x1ffea863
 8020e18:	1ffea840 	.word	0x1ffea840
 8020e1c:	1ffea85b 	.word	0x1ffea85b
 8020e20:	1ffea866 	.word	0x1ffea866
 8020e24:	1ffeacdc 	.word	0x1ffeacdc
 8020e28:	1ffea856 	.word	0x1ffea856
 8020e2c:	1ffea85c 	.word	0x1ffea85c
 8020e30:	1ffea832 	.word	0x1ffea832
 8020e34:	1ffea83c 	.word	0x1ffea83c
 8020e38:	1ffea826 	.word	0x1ffea826
 8020e3c:	5400ffff 	.word	0x5400ffff
 8020e40:	1ffea862 	.word	0x1ffea862
 8020e44:	1ffeac98 	.word	0x1ffeac98

08020e48 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	b082      	sub	sp, #8
 8020e4c:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 8020e4e:	4b47      	ldr	r3, [pc, #284]	; (8020f6c <Sync0_Isr+0x124>)
 8020e50:	2200      	movs	r2, #0
 8020e52:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8020e54:	4b46      	ldr	r3, [pc, #280]	; (8020f70 <Sync0_Isr+0x128>)
 8020e56:	781b      	ldrb	r3, [r3, #0]
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	f000 8083 	beq.w	8020f64 <Sync0_Isr+0x11c>
    {

        if ( bEcatInputUpdateRunning )
 8020e5e:	4b45      	ldr	r3, [pc, #276]	; (8020f74 <Sync0_Isr+0x12c>)
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d005      	beq.n	8020e72 <Sync0_Isr+0x2a>
        {
            LatchInputSync0Counter++;
 8020e66:	4b44      	ldr	r3, [pc, #272]	; (8020f78 <Sync0_Isr+0x130>)
 8020e68:	881b      	ldrh	r3, [r3, #0]
 8020e6a:	3301      	adds	r3, #1
 8020e6c:	b29a      	uxth	r2, r3
 8020e6e:	4b42      	ldr	r3, [pc, #264]	; (8020f78 <Sync0_Isr+0x130>)
 8020e70:	801a      	strh	r2, [r3, #0]
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if(u16SmSync0Value > 0)
 8020e72:	4b42      	ldr	r3, [pc, #264]	; (8020f7c <Sync0_Isr+0x134>)
 8020e74:	881b      	ldrh	r3, [r3, #0]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d04e      	beq.n	8020f18 <Sync0_Isr+0xd0>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8020e7a:	4b41      	ldr	r3, [pc, #260]	; (8020f80 <Sync0_Isr+0x138>)
 8020e7c:	881a      	ldrh	r2, [r3, #0]
 8020e7e:	4b3f      	ldr	r3, [pc, #252]	; (8020f7c <Sync0_Isr+0x134>)
 8020e80:	881b      	ldrh	r3, [r3, #0]
 8020e82:	429a      	cmp	r2, r3
 8020e84:	d923      	bls.n	8020ece <Sync0_Isr+0x86>
           {
              /*ECATCHANGE_START(V5.11) COE3*/
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020e86:	4b3f      	ldr	r3, [pc, #252]	; (8020f84 <Sync0_Isr+0x13c>)
 8020e88:	881b      	ldrh	r3, [r3, #0]
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	d00b      	beq.n	8020ea6 <Sync0_Isr+0x5e>
 8020e8e:	4b3e      	ldr	r3, [pc, #248]	; (8020f88 <Sync0_Isr+0x140>)
 8020e90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020e92:	4b3e      	ldr	r3, [pc, #248]	; (8020f8c <Sync0_Isr+0x144>)
 8020e94:	891b      	ldrh	r3, [r3, #8]
 8020e96:	429a      	cmp	r2, r3
 8020e98:	d805      	bhi.n	8020ea6 <Sync0_Isr+0x5e>
              {
                 /*ECATCHANGE_END(V5.11) COE3*/
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8020e9a:	4b3b      	ldr	r3, [pc, #236]	; (8020f88 <Sync0_Isr+0x140>)
 8020e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020e9e:	3303      	adds	r3, #3
 8020ea0:	b29a      	uxth	r2, r3
 8020ea2:	4b39      	ldr	r3, [pc, #228]	; (8020f88 <Sync0_Isr+0x140>)
 8020ea4:	851a      	strh	r2, [r3, #40]	; 0x28
              }

/*ECATCHANGE_START(V5.11) COE3*/
           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020ea6:	4b3a      	ldr	r3, [pc, #232]	; (8020f90 <Sync0_Isr+0x148>)
 8020ea8:	881b      	ldrh	r3, [r3, #0]
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d00f      	beq.n	8020ece <Sync0_Isr+0x86>
 8020eae:	4b35      	ldr	r3, [pc, #212]	; (8020f84 <Sync0_Isr+0x13c>)
 8020eb0:	881b      	ldrh	r3, [r3, #0]
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d10b      	bne.n	8020ece <Sync0_Isr+0x86>
 8020eb6:	4b37      	ldr	r3, [pc, #220]	; (8020f94 <Sync0_Isr+0x14c>)
 8020eb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020eba:	4b34      	ldr	r3, [pc, #208]	; (8020f8c <Sync0_Isr+0x144>)
 8020ebc:	891b      	ldrh	r3, [r3, #8]
 8020ebe:	429a      	cmp	r2, r3
 8020ec0:	d805      	bhi.n	8020ece <Sync0_Isr+0x86>
           {
/*ECATCHANGE_END(V5.11) COE3*/
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8020ec2:	4b34      	ldr	r3, [pc, #208]	; (8020f94 <Sync0_Isr+0x14c>)
 8020ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020ec6:	3303      	adds	r3, #3
 8020ec8:	b29a      	uxth	r2, r3
 8020eca:	4b32      	ldr	r3, [pc, #200]	; (8020f94 <Sync0_Isr+0x14c>)
 8020ecc:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 8020ece:	4b2d      	ldr	r3, [pc, #180]	; (8020f84 <Sync0_Isr+0x13c>)
 8020ed0:	881b      	ldrh	r3, [r3, #0]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d11a      	bne.n	8020f0c <Sync0_Isr+0xc4>
 8020ed6:	4b2e      	ldr	r3, [pc, #184]	; (8020f90 <Sync0_Isr+0x148>)
 8020ed8:	881b      	ldrh	r3, [r3, #0]
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d016      	beq.n	8020f0c <Sync0_Isr+0xc4>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020ede:	f7ff fe2d 	bl	8020b3c <HW_GetALEventRegister_Isr>
 8020ee2:	4603      	mov	r3, r0
 8020ee4:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8020ee6:	88fb      	ldrh	r3, [r7, #6]
 8020ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d106      	bne.n	8020efe <Sync0_Isr+0xb6>
              {
                 /* no input data was read by the master, increment the sm missed counter*/
                 u16SmSync0Counter++;
 8020ef0:	4b23      	ldr	r3, [pc, #140]	; (8020f80 <Sync0_Isr+0x138>)
 8020ef2:	881b      	ldrh	r3, [r3, #0]
 8020ef4:	3301      	adds	r3, #1
 8020ef6:	b29a      	uxth	r2, r3
 8020ef8:	4b21      	ldr	r3, [pc, #132]	; (8020f80 <Sync0_Isr+0x138>)
 8020efa:	801a      	strh	r2, [r3, #0]

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020efc:	e00c      	b.n	8020f18 <Sync0_Isr+0xd0>
                 u16SmSync0Counter++;
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8020efe:	4b20      	ldr	r3, [pc, #128]	; (8020f80 <Sync0_Isr+0x138>)
 8020f00:	2200      	movs	r2, #0
 8020f02:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 8020f04:	4b23      	ldr	r3, [pc, #140]	; (8020f94 <Sync0_Isr+0x14c>)
 8020f06:	2200      	movs	r2, #0
 8020f08:	851a      	strh	r2, [r3, #40]	; 0x28

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020f0a:	e005      	b.n	8020f18 <Sync0_Isr+0xd0>

              }
           }
           else
           {
              u16SmSync0Counter++;
 8020f0c:	4b1c      	ldr	r3, [pc, #112]	; (8020f80 <Sync0_Isr+0x138>)
 8020f0e:	881b      	ldrh	r3, [r3, #0]
 8020f10:	3301      	adds	r3, #1
 8020f12:	b29a      	uxth	r2, r3
 8020f14:	4b1a      	ldr	r3, [pc, #104]	; (8020f80 <Sync0_Isr+0x138>)
 8020f16:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled
/*ECATCHANGE_END(V5.11) ECAT4*/


        if(!bEscIntEnabled && bEcatOutputUpdateRunning)
 8020f18:	4b1f      	ldr	r3, [pc, #124]	; (8020f98 <Sync0_Isr+0x150>)
 8020f1a:	781b      	ldrb	r3, [r3, #0]
 8020f1c:	f083 0301 	eor.w	r3, r3, #1
 8020f20:	b2db      	uxtb	r3, r3
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d005      	beq.n	8020f32 <Sync0_Isr+0xea>
 8020f26:	4b1d      	ldr	r3, [pc, #116]	; (8020f9c <Sync0_Isr+0x154>)
 8020f28:	781b      	ldrb	r3, [r3, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d001      	beq.n	8020f32 <Sync0_Isr+0xea>
        {
            /* Output mapping was not done by the PDI ISR */
            PDO_OutputMapping();
 8020f2e:	f7ff fe2f 	bl	8020b90 <PDO_OutputMapping>
        }

        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8020f32:	f000 f8ed 	bl	8021110 <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8020f36:	4b0f      	ldr	r3, [pc, #60]	; (8020f74 <Sync0_Isr+0x12c>)
 8020f38:	781b      	ldrb	r3, [r3, #0]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d012      	beq.n	8020f64 <Sync0_Isr+0x11c>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 8020f3e:	4b18      	ldr	r3, [pc, #96]	; (8020fa0 <Sync0_Isr+0x158>)
 8020f40:	881b      	ldrh	r3, [r3, #0]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d00e      	beq.n	8020f64 <Sync0_Isr+0x11c>
 8020f46:	4b16      	ldr	r3, [pc, #88]	; (8020fa0 <Sync0_Isr+0x158>)
 8020f48:	881a      	ldrh	r2, [r3, #0]
 8020f4a:	4b0b      	ldr	r3, [pc, #44]	; (8020f78 <Sync0_Isr+0x130>)
 8020f4c:	881b      	ldrh	r3, [r3, #0]
 8020f4e:	429a      	cmp	r2, r3
 8020f50:	d108      	bne.n	8020f64 <Sync0_Isr+0x11c>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8020f52:	f7ff fe07 	bl	8020b64 <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8020f56:	4b12      	ldr	r3, [pc, #72]	; (8020fa0 <Sync0_Isr+0x158>)
 8020f58:	881b      	ldrh	r3, [r3, #0]
 8020f5a:	2b01      	cmp	r3, #1
 8020f5c:	d102      	bne.n	8020f64 <Sync0_Isr+0x11c>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8020f5e:	4b06      	ldr	r3, [pc, #24]	; (8020f78 <Sync0_Isr+0x130>)
 8020f60:	2200      	movs	r2, #0
 8020f62:	801a      	strh	r2, [r3, #0]
            }
        }

    }
}
 8020f64:	3708      	adds	r7, #8
 8020f66:	46bd      	mov	sp, r7
 8020f68:	bd80      	pop	{r7, pc}
 8020f6a:	bf00      	nop
 8020f6c:	1ffea82a 	.word	0x1ffea82a
 8020f70:	1ffea85b 	.word	0x1ffea85b
 8020f74:	1ffea862 	.word	0x1ffea862
 8020f78:	1ffea82e 	.word	0x1ffea82e
 8020f7c:	1ffea852 	.word	0x1ffea852
 8020f80:	1ffea866 	.word	0x1ffea866
 8020f84:	1ffea826 	.word	0x1ffea826
 8020f88:	1ffeacdc 	.word	0x1ffeacdc
 8020f8c:	1ffe938c 	.word	0x1ffe938c
 8020f90:	1ffea850 	.word	0x1ffea850
 8020f94:	1ffeac98 	.word	0x1ffeac98
 8020f98:	1ffea863 	.word	0x1ffea863
 8020f9c:	1ffea85c 	.word	0x1ffea85c
 8020fa0:	1ffea84c 	.word	0x1ffea84c

08020fa4 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 8020fa8:	4b0a      	ldr	r3, [pc, #40]	; (8020fd4 <Sync1_Isr+0x30>)
 8020faa:	2200      	movs	r2, #0
 8020fac:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8020fae:	4b0a      	ldr	r3, [pc, #40]	; (8020fd8 <Sync1_Isr+0x34>)
 8020fb0:	781b      	ldrb	r3, [r3, #0]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d009      	beq.n	8020fca <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 8020fb6:	4b09      	ldr	r3, [pc, #36]	; (8020fdc <Sync1_Isr+0x38>)
 8020fb8:	885b      	ldrh	r3, [r3, #2]
 8020fba:	2b03      	cmp	r3, #3
 8020fbc:	d105      	bne.n	8020fca <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 8020fbe:	4b08      	ldr	r3, [pc, #32]	; (8020fe0 <Sync1_Isr+0x3c>)
 8020fc0:	881b      	ldrh	r3, [r3, #0]
 8020fc2:	2b00      	cmp	r3, #0
 8020fc4:	d101      	bne.n	8020fca <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8020fc6:	f7ff fdcd 	bl	8020b64 <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8020fca:	4b06      	ldr	r3, [pc, #24]	; (8020fe4 <Sync1_Isr+0x40>)
 8020fcc:	2200      	movs	r2, #0
 8020fce:	801a      	strh	r2, [r3, #0]
}
 8020fd0:	bd80      	pop	{r7, pc}
 8020fd2:	bf00      	nop
 8020fd4:	1ffea85e 	.word	0x1ffea85e
 8020fd8:	1ffea862 	.word	0x1ffea862
 8020fdc:	1ffeac98 	.word	0x1ffeac98
 8020fe0:	1ffea84c 	.word	0x1ffea84c
 8020fe4:	1ffea82e 	.word	0x1ffea82e

08020fe8 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	b082      	sub	sp, #8
 8020fec:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 8020fee:	2300      	movs	r3, #0
 8020ff0:	80fb      	strh	r3, [r7, #6]
/*Hardware init function need to be called from the application layer*/

/*ECATCHANGE_START(V5.11) EEPROM1*/
#ifdef SET_EEPROM_PTR
    SET_EEPROM_PTR
 8020ff2:	4b0c      	ldr	r3, [pc, #48]	; (8021024 <MainInit+0x3c>)
 8020ff4:	4a0c      	ldr	r2, [pc, #48]	; (8021028 <MainInit+0x40>)
 8020ff6:	601a      	str	r2, [r3, #0]
#endif
/*ECATCHANGE_END(V5.11) EEPROM1*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 8020ff8:	f002 f9ce 	bl	8023398 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 8020ffc:	f7ff faf8 	bl	80205f0 <COE_ObjInit>


    /*Timer initialization*/
    u16BusCycleCntMs = 0;
 8021000:	4b0a      	ldr	r3, [pc, #40]	; (802102c <MainInit+0x44>)
 8021002:	2200      	movs	r2, #0
 8021004:	801a      	strh	r2, [r3, #0]
    StartTimerCnt = 0;
 8021006:	4b0a      	ldr	r3, [pc, #40]	; (8021030 <MainInit+0x48>)
 8021008:	2200      	movs	r2, #0
 802100a:	601a      	str	r2, [r3, #0]
    bCycleTimeMeasurementStarted = FALSE;
 802100c:	4b09      	ldr	r3, [pc, #36]	; (8021034 <MainInit+0x4c>)
 802100e:	2200      	movs	r2, #0
 8021010:	701a      	strb	r2, [r3, #0]

    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 8021012:	4b09      	ldr	r3, [pc, #36]	; (8021038 <MainInit+0x50>)
 8021014:	2201      	movs	r2, #1
 8021016:	701a      	strb	r2, [r3, #0]

/*Application Init need to be called from the application layer*/
     return Error;
 8021018:	88fb      	ldrh	r3, [r7, #6]
}
 802101a:	4618      	mov	r0, r3
 802101c:	3708      	adds	r7, #8
 802101e:	46bd      	mov	sp, r7
 8021020:	bd80      	pop	{r7, pc}
 8021022:	bf00      	nop
 8021024:	1ffea7f8 	.word	0x1ffea7f8
 8021028:	1ffe8b8c 	.word	0x1ffe8b8c
 802102c:	1ffea804 	.word	0x1ffea804
 8021030:	1ffea758 	.word	0x1ffea758
 8021034:	1ffea75c 	.word	0x1ffea75c
 8021038:	1ffe9520 	.word	0x1ffe9520

0802103c <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 802103c:	b580      	push	{r7, lr}
 802103e:	b082      	sub	sp, #8
 8021040:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 8021042:	4b2c      	ldr	r3, [pc, #176]	; (80210f4 <MainLoop+0xb8>)
 8021044:	781b      	ldrb	r3, [r3, #0]
 8021046:	f083 0301 	eor.w	r3, r3, #1
 802104a:	b2db      	uxtb	r3, r3
 802104c:	2b00      	cmp	r3, #0
 802104e:	d000      	beq.n	8021052 <MainLoop+0x16>
        return;
 8021050:	e04c      	b.n	80210ec <MainLoop+0xb0>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8021052:	4b29      	ldr	r3, [pc, #164]	; (80210f8 <MainLoop+0xbc>)
 8021054:	781b      	ldrb	r3, [r3, #0]
 8021056:	f083 0301 	eor.w	r3, r3, #1
 802105a:	b2db      	uxtb	r3, r3


        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
 802105c:	2b00      	cmp	r3, #0
 802105e:	d106      	bne.n	802106e <MainLoop+0x32>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8021060:	4b26      	ldr	r3, [pc, #152]	; (80210fc <MainLoop+0xc0>)
 8021062:	781b      	ldrb	r3, [r3, #0]
 8021064:	f083 0301 	eor.w	r3, r3, #1
 8021068:	b2db      	uxtb	r3, r3
 802106a:	2b00      	cmp	r3, #0
 802106c:	d038      	beq.n	80210e0 <MainLoop+0xa4>
          && !bDcSyncActive                                               /* DC-Synchronous */
 802106e:	4b24      	ldr	r3, [pc, #144]	; (8021100 <MainLoop+0xc4>)
 8021070:	781b      	ldrb	r3, [r3, #0]
 8021072:	f083 0301 	eor.w	r3, r3, #1
 8021076:	b2db      	uxtb	r3, r3
 8021078:	2b00      	cmp	r3, #0
 802107a:	d031      	beq.n	80210e0 <MainLoop+0xa4>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 802107c:	4b1e      	ldr	r3, [pc, #120]	; (80210f8 <MainLoop+0xbc>)
 802107e:	781b      	ldrb	r3, [r3, #0]
 8021080:	f083 0301 	eor.w	r3, r3, #1
 8021084:	b2db      	uxtb	r3, r3
 8021086:	2b00      	cmp	r3, #0
 8021088:	d01e      	beq.n	80210c8 <MainLoop+0x8c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 802108a:	f7ff fd4f 	bl	8020b2c <HW_GetALEventRegister>
 802108e:	4603      	mov	r3, r0
 8021090:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8021092:	88fb      	ldrh	r3, [r7, #6]
 8021094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021098:	2b00      	cmp	r3, #0
 802109a:	d009      	beq.n	80210b0 <MainLoop+0x74>
                {
                    /* set the flag for the state machine behaviour */
                    bEcatFirstOutputsReceived = TRUE;
 802109c:	4b17      	ldr	r3, [pc, #92]	; (80210fc <MainLoop+0xc0>)
 802109e:	2201      	movs	r2, #1
 80210a0:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 80210a2:	4b18      	ldr	r3, [pc, #96]	; (8021104 <MainLoop+0xc8>)
 80210a4:	781b      	ldrb	r3, [r3, #0]
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d00e      	beq.n	80210c8 <MainLoop+0x8c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 80210aa:	f7ff fd71 	bl	8020b90 <PDO_OutputMapping>
 80210ae:	e00b      	b.n	80210c8 <MainLoop+0x8c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 80210b0:	4b15      	ldr	r3, [pc, #84]	; (8021108 <MainLoop+0xcc>)
 80210b2:	881b      	ldrh	r3, [r3, #0]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d107      	bne.n	80210c8 <MainLoop+0x8c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 80210b8:	88fb      	ldrh	r3, [r7, #6]
 80210ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d002      	beq.n	80210c8 <MainLoop+0x8c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 80210c2:	4b0e      	ldr	r3, [pc, #56]	; (80210fc <MainLoop+0xc0>)
 80210c4:	2201      	movs	r2, #1
 80210c6:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
 80210c8:	f7ff fd46 	bl	8020b58 <DISABLE_ESC_INT>
            ECAT_Application();
 80210cc:	f000 f820 	bl	8021110 <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 80210d0:	4b0e      	ldr	r3, [pc, #56]	; (802110c <MainLoop+0xd0>)
 80210d2:	781b      	ldrb	r3, [r3, #0]
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d001      	beq.n	80210dc <MainLoop+0xa0>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 80210d8:	f7ff fd44 	bl	8020b64 <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
 80210dc:	f7ff fd36 	bl	8020b4c <ENABLE_ESC_INT>
        }


        /* call EtherCAT functions */
        ECAT_Main();
 80210e0:	f002 fa00 	bl	80234e4 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 80210e4:	f7ff fc1e 	bl	8020924 <COE_Main>
       CheckIfEcatError();
 80210e8:	f002 f902 	bl	80232f0 <CheckIfEcatError>

}
 80210ec:	3708      	adds	r7, #8
 80210ee:	46bd      	mov	sp, r7
 80210f0:	bd80      	pop	{r7, pc}
 80210f2:	bf00      	nop
 80210f4:	1ffe9520 	.word	0x1ffe9520
 80210f8:	1ffea863 	.word	0x1ffea863
 80210fc:	1ffea856 	.word	0x1ffea856
 8021100:	1ffea85b 	.word	0x1ffea85b
 8021104:	1ffea85c 	.word	0x1ffea85c
 8021108:	1ffea826 	.word	0x1ffea826
 802110c:	1ffea862 	.word	0x1ffea862

08021110 <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 8021110:	b580      	push	{r7, lr}
 8021112:	af00      	add	r7, sp, #0
    {
        APPL_Application();
 8021114:	f7ff fa4a 	bl	80205ac <APPL_Application>
    }
/* PDO Input mapping is called from the specific trigger ISR */
}
 8021118:	bd80      	pop	{r7, pc}
 802111a:	bf00      	nop

0802111c <EEPROM_CommandHandler>:


void EEPROM_CommandHandler(void)
{
 802111c:	b580      	push	{r7, lr}
 802111e:	b086      	sub	sp, #24
 8021120:	af00      	add	r7, sp, #0
   UINT16 Result = 0;
 8021122:	2300      	movs	r3, #0
 8021124:	82bb      	strh	r3, [r7, #20]
    UINT16 EEPROMReg = 0; //Regvalue 0x502 - 0x5003
 8021126:	2300      	movs	r3, #0
 8021128:	82fb      	strh	r3, [r7, #22]

    HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 802112a:	4b59      	ldr	r3, [pc, #356]	; (8021290 <EEPROM_CommandHandler+0x174>)
 802112c:	881b      	ldrh	r3, [r3, #0]
 802112e:	82fb      	strh	r3, [r7, #22]
    EEPROMReg = SWAPWORD(EEPROMReg);

    if (EEPROMReg & ESC_EEPROM_BUSY_MASK) 
 8021130:	8afb      	ldrh	r3, [r7, #22]
 8021132:	b21b      	sxth	r3, r3
 8021134:	2b00      	cmp	r3, #0
 8021136:	f280 80a7 	bge.w	8021288 <EEPROM_CommandHandler+0x16c>
    {
        UINT32 cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 802113a:	8afb      	ldrh	r3, [r7, #22]
 802113c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8021140:	613b      	str	r3, [r7, #16]
        UINT32 addr;
        HW_EscReadDWord(addr,ESC_EEPROM_ADDRESS_OFFSET);
 8021142:	4b54      	ldr	r3, [pc, #336]	; (8021294 <EEPROM_CommandHandler+0x178>)
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	60fb      	str	r3, [r7, #12]
        addr = SWAPDWORD(addr);

/* ECATCHANGE_START(V5.11) EEPROM3*/
        //Clear error bits
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
 8021148:	8afb      	ldrh	r3, [r7, #22]
 802114a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 802114e:	82fb      	strh	r3, [r7, #22]
/* ECATCHANGE_END(V5.11) EEPROM3*/
        switch (cmd) {
 8021150:	693b      	ldr	r3, [r7, #16]
 8021152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021156:	d00d      	beq.n	8021174 <EEPROM_CommandHandler+0x58>
 8021158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802115c:	d803      	bhi.n	8021166 <EEPROM_CommandHandler+0x4a>
 802115e:	2b00      	cmp	r3, #0
 8021160:	f000 808c 	beq.w	802127c <EEPROM_CommandHandler+0x160>
 8021164:	e085      	b.n	8021272 <EEPROM_CommandHandler+0x156>
 8021166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802116a:	d031      	beq.n	80211d0 <EEPROM_CommandHandler+0xb4>
 802116c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021170:	d05c      	beq.n	802122c <EEPROM_CommandHandler+0x110>
 8021172:	e07e      	b.n	8021272 <EEPROM_CommandHandler+0x156>
        case 0x00: //IDLE
            break;
        case ESC_EEPROM_CMD_READ_MASK:
        {
/* ECATCHANGE_START(V5.11) ECAT11*/
           if (pAPPL_EEPROM_Read != NULL)
 8021174:	4b48      	ldr	r3, [pc, #288]	; (8021298 <EEPROM_CommandHandler+0x17c>)
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d00d      	beq.n	8021198 <EEPROM_CommandHandler+0x7c>
           {
              Result = pAPPL_EEPROM_Read(addr);
 802117c:	4b46      	ldr	r3, [pc, #280]	; (8021298 <EEPROM_CommandHandler+0x17c>)
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	68f8      	ldr	r0, [r7, #12]
 8021182:	4798      	blx	r3
 8021184:	4603      	mov	r3, r0
 8021186:	82bb      	strh	r3, [r7, #20]
              if (Result > 0)
 8021188:	8abb      	ldrh	r3, [r7, #20]
 802118a:	2b00      	cmp	r3, #0
 802118c:	d01f      	beq.n	80211ce <EEPROM_CommandHandler+0xb2>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 802118e:	8afb      	ldrh	r3, [r7, #22]
 8021190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021194:	82fb      	strh	r3, [r7, #22]
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
              }
           }
        }
        break;
 8021196:	e072      	b.n	802127e <EEPROM_CommandHandler+0x162>
           }
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8021198:	68fb      	ldr	r3, [r7, #12]
 802119a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802119e:	d811      	bhi.n	80211c4 <EEPROM_CommandHandler+0xa8>
 80211a0:	4b3e      	ldr	r3, [pc, #248]	; (802129c <EEPROM_CommandHandler+0x180>)
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d00d      	beq.n	80211c4 <EEPROM_CommandHandler+0xa8>
              {
                 UINT16 *pData = (UINT16 *)pEEPROM;
 80211a8:	4b3c      	ldr	r3, [pc, #240]	; (802129c <EEPROM_CommandHandler+0x180>)
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	60bb      	str	r3, [r7, #8]
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_READ_SIZE);
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	005b      	lsls	r3, r3, #1
 80211b2:	68ba      	ldr	r2, [r7, #8]
 80211b4:	4413      	add	r3, r2
 80211b6:	4618      	mov	r0, r3
 80211b8:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80211bc:	2208      	movs	r2, #8
 80211be:	f7ff fc8d 	bl	8020adc <HW_EscWrite>
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
              {
 80211c2:	e004      	b.n	80211ce <EEPROM_CommandHandler+0xb2>
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_READ_SIZE);
              }
              else
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80211c4:	8afb      	ldrh	r3, [r7, #22]
 80211c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80211ca:	82fb      	strh	r3, [r7, #22]
              }
           }
        }
        break;
 80211cc:	e057      	b.n	802127e <EEPROM_CommandHandler+0x162>
 80211ce:	e056      	b.n	802127e <EEPROM_CommandHandler+0x162>
        case ESC_EEPROM_CMD_WRITE_MASK:
            {
/* ECATCHANGE_START(V5.11) ECAT11*/
                 if (pAPPL_EEPROM_Write != NULL)
 80211d0:	4b33      	ldr	r3, [pc, #204]	; (80212a0 <EEPROM_CommandHandler+0x184>)
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d00d      	beq.n	80211f4 <EEPROM_CommandHandler+0xd8>
                 {
                    Result = pAPPL_EEPROM_Write(addr);
 80211d8:	4b31      	ldr	r3, [pc, #196]	; (80212a0 <EEPROM_CommandHandler+0x184>)
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	68f8      	ldr	r0, [r7, #12]
 80211de:	4798      	blx	r3
 80211e0:	4603      	mov	r3, r0
 80211e2:	82bb      	strh	r3, [r7, #20]
                    if (Result > 0)
 80211e4:	8abb      	ldrh	r3, [r7, #20]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d01f      	beq.n	802122a <EEPROM_CommandHandler+0x10e>
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80211ea:	8afb      	ldrh	r3, [r7, #22]
 80211ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80211f0:	82fb      	strh	r3, [r7, #22]
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
                    }
                 }
            }
            break;
 80211f2:	e044      	b.n	802127e <EEPROM_CommandHandler+0x162>
                 }
                 else
                 {
/* ECATCHANGE_END(V5.11) ECAT11*/

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 80211f4:	68fb      	ldr	r3, [r7, #12]
 80211f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80211fa:	d811      	bhi.n	8021220 <EEPROM_CommandHandler+0x104>
 80211fc:	4b27      	ldr	r3, [pc, #156]	; (802129c <EEPROM_CommandHandler+0x180>)
 80211fe:	681b      	ldr	r3, [r3, #0]
 8021200:	2b00      	cmp	r3, #0
 8021202:	d00d      	beq.n	8021220 <EEPROM_CommandHandler+0x104>
                    {
                       UINT16 *pData = (UINT16 *)pEEPROM;
 8021204:	4b25      	ldr	r3, [pc, #148]	; (802129c <EEPROM_CommandHandler+0x180>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	607b      	str	r3, [r7, #4]
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
 802120a:	68fb      	ldr	r3, [r7, #12]
 802120c:	005b      	lsls	r3, r3, #1
 802120e:	687a      	ldr	r2, [r7, #4]
 8021210:	4413      	add	r3, r2
 8021212:	4618      	mov	r0, r3
 8021214:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8021218:	2202      	movs	r2, #2
 802121a:	f7ff fc37 	bl	8020a8c <HW_EscRead>
                 else
                 {
/* ECATCHANGE_END(V5.11) ECAT11*/

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                    {
 802121e:	e004      	b.n	802122a <EEPROM_CommandHandler+0x10e>
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
                    }
                    else
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021220:	8afb      	ldrh	r3, [r7, #22]
 8021222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021226:	82fb      	strh	r3, [r7, #22]
                    }
                 }
            }
            break;
 8021228:	e029      	b.n	802127e <EEPROM_CommandHandler+0x162>
 802122a:	e028      	b.n	802127e <EEPROM_CommandHandler+0x162>
        case ESC_EEPROM_CMD_RELOAD_MASK:
        {
/* ECATCHANGE_START(V5.11) ECAT11*/
           if (pAPPL_EEPROM_Reload != NULL)
 802122c:	4b1d      	ldr	r3, [pc, #116]	; (80212a4 <EEPROM_CommandHandler+0x188>)
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	2b00      	cmp	r3, #0
 8021232:	d00c      	beq.n	802124e <EEPROM_CommandHandler+0x132>
           {
              Result = pAPPL_EEPROM_Reload();
 8021234:	4b1b      	ldr	r3, [pc, #108]	; (80212a4 <EEPROM_CommandHandler+0x188>)
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	4798      	blx	r3
 802123a:	4603      	mov	r3, r0
 802123c:	82bb      	strh	r3, [r7, #20]
              if (Result > 0)
 802123e:	8abb      	ldrh	r3, [r7, #20]
 8021240:	2b00      	cmp	r3, #0
 8021242:	d015      	beq.n	8021270 <EEPROM_CommandHandler+0x154>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021244:	8afb      	ldrh	r3, [r7, #22]
 8021246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802124a:	82fb      	strh	r3, [r7, #22]

                 EEPROMReg |= ESC_EEPROM_ERROR_CRC;
              }
           }
        }
         break;
 802124c:	e017      	b.n	802127e <EEPROM_CommandHandler+0x162>
           }
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              Result = HW_EepromReload();
 802124e:	f008 fa8f 	bl	8029770 <HW_EepromReload>
 8021252:	4603      	mov	r3, r0
 8021254:	82bb      	strh	r3, [r7, #20]
              if (Result != 0)
 8021256:	8abb      	ldrh	r3, [r7, #20]
 8021258:	2b00      	cmp	r3, #0
 802125a:	d009      	beq.n	8021270 <EEPROM_CommandHandler+0x154>
              {
                 /* ECATCHANGE_START(V5.11) EEPROM2*/
                 //copy the configured station alias
                 HW_EscWriteWord(((UINT16 *)pEEPROM)[0x4], ESC_EEPROM_DATA_OFFSET);
 802125c:	4a12      	ldr	r2, [pc, #72]	; (80212a8 <EEPROM_CommandHandler+0x18c>)
 802125e:	4b0f      	ldr	r3, [pc, #60]	; (802129c <EEPROM_CommandHandler+0x180>)
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	891b      	ldrh	r3, [r3, #8]
 8021264:	8013      	strh	r3, [r2, #0]
                 /* ECATCHANGE_END(V5.11) EEPROM2*/

                 EEPROMReg |= ESC_EEPROM_ERROR_CRC;
 8021266:	8afb      	ldrh	r3, [r7, #22]
 8021268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802126c:	82fb      	strh	r3, [r7, #22]
              }
           }
        }
         break;
 802126e:	e006      	b.n	802127e <EEPROM_CommandHandler+0x162>
 8021270:	e005      	b.n	802127e <EEPROM_CommandHandler+0x162>
        default:
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021272:	8afb      	ldrh	r3, [r7, #22]
 8021274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021278:	82fb      	strh	r3, [r7, #22]
            break;
 802127a:	e000      	b.n	802127e <EEPROM_CommandHandler+0x162>
        //Clear error bits
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
/* ECATCHANGE_END(V5.11) EEPROM3*/
        switch (cmd) {
        case 0x00: //IDLE
            break;
 802127c:	bf00      	nop
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
            break;
        }

        {
        UINT16 TmpData = SWAPWORD(EEPROMReg);
 802127e:	8afb      	ldrh	r3, [r7, #22]
 8021280:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(TmpData,ESC_EEPROM_CONTROL_OFFSET);
 8021282:	4a03      	ldr	r2, [pc, #12]	; (8021290 <EEPROM_CommandHandler+0x174>)
 8021284:	887b      	ldrh	r3, [r7, #2]
 8021286:	8013      	strh	r3, [r2, #0]
        }
    }
}
 8021288:	3718      	adds	r7, #24
 802128a:	46bd      	mov	sp, r7
 802128c:	bd80      	pop	{r7, pc}
 802128e:	bf00      	nop
 8021290:	54010502 	.word	0x54010502
 8021294:	54010504 	.word	0x54010504
 8021298:	1ffea760 	.word	0x1ffea760
 802129c:	1ffea7f8 	.word	0x1ffea7f8
 80212a0:	1ffea764 	.word	0x1ffea764
 80212a4:	1ffea800 	.word	0x1ffea800
 80212a8:	54010508 	.word	0x54010508

080212ac <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 80212ac:	b480      	push	{r7}
 80212ae:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 80212b0:	4b04      	ldr	r3, [pc, #16]	; (80212c4 <COE_Init+0x18>)
 80212b2:	2200      	movs	r2, #0
 80212b4:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 80212b6:	4b04      	ldr	r3, [pc, #16]	; (80212c8 <COE_Init+0x1c>)
 80212b8:	2200      	movs	r2, #0
 80212ba:	801a      	strh	r2, [r3, #0]
}
 80212bc:	46bd      	mov	sp, r7
 80212be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c2:	4770      	bx	lr
 80212c4:	1ffea808 	.word	0x1ffea808
 80212c8:	1ffead48 	.word	0x1ffead48

080212cc <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b084      	sub	sp, #16
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80212d4:	2300      	movs	r3, #0
 80212d6:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	88db      	ldrh	r3, [r3, #6]
 80212dc:	0b1b      	lsrs	r3, r3, #12
 80212de:	b29b      	uxth	r3, r3
 80212e0:	3b01      	subs	r3, #1
 80212e2:	2b07      	cmp	r3, #7
 80212e4:	d821      	bhi.n	802132a <COE_ServiceInd+0x5e>
 80212e6:	a201      	add	r2, pc, #4	; (adr r2, 80212ec <COE_ServiceInd+0x20>)
 80212e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80212ec:	08021325 	.word	0x08021325
 80212f0:	0802130d 	.word	0x0802130d
 80212f4:	08021325 	.word	0x08021325
 80212f8:	08021325 	.word	0x08021325
 80212fc:	08021325 	.word	0x08021325
 8021300:	08021325 	.word	0x08021325
 8021304:	08021325 	.word	0x08021325
 8021308:	08021319 	.word	0x08021319
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 802130c:	6878      	ldr	r0, [r7, #4]
 802130e:	f004 fc97 	bl	8025c40 <SDOS_SdoInd>
 8021312:	4603      	mov	r3, r0
 8021314:	73fb      	strb	r3, [r7, #15]
        break;
 8021316:	e00b      	b.n	8021330 <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8021318:	6878      	ldr	r0, [r7, #4]
 802131a:	f004 ffd9 	bl	80262d0 <SDOS_SdoInfoInd>
 802131e:	4603      	mov	r3, r0
 8021320:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 8021322:	e005      	b.n	8021330 <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8021324:	2304      	movs	r3, #4
 8021326:	73fb      	strb	r3, [r7, #15]
        break;
 8021328:	e002      	b.n	8021330 <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 802132a:	2305      	movs	r3, #5
 802132c:	73fb      	strb	r3, [r7, #15]
        break;
 802132e:	bf00      	nop
    }
    return result;
 8021330:	7bfb      	ldrb	r3, [r7, #15]
}
 8021332:	4618      	mov	r0, r3
 8021334:	3710      	adds	r7, #16
 8021336:	46bd      	mov	sp, r7
 8021338:	bd80      	pop	{r7, pc}
 802133a:	bf00      	nop

0802133c <COE_ContinueInd>:
*////////////////////////////////////////////////////////////////////////////////////////

/*ECATCHANGE_START(V5.11) COE4*/
UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
/*ECATCHANGE_END(V5.11) COE4*/
{
 802133c:	b580      	push	{r7, lr}
 802133e:	b082      	sub	sp, #8
 8021340:	af00      	add	r7, sp, #0
 8021342:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8021344:	4b12      	ldr	r3, [pc, #72]	; (8021390 <COE_ContinueInd+0x54>)
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	2b00      	cmp	r3, #0
 802134a:	d009      	beq.n	8021360 <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 802134c:	4b10      	ldr	r3, [pc, #64]	; (8021390 <COE_ContinueInd+0x54>)
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	4618      	mov	r0, r3
 8021352:	2100      	movs	r1, #0
 8021354:	f002 fe14 	bl	8023f80 <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8021358:	4b0d      	ldr	r3, [pc, #52]	; (8021390 <COE_ContinueInd+0x54>)
 802135a:	2200      	movs	r2, #0
 802135c:	601a      	str	r2, [r3, #0]
 802135e:	e012      	b.n	8021386 <COE_ContinueInd+0x4a>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 8021360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8021364:	f008 ffb4 	bl	802a2d0 <malloc>
 8021368:	4603      	mov	r3, r0
 802136a:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
/*ECATCHANGE_START(V5.11) COE4*/
        if (pMbx == NULL)
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	2b00      	cmp	r3, #0
 8021370:	d101      	bne.n	8021376 <COE_ContinueInd+0x3a>
        {
            return MBXERR_NOMOREMEMORY;
 8021372:	2307      	movs	r3, #7
 8021374:	e008      	b.n	8021388 <COE_ContinueInd+0x4c>
        }
        else
/*ECATCHANGE_END(V5.11) COE4*/
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8021376:	6878      	ldr	r0, [r7, #4]
 8021378:	4906      	ldr	r1, [pc, #24]	; (8021394 <COE_ContinueInd+0x58>)
 802137a:	220e      	movs	r2, #14
 802137c:	f008 ffb8 	bl	802a2f0 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 8021380:	6878      	ldr	r0, [r7, #4]
 8021382:	f004 ffa5 	bl	80262d0 <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8021386:	2300      	movs	r3, #0
}
 8021388:	4618      	mov	r0, r3
 802138a:	3708      	adds	r7, #8
 802138c:	46bd      	mov	sp, r7
 802138e:	bd80      	pop	{r7, pc}
 8021390:	1ffea808 	.word	0x1ffea808
 8021394:	1ffead5c 	.word	0x1ffead5c

08021398 <FOE_ServiceInd>:
 \brief    This function is called when a FoE (File Access over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 FOE_ServiceInd(TFOEMBX MBXMEM * pFoeInd)
{
 8021398:	b580      	push	{r7, lr}
 802139a:	b08c      	sub	sp, #48	; 0x30
 802139c:	af00      	add	r7, sp, #0
 802139e:	6078      	str	r0, [r7, #4]
    /* initialize the result of the service checking */
    UINT16 nextState = ECAT_FOE_ERRCODE_ILLEGAL;
 80213a0:	f248 0304 	movw	r3, #32772	; 0x8004
 80213a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* dataSize contains the size of the file data */
    UINT16 dataSize = SWAPWORD(pFoeInd->MbxHeader.Length) - FOE_HEADER_SIZE;
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	881b      	ldrh	r3, [r3, #0]
 80213aa:	b29b      	uxth	r3, r3
 80213ac:	3b06      	subs	r3, #6
 80213ae:	857b      	strh	r3, [r7, #42]	; 0x2a


    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the FoE service */
    if ( SWAPWORD(pFoeInd->MbxHeader.Length) < FOE_HEADER_SIZE )
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	881b      	ldrh	r3, [r3, #0]
 80213b4:	b29b      	uxth	r3, r3
 80213b6:	2b05      	cmp	r3, #5
 80213b8:	d801      	bhi.n	80213be <FOE_ServiceInd+0x26>
        return MBXERR_SIZETOOSHORT;
 80213ba:	2306      	movs	r3, #6
 80213bc:	e1f3      	b.n	80217a6 <FOE_ServiceInd+0x40e>

    switch ( SWAPWORD(pFoeInd->FoeHeader.OpCode) )
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	88db      	ldrh	r3, [r3, #6]
 80213c2:	b29b      	uxth	r3, r3
 80213c4:	3b01      	subs	r3, #1
 80213c6:	2b05      	cmp	r3, #5
 80213c8:	f200 80da 	bhi.w	8021580 <FOE_ServiceInd+0x1e8>
 80213cc:	a201      	add	r2, pc, #4	; (adr r2, 80213d4 <FOE_ServiceInd+0x3c>)
 80213ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213d2:	bf00      	nop
 80213d4:	080213ed 	.word	0x080213ed
 80213d8:	08021455 	.word	0x08021455
 80213dc:	0802148f 	.word	0x0802148f
 80213e0:	080214db 	.word	0x080214db
 80213e4:	08021533 	.word	0x08021533
 80213e8:	08021551 	.word	0x08021551
    {
    case ECAT_FOE_OPCODE_RRQ:
        /* file read is requested */
        if ( u16FileAccessState == FOE_READY )
 80213ec:	4b9f      	ldr	r3, [pc, #636]	; (802166c <FOE_ServiceInd+0x2d4>)
 80213ee:	881b      	ldrh	r3, [r3, #0]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d12e      	bne.n	8021452 <FOE_ServiceInd+0xba>
        {
            UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	689b      	ldr	r3, [r3, #8]
 80213f8:	627b      	str	r3, [r7, #36]	; 0x24
            /* last FoE sequence was finished, call application function */
            nextState = FOE_Read(pFoeInd->Data, dataSize, pFoeInd->Data, SWAPDWORD(u32Password));
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	f103 010c 	add.w	r1, r3, #12
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	330c      	adds	r3, #12
 8021404:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8021406:	4608      	mov	r0, r1
 8021408:	4611      	mov	r1, r2
 802140a:	461a      	mov	r2, r3
 802140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802140e:	f002 f935 	bl	802367c <FOE_Read>
 8021412:	4603      	mov	r3, r0
 8021414:	85fb      	strh	r3, [r7, #46]	; 0x2e

/* ECATCHANGE_START(V5.11) FOE1*/
            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = 0;
 8021416:	4b96      	ldr	r3, [pc, #600]	; (8021670 <FOE_ServiceInd+0x2d8>)
 8021418:	2200      	movs	r2, #0
 802141a:	601a      	str	r2, [r3, #0]

            if (nextState <= FOE_MAXDATA)
 802141c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802141e:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021422:	4293      	cmp	r3, r2
 8021424:	d806      	bhi.n	8021434 <FOE_ServiceInd+0x9c>
            {
                /* the first data packet shall be sent */
                u32PacketNo    = 1;
 8021426:	4b93      	ldr	r3, [pc, #588]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021428:	2201      	movs	r2, #1
 802142a:	601a      	str	r2, [r3, #0]
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset = nextState;
 802142c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802142e:	4a92      	ldr	r2, [pc, #584]	; (8021678 <FOE_ServiceInd+0x2e0>)
 8021430:	6013      	str	r3, [r2, #0]
 8021432:	e00e      	b.n	8021452 <FOE_ServiceInd+0xba>
            }
            else if (nextState <= FOE_MAXBUSY)
 8021434:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021436:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 802143a:	4293      	cmp	r3, r2
 802143c:	d809      	bhi.n	8021452 <FOE_ServiceInd+0xba>
            {
                u32PacketNo    = 0;
 802143e:	4b8d      	ldr	r3, [pc, #564]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021440:	2200      	movs	r2, #0
 8021442:	601a      	str	r2, [r3, #0]
                u32FileOffset = 0;
 8021444:	4b8c      	ldr	r3, [pc, #560]	; (8021678 <FOE_ServiceInd+0x2e0>)
 8021446:	2200      	movs	r2, #0
 8021448:	601a      	str	r2, [r3, #0]
                u16FileAccessState = FOE_WAIT_FOR_ACK;
 802144a:	4b88      	ldr	r3, [pc, #544]	; (802166c <FOE_ServiceInd+0x2d4>)
 802144c:	2201      	movs	r2, #1
 802144e:	801a      	strh	r2, [r3, #0]
            }
/* ECATCHANGE_END(V5.11) FOE1*/
        }
        break;
 8021450:	e096      	b.n	8021580 <FOE_ServiceInd+0x1e8>
 8021452:	e095      	b.n	8021580 <FOE_ServiceInd+0x1e8>

    case ECAT_FOE_OPCODE_WRQ:
        /* file write is requested */
        if ( u16FileAccessState == FOE_READY )
 8021454:	4b85      	ldr	r3, [pc, #532]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021456:	881b      	ldrh	r3, [r3, #0]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d117      	bne.n	802148c <FOE_ServiceInd+0xf4>
        {
            UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	689b      	ldr	r3, [r3, #8]
 8021460:	623b      	str	r3, [r7, #32]
            /* last FoE sequence was finished, call application function */
            nextState = FOE_Write(pFoeInd->Data, dataSize, SWAPDWORD(u32Password));
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	f103 020c 	add.w	r2, r3, #12
 8021468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802146a:	4610      	mov	r0, r2
 802146c:	4619      	mov	r1, r3
 802146e:	6a3a      	ldr	r2, [r7, #32]
 8021470:	f002 f962 	bl	8023738 <FOE_Write>
 8021474:	4603      	mov	r3, r0
 8021476:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if ( nextState == 0 )
 8021478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802147a:	2b00      	cmp	r3, #0
 802147c:	d102      	bne.n	8021484 <FOE_ServiceInd+0xec>
            {
                /* checking was successful, sent a FoE Ack service */
                nextState = FOE_ACK;
 802147e:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 8021482:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
            /* initialize the packet number */
            u32PacketNo    = 0;
 8021484:	4b7b      	ldr	r3, [pc, #492]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021486:	2200      	movs	r2, #0
 8021488:	601a      	str	r2, [r3, #0]
        }
        break;
 802148a:	e079      	b.n	8021580 <FOE_ServiceInd+0x1e8>
 802148c:	e078      	b.n	8021580 <FOE_ServiceInd+0x1e8>

    case ECAT_FOE_OPCODE_DATA:
        /* file data is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_DATA
 802148e:	4b77      	ldr	r3, [pc, #476]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021490:	881b      	ldrh	r3, [r3, #0]
 8021492:	2b02      	cmp	r3, #2
 8021494:	d003      	beq.n	802149e <FOE_ServiceInd+0x106>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_DATA )
 8021496:	4b75      	ldr	r3, [pc, #468]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021498:	881b      	ldrh	r3, [r3, #0]
 802149a:	2b06      	cmp	r3, #6
 802149c:	d11c      	bne.n	80214d8 <FOE_ServiceInd+0x140>
        {
            UINT32 u32CmdPacketNo = SWAPDWORD(pFoeInd->FoeHeader.Cmd.PacketNo);
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	689b      	ldr	r3, [r3, #8]
 80214a2:	61fb      	str	r3, [r7, #28]
            /* we are waiting for file data, service is correct */
            if ( u32CmdPacketNo == u32PacketNo )
 80214a4:	4b73      	ldr	r3, [pc, #460]	; (8021674 <FOE_ServiceInd+0x2dc>)
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	69fa      	ldr	r2, [r7, #28]
 80214aa:	429a      	cmp	r2, r3
 80214ac:	d110      	bne.n	80214d0 <FOE_ServiceInd+0x138>
            {
                /* the packet number is correct, call application function to store the file data */
                nextState = FOE_Data(pFoeInd->Data, dataSize);
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	f103 020c 	add.w	r2, r3, #12
 80214b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80214b6:	4610      	mov	r0, r2
 80214b8:	4619      	mov	r1, r3
 80214ba:	f002 f95d 	bl	8023778 <FOE_Data>
 80214be:	4603      	mov	r3, r0
 80214c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                if ( nextState == 0 )
 80214c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d107      	bne.n	80214d8 <FOE_ServiceInd+0x140>
                {
                    /* checking was successful, sent a FoE Ack service */
                    nextState = FOE_ACK;
 80214c8:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 80214cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            }
            else
                nextState = ECAT_FOE_ERRCODE_PACKENO;
        }
        break;
 80214ce:	e057      	b.n	8021580 <FOE_ServiceInd+0x1e8>
                    /* checking was successful, sent a FoE Ack service */
                    nextState = FOE_ACK;
                }
            }
            else
                nextState = ECAT_FOE_ERRCODE_PACKENO;
 80214d0:	f248 0305 	movw	r3, #32773	; 0x8005
 80214d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 80214d6:	e053      	b.n	8021580 <FOE_ServiceInd+0x1e8>
 80214d8:	e052      	b.n	8021580 <FOE_ServiceInd+0x1e8>

    case ECAT_FOE_OPCODE_ACK:
        /* acknowledge is received, next file part can be sent */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK )
 80214da:	4b64      	ldr	r3, [pc, #400]	; (802166c <FOE_ServiceInd+0x2d4>)
 80214dc:	881b      	ldrh	r3, [r3, #0]
 80214de:	2b01      	cmp	r3, #1
 80214e0:	d11e      	bne.n	8021520 <FOE_ServiceInd+0x188>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to get the next part of the file */
            nextState = FOE_Ack( u32FileOffset, pFoeInd->Data );
 80214e2:	4b65      	ldr	r3, [pc, #404]	; (8021678 <FOE_ServiceInd+0x2e0>)
 80214e4:	681a      	ldr	r2, [r3, #0]
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	330c      	adds	r3, #12
 80214ea:	4610      	mov	r0, r2
 80214ec:	4619      	mov	r1, r3
 80214ee:	f002 f95d 	bl	80237ac <FOE_Ack>
 80214f2:	4603      	mov	r3, r0
 80214f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = u32FileOffset;
 80214f6:	4b60      	ldr	r3, [pc, #384]	; (8021678 <FOE_ServiceInd+0x2e0>)
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	4a5d      	ldr	r2, [pc, #372]	; (8021670 <FOE_ServiceInd+0x2d8>)
 80214fc:	6013      	str	r3, [r2, #0]

/* ECATCHANGE_START(V5.11) FOE1*/
            if (nextState <= FOE_MAXDATA) 
 80214fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021500:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021504:	4293      	cmp	r3, r2
 8021506:	d813      	bhi.n	8021530 <FOE_ServiceInd+0x198>
            {
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset += nextState;
 8021508:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802150a:	4b5b      	ldr	r3, [pc, #364]	; (8021678 <FOE_ServiceInd+0x2e0>)
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	4413      	add	r3, r2
 8021510:	4a59      	ldr	r2, [pc, #356]	; (8021678 <FOE_ServiceInd+0x2e0>)
 8021512:	6013      	str	r3, [r2, #0]
                /* increment the packet number */
                u32PacketNo++;
 8021514:	4b57      	ldr	r3, [pc, #348]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	3301      	adds	r3, #1
 802151a:	4a56      	ldr	r2, [pc, #344]	; (8021674 <FOE_ServiceInd+0x2dc>)
 802151c:	6013      	str	r3, [r2, #0]
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
        {
            /* we were waiting for the last acknowledge, now the sequence is finished */
            nextState = FOE_FINISHED_NOACK;
        }
        break;
 802151e:	e02f      	b.n	8021580 <FOE_ServiceInd+0x1e8>
                /* increment the packet number */
                u32PacketNo++;
            }
/* ECATCHANGE_END(V5.11) FOE1*/  
        }
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 8021520:	4b52      	ldr	r3, [pc, #328]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021522:	881b      	ldrh	r3, [r3, #0]
 8021524:	2b04      	cmp	r3, #4
 8021526:	d103      	bne.n	8021530 <FOE_ServiceInd+0x198>
        {
            /* we were waiting for the last acknowledge, now the sequence is finished */
            nextState = FOE_FINISHED_NOACK;
 8021528:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 802152c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 802152e:	e027      	b.n	8021580 <FOE_ServiceInd+0x1e8>
 8021530:	e026      	b.n	8021580 <FOE_ServiceInd+0x1e8>

    case ECAT_FOE_OPCODE_ERR:
        /* a FoE Error service is received */
        if ( u16FileAccessState != FOE_READY )
 8021532:	4b4e      	ldr	r3, [pc, #312]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021534:	881b      	ldrh	r3, [r3, #0]
 8021536:	2b00      	cmp	r3, #0
 8021538:	d009      	beq.n	802154e <FOE_ServiceInd+0x1b6>
        {
            UINT32 u32CmdErrorCode = SWAPDWORD(pFoeInd->FoeHeader.Cmd.ErrorCode);
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	689b      	ldr	r3, [r3, #8]
 802153e:	61bb      	str	r3, [r7, #24]
            /* a file transmission sequence is active, inform the application, that this sequence
               was stopped */
            FOE_Error( u32CmdErrorCode );
 8021540:	69b8      	ldr	r0, [r7, #24]
 8021542:	f002 f97f 	bl	8023844 <FOE_Error>
            nextState = FOE_FINISHED;
 8021546:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802154a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 802154c:	e018      	b.n	8021580 <FOE_ServiceInd+0x1e8>
 802154e:	e017      	b.n	8021580 <FOE_ServiceInd+0x1e8>

    case ECAT_FOE_OPCODE_BUSY:
        /* a FoE Busy service is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK
 8021550:	4b46      	ldr	r3, [pc, #280]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021552:	881b      	ldrh	r3, [r3, #0]
 8021554:	2b01      	cmp	r3, #1
 8021556:	d003      	beq.n	8021560 <FOE_ServiceInd+0x1c8>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 8021558:	4b44      	ldr	r3, [pc, #272]	; (802166c <FOE_ServiceInd+0x2d4>)
 802155a:	881b      	ldrh	r3, [r3, #0]
 802155c:	2b04      	cmp	r3, #4
 802155e:	d10e      	bne.n	802157e <FOE_ServiceInd+0x1e6>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to resend the last part of the file */
            nextState = FOE_Busy( SWAPWORD(pFoeInd->FoeHeader.Cmd.Busy.Done), u32LastFileOffset, pFoeInd->Data );
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	891b      	ldrh	r3, [r3, #8]
 8021564:	b299      	uxth	r1, r3
 8021566:	4b42      	ldr	r3, [pc, #264]	; (8021670 <FOE_ServiceInd+0x2d8>)
 8021568:	681a      	ldr	r2, [r3, #0]
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	330c      	adds	r3, #12
 802156e:	4608      	mov	r0, r1
 8021570:	4611      	mov	r1, r2
 8021572:	461a      	mov	r2, r3
 8021574:	f002 f956 	bl	8023824 <FOE_Busy>
 8021578:	4603      	mov	r3, r0
 802157a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 802157c:	e7ff      	b.n	802157e <FOE_ServiceInd+0x1e6>
 802157e:	bf00      	nop

    }

    if ( nextState <= FOE_MAXDATA )
 8021580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021582:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021586:	4293      	cmp	r3, r2
 8021588:	d81f      	bhi.n	80215ca <FOE_ServiceInd+0x232>
    {
        /* we send DATA and wait for ACK */
        UINT32 d = SWAPDWORD(u32PacketNo);
 802158a:	4b3a      	ldr	r3, [pc, #232]	; (8021674 <FOE_ServiceInd+0x2dc>)
 802158c:	681b      	ldr	r3, [r3, #0]
 802158e:	60bb      	str	r3, [r7, #8]

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode           = SWAPWORD(ECAT_FOE_OPCODE_DATA);
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	2200      	movs	r2, #0
 8021594:	f042 0203 	orr.w	r2, r2, #3
 8021598:	719a      	strb	r2, [r3, #6]
 802159a:	2200      	movs	r2, #0
 802159c:	71da      	strb	r2, [r3, #7]
        /* store the packet number in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.PacketNo     = d;
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	68ba      	ldr	r2, [r7, #8]
 80215a2:	609a      	str	r2, [r3, #8]
     
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length           = FOE_HEADER_SIZE + nextState;
 80215a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80215a6:	3306      	adds	r3, #6
 80215a8:	b29a      	uxth	r2, r3
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	801a      	strh	r2, [r3, #0]

        if ( nextState == u16SendMbxSize - FOE_HEADER_SIZE - MBX_HEADER_SIZE )
 80215ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80215b0:	4b32      	ldr	r3, [pc, #200]	; (802167c <FOE_ServiceInd+0x2e4>)
 80215b2:	881b      	ldrh	r3, [r3, #0]
 80215b4:	3b0c      	subs	r3, #12
 80215b6:	429a      	cmp	r2, r3
 80215b8:	d103      	bne.n	80215c2 <FOE_ServiceInd+0x22a>
        {
            /* packets still following, we wait for an ACK */
            u16FileAccessState = FOE_WAIT_FOR_ACK;
 80215ba:	4b2c      	ldr	r3, [pc, #176]	; (802166c <FOE_ServiceInd+0x2d4>)
 80215bc:	2201      	movs	r2, #1
 80215be:	801a      	strh	r2, [r3, #0]
 80215c0:	e0bc      	b.n	802173c <FOE_ServiceInd+0x3a4>
        }
        else
        {
            /* it was the last Packet, we wait for the last ACK */
            u16FileAccessState = FOE_WAIT_FOR_LAST_ACK;
 80215c2:	4b2a      	ldr	r3, [pc, #168]	; (802166c <FOE_ServiceInd+0x2d4>)
 80215c4:	2204      	movs	r2, #4
 80215c6:	801a      	strh	r2, [r3, #0]
 80215c8:	e0b8      	b.n	802173c <FOE_ServiceInd+0x3a4>
        }
    }
    else if ( nextState <= FOE_MAXBUSY )
 80215ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80215cc:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 80215d0:	4293      	cmp	r3, r2
 80215d2:	d81a      	bhi.n	802160a <FOE_ServiceInd+0x272>
    {
        /* we are still storing the received file data (in flash for example) and
           send BUSY and wait for the DATA to be sent again */
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_BUSY);
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2200      	movs	r2, #0
 80215d8:	f042 0206 	orr.w	r2, r2, #6
 80215dc:	719a      	strb	r2, [r3, #6]
 80215de:	2200      	movs	r2, #0
 80215e0:	71da      	strb	r2, [r3, #7]
        /* store the information how much progress we made until we can receive file data again */
/* ECATCHANGE_START(V5.11) FOE1*/
        pFoeInd->FoeHeader.Cmd.Busy.Done            = SWAPWORD(nextState-FOE_MAXBUSY_ZERO);
 80215e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80215e4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80215e8:	3b16      	subs	r3, #22
 80215ea:	b29a      	uxth	r2, r3
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	811a      	strh	r2, [r3, #8]
/* ECATCHANGE_END(V5.11) FOE1*/

        pFoeInd->FoeHeader.Cmd.Busy.Entire          = 0;
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	2200      	movs	r2, #0
 80215f4:	729a      	strb	r2, [r3, #10]
 80215f6:	2200      	movs	r2, #0
 80215f8:	72da      	strb	r2, [r3, #11]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	2200      	movs	r2, #0
 80215fe:	f042 0206 	orr.w	r2, r2, #6
 8021602:	701a      	strb	r2, [r3, #0]
 8021604:	2200      	movs	r2, #0
 8021606:	705a      	strb	r2, [r3, #1]
 8021608:	e098      	b.n	802173c <FOE_ServiceInd+0x3a4>
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
 802160a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802160c:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8021610:	4293      	cmp	r3, r2
 8021612:	d004      	beq.n	802161e <FOE_ServiceInd+0x286>
 8021614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021616:	f647 72fc 	movw	r2, #32764	; 0x7ffc
 802161a:	4293      	cmp	r3, r2
 802161c:	d130      	bne.n	8021680 <FOE_ServiceInd+0x2e8>
    {
        /* we send ACK and wait for DATA
            the next file data is expected with an incremented packet number, but
            we have to acknowledge the old packet first */
        UINT32 d = SWAPDWORD(u32PacketNo);
 802161e:	4b15      	ldr	r3, [pc, #84]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	60fb      	str	r3, [r7, #12]
        u32PacketNo++;
 8021624:	4b13      	ldr	r3, [pc, #76]	; (8021674 <FOE_ServiceInd+0x2dc>)
 8021626:	681b      	ldr	r3, [r3, #0]
 8021628:	3301      	adds	r3, #1
 802162a:	4a12      	ldr	r2, [pc, #72]	; (8021674 <FOE_ServiceInd+0x2dc>)
 802162c:	6013      	str	r3, [r2, #0]
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_ACK);
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	2200      	movs	r2, #0
 8021632:	f042 0204 	orr.w	r2, r2, #4
 8021636:	719a      	strb	r2, [r3, #6]
 8021638:	2200      	movs	r2, #0
 802163a:	71da      	strb	r2, [r3, #7]
        /* store the packet number in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.PacketNo             = d;
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	68fa      	ldr	r2, [r7, #12]
 8021640:	609a      	str	r2, [r3, #8]
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	2200      	movs	r2, #0
 8021646:	f042 0206 	orr.w	r2, r2, #6
 802164a:	701a      	strb	r2, [r3, #0]
 802164c:	2200      	movs	r2, #0
 802164e:	705a      	strb	r2, [r3, #1]

        /* we wait for the next data part */
        if ( nextState == FOE_ACK )
 8021650:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021652:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8021656:	4293      	cmp	r3, r2
 8021658:	d103      	bne.n	8021662 <FOE_ServiceInd+0x2ca>
            /* we wait for the next data part */
            u16FileAccessState = FOE_WAIT_FOR_DATA;
 802165a:	4b04      	ldr	r3, [pc, #16]	; (802166c <FOE_ServiceInd+0x2d4>)
 802165c:	2202      	movs	r2, #2
 802165e:	801a      	strh	r2, [r3, #0]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
    {
 8021660:	e06c      	b.n	802173c <FOE_ServiceInd+0x3a4>
        if ( nextState == FOE_ACK )
            /* we wait for the next data part */
            u16FileAccessState = FOE_WAIT_FOR_DATA;
        else
            /* the last data part was received */
            u16FileAccessState = FOE_READY;
 8021662:	4b02      	ldr	r3, [pc, #8]	; (802166c <FOE_ServiceInd+0x2d4>)
 8021664:	2200      	movs	r2, #0
 8021666:	801a      	strh	r2, [r3, #0]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
    {
 8021668:	e068      	b.n	802173c <FOE_ServiceInd+0x3a4>
 802166a:	bf00      	nop
 802166c:	1ffea810 	.word	0x1ffea810
 8021670:	1ffea81c 	.word	0x1ffea81c
 8021674:	1ffea814 	.word	0x1ffea814
 8021678:	1ffea80c 	.word	0x1ffea80c
 802167c:	1ffeac7c 	.word	0x1ffeac7c
            u16FileAccessState = FOE_WAIT_FOR_DATA;
        else
            /* the last data part was received */
            u16FileAccessState = FOE_READY;
    }
    else if ( nextState < FOE_ERROR )
 8021680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021682:	b21b      	sxth	r3, r3
 8021684:	2b00      	cmp	r3, #0
 8021686:	db07      	blt.n	8021698 <FOE_ServiceInd+0x300>
    {
        /* the file transmission sequence is finished, we have to send nothing */
        u16FileAccessState = FOE_READY;
 8021688:	4b49      	ldr	r3, [pc, #292]	; (80217b0 <FOE_ServiceInd+0x418>)
 802168a:	2200      	movs	r2, #0
 802168c:	801a      	strh	r2, [r3, #0]
        APPL_FreeMailboxBuffer(pFoeInd);
 802168e:	6878      	ldr	r0, [r7, #4]
 8021690:	f008 fe26 	bl	802a2e0 <free>
        return 0;
 8021694:	2300      	movs	r3, #0
 8021696:	e086      	b.n	80217a6 <FOE_ServiceInd+0x40e>
    }
    else
    {
        UINT32 d = SWAPDWORD(nextState);
 8021698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802169a:	617b      	str	r3, [r7, #20]
        UINT8 b = 0;
 802169c:	2300      	movs	r3, #0
 802169e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                    = SWAPWORD(ECAT_FOE_OPCODE_ERR);
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	2200      	movs	r2, #0
 80216a6:	f042 0205 	orr.w	r2, r2, #5
 80216aa:	719a      	strb	r2, [r3, #6]
 80216ac:	2200      	movs	r2, #0
 80216ae:	71da      	strb	r2, [r3, #7]
        /* store the ErrorCode in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.ErrorCode            = d;
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	697a      	ldr	r2, [r7, #20]
 80216b4:	609a      	str	r2, [r3, #8]
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	2200      	movs	r2, #0
 80216ba:	f042 0206 	orr.w	r2, r2, #6
 80216be:	701a      	strb	r2, [r3, #0]
 80216c0:	2200      	movs	r2, #0
 80216c2:	705a      	strb	r2, [r3, #1]

        /* Error Text is returned in pFoeInd->Data */
        while (b < 32)
 80216c4:	e023      	b.n	802170e <FOE_ServiceInd+0x376>
        {
            UINT16 data = ((UINT16 MBXMEM *) pFoeInd->Data)[(b >> 1)];
 80216c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80216ca:	085b      	lsrs	r3, r3, #1
 80216cc:	b2db      	uxtb	r3, r3
 80216ce:	687a      	ldr	r2, [r7, #4]
 80216d0:	1d19      	adds	r1, r3, #4
 80216d2:	004b      	lsls	r3, r1, #1
 80216d4:	4413      	add	r3, r2
 80216d6:	7918      	ldrb	r0, [r3, #4]
 80216d8:	004b      	lsls	r3, r1, #1
 80216da:	4413      	add	r3, r2
 80216dc:	795b      	ldrb	r3, [r3, #5]
 80216de:	021b      	lsls	r3, r3, #8
 80216e0:	4303      	orrs	r3, r0
 80216e2:	827b      	strh	r3, [r7, #18]

            if ((data & 0x00FF) == 0)
 80216e4:	8a7b      	ldrh	r3, [r7, #18]
 80216e6:	b2db      	uxtb	r3, r3
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d100      	bne.n	80216ee <FOE_ServiceInd+0x356>
                break;
 80216ec:	e013      	b.n	8021716 <FOE_ServiceInd+0x37e>
            b++;
 80216ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80216f2:	3301      	adds	r3, #1
 80216f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        
            if ((data & 0xFF00) == 0)
 80216f8:	8a7b      	ldrh	r3, [r7, #18]
 80216fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d100      	bne.n	8021704 <FOE_ServiceInd+0x36c>
                break;
 8021702:	e008      	b.n	8021716 <FOE_ServiceInd+0x37e>
            b++;
 8021704:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021708:	3301      	adds	r3, #1
 802170a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        pFoeInd->FoeHeader.Cmd.ErrorCode            = d;
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);

        /* Error Text is returned in pFoeInd->Data */
        while (b < 32)
 802170e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021712:	2b1f      	cmp	r3, #31
 8021714:	d9d7      	bls.n	80216c6 <FOE_ServiceInd+0x32e>
        
            if ((data & 0xFF00) == 0)
                break;
            b++;
        }
        if ( b < 32 )
 8021716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802171a:	2b1f      	cmp	r3, #31
 802171c:	d80b      	bhi.n	8021736 <FOE_ServiceInd+0x39e>
        {
            pFoeInd->MbxHeader.Length    += b+1;
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	881b      	ldrh	r3, [r3, #0]
 8021722:	b29a      	uxth	r2, r3
 8021724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021728:	b29b      	uxth	r3, r3
 802172a:	4413      	add	r3, r2
 802172c:	b29b      	uxth	r3, r3
 802172e:	3301      	adds	r3, #1
 8021730:	b29a      	uxth	r2, r3
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	801a      	strh	r2, [r3, #0]
        }

        /* the file transmission sequence is finished */
        u16FileAccessState = FOE_READY;
 8021736:	4b1e      	ldr	r3, [pc, #120]	; (80217b0 <FOE_ServiceInd+0x418>)
 8021738:	2200      	movs	r2, #0
 802173a:	801a      	strh	r2, [r3, #0]
    }

    if ( bBootMode )
 802173c:	4b1d      	ldr	r3, [pc, #116]	; (80217b4 <FOE_ServiceInd+0x41c>)
 802173e:	781b      	ldrb	r3, [r3, #0]
 8021740:	2b00      	cmp	r3, #0
 8021742:	d025      	beq.n	8021790 <FOE_ServiceInd+0x3f8>
    {
        /* in BOOT mode the mailbox buffer is not sent via the mailbox functions
           because only FoE is allowed in BOOT mode, so we have to include the
            mailbox data link layer counter */
        pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8021744:	687b      	ldr	r3, [r7, #4]
 8021746:	795b      	ldrb	r3, [r3, #5]
 8021748:	f003 030f 	and.w	r3, r3, #15
 802174c:	b2da      	uxtb	r2, r3
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	715a      	strb	r2, [r3, #5]
        if ( (u8MbxReadCounter & 0x07) == 0 )
 8021752:	4b19      	ldr	r3, [pc, #100]	; (80217b8 <FOE_ServiceInd+0x420>)
 8021754:	781b      	ldrb	r3, [r3, #0]
 8021756:	f003 0307 	and.w	r3, r3, #7
 802175a:	2b00      	cmp	r3, #0
 802175c:	d102      	bne.n	8021764 <FOE_ServiceInd+0x3cc>
            /* counter 0 is not allowed if mailbox data link layer is supported */
            u8MbxReadCounter = 1;
 802175e:	4b16      	ldr	r3, [pc, #88]	; (80217b8 <FOE_ServiceInd+0x420>)
 8021760:	2201      	movs	r2, #1
 8021762:	701a      	strb	r2, [r3, #0]
        /* store the counter in the mailbox header */
        pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	795b      	ldrb	r3, [r3, #5]
 8021768:	b2da      	uxtb	r2, r3
 802176a:	4b13      	ldr	r3, [pc, #76]	; (80217b8 <FOE_ServiceInd+0x420>)
 802176c:	781b      	ldrb	r3, [r3, #0]
 802176e:	011b      	lsls	r3, r3, #4
 8021770:	b2db      	uxtb	r3, r3
 8021772:	4313      	orrs	r3, r2
 8021774:	b2db      	uxtb	r3, r3
 8021776:	b2da      	uxtb	r2, r3
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	715a      	strb	r2, [r3, #5]
        /* increment the counter for the next service */
          u8MbxReadCounter++;
 802177c:	4b0e      	ldr	r3, [pc, #56]	; (80217b8 <FOE_ServiceInd+0x420>)
 802177e:	781b      	ldrb	r3, [r3, #0]
 8021780:	3301      	adds	r3, #1
 8021782:	b2da      	uxtb	r2, r3
 8021784:	4b0c      	ldr	r3, [pc, #48]	; (80217b8 <FOE_ServiceInd+0x420>)
 8021786:	701a      	strb	r2, [r3, #0]
        /* call the function to send the mailbox service directly,
           in BOOT mode we can be sure that the send mailbox is empty
           because no parallel services are allowed */
        MBX_CopyToSendMailbox((TMBX MBXMEM *) pFoeInd);
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f002 fd07 	bl	802419c <MBX_CopyToSendMailbox>
 802178e:	e009      	b.n	80217a4 <FOE_ServiceInd+0x40c>
    }
    else
    {
        if ( MBX_MailboxSendReq((TMBX MBXMEM *) pFoeInd, FOE_SERVICE) != 0 )
 8021790:	6878      	ldr	r0, [r7, #4]
 8021792:	2140      	movs	r1, #64	; 0x40
 8021794:	f002 fbf4 	bl	8023f80 <MBX_MailboxSendReq>
 8021798:	4603      	mov	r3, r0
 802179a:	2b00      	cmp	r3, #0
 802179c:	d002      	beq.n	80217a4 <FOE_ServiceInd+0x40c>
        {
            /* if the mailbox service could not be sent (or stored), the response will be
               stored in the variable pFoeSendStored and will be sent automatically
                from the mailbox handler (FOE_ContinueInd) when the send mailbox will be read
                the next time from the master */
            pFoeSendStored = (TMBX MBXMEM *) pFoeInd;
 802179e:	4a07      	ldr	r2, [pc, #28]	; (80217bc <FOE_ServiceInd+0x424>)
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	6013      	str	r3, [r2, #0]
        }
    }

    return 0;
 80217a4:	2300      	movs	r3, #0
}
 80217a6:	4618      	mov	r0, r3
 80217a8:	3730      	adds	r7, #48	; 0x30
 80217aa:	46bd      	mov	sp, r7
 80217ac:	bd80      	pop	{r7, pc}
 80217ae:	bf00      	nop
 80217b0:	1ffea810 	.word	0x1ffea810
 80217b4:	1ffea85a 	.word	0x1ffea85a
 80217b8:	1ffeac04 	.word	0x1ffeac04
 80217bc:	1ffea818 	.word	0x1ffea818

080217c0 <FOE_ContinueInd>:

 \brief    This function is called when the next mailbox fragment can be sent.
*////////////////////////////////////////////////////////////////////////////////////////

void FOE_ContinueInd(TMBX MBXMEM * pMbx)
{
 80217c0:	b580      	push	{r7, lr}
 80217c2:	b082      	sub	sp, #8
 80217c4:	af00      	add	r7, sp, #0
 80217c6:	6078      	str	r0, [r7, #4]
    if ( pFoeSendStored )
 80217c8:	4b07      	ldr	r3, [pc, #28]	; (80217e8 <FOE_ContinueInd+0x28>)
 80217ca:	681b      	ldr	r3, [r3, #0]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d008      	beq.n	80217e2 <FOE_ContinueInd+0x22>
    {
        /* send the stored FoE service which could not be sent before */
        MBX_MailboxSendReq(pFoeSendStored, 0);
 80217d0:	4b05      	ldr	r3, [pc, #20]	; (80217e8 <FOE_ContinueInd+0x28>)
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	4618      	mov	r0, r3
 80217d6:	2100      	movs	r1, #0
 80217d8:	f002 fbd2 	bl	8023f80 <MBX_MailboxSendReq>
        pFoeSendStored = 0;
 80217dc:	4b02      	ldr	r3, [pc, #8]	; (80217e8 <FOE_ContinueInd+0x28>)
 80217de:	2200      	movs	r2, #0
 80217e0:	601a      	str	r2, [r3, #0]
    }
}
 80217e2:	3708      	adds	r7, #8
 80217e4:	46bd      	mov	sp, r7
 80217e6:	bd80      	pop	{r7, pc}
 80217e8:	1ffea818 	.word	0x1ffea818

080217ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80217ec:	b480      	push	{r7}
 80217ee:	b083      	sub	sp, #12
 80217f0:	af00      	add	r7, sp, #0
 80217f2:	4603      	mov	r3, r0
 80217f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80217f6:	4908      	ldr	r1, [pc, #32]	; (8021818 <NVIC_EnableIRQ+0x2c>)
 80217f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80217fc:	095b      	lsrs	r3, r3, #5
 80217fe:	79fa      	ldrb	r2, [r7, #7]
 8021800:	f002 021f 	and.w	r2, r2, #31
 8021804:	2001      	movs	r0, #1
 8021806:	fa00 f202 	lsl.w	r2, r0, r2
 802180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802180e:	370c      	adds	r7, #12
 8021810:	46bd      	mov	sp, r7
 8021812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021816:	4770      	bx	lr
 8021818:	e000e100 	.word	0xe000e100

0802181c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802181c:	b480      	push	{r7}
 802181e:	b083      	sub	sp, #12
 8021820:	af00      	add	r7, sp, #0
 8021822:	4603      	mov	r3, r0
 8021824:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8021826:	4909      	ldr	r1, [pc, #36]	; (802184c <NVIC_DisableIRQ+0x30>)
 8021828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802182c:	095b      	lsrs	r3, r3, #5
 802182e:	79fa      	ldrb	r2, [r7, #7]
 8021830:	f002 021f 	and.w	r2, r2, #31
 8021834:	2001      	movs	r0, #1
 8021836:	fa00 f202 	lsl.w	r2, r0, r2
 802183a:	3320      	adds	r3, #32
 802183c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8021840:	370c      	adds	r7, #12
 8021842:	46bd      	mov	sp, r7
 8021844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021848:	4770      	bx	lr
 802184a:	bf00      	nop
 802184c:	e000e100 	.word	0xe000e100

08021850 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 8021850:	b480      	push	{r7}
 8021852:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8021854:	4b04      	ldr	r3, [pc, #16]	; (8021868 <XMC_ECAT_GetALEventRegister+0x18>)
 8021856:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802185a:	b29b      	uxth	r3, r3
}
 802185c:	4618      	mov	r0, r3
 802185e:	46bd      	mov	sp, r7
 8021860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021864:	4770      	bx	lr
 8021866:	bf00      	nop
 8021868:	54010000 	.word	0x54010000

0802186c <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b082      	sub	sp, #8
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
 8021874:	460b      	mov	r3, r1
 8021876:	807b      	strh	r3, [r7, #2]
 8021878:	4613      	mov	r3, r2
 802187a:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 802187c:	887b      	ldrh	r3, [r7, #2]
 802187e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021882:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021886:	883a      	ldrh	r2, [r7, #0]
 8021888:	6878      	ldr	r0, [r7, #4]
 802188a:	4619      	mov	r1, r3
 802188c:	f008 fd30 	bl	802a2f0 <memcpy>
}
 8021890:	3708      	adds	r7, #8
 8021892:	46bd      	mov	sp, r7
 8021894:	bd80      	pop	{r7, pc}
 8021896:	bf00      	nop

08021898 <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 8021898:	b580      	push	{r7, lr}
 802189a:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 802189c:	f7ff ffd8 	bl	8021850 <XMC_ECAT_GetALEventRegister>
 80218a0:	4603      	mov	r3, r0
}
 80218a2:	4618      	mov	r0, r3
 80218a4:	bd80      	pop	{r7, pc}
 80218a6:	bf00      	nop

080218a8 <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 80218a8:	b580      	push	{r7, lr}
 80218aa:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 80218ac:	206d      	movs	r0, #109	; 0x6d
 80218ae:	f7ff ff9d 	bl	80217ec <NVIC_EnableIRQ>
}
 80218b2:	bd80      	pop	{r7, pc}

080218b4 <DISABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to disable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void DISABLE_ESC_INT(void)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(ECAT0_0_IRQn);
 80218b8:	206d      	movs	r0, #109	; 0x6d
 80218ba:	f7ff ffaf 	bl	802181c <NVIC_DisableIRQ>
}
 80218be:	bd80      	pop	{r7, pc}

080218c0 <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b084      	sub	sp, #16
 80218c4:	af00      	add	r7, sp, #0
 80218c6:	4603      	mov	r3, r0
 80218c8:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80218ca:	4b08      	ldr	r3, [pc, #32]	; (80218ec <ResetALEventMask+0x2c>)
 80218cc:	881b      	ldrh	r3, [r3, #0]
 80218ce:	81fb      	strh	r3, [r7, #14]
    
    mask &= intMask;
 80218d0:	89fa      	ldrh	r2, [r7, #14]
 80218d2:	88fb      	ldrh	r3, [r7, #6]
 80218d4:	4013      	ands	r3, r2
 80218d6:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 80218d8:	f7ff ffec 	bl	80218b4 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80218dc:	4a03      	ldr	r2, [pc, #12]	; (80218ec <ResetALEventMask+0x2c>)
 80218de:	89fb      	ldrh	r3, [r7, #14]
 80218e0:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 80218e2:	f7ff ffe1 	bl	80218a8 <ENABLE_ESC_INT>
}
 80218e6:	3710      	adds	r7, #16
 80218e8:	46bd      	mov	sp, r7
 80218ea:	bd80      	pop	{r7, pc}
 80218ec:	54010204 	.word	0x54010204

080218f0 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b084      	sub	sp, #16
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	4603      	mov	r3, r0
 80218f8:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80218fa:	4b08      	ldr	r3, [pc, #32]	; (802191c <SetALEventMask+0x2c>)
 80218fc:	881b      	ldrh	r3, [r3, #0]
 80218fe:	81fb      	strh	r3, [r7, #14]
    
    mask |= intMask;
 8021900:	89fa      	ldrh	r2, [r7, #14]
 8021902:	88fb      	ldrh	r3, [r7, #6]
 8021904:	4313      	orrs	r3, r2
 8021906:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8021908:	f7ff ffd4 	bl	80218b4 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 802190c:	4a03      	ldr	r2, [pc, #12]	; (802191c <SetALEventMask+0x2c>)
 802190e:	89fb      	ldrh	r3, [r7, #14]
 8021910:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 8021912:	f7ff ffc9 	bl	80218a8 <ENABLE_ESC_INT>
}
 8021916:	3710      	adds	r7, #16
 8021918:	46bd      	mov	sp, r7
 802191a:	bd80      	pop	{r7, pc}
 802191c:	54010204 	.word	0x54010204

08021920 <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 8021920:	b480      	push	{r7}
 8021922:	b083      	sub	sp, #12
 8021924:	af00      	add	r7, sp, #0
    {
       UINT16 TmpVar = 0;
 8021926:	2300      	movs	r3, #0
 8021928:	80fb      	strh	r3, [r7, #6]
       //read EEPROM loaded information
       HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 802192a:	4b0c      	ldr	r3, [pc, #48]	; (802195c <UpdateEEPROMLoadedState+0x3c>)
 802192c:	881b      	ldrh	r3, [r3, #0]
 802192e:	80fb      	strh	r3, [r7, #6]
       TmpVar = SWAPWORD(TmpVar);

       if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8021930:	88fb      	ldrh	r3, [r7, #6]
 8021932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021936:	2b00      	cmp	r3, #0
 8021938:	dc04      	bgt.n	8021944 <UpdateEEPROMLoadedState+0x24>
          || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 802193a:	88fb      	ldrh	r3, [r7, #6]
 802193c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021940:	2b00      	cmp	r3, #0
 8021942:	dd03      	ble.n	802194c <UpdateEEPROMLoadedState+0x2c>
       {
          EepromLoaded = FALSE;
 8021944:	4b06      	ldr	r3, [pc, #24]	; (8021960 <UpdateEEPROMLoadedState+0x40>)
 8021946:	2200      	movs	r2, #0
 8021948:	701a      	strb	r2, [r3, #0]
 802194a:	e002      	b.n	8021952 <UpdateEEPROMLoadedState+0x32>
       }
       else
       {
          EepromLoaded = TRUE;
 802194c:	4b04      	ldr	r3, [pc, #16]	; (8021960 <UpdateEEPROMLoadedState+0x40>)
 802194e:	2201      	movs	r2, #1
 8021950:	701a      	strb	r2, [r3, #0]
       }
    }
}
 8021952:	370c      	adds	r7, #12
 8021954:	46bd      	mov	sp, r7
 8021956:	f85d 7b04 	ldr.w	r7, [sp], #4
 802195a:	4770      	bx	lr
 802195c:	54010502 	.word	0x54010502
 8021960:	1ffe9522 	.word	0x1ffe9522

08021964 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8021964:	b580      	push	{r7, lr}
 8021966:	b082      	sub	sp, #8
 8021968:	af00      	add	r7, sp, #0
 802196a:	4603      	mov	r3, r0
 802196c:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 802196e:	79fb      	ldrb	r3, [r7, #7]
 8021970:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021974:	b29b      	uxth	r3, r3
 8021976:	00db      	lsls	r3, r3, #3
 8021978:	b29b      	uxth	r3, r3
 802197a:	4805      	ldr	r0, [pc, #20]	; (8021990 <GetSyncMan+0x2c>)
 802197c:	4619      	mov	r1, r3
 802197e:	2208      	movs	r2, #8
 8021980:	f7ff ff74 	bl	802186c <HW_EscRead>


    return &SyncManInfo;
 8021984:	4b02      	ldr	r3, [pc, #8]	; (8021990 <GetSyncMan+0x2c>)
}
 8021986:	4618      	mov	r0, r3
 8021988:	3708      	adds	r7, #8
 802198a:	46bd      	mov	sp, r7
 802198c:	bd80      	pop	{r7, pc}
 802198e:	bf00      	nop
 8021990:	1ffea844 	.word	0x1ffea844

08021994 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8021994:	b480      	push	{r7}
 8021996:	b085      	sub	sp, #20
 8021998:	af00      	add	r7, sp, #0
 802199a:	4603      	mov	r3, r0
 802199c:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = SM_SETTING_PDI_DISABLE;
 802199e:	2301      	movs	r3, #1
 80219a0:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 80219a2:	79fb      	ldrb	r3, [r7, #7]
 80219a4:	b29b      	uxth	r3, r3
 80219a6:	00db      	lsls	r3, r3, #3
 80219a8:	b29b      	uxth	r3, r3
 80219aa:	f603 0307 	addw	r3, r3, #2055	; 0x807
 80219ae:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 80219b0:	89fb      	ldrh	r3, [r7, #14]
 80219b2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80219b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80219ba:	7b7a      	ldrb	r2, [r7, #13]
 80219bc:	b2d2      	uxtb	r2, r2
 80219be:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadByte(smStatus, Offset);
 80219c0:	89fb      	ldrh	r3, [r7, #14]
 80219c2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80219c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80219ca:	781b      	ldrb	r3, [r3, #0]
 80219cc:	b2db      	uxtb	r3, r3
 80219ce:	737b      	strb	r3, [r7, #13]
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 80219d0:	7b7b      	ldrb	r3, [r7, #13]
 80219d2:	b2db      	uxtb	r3, r3
 80219d4:	f003 0301 	and.w	r3, r3, #1
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d0f1      	beq.n	80219c0 <DisableSyncManChannel+0x2c>
}
 80219dc:	3714      	adds	r7, #20
 80219de:	46bd      	mov	sp, r7
 80219e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e4:	4770      	bx	lr
 80219e6:	bf00      	nop

080219e8 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 80219e8:	b480      	push	{r7}
 80219ea:	b085      	sub	sp, #20
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	4603      	mov	r3, r0
 80219f0:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = 0x00;
 80219f2:	2300      	movs	r3, #0
 80219f4:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 80219f6:	79fb      	ldrb	r3, [r7, #7]
 80219f8:	b29b      	uxth	r3, r3
 80219fa:	00db      	lsls	r3, r3, #3
 80219fc:	b29b      	uxth	r3, r3
 80219fe:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8021a02:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8021a04:	89fb      	ldrh	r3, [r7, #14]
 8021a06:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021a0a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021a0e:	7b7a      	ldrb	r2, [r7, #13]
 8021a10:	b2d2      	uxtb	r2, r2
 8021a12:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadByte(smStatus,Offset);
 8021a14:	89fb      	ldrh	r3, [r7, #14]
 8021a16:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021a1a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021a1e:	781b      	ldrb	r3, [r3, #0]
 8021a20:	b2db      	uxtb	r3, r3
 8021a22:	737b      	strb	r3, [r7, #13]
    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8021a24:	7b7b      	ldrb	r3, [r7, #13]
 8021a26:	b2db      	uxtb	r3, r3
 8021a28:	f003 0301 	and.w	r3, r3, #1
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d1f1      	bne.n	8021a14 <EnableSyncManChannel+0x2c>
}
 8021a30:	3714      	adds	r7, #20
 8021a32:	46bd      	mov	sp, r7
 8021a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a38:	4770      	bx	lr
 8021a3a:	bf00      	nop

08021a3c <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8021a3c:	b580      	push	{r7, lr}
 8021a3e:	b086      	sub	sp, #24
 8021a40:	af00      	add	r7, sp, #0
 8021a42:	4603      	mov	r3, r0
 8021a44:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8021a46:	2300      	movs	r3, #0
 8021a48:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 8021a4e:	2300      	movs	r3, #0
 8021a50:	827b      	strh	r3, [r7, #18]

    //Check if max address defines are within the available ESC address range
    if((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 8021a52:	4ba0      	ldr	r3, [pc, #640]	; (8021cd4 <CheckSmSettings+0x298>)
 8021a54:	881b      	ldrh	r3, [r3, #0]
 8021a56:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021a5a:	4293      	cmp	r3, r2
 8021a5c:	d911      	bls.n	8021a82 <CheckSmSettings+0x46>
        ||(nMaxEscAddress < MAX_PD_READ_ADDRESS)
 8021a5e:	4b9d      	ldr	r3, [pc, #628]	; (8021cd4 <CheckSmSettings+0x298>)
 8021a60:	881b      	ldrh	r3, [r3, #0]
 8021a62:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021a66:	4293      	cmp	r3, r2
 8021a68:	d90b      	bls.n	8021a82 <CheckSmSettings+0x46>
/*ECATCHANGE_START(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8021a6a:	4b9a      	ldr	r3, [pc, #616]	; (8021cd4 <CheckSmSettings+0x298>)
 8021a6c:	881b      	ldrh	r3, [r3, #0]
 8021a6e:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021a72:	4293      	cmp	r3, r2
 8021a74:	d905      	bls.n	8021a82 <CheckSmSettings+0x46>
/*ECATCHANGE_END(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 8021a76:	4b97      	ldr	r3, [pc, #604]	; (8021cd4 <CheckSmSettings+0x298>)
 8021a78:	881b      	ldrh	r3, [r3, #0]
 8021a7a:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021a7e:	4293      	cmp	r3, r2
 8021a80:	d801      	bhi.n	8021a86 <CheckSmSettings+0x4a>
    {
        /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
        It may be also required to adapt the SM settings in the ESI file*/

        return ALSTATUSCODE_NOVALIDFIRMWARE;
 8021a82:	2314      	movs	r3, #20
 8021a84:	e1a7      	b.n	8021dd6 <CheckSmSettings+0x39a>
    }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8021a86:	2000      	movs	r0, #0
 8021a88:	f7ff ff6c 	bl	8021964 <GetSyncMan>
 8021a8c:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021a8e:	68fb      	ldr	r3, [r7, #12]
 8021a90:	789a      	ldrb	r2, [r3, #2]
 8021a92:	78db      	ldrb	r3, [r3, #3]
 8021a94:	021b      	lsls	r3, r3, #8
 8021a96:	4313      	orrs	r3, r2
 8021a98:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021a9a:	68fb      	ldr	r3, [r7, #12]
 8021a9c:	781a      	ldrb	r2, [r3, #0]
 8021a9e:	785b      	ldrb	r3, [r3, #1]
 8021aa0:	021b      	lsls	r3, r3, #8
 8021aa2:	4313      	orrs	r3, r2
 8021aa4:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	799b      	ldrb	r3, [r3, #6]
 8021aaa:	f003 0301 	and.w	r3, r3, #1
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d102      	bne.n	8021ab8 <CheckSmSettings+0x7c>
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021ab2:	2316      	movs	r3, #22
 8021ab4:	75bb      	strb	r3, [r7, #22]
 8021ab6:	e02b      	b.n	8021b10 <CheckSmSettings+0xd4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	791b      	ldrb	r3, [r3, #4]
 8021abc:	f003 030c 	and.w	r3, r3, #12
 8021ac0:	2b04      	cmp	r3, #4
 8021ac2:	d002      	beq.n	8021aca <CheckSmSettings+0x8e>
       /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021ac4:	2316      	movs	r3, #22
 8021ac6:	75bb      	strb	r3, [r7, #22]
 8021ac8:	e022      	b.n	8021b10 <CheckSmSettings+0xd4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021aca:	68fb      	ldr	r3, [r7, #12]
 8021acc:	791b      	ldrb	r3, [r3, #4]
 8021ace:	f003 0302 	and.w	r3, r3, #2
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d102      	bne.n	8021adc <CheckSmSettings+0xa0>
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021ad6:	2316      	movs	r3, #22
 8021ad8:	75bb      	strb	r3, [r7, #22]
 8021ada:	e019      	b.n	8021b10 <CheckSmSettings+0xd4>
    else if ( SMLength < MIN_MBX_SIZE )
 8021adc:	8abb      	ldrh	r3, [r7, #20]
 8021ade:	2b21      	cmp	r3, #33	; 0x21
 8021ae0:	d802      	bhi.n	8021ae8 <CheckSmSettings+0xac>
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021ae2:	2316      	movs	r3, #22
 8021ae4:	75bb      	strb	r3, [r7, #22]
 8021ae6:	e013      	b.n	8021b10 <CheckSmSettings+0xd4>
    else if ( SMLength > MAX_MBX_SIZE )
 8021ae8:	8abb      	ldrh	r3, [r7, #20]
 8021aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021aee:	d902      	bls.n	8021af6 <CheckSmSettings+0xba>
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021af0:	2316      	movs	r3, #22
 8021af2:	75bb      	strb	r3, [r7, #22]
 8021af4:	e00c      	b.n	8021b10 <CheckSmSettings+0xd4>
     else if ( SMAddress < MIN_MBX_WRITE_ADDRESS )
 8021af6:	8a7b      	ldrh	r3, [r7, #18]
 8021af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021afc:	d202      	bcs.n	8021b04 <CheckSmSettings+0xc8>
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021afe:	2316      	movs	r3, #22
 8021b00:	75bb      	strb	r3, [r7, #22]
 8021b02:	e005      	b.n	8021b10 <CheckSmSettings+0xd4>
    else if ( SMAddress > MAX_MBX_WRITE_ADDRESS)
 8021b04:	8a7b      	ldrh	r3, [r7, #18]
 8021b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021b0a:	d301      	bcc.n	8021b10 <CheckSmSettings+0xd4>
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b0c:	2316      	movs	r3, #22
 8021b0e:	75bb      	strb	r3, [r7, #22]


    if ( result == 0 )
 8021b10:	7dbb      	ldrb	r3, [r7, #22]
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	d144      	bne.n	8021ba0 <CheckSmSettings+0x164>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8021b16:	2001      	movs	r0, #1
 8021b18:	f7ff ff24 	bl	8021964 <GetSyncMan>
 8021b1c:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021b1e:	68fb      	ldr	r3, [r7, #12]
 8021b20:	789a      	ldrb	r2, [r3, #2]
 8021b22:	78db      	ldrb	r3, [r3, #3]
 8021b24:	021b      	lsls	r3, r3, #8
 8021b26:	4313      	orrs	r3, r2
 8021b28:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021b2a:	68fb      	ldr	r3, [r7, #12]
 8021b2c:	781a      	ldrb	r2, [r3, #0]
 8021b2e:	785b      	ldrb	r3, [r3, #1]
 8021b30:	021b      	lsls	r3, r3, #8
 8021b32:	4313      	orrs	r3, r2
 8021b34:	827b      	strh	r3, [r7, #18]


      if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8021b36:	68fb      	ldr	r3, [r7, #12]
 8021b38:	799b      	ldrb	r3, [r3, #6]
 8021b3a:	f003 0301 	and.w	r3, r3, #1
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d102      	bne.n	8021b48 <CheckSmSettings+0x10c>
            /* send mailbox is not enabled */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b42:	2316      	movs	r3, #22
 8021b44:	75bb      	strb	r3, [r7, #22]
 8021b46:	e02b      	b.n	8021ba0 <CheckSmSettings+0x164>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8021b48:	68fb      	ldr	r3, [r7, #12]
 8021b4a:	791b      	ldrb	r3, [r3, #4]
 8021b4c:	f003 030c 	and.w	r3, r3, #12
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d002      	beq.n	8021b5a <CheckSmSettings+0x11e>
           /* receive mailbox is not readable by the master*/
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b54:	2316      	movs	r3, #22
 8021b56:	75bb      	strb	r3, [r7, #22]
 8021b58:	e022      	b.n	8021ba0 <CheckSmSettings+0x164>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021b5a:	68fb      	ldr	r3, [r7, #12]
 8021b5c:	791b      	ldrb	r3, [r3, #4]
 8021b5e:	f003 0302 	and.w	r3, r3, #2
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d102      	bne.n	8021b6c <CheckSmSettings+0x130>
            /* receive mailbox is not in one buffer mode */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b66:	2316      	movs	r3, #22
 8021b68:	75bb      	strb	r3, [r7, #22]
 8021b6a:	e019      	b.n	8021ba0 <CheckSmSettings+0x164>
        else if ( SMLength < MIN_MBX_SIZE )
 8021b6c:	8abb      	ldrh	r3, [r7, #20]
 8021b6e:	2b21      	cmp	r3, #33	; 0x21
 8021b70:	d802      	bhi.n	8021b78 <CheckSmSettings+0x13c>
            /* send mailbox size is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b72:	2316      	movs	r3, #22
 8021b74:	75bb      	strb	r3, [r7, #22]
 8021b76:	e013      	b.n	8021ba0 <CheckSmSettings+0x164>
        else if ( SMLength > MAX_MBX_SIZE )
 8021b78:	8abb      	ldrh	r3, [r7, #20]
 8021b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021b7e:	d902      	bls.n	8021b86 <CheckSmSettings+0x14a>
            /* send mailbox size is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b80:	2316      	movs	r3, #22
 8021b82:	75bb      	strb	r3, [r7, #22]
 8021b84:	e00c      	b.n	8021ba0 <CheckSmSettings+0x164>
         else if ( SMAddress < MIN_MBX_READ_ADDRESS )
 8021b86:	8a7b      	ldrh	r3, [r7, #18]
 8021b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021b8c:	d202      	bcs.n	8021b94 <CheckSmSettings+0x158>
            /* send mailbox address is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b8e:	2316      	movs	r3, #22
 8021b90:	75bb      	strb	r3, [r7, #22]
 8021b92:	e005      	b.n	8021ba0 <CheckSmSettings+0x164>
        else if ( SMAddress > MAX_MBX_READ_ADDRESS )
 8021b94:	8a7b      	ldrh	r3, [r7, #18]
 8021b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021b9a:	d301      	bcc.n	8021ba0 <CheckSmSettings+0x164>
            /* send mailbox address is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021b9c:	2316      	movs	r3, #22
 8021b9e:	75bb      	strb	r3, [r7, #22]

    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8021ba0:	7dbb      	ldrb	r3, [r7, #22]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d171      	bne.n	8021c8a <CheckSmSettings+0x24e>
 8021ba6:	79fb      	ldrb	r3, [r7, #7]
 8021ba8:	2b03      	cmp	r3, #3
 8021baa:	d96e      	bls.n	8021c8a <CheckSmSettings+0x24e>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8021bac:	4b4a      	ldr	r3, [pc, #296]	; (8021cd8 <CheckSmSettings+0x29c>)
 8021bae:	2201      	movs	r2, #1
 8021bb0:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8021bb2:	2003      	movs	r0, #3
 8021bb4:	f7ff fed6 	bl	8021964 <GetSyncMan>
 8021bb8:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021bba:	68fb      	ldr	r3, [r7, #12]
 8021bbc:	789a      	ldrb	r2, [r3, #2]
 8021bbe:	78db      	ldrb	r3, [r3, #3]
 8021bc0:	021b      	lsls	r3, r3, #8
 8021bc2:	4313      	orrs	r3, r2
 8021bc4:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021bc6:	68fb      	ldr	r3, [r7, #12]
 8021bc8:	781a      	ldrb	r2, [r3, #0]
 8021bca:	785b      	ldrb	r3, [r3, #1]
 8021bcc:	021b      	lsls	r3, r3, #8
 8021bce:	4313      	orrs	r3, r2
 8021bd0:	827b      	strh	r3, [r7, #18]


        if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	799b      	ldrb	r3, [r3, #6]
 8021bd6:	f003 0301 	and.w	r3, r3, #1
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d005      	beq.n	8021bea <CheckSmSettings+0x1ae>
 8021bde:	8abb      	ldrh	r3, [r7, #20]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d102      	bne.n	8021bea <CheckSmSettings+0x1ae>
            /* the SM3 size is 0 and the SM3 is active */
            result = SYNCMANCHSETTINGS+1;
 8021be4:	2304      	movs	r3, #4
 8021be6:	75bb      	strb	r3, [r7, #22]
 8021be8:	e04a      	b.n	8021c80 <CheckSmSettings+0x244>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021bea:	68fb      	ldr	r3, [r7, #12]
 8021bec:	799b      	ldrb	r3, [r3, #6]
 8021bee:	f003 0301 	and.w	r3, r3, #1
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d03b      	beq.n	8021c6e <CheckSmSettings+0x232>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
            if ( SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 8021bf6:	4b39      	ldr	r3, [pc, #228]	; (8021cdc <CheckSmSettings+0x2a0>)
 8021bf8:	881b      	ldrh	r3, [r3, #0]
 8021bfa:	8aba      	ldrh	r2, [r7, #20]
 8021bfc:	429a      	cmp	r2, r3
 8021bfe:	d106      	bne.n	8021c0e <CheckSmSettings+0x1d2>
 8021c00:	4b36      	ldr	r3, [pc, #216]	; (8021cdc <CheckSmSettings+0x2a0>)
 8021c02:	881b      	ldrh	r3, [r3, #0]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d002      	beq.n	8021c0e <CheckSmSettings+0x1d2>
 8021c08:	8abb      	ldrh	r3, [r7, #20]
 8021c0a:	2b44      	cmp	r3, #68	; 0x44
 8021c0c:	d902      	bls.n	8021c14 <CheckSmSettings+0x1d8>
                /* sizes don't match */
                result = SYNCMANCHSIZE+1;
 8021c0e:	2303      	movs	r3, #3
 8021c10:	75bb      	strb	r3, [r7, #22]
 8021c12:	e035      	b.n	8021c80 <CheckSmSettings+0x244>
            else
                /* sizes matches */
            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE )
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	791b      	ldrb	r3, [r3, #4]
 8021c18:	f003 030c 	and.w	r3, r3, #12
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d123      	bne.n	8021c68 <CheckSmSettings+0x22c>
            {
                /* settings match */
                if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_READ_ADDRESS )&&( SMAddress <= MAX_PD_READ_ADDRESS ) )
 8021c20:	4b2f      	ldr	r3, [pc, #188]	; (8021ce0 <CheckSmSettings+0x2a4>)
 8021c22:	781b      	ldrb	r3, [r3, #0]
 8021c24:	2b02      	cmp	r3, #2
 8021c26:	d107      	bne.n	8021c38 <CheckSmSettings+0x1fc>
 8021c28:	8a7b      	ldrh	r3, [r7, #18]
 8021c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021c2e:	d303      	bcc.n	8021c38 <CheckSmSettings+0x1fc>
 8021c30:	8a7b      	ldrh	r3, [r7, #18]
 8021c32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021c36:	d308      	bcc.n	8021c4a <CheckSmSettings+0x20e>
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
 8021c38:	4b29      	ldr	r3, [pc, #164]	; (8021ce0 <CheckSmSettings+0x2a4>)
 8021c3a:	781b      	ldrb	r3, [r3, #0]
 8021c3c:	2b02      	cmp	r3, #2
 8021c3e:	d00f      	beq.n	8021c60 <CheckSmSettings+0x224>
 8021c40:	4b28      	ldr	r3, [pc, #160]	; (8021ce4 <CheckSmSettings+0x2a8>)
 8021c42:	881b      	ldrh	r3, [r3, #0]
 8021c44:	8a7a      	ldrh	r2, [r7, #18]
 8021c46:	429a      	cmp	r2, r3
 8021c48:	d10a      	bne.n	8021c60 <CheckSmSettings+0x224>
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021c4a:	68fb      	ldr	r3, [r7, #12]
 8021c4c:	791b      	ldrb	r3, [r3, #4]
 8021c4e:	f003 0302 	and.w	r3, r3, #2
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d003      	beq.n	8021c5e <CheckSmSettings+0x222>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
 8021c56:	4b20      	ldr	r3, [pc, #128]	; (8021cd8 <CheckSmSettings+0x29c>)
 8021c58:	2200      	movs	r2, #0
 8021c5a:	701a      	strb	r2, [r3, #0]
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021c5c:	e003      	b.n	8021c66 <CheckSmSettings+0x22a>
 8021c5e:	e002      	b.n	8021c66 <CheckSmSettings+0x22a>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
                }
                else
                    /* input address is out of the allowed area or has changed in SAFEOP or OP */
                    result = SYNCMANCHADDRESS+1;
 8021c60:	2302      	movs	r3, #2
 8021c62:	75bb      	strb	r3, [r7, #22]
 8021c64:	e00c      	b.n	8021c80 <CheckSmSettings+0x244>
 8021c66:	e00b      	b.n	8021c80 <CheckSmSettings+0x244>
            }
            else
                /* input settings do not match */
                result = SYNCMANCHSETTINGS+1;
 8021c68:	2304      	movs	r3, #4
 8021c6a:	75bb      	strb	r3, [r7, #22]
 8021c6c:	e008      	b.n	8021c80 <CheckSmSettings+0x244>
        }
        else if ( SMLength != 0 || nPdInputSize != 0 )
 8021c6e:	8abb      	ldrh	r3, [r7, #20]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d103      	bne.n	8021c7c <CheckSmSettings+0x240>
 8021c74:	4b19      	ldr	r3, [pc, #100]	; (8021cdc <CheckSmSettings+0x2a0>)
 8021c76:	881b      	ldrh	r3, [r3, #0]
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d001      	beq.n	8021c80 <CheckSmSettings+0x244>
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 8021c7c:	2303      	movs	r3, #3
 8021c7e:	75bb      	strb	r3, [r7, #22]



        if ( result != 0 )
 8021c80:	7dbb      	ldrb	r3, [r7, #22]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d001      	beq.n	8021c8a <CheckSmSettings+0x24e>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 8021c86:	231e      	movs	r3, #30
 8021c88:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if ( result == 0 && maxChannel > PROCESS_DATA_OUT )
 8021c8a:	7dbb      	ldrb	r3, [r7, #22]
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	f040 808a 	bne.w	8021da6 <CheckSmSettings+0x36a>
 8021c92:	79fb      	ldrb	r3, [r7, #7]
 8021c94:	2b02      	cmp	r3, #2
 8021c96:	f240 8086 	bls.w	8021da6 <CheckSmSettings+0x36a>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8021c9a:	2002      	movs	r0, #2
 8021c9c:	f7ff fe62 	bl	8021964 <GetSyncMan>
 8021ca0:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021ca2:	68fb      	ldr	r3, [r7, #12]
 8021ca4:	789a      	ldrb	r2, [r3, #2]
 8021ca6:	78db      	ldrb	r3, [r3, #3]
 8021ca8:	021b      	lsls	r3, r3, #8
 8021caa:	4313      	orrs	r3, r2
 8021cac:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	781a      	ldrb	r2, [r3, #0]
 8021cb2:	785b      	ldrb	r3, [r3, #1]
 8021cb4:	021b      	lsls	r3, r3, #8
 8021cb6:	4313      	orrs	r3, r2
 8021cb8:	827b      	strh	r3, [r7, #18]


    if ( (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 8021cba:	68fb      	ldr	r3, [r7, #12]
 8021cbc:	799b      	ldrb	r3, [r3, #6]
 8021cbe:	f003 0301 	and.w	r3, r3, #1
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d010      	beq.n	8021ce8 <CheckSmSettings+0x2ac>
 8021cc6:	8abb      	ldrh	r3, [r7, #20]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d10d      	bne.n	8021ce8 <CheckSmSettings+0x2ac>
            /* the SM2 size is 0 and the SM2 is active */
            result = SYNCMANCHSETTINGS+1;
 8021ccc:	2304      	movs	r3, #4
 8021cce:	75bb      	strb	r3, [r7, #22]
 8021cd0:	e064      	b.n	8021d9c <CheckSmSettings+0x360>
 8021cd2:	bf00      	nop
 8021cd4:	1ffea854 	.word	0x1ffea854
 8021cd8:	1ffea820 	.word	0x1ffea820
 8021cdc:	1ffea850 	.word	0x1ffea850
 8021ce0:	1ffea825 	.word	0x1ffea825
 8021ce4:	1ffea86a 	.word	0x1ffea86a
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021ce8:	68fb      	ldr	r3, [r7, #12]
 8021cea:	799b      	ldrb	r3, [r3, #6]
 8021cec:	f003 0301 	and.w	r3, r3, #1
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d04a      	beq.n	8021d8a <CheckSmSettings+0x34e>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 8021cf4:	4b3a      	ldr	r3, [pc, #232]	; (8021de0 <CheckSmSettings+0x3a4>)
 8021cf6:	881b      	ldrh	r3, [r3, #0]
 8021cf8:	8aba      	ldrh	r2, [r7, #20]
 8021cfa:	429a      	cmp	r2, r3
 8021cfc:	d141      	bne.n	8021d82 <CheckSmSettings+0x346>
 8021cfe:	4b38      	ldr	r3, [pc, #224]	; (8021de0 <CheckSmSettings+0x3a4>)
 8021d00:	881b      	ldrh	r3, [r3, #0]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d03d      	beq.n	8021d82 <CheckSmSettings+0x346>
 8021d06:	8abb      	ldrh	r3, [r7, #20]
 8021d08:	2b44      	cmp	r3, #68	; 0x44
 8021d0a:	d83a      	bhi.n	8021d82 <CheckSmSettings+0x346>

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8021d0c:	68fb      	ldr	r3, [r7, #12]
 8021d0e:	791b      	ldrb	r3, [r3, #4]
 8021d10:	f003 030c 	and.w	r3, r3, #12
 8021d14:	2b04      	cmp	r3, #4
 8021d16:	d130      	bne.n	8021d7a <CheckSmSettings+0x33e>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8021d18:	4b32      	ldr	r3, [pc, #200]	; (8021de4 <CheckSmSettings+0x3a8>)
 8021d1a:	781b      	ldrb	r3, [r3, #0]
 8021d1c:	2b02      	cmp	r3, #2
 8021d1e:	d107      	bne.n	8021d30 <CheckSmSettings+0x2f4>
 8021d20:	8a7b      	ldrh	r3, [r7, #18]
 8021d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021d26:	d303      	bcc.n	8021d30 <CheckSmSettings+0x2f4>
 8021d28:	8a7b      	ldrh	r3, [r7, #18]
 8021d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021d2e:	d308      	bcc.n	8021d42 <CheckSmSettings+0x306>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8021d30:	4b2c      	ldr	r3, [pc, #176]	; (8021de4 <CheckSmSettings+0x3a8>)
 8021d32:	781b      	ldrb	r3, [r3, #0]
 8021d34:	2b02      	cmp	r3, #2
 8021d36:	d01c      	beq.n	8021d72 <CheckSmSettings+0x336>
 8021d38:	4b2b      	ldr	r3, [pc, #172]	; (8021de8 <CheckSmSettings+0x3ac>)
 8021d3a:	881b      	ldrh	r3, [r3, #0]
 8021d3c:	8a7a      	ldrh	r2, [r7, #18]
 8021d3e:	429a      	cmp	r2, r3
 8021d40:	d117      	bne.n	8021d72 <CheckSmSettings+0x336>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	791b      	ldrb	r3, [r3, #4]
 8021d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d003      	beq.n	8021d56 <CheckSmSettings+0x31a>
                            {
                                bWdTrigger = TRUE;
 8021d4e:	4b27      	ldr	r3, [pc, #156]	; (8021dec <CheckSmSettings+0x3b0>)
 8021d50:	2201      	movs	r2, #1
 8021d52:	701a      	strb	r2, [r3, #0]
 8021d54:	e002      	b.n	8021d5c <CheckSmSettings+0x320>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 8021d56:	4b25      	ldr	r3, [pc, #148]	; (8021dec <CheckSmSettings+0x3b0>)
 8021d58:	2200      	movs	r2, #0
 8021d5a:	701a      	strb	r2, [r3, #0]
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021d5c:	68fb      	ldr	r3, [r7, #12]
 8021d5e:	791b      	ldrb	r3, [r3, #4]
 8021d60:	f003 0302 	and.w	r3, r3, #2
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d003      	beq.n	8021d70 <CheckSmSettings+0x334>
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 8021d68:	4b21      	ldr	r3, [pc, #132]	; (8021df0 <CheckSmSettings+0x3b4>)
 8021d6a:	2200      	movs	r2, #0
 8021d6c:	701a      	strb	r2, [r3, #0]
                            else
                            {
                                bWdTrigger = FALSE;
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021d6e:	e003      	b.n	8021d78 <CheckSmSettings+0x33c>
 8021d70:	e002      	b.n	8021d78 <CheckSmSettings+0x33c>
                                b3BufferMode = FALSE;
                        }
                    }
                    else
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS+1;
 8021d72:	2302      	movs	r3, #2
 8021d74:	75bb      	strb	r3, [r7, #22]
 8021d76:	e003      	b.n	8021d80 <CheckSmSettings+0x344>
 8021d78:	e002      	b.n	8021d80 <CheckSmSettings+0x344>
                }
                else
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
 8021d7a:	2304      	movs	r3, #4
 8021d7c:	75bb      	strb	r3, [r7, #22]
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8021d7e:	e003      	b.n	8021d88 <CheckSmSettings+0x34c>
 8021d80:	e002      	b.n	8021d88 <CheckSmSettings+0x34c>
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
            }
            else
                /* output sizes don't match */
                result = SYNCMANCHSIZE+1;
 8021d82:	2303      	movs	r3, #3
 8021d84:	75bb      	strb	r3, [r7, #22]
 8021d86:	e009      	b.n	8021d9c <CheckSmSettings+0x360>
 8021d88:	e008      	b.n	8021d9c <CheckSmSettings+0x360>
        }
        else if ( SMLength != 0 || nPdOutputSize != 0 )
 8021d8a:	8abb      	ldrh	r3, [r7, #20]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d103      	bne.n	8021d98 <CheckSmSettings+0x35c>
 8021d90:	4b13      	ldr	r3, [pc, #76]	; (8021de0 <CheckSmSettings+0x3a4>)
 8021d92:	881b      	ldrh	r3, [r3, #0]
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	d001      	beq.n	8021d9c <CheckSmSettings+0x360>
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 8021d98:	2303      	movs	r3, #3
 8021d9a:	75bb      	strb	r3, [r7, #22]

        if ( result != 0 )
 8021d9c:	7dbb      	ldrb	r3, [r7, #22]
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d001      	beq.n	8021da6 <CheckSmSettings+0x36a>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 8021da2:	231d      	movs	r3, #29
 8021da4:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8021da6:	7dbb      	ldrb	r3, [r7, #22]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d113      	bne.n	8021dd4 <CheckSmSettings+0x398>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8021dac:	79fb      	ldrb	r3, [r7, #7]
 8021dae:	75fb      	strb	r3, [r7, #23]
 8021db0:	e00b      	b.n	8021dca <CheckSmSettings+0x38e>
        {
/*ECATCHANGE_START(V5.11) HW1*/
            pSyncMan = GetSyncMan(i);
 8021db2:	7dfb      	ldrb	r3, [r7, #23]
 8021db4:	4618      	mov	r0, r3
 8021db6:	f7ff fdd5 	bl	8021964 <GetSyncMan>
 8021dba:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 8021dbc:	68fb      	ldr	r3, [r7, #12]
 8021dbe:	799a      	ldrb	r2, [r3, #6]
 8021dc0:	4b0c      	ldr	r3, [pc, #48]	; (8021df4 <CheckSmSettings+0x3b8>)
 8021dc2:	701a      	strb	r2, [r3, #0]


    if ( result == 0 )
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8021dc4:	7dfb      	ldrb	r3, [r7, #23]
 8021dc6:	3301      	adds	r3, #1
 8021dc8:	75fb      	strb	r3, [r7, #23]
 8021dca:	4b0b      	ldr	r3, [pc, #44]	; (8021df8 <CheckSmSettings+0x3bc>)
 8021dcc:	781b      	ldrb	r3, [r3, #0]
 8021dce:	7dfa      	ldrb	r2, [r7, #23]
 8021dd0:	429a      	cmp	r2, r3
 8021dd2:	d3ee      	bcc.n	8021db2 <CheckSmSettings+0x376>
            pSyncMan = GetSyncMan(i);
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
        }
    }
    return result;
 8021dd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8021dd6:	4618      	mov	r0, r3
 8021dd8:	3718      	adds	r7, #24
 8021dda:	46bd      	mov	sp, r7
 8021ddc:	bd80      	pop	{r7, pc}
 8021dde:	bf00      	nop
 8021de0:	1ffea826 	.word	0x1ffea826
 8021de4:	1ffea825 	.word	0x1ffea825
 8021de8:	1ffea832 	.word	0x1ffea832
 8021dec:	1ffea864 	.word	0x1ffea864
 8021df0:	1ffea820 	.word	0x1ffea820
 8021df4:	1ffe9521 	.word	0x1ffe9521
 8021df8:	1ffea868 	.word	0x1ffea868

08021dfc <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 8021dfc:	b580      	push	{r7, lr}
 8021dfe:	b08c      	sub	sp, #48	; 0x30
 8021e00:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT8        dcControl;
    UINT16     wdiv = 0;
 8021e02:	2300      	movs	r3, #0
 8021e04:	84bb      	strh	r3, [r7, #36]	; 0x24
/*ECATCHANGE_START(V5.11) ECAT4*/
    UINT16     wd = 0;
 8021e06:	2300      	movs	r3, #0
 8021e08:	847b      	strh	r3, [r7, #34]	; 0x22
/*ECATCHANGE_END(V5.11) ECAT4*/
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 8021e0a:	2300      	movs	r3, #0
 8021e0c:	61fb      	str	r3, [r7, #28]
    UINT32     cycleTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 8021e0e:	2300      	movs	r3, #0
 8021e10:	61bb      	str	r3, [r7, #24]
    BOOL bSubordinatedCycles = FALSE;
 8021e12:	2300      	movs	r3, #0
 8021e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    UINT16    nPdInputBuffer = 3;
 8021e18:	2303      	movs	r3, #3
 8021e1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16    nPdOutputBuffer = 3;
 8021e1c:	2303      	movs	r3, #3
 8021e1e:	857b      	strh	r3, [r7, #42]	; 0x2a

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8021e20:	2300      	movs	r3, #0
 8021e22:	853b      	strh	r3, [r7, #40]	; 0x28
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8021e24:	2300      	movs	r3, #0
 8021e26:	84fb      	strh	r3, [r7, #38]	; 0x26

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8021e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021e2c:	82fb      	strh	r3, [r7, #22]

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8021e2e:	4ba2      	ldr	r3, [pc, #648]	; (80220b8 <StartInputHandler+0x2bc>)
 8021e30:	899a      	ldrh	r2, [r3, #12]
 8021e32:	8afb      	ldrh	r3, [r7, #22]
 8021e34:	4013      	ands	r3, r2
 8021e36:	82fb      	strh	r3, [r7, #22]
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8021e38:	4ba0      	ldr	r3, [pc, #640]	; (80220bc <StartInputHandler+0x2c0>)
 8021e3a:	899a      	ldrh	r2, [r3, #12]
 8021e3c:	8afb      	ldrh	r3, [r7, #22]
 8021e3e:	4013      	ands	r3, r2
 8021e40:	82fb      	strh	r3, [r7, #22]

    u16ALEventMask = 0;
 8021e42:	4b9f      	ldr	r3, [pc, #636]	; (80220c0 <StartInputHandler+0x2c4>)
 8021e44:	2200      	movs	r2, #0
 8021e46:	801a      	strh	r2, [r3, #0]

    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8021e48:	4b9e      	ldr	r3, [pc, #632]	; (80220c4 <StartInputHandler+0x2c8>)
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8021e4e:	2002      	movs	r0, #2
 8021e50:	f7ff fd88 	bl	8021964 <GetSyncMan>
 8021e54:	6138      	str	r0, [r7, #16]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 8021e56:	693b      	ldr	r3, [r7, #16]
 8021e58:	881b      	ldrh	r3, [r3, #0]
 8021e5a:	b29a      	uxth	r2, r3
 8021e5c:	4b9a      	ldr	r3, [pc, #616]	; (80220c8 <StartInputHandler+0x2cc>)
 8021e5e:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021e60:	693b      	ldr	r3, [r7, #16]
 8021e62:	791b      	ldrb	r3, [r3, #4]
 8021e64:	f003 0302 	and.w	r3, r3, #2
 8021e68:	2b00      	cmp	r3, #0
 8021e6a:	d001      	beq.n	8021e70 <StartInputHandler+0x74>
    {
       nPdOutputBuffer = 1;
 8021e6c:	2301      	movs	r3, #1
 8021e6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8021e70:	2003      	movs	r0, #3
 8021e72:	f7ff fd77 	bl	8021964 <GetSyncMan>
 8021e76:	6138      	str	r0, [r7, #16]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 8021e78:	693b      	ldr	r3, [r7, #16]
 8021e7a:	881b      	ldrh	r3, [r3, #0]
 8021e7c:	b29a      	uxth	r2, r3
 8021e7e:	4b93      	ldr	r3, [pc, #588]	; (80220cc <StartInputHandler+0x2d0>)
 8021e80:	801a      	strh	r2, [r3, #0]
    
    /* get the number of input buffer used for calculating the address areas */
    if ( pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021e82:	693b      	ldr	r3, [r7, #16]
 8021e84:	791b      	ldrb	r3, [r3, #4]
 8021e86:	f003 0302 	and.w	r3, r3, #2
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	d001      	beq.n	8021e92 <StartInputHandler+0x96>
        nPdInputBuffer = 1;
 8021e8e:	2301      	movs	r3, #1
 8021e90:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021e92:	4b8e      	ldr	r3, [pc, #568]	; (80220cc <StartInputHandler+0x2d0>)
 8021e94:	881b      	ldrh	r3, [r3, #0]
 8021e96:	461a      	mov	r2, r3
 8021e98:	4b8d      	ldr	r3, [pc, #564]	; (80220d0 <StartInputHandler+0x2d4>)
 8021e9a:	881b      	ldrh	r3, [r3, #0]
 8021e9c:	4619      	mov	r1, r3
 8021e9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021ea0:	fb03 f301 	mul.w	r3, r3, r1
 8021ea4:	4413      	add	r3, r2
 8021ea6:	4a8b      	ldr	r2, [pc, #556]	; (80220d4 <StartInputHandler+0x2d8>)
 8021ea8:	8812      	ldrh	r2, [r2, #0]
 8021eaa:	4293      	cmp	r3, r2
 8021eac:	dd0a      	ble.n	8021ec4 <StartInputHandler+0xc8>
 8021eae:	4b87      	ldr	r3, [pc, #540]	; (80220cc <StartInputHandler+0x2d0>)
 8021eb0:	881b      	ldrh	r3, [r3, #0]
 8021eb2:	461a      	mov	r2, r3
 8021eb4:	4b87      	ldr	r3, [pc, #540]	; (80220d4 <StartInputHandler+0x2d8>)
 8021eb6:	881b      	ldrh	r3, [r3, #0]
 8021eb8:	4619      	mov	r1, r3
 8021eba:	4b87      	ldr	r3, [pc, #540]	; (80220d8 <StartInputHandler+0x2dc>)
 8021ebc:	881b      	ldrh	r3, [r3, #0]
 8021ebe:	440b      	add	r3, r1
 8021ec0:	429a      	cmp	r2, r3
 8021ec2:	db18      	blt.n	8021ef6 <StartInputHandler+0xfa>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8021ec4:	4b81      	ldr	r3, [pc, #516]	; (80220cc <StartInputHandler+0x2d0>)
 8021ec6:	881b      	ldrh	r3, [r3, #0]
 8021ec8:	461a      	mov	r2, r3
 8021eca:	4b81      	ldr	r3, [pc, #516]	; (80220d0 <StartInputHandler+0x2d4>)
 8021ecc:	881b      	ldrh	r3, [r3, #0]
 8021ece:	4619      	mov	r1, r3
 8021ed0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021ed2:	fb03 f301 	mul.w	r3, r3, r1
 8021ed6:	4413      	add	r3, r2
 8021ed8:	4a80      	ldr	r2, [pc, #512]	; (80220dc <StartInputHandler+0x2e0>)
 8021eda:	8812      	ldrh	r2, [r2, #0]
 8021edc:	4293      	cmp	r3, r2
 8021ede:	dd0c      	ble.n	8021efa <StartInputHandler+0xfe>
 8021ee0:	4b7a      	ldr	r3, [pc, #488]	; (80220cc <StartInputHandler+0x2d0>)
 8021ee2:	881b      	ldrh	r3, [r3, #0]
 8021ee4:	461a      	mov	r2, r3
 8021ee6:	4b7d      	ldr	r3, [pc, #500]	; (80220dc <StartInputHandler+0x2e0>)
 8021ee8:	881b      	ldrh	r3, [r3, #0]
 8021eea:	4619      	mov	r1, r3
 8021eec:	4b7c      	ldr	r3, [pc, #496]	; (80220e0 <StartInputHandler+0x2e4>)
 8021eee:	881b      	ldrh	r3, [r3, #0]
 8021ef0:	440b      	add	r3, r1
 8021ef2:	429a      	cmp	r2, r3
 8021ef4:	da01      	bge.n	8021efa <StartInputHandler+0xfe>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8021ef6:	231e      	movs	r3, #30
 8021ef8:	e30c      	b.n	8022514 <StartInputHandler+0x718>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021efa:	4b73      	ldr	r3, [pc, #460]	; (80220c8 <StartInputHandler+0x2cc>)
 8021efc:	881b      	ldrh	r3, [r3, #0]
 8021efe:	461a      	mov	r2, r3
 8021f00:	4b78      	ldr	r3, [pc, #480]	; (80220e4 <StartInputHandler+0x2e8>)
 8021f02:	881b      	ldrh	r3, [r3, #0]
 8021f04:	4619      	mov	r1, r3
 8021f06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021f08:	fb03 f301 	mul.w	r3, r3, r1
 8021f0c:	4413      	add	r3, r2
 8021f0e:	4a71      	ldr	r2, [pc, #452]	; (80220d4 <StartInputHandler+0x2d8>)
 8021f10:	8812      	ldrh	r2, [r2, #0]
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
    }

    if (
 8021f12:	4293      	cmp	r3, r2
 8021f14:	dd0a      	ble.n	8021f2c <StartInputHandler+0x130>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021f16:	4b6c      	ldr	r3, [pc, #432]	; (80220c8 <StartInputHandler+0x2cc>)
 8021f18:	881b      	ldrh	r3, [r3, #0]
 8021f1a:	461a      	mov	r2, r3
 8021f1c:	4b6d      	ldr	r3, [pc, #436]	; (80220d4 <StartInputHandler+0x2d8>)
 8021f1e:	881b      	ldrh	r3, [r3, #0]
 8021f20:	4619      	mov	r1, r3
 8021f22:	4b6d      	ldr	r3, [pc, #436]	; (80220d8 <StartInputHandler+0x2dc>)
 8021f24:	881b      	ldrh	r3, [r3, #0]
 8021f26:	440b      	add	r3, r1
 8021f28:	429a      	cmp	r2, r3
 8021f2a:	db31      	blt.n	8021f90 <StartInputHandler+0x194>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8021f2c:	4b66      	ldr	r3, [pc, #408]	; (80220c8 <StartInputHandler+0x2cc>)
 8021f2e:	881b      	ldrh	r3, [r3, #0]
 8021f30:	461a      	mov	r2, r3
 8021f32:	4b6c      	ldr	r3, [pc, #432]	; (80220e4 <StartInputHandler+0x2e8>)
 8021f34:	881b      	ldrh	r3, [r3, #0]
 8021f36:	4619      	mov	r1, r3
 8021f38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021f3a:	fb03 f301 	mul.w	r3, r3, r1
 8021f3e:	4413      	add	r3, r2
 8021f40:	4a66      	ldr	r2, [pc, #408]	; (80220dc <StartInputHandler+0x2e0>)
 8021f42:	8812      	ldrh	r2, [r2, #0]
 8021f44:	4293      	cmp	r3, r2
 8021f46:	dd0a      	ble.n	8021f5e <StartInputHandler+0x162>
 8021f48:	4b5f      	ldr	r3, [pc, #380]	; (80220c8 <StartInputHandler+0x2cc>)
 8021f4a:	881b      	ldrh	r3, [r3, #0]
 8021f4c:	461a      	mov	r2, r3
 8021f4e:	4b63      	ldr	r3, [pc, #396]	; (80220dc <StartInputHandler+0x2e0>)
 8021f50:	881b      	ldrh	r3, [r3, #0]
 8021f52:	4619      	mov	r1, r3
 8021f54:	4b62      	ldr	r3, [pc, #392]	; (80220e0 <StartInputHandler+0x2e4>)
 8021f56:	881b      	ldrh	r3, [r3, #0]
 8021f58:	440b      	add	r3, r1
 8021f5a:	429a      	cmp	r2, r3
 8021f5c:	db18      	blt.n	8021f90 <StartInputHandler+0x194>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8021f5e:	4b5a      	ldr	r3, [pc, #360]	; (80220c8 <StartInputHandler+0x2cc>)
 8021f60:	881b      	ldrh	r3, [r3, #0]
 8021f62:	461a      	mov	r2, r3
 8021f64:	4b5f      	ldr	r3, [pc, #380]	; (80220e4 <StartInputHandler+0x2e8>)
 8021f66:	881b      	ldrh	r3, [r3, #0]
 8021f68:	4619      	mov	r1, r3
 8021f6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021f6c:	fb03 f301 	mul.w	r3, r3, r1
 8021f70:	4413      	add	r3, r2
 8021f72:	4a56      	ldr	r2, [pc, #344]	; (80220cc <StartInputHandler+0x2d0>)
 8021f74:	8812      	ldrh	r2, [r2, #0]
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
        ||
 8021f76:	4293      	cmp	r3, r2
 8021f78:	dd0c      	ble.n	8021f94 <StartInputHandler+0x198>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8021f7a:	4b53      	ldr	r3, [pc, #332]	; (80220c8 <StartInputHandler+0x2cc>)
 8021f7c:	881b      	ldrh	r3, [r3, #0]
 8021f7e:	461a      	mov	r2, r3
 8021f80:	4b52      	ldr	r3, [pc, #328]	; (80220cc <StartInputHandler+0x2d0>)
 8021f82:	881b      	ldrh	r3, [r3, #0]
 8021f84:	4619      	mov	r1, r3
 8021f86:	4b52      	ldr	r3, [pc, #328]	; (80220d0 <StartInputHandler+0x2d4>)
 8021f88:	881b      	ldrh	r3, [r3, #0]
 8021f8a:	440b      	add	r3, r1
 8021f8c:	429a      	cmp	r2, r3
 8021f8e:	da01      	bge.n	8021f94 <StartInputHandler+0x198>
        )
    {
        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 8021f90:	231d      	movs	r3, #29
 8021f92:	e2bf      	b.n	8022514 <StartInputHandler+0x718>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read register 0x981 (corresponding masks are adapted)*/
    HW_EscReadByte(dcControl, ESC_DC_SYNC_ACTIVATION_OFFSET);
 8021f94:	4b54      	ldr	r3, [pc, #336]	; (80220e8 <StartInputHandler+0x2ec>)
 8021f96:	781b      	ldrb	r3, [r3, #0]
 8021f98:	73fb      	strb	r3, [r7, #15]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8021f9a:	4b54      	ldr	r3, [pc, #336]	; (80220ec <StartInputHandler+0x2f0>)
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	61fb      	str	r3, [r7, #28]
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);

    // Cycle time for Sync1
        HW_EscReadDWord(cycleTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 8021fa0:	4b53      	ldr	r3, [pc, #332]	; (80220f0 <StartInputHandler+0x2f4>)
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	61bb      	str	r3, [r7, #24]
        cycleTimeSync1 = SWAPDWORD(cycleTimeSync1);


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 8021fa6:	4b44      	ldr	r3, [pc, #272]	; (80220b8 <StartInputHandler+0x2bc>)
 8021fa8:	885b      	ldrh	r3, [r3, #2]
 8021faa:	853b      	strh	r3, [r7, #40]	; 0x28
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8021fac:	4b43      	ldr	r3, [pc, #268]	; (80220bc <StartInputHandler+0x2c0>)
 8021fae:	885b      	ldrh	r3, [r3, #2]
 8021fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 8021fb2:	7bfb      	ldrb	r3, [r7, #15]
 8021fb4:	f003 0309 	and.w	r3, r3, #9
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	d057      	beq.n	802206c <StartInputHandler+0x270>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8021fbc:	7bfb      	ldrb	r3, [r7, #15]
 8021fbe:	f003 0306 	and.w	r3, r3, #6
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d101      	bne.n	8021fca <StartInputHandler+0x1ce>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021fc6:	2330      	movs	r3, #48	; 0x30
 8021fc8:	e2a4      	b.n	8022514 <StartInputHandler+0x718>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8021fca:	7bfb      	ldrb	r3, [r7, #15]
 8021fcc:	f003 0302 	and.w	r3, r3, #2
 8021fd0:	2b00      	cmp	r3, #0
 8021fd2:	d106      	bne.n	8021fe2 <StartInputHandler+0x1e6>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8021fd4:	7bfb      	ldrb	r3, [r7, #15]
 8021fd6:	f003 0304 	and.w	r3, r3, #4
 8021fda:	2b00      	cmp	r3, #0
 8021fdc:	d001      	beq.n	8021fe2 <StartInputHandler+0x1e6>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021fde:	2330      	movs	r3, #48	; 0x30
 8021fe0:	e298      	b.n	8022514 <StartInputHandler+0x718>
        }

        if(u16MinSuppSyncType != 0)
 8021fe2:	8afb      	ldrh	r3, [r7, #22]
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d015      	beq.n	8022014 <StartInputHandler+0x218>
        {
/*ECATCHANGE_START(V5.11) ESM2*/
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8021fe8:	8afb      	ldrh	r3, [r7, #22]
 8021fea:	f003 0304 	and.w	r3, r3, #4
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d104      	bne.n	8021ffc <StartInputHandler+0x200>
 8021ff2:	7bfb      	ldrb	r3, [r7, #15]
 8021ff4:	f003 0302 	and.w	r3, r3, #2
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d109      	bne.n	8022010 <StartInputHandler+0x214>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8021ffc:	8afb      	ldrh	r3, [r7, #22]
 8021ffe:	f003 0308 	and.w	r3, r3, #8
 8022002:	2b00      	cmp	r3, #0
 8022004:	d106      	bne.n	8022014 <StartInputHandler+0x218>
 8022006:	7bfb      	ldrb	r3, [r7, #15]
 8022008:	f003 0304 	and.w	r3, r3, #4
 802200c:	2b00      	cmp	r3, #0
 802200e:	d001      	beq.n	8022014 <StartInputHandler+0x218>
/*ECATCHANGE_END(V5.11) ESM2*/
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8022010:	2330      	movs	r3, #48	; 0x30
 8022012:	e27f      	b.n	8022514 <StartInputHandler+0x718>
    }
        }

        /*Check if Sync0 cycle time is supported*/
        if ( cycleTimeSync0 != 0 && (cycleTimeSync0 < MIN_PD_CYCLE_TIME || cycleTimeSync0 > MAX_PD_CYCLE_TIME) )
 8022014:	69fb      	ldr	r3, [r7, #28]
 8022016:	2b00      	cmp	r3, #0
 8022018:	d009      	beq.n	802202e <StartInputHandler+0x232>
 802201a:	69fb      	ldr	r3, [r7, #28]
 802201c:	4a35      	ldr	r2, [pc, #212]	; (80220f4 <StartInputHandler+0x2f8>)
 802201e:	4293      	cmp	r3, r2
 8022020:	d903      	bls.n	802202a <StartInputHandler+0x22e>
 8022022:	69fb      	ldr	r3, [r7, #28]
 8022024:	4a34      	ldr	r2, [pc, #208]	; (80220f8 <StartInputHandler+0x2fc>)
 8022026:	4293      	cmp	r3, r2
 8022028:	d901      	bls.n	802202e <StartInputHandler+0x232>
            return ALSTATUSCODE_DCSYNC0CYCLETIME;
 802202a:	2336      	movs	r3, #54	; 0x36
 802202c:	e272      	b.n	8022514 <StartInputHandler+0x718>


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 802202e:	7bfb      	ldrb	r3, [r7, #15]
 8022030:	f003 0302 	and.w	r3, r3, #2
 8022034:	2b00      	cmp	r3, #0
 8022036:	d00e      	beq.n	8022056 <StartInputHandler+0x25a>
 8022038:	7bfb      	ldrb	r3, [r7, #15]
 802203a:	f003 0304 	and.w	r3, r3, #4
 802203e:	2b00      	cmp	r3, #0
 8022040:	d009      	beq.n	8022056 <StartInputHandler+0x25a>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
/*ECATCHANGE_START(V5.11) ESM1*/
            if((cycleTimeSync1 > 0) && (cycleTimeSync1 >= cycleTimeSync0))
 8022042:	69bb      	ldr	r3, [r7, #24]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d006      	beq.n	8022056 <StartInputHandler+0x25a>
 8022048:	69ba      	ldr	r2, [r7, #24]
 802204a:	69fb      	ldr	r3, [r7, #28]
 802204c:	429a      	cmp	r2, r3
 802204e:	d302      	bcc.n	8022056 <StartInputHandler+0x25a>
/*ECATCHANGE_END(V5.11) ESM1*/
            {
                bSubordinatedCycles = TRUE;
 8022050:	2301      	movs	r3, #1
 8022052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 8022056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802205a:	2b00      	cmp	r3, #0
 802205c:	d006      	beq.n	802206c <StartInputHandler+0x270>
 802205e:	8afb      	ldrh	r3, [r7, #22]
 8022060:	f003 0310 	and.w	r3, r3, #16
 8022064:	2b00      	cmp	r3, #0
 8022066:	d101      	bne.n	802206c <StartInputHandler+0x270>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8022068:	2330      	movs	r3, #48	; 0x30
 802206a:	e253      	b.n	8022514 <StartInputHandler+0x718>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 802206c:	4b23      	ldr	r3, [pc, #140]	; (80220fc <StartInputHandler+0x300>)
 802206e:	781b      	ldrb	r3, [r3, #0]
 8022070:	2b00      	cmp	r3, #0
 8022072:	d052      	beq.n	802211a <StartInputHandler+0x31e>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8022074:	7bfb      	ldrb	r3, [r7, #15]
 8022076:	f003 0309 	and.w	r3, r3, #9
 802207a:	2b00      	cmp	r3, #0
 802207c:	d10e      	bne.n	802209c <StartInputHandler+0x2a0>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 802207e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022080:	2b02      	cmp	r3, #2
 8022082:	d009      	beq.n	8022098 <StartInputHandler+0x29c>
 8022084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022086:	2b03      	cmp	r3, #3
 8022088:	d006      	beq.n	8022098 <StartInputHandler+0x29c>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 802208a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802208c:	2b02      	cmp	r3, #2
 802208e:	d003      	beq.n	8022098 <StartInputHandler+0x29c>
 8022090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022092:	2b03      	cmp	r3, #3
 8022094:	f040 8088 	bne.w	80221a8 <StartInputHandler+0x3ac>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8022098:	2330      	movs	r3, #48	; 0x30
 802209a:	e23b      	b.n	8022514 <StartInputHandler+0x718>
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 802209c:	7bfb      	ldrb	r3, [r7, #15]
 802209e:	f003 0304 	and.w	r3, r3, #4
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d12c      	bne.n	8022100 <StartInputHandler+0x304>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 80220a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80220a8:	2b03      	cmp	r3, #3
 80220aa:	d002      	beq.n	80220b2 <StartInputHandler+0x2b6>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 80220ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80220ae:	2b03      	cmp	r3, #3
 80220b0:	d126      	bne.n	8022100 <StartInputHandler+0x304>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80220b2:	2330      	movs	r3, #48	; 0x30
 80220b4:	e22e      	b.n	8022514 <StartInputHandler+0x718>
 80220b6:	bf00      	nop
 80220b8:	1ffeacdc 	.word	0x1ffeacdc
 80220bc:	1ffeac98 	.word	0x1ffeac98
 80220c0:	1ffea83e 	.word	0x1ffea83e
 80220c4:	1ffea856 	.word	0x1ffea856
 80220c8:	1ffea832 	.word	0x1ffea832
 80220cc:	1ffea86a 	.word	0x1ffea86a
 80220d0:	1ffea850 	.word	0x1ffea850
 80220d4:	1ffeac86 	.word	0x1ffeac86
 80220d8:	1ffeac7c 	.word	0x1ffeac7c
 80220dc:	1ffeac74 	.word	0x1ffeac74
 80220e0:	1ffeac8e 	.word	0x1ffeac8e
 80220e4:	1ffea826 	.word	0x1ffea826
 80220e8:	54010981 	.word	0x54010981
 80220ec:	540109a0 	.word	0x540109a0
 80220f0:	540109a4 	.word	0x540109a4
 80220f4:	0001e847 	.word	0x0001e847
 80220f8:	c3500000 	.word	0xc3500000
 80220fc:	1ffead20 	.word	0x1ffead20
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8022100:	7bfb      	ldrb	r3, [r7, #15]
 8022102:	f003 0302 	and.w	r3, r3, #2
 8022106:	2b00      	cmp	r3, #0
 8022108:	d14e      	bne.n	80221a8 <StartInputHandler+0x3ac>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 802210a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802210c:	2b02      	cmp	r3, #2
 802210e:	d002      	beq.n	8022116 <StartInputHandler+0x31a>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8022110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022112:	2b02      	cmp	r3, #2
 8022114:	d148      	bne.n	80221a8 <StartInputHandler+0x3ac>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8022116:	2330      	movs	r3, #48	; 0x30
 8022118:	e1fc      	b.n	8022514 <StartInputHandler+0x718>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 802211a:	7bfb      	ldrb	r3, [r7, #15]
 802211c:	f003 0309 	and.w	r3, r3, #9
 8022120:	2b00      	cmp	r3, #0
 8022122:	d120      	bne.n	8022166 <StartInputHandler+0x36a>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8022124:	4b92      	ldr	r3, [pc, #584]	; (8022370 <StartInputHandler+0x574>)
 8022126:	881b      	ldrh	r3, [r3, #0]
 8022128:	2b00      	cmp	r3, #0
 802212a:	d00b      	beq.n	8022144 <StartInputHandler+0x348>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 802212c:	2301      	movs	r3, #1
 802212e:	853b      	strh	r3, [r7, #40]	; 0x28
                
                if (nPdInputSize > 0)
 8022130:	4b90      	ldr	r3, [pc, #576]	; (8022374 <StartInputHandler+0x578>)
 8022132:	881b      	ldrh	r3, [r3, #0]
 8022134:	2b00      	cmp	r3, #0
 8022136:	d002      	beq.n	802213e <StartInputHandler+0x342>
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8022138:	2322      	movs	r3, #34	; 0x22
 802213a:	84fb      	strh	r3, [r7, #38]	; 0x26
 802213c:	e00f      	b.n	802215e <StartInputHandler+0x362>
                else
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 802213e:	2300      	movs	r3, #0
 8022140:	84fb      	strh	r3, [r7, #38]	; 0x26
 8022142:	e00c      	b.n	802215e <StartInputHandler+0x362>
            }
            else if (nPdInputSize > 0)
 8022144:	4b8b      	ldr	r3, [pc, #556]	; (8022374 <StartInputHandler+0x578>)
 8022146:	881b      	ldrh	r3, [r3, #0]
 8022148:	2b00      	cmp	r3, #0
 802214a:	d004      	beq.n	8022156 <StartInputHandler+0x35a>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 802214c:	2300      	movs	r3, #0
 802214e:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8022150:	2301      	movs	r3, #1
 8022152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8022154:	e003      	b.n	802215e <StartInputHandler+0x362>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8022156:	2300      	movs	r3, #0
 8022158:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 802215a:	2300      	movs	r3, #0
 802215c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            sSyncManOutPar.u16GetCycleTime = 1;
 802215e:	4b86      	ldr	r3, [pc, #536]	; (8022378 <StartInputHandler+0x57c>)
 8022160:	2201      	movs	r2, #1
 8022162:	839a      	strh	r2, [r3, #28]
 8022164:	e020      	b.n	80221a8 <StartInputHandler+0x3ac>

        }
        else
        {
            if (nPdOutputSize > 0)
 8022166:	4b82      	ldr	r3, [pc, #520]	; (8022370 <StartInputHandler+0x574>)
 8022168:	881b      	ldrh	r3, [r3, #0]
 802216a:	2b00      	cmp	r3, #0
 802216c:	d009      	beq.n	8022182 <StartInputHandler+0x386>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 802216e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022172:	2b00      	cmp	r3, #0
 8022174:	d002      	beq.n	802217c <StartInputHandler+0x380>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8022176:	2303      	movs	r3, #3
 8022178:	853b      	strh	r3, [r7, #40]	; 0x28
 802217a:	e004      	b.n	8022186 <StartInputHandler+0x38a>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 802217c:	2302      	movs	r3, #2
 802217e:	853b      	strh	r3, [r7, #40]	; 0x28
 8022180:	e001      	b.n	8022186 <StartInputHandler+0x38a>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8022182:	2300      	movs	r3, #0
 8022184:	853b      	strh	r3, [r7, #40]	; 0x28
            }


            if (nPdInputSize > 0)
 8022186:	4b7b      	ldr	r3, [pc, #492]	; (8022374 <StartInputHandler+0x578>)
 8022188:	881b      	ldrh	r3, [r3, #0]
 802218a:	2b00      	cmp	r3, #0
 802218c:	d00a      	beq.n	80221a4 <StartInputHandler+0x3a8>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 802218e:	7bfb      	ldrb	r3, [r7, #15]
 8022190:	f003 0304 	and.w	r3, r3, #4
 8022194:	2b00      	cmp	r3, #0
 8022196:	d002      	beq.n	802219e <StartInputHandler+0x3a2>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8022198:	2303      	movs	r3, #3
 802219a:	84fb      	strh	r3, [r7, #38]	; 0x26
 802219c:	e004      	b.n	80221a8 <StartInputHandler+0x3ac>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 802219e:	2302      	movs	r3, #2
 80221a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80221a2:	e001      	b.n	80221a8 <StartInputHandler+0x3ac>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80221a4:	2300      	movs	r3, #0
 80221a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80221a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80221aa:	2b03      	cmp	r3, #3
 80221ac:	d106      	bne.n	80221bc <StartInputHandler+0x3c0>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80221ae:	4a72      	ldr	r2, [pc, #456]	; (8022378 <StartInputHandler+0x57c>)
 80221b0:	69fb      	ldr	r3, [r7, #28]
 80221b2:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80221b4:	4a71      	ldr	r2, [pc, #452]	; (802237c <StartInputHandler+0x580>)
 80221b6:	69fb      	ldr	r3, [r7, #28]
 80221b8:	6253      	str	r3, [r2, #36]	; 0x24
 80221ba:	e00a      	b.n	80221d2 <StartInputHandler+0x3d6>
/*ECATCHANGE_END(V5.11) ECAT4*/
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 80221bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80221be:	2b02      	cmp	r3, #2
 80221c0:	d107      	bne.n	80221d2 <StartInputHandler+0x3d6>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80221c2:	4a6d      	ldr	r2, [pc, #436]	; (8022378 <StartInputHandler+0x57c>)
 80221c4:	69fb      	ldr	r3, [r7, #28]
 80221c6:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT16)cycleTimeSync0;
 80221c8:	69fb      	ldr	r3, [r7, #28]
 80221ca:	b29b      	uxth	r3, r3
 80221cc:	461a      	mov	r2, r3
 80221ce:	4b6b      	ldr	r3, [pc, #428]	; (802237c <StartInputHandler+0x580>)
 80221d0:	625a      	str	r2, [r3, #36]	; 0x24
/*ECATCHANGE_END(V5.11) ECAT4*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 80221d2:	4b6b      	ldr	r3, [pc, #428]	; (8022380 <StartInputHandler+0x584>)
 80221d4:	781b      	ldrb	r3, [r3, #0]
 80221d6:	f083 0301 	eor.w	r3, r3, #1
 80221da:	b2db      	uxtb	r3, r3
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d007      	beq.n	80221f0 <StartInputHandler+0x3f4>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 80221e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d002      	beq.n	80221ec <StartInputHandler+0x3f0>
 80221e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d101      	bne.n	80221f0 <StartInputHandler+0x3f4>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 80221ec:	2329      	movs	r3, #41	; 0x29
 80221ee:	e191      	b.n	8022514 <StartInputHandler+0x718>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 80221f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d102      	bne.n	80221fc <StartInputHandler+0x400>
 80221f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	d002      	beq.n	8022202 <StartInputHandler+0x406>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 80221fc:	4b61      	ldr	r3, [pc, #388]	; (8022384 <StartInputHandler+0x588>)
 80221fe:	2201      	movs	r2, #1
 8022200:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8022202:	4b60      	ldr	r3, [pc, #384]	; (8022384 <StartInputHandler+0x588>)
 8022204:	781b      	ldrb	r3, [r3, #0]
 8022206:	2b00      	cmp	r3, #0
 8022208:	d010      	beq.n	802222c <StartInputHandler+0x430>
        {
            if(nPdOutputSize > 0)
 802220a:	4b59      	ldr	r3, [pc, #356]	; (8022370 <StartInputHandler+0x574>)
 802220c:	881b      	ldrh	r3, [r3, #0]
 802220e:	2b00      	cmp	r3, #0
 8022210:	d004      	beq.n	802221c <StartInputHandler+0x420>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8022212:	4b5d      	ldr	r3, [pc, #372]	; (8022388 <StartInputHandler+0x58c>)
 8022214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022218:	801a      	strh	r2, [r3, #0]
 802221a:	e007      	b.n	802222c <StartInputHandler+0x430>
            }
            else if(nPdInputSize > 0)
 802221c:	4b55      	ldr	r3, [pc, #340]	; (8022374 <StartInputHandler+0x578>)
 802221e:	881b      	ldrh	r3, [r3, #0]
 8022220:	2b00      	cmp	r3, #0
 8022222:	d003      	beq.n	802222c <StartInputHandler+0x430>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8022224:	4b58      	ldr	r3, [pc, #352]	; (8022388 <StartInputHandler+0x58c>)
 8022226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802222a:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 802222c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802222e:	2b02      	cmp	r3, #2
 8022230:	d008      	beq.n	8022244 <StartInputHandler+0x448>
 8022232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022234:	2b03      	cmp	r3, #3
 8022236:	d005      	beq.n	8022244 <StartInputHandler+0x448>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8022238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802223a:	2b02      	cmp	r3, #2
 802223c:	d002      	beq.n	8022244 <StartInputHandler+0x448>
 802223e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022240:	2b03      	cmp	r3, #3
 8022242:	d109      	bne.n	8022258 <StartInputHandler+0x45c>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8022244:	4b51      	ldr	r3, [pc, #324]	; (802238c <StartInputHandler+0x590>)
 8022246:	2201      	movs	r2, #1
 8022248:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.11) ECAT4*/
            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 802224a:	4b49      	ldr	r3, [pc, #292]	; (8022370 <StartInputHandler+0x574>)
 802224c:	881b      	ldrh	r3, [r3, #0]
 802224e:	2b00      	cmp	r3, #0
 8022250:	d102      	bne.n	8022258 <StartInputHandler+0x45c>
            {
               u16ALEventMask = 0;
 8022252:	4b4d      	ldr	r3, [pc, #308]	; (8022388 <StartInputHandler+0x58c>)
 8022254:	2200      	movs	r2, #0
 8022256:	801a      	strh	r2, [r3, #0]
            }
/*ECATCHANGE_END(V5.11) ECAT4*/
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8022258:	4a47      	ldr	r2, [pc, #284]	; (8022378 <StartInputHandler+0x57c>)
 802225a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802225c:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 802225e:	4a47      	ldr	r2, [pc, #284]	; (802237c <StartInputHandler+0x580>)
 8022260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022262:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8022264:	4b4a      	ldr	r3, [pc, #296]	; (8022390 <StartInputHandler+0x594>)
 8022266:	2200      	movs	r2, #0
 8022268:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 802226a:	4b4a      	ldr	r3, [pc, #296]	; (8022394 <StartInputHandler+0x598>)
 802226c:	2200      	movs	r2, #0
 802226e:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8022270:	4b49      	ldr	r3, [pc, #292]	; (8022398 <StartInputHandler+0x59c>)
 8022272:	2200      	movs	r2, #0
 8022274:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8022276:	4b49      	ldr	r3, [pc, #292]	; (802239c <StartInputHandler+0x5a0>)
 8022278:	2200      	movs	r2, #0
 802227a:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 802227c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022280:	2b00      	cmp	r3, #0
 8022282:	d036      	beq.n	80222f2 <StartInputHandler+0x4f6>
    {
        /* get the number of Sync0 event within on SM cycle */
        if(cycleTimeSync1 >= cycleTimeSync0)
 8022284:	69ba      	ldr	r2, [r7, #24]
 8022286:	69fb      	ldr	r3, [r7, #28]
 8022288:	429a      	cmp	r2, r3
 802228a:	d317      	bcc.n	80222bc <StartInputHandler+0x4c0>
        {
            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 802228c:	69ba      	ldr	r2, [r7, #24]
 802228e:	69fb      	ldr	r3, [r7, #28]
 8022290:	fbb2 f3f3 	udiv	r3, r2, r3
 8022294:	b29a      	uxth	r2, r3
 8022296:	4b40      	ldr	r3, [pc, #256]	; (8022398 <StartInputHandler+0x59c>)
 8022298:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 802229a:	69bb      	ldr	r3, [r7, #24]
 802229c:	69fa      	ldr	r2, [r7, #28]
 802229e:	fbb3 f2f2 	udiv	r2, r3, r2
 80222a2:	69f9      	ldr	r1, [r7, #28]
 80222a4:	fb01 f202 	mul.w	r2, r1, r2
 80222a8:	1a9b      	subs	r3, r3, r2
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d109      	bne.n	80222c2 <StartInputHandler+0x4c6>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 80222ae:	4b3a      	ldr	r3, [pc, #232]	; (8022398 <StartInputHandler+0x59c>)
 80222b0:	881b      	ldrh	r3, [r3, #0]
 80222b2:	3301      	adds	r3, #1
 80222b4:	b29a      	uxth	r2, r3
 80222b6:	4b38      	ldr	r3, [pc, #224]	; (8022398 <StartInputHandler+0x59c>)
 80222b8:	801a      	strh	r2, [r3, #0]
 80222ba:	e002      	b.n	80222c2 <StartInputHandler+0x4c6>
        }
        }
        else
        {
            u16SmSync0Value = 1;
 80222bc:	4b36      	ldr	r3, [pc, #216]	; (8022398 <StartInputHandler+0x59c>)
 80222be:	2201      	movs	r2, #1
 80222c0:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 80222c2:	69ba      	ldr	r2, [r7, #24]
 80222c4:	69fb      	ldr	r3, [r7, #28]
 80222c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80222ca:	b29a      	uxth	r2, r3
 80222cc:	4b30      	ldr	r3, [pc, #192]	; (8022390 <StartInputHandler+0x594>)
 80222ce:	801a      	strh	r2, [r3, #0]

        if((cycleTimeSync1 % cycleTimeSync0) > 0)
 80222d0:	69bb      	ldr	r3, [r7, #24]
 80222d2:	69fa      	ldr	r2, [r7, #28]
 80222d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80222d8:	69f9      	ldr	r1, [r7, #28]
 80222da:	fb01 f202 	mul.w	r2, r1, r2
 80222de:	1a9b      	subs	r3, r3, r2
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d012      	beq.n	802230a <StartInputHandler+0x50e>
            LatchInputSync0Value++;
 80222e4:	4b2a      	ldr	r3, [pc, #168]	; (8022390 <StartInputHandler+0x594>)
 80222e6:	881b      	ldrh	r3, [r3, #0]
 80222e8:	3301      	adds	r3, #1
 80222ea:	b29a      	uxth	r2, r3
 80222ec:	4b28      	ldr	r3, [pc, #160]	; (8022390 <StartInputHandler+0x594>)
 80222ee:	801a      	strh	r2, [r3, #0]
 80222f0:	e00b      	b.n	802230a <StartInputHandler+0x50e>

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 80222f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80222f4:	2b02      	cmp	r3, #2
 80222f6:	d102      	bne.n	80222fe <StartInputHandler+0x502>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 80222f8:	4b27      	ldr	r3, [pc, #156]	; (8022398 <StartInputHandler+0x59c>)
 80222fa:	2201      	movs	r2, #1
 80222fc:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 80222fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022300:	2b03      	cmp	r3, #3
 8022302:	d002      	beq.n	802230a <StartInputHandler+0x50e>
        {
            LatchInputSync0Value = 1;
 8022304:	4b22      	ldr	r3, [pc, #136]	; (8022390 <StartInputHandler+0x594>)
 8022306:	2201      	movs	r2, #1
 8022308:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 802230a:	4b25      	ldr	r3, [pc, #148]	; (80223a0 <StartInputHandler+0x5a4>)
 802230c:	2200      	movs	r2, #0
 802230e:	801a      	strh	r2, [r3, #0]
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
/*ECATCHANGE_START(V5.11) ECAT4*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8022310:	4b24      	ldr	r3, [pc, #144]	; (80223a4 <StartInputHandler+0x5a8>)
 8022312:	881b      	ldrh	r3, [r3, #0]
 8022314:	847b      	strh	r3, [r7, #34]	; 0x22
    wd = SWAPWORD(wd);
/*ECATCHANGE_END(V5.11) ECAT4*/

    if (nPdOutputSize > 0 &&  wd != 0 )
 8022316:	4b16      	ldr	r3, [pc, #88]	; (8022370 <StartInputHandler+0x574>)
 8022318:	881b      	ldrh	r3, [r3, #0]
 802231a:	2b00      	cmp	r3, #0
 802231c:	d04a      	beq.n	80223b4 <StartInputHandler+0x5b8>
 802231e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022320:	2b00      	cmp	r3, #0
 8022322:	d047      	beq.n	80223b4 <StartInputHandler+0x5b8>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8022324:	4b20      	ldr	r3, [pc, #128]	; (80223a8 <StartInputHandler+0x5ac>)
 8022326:	881b      	ldrh	r3, [r3, #0]
 8022328:	84bb      	strh	r3, [r7, #36]	; 0x24
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 802232a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802232c:	2b00      	cmp	r3, #0
 802232e:	d018      	beq.n	8022362 <StartInputHandler+0x566>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8022330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022332:	3302      	adds	r3, #2
 8022334:	60bb      	str	r3, [r7, #8]

            d *= wd;
 8022336:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022338:	68bb      	ldr	r3, [r7, #8]
 802233a:	fb02 f303 	mul.w	r3, r2, r3
 802233e:	60bb      	str	r3, [r7, #8]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 8022340:	68bb      	ldr	r3, [r7, #8]
 8022342:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8022346:	3327      	adds	r3, #39	; 0x27
 8022348:	60bb      	str	r3, [r7, #8]
            d /= 25000;
 802234a:	68bb      	ldr	r3, [r7, #8]
 802234c:	08db      	lsrs	r3, r3, #3
 802234e:	4a17      	ldr	r2, [pc, #92]	; (80223ac <StartInputHandler+0x5b0>)
 8022350:	fba2 2303 	umull	r2, r3, r2, r3
 8022354:	0a1b      	lsrs	r3, r3, #8
 8022356:	60bb      	str	r3, [r7, #8]
            EcatWdValue = (UINT16) d;
 8022358:	68bb      	ldr	r3, [r7, #8]
 802235a:	b29a      	uxth	r2, r3
 802235c:	4b14      	ldr	r3, [pc, #80]	; (80223b0 <StartInputHandler+0x5b4>)
 802235e:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 8022360:	e02d      	b.n	80223be <StartInputHandler+0x5c2>
            d /= 25000;
            EcatWdValue = (UINT16) d;
        }
        else
        {
            wd = 0;
 8022362:	2300      	movs	r3, #0
 8022364:	847b      	strh	r3, [r7, #34]	; 0x22
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8022366:	4b12      	ldr	r3, [pc, #72]	; (80223b0 <StartInputHandler+0x5b4>)
 8022368:	2200      	movs	r2, #0
 802236a:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 802236c:	e027      	b.n	80223be <StartInputHandler+0x5c2>
 802236e:	bf00      	nop
 8022370:	1ffea826 	.word	0x1ffea826
 8022374:	1ffea850 	.word	0x1ffea850
 8022378:	1ffeacdc 	.word	0x1ffeacdc
 802237c:	1ffeac98 	.word	0x1ffeac98
 8022380:	1ffea820 	.word	0x1ffea820
 8022384:	1ffea863 	.word	0x1ffea863
 8022388:	1ffea83e 	.word	0x1ffea83e
 802238c:	1ffea85b 	.word	0x1ffea85b
 8022390:	1ffea84c 	.word	0x1ffea84c
 8022394:	1ffea82e 	.word	0x1ffea82e
 8022398:	1ffea852 	.word	0x1ffea852
 802239c:	1ffea866 	.word	0x1ffea866
 80223a0:	1ffead24 	.word	0x1ffead24
 80223a4:	54010420 	.word	0x54010420
 80223a8:	54010400 	.word	0x54010400
 80223ac:	14f8b589 	.word	0x14f8b589
 80223b0:	1ffea860 	.word	0x1ffea860
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 80223b4:	2300      	movs	r3, #0
 80223b6:	84bb      	strh	r3, [r7, #36]	; 0x24
        EcatWdValue = 0;
 80223b8:	4b58      	ldr	r3, [pc, #352]	; (802251c <StartInputHandler+0x720>)
 80223ba:	2200      	movs	r2, #0
 80223bc:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 80223be:	4b57      	ldr	r3, [pc, #348]	; (802251c <StartInputHandler+0x720>)
 80223c0:	881b      	ldrh	r3, [r3, #0]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d103      	bne.n	80223ce <StartInputHandler+0x5d2>
 80223c6:	4b56      	ldr	r3, [pc, #344]	; (8022520 <StartInputHandler+0x724>)
 80223c8:	781b      	ldrb	r3, [r3, #0]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d10a      	bne.n	80223e4 <StartInputHandler+0x5e8>
 80223ce:	4b53      	ldr	r3, [pc, #332]	; (802251c <StartInputHandler+0x720>)
 80223d0:	881b      	ldrh	r3, [r3, #0]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d008      	beq.n	80223e8 <StartInputHandler+0x5ec>
 80223d6:	4b52      	ldr	r3, [pc, #328]	; (8022520 <StartInputHandler+0x724>)
 80223d8:	781b      	ldrb	r3, [r3, #0]
 80223da:	f083 0301 	eor.w	r3, r3, #1
 80223de:	b2db      	uxtb	r3, r3
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d001      	beq.n	80223e8 <StartInputHandler+0x5ec>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 80223e4:	231f      	movs	r3, #31
 80223e6:	e095      	b.n	8022514 <StartInputHandler+0x718>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 80223e8:	4b4e      	ldr	r3, [pc, #312]	; (8022524 <StartInputHandler+0x728>)
 80223ea:	781b      	ldrb	r3, [r3, #0]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d00a      	beq.n	8022406 <StartInputHandler+0x60a>
 80223f0:	4b4d      	ldr	r3, [pc, #308]	; (8022528 <StartInputHandler+0x72c>)
 80223f2:	881b      	ldrh	r3, [r3, #0]
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d006      	beq.n	8022406 <StartInputHandler+0x60a>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 80223f8:	4b4c      	ldr	r3, [pc, #304]	; (802252c <StartInputHandler+0x730>)
 80223fa:	881b      	ldrh	r3, [r3, #0]
 80223fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022400:	b29a      	uxth	r2, r3
 8022402:	4b4a      	ldr	r3, [pc, #296]	; (802252c <StartInputHandler+0x730>)
 8022404:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 8022406:	4b4a      	ldr	r3, [pc, #296]	; (8022530 <StartInputHandler+0x734>)
 8022408:	2200      	movs	r2, #0
 802240a:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 802240c:	4b49      	ldr	r3, [pc, #292]	; (8022534 <StartInputHandler+0x738>)
 802240e:	2200      	movs	r2, #0
 8022410:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8022412:	4b49      	ldr	r3, [pc, #292]	; (8022538 <StartInputHandler+0x73c>)
 8022414:	2200      	movs	r2, #0
 8022416:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8022418:	4b48      	ldr	r3, [pc, #288]	; (802253c <StartInputHandler+0x740>)
 802241a:	2200      	movs	r2, #0
 802241c:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 802241e:	4b48      	ldr	r3, [pc, #288]	; (8022540 <StartInputHandler+0x744>)
 8022420:	2200      	movs	r2, #0
 8022422:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8022424:	4b47      	ldr	r3, [pc, #284]	; (8022544 <StartInputHandler+0x748>)
 8022426:	2200      	movs	r2, #0
 8022428:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 802242a:	4b47      	ldr	r3, [pc, #284]	; (8022548 <StartInputHandler+0x74c>)
 802242c:	2200      	movs	r2, #0
 802242e:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8022430:	4b46      	ldr	r3, [pc, #280]	; (802254c <StartInputHandler+0x750>)
 8022432:	2200      	movs	r2, #0
 8022434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/
    sSyncManOutPar.u8SyncError = 0;
 8022438:	4b45      	ldr	r3, [pc, #276]	; (8022550 <StartInputHandler+0x754>)
 802243a:	2200      	movs	r2, #0
 802243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8022440:	4b43      	ldr	r3, [pc, #268]	; (8022550 <StartInputHandler+0x754>)
 8022442:	2200      	movs	r2, #0
 8022444:	851a      	strh	r2, [r3, #40]	; 0x28

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 8022446:	7bfb      	ldrb	r3, [r7, #15]
 8022448:	f003 0302 	and.w	r3, r3, #2
 802244c:	2b00      	cmp	r3, #0
 802244e:	d050      	beq.n	80224f2 <StartInputHandler+0x6f6>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 8022450:	69fb      	ldr	r3, [r7, #28]
 8022452:	2b00      	cmp	r3, #0
 8022454:	d103      	bne.n	802245e <StartInputHandler+0x662>
        {
            Sync0WdValue = 0;
 8022456:	4b36      	ldr	r3, [pc, #216]	; (8022530 <StartInputHandler+0x734>)
 8022458:	2200      	movs	r2, #0
 802245a:	801a      	strh	r2, [r3, #0]
 802245c:	e018      	b.n	8022490 <StartInputHandler+0x694>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 802245e:	69fb      	ldr	r3, [r7, #28]
 8022460:	095b      	lsrs	r3, r3, #5
 8022462:	4a3c      	ldr	r2, [pc, #240]	; (8022554 <StartInputHandler+0x758>)
 8022464:	fba2 2303 	umull	r2, r3, r2, r3
 8022468:	09db      	lsrs	r3, r3, #7
 802246a:	607b      	str	r3, [r7, #4]
            if(Sync0Cycle < 5)
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	2b04      	cmp	r3, #4
 8022470:	d803      	bhi.n	802247a <StartInputHandler+0x67e>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 8022472:	4b2f      	ldr	r3, [pc, #188]	; (8022530 <StartInputHandler+0x734>)
 8022474:	2201      	movs	r2, #1
 8022476:	801a      	strh	r2, [r3, #0]
 8022478:	e00a      	b.n	8022490 <StartInputHandler+0x694>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	b29b      	uxth	r3, r3
 802247e:	005b      	lsls	r3, r3, #1
 8022480:	b29b      	uxth	r3, r3
 8022482:	4a35      	ldr	r2, [pc, #212]	; (8022558 <StartInputHandler+0x75c>)
 8022484:	fba2 2303 	umull	r2, r3, r2, r3
 8022488:	08db      	lsrs	r3, r3, #3
 802248a:	b29a      	uxth	r2, r3
 802248c:	4b28      	ldr	r3, [pc, #160]	; (8022530 <StartInputHandler+0x734>)
 802248e:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 8022490:	7bfb      	ldrb	r3, [r7, #15]
 8022492:	f003 0304 	and.w	r3, r3, #4
 8022496:	2b00      	cmp	r3, #0
 8022498:	d02b      	beq.n	80224f2 <StartInputHandler+0x6f6>
        {
            if(cycleTimeSync1 < cycleTimeSync0)
 802249a:	69ba      	ldr	r2, [r7, #24]
 802249c:	69fb      	ldr	r3, [r7, #28]
 802249e:	429a      	cmp	r2, r3
 80224a0:	d204      	bcs.n	80224ac <StartInputHandler+0x6b0>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (cycleTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 80224a2:	4b23      	ldr	r3, [pc, #140]	; (8022530 <StartInputHandler+0x734>)
 80224a4:	881a      	ldrh	r2, [r3, #0]
 80224a6:	4b25      	ldr	r3, [pc, #148]	; (802253c <StartInputHandler+0x740>)
 80224a8:	801a      	strh	r2, [r3, #0]
 80224aa:	e022      	b.n	80224f2 <StartInputHandler+0x6f6>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
                UINT32 Sync1Cycle = cycleTimeSync1/100000;
 80224ac:	69bb      	ldr	r3, [r7, #24]
 80224ae:	095b      	lsrs	r3, r3, #5
 80224b0:	4a28      	ldr	r2, [pc, #160]	; (8022554 <StartInputHandler+0x758>)
 80224b2:	fba2 2303 	umull	r2, r3, r2, r3
 80224b6:	09db      	lsrs	r3, r3, #7
 80224b8:	603b      	str	r3, [r7, #0]
                if(Sync1Cycle < 5)
 80224ba:	683b      	ldr	r3, [r7, #0]
 80224bc:	2b04      	cmp	r3, #4
 80224be:	d803      	bhi.n	80224c8 <StartInputHandler+0x6cc>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 80224c0:	4b1e      	ldr	r3, [pc, #120]	; (802253c <StartInputHandler+0x740>)
 80224c2:	2201      	movs	r2, #1
 80224c4:	801a      	strh	r2, [r3, #0]
 80224c6:	e00a      	b.n	80224de <StartInputHandler+0x6e2>
    }
    else
    {
                    Sync1WdValue = (UINT16)(Sync1Cycle*2)/10;
 80224c8:	683b      	ldr	r3, [r7, #0]
 80224ca:	b29b      	uxth	r3, r3
 80224cc:	005b      	lsls	r3, r3, #1
 80224ce:	b29b      	uxth	r3, r3
 80224d0:	4a21      	ldr	r2, [pc, #132]	; (8022558 <StartInputHandler+0x75c>)
 80224d2:	fba2 2303 	umull	r2, r3, r2, r3
 80224d6:	08db      	lsrs	r3, r3, #3
 80224d8:	b29a      	uxth	r2, r3
 80224da:	4b18      	ldr	r3, [pc, #96]	; (802253c <StartInputHandler+0x740>)
 80224dc:	801a      	strh	r2, [r3, #0]
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 80224de:	4b14      	ldr	r3, [pc, #80]	; (8022530 <StartInputHandler+0x734>)
 80224e0:	881b      	ldrh	r3, [r3, #0]
 80224e2:	085b      	lsrs	r3, r3, #1
 80224e4:	b29a      	uxth	r2, r3
 80224e6:	4b15      	ldr	r3, [pc, #84]	; (802253c <StartInputHandler+0x740>)
 80224e8:	881b      	ldrh	r3, [r3, #0]
 80224ea:	4413      	add	r3, r2
 80224ec:	b29a      	uxth	r2, r3
 80224ee:	4b13      	ldr	r3, [pc, #76]	; (802253c <StartInputHandler+0x740>)
 80224f0:	801a      	strh	r2, [r3, #0]





    if(nPdOutputSize > 0)
 80224f2:	4b0d      	ldr	r3, [pc, #52]	; (8022528 <StartInputHandler+0x72c>)
 80224f4:	881b      	ldrh	r3, [r3, #0]
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	d002      	beq.n	8022500 <StartInputHandler+0x704>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_OUT);
 80224fa:	2002      	movs	r0, #2
 80224fc:	f7ff fa74 	bl	80219e8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8022500:	4b16      	ldr	r3, [pc, #88]	; (802255c <StartInputHandler+0x760>)
 8022502:	881b      	ldrh	r3, [r3, #0]
 8022504:	2b00      	cmp	r3, #0
 8022506:	d002      	beq.n	802250e <StartInputHandler+0x712>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_IN);
 8022508:	2003      	movs	r0, #3
 802250a:	f7ff fa6d 	bl	80219e8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /*write initial input data*/
    PDO_InputMapping();
 802250e:	f7fe fb29 	bl	8020b64 <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 8022512:	2300      	movs	r3, #0
}
 8022514:	4618      	mov	r0, r3
 8022516:	3730      	adds	r7, #48	; 0x30
 8022518:	46bd      	mov	sp, r7
 802251a:	bd80      	pop	{r7, pc}
 802251c:	1ffea860 	.word	0x1ffea860
 8022520:	1ffea864 	.word	0x1ffea864
 8022524:	1ffea863 	.word	0x1ffea863
 8022528:	1ffea826 	.word	0x1ffea826
 802252c:	1ffea83e 	.word	0x1ffea83e
 8022530:	1ffea834 	.word	0x1ffea834
 8022534:	1ffea82a 	.word	0x1ffea82a
 8022538:	1ffea85e 	.word	0x1ffea85e
 802253c:	1ffea83a 	.word	0x1ffea83a
 8022540:	1ffea840 	.word	0x1ffea840
 8022544:	1ffea857 	.word	0x1ffea857
 8022548:	1ffea838 	.word	0x1ffea838
 802254c:	1ffeac98 	.word	0x1ffeac98
 8022550:	1ffeacdc 	.word	0x1ffeacdc
 8022554:	0a7c5ac5 	.word	0x0a7c5ac5
 8022558:	cccccccd 	.word	0xcccccccd
 802255c:	1ffea850 	.word	0x1ffea850

08022560 <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 8022560:	b480      	push	{r7}
 8022562:	b083      	sub	sp, #12
 8022564:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) ESM6*/
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8022566:	23ff      	movs	r3, #255	; 0xff
 8022568:	80fb      	strh	r3, [r7, #6]
/*ECATCHANGE_END(V5.11) ESM6*/
    if(bLocalErrorFlag)
 802256a:	4b0c      	ldr	r3, [pc, #48]	; (802259c <StartOutputHandler+0x3c>)
 802256c:	781b      	ldrb	r3, [r3, #0]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d002      	beq.n	8022578 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8022572:	4b0b      	ldr	r3, [pc, #44]	; (80225a0 <StartOutputHandler+0x40>)
 8022574:	881b      	ldrh	r3, [r3, #0]
 8022576:	e00a      	b.n	802258e <StartOutputHandler+0x2e>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8022578:	4b0a      	ldr	r3, [pc, #40]	; (80225a4 <StartOutputHandler+0x44>)
 802257a:	781b      	ldrb	r3, [r3, #0]
 802257c:	2b00      	cmp	r3, #0
 802257e:	d005      	beq.n	802258c <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 8022580:	4b09      	ldr	r3, [pc, #36]	; (80225a8 <StartOutputHandler+0x48>)
 8022582:	22c8      	movs	r2, #200	; 0xc8
 8022584:	801a      	strh	r2, [r3, #0]
        i16WaitForPllRunningCnt = 0;
 8022586:	4b09      	ldr	r3, [pc, #36]	; (80225ac <StartOutputHandler+0x4c>)
 8022588:	2200      	movs	r2, #0
 802258a:	801a      	strh	r2, [r3, #0]
    }


    return result;
 802258c:	88fb      	ldrh	r3, [r7, #6]
}
 802258e:	4618      	mov	r0, r3
 8022590:	370c      	adds	r7, #12
 8022592:	46bd      	mov	sp, r7
 8022594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022598:	4770      	bx	lr
 802259a:	bf00      	nop
 802259c:	1ffea82c 	.word	0x1ffea82c
 80225a0:	1ffea828 	.word	0x1ffea828
 80225a4:	1ffea85b 	.word	0x1ffea85b
 80225a8:	1ffea838 	.word	0x1ffea838
 80225ac:	1ffea830 	.word	0x1ffea830

080225b0 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 80225b0:	b480      	push	{r7}
 80225b2:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 80225b4:	4b04      	ldr	r3, [pc, #16]	; (80225c8 <StopOutputHandler+0x18>)
 80225b6:	2200      	movs	r2, #0
 80225b8:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 80225ba:	4b04      	ldr	r3, [pc, #16]	; (80225cc <StopOutputHandler+0x1c>)
 80225bc:	2200      	movs	r2, #0
 80225be:	701a      	strb	r2, [r3, #0]
}
 80225c0:	46bd      	mov	sp, r7
 80225c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225c6:	4770      	bx	lr
 80225c8:	1ffea856 	.word	0x1ffea856
 80225cc:	1ffea85c 	.word	0x1ffea85c

080225d0 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 80225d0:	b580      	push	{r7, lr}
 80225d2:	b082      	sub	sp, #8
 80225d4:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 80225d6:	4b2c      	ldr	r3, [pc, #176]	; (8022688 <StopInputHandler+0xb8>)
 80225d8:	881b      	ldrh	r3, [r3, #0]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d002      	beq.n	80225e4 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_END(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_OUT);
 80225de:	2002      	movs	r0, #2
 80225e0:	f7ff f9d8 	bl	8021994 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 80225e4:	4b29      	ldr	r3, [pc, #164]	; (802268c <StopInputHandler+0xbc>)
 80225e6:	881b      	ldrh	r3, [r3, #0]
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d002      	beq.n	80225f2 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 80225ec:	2003      	movs	r0, #3
 80225ee:	f7ff f9d1 	bl	8021994 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 80225f2:	230c      	movs	r3, #12
 80225f4:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 80225f6:	88fb      	ldrh	r3, [r7, #6]
 80225f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80225fc:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 80225fe:	88fb      	ldrh	r3, [r7, #6]
 8022600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022604:	80fb      	strh	r3, [r7, #6]

/*ECATCHANGE_START(V5.11) HW1*/
    ResetALEventMask( ~(ResetMask) );
 8022606:	88fb      	ldrh	r3, [r7, #6]
 8022608:	43db      	mvns	r3, r3
 802260a:	b29b      	uxth	r3, r3
 802260c:	4618      	mov	r0, r3
 802260e:	f7ff f957 	bl	80218c0 <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 8022612:	4b1f      	ldr	r3, [pc, #124]	; (8022690 <StopInputHandler+0xc0>)
 8022614:	2200      	movs	r2, #0
 8022616:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 8022618:	4b1e      	ldr	r3, [pc, #120]	; (8022694 <StopInputHandler+0xc4>)
 802261a:	2200      	movs	r2, #0
 802261c:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 802261e:	4b1e      	ldr	r3, [pc, #120]	; (8022698 <StopInputHandler+0xc8>)
 8022620:	2200      	movs	r2, #0
 8022622:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8022624:	4b1d      	ldr	r3, [pc, #116]	; (802269c <StopInputHandler+0xcc>)
 8022626:	2200      	movs	r2, #0
 8022628:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 802262a:	4b1d      	ldr	r3, [pc, #116]	; (80226a0 <StopInputHandler+0xd0>)
 802262c:	2200      	movs	r2, #0
 802262e:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8022630:	4b1c      	ldr	r3, [pc, #112]	; (80226a4 <StopInputHandler+0xd4>)
 8022632:	2200      	movs	r2, #0
 8022634:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8022636:	4b1c      	ldr	r3, [pc, #112]	; (80226a8 <StopInputHandler+0xd8>)
 8022638:	2200      	movs	r2, #0
 802263a:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 802263c:	4b1b      	ldr	r3, [pc, #108]	; (80226ac <StopInputHandler+0xdc>)
 802263e:	2200      	movs	r2, #0
 8022640:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8022642:	4b1b      	ldr	r3, [pc, #108]	; (80226b0 <StopInputHandler+0xe0>)
 8022644:	2200      	movs	r2, #0
 8022646:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8022648:	4b1a      	ldr	r3, [pc, #104]	; (80226b4 <StopInputHandler+0xe4>)
 802264a:	2200      	movs	r2, #0
 802264c:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 802264e:	4b1a      	ldr	r3, [pc, #104]	; (80226b8 <StopInputHandler+0xe8>)
 8022650:	2200      	movs	r2, #0
 8022652:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8022654:	4b19      	ldr	r3, [pc, #100]	; (80226bc <StopInputHandler+0xec>)
 8022656:	2200      	movs	r2, #0
 8022658:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 802265a:	4b19      	ldr	r3, [pc, #100]	; (80226c0 <StopInputHandler+0xf0>)
 802265c:	2200      	movs	r2, #0
 802265e:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8022660:	4b18      	ldr	r3, [pc, #96]	; (80226c4 <StopInputHandler+0xf4>)
 8022662:	2200      	movs	r2, #0
 8022664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    i16WaitForPllRunningTimeout = 0;
 8022668:	4b17      	ldr	r3, [pc, #92]	; (80226c8 <StopInputHandler+0xf8>)
 802266a:	2200      	movs	r2, #0
 802266c:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 802266e:	4b17      	ldr	r3, [pc, #92]	; (80226cc <StopInputHandler+0xfc>)
 8022670:	2200      	movs	r2, #0
 8022672:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8022674:	4b16      	ldr	r3, [pc, #88]	; (80226d0 <StopInputHandler+0x100>)
 8022676:	2200      	movs	r2, #0
 8022678:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 802267a:	4b16      	ldr	r3, [pc, #88]	; (80226d4 <StopInputHandler+0x104>)
 802267c:	2200      	movs	r2, #0
 802267e:	701a      	strb	r2, [r3, #0]
}
 8022680:	3708      	adds	r7, #8
 8022682:	46bd      	mov	sp, r7
 8022684:	bd80      	pop	{r7, pc}
 8022686:	bf00      	nop
 8022688:	1ffea826 	.word	0x1ffea826
 802268c:	1ffea850 	.word	0x1ffea850
 8022690:	1ffea856 	.word	0x1ffea856
 8022694:	1ffea863 	.word	0x1ffea863
 8022698:	1ffea85b 	.word	0x1ffea85b
 802269c:	1ffea840 	.word	0x1ffea840
 80226a0:	1ffea857 	.word	0x1ffea857
 80226a4:	1ffea852 	.word	0x1ffea852
 80226a8:	1ffea866 	.word	0x1ffea866
 80226ac:	1ffea834 	.word	0x1ffea834
 80226b0:	1ffea82a 	.word	0x1ffea82a
 80226b4:	1ffea85e 	.word	0x1ffea85e
 80226b8:	1ffea83a 	.word	0x1ffea83a
 80226bc:	1ffea84c 	.word	0x1ffea84c
 80226c0:	1ffea82e 	.word	0x1ffea82e
 80226c4:	1ffeac98 	.word	0x1ffeac98
 80226c8:	1ffea838 	.word	0x1ffea838
 80226cc:	1ffea864 	.word	0x1ffea864
 80226d0:	1ffea862 	.word	0x1ffea862
 80226d4:	1ffead20 	.word	0x1ffead20

080226d8 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 80226d8:	b480      	push	{r7}
 80226da:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 80226dc:	4b03      	ldr	r3, [pc, #12]	; (80226ec <BackToInitTransition+0x14>)
 80226de:	2200      	movs	r2, #0
 80226e0:	701a      	strb	r2, [r3, #0]
}
 80226e2:	46bd      	mov	sp, r7
 80226e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226e8:	4770      	bx	lr
 80226ea:	bf00      	nop
 80226ec:	1ffead20 	.word	0x1ffead20

080226f0 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 80226f0:	b480      	push	{r7}
 80226f2:	b085      	sub	sp, #20
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	4603      	mov	r3, r0
 80226f8:	460a      	mov	r2, r1
 80226fa:	71fb      	strb	r3, [r7, #7]
 80226fc:	4613      	mov	r3, r2
 80226fe:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8022700:	88bb      	ldrh	r3, [r7, #4]
 8022702:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8022704:	4b24      	ldr	r3, [pc, #144]	; (8022798 <SetALStatus+0xa8>)
 8022706:	781b      	ldrb	r3, [r3, #0]
 8022708:	79fa      	ldrb	r2, [r7, #7]
 802270a:	429a      	cmp	r2, r3
 802270c:	d002      	beq.n	8022714 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 802270e:	4a22      	ldr	r2, [pc, #136]	; (8022798 <SetALStatus+0xa8>)
 8022710:	79fb      	ldrb	r3, [r7, #7]
 8022712:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8022714:	88bb      	ldrh	r3, [r7, #4]
 8022716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802271a:	4293      	cmp	r3, r2
 802271c:	d002      	beq.n	8022724 <SetALStatus+0x34>
    {
        Value = SWAPWORD(Value);

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 802271e:	4a1f      	ldr	r2, [pc, #124]	; (802279c <SetALStatus+0xac>)
 8022720:	89fb      	ldrh	r3, [r7, #14]
 8022722:	8013      	strh	r3, [r2, #0]
    }

    Value = nAlStatus;
 8022724:	4b1c      	ldr	r3, [pc, #112]	; (8022798 <SetALStatus+0xa8>)
 8022726:	781b      	ldrb	r3, [r3, #0]
 8022728:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 802272a:	4a1d      	ldr	r2, [pc, #116]	; (80227a0 <SetALStatus+0xb0>)
 802272c:	89fb      	ldrh	r3, [r7, #14]
 802272e:	8013      	strh	r3, [r2, #0]

    /*The Run LED state is set in Set LED Indication, only the Error LED blink code is set here*/

    /*set Error blink code*/
    if(alStatusCode == 0x00 || !(alStatus & STATE_CHANGE))
 8022730:	88bb      	ldrh	r3, [r7, #4]
 8022732:	2b00      	cmp	r3, #0
 8022734:	d004      	beq.n	8022740 <SetALStatus+0x50>
 8022736:	79fb      	ldrb	r3, [r7, #7]
 8022738:	f003 0310 	and.w	r3, r3, #16
 802273c:	2b00      	cmp	r3, #0
 802273e:	d103      	bne.n	8022748 <SetALStatus+0x58>
    {
        u8EcatErrorLed = LED_OFF;
 8022740:	4b18      	ldr	r3, [pc, #96]	; (80227a4 <SetALStatus+0xb4>)
 8022742:	2200      	movs	r2, #0
 8022744:	701a      	strb	r2, [r3, #0]
 8022746:	e016      	b.n	8022776 <SetALStatus+0x86>
    }
    else if((alStatusCode == ALSTATUSCODE_NOSYNCERROR) ||
 8022748:	88bb      	ldrh	r3, [r7, #4]
 802274a:	2b2d      	cmp	r3, #45	; 0x2d
 802274c:	d005      	beq.n	802275a <SetALStatus+0x6a>
 802274e:	88bb      	ldrh	r3, [r7, #4]
 8022750:	2b1a      	cmp	r3, #26
 8022752:	d002      	beq.n	802275a <SetALStatus+0x6a>
        (alStatusCode == ALSTATUSCODE_SYNCERROR) ||
 8022754:	88bb      	ldrh	r3, [r7, #4]
 8022756:	2b32      	cmp	r3, #50	; 0x32
 8022758:	d103      	bne.n	8022762 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_DCPLLSYNCERROR))
    {
        u8EcatErrorLed = LED_SINGLEFLASH;
 802275a:	4b12      	ldr	r3, [pc, #72]	; (80227a4 <SetALStatus+0xb4>)
 802275c:	2201      	movs	r2, #1
 802275e:	701a      	strb	r2, [r3, #0]
 8022760:	e009      	b.n	8022776 <SetALStatus+0x86>
    }
    else if((alStatusCode == ALSTATUSCODE_SMWATCHDOG))
 8022762:	88bb      	ldrh	r3, [r7, #4]
 8022764:	2b1b      	cmp	r3, #27
 8022766:	d103      	bne.n	8022770 <SetALStatus+0x80>
    {
        u8EcatErrorLed = LED_DOUBLEFLASH;
 8022768:	4b0e      	ldr	r3, [pc, #56]	; (80227a4 <SetALStatus+0xb4>)
 802276a:	2202      	movs	r2, #2
 802276c:	701a      	strb	r2, [r3, #0]
 802276e:	e002      	b.n	8022776 <SetALStatus+0x86>
    }
    else
    {
        u8EcatErrorLed = LED_BLINKING;
 8022770:	4b0c      	ldr	r3, [pc, #48]	; (80227a4 <SetALStatus+0xb4>)
 8022772:	220d      	movs	r2, #13
 8022774:	701a      	strb	r2, [r3, #0]
    }
    u8EcatErrorLed |= LED_OVERRIDE;
 8022776:	4b0b      	ldr	r3, [pc, #44]	; (80227a4 <SetALStatus+0xb4>)
 8022778:	781b      	ldrb	r3, [r3, #0]
 802277a:	f043 0310 	orr.w	r3, r3, #16
 802277e:	b2da      	uxtb	r2, r3
 8022780:	4b08      	ldr	r3, [pc, #32]	; (80227a4 <SetALStatus+0xb4>)
 8022782:	701a      	strb	r2, [r3, #0]

    HW_EscWriteByte(u8EcatErrorLed,ESC_ERROR_LED_OVERRIDE);
 8022784:	4b08      	ldr	r3, [pc, #32]	; (80227a8 <SetALStatus+0xb8>)
 8022786:	4a07      	ldr	r2, [pc, #28]	; (80227a4 <SetALStatus+0xb4>)
 8022788:	7812      	ldrb	r2, [r2, #0]
 802278a:	701a      	strb	r2, [r3, #0]
}
 802278c:	3714      	adds	r7, #20
 802278e:	46bd      	mov	sp, r7
 8022790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022794:	4770      	bx	lr
 8022796:	bf00      	nop
 8022798:	1ffea825 	.word	0x1ffea825
 802279c:	54010134 	.word	0x54010134
 80227a0:	54010130 	.word	0x54010130
 80227a4:	1ffea869 	.word	0x1ffea869
 80227a8:	54010139 	.word	0x54010139

080227ac <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 80227ac:	b580      	push	{r7, lr}
 80227ae:	b084      	sub	sp, #16
 80227b0:	af00      	add	r7, sp, #0
 80227b2:	4603      	mov	r3, r0
 80227b4:	460a      	mov	r2, r1
 80227b6:	71fb      	strb	r3, [r7, #7]
 80227b8:	4613      	mov	r3, r2
 80227ba:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 80227bc:	2300      	movs	r3, #0
 80227be:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 80227c0:	2300      	movs	r3, #0
 80227c2:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 80227c4:	4bd3      	ldr	r3, [pc, #844]	; (8022b14 <AL_ControlInd+0x368>)
 80227c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80227ca:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 80227cc:	4bd2      	ldr	r3, [pc, #840]	; (8022b18 <AL_ControlInd+0x36c>)
 80227ce:	2201      	movs	r2, #1
 80227d0:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 80227d2:	79fb      	ldrb	r3, [r7, #7]
 80227d4:	f003 0310 	and.w	r3, r3, #16
 80227d8:	2b00      	cmp	r3, #0
 80227da:	d009      	beq.n	80227f0 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 80227dc:	2301      	movs	r3, #1
 80227de:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 80227e0:	4bce      	ldr	r3, [pc, #824]	; (8022b1c <AL_ControlInd+0x370>)
 80227e2:	781b      	ldrb	r3, [r3, #0]
 80227e4:	f023 0310 	bic.w	r3, r3, #16
 80227e8:	b2da      	uxtb	r2, r3
 80227ea:	4bcc      	ldr	r3, [pc, #816]	; (8022b1c <AL_ControlInd+0x370>)
 80227ec:	701a      	strb	r2, [r3, #0]
 80227ee:	e012      	b.n	8022816 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ( (nAlStatus & STATE_CHANGE)
 80227f0:	4bca      	ldr	r3, [pc, #808]	; (8022b1c <AL_ControlInd+0x370>)
 80227f2:	781b      	ldrb	r3, [r3, #0]
 80227f4:	f003 0310 	and.w	r3, r3, #16
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	d005      	beq.n	8022808 <AL_ControlInd+0x5c>
    // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
    //               (the error was acknowledged with the same state before independent of the acknowledge flag)
    /*Error Acknowledge with 0xX1 is allowed*/
           && (alControl & STATE_MASK) != STATE_INIT )
 80227fc:	79fb      	ldrb	r3, [r7, #7]
 80227fe:	f003 030f 	and.w	r3, r3, #15
 8022802:	2b01      	cmp	r3, #1
 8022804:	d000      	beq.n	8022808 <AL_ControlInd+0x5c>
        /* the error flag (Bit 4) is set in the AL-Status and the ErrAck bit (Bit 4)
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
 8022806:	e375      	b.n	8022ef4 <AL_ControlInd+0x748>
    else
    {
        nAlStatus &= STATE_MASK;
 8022808:	4bc4      	ldr	r3, [pc, #784]	; (8022b1c <AL_ControlInd+0x370>)
 802280a:	781b      	ldrb	r3, [r3, #0]
 802280c:	f003 030f 	and.w	r3, r3, #15
 8022810:	b2da      	uxtb	r2, r3
 8022812:	4bc2      	ldr	r3, [pc, #776]	; (8022b1c <AL_ControlInd+0x370>)
 8022814:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8022816:	79fb      	ldrb	r3, [r7, #7]
 8022818:	f003 030f 	and.w	r3, r3, #15
 802281c:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 802281e:	4bbf      	ldr	r3, [pc, #764]	; (8022b1c <AL_ControlInd+0x370>)
 8022820:	781b      	ldrb	r3, [r3, #0]
 8022822:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8022824:	7b3b      	ldrb	r3, [r7, #12]
 8022826:	011b      	lsls	r3, r3, #4
 8022828:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 802282a:	7b3a      	ldrb	r2, [r7, #12]
 802282c:	79fb      	ldrb	r3, [r7, #7]
 802282e:	4413      	add	r3, r2
 8022830:	733b      	strb	r3, [r7, #12]


    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8022832:	7b3b      	ldrb	r3, [r7, #12]
 8022834:	2b44      	cmp	r3, #68	; 0x44
 8022836:	d029      	beq.n	802288c <AL_ControlInd+0xe0>
 8022838:	2b44      	cmp	r3, #68	; 0x44
 802283a:	dc0b      	bgt.n	8022854 <AL_ControlInd+0xa8>
 802283c:	2b22      	cmp	r3, #34	; 0x22
 802283e:	d015      	beq.n	802286c <AL_ControlInd+0xc0>
 8022840:	2b22      	cmp	r3, #34	; 0x22
 8022842:	dc02      	bgt.n	802284a <AL_ControlInd+0x9e>
 8022844:	2b12      	cmp	r3, #18
 8022846:	d011      	beq.n	802286c <AL_ControlInd+0xc0>
 8022848:	e028      	b.n	802289c <AL_ControlInd+0xf0>
 802284a:	2b24      	cmp	r3, #36	; 0x24
 802284c:	d014      	beq.n	8022878 <AL_ControlInd+0xcc>
 802284e:	2b42      	cmp	r3, #66	; 0x42
 8022850:	d00c      	beq.n	802286c <AL_ControlInd+0xc0>
 8022852:	e023      	b.n	802289c <AL_ControlInd+0xf0>
 8022854:	2b82      	cmp	r3, #130	; 0x82
 8022856:	d009      	beq.n	802286c <AL_ControlInd+0xc0>
 8022858:	2b82      	cmp	r3, #130	; 0x82
 802285a:	dc02      	bgt.n	8022862 <AL_ControlInd+0xb6>
 802285c:	2b48      	cmp	r3, #72	; 0x48
 802285e:	d015      	beq.n	802288c <AL_ControlInd+0xe0>
 8022860:	e01c      	b.n	802289c <AL_ControlInd+0xf0>
 8022862:	2b84      	cmp	r3, #132	; 0x84
 8022864:	d012      	beq.n	802288c <AL_ControlInd+0xe0>
 8022866:	2b88      	cmp	r3, #136	; 0x88
 8022868:	d010      	beq.n	802288c <AL_ControlInd+0xe0>
 802286a:	e017      	b.n	802289c <AL_ControlInd+0xf0>
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 802286c:	2002      	movs	r0, #2
 802286e:	f7ff f8e5 	bl	8021a3c <CheckSmSettings>
 8022872:	4603      	mov	r3, r0
 8022874:	81fb      	strh	r3, [r7, #14]
        break;
 8022876:	e011      	b.n	802289c <AL_ControlInd+0xf0>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8022878:	48a9      	ldr	r0, [pc, #676]	; (8022b20 <AL_ControlInd+0x374>)
 802287a:	49aa      	ldr	r1, [pc, #680]	; (8022b24 <AL_ControlInd+0x378>)
 802287c:	f7fd fdc6 	bl	802040c <APPL_GenerateMapping>
 8022880:	4603      	mov	r3, r0
 8022882:	81fb      	strh	r3, [r7, #14]

        if (result != 0)
 8022884:	89fb      	ldrh	r3, [r7, #14]
 8022886:	2b00      	cmp	r3, #0
 8022888:	d000      	beq.n	802288c <AL_ControlInd+0xe0>
            break;
 802288a:	e007      	b.n	802289c <AL_ControlInd+0xf0>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 802288c:	4ba6      	ldr	r3, [pc, #664]	; (8022b28 <AL_ControlInd+0x37c>)
 802288e:	781b      	ldrb	r3, [r3, #0]
 8022890:	4618      	mov	r0, r3
 8022892:	f7ff f8d3 	bl	8021a3c <CheckSmSettings>
 8022896:	4603      	mov	r3, r0
 8022898:	81fb      	strh	r3, [r7, #14]
        break;
 802289a:	bf00      	nop
    }

    if ( result == 0 )
 802289c:	89fb      	ldrh	r3, [r7, #14]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	f040 825f 	bne.w	8022d62 <AL_ControlInd+0x5b6>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 80228a4:	4ba1      	ldr	r3, [pc, #644]	; (8022b2c <AL_ControlInd+0x380>)
 80228a6:	2200      	movs	r2, #0
 80228a8:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 80228aa:	7b3b      	ldrb	r3, [r7, #12]
 80228ac:	3b11      	subs	r3, #17
 80228ae:	2b77      	cmp	r3, #119	; 0x77
 80228b0:	f200 8253 	bhi.w	8022d5a <AL_ControlInd+0x5ae>
 80228b4:	a201      	add	r2, pc, #4	; (adr r2, 80228bc <AL_ControlInd+0x110>)
 80228b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80228ba:	bf00      	nop
 80228bc:	08022d03 	.word	0x08022d03
 80228c0:	08022b65 	.word	0x08022b65
 80228c4:	08022a9d 	.word	0x08022a9d
 80228c8:	08022d55 	.word	0x08022d55
 80228cc:	08022d5b 	.word	0x08022d5b
 80228d0:	08022d5b 	.word	0x08022d5b
 80228d4:	08022d5b 	.word	0x08022d5b
 80228d8:	08022d55 	.word	0x08022d55
 80228dc:	08022d5b 	.word	0x08022d5b
 80228e0:	08022d5b 	.word	0x08022d5b
 80228e4:	08022d5b 	.word	0x08022d5b
 80228e8:	08022d5b 	.word	0x08022d5b
 80228ec:	08022d5b 	.word	0x08022d5b
 80228f0:	08022d5b 	.word	0x08022d5b
 80228f4:	08022d5b 	.word	0x08022d5b
 80228f8:	08022d5b 	.word	0x08022d5b
 80228fc:	08022cf1 	.word	0x08022cf1
 8022900:	08022d07 	.word	0x08022d07
 8022904:	08022d55 	.word	0x08022d55
 8022908:	08022bcf 	.word	0x08022bcf
 802290c:	08022d5b 	.word	0x08022d5b
 8022910:	08022d5b 	.word	0x08022d5b
 8022914:	08022d5b 	.word	0x08022d5b
 8022918:	08022d55 	.word	0x08022d55
 802291c:	08022d5b 	.word	0x08022d5b
 8022920:	08022d5b 	.word	0x08022d5b
 8022924:	08022d5b 	.word	0x08022d5b
 8022928:	08022d5b 	.word	0x08022d5b
 802292c:	08022d5b 	.word	0x08022d5b
 8022930:	08022d5b 	.word	0x08022d5b
 8022934:	08022d5b 	.word	0x08022d5b
 8022938:	08022d5b 	.word	0x08022d5b
 802293c:	08022b39 	.word	0x08022b39
 8022940:	08022d55 	.word	0x08022d55
 8022944:	08022d5b 	.word	0x08022d5b
 8022948:	08022d55 	.word	0x08022d55
 802294c:	08022d5b 	.word	0x08022d5b
 8022950:	08022d5b 	.word	0x08022d5b
 8022954:	08022d5b 	.word	0x08022d5b
 8022958:	08022d55 	.word	0x08022d55
 802295c:	08022d5b 	.word	0x08022d5b
 8022960:	08022d5b 	.word	0x08022d5b
 8022964:	08022d5b 	.word	0x08022d5b
 8022968:	08022d5b 	.word	0x08022d5b
 802296c:	08022d5b 	.word	0x08022d5b
 8022970:	08022d5b 	.word	0x08022d5b
 8022974:	08022d5b 	.word	0x08022d5b
 8022978:	08022d5b 	.word	0x08022d5b
 802297c:	08022cd3 	.word	0x08022cd3
 8022980:	08022ca5 	.word	0x08022ca5
 8022984:	08022d55 	.word	0x08022d55
 8022988:	08022d07 	.word	0x08022d07
 802298c:	08022d5b 	.word	0x08022d5b
 8022990:	08022d5b 	.word	0x08022d5b
 8022994:	08022d5b 	.word	0x08022d5b
 8022998:	08022c29 	.word	0x08022c29
 802299c:	08022d5b 	.word	0x08022d5b
 80229a0:	08022d5b 	.word	0x08022d5b
 80229a4:	08022d5b 	.word	0x08022d5b
 80229a8:	08022d5b 	.word	0x08022d5b
 80229ac:	08022d5b 	.word	0x08022d5b
 80229b0:	08022d5b 	.word	0x08022d5b
 80229b4:	08022d5b 	.word	0x08022d5b
 80229b8:	08022d5b 	.word	0x08022d5b
 80229bc:	08022d5b 	.word	0x08022d5b
 80229c0:	08022d5b 	.word	0x08022d5b
 80229c4:	08022d5b 	.word	0x08022d5b
 80229c8:	08022d5b 	.word	0x08022d5b
 80229cc:	08022d5b 	.word	0x08022d5b
 80229d0:	08022d5b 	.word	0x08022d5b
 80229d4:	08022d5b 	.word	0x08022d5b
 80229d8:	08022d5b 	.word	0x08022d5b
 80229dc:	08022d5b 	.word	0x08022d5b
 80229e0:	08022d5b 	.word	0x08022d5b
 80229e4:	08022d5b 	.word	0x08022d5b
 80229e8:	08022d5b 	.word	0x08022d5b
 80229ec:	08022d5b 	.word	0x08022d5b
 80229f0:	08022d5b 	.word	0x08022d5b
 80229f4:	08022d5b 	.word	0x08022d5b
 80229f8:	08022d5b 	.word	0x08022d5b
 80229fc:	08022d5b 	.word	0x08022d5b
 8022a00:	08022d5b 	.word	0x08022d5b
 8022a04:	08022d5b 	.word	0x08022d5b
 8022a08:	08022d5b 	.word	0x08022d5b
 8022a0c:	08022d5b 	.word	0x08022d5b
 8022a10:	08022d5b 	.word	0x08022d5b
 8022a14:	08022d5b 	.word	0x08022d5b
 8022a18:	08022d5b 	.word	0x08022d5b
 8022a1c:	08022d5b 	.word	0x08022d5b
 8022a20:	08022d5b 	.word	0x08022d5b
 8022a24:	08022d5b 	.word	0x08022d5b
 8022a28:	08022d5b 	.word	0x08022d5b
 8022a2c:	08022d5b 	.word	0x08022d5b
 8022a30:	08022d5b 	.word	0x08022d5b
 8022a34:	08022d5b 	.word	0x08022d5b
 8022a38:	08022d5b 	.word	0x08022d5b
 8022a3c:	08022d5b 	.word	0x08022d5b
 8022a40:	08022d5b 	.word	0x08022d5b
 8022a44:	08022d5b 	.word	0x08022d5b
 8022a48:	08022d5b 	.word	0x08022d5b
 8022a4c:	08022d5b 	.word	0x08022d5b
 8022a50:	08022d5b 	.word	0x08022d5b
 8022a54:	08022d5b 	.word	0x08022d5b
 8022a58:	08022d5b 	.word	0x08022d5b
 8022a5c:	08022d5b 	.word	0x08022d5b
 8022a60:	08022d5b 	.word	0x08022d5b
 8022a64:	08022d5b 	.word	0x08022d5b
 8022a68:	08022d5b 	.word	0x08022d5b
 8022a6c:	08022d5b 	.word	0x08022d5b
 8022a70:	08022d5b 	.word	0x08022d5b
 8022a74:	08022d5b 	.word	0x08022d5b
 8022a78:	08022d5b 	.word	0x08022d5b
 8022a7c:	08022cb5 	.word	0x08022cb5
 8022a80:	08022c87 	.word	0x08022c87
 8022a84:	08022d55 	.word	0x08022d55
 8022a88:	08022c77 	.word	0x08022c77
 8022a8c:	08022d5b 	.word	0x08022d5b
 8022a90:	08022d5b 	.word	0x08022d5b
 8022a94:	08022d5b 	.word	0x08022d5b
 8022a98:	08022d07 	.word	0x08022d07
        {
        case INIT_2_BOOT    :
            /* if the application has to execute code when going to BOOT this shall be done at this place */
            bBootMode = TRUE;
 8022a9c:	4b24      	ldr	r3, [pc, #144]	; (8022b30 <AL_ControlInd+0x384>)
 8022a9e:	2201      	movs	r2, #1
 8022aa0:	701a      	strb	r2, [r3, #0]
            if ( CheckSmSettings(MAILBOX_READ+1) != 0 )
 8022aa2:	2002      	movs	r0, #2
 8022aa4:	f7fe ffca 	bl	8021a3c <CheckSmSettings>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d005      	beq.n	8022aba <AL_ControlInd+0x30e>
            {
                bBootMode = FALSE;
 8022aae:	4b20      	ldr	r3, [pc, #128]	; (8022b30 <AL_ControlInd+0x384>)
 8022ab0:	2200      	movs	r2, #0
 8022ab2:	701a      	strb	r2, [r3, #0]
                result = ALSTATUSCODE_INVALIDMBXCFGINBOOT;
 8022ab4:	2315      	movs	r3, #21
 8022ab6:	81fb      	strh	r3, [r7, #14]
                break;
 8022ab8:	e152      	b.n	8022d60 <AL_ControlInd+0x5b4>
            }
            /* disable all events in BOOT state */
/*ECATCHANGE_START(V5.11) HW1*/
            ResetALEventMask(0);
 8022aba:	2000      	movs	r0, #0
 8022abc:	f7fe ff00 	bl	80218c0 <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SM0 and SM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8022ac0:	f000 fffe 	bl	8023ac0 <MBX_StartMailboxHandler>
 8022ac4:	4603      	mov	r3, r0
 8022ac6:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8022ac8:	89fb      	ldrh	r3, [r7, #14]
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d10c      	bne.n	8022ae8 <AL_ControlInd+0x33c>
            {
                bApplEsmPending = FALSE;
 8022ace:	4b12      	ldr	r3, [pc, #72]	; (8022b18 <AL_ControlInd+0x36c>)
 8022ad0:	2200      	movs	r2, #0
 8022ad2:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                    if the state transition from INIT to BOOT should be done
                    if result is NOERROR_INWORK, the slave will stay in INIT until timeout 
                    or transition is complete by AL_ControlRes*/
            
                result = APPL_StartMailboxHandler();
 8022ad4:	f7fd fc66 	bl	80203a4 <APPL_StartMailboxHandler>
 8022ad8:	4603      	mov	r3, r0
 8022ada:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8022adc:	89fb      	ldrh	r3, [r7, #14]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d102      	bne.n	8022ae8 <AL_ControlInd+0x33c>
                {
                    /*transition successful*/
                    bMbxRunning = TRUE;
 8022ae2:	4b14      	ldr	r3, [pc, #80]	; (8022b34 <AL_ControlInd+0x388>)
 8022ae4:	2201      	movs	r2, #1
 8022ae6:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8022ae8:	89fb      	ldrh	r3, [r7, #14]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d00d      	beq.n	8022b0a <AL_ControlInd+0x35e>
 8022aee:	89fb      	ldrh	r3, [r7, #14]
 8022af0:	2bff      	cmp	r3, #255	; 0xff
 8022af2:	d00a      	beq.n	8022b0a <AL_ControlInd+0x35e>
            {
                /*Stop APPL Mbx handler if the APPL start handler was called before*/
                if(!bApplEsmPending)
 8022af4:	4b08      	ldr	r3, [pc, #32]	; (8022b18 <AL_ControlInd+0x36c>)
 8022af6:	781b      	ldrb	r3, [r3, #0]
 8022af8:	f083 0301 	eor.w	r3, r3, #1
 8022afc:	b2db      	uxtb	r3, r3
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	d001      	beq.n	8022b06 <AL_ControlInd+0x35a>
                    APPL_StopMailboxHandler();
 8022b02:	f7fd fc57 	bl	80203b4 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 8022b06:	f001 f855 	bl	8023bb4 <MBX_StopMailboxHandler>
            }

            BL_Start( STATE_BOOT );
 8022b0a:	2003      	movs	r0, #3
 8022b0c:	f7fd fd5a 	bl	80205c4 <BL_Start>
            break;
 8022b10:	e126      	b.n	8022d60 <AL_ControlInd+0x5b4>
 8022b12:	bf00      	nop
 8022b14:	1ffea858 	.word	0x1ffea858
 8022b18:	1ffea824 	.word	0x1ffea824
 8022b1c:	1ffea825 	.word	0x1ffea825
 8022b20:	1ffea850 	.word	0x1ffea850
 8022b24:	1ffea826 	.word	0x1ffea826
 8022b28:	1ffea868 	.word	0x1ffea868
 8022b2c:	1ffea822 	.word	0x1ffea822
 8022b30:	1ffea85a 	.word	0x1ffea85a
 8022b34:	1ffeac72 	.word	0x1ffeac72

        case BOOT_2_INIT    :
            if(bBootMode)
 8022b38:	4baa      	ldr	r3, [pc, #680]	; (8022de4 <AL_ControlInd+0x638>)
 8022b3a:	781b      	ldrb	r3, [r3, #0]
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d00e      	beq.n	8022b5e <AL_ControlInd+0x3b2>
            {
                bBootMode = FALSE;
 8022b40:	4ba8      	ldr	r3, [pc, #672]	; (8022de4 <AL_ControlInd+0x638>)
 8022b42:	2200      	movs	r2, #0
 8022b44:	701a      	strb	r2, [r3, #0]
                CheckSmSettings(MAILBOX_READ+1);
 8022b46:	2002      	movs	r0, #2
 8022b48:	f7fe ff78 	bl	8021a3c <CheckSmSettings>
                /* disable all events in BOOT state */
/*ECATCHANGE_START(V5.11) HW1*/
                ResetALEventMask(0);
 8022b4c:	2000      	movs	r0, #0
 8022b4e:	f7fe feb7 	bl	80218c0 <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
                MBX_StopMailboxHandler();
 8022b52:	f001 f82f 	bl	8023bb4 <MBX_StopMailboxHandler>
                result = APPL_StopMailboxHandler();
 8022b56:	f7fd fc2d 	bl	80203b4 <APPL_StopMailboxHandler>
 8022b5a:	4603      	mov	r3, r0
 8022b5c:	81fb      	strh	r3, [r7, #14]
            }

            BackToInitTransition();
 8022b5e:	f7ff fdbb 	bl	80226d8 <BackToInitTransition>

            break;
 8022b62:	e0fd      	b.n	8022d60 <AL_ControlInd+0x5b4>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8022b64:	f7fe fedc 	bl	8021920 <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8022b68:	4b9f      	ldr	r3, [pc, #636]	; (8022de8 <AL_ControlInd+0x63c>)
 8022b6a:	781b      	ldrb	r3, [r3, #0]
 8022b6c:	f083 0301 	eor.w	r3, r3, #1
 8022b70:	b2db      	uxtb	r3, r3
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d001      	beq.n	8022b7a <AL_ControlInd+0x3ce>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 8022b76:	2351      	movs	r3, #81	; 0x51
 8022b78:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8022b7a:	89fb      	ldrh	r3, [r7, #14]
 8022b7c:	2b00      	cmp	r3, #0
 8022b7e:	d125      	bne.n	8022bcc <AL_ControlInd+0x420>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8022b80:	f000 ff9e 	bl	8023ac0 <MBX_StartMailboxHandler>
 8022b84:	4603      	mov	r3, r0
 8022b86:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8022b88:	89fb      	ldrh	r3, [r7, #14]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d10c      	bne.n	8022ba8 <AL_ControlInd+0x3fc>
            {
                bApplEsmPending = FALSE;
 8022b8e:	4b97      	ldr	r3, [pc, #604]	; (8022dec <AL_ControlInd+0x640>)
 8022b90:	2200      	movs	r2, #0
 8022b92:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 8022b94:	f7fd fc06 	bl	80203a4 <APPL_StartMailboxHandler>
 8022b98:	4603      	mov	r3, r0
 8022b9a:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8022b9c:	89fb      	ldrh	r3, [r7, #14]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	d102      	bne.n	8022ba8 <AL_ControlInd+0x3fc>
                {
                    bMbxRunning = TRUE;
 8022ba2:	4b93      	ldr	r3, [pc, #588]	; (8022df0 <AL_ControlInd+0x644>)
 8022ba4:	2201      	movs	r2, #1
 8022ba6:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8022ba8:	89fb      	ldrh	r3, [r7, #14]
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d00e      	beq.n	8022bcc <AL_ControlInd+0x420>
 8022bae:	89fb      	ldrh	r3, [r7, #14]
 8022bb0:	2bff      	cmp	r3, #255	; 0xff
 8022bb2:	d00b      	beq.n	8022bcc <AL_ControlInd+0x420>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                if(!bApplEsmPending)
 8022bb4:	4b8d      	ldr	r3, [pc, #564]	; (8022dec <AL_ControlInd+0x640>)
 8022bb6:	781b      	ldrb	r3, [r3, #0]
 8022bb8:	f083 0301 	eor.w	r3, r3, #1
 8022bbc:	b2db      	uxtb	r3, r3
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d001      	beq.n	8022bc6 <AL_ControlInd+0x41a>
                    APPL_StopMailboxHandler();
 8022bc2:	f7fd fbf7 	bl	80203b4 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 8022bc6:	f000 fff5 	bl	8023bb4 <MBX_StopMailboxHandler>
            }

            }
            break;
 8022bca:	e0c9      	b.n	8022d60 <AL_ControlInd+0x5b4>
 8022bcc:	e0c8      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 8022bce:	f7ff f915 	bl	8021dfc <StartInputHandler>
 8022bd2:	4603      	mov	r3, r0
 8022bd4:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 8022bd6:	89fb      	ldrh	r3, [r7, #14]
 8022bd8:	2b00      	cmp	r3, #0
 8022bda:	d112      	bne.n	8022c02 <AL_ControlInd+0x456>
            {
                bApplEsmPending = FALSE;
 8022bdc:	4b83      	ldr	r3, [pc, #524]	; (8022dec <AL_ControlInd+0x640>)
 8022bde:	2200      	movs	r2, #0
 8022be0:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 8022be2:	4884      	ldr	r0, [pc, #528]	; (8022df4 <AL_ControlInd+0x648>)
 8022be4:	f7fd fbee 	bl	80203c4 <APPL_StartInputHandler>
 8022be8:	4603      	mov	r3, r0
 8022bea:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8022bec:	89fb      	ldrh	r3, [r7, #14]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d107      	bne.n	8022c02 <AL_ControlInd+0x456>
                {
                    /* initialize the AL Event Mask register (0x204) */
/*ECATCHANGE_START(V5.11) HW1*/
                    SetALEventMask( u16ALEventMask );
 8022bf2:	4b80      	ldr	r3, [pc, #512]	; (8022df4 <AL_ControlInd+0x648>)
 8022bf4:	881b      	ldrh	r3, [r3, #0]
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f7fe fe7a 	bl	80218f0 <SetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/

                    bEcatInputUpdateRunning = TRUE;
 8022bfc:	4b7e      	ldr	r3, [pc, #504]	; (8022df8 <AL_ControlInd+0x64c>)
 8022bfe:	2201      	movs	r2, #1
 8022c00:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 8022c02:	89fb      	ldrh	r3, [r7, #14]
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d00e      	beq.n	8022c26 <AL_ControlInd+0x47a>
 8022c08:	89fb      	ldrh	r3, [r7, #14]
 8022c0a:	2bff      	cmp	r3, #255	; 0xff
 8022c0c:	d00b      	beq.n	8022c26 <AL_ControlInd+0x47a>
            {
                if(!bApplEsmPending)
 8022c0e:	4b77      	ldr	r3, [pc, #476]	; (8022dec <AL_ControlInd+0x640>)
 8022c10:	781b      	ldrb	r3, [r3, #0]
 8022c12:	f083 0301 	eor.w	r3, r3, #1
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d001      	beq.n	8022c20 <AL_ControlInd+0x474>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 8022c1c:	f7fd fbde 	bl	80203dc <APPL_StopInputHandler>
                }

                StopInputHandler();
 8022c20:	f7ff fcd6 	bl	80225d0 <StopInputHandler>
            }
            break;
 8022c24:	e09c      	b.n	8022d60 <AL_ControlInd+0x5b4>
 8022c26:	e09b      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8022c28:	f7ff fc9a 	bl	8022560 <StartOutputHandler>
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8022c30:	89fb      	ldrh	r3, [r7, #14]
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	d10c      	bne.n	8022c50 <AL_ControlInd+0x4a4>
            {
                bApplEsmPending = FALSE;
 8022c36:	4b6d      	ldr	r3, [pc, #436]	; (8022dec <AL_ControlInd+0x640>)
 8022c38:	2200      	movs	r2, #0
 8022c3a:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 8022c3c:	f7fd fbd6 	bl	80203ec <APPL_StartOutputHandler>
 8022c40:	4603      	mov	r3, r0
 8022c42:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8022c44:	89fb      	ldrh	r3, [r7, #14]
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	d102      	bne.n	8022c50 <AL_ControlInd+0x4a4>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 8022c4a:	4b6c      	ldr	r3, [pc, #432]	; (8022dfc <AL_ControlInd+0x650>)
 8022c4c:	2201      	movs	r2, #1
 8022c4e:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8022c50:	89fb      	ldrh	r3, [r7, #14]
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	d00e      	beq.n	8022c74 <AL_ControlInd+0x4c8>
 8022c56:	89fb      	ldrh	r3, [r7, #14]
 8022c58:	2bff      	cmp	r3, #255	; 0xff
 8022c5a:	d00b      	beq.n	8022c74 <AL_ControlInd+0x4c8>
            {
                if(!bApplEsmPending)
 8022c5c:	4b63      	ldr	r3, [pc, #396]	; (8022dec <AL_ControlInd+0x640>)
 8022c5e:	781b      	ldrb	r3, [r3, #0]
 8022c60:	f083 0301 	eor.w	r3, r3, #1
 8022c64:	b2db      	uxtb	r3, r3
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	d001      	beq.n	8022c6e <AL_ControlInd+0x4c2>
                    APPL_StopOutputHandler();
 8022c6a:	f7fd fbc7 	bl	80203fc <APPL_StopOutputHandler>

                StopOutputHandler();
 8022c6e:	f7ff fc9f 	bl	80225b0 <StopOutputHandler>
            }

            break;
 8022c72:	e075      	b.n	8022d60 <AL_ControlInd+0x5b4>
 8022c74:	e074      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8022c76:	f7fd fbc1 	bl	80203fc <APPL_StopOutputHandler>

            StopOutputHandler();
 8022c7a:	f7ff fc99 	bl	80225b0 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022c7e:	4b5b      	ldr	r3, [pc, #364]	; (8022dec <AL_ControlInd+0x640>)
 8022c80:	2200      	movs	r2, #0
 8022c82:	701a      	strb	r2, [r3, #0]

            break;
 8022c84:	e06c      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8022c86:	f7fd fbb9 	bl	80203fc <APPL_StopOutputHandler>
 8022c8a:	4603      	mov	r3, r0
 8022c8c:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8022c8e:	f7ff fc8f 	bl	80225b0 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022c92:	4b56      	ldr	r3, [pc, #344]	; (8022dec <AL_ControlInd+0x640>)
 8022c94:	2200      	movs	r2, #0
 8022c96:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022c98:	89fb      	ldrh	r3, [r7, #14]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d000      	beq.n	8022ca0 <AL_ControlInd+0x4f4>
                break;
 8022c9e:	e05f      	b.n	8022d60 <AL_ControlInd+0x5b4>

            stateTrans = SAFEOP_2_PREOP;
 8022ca0:	2342      	movs	r3, #66	; 0x42
 8022ca2:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8022ca4:	f7fd fb9a 	bl	80203dc <APPL_StopInputHandler>
           
            StopInputHandler();
 8022ca8:	f7ff fc92 	bl	80225d0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8022cac:	4b4f      	ldr	r3, [pc, #316]	; (8022dec <AL_ControlInd+0x640>)
 8022cae:	2200      	movs	r2, #0
 8022cb0:	701a      	strb	r2, [r3, #0]

            break;
 8022cb2:	e055      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8022cb4:	f7fd fba2 	bl	80203fc <APPL_StopOutputHandler>
 8022cb8:	4603      	mov	r3, r0
 8022cba:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8022cbc:	f7ff fc78 	bl	80225b0 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022cc0:	4b4a      	ldr	r3, [pc, #296]	; (8022dec <AL_ControlInd+0x640>)
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022cc6:	89fb      	ldrh	r3, [r7, #14]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d000      	beq.n	8022cce <AL_ControlInd+0x522>
                break;
 8022ccc:	e048      	b.n	8022d60 <AL_ControlInd+0x5b4>
            
            stateTrans = SAFEOP_2_INIT;
 8022cce:	2341      	movs	r3, #65	; 0x41
 8022cd0:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 8022cd2:	f7fd fb83 	bl	80203dc <APPL_StopInputHandler>
 8022cd6:	4603      	mov	r3, r0
 8022cd8:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 8022cda:	f7ff fc79 	bl	80225d0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8022cde:	4b43      	ldr	r3, [pc, #268]	; (8022dec <AL_ControlInd+0x640>)
 8022ce0:	2200      	movs	r2, #0
 8022ce2:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022ce4:	89fb      	ldrh	r3, [r7, #14]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d000      	beq.n	8022cec <AL_ControlInd+0x540>
                break;
 8022cea:	e039      	b.n	8022d60 <AL_ControlInd+0x5b4>
            stateTrans = PREOP_2_INIT;
 8022cec:	2321      	movs	r3, #33	; 0x21
 8022cee:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8022cf0:	f000 ff60 	bl	8023bb4 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 8022cf4:	f7fd fb5e 	bl	80203b4 <APPL_StopMailboxHandler>
 8022cf8:	4603      	mov	r3, r0
 8022cfa:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8022cfc:	f7ff fcec 	bl	80226d8 <BackToInitTransition>
            break;
 8022d00:	e02e      	b.n	8022d60 <AL_ControlInd+0x5b4>

        case INIT_2_INIT:
            BackToInitTransition();
 8022d02:	f7ff fce9 	bl	80226d8 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 8022d06:	7b7b      	ldrb	r3, [r7, #13]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d004      	beq.n	8022d16 <AL_ControlInd+0x56a>
                APPL_AckErrorInd(stateTrans);
 8022d0c:	7b3b      	ldrb	r3, [r7, #12]
 8022d0e:	b29b      	uxth	r3, r3
 8022d10:	4618      	mov	r0, r3
 8022d12:	f7fd fb3d 	bl	8020390 <APPL_AckErrorInd>

            if(!bLocalErrorFlag)
 8022d16:	4b3a      	ldr	r3, [pc, #232]	; (8022e00 <AL_ControlInd+0x654>)
 8022d18:	781b      	ldrb	r3, [r3, #0]
 8022d1a:	f083 0301 	eor.w	r3, r3, #1
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	d014      	beq.n	8022d4e <AL_ControlInd+0x5a2>
            {
                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8022d24:	4b37      	ldr	r3, [pc, #220]	; (8022e04 <AL_ControlInd+0x658>)
 8022d26:	781b      	ldrb	r3, [r3, #0]
 8022d28:	f003 030c 	and.w	r3, r3, #12
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d00e      	beq.n	8022d4e <AL_ControlInd+0x5a2>
                {
                    if(nPdOutputSize > 0)
 8022d30:	4b35      	ldr	r3, [pc, #212]	; (8022e08 <AL_ControlInd+0x65c>)
 8022d32:	881b      	ldrh	r3, [r3, #0]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d003      	beq.n	8022d40 <AL_ControlInd+0x594>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 8022d38:	2002      	movs	r0, #2
 8022d3a:	f7fe fe55 	bl	80219e8 <EnableSyncManChannel>
 8022d3e:	e006      	b.n	8022d4e <AL_ControlInd+0x5a2>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                    else 
                    if(nPdInputSize > 0)
 8022d40:	4b32      	ldr	r3, [pc, #200]	; (8022e0c <AL_ControlInd+0x660>)
 8022d42:	881b      	ldrh	r3, [r3, #0]
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	d002      	beq.n	8022d4e <AL_ControlInd+0x5a2>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8022d48:	2003      	movs	r0, #3
 8022d4a:	f7fe fe4d 	bl	80219e8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                }
            }
            result = NOERROR_NOSTATECHANGE;
 8022d4e:	23fe      	movs	r3, #254	; 0xfe
 8022d50:	81fb      	strh	r3, [r7, #14]
            break;
 8022d52:	e005      	b.n	8022d60 <AL_ControlInd+0x5b4>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8022d54:	2311      	movs	r3, #17
 8022d56:	81fb      	strh	r3, [r7, #14]
            break;
 8022d58:	e002      	b.n	8022d60 <AL_ControlInd+0x5b4>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 8022d5a:	2312      	movs	r3, #18
 8022d5c:	81fb      	strh	r3, [r7, #14]
            break;
 8022d5e:	bf00      	nop
 8022d60:	e01e      	b.n	8022da0 <AL_ControlInd+0x5f4>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8022d62:	4b28      	ldr	r3, [pc, #160]	; (8022e04 <AL_ControlInd+0x658>)
 8022d64:	781b      	ldrb	r3, [r3, #0]
 8022d66:	2b04      	cmp	r3, #4
 8022d68:	d008      	beq.n	8022d7c <AL_ControlInd+0x5d0>
 8022d6a:	2b08      	cmp	r3, #8
 8022d6c:	d002      	beq.n	8022d74 <AL_ControlInd+0x5c8>
 8022d6e:	2b02      	cmp	r3, #2
 8022d70:	d008      	beq.n	8022d84 <AL_ControlInd+0x5d8>
 8022d72:	e015      	b.n	8022da0 <AL_ControlInd+0x5f4>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8022d74:	f7fd fb42 	bl	80203fc <APPL_StopOutputHandler>
            StopOutputHandler();
 8022d78:	f7ff fc1a 	bl	80225b0 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8022d7c:	f7fd fb2e 	bl	80203dc <APPL_StopInputHandler>

            StopInputHandler();
 8022d80:	f7ff fc26 	bl	80225d0 <StopInputHandler>

        case STATE_PREOP:

            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8022d84:	89fb      	ldrh	r3, [r7, #14]
 8022d86:	2b16      	cmp	r3, #22
 8022d88:	d107      	bne.n	8022d9a <AL_ControlInd+0x5ee>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 8022d8a:	f000 ff13 	bl	8023bb4 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8022d8e:	f7fd fb11 	bl	80203b4 <APPL_StopMailboxHandler>

                nAlStatus = STATE_INIT;
 8022d92:	4b1c      	ldr	r3, [pc, #112]	; (8022e04 <AL_ControlInd+0x658>)
 8022d94:	2201      	movs	r2, #1
 8022d96:	701a      	strb	r2, [r3, #0]
 8022d98:	e002      	b.n	8022da0 <AL_ControlInd+0x5f4>
            }
            else
                nAlStatus = STATE_PREOP;
 8022d9a:	4b1a      	ldr	r3, [pc, #104]	; (8022e04 <AL_ControlInd+0x658>)
 8022d9c:	2202      	movs	r2, #2
 8022d9e:	701a      	strb	r2, [r3, #0]
        }
    }

    if ( result == NOERROR_INWORK )
 8022da0:	89fb      	ldrh	r3, [r7, #14]
 8022da2:	2bff      	cmp	r3, #255	; 0xff
 8022da4:	d147      	bne.n	8022e36 <AL_ControlInd+0x68a>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 8022da6:	4b1a      	ldr	r3, [pc, #104]	; (8022e10 <AL_ControlInd+0x664>)
 8022da8:	2201      	movs	r2, #1
 8022daa:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 8022dac:	7b3b      	ldrb	r3, [r7, #12]
 8022dae:	b29a      	uxth	r2, r3
 8022db0:	4b18      	ldr	r3, [pc, #96]	; (8022e14 <AL_ControlInd+0x668>)
 8022db2:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 8022db4:	4b17      	ldr	r3, [pc, #92]	; (8022e14 <AL_ControlInd+0x668>)
 8022db6:	881b      	ldrh	r3, [r3, #0]
 8022db8:	2b24      	cmp	r3, #36	; 0x24
 8022dba:	d00d      	beq.n	8022dd8 <AL_ControlInd+0x62c>
 8022dbc:	2b24      	cmp	r3, #36	; 0x24
 8022dbe:	dc03      	bgt.n	8022dc8 <AL_ControlInd+0x61c>
 8022dc0:	3b12      	subs	r3, #18
 8022dc2:	2b01      	cmp	r3, #1
 8022dc4:	d82a      	bhi.n	8022e1c <AL_ControlInd+0x670>
 8022dc6:	e002      	b.n	8022dce <AL_ControlInd+0x622>
 8022dc8:	2b48      	cmp	r3, #72	; 0x48
 8022dca:	d005      	beq.n	8022dd8 <AL_ControlInd+0x62c>
 8022dcc:	e026      	b.n	8022e1c <AL_ControlInd+0x670>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 8022dce:	4b12      	ldr	r3, [pc, #72]	; (8022e18 <AL_ControlInd+0x66c>)
 8022dd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8022dd4:	801a      	strh	r2, [r3, #0]
            break;
 8022dd6:	e025      	b.n	8022e24 <AL_ControlInd+0x678>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 8022dd8:	4b0f      	ldr	r3, [pc, #60]	; (8022e18 <AL_ControlInd+0x66c>)
 8022dda:	f242 3228 	movw	r2, #9000	; 0x2328
 8022dde:	801a      	strh	r2, [r3, #0]
                break;
 8022de0:	e020      	b.n	8022e24 <AL_ControlInd+0x678>
 8022de2:	bf00      	nop
 8022de4:	1ffea85a 	.word	0x1ffea85a
 8022de8:	1ffe9522 	.word	0x1ffe9522
 8022dec:	1ffea824 	.word	0x1ffea824
 8022df0:	1ffeac72 	.word	0x1ffeac72
 8022df4:	1ffea83e 	.word	0x1ffea83e
 8022df8:	1ffea862 	.word	0x1ffea862
 8022dfc:	1ffea85c 	.word	0x1ffea85c
 8022e00:	1ffea82c 	.word	0x1ffea82c
 8022e04:	1ffea825 	.word	0x1ffea825
 8022e08:	1ffea826 	.word	0x1ffea826
 8022e0c:	1ffea850 	.word	0x1ffea850
 8022e10:	1ffea84e 	.word	0x1ffea84e
 8022e14:	1ffea822 	.word	0x1ffea822
 8022e18:	1ffea858 	.word	0x1ffea858
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 8022e1c:	4b37      	ldr	r3, [pc, #220]	; (8022efc <AL_ControlInd+0x750>)
 8022e1e:	22c8      	movs	r2, #200	; 0xc8
 8022e20:	801a      	strh	r2, [r3, #0]
                break;
 8022e22:	bf00      	nop
        }
        EsmTimeoutCounter -= 50; //subtract 50ms from the timeout to react before the master runs into a timeout.
 8022e24:	4b35      	ldr	r3, [pc, #212]	; (8022efc <AL_ControlInd+0x750>)
 8022e26:	881b      	ldrh	r3, [r3, #0]
 8022e28:	b29b      	uxth	r3, r3
 8022e2a:	3b32      	subs	r3, #50	; 0x32
 8022e2c:	b29b      	uxth	r3, r3
 8022e2e:	b29a      	uxth	r2, r3
 8022e30:	4b32      	ldr	r3, [pc, #200]	; (8022efc <AL_ControlInd+0x750>)
 8022e32:	801a      	strh	r2, [r3, #0]
 8022e34:	e05e      	b.n	8022ef4 <AL_ControlInd+0x748>

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8022e36:	79fa      	ldrb	r2, [r7, #7]
 8022e38:	4b31      	ldr	r3, [pc, #196]	; (8022f00 <AL_ControlInd+0x754>)
 8022e3a:	781b      	ldrb	r3, [r3, #0]
 8022e3c:	f003 030f 	and.w	r3, r3, #15
 8022e40:	429a      	cmp	r2, r3
 8022e42:	d04e      	beq.n	8022ee2 <AL_ControlInd+0x736>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 8022e44:	89fb      	ldrh	r3, [r7, #14]
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d102      	bne.n	8022e50 <AL_ControlInd+0x6a4>
 8022e4a:	88bb      	ldrh	r3, [r7, #4]
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	d01f      	beq.n	8022e90 <AL_ControlInd+0x6e4>
 8022e50:	4b2b      	ldr	r3, [pc, #172]	; (8022f00 <AL_ControlInd+0x754>)
 8022e52:	781a      	ldrb	r2, [r3, #0]
 8022e54:	79fb      	ldrb	r3, [r7, #7]
 8022e56:	4313      	orrs	r3, r2
 8022e58:	b2db      	uxtb	r3, r3
 8022e5a:	f003 0308 	and.w	r3, r3, #8
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d016      	beq.n	8022e90 <AL_ControlInd+0x6e4>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 8022e62:	4b28      	ldr	r3, [pc, #160]	; (8022f04 <AL_ControlInd+0x758>)
 8022e64:	781b      	ldrb	r3, [r3, #0]
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d003      	beq.n	8022e72 <AL_ControlInd+0x6c6>
            {
                APPL_StopOutputHandler();
 8022e6a:	f7fd fac7 	bl	80203fc <APPL_StopOutputHandler>

                StopOutputHandler();
 8022e6e:	f7ff fb9f 	bl	80225b0 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 8022e72:	4b25      	ldr	r3, [pc, #148]	; (8022f08 <AL_ControlInd+0x75c>)
 8022e74:	881b      	ldrh	r3, [r3, #0]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d003      	beq.n	8022e82 <AL_ControlInd+0x6d6>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8022e7a:	2002      	movs	r0, #2
 8022e7c:	f7fe fd8a 	bl	8021994 <DisableSyncManChannel>
 8022e80:	e006      	b.n	8022e90 <AL_ControlInd+0x6e4>
/*ECATCHANGE_END(V5.11) HW1*/
            }
            else
                if(nPdInputSize > 0)
 8022e82:	4b22      	ldr	r3, [pc, #136]	; (8022f0c <AL_ControlInd+0x760>)
 8022e84:	881b      	ldrh	r3, [r3, #0]
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d002      	beq.n	8022e90 <AL_ControlInd+0x6e4>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8022e8a:	2003      	movs	r0, #3
 8022e8c:	f7fe fd82 	bl	8021994 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
            }

        }
        if ( result != 0 )
 8022e90:	89fb      	ldrh	r3, [r7, #14]
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	d00e      	beq.n	8022eb4 <AL_ControlInd+0x708>
        {
            if ( nAlStatus == STATE_OP )
 8022e96:	4b1a      	ldr	r3, [pc, #104]	; (8022f00 <AL_ControlInd+0x754>)
 8022e98:	781b      	ldrb	r3, [r3, #0]
 8022e9a:	2b08      	cmp	r3, #8
 8022e9c:	d102      	bne.n	8022ea4 <AL_ControlInd+0x6f8>
                nAlStatus = STATE_SAFEOP;
 8022e9e:	4b18      	ldr	r3, [pc, #96]	; (8022f00 <AL_ControlInd+0x754>)
 8022ea0:	2204      	movs	r2, #4
 8022ea2:	701a      	strb	r2, [r3, #0]
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 8022ea4:	4b16      	ldr	r3, [pc, #88]	; (8022f00 <AL_ControlInd+0x754>)
 8022ea6:	781b      	ldrb	r3, [r3, #0]
 8022ea8:	f043 0310 	orr.w	r3, r3, #16
 8022eac:	b2da      	uxtb	r2, r3
 8022eae:	4b14      	ldr	r3, [pc, #80]	; (8022f00 <AL_ControlInd+0x754>)
 8022eb0:	701a      	strb	r2, [r3, #0]
 8022eb2:	e00b      	b.n	8022ecc <AL_ControlInd+0x720>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 8022eb4:	88bb      	ldrh	r3, [r7, #4]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d005      	beq.n	8022ec6 <AL_ControlInd+0x71a>
            {
                /* state change request from the user */
                result = alStatusCode;
 8022eba:	88bb      	ldrh	r3, [r7, #4]
 8022ebc:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 8022ebe:	79fb      	ldrb	r3, [r7, #7]
 8022ec0:	f043 0310 	orr.w	r3, r3, #16
 8022ec4:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 8022ec6:	4a0e      	ldr	r2, [pc, #56]	; (8022f00 <AL_ControlInd+0x754>)
 8022ec8:	79fb      	ldrb	r3, [r7, #7]
 8022eca:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8022ecc:	4b10      	ldr	r3, [pc, #64]	; (8022f10 <AL_ControlInd+0x764>)
 8022ece:	2200      	movs	r2, #0
 8022ed0:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 8022ed2:	4b0b      	ldr	r3, [pc, #44]	; (8022f00 <AL_ControlInd+0x754>)
 8022ed4:	781a      	ldrb	r2, [r3, #0]
 8022ed6:	89fb      	ldrh	r3, [r7, #14]
 8022ed8:	4610      	mov	r0, r2
 8022eda:	4619      	mov	r1, r3
 8022edc:	f7ff fc08 	bl	80226f0 <SetALStatus>
 8022ee0:	e008      	b.n	8022ef4 <AL_ControlInd+0x748>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 8022ee2:	4b0b      	ldr	r3, [pc, #44]	; (8022f10 <AL_ControlInd+0x764>)
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 8022ee8:	4b05      	ldr	r3, [pc, #20]	; (8022f00 <AL_ControlInd+0x754>)
 8022eea:	781b      	ldrb	r3, [r3, #0]
 8022eec:	4618      	mov	r0, r3
 8022eee:	2100      	movs	r1, #0
 8022ef0:	f7ff fbfe 	bl	80226f0 <SetALStatus>
    }

}
 8022ef4:	3710      	adds	r7, #16
 8022ef6:	46bd      	mov	sp, r7
 8022ef8:	bd80      	pop	{r7, pc}
 8022efa:	bf00      	nop
 8022efc:	1ffea858 	.word	0x1ffea858
 8022f00:	1ffea825 	.word	0x1ffea825
 8022f04:	1ffea85c 	.word	0x1ffea85c
 8022f08:	1ffea826 	.word	0x1ffea826
 8022f0c:	1ffea850 	.word	0x1ffea850
 8022f10:	1ffea84e 	.word	0x1ffea84e

08022f14 <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 8022f14:	b580      	push	{r7, lr}
 8022f16:	b082      	sub	sp, #8
 8022f18:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8022f1a:	4b9e      	ldr	r3, [pc, #632]	; (8023194 <AL_ControlRes+0x280>)
 8022f1c:	781b      	ldrb	r3, [r3, #0]
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	f000 8135 	beq.w	802318e <AL_ControlRes+0x27a>
    {
        UINT16 result = 0;
 8022f24:	2300      	movs	r3, #0
 8022f26:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8022f28:	2300      	movs	r3, #0
 8022f2a:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8022f2c:	2300      	movs	r3, #0
 8022f2e:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8022f30:	4b99      	ldr	r3, [pc, #612]	; (8023198 <AL_ControlRes+0x284>)
 8022f32:	881b      	ldrh	r3, [r3, #0]
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d17c      	bne.n	8023032 <AL_ControlRes+0x11e>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8022f38:	4b98      	ldr	r3, [pc, #608]	; (802319c <AL_ControlRes+0x288>)
 8022f3a:	881b      	ldrh	r3, [r3, #0]
 8022f3c:	091b      	lsrs	r3, r3, #4
 8022f3e:	b29b      	uxth	r3, r3
 8022f40:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 8022f42:	4b96      	ldr	r3, [pc, #600]	; (802319c <AL_ControlRes+0x288>)
 8022f44:	881b      	ldrh	r3, [r3, #0]
 8022f46:	2b24      	cmp	r3, #36	; 0x24
 8022f48:	d01f      	beq.n	8022f8a <AL_ControlRes+0x76>
 8022f4a:	2b24      	cmp	r3, #36	; 0x24
 8022f4c:	dc04      	bgt.n	8022f58 <AL_ControlRes+0x44>
 8022f4e:	3b12      	subs	r3, #18
 8022f50:	2b01      	cmp	r3, #1
 8022f52:	f200 8109 	bhi.w	8023168 <AL_ControlRes+0x254>
 8022f56:	e002      	b.n	8022f5e <AL_ControlRes+0x4a>
 8022f58:	2b48      	cmp	r3, #72	; 0x48
 8022f5a:	d02c      	beq.n	8022fb6 <AL_ControlRes+0xa2>
 8022f5c:	e104      	b.n	8023168 <AL_ControlRes+0x254>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                    if(!bApplEsmPending)
 8022f5e:	4b90      	ldr	r3, [pc, #576]	; (80231a0 <AL_ControlRes+0x28c>)
 8022f60:	781b      	ldrb	r3, [r3, #0]
 8022f62:	f083 0301 	eor.w	r3, r3, #1
 8022f66:	b2db      	uxtb	r3, r3
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	d001      	beq.n	8022f70 <AL_ControlRes+0x5c>
                        APPL_StopMailboxHandler();
 8022f6c:	f7fd fa22 	bl	80203b4 <APPL_StopMailboxHandler>

                    MBX_StopMailboxHandler();
 8022f70:	f000 fe20 	bl	8023bb4 <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 8022f74:	4b8b      	ldr	r3, [pc, #556]	; (80231a4 <AL_ControlRes+0x290>)
 8022f76:	781b      	ldrb	r3, [r3, #0]
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	d003      	beq.n	8022f84 <AL_ControlRes+0x70>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8022f7c:	4b8a      	ldr	r3, [pc, #552]	; (80231a8 <AL_ControlRes+0x294>)
 8022f7e:	881b      	ldrh	r3, [r3, #0]
 8022f80:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022f82:	e055      	b.n	8023030 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022f84:	2301      	movs	r3, #1
 8022f86:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8022f88:	e052      	b.n	8023030 <AL_ControlRes+0x11c>
                case PREOP_2_SAFEOP:
                    if(!bApplEsmPending)
 8022f8a:	4b85      	ldr	r3, [pc, #532]	; (80231a0 <AL_ControlRes+0x28c>)
 8022f8c:	781b      	ldrb	r3, [r3, #0]
 8022f8e:	f083 0301 	eor.w	r3, r3, #1
 8022f92:	b2db      	uxtb	r3, r3
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	d001      	beq.n	8022f9c <AL_ControlRes+0x88>
                        APPL_StopInputHandler();
 8022f98:	f7fd fa20 	bl	80203dc <APPL_StopInputHandler>

                    StopInputHandler();
 8022f9c:	f7ff fb18 	bl	80225d0 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 8022fa0:	4b80      	ldr	r3, [pc, #512]	; (80231a4 <AL_ControlRes+0x290>)
 8022fa2:	781b      	ldrb	r3, [r3, #0]
 8022fa4:	2b00      	cmp	r3, #0
 8022fa6:	d003      	beq.n	8022fb0 <AL_ControlRes+0x9c>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8022fa8:	4b7f      	ldr	r3, [pc, #508]	; (80231a8 <AL_ControlRes+0x294>)
 8022faa:	881b      	ldrh	r3, [r3, #0]
 8022fac:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022fae:	e03f      	b.n	8023030 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022fb0:	2301      	movs	r3, #1
 8022fb2:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8022fb4:	e03c      	b.n	8023030 <AL_ControlRes+0x11c>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 8022fb6:	4b7d      	ldr	r3, [pc, #500]	; (80231ac <AL_ControlRes+0x298>)
 8022fb8:	781b      	ldrb	r3, [r3, #0]
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d01a      	beq.n	8022ff4 <AL_ControlRes+0xe0>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 8022fbe:	4b7c      	ldr	r3, [pc, #496]	; (80231b0 <AL_ControlRes+0x29c>)
 8022fc0:	781b      	ldrb	r3, [r3, #0]
 8022fc2:	f083 0301 	eor.w	r3, r3, #1
 8022fc6:	b2db      	uxtb	r3, r3
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	d002      	beq.n	8022fd2 <AL_ControlRes+0xbe>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8022fcc:	232d      	movs	r3, #45	; 0x2d
 8022fce:	80bb      	strh	r3, [r7, #4]
 8022fd0:	e01e      	b.n	8023010 <AL_ControlRes+0xfc>
                        }
/*ECATCHANGE_START(V5.11) ECAT4*/
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 8022fd2:	4b78      	ldr	r3, [pc, #480]	; (80231b4 <AL_ControlRes+0x2a0>)
 8022fd4:	781b      	ldrb	r3, [r3, #0]
 8022fd6:	f083 0301 	eor.w	r3, r3, #1
 8022fda:	b2db      	uxtb	r3, r3
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d006      	beq.n	8022fee <AL_ControlRes+0xda>
 8022fe0:	4b75      	ldr	r3, [pc, #468]	; (80231b8 <AL_ControlRes+0x2a4>)
 8022fe2:	881b      	ldrh	r3, [r3, #0]
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	d002      	beq.n	8022fee <AL_ControlRes+0xda>
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8022fe8:	231b      	movs	r3, #27
 8022fea:	80bb      	strh	r3, [r7, #4]
 8022fec:	e010      	b.n	8023010 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 8022fee:	231a      	movs	r3, #26
 8022ff0:	80bb      	strh	r3, [r7, #4]
 8022ff2:	e00d      	b.n	8023010 <AL_ControlRes+0xfc>
                        }
                    }
                    else
                    {
/*ECATCHANGE_START(V5.11) ECAT4*/
                        if (nPdOutputSize > 0)
 8022ff4:	4b70      	ldr	r3, [pc, #448]	; (80231b8 <AL_ControlRes+0x2a4>)
 8022ff6:	881b      	ldrh	r3, [r3, #0]
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d002      	beq.n	8023002 <AL_ControlRes+0xee>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8022ffc:	231b      	movs	r3, #27
 8022ffe:	80bb      	strh	r3, [r7, #4]
 8023000:	e006      	b.n	8023010 <AL_ControlRes+0xfc>
                        }
                        else
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 8023002:	2308      	movs	r3, #8
 8023004:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 8023006:	2300      	movs	r3, #0
 8023008:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 802300a:	4b6c      	ldr	r3, [pc, #432]	; (80231bc <AL_ControlRes+0x2a8>)
 802300c:	2201      	movs	r2, #1
 802300e:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8023010:	88bb      	ldrh	r3, [r7, #4]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d00b      	beq.n	802302e <AL_ControlRes+0x11a>
                    {
                        if(!bApplEsmPending)
 8023016:	4b62      	ldr	r3, [pc, #392]	; (80231a0 <AL_ControlRes+0x28c>)
 8023018:	781b      	ldrb	r3, [r3, #0]
 802301a:	f083 0301 	eor.w	r3, r3, #1
 802301e:	b2db      	uxtb	r3, r3
 8023020:	2b00      	cmp	r3, #0
 8023022:	d001      	beq.n	8023028 <AL_ControlRes+0x114>
                            APPL_StopOutputHandler();
 8023024:	f7fd f9ea 	bl	80203fc <APPL_StopOutputHandler>

                        StopOutputHandler();
 8023028:	f7ff fac2 	bl	80225b0 <StopOutputHandler>
                    }
                break;
 802302c:	e7ff      	b.n	802302e <AL_ControlRes+0x11a>
 802302e:	bf00      	nop
 8023030:	e09a      	b.n	8023168 <AL_ControlRes+0x254>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8023032:	4b5a      	ldr	r3, [pc, #360]	; (802319c <AL_ControlRes+0x288>)
 8023034:	881b      	ldrh	r3, [r3, #0]
 8023036:	2b24      	cmp	r3, #36	; 0x24
 8023038:	d02a      	beq.n	8023090 <AL_ControlRes+0x17c>
 802303a:	2b24      	cmp	r3, #36	; 0x24
 802303c:	dc04      	bgt.n	8023048 <AL_ControlRes+0x134>
 802303e:	3b12      	subs	r3, #18
 8023040:	2b01      	cmp	r3, #1
 8023042:	f200 8091 	bhi.w	8023168 <AL_ControlRes+0x254>
 8023046:	e002      	b.n	802304e <AL_ControlRes+0x13a>
 8023048:	2b48      	cmp	r3, #72	; 0x48
 802304a:	d03f      	beq.n	80230cc <AL_ControlRes+0x1b8>
 802304c:	e08c      	b.n	8023168 <AL_ControlRes+0x254>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 802304e:	4b54      	ldr	r3, [pc, #336]	; (80231a0 <AL_ControlRes+0x28c>)
 8023050:	781b      	ldrb	r3, [r3, #0]
 8023052:	2b00      	cmp	r3, #0
 8023054:	d01b      	beq.n	802308e <AL_ControlRes+0x17a>
                    {
                        bApplEsmPending = FALSE;
 8023056:	4b52      	ldr	r3, [pc, #328]	; (80231a0 <AL_ControlRes+0x28c>)
 8023058:	2200      	movs	r2, #0
 802305a:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 802305c:	f7fd f9a2 	bl	80203a4 <APPL_StartMailboxHandler>
 8023060:	4603      	mov	r3, r0
 8023062:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8023064:	887b      	ldrh	r3, [r7, #2]
 8023066:	2b00      	cmp	r3, #0
 8023068:	d109      	bne.n	802307e <AL_ControlRes+0x16a>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 802306a:	4b55      	ldr	r3, [pc, #340]	; (80231c0 <AL_ControlRes+0x2ac>)
 802306c:	2201      	movs	r2, #1
 802306e:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8023070:	4b4a      	ldr	r3, [pc, #296]	; (802319c <AL_ControlRes+0x288>)
 8023072:	881b      	ldrh	r3, [r3, #0]
 8023074:	b2db      	uxtb	r3, r3
 8023076:	f003 030f 	and.w	r3, r3, #15
 802307a:	71fb      	strb	r3, [r7, #7]
 802307c:	e007      	b.n	802308e <AL_ControlRes+0x17a>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 802307e:	887b      	ldrh	r3, [r7, #2]
 8023080:	2bff      	cmp	r3, #255	; 0xff
 8023082:	d004      	beq.n	802308e <AL_ControlRes+0x17a>
                            {
                                APPL_StopMailboxHandler();
 8023084:	f7fd f996 	bl	80203b4 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8023088:	f000 fd94 	bl	8023bb4 <MBX_StopMailboxHandler>
                            }
                        }
                    }
                break;
 802308c:	e06c      	b.n	8023168 <AL_ControlRes+0x254>
 802308e:	e06b      	b.n	8023168 <AL_ControlRes+0x254>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8023090:	4b43      	ldr	r3, [pc, #268]	; (80231a0 <AL_ControlRes+0x28c>)
 8023092:	781b      	ldrb	r3, [r3, #0]
 8023094:	2b00      	cmp	r3, #0
 8023096:	d018      	beq.n	80230ca <AL_ControlRes+0x1b6>
                    {
                        bApplEsmPending = FALSE;
 8023098:	4b41      	ldr	r3, [pc, #260]	; (80231a0 <AL_ControlRes+0x28c>)
 802309a:	2200      	movs	r2, #0
 802309c:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 802309e:	4849      	ldr	r0, [pc, #292]	; (80231c4 <AL_ControlRes+0x2b0>)
 80230a0:	f7fd f990 	bl	80203c4 <APPL_StartInputHandler>
 80230a4:	4603      	mov	r3, r0
 80230a6:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 80230a8:	887b      	ldrh	r3, [r7, #2]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d105      	bne.n	80230ba <AL_ControlRes+0x1a6>
                        {
                            bEcatInputUpdateRunning = TRUE;
 80230ae:	4b46      	ldr	r3, [pc, #280]	; (80231c8 <AL_ControlRes+0x2b4>)
 80230b0:	2201      	movs	r2, #1
 80230b2:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 80230b4:	2304      	movs	r3, #4
 80230b6:	71fb      	strb	r3, [r7, #7]
 80230b8:	e007      	b.n	80230ca <AL_ControlRes+0x1b6>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 80230ba:	887b      	ldrh	r3, [r7, #2]
 80230bc:	2bff      	cmp	r3, #255	; 0xff
 80230be:	d004      	beq.n	80230ca <AL_ControlRes+0x1b6>
                            {
                                APPL_StopInputHandler();
 80230c0:	f7fd f98c 	bl	80203dc <APPL_StopInputHandler>
                                StopInputHandler();
 80230c4:	f7ff fa84 	bl	80225d0 <StopInputHandler>
                            }
                        }
                    }
                break;
 80230c8:	e04e      	b.n	8023168 <AL_ControlRes+0x254>
 80230ca:	e04d      	b.n	8023168 <AL_ControlRes+0x254>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 80230cc:	4b34      	ldr	r3, [pc, #208]	; (80231a0 <AL_ControlRes+0x28c>)
 80230ce:	781b      	ldrb	r3, [r3, #0]
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d048      	beq.n	8023166 <AL_ControlRes+0x252>
                    {
                        if(bDcSyncActive)
 80230d4:	4b35      	ldr	r3, [pc, #212]	; (80231ac <AL_ControlRes+0x298>)
 80230d6:	781b      	ldrb	r3, [r3, #0]
 80230d8:	2b00      	cmp	r3, #0
 80230da:	d027      	beq.n	802312c <AL_ControlRes+0x218>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 80230dc:	4b3b      	ldr	r3, [pc, #236]	; (80231cc <AL_ControlRes+0x2b8>)
 80230de:	881b      	ldrh	r3, [r3, #0]
 80230e0:	b21b      	sxth	r3, r3
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	dd3f      	ble.n	8023166 <AL_ControlRes+0x252>
 80230e6:	4b39      	ldr	r3, [pc, #228]	; (80231cc <AL_ControlRes+0x2b8>)
 80230e8:	881a      	ldrh	r2, [r3, #0]
 80230ea:	4b39      	ldr	r3, [pc, #228]	; (80231d0 <AL_ControlRes+0x2bc>)
 80230ec:	881b      	ldrh	r3, [r3, #0]
 80230ee:	b212      	sxth	r2, r2
 80230f0:	b21b      	sxth	r3, r3
 80230f2:	429a      	cmp	r2, r3
 80230f4:	dc37      	bgt.n	8023166 <AL_ControlRes+0x252>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 80230f6:	4b35      	ldr	r3, [pc, #212]	; (80231cc <AL_ControlRes+0x2b8>)
 80230f8:	2200      	movs	r2, #0
 80230fa:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 80230fc:	4b34      	ldr	r3, [pc, #208]	; (80231d0 <AL_ControlRes+0x2bc>)
 80230fe:	2200      	movs	r2, #0
 8023100:	801a      	strh	r2, [r3, #0]

                                result = APPL_StartOutputHandler();
 8023102:	f7fd f973 	bl	80203ec <APPL_StartOutputHandler>
 8023106:	4603      	mov	r3, r0
 8023108:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 802310a:	887b      	ldrh	r3, [r7, #2]
 802310c:	2b00      	cmp	r3, #0
 802310e:	d105      	bne.n	802311c <AL_ControlRes+0x208>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8023110:	4b2a      	ldr	r3, [pc, #168]	; (80231bc <AL_ControlRes+0x2a8>)
 8023112:	2201      	movs	r2, #1
 8023114:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8023116:	2308      	movs	r3, #8
 8023118:	71fb      	strb	r3, [r7, #7]
 802311a:	e024      	b.n	8023166 <AL_ControlRes+0x252>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 802311c:	887b      	ldrh	r3, [r7, #2]
 802311e:	2bff      	cmp	r3, #255	; 0xff
 8023120:	d021      	beq.n	8023166 <AL_ControlRes+0x252>
                                    {
                                        APPL_StopOutputHandler();
 8023122:	f7fd f96b 	bl	80203fc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8023126:	f7ff fa43 	bl	80225b0 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 802312a:	e01c      	b.n	8023166 <AL_ControlRes+0x252>
                                }
                            }
                        }
                        else
                        {
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 802312c:	4b22      	ldr	r3, [pc, #136]	; (80231b8 <AL_ControlRes+0x2a4>)
 802312e:	881b      	ldrh	r3, [r3, #0]
 8023130:	2b00      	cmp	r3, #0
 8023132:	d003      	beq.n	802313c <AL_ControlRes+0x228>
 8023134:	4b1f      	ldr	r3, [pc, #124]	; (80231b4 <AL_ControlRes+0x2a0>)
 8023136:	781b      	ldrb	r3, [r3, #0]
 8023138:	2b00      	cmp	r3, #0
 802313a:	d014      	beq.n	8023166 <AL_ControlRes+0x252>
                            {
                                result = APPL_StartOutputHandler();
 802313c:	f7fd f956 	bl	80203ec <APPL_StartOutputHandler>
 8023140:	4603      	mov	r3, r0
 8023142:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8023144:	887b      	ldrh	r3, [r7, #2]
 8023146:	2b00      	cmp	r3, #0
 8023148:	d105      	bne.n	8023156 <AL_ControlRes+0x242>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 802314a:	4b1c      	ldr	r3, [pc, #112]	; (80231bc <AL_ControlRes+0x2a8>)
 802314c:	2201      	movs	r2, #1
 802314e:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8023150:	2308      	movs	r3, #8
 8023152:	71fb      	strb	r3, [r7, #7]
 8023154:	e007      	b.n	8023166 <AL_ControlRes+0x252>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8023156:	887b      	ldrh	r3, [r7, #2]
 8023158:	2bff      	cmp	r3, #255	; 0xff
 802315a:	d004      	beq.n	8023166 <AL_ControlRes+0x252>
                                    {
                                        APPL_StopOutputHandler();
 802315c:	f7fd f94e 	bl	80203fc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8023160:	f7ff fa26 	bl	80225b0 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8023164:	e7ff      	b.n	8023166 <AL_ControlRes+0x252>
 8023166:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8023168:	79fb      	ldrb	r3, [r7, #7]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d00f      	beq.n	802318e <AL_ControlRes+0x27a>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 802316e:	4b09      	ldr	r3, [pc, #36]	; (8023194 <AL_ControlRes+0x280>)
 8023170:	2200      	movs	r2, #0
 8023172:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8023174:	88bb      	ldrh	r3, [r7, #4]
 8023176:	2b00      	cmp	r3, #0
 8023178:	d003      	beq.n	8023182 <AL_ControlRes+0x26e>
            {
                Status |= STATE_CHANGE;
 802317a:	79fb      	ldrb	r3, [r7, #7]
 802317c:	f043 0310 	orr.w	r3, r3, #16
 8023180:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8023182:	79fa      	ldrb	r2, [r7, #7]
 8023184:	88bb      	ldrh	r3, [r7, #4]
 8023186:	4610      	mov	r0, r2
 8023188:	4619      	mov	r1, r3
 802318a:	f7ff fab1 	bl	80226f0 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 802318e:	3708      	adds	r7, #8
 8023190:	46bd      	mov	sp, r7
 8023192:	bd80      	pop	{r7, pc}
 8023194:	1ffea84e 	.word	0x1ffea84e
 8023198:	1ffea858 	.word	0x1ffea858
 802319c:	1ffea822 	.word	0x1ffea822
 80231a0:	1ffea824 	.word	0x1ffea824
 80231a4:	1ffea82c 	.word	0x1ffea82c
 80231a8:	1ffea828 	.word	0x1ffea828
 80231ac:	1ffea85b 	.word	0x1ffea85b
 80231b0:	1ffea840 	.word	0x1ffea840
 80231b4:	1ffea856 	.word	0x1ffea856
 80231b8:	1ffea826 	.word	0x1ffea826
 80231bc:	1ffea85c 	.word	0x1ffea85c
 80231c0:	1ffeac72 	.word	0x1ffeac72
 80231c4:	1ffea83e 	.word	0x1ffea83e
 80231c8:	1ffea862 	.word	0x1ffea862
 80231cc:	1ffea838 	.word	0x1ffea838
 80231d0:	1ffea830 	.word	0x1ffea830

080231d4 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 80231d4:	b580      	push	{r7, lr}
 80231d6:	af00      	add	r7, sp, #0
    DISABLE_ESC_INT();
 80231d8:	f7fe fb6c 	bl	80218b4 <DISABLE_ESC_INT>
    if(bDcSyncActive)
 80231dc:	4b39      	ldr	r3, [pc, #228]	; (80232c4 <DC_CheckWatchdog+0xf0>)
 80231de:	781b      	ldrb	r3, [r3, #0]
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	d06b      	beq.n	80232bc <DC_CheckWatchdog+0xe8>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 80231e4:	4b38      	ldr	r3, [pc, #224]	; (80232c8 <DC_CheckWatchdog+0xf4>)
 80231e6:	881b      	ldrh	r3, [r3, #0]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d009      	beq.n	8023200 <DC_CheckWatchdog+0x2c>
 80231ec:	4b37      	ldr	r3, [pc, #220]	; (80232cc <DC_CheckWatchdog+0xf8>)
 80231ee:	881a      	ldrh	r2, [r3, #0]
 80231f0:	4b35      	ldr	r3, [pc, #212]	; (80232c8 <DC_CheckWatchdog+0xf4>)
 80231f2:	881b      	ldrh	r3, [r3, #0]
 80231f4:	429a      	cmp	r2, r3
 80231f6:	d303      	bcc.n	8023200 <DC_CheckWatchdog+0x2c>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 80231f8:	4b35      	ldr	r3, [pc, #212]	; (80232d0 <DC_CheckWatchdog+0xfc>)
 80231fa:	2200      	movs	r2, #0
 80231fc:	701a      	strb	r2, [r3, #0]
 80231fe:	e00e      	b.n	802321e <DC_CheckWatchdog+0x4a>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8023200:	4b32      	ldr	r3, [pc, #200]	; (80232cc <DC_CheckWatchdog+0xf8>)
 8023202:	881a      	ldrh	r2, [r3, #0]
 8023204:	4b30      	ldr	r3, [pc, #192]	; (80232c8 <DC_CheckWatchdog+0xf4>)
 8023206:	881b      	ldrh	r3, [r3, #0]
 8023208:	429a      	cmp	r2, r3
 802320a:	d205      	bcs.n	8023218 <DC_CheckWatchdog+0x44>
            {
                Sync0WdCounter ++;
 802320c:	4b2f      	ldr	r3, [pc, #188]	; (80232cc <DC_CheckWatchdog+0xf8>)
 802320e:	881b      	ldrh	r3, [r3, #0]
 8023210:	3301      	adds	r3, #1
 8023212:	b29a      	uxth	r2, r3
 8023214:	4b2d      	ldr	r3, [pc, #180]	; (80232cc <DC_CheckWatchdog+0xf8>)
 8023216:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8023218:	4b2d      	ldr	r3, [pc, #180]	; (80232d0 <DC_CheckWatchdog+0xfc>)
 802321a:	2201      	movs	r2, #1
 802321c:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 802321e:	4b2c      	ldr	r3, [pc, #176]	; (80232d0 <DC_CheckWatchdog+0xfc>)
 8023220:	781b      	ldrb	r3, [r3, #0]
 8023222:	2b00      	cmp	r3, #0
 8023224:	d013      	beq.n	802324e <DC_CheckWatchdog+0x7a>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8023226:	4b2b      	ldr	r3, [pc, #172]	; (80232d4 <DC_CheckWatchdog+0x100>)
 8023228:	881b      	ldrh	r3, [r3, #0]
 802322a:	2b00      	cmp	r3, #0
 802322c:	d00f      	beq.n	802324e <DC_CheckWatchdog+0x7a>
            {
                if(Sync1WdCounter < Sync1WdValue)
 802322e:	4b2a      	ldr	r3, [pc, #168]	; (80232d8 <DC_CheckWatchdog+0x104>)
 8023230:	881a      	ldrh	r2, [r3, #0]
 8023232:	4b28      	ldr	r3, [pc, #160]	; (80232d4 <DC_CheckWatchdog+0x100>)
 8023234:	881b      	ldrh	r3, [r3, #0]
 8023236:	429a      	cmp	r2, r3
 8023238:	d206      	bcs.n	8023248 <DC_CheckWatchdog+0x74>
                {
                    Sync1WdCounter ++;
 802323a:	4b27      	ldr	r3, [pc, #156]	; (80232d8 <DC_CheckWatchdog+0x104>)
 802323c:	881b      	ldrh	r3, [r3, #0]
 802323e:	3301      	adds	r3, #1
 8023240:	b29a      	uxth	r2, r3
 8023242:	4b25      	ldr	r3, [pc, #148]	; (80232d8 <DC_CheckWatchdog+0x104>)
 8023244:	801a      	strh	r2, [r3, #0]
 8023246:	e002      	b.n	802324e <DC_CheckWatchdog+0x7a>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8023248:	4b21      	ldr	r3, [pc, #132]	; (80232d0 <DC_CheckWatchdog+0xfc>)
 802324a:	2200      	movs	r2, #0
 802324c:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 802324e:	4b20      	ldr	r3, [pc, #128]	; (80232d0 <DC_CheckWatchdog+0xfc>)
 8023250:	781b      	ldrb	r3, [r3, #0]
 8023252:	2b00      	cmp	r3, #0
 8023254:	d02b      	beq.n	80232ae <DC_CheckWatchdog+0xda>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8023256:	4b21      	ldr	r3, [pc, #132]	; (80232dc <DC_CheckWatchdog+0x108>)
 8023258:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802325a:	4b21      	ldr	r3, [pc, #132]	; (80232e0 <DC_CheckWatchdog+0x10c>)
 802325c:	891b      	ldrh	r3, [r3, #8]
 802325e:	429a      	cmp	r2, r3
 8023260:	d211      	bcs.n	8023286 <DC_CheckWatchdog+0xb2>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 8023262:	4b20      	ldr	r3, [pc, #128]	; (80232e4 <DC_CheckWatchdog+0x110>)
 8023264:	2201      	movs	r2, #1
 8023266:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8023268:	4b1f      	ldr	r3, [pc, #124]	; (80232e8 <DC_CheckWatchdog+0x114>)
 802326a:	881b      	ldrh	r3, [r3, #0]
 802326c:	b21b      	sxth	r3, r3
 802326e:	2b00      	cmp	r3, #0
 8023270:	dd24      	ble.n	80232bc <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt++;
 8023272:	4b1e      	ldr	r3, [pc, #120]	; (80232ec <DC_CheckWatchdog+0x118>)
 8023274:	881b      	ldrh	r3, [r3, #0]
 8023276:	b29b      	uxth	r3, r3
 8023278:	b29b      	uxth	r3, r3
 802327a:	3301      	adds	r3, #1
 802327c:	b29b      	uxth	r3, r3
 802327e:	b29a      	uxth	r2, r3
 8023280:	4b1a      	ldr	r3, [pc, #104]	; (80232ec <DC_CheckWatchdog+0x118>)
 8023282:	801a      	strh	r2, [r3, #0]
 8023284:	e01a      	b.n	80232bc <DC_CheckWatchdog+0xe8>
                }
            }
            else if(bSmSyncSequenceValid)
 8023286:	4b17      	ldr	r3, [pc, #92]	; (80232e4 <DC_CheckWatchdog+0x110>)
 8023288:	781b      	ldrb	r3, [r3, #0]
 802328a:	2b00      	cmp	r3, #0
 802328c:	d016      	beq.n	80232bc <DC_CheckWatchdog+0xe8>
            {
                bSmSyncSequenceValid = FALSE;
 802328e:	4b15      	ldr	r3, [pc, #84]	; (80232e4 <DC_CheckWatchdog+0x110>)
 8023290:	2200      	movs	r2, #0
 8023292:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 8023294:	4b11      	ldr	r3, [pc, #68]	; (80232dc <DC_CheckWatchdog+0x108>)
 8023296:	2201      	movs	r2, #1
 8023298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                /*Wait for PLL is active reset the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 802329c:	4b12      	ldr	r3, [pc, #72]	; (80232e8 <DC_CheckWatchdog+0x114>)
 802329e:	881b      	ldrh	r3, [r3, #0]
 80232a0:	b21b      	sxth	r3, r3
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	dd0a      	ble.n	80232bc <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt = 0;
 80232a6:	4b11      	ldr	r3, [pc, #68]	; (80232ec <DC_CheckWatchdog+0x118>)
 80232a8:	2200      	movs	r2, #0
 80232aa:	801a      	strh	r2, [r3, #0]
 80232ac:	e006      	b.n	80232bc <DC_CheckWatchdog+0xe8>
                }
            }
        }
        else if(bSmSyncSequenceValid)
 80232ae:	4b0d      	ldr	r3, [pc, #52]	; (80232e4 <DC_CheckWatchdog+0x110>)
 80232b0:	781b      	ldrb	r3, [r3, #0]
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d002      	beq.n	80232bc <DC_CheckWatchdog+0xe8>
        {
            bSmSyncSequenceValid = FALSE;
 80232b6:	4b0b      	ldr	r3, [pc, #44]	; (80232e4 <DC_CheckWatchdog+0x110>)
 80232b8:	2200      	movs	r2, #0
 80232ba:	701a      	strb	r2, [r3, #0]
        }

    }
    ENABLE_ESC_INT();
 80232bc:	f7fe faf4 	bl	80218a8 <ENABLE_ESC_INT>
}
 80232c0:	bd80      	pop	{r7, pc}
 80232c2:	bf00      	nop
 80232c4:	1ffea85b 	.word	0x1ffea85b
 80232c8:	1ffea834 	.word	0x1ffea834
 80232cc:	1ffea82a 	.word	0x1ffea82a
 80232d0:	1ffea840 	.word	0x1ffea840
 80232d4:	1ffea83a 	.word	0x1ffea83a
 80232d8:	1ffea85e 	.word	0x1ffea85e
 80232dc:	1ffeacdc 	.word	0x1ffeacdc
 80232e0:	1ffe938c 	.word	0x1ffe938c
 80232e4:	1ffea857 	.word	0x1ffea857
 80232e8:	1ffea838 	.word	0x1ffea838
 80232ec:	1ffea830 	.word	0x1ffea830

080232f0 <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b082      	sub	sp, #8
 80232f4:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 80232f6:	4b20      	ldr	r3, [pc, #128]	; (8023378 <CheckIfEcatError+0x88>)
 80232f8:	881b      	ldrh	r3, [r3, #0]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d019      	beq.n	8023332 <CheckIfEcatError+0x42>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 80232fe:	2300      	movs	r3, #0
 8023300:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8023302:	4b1e      	ldr	r3, [pc, #120]	; (802337c <CheckIfEcatError+0x8c>)
 8023304:	881b      	ldrh	r3, [r3, #0]
 8023306:	80fb      	strh	r3, [r7, #6]
      WdStatusOK = SWAPWORD(WdStatusOK);

      /*ECATCHANGE_START(V5.11) ECAT4*/
      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8023308:	88fb      	ldrh	r3, [r7, #6]
 802330a:	f003 0301 	and.w	r3, r3, #1
 802330e:	2b00      	cmp	r3, #0
 8023310:	d10f      	bne.n	8023332 <CheckIfEcatError+0x42>
 8023312:	4b1b      	ldr	r3, [pc, #108]	; (8023380 <CheckIfEcatError+0x90>)
 8023314:	881b      	ldrh	r3, [r3, #0]
 8023316:	2b00      	cmp	r3, #0
 8023318:	d00b      	beq.n	8023332 <CheckIfEcatError+0x42>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 802331a:	4b1a      	ldr	r3, [pc, #104]	; (8023384 <CheckIfEcatError+0x94>)
 802331c:	781b      	ldrb	r3, [r3, #0]
 802331e:	2b00      	cmp	r3, #0
 8023320:	d004      	beq.n	802332c <CheckIfEcatError+0x3c>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8023322:	2004      	movs	r0, #4
 8023324:	211b      	movs	r1, #27
 8023326:	f7ff fa41 	bl	80227ac <AL_ControlInd>
            return;
 802332a:	e022      	b.n	8023372 <CheckIfEcatError+0x82>
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 802332c:	4b16      	ldr	r3, [pc, #88]	; (8023388 <CheckIfEcatError+0x98>)
 802332e:	2200      	movs	r2, #0
 8023330:	701a      	strb	r2, [r3, #0]
         }
      }
      /*ECATCHANGE_END(V5.11) ECAT4*/
   }

   if(bDcSyncActive)
 8023332:	4b16      	ldr	r3, [pc, #88]	; (802338c <CheckIfEcatError+0x9c>)
 8023334:	781b      	ldrb	r3, [r3, #0]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d01b      	beq.n	8023372 <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 802333a:	4b12      	ldr	r3, [pc, #72]	; (8023384 <CheckIfEcatError+0x94>)
 802333c:	781b      	ldrb	r3, [r3, #0]
 802333e:	2b00      	cmp	r3, #0
 8023340:	d017      	beq.n	8023372 <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 8023342:	4b13      	ldr	r3, [pc, #76]	; (8023390 <CheckIfEcatError+0xa0>)
 8023344:	781b      	ldrb	r3, [r3, #0]
 8023346:	f083 0301 	eor.w	r3, r3, #1
 802334a:	b2db      	uxtb	r3, r3
 802334c:	2b00      	cmp	r3, #0
 802334e:	d004      	beq.n	802335a <CheckIfEcatError+0x6a>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 8023350:	2004      	movs	r0, #4
 8023352:	212c      	movs	r1, #44	; 0x2c
 8023354:	f7ff fa2a 	bl	80227ac <AL_ControlInd>
               return;
 8023358:	e00b      	b.n	8023372 <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 802335a:	4b0e      	ldr	r3, [pc, #56]	; (8023394 <CheckIfEcatError+0xa4>)
 802335c:	781b      	ldrb	r3, [r3, #0]
 802335e:	f083 0301 	eor.w	r3, r3, #1
 8023362:	b2db      	uxtb	r3, r3
 8023364:	2b00      	cmp	r3, #0
 8023366:	d004      	beq.n	8023372 <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8023368:	2004      	movs	r0, #4
 802336a:	211a      	movs	r1, #26
 802336c:	f7ff fa1e 	bl	80227ac <AL_ControlInd>
               return;
 8023370:	bf00      	nop
           }
        
       }
   }
}
 8023372:	3708      	adds	r7, #8
 8023374:	46bd      	mov	sp, r7
 8023376:	bd80      	pop	{r7, pc}
 8023378:	1ffea860 	.word	0x1ffea860
 802337c:	54010440 	.word	0x54010440
 8023380:	1ffea826 	.word	0x1ffea826
 8023384:	1ffea85c 	.word	0x1ffea85c
 8023388:	1ffea856 	.word	0x1ffea856
 802338c:	1ffea85b 	.word	0x1ffea85b
 8023390:	1ffea840 	.word	0x1ffea840
 8023394:	1ffea857 	.word	0x1ffea857

08023398 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8023398:	b580      	push	{r7, lr}
 802339a:	b082      	sub	sp, #8
 802339c:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    HW_EscReadByte(nMaxSyncMan, ESC_SM_CHANNELS_OFFSET);
 802339e:	4b38      	ldr	r3, [pc, #224]	; (8023480 <ECAT_Init+0xe8>)
 80233a0:	781b      	ldrb	r3, [r3, #0]
 80233a2:	b2da      	uxtb	r2, r3
 80233a4:	4b37      	ldr	r3, [pc, #220]	; (8023484 <ECAT_Init+0xec>)
 80233a6:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(nMaxEscAddress, ESC_DPRAM_SIZE_OFFSET);
 80233a8:	4b37      	ldr	r3, [pc, #220]	; (8023488 <ECAT_Init+0xf0>)
 80233aa:	881b      	ldrh	r3, [r3, #0]
 80233ac:	b29a      	uxth	r2, r3
 80233ae:	4b37      	ldr	r3, [pc, #220]	; (802348c <ECAT_Init+0xf4>)
 80233b0:	801a      	strh	r2, [r3, #0]
    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    /* ECATCHANGE_START(V5.11) ESC1*/
    nMaxEscAddress = (nMaxEscAddress << 10) + 0xFFF;
 80233b2:	4b36      	ldr	r3, [pc, #216]	; (802348c <ECAT_Init+0xf4>)
 80233b4:	881b      	ldrh	r3, [r3, #0]
 80233b6:	029b      	lsls	r3, r3, #10
 80233b8:	b29b      	uxth	r3, r3
 80233ba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80233be:	b29a      	uxth	r2, r3
 80233c0:	4b32      	ldr	r3, [pc, #200]	; (802348c <ECAT_Init+0xf4>)
 80233c2:	801a      	strh	r2, [r3, #0]
    /* ECATCHANGE_END(V5.11) ESC1*/

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 80233c4:	f7fe faac 	bl	8021920 <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 80233c8:	2300      	movs	r3, #0
 80233ca:	71fb      	strb	r3, [r7, #7]
 80233cc:	e006      	b.n	80233dc <ECAT_Init+0x44>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(i);
 80233ce:	79fb      	ldrb	r3, [r7, #7]
 80233d0:	4618      	mov	r0, r3
 80233d2:	f7fe fadf 	bl	8021994 <DisableSyncManChannel>

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 80233d6:	79fb      	ldrb	r3, [r7, #7]
 80233d8:	3301      	adds	r3, #1
 80233da:	71fb      	strb	r3, [r7, #7]
 80233dc:	4b29      	ldr	r3, [pc, #164]	; (8023484 <ECAT_Init+0xec>)
 80233de:	781b      	ldrb	r3, [r3, #0]
 80233e0:	79fa      	ldrb	r2, [r7, #7]
 80233e2:	429a      	cmp	r2, r3
 80233e4:	d3f3      	bcc.n	80233ce <ECAT_Init+0x36>
        DisableSyncManChannel(i);
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* initialize the mailbox handler */
    MBX_Init();
 80233e6:	f000 faf1 	bl	80239cc <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 80233ea:	4b29      	ldr	r3, [pc, #164]	; (8023490 <ECAT_Init+0xf8>)
 80233ec:	2200      	movs	r2, #0
 80233ee:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 80233f0:	4b28      	ldr	r3, [pc, #160]	; (8023494 <ECAT_Init+0xfc>)
 80233f2:	2200      	movs	r2, #0
 80233f4:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 80233f6:	4b28      	ldr	r3, [pc, #160]	; (8023498 <ECAT_Init+0x100>)
 80233f8:	2200      	movs	r2, #0
 80233fa:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 80233fc:	4b27      	ldr	r3, [pc, #156]	; (802349c <ECAT_Init+0x104>)
 80233fe:	2200      	movs	r2, #0
 8023400:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8023402:	4b27      	ldr	r3, [pc, #156]	; (80234a0 <ECAT_Init+0x108>)
 8023404:	2200      	movs	r2, #0
 8023406:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8023408:	4b26      	ldr	r3, [pc, #152]	; (80234a4 <ECAT_Init+0x10c>)
 802340a:	2200      	movs	r2, #0
 802340c:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 802340e:	4b26      	ldr	r3, [pc, #152]	; (80234a8 <ECAT_Init+0x110>)
 8023410:	2200      	movs	r2, #0
 8023412:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8023414:	4b25      	ldr	r3, [pc, #148]	; (80234ac <ECAT_Init+0x114>)
 8023416:	2200      	movs	r2, #0
 8023418:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 802341a:	4b25      	ldr	r3, [pc, #148]	; (80234b0 <ECAT_Init+0x118>)
 802341c:	2200      	movs	r2, #0
 802341e:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8023420:	4b24      	ldr	r3, [pc, #144]	; (80234b4 <ECAT_Init+0x11c>)
 8023422:	2200      	movs	r2, #0
 8023424:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8023426:	4b24      	ldr	r3, [pc, #144]	; (80234b8 <ECAT_Init+0x120>)
 8023428:	2200      	movs	r2, #0
 802342a:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 802342c:	4b23      	ldr	r3, [pc, #140]	; (80234bc <ECAT_Init+0x124>)
 802342e:	2200      	movs	r2, #0
 8023430:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8023432:	4b23      	ldr	r3, [pc, #140]	; (80234c0 <ECAT_Init+0x128>)
 8023434:	2200      	movs	r2, #0
 8023436:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8023438:	4b22      	ldr	r3, [pc, #136]	; (80234c4 <ECAT_Init+0x12c>)
 802343a:	2200      	movs	r2, #0
 802343c:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 802343e:	4b22      	ldr	r3, [pc, #136]	; (80234c8 <ECAT_Init+0x130>)
 8023440:	2200      	movs	r2, #0
 8023442:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8023444:	4b21      	ldr	r3, [pc, #132]	; (80234cc <ECAT_Init+0x134>)
 8023446:	2200      	movs	r2, #0
 8023448:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 802344a:	4b21      	ldr	r3, [pc, #132]	; (80234d0 <ECAT_Init+0x138>)
 802344c:	2200      	movs	r2, #0
 802344e:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8023450:	4b20      	ldr	r3, [pc, #128]	; (80234d4 <ECAT_Init+0x13c>)
 8023452:	2201      	movs	r2, #1
 8023454:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8023456:	4b1f      	ldr	r3, [pc, #124]	; (80234d4 <ECAT_Init+0x13c>)
 8023458:	781b      	ldrb	r3, [r3, #0]
 802345a:	4618      	mov	r0, r3
 802345c:	2100      	movs	r1, #0
 802345e:	f7ff f947 	bl	80226f0 <SetALStatus>
    nEcatStateTrans = 0;
 8023462:	4b1d      	ldr	r3, [pc, #116]	; (80234d8 <ECAT_Init+0x140>)
 8023464:	2200      	movs	r2, #0
 8023466:	801a      	strh	r2, [r3, #0]
    u8EcatErrorLed = LED_OFF;
 8023468:	4b1c      	ldr	r3, [pc, #112]	; (80234dc <ECAT_Init+0x144>)
 802346a:	2200      	movs	r2, #0
 802346c:	701a      	strb	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) ECAT5*/
    bEscIntEnabled = FALSE;
 802346e:	4b1c      	ldr	r3, [pc, #112]	; (80234e0 <ECAT_Init+0x148>)
 8023470:	2200      	movs	r2, #0
 8023472:	701a      	strb	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) ECAT5*/

    /* initialize the COE part */
    COE_Init();
 8023474:	f7fd ff1a 	bl	80212ac <COE_Init>
}
 8023478:	3708      	adds	r7, #8
 802347a:	46bd      	mov	sp, r7
 802347c:	bd80      	pop	{r7, pc}
 802347e:	bf00      	nop
 8023480:	54010005 	.word	0x54010005
 8023484:	1ffea868 	.word	0x1ffea868
 8023488:	54010006 	.word	0x54010006
 802348c:	1ffea854 	.word	0x1ffea854
 8023490:	1ffea824 	.word	0x1ffea824
 8023494:	1ffea84e 	.word	0x1ffea84e
 8023498:	1ffea856 	.word	0x1ffea856
 802349c:	1ffea85c 	.word	0x1ffea85c
 80234a0:	1ffea862 	.word	0x1ffea862
 80234a4:	1ffea864 	.word	0x1ffea864
 80234a8:	1ffea860 	.word	0x1ffea860
 80234ac:	1ffea82a 	.word	0x1ffea82a
 80234b0:	1ffea834 	.word	0x1ffea834
 80234b4:	1ffea85e 	.word	0x1ffea85e
 80234b8:	1ffea83a 	.word	0x1ffea83a
 80234bc:	1ffea85b 	.word	0x1ffea85b
 80234c0:	1ffea82c 	.word	0x1ffea82c
 80234c4:	1ffea828 	.word	0x1ffea828
 80234c8:	1ffea83e 	.word	0x1ffea83e
 80234cc:	1ffea826 	.word	0x1ffea826
 80234d0:	1ffea850 	.word	0x1ffea850
 80234d4:	1ffea825 	.word	0x1ffea825
 80234d8:	1ffea822 	.word	0x1ffea822
 80234dc:	1ffea869 	.word	0x1ffea869
 80234e0:	1ffea863 	.word	0x1ffea863

080234e4 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 80234e4:	b580      	push	{r7, lr}
 80234e6:	b082      	sub	sp, #8
 80234e8:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 80234ea:	2300      	movs	r3, #0
 80234ec:	807b      	strh	r3, [r7, #2]
    UINT8 sm1Activate = SM_SETTING_ENABLE_VALUE;
 80234ee:	2301      	movs	r3, #1
 80234f0:	717b      	strb	r3, [r7, #5]

    /* check if services are stored in the mailbox */
    MBX_Main();
 80234f2:	f000 fec3 	bl	802427c <MBX_Main>


    if ( bMbxRunning )
 80234f6:	4b58      	ldr	r3, [pc, #352]	; (8023658 <ECAT_Main+0x174>)
 80234f8:	781b      	ldrb	r3, [r3, #0]
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d002      	beq.n	8023504 <ECAT_Main+0x20>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadByte(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80234fe:	4b57      	ldr	r3, [pc, #348]	; (802365c <ECAT_Main+0x178>)
 8023500:	781b      	ldrb	r3, [r3, #0]
 8023502:	717b      	strb	r3, [r7, #5]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8023504:	f7fe f9c8 	bl	8021898 <HW_GetALEventRegister>
 8023508:	4603      	mov	r3, r0
 802350a:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);

    if ((ALEventReg & EEPROM_CMD_PENDING)) 
 802350c:	88fb      	ldrh	r3, [r7, #6]
 802350e:	f003 0320 	and.w	r3, r3, #32
 8023512:	2b00      	cmp	r3, #0
 8023514:	d001      	beq.n	802351a <ECAT_Main+0x36>
    {
        EEPROM_CommandHandler();
 8023516:	f7fd fe01 	bl	802111c <EEPROM_CommandHandler>
    }

    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 802351a:	88fb      	ldrh	r3, [r7, #6]
 802351c:	f003 0301 	and.w	r3, r3, #1
 8023520:	2b00      	cmp	r3, #0
 8023522:	d014      	beq.n	802354e <ECAT_Main+0x6a>
 8023524:	4b4e      	ldr	r3, [pc, #312]	; (8023660 <ECAT_Main+0x17c>)
 8023526:	781b      	ldrb	r3, [r3, #0]
 8023528:	f083 0301 	eor.w	r3, r3, #1
 802352c:	b2db      	uxtb	r3, r3
 802352e:	2b00      	cmp	r3, #0
 8023530:	d00d      	beq.n	802354e <ECAT_Main+0x6a>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadByte( EscAlControl, ESC_AL_CONTROL_OFFSET);
 8023532:	4b4c      	ldr	r3, [pc, #304]	; (8023664 <ECAT_Main+0x180>)
 8023534:	781b      	ldrb	r3, [r3, #0]
 8023536:	b2db      	uxtb	r3, r3
 8023538:	807b      	strh	r3, [r7, #2]
        EscAlControl = SWAPWORD(EscAlControl);


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 802353a:	88fb      	ldrh	r3, [r7, #6]
 802353c:	f023 0311 	bic.w	r3, r3, #17
 8023540:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 8023542:	887b      	ldrh	r3, [r7, #2]
 8023544:	b2db      	uxtb	r3, r3
 8023546:	4618      	mov	r0, r3
 8023548:	2100      	movs	r1, #0
 802354a:	f7ff f92f 	bl	80227ac <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 802354e:	88fb      	ldrh	r3, [r7, #6]
 8023550:	f003 0310 	and.w	r3, r3, #16
 8023554:	2b00      	cmp	r3, #0
 8023556:	d01f      	beq.n	8023598 <ECAT_Main+0xb4>
 8023558:	4b41      	ldr	r3, [pc, #260]	; (8023660 <ECAT_Main+0x17c>)
 802355a:	781b      	ldrb	r3, [r3, #0]
 802355c:	f083 0301 	eor.w	r3, r3, #1
 8023560:	b2db      	uxtb	r3, r3
 8023562:	2b00      	cmp	r3, #0
 8023564:	d018      	beq.n	8023598 <ECAT_Main+0xb4>
 8023566:	4b40      	ldr	r3, [pc, #256]	; (8023668 <ECAT_Main+0x184>)
 8023568:	781b      	ldrb	r3, [r3, #0]
 802356a:	f003 0310 	and.w	r3, r3, #16
 802356e:	2b00      	cmp	r3, #0
 8023570:	d112      	bne.n	8023598 <ECAT_Main+0xb4>
 8023572:	4b3d      	ldr	r3, [pc, #244]	; (8023668 <ECAT_Main+0x184>)
 8023574:	781b      	ldrb	r3, [r3, #0]
 8023576:	f023 0310 	bic.w	r3, r3, #16
 802357a:	2b01      	cmp	r3, #1
 802357c:	d00c      	beq.n	8023598 <ECAT_Main+0xb4>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 802357e:	88fb      	ldrh	r3, [r7, #6]
 8023580:	f023 0310 	bic.w	r3, r3, #16
 8023584:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8023586:	4b38      	ldr	r3, [pc, #224]	; (8023668 <ECAT_Main+0x184>)
 8023588:	781b      	ldrb	r3, [r3, #0]
 802358a:	f003 030f 	and.w	r3, r3, #15
 802358e:	b2db      	uxtb	r3, r3
 8023590:	4618      	mov	r0, r3
 8023592:	2100      	movs	r1, #0
 8023594:	f7ff f90a 	bl	80227ac <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8023598:	4b31      	ldr	r3, [pc, #196]	; (8023660 <ECAT_Main+0x17c>)
 802359a:	781b      	ldrb	r3, [r3, #0]
 802359c:	2b00      	cmp	r3, #0
 802359e:	d001      	beq.n	80235a4 <ECAT_Main+0xc0>
    {
        AL_ControlRes();
 80235a0:	f7ff fcb8 	bl	8022f14 <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 80235a4:	4b2c      	ldr	r3, [pc, #176]	; (8023658 <ECAT_Main+0x174>)
 80235a6:	781b      	ldrb	r3, [r3, #0]
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	d052      	beq.n	8023652 <ECAT_Main+0x16e>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
        if(!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 80235ac:	797b      	ldrb	r3, [r7, #5]
 80235ae:	f003 0301 	and.w	r3, r3, #1
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d108      	bne.n	80235c8 <ECAT_Main+0xe4>
            AL_ControlInd(nAlStatus & STATE_MASK, 0);
 80235b6:	4b2c      	ldr	r3, [pc, #176]	; (8023668 <ECAT_Main+0x184>)
 80235b8:	781b      	ldrb	r3, [r3, #0]
 80235ba:	f003 030f 	and.w	r3, r3, #15
 80235be:	b2db      	uxtb	r3, r3
 80235c0:	4618      	mov	r0, r3
 80235c2:	2100      	movs	r1, #0
 80235c4:	f7ff f8f2 	bl	80227ac <AL_ControlInd>

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 80235c8:	88fb      	ldrh	r3, [r7, #6]
 80235ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d012      	beq.n	80235f8 <ECAT_Main+0x114>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u8dummy = 0;
 80235d2:	4b26      	ldr	r3, [pc, #152]	; (802366c <ECAT_Main+0x188>)
 80235d4:	2200      	movs	r2, #0
 80235d6:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,u16EscAddrSendMbx);
 80235d8:	4b25      	ldr	r3, [pc, #148]	; (8023670 <ECAT_Main+0x18c>)
 80235da:	881b      	ldrh	r3, [r3, #0]
 80235dc:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80235e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80235e4:	4a21      	ldr	r2, [pc, #132]	; (802366c <ECAT_Main+0x188>)
 80235e6:	7812      	ldrb	r2, [r2, #0]
 80235e8:	b2d2      	uxtb	r2, r2
 80235ea:	701a      	strb	r2, [r3, #0]

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 80235ec:	88fb      	ldrh	r3, [r7, #6]
 80235ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80235f2:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 80235f4:	f000 fc08 	bl	8023e08 <MBX_MailboxReadInd>
        }

        DISABLE_MBX_INT;
        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 80235f8:	797b      	ldrb	r3, [r7, #5]
 80235fa:	f003 0302 	and.w	r3, r3, #2
 80235fe:	2b00      	cmp	r3, #0
 8023600:	d006      	beq.n	8023610 <ECAT_Main+0x12c>
 8023602:	4b1c      	ldr	r3, [pc, #112]	; (8023674 <ECAT_Main+0x190>)
 8023604:	781b      	ldrb	r3, [r3, #0]
 8023606:	f083 0301 	eor.w	r3, r3, #1
 802360a:	b2db      	uxtb	r3, r3
 802360c:	2b00      	cmp	r3, #0
 802360e:	d108      	bne.n	8023622 <ECAT_Main+0x13e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8023610:	797b      	ldrb	r3, [r7, #5]
 8023612:	f003 0302 	and.w	r3, r3, #2
 8023616:	2b00      	cmp	r3, #0
 8023618:	d10c      	bne.n	8023634 <ECAT_Main+0x150>
 802361a:	4b16      	ldr	r3, [pc, #88]	; (8023674 <ECAT_Main+0x190>)
 802361c:	781b      	ldrb	r3, [r3, #0]
 802361e:	2b00      	cmp	r3, #0
 8023620:	d008      	beq.n	8023634 <ECAT_Main+0x150>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8023622:	f000 fc6b 	bl	8023efc <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            sm1Activate &= SM_SETTING_REPEAT_ACK;
 8023626:	797b      	ldrb	r3, [r7, #5]
 8023628:	f003 0302 	and.w	r3, r3, #2
 802362c:	717b      	strb	r3, [r7, #5]
            HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 802362e:	4a12      	ldr	r2, [pc, #72]	; (8023678 <ECAT_Main+0x194>)
 8023630:	797b      	ldrb	r3, [r7, #5]
 8023632:	7013      	strb	r3, [r2, #0]
        }
        ENABLE_MBX_INT;

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8023634:	f7fe f930 	bl	8021898 <HW_GetALEventRegister>
 8023638:	4603      	mov	r3, r0
 802363a:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 802363c:	88fb      	ldrh	r3, [r7, #6]
 802363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023642:	2b00      	cmp	r3, #0
 8023644:	d005      	beq.n	8023652 <ECAT_Main+0x16e>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8023646:	88fb      	ldrh	r3, [r7, #6]
 8023648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802364c:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 802364e:	f000 fd01 	bl	8024054 <MBX_CheckAndCopyMailbox>

        }
    }
}
 8023652:	3708      	adds	r7, #8
 8023654:	46bd      	mov	sp, r7
 8023656:	bd80      	pop	{r7, pc}
 8023658:	1ffeac72 	.word	0x1ffeac72
 802365c:	5401080e 	.word	0x5401080e
 8023660:	1ffea84e 	.word	0x1ffea84e
 8023664:	54010120 	.word	0x54010120
 8023668:	1ffea825 	.word	0x1ffea825
 802366c:	1ffea83c 	.word	0x1ffea83c
 8023670:	1ffeac86 	.word	0x1ffeac86
 8023674:	1ffeac90 	.word	0x1ffeac90
 8023678:	5401080f 	.word	0x5401080f

0802367c <FOE_Read>:
 \brief    The function starts a file reading

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Read(UINT16 MBXMEM * pName, UINT16 nameSize, UINT16 MBXMEM * pData, UINT32 password)
{
 802367c:	b580      	push	{r7, lr}
 802367e:	b08a      	sub	sp, #40	; 0x28
 8023680:	af00      	add	r7, sp, #0
 8023682:	60f8      	str	r0, [r7, #12]
 8023684:	607a      	str	r2, [r7, #4]
 8023686:	603b      	str	r3, [r7, #0]
 8023688:	460b      	mov	r3, r1
 802368a:	817b      	strh	r3, [r7, #10]
    UINT16 size = 0;
 802368c:	2300      	movs	r3, #0
 802368e:	84fb      	strh	r3, [r7, #38]	; 0x26
    UINT16 i = 0;
 8023690:	2300      	movs	r3, #0
 8023692:	84bb      	strh	r3, [r7, #36]	; 0x24

    CHAR aReadFileName[MAX_FILE_NAME_SIZE];

    /* ECATCHANGE_START(V5.11) FOE2*/
    if ((nameSize + 1) > MAX_FILE_NAME_SIZE)
 8023694:	897b      	ldrh	r3, [r7, #10]
 8023696:	3301      	adds	r3, #1
 8023698:	2b10      	cmp	r3, #16
 802369a:	dd02      	ble.n	80236a2 <FOE_Read+0x26>
    {
        return ECAT_FOE_ERRCODE_DISKFULL;
 802369c:	f248 0303 	movw	r3, #32771	; 0x8003
 80236a0:	e03d      	b.n	802371e <FOE_Read+0xa2>
    }

    /*Read requested file name to endianess conversion if required*/
    MBXSTRCPY(aReadFileName, pName, nameSize);
 80236a2:	897b      	ldrh	r3, [r7, #10]
 80236a4:	f107 0214 	add.w	r2, r7, #20
 80236a8:	4610      	mov	r0, r2
 80236aa:	68f9      	ldr	r1, [r7, #12]
 80236ac:	461a      	mov	r2, r3
 80236ae:	f006 fe1f 	bl	802a2f0 <memcpy>
    aReadFileName[nameSize] = '\0';
 80236b2:	897b      	ldrh	r3, [r7, #10]
 80236b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80236b8:	4413      	add	r3, r2
 80236ba:	2200      	movs	r2, #0
 80236bc:	f803 2c14 	strb.w	r2, [r3, #-20]
    /* ECATCHANGE_END(V5.11) FOE2*/


    {
    /* for test only the written file name can be read */
    for (i = 0; i < nameSize; i++)
 80236c0:	2300      	movs	r3, #0
 80236c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80236c4:	e010      	b.n	80236e8 <FOE_Read+0x6c>
    {
        if (aReadFileName[i] != aFileName[i] )
 80236c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80236c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80236cc:	4413      	add	r3, r2
 80236ce:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80236d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80236d4:	4914      	ldr	r1, [pc, #80]	; (8023728 <FOE_Read+0xac>)
 80236d6:	5ccb      	ldrb	r3, [r1, r3]
 80236d8:	429a      	cmp	r2, r3
 80236da:	d002      	beq.n	80236e2 <FOE_Read+0x66>
            /* file name not found */
            return ECAT_FOE_ERRCODE_NOTFOUND;
 80236dc:	f248 0301 	movw	r3, #32769	; 0x8001
 80236e0:	e01d      	b.n	802371e <FOE_Read+0xa2>
    /* ECATCHANGE_END(V5.11) FOE2*/


    {
    /* for test only the written file name can be read */
    for (i = 0; i < nameSize; i++)
 80236e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80236e4:	3301      	adds	r3, #1
 80236e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80236e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80236ea:	897b      	ldrh	r3, [r7, #10]
 80236ec:	429a      	cmp	r2, r3
 80236ee:	d3ea      	bcc.n	80236c6 <FOE_Read+0x4a>
        if (aReadFileName[i] != aFileName[i] )
            /* file name not found */
            return ECAT_FOE_ERRCODE_NOTFOUND;
    }

    if ( nFileSize >= (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE) )
 80236f0:	4b0e      	ldr	r3, [pc, #56]	; (802372c <FOE_Read+0xb0>)
 80236f2:	881b      	ldrh	r3, [r3, #0]
 80236f4:	f1a3 020c 	sub.w	r2, r3, #12
 80236f8:	4b0d      	ldr	r3, [pc, #52]	; (8023730 <FOE_Read+0xb4>)
 80236fa:	681b      	ldr	r3, [r3, #0]
 80236fc:	429a      	cmp	r2, r3
 80236fe:	d804      	bhi.n	802370a <FOE_Read+0x8e>
        size = (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE);
 8023700:	4b0a      	ldr	r3, [pc, #40]	; (802372c <FOE_Read+0xb0>)
 8023702:	881b      	ldrh	r3, [r3, #0]
 8023704:	3b0c      	subs	r3, #12
 8023706:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023708:	e002      	b.n	8023710 <FOE_Read+0x94>
    else
        size = (unsigned short) nFileSize;
 802370a:	4b09      	ldr	r3, [pc, #36]	; (8023730 <FOE_Read+0xb4>)
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	84fb      	strh	r3, [r7, #38]	; 0x26

    MBXMEMCPY(pData, aFileData, size);
 8023710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023712:	6878      	ldr	r0, [r7, #4]
 8023714:	4907      	ldr	r1, [pc, #28]	; (8023734 <FOE_Read+0xb8>)
 8023716:	461a      	mov	r2, r3
 8023718:	f006 fdea 	bl	802a2f0 <memcpy>
    }
    return size;
 802371c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 802371e:	4618      	mov	r0, r3
 8023720:	3728      	adds	r7, #40	; 0x28
 8023722:	46bd      	mov	sp, r7
 8023724:	bd80      	pop	{r7, pc}
 8023726:	bf00      	nop
 8023728:	1ffea9f4 	.word	0x1ffea9f4
 802372c:	1ffeac7c 	.word	0x1ffeac7c
 8023730:	1ffea9f0 	.word	0x1ffea9f0
 8023734:	1ffea870 	.word	0x1ffea870

08023738 <FOE_Write>:
 \brief    The function starts a file writing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Write(UINT16 MBXMEM * pName, UINT16 nameSize, UINT32 password)
{
 8023738:	b580      	push	{r7, lr}
 802373a:	b084      	sub	sp, #16
 802373c:	af00      	add	r7, sp, #0
 802373e:	60f8      	str	r0, [r7, #12]
 8023740:	460b      	mov	r3, r1
 8023742:	607a      	str	r2, [r7, #4]
 8023744:	817b      	strh	r3, [r7, #10]
    if ( bBootMode )
 8023746:	4b0a      	ldr	r3, [pc, #40]	; (8023770 <FOE_Write+0x38>)
 8023748:	781b      	ldrb	r3, [r3, #0]
 802374a:	2b00      	cmp	r3, #0
 802374c:	d00a      	beq.n	8023764 <FOE_Write+0x2c>
    {
    	if(password == 0xBEEFBEEF)
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	4a08      	ldr	r2, [pc, #32]	; (8023774 <FOE_Write+0x3c>)
 8023752:	4293      	cmp	r3, r2
 8023754:	d103      	bne.n	802375e <FOE_Write+0x26>
    	{
    		FWUPDATE_StartDownload();
 8023756:	f006 f9a3 	bl	8029aa0 <FWUPDATE_StartDownload>
    		return 0;
 802375a:	2300      	movs	r3, #0
 802375c:	e004      	b.n	8023768 <FOE_Write+0x30>
    	}
    	else
    		return ECAT_FOE_ERRCODE_ILLEGAL;
 802375e:	f248 0304 	movw	r3, #32772	; 0x8004
 8023762:	e001      	b.n	8023768 <FOE_Write+0x30>
    }
    else
        return ECAT_FOE_ERRCODE_DISKFULL;
 8023764:	f248 0303 	movw	r3, #32771	; 0x8003
}
 8023768:	4618      	mov	r0, r3
 802376a:	3710      	adds	r7, #16
 802376c:	46bd      	mov	sp, r7
 802376e:	bd80      	pop	{r7, pc}
 8023770:	1ffea85a 	.word	0x1ffea85a
 8023774:	beefbeef 	.word	0xbeefbeef

08023778 <FOE_Data>:
 \brief    The function is called to write the next part of a file

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Data(UINT16 MBXMEM * pData, UINT16 Size)
{
 8023778:	b580      	push	{r7, lr}
 802377a:	b082      	sub	sp, #8
 802377c:	af00      	add	r7, sp, #0
 802377e:	6078      	str	r0, [r7, #4]
 8023780:	460b      	mov	r3, r1
 8023782:	807b      	strh	r3, [r7, #2]
    if ( bBootMode )
 8023784:	4b08      	ldr	r3, [pc, #32]	; (80237a8 <FOE_Data+0x30>)
 8023786:	781b      	ldrb	r3, [r3, #0]
 8023788:	2b00      	cmp	r3, #0
 802378a:	d006      	beq.n	802379a <FOE_Data+0x22>
    {
        return FWUPDATE_Data(pData, Size);
 802378c:	887b      	ldrh	r3, [r7, #2]
 802378e:	6878      	ldr	r0, [r7, #4]
 8023790:	4619      	mov	r1, r3
 8023792:	f006 f9b9 	bl	8029b08 <FWUPDATE_Data>
 8023796:	4603      	mov	r3, r0
 8023798:	e001      	b.n	802379e <FOE_Data+0x26>
    }
    else
    	return ECAT_FOE_ERRCODE_DISKFULL;
 802379a:	f248 0303 	movw	r3, #32771	; 0x8003
}
 802379e:	4618      	mov	r0, r3
 80237a0:	3708      	adds	r7, #8
 80237a2:	46bd      	mov	sp, r7
 80237a4:	bd80      	pop	{r7, pc}
 80237a6:	bf00      	nop
 80237a8:	1ffea85a 	.word	0x1ffea85a

080237ac <FOE_Ack>:
 \brief    The function is called when the reading of a part of a file is acknowledged

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Ack(UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 80237ac:	b580      	push	{r7, lr}
 80237ae:	b084      	sub	sp, #16
 80237b0:	af00      	add	r7, sp, #0
 80237b2:	6078      	str	r0, [r7, #4]
 80237b4:	6039      	str	r1, [r7, #0]
    if ( fileOffset < nFileSize )
 80237b6:	4b18      	ldr	r3, [pc, #96]	; (8023818 <FOE_Ack+0x6c>)
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	687a      	ldr	r2, [r7, #4]
 80237bc:	429a      	cmp	r2, r3
 80237be:	d21d      	bcs.n	80237fc <FOE_Ack+0x50>
    {
        /* send next part of the file */
        UINT32 size;
        UINT32 sendSize = nFileSize-fileOffset;
 80237c0:	4b15      	ldr	r3, [pc, #84]	; (8023818 <FOE_Ack+0x6c>)
 80237c2:	681a      	ldr	r2, [r3, #0]
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	1ad3      	subs	r3, r2, r3
 80237c8:	60bb      	str	r3, [r7, #8]

        if ( sendSize >= (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE) )
 80237ca:	4b14      	ldr	r3, [pc, #80]	; (802381c <FOE_Ack+0x70>)
 80237cc:	881b      	ldrh	r3, [r3, #0]
 80237ce:	f1a3 020c 	sub.w	r2, r3, #12
 80237d2:	68bb      	ldr	r3, [r7, #8]
 80237d4:	429a      	cmp	r2, r3
 80237d6:	d804      	bhi.n	80237e2 <FOE_Ack+0x36>
        {
            size = (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE);
 80237d8:	4b10      	ldr	r3, [pc, #64]	; (802381c <FOE_Ack+0x70>)
 80237da:	881b      	ldrh	r3, [r3, #0]
 80237dc:	3b0c      	subs	r3, #12
 80237de:	60fb      	str	r3, [r7, #12]
 80237e0:	e001      	b.n	80237e6 <FOE_Ack+0x3a>
        }
        else
        {
            size = sendSize;
 80237e2:	68bb      	ldr	r3, [r7, #8]
 80237e4:	60fb      	str	r3, [r7, #12]
        }
        MBXMEMCPY(pData, &aFileData[fileOffset], size);
 80237e6:	687b      	ldr	r3, [r7, #4]
 80237e8:	4a0d      	ldr	r2, [pc, #52]	; (8023820 <FOE_Ack+0x74>)
 80237ea:	4413      	add	r3, r2
 80237ec:	6838      	ldr	r0, [r7, #0]
 80237ee:	4619      	mov	r1, r3
 80237f0:	68fa      	ldr	r2, [r7, #12]
 80237f2:	f006 fd7d 	bl	802a2f0 <memcpy>

        return ((UINT16) size);
 80237f6:	68fb      	ldr	r3, [r7, #12]
 80237f8:	b29b      	uxth	r3, r3
 80237fa:	e008      	b.n	802380e <FOE_Ack+0x62>
    }
    else if ( fileOffset == nFileSize )
 80237fc:	4b06      	ldr	r3, [pc, #24]	; (8023818 <FOE_Ack+0x6c>)
 80237fe:	681b      	ldr	r3, [r3, #0]
 8023800:	687a      	ldr	r2, [r7, #4]
 8023802:	429a      	cmp	r2, r3
 8023804:	d101      	bne.n	802380a <FOE_Ack+0x5e>
    {
        /* file transfer is finished */
        return 0; // size = 0
 8023806:	2300      	movs	r3, #0
 8023808:	e001      	b.n	802380e <FOE_Ack+0x62>
    }
    else
        return ECAT_FOE_ERRCODE_ILLEGAL;
 802380a:	f248 0304 	movw	r3, #32772	; 0x8004

}
 802380e:	4618      	mov	r0, r3
 8023810:	3710      	adds	r7, #16
 8023812:	46bd      	mov	sp, r7
 8023814:	bd80      	pop	{r7, pc}
 8023816:	bf00      	nop
 8023818:	1ffea9f0 	.word	0x1ffea9f0
 802381c:	1ffeac7c 	.word	0x1ffeac7c
 8023820:	1ffea870 	.word	0x1ffea870

08023824 <FOE_Busy>:
 \brief    The function is called when the reading of a part of a file should be repeated

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Busy(UINT16 done, UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 8023824:	b580      	push	{r7, lr}
 8023826:	b084      	sub	sp, #16
 8023828:	af00      	add	r7, sp, #0
 802382a:	4603      	mov	r3, r0
 802382c:	60b9      	str	r1, [r7, #8]
 802382e:	607a      	str	r2, [r7, #4]
 8023830:	81fb      	strh	r3, [r7, #14]
    /* send last part again */
    return FOE_Ack(fileOffset, pData);
 8023832:	68b8      	ldr	r0, [r7, #8]
 8023834:	6879      	ldr	r1, [r7, #4]
 8023836:	f7ff ffb9 	bl	80237ac <FOE_Ack>
 802383a:	4603      	mov	r3, r0
}
 802383c:	4618      	mov	r0, r3
 802383e:	3710      	adds	r7, #16
 8023840:	46bd      	mov	sp, r7
 8023842:	bd80      	pop	{r7, pc}

08023844 <FOE_Error>:
 \brief    The function is called when a file transfer is aborted from the other station

*////////////////////////////////////////////////////////////////////////////////////////

void FOE_Error(UINT32 errorCode)
{
 8023844:	b580      	push	{r7, lr}
 8023846:	b082      	sub	sp, #8
 8023848:	af00      	add	r7, sp, #0
 802384a:	6078      	str	r0, [r7, #4]
    if ( nFileWriteOffset )
 802384c:	4b08      	ldr	r3, [pc, #32]	; (8023870 <FOE_Error+0x2c>)
 802384e:	681b      	ldr	r3, [r3, #0]
 8023850:	2b00      	cmp	r3, #0
 8023852:	d00a      	beq.n	802386a <FOE_Error+0x26>
    {
        /* no file is stored */
        memset(aFileName, 0, MAX_FILE_NAME_SIZE);
 8023854:	4807      	ldr	r0, [pc, #28]	; (8023874 <FOE_Error+0x30>)
 8023856:	2100      	movs	r1, #0
 8023858:	2210      	movs	r2, #16
 802385a:	f006 fd54 	bl	802a306 <memset>
        nFileWriteOffset = 0;
 802385e:	4b04      	ldr	r3, [pc, #16]	; (8023870 <FOE_Error+0x2c>)
 8023860:	2200      	movs	r2, #0
 8023862:	601a      	str	r2, [r3, #0]
        nFileSize = 0;
 8023864:	4b04      	ldr	r3, [pc, #16]	; (8023878 <FOE_Error+0x34>)
 8023866:	2200      	movs	r2, #0
 8023868:	601a      	str	r2, [r3, #0]
    }
}
 802386a:	3708      	adds	r7, #8
 802386c:	46bd      	mov	sp, r7
 802386e:	bd80      	pop	{r7, pc}
 8023870:	1ffea86c 	.word	0x1ffea86c
 8023874:	1ffea9f4 	.word	0x1ffea9f4
 8023878:	1ffea9f0 	.word	0x1ffea9f0

0802387c <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b082      	sub	sp, #8
 8023880:	af00      	add	r7, sp, #0
 8023882:	6078      	str	r0, [r7, #4]
 8023884:	460b      	mov	r3, r1
 8023886:	807b      	strh	r3, [r7, #2]
 8023888:	4613      	mov	r3, r2
 802388a:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 802388c:	887b      	ldrh	r3, [r7, #2]
 802388e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023892:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023896:	883a      	ldrh	r2, [r7, #0]
 8023898:	6878      	ldr	r0, [r7, #4]
 802389a:	4619      	mov	r1, r3
 802389c:	f006 fd28 	bl	802a2f0 <memcpy>
}
 80238a0:	3708      	adds	r7, #8
 80238a2:	46bd      	mov	sp, r7
 80238a4:	bd80      	pop	{r7, pc}
 80238a6:	bf00      	nop

080238a8 <HW_EscReadMbxMem>:
 * Reads data from the ESC and copies to slave mailbox memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscRead.
 *
 */
__STATIC_INLINE void HW_EscReadMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80238a8:	b580      	push	{r7, lr}
 80238aa:	b082      	sub	sp, #8
 80238ac:	af00      	add	r7, sp, #0
 80238ae:	6078      	str	r0, [r7, #4]
 80238b0:	460b      	mov	r3, r1
 80238b2:	807b      	strh	r3, [r7, #2]
 80238b4:	4613      	mov	r3, r2
 80238b6:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 80238b8:	887a      	ldrh	r2, [r7, #2]
 80238ba:	883b      	ldrh	r3, [r7, #0]
 80238bc:	6878      	ldr	r0, [r7, #4]
 80238be:	4611      	mov	r1, r2
 80238c0:	461a      	mov	r2, r3
 80238c2:	f7ff ffdb 	bl	802387c <HW_EscRead>
}
 80238c6:	3708      	adds	r7, #8
 80238c8:	46bd      	mov	sp, r7
 80238ca:	bd80      	pop	{r7, pc}

080238cc <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80238cc:	b580      	push	{r7, lr}
 80238ce:	b082      	sub	sp, #8
 80238d0:	af00      	add	r7, sp, #0
 80238d2:	6078      	str	r0, [r7, #4]
 80238d4:	460b      	mov	r3, r1
 80238d6:	807b      	strh	r3, [r7, #2]
 80238d8:	4613      	mov	r3, r2
 80238da:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 80238dc:	887b      	ldrh	r3, [r7, #2]
 80238de:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80238e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80238e6:	883a      	ldrh	r2, [r7, #0]
 80238e8:	4618      	mov	r0, r3
 80238ea:	6879      	ldr	r1, [r7, #4]
 80238ec:	f006 fd00 	bl	802a2f0 <memcpy>
}
 80238f0:	3708      	adds	r7, #8
 80238f2:	46bd      	mov	sp, r7
 80238f4:	bd80      	pop	{r7, pc}
 80238f6:	bf00      	nop

080238f8 <HW_EscWriteMbxMem>:
 * Writes data from the slave mailbox memory to ESC memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscWrite.
 *
 */
__STATIC_INLINE void HW_EscWriteMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80238f8:	b580      	push	{r7, lr}
 80238fa:	b082      	sub	sp, #8
 80238fc:	af00      	add	r7, sp, #0
 80238fe:	6078      	str	r0, [r7, #4]
 8023900:	460b      	mov	r3, r1
 8023902:	807b      	strh	r3, [r7, #2]
 8023904:	4613      	mov	r3, r2
 8023906:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 8023908:	887a      	ldrh	r2, [r7, #2]
 802390a:	883b      	ldrh	r3, [r7, #0]
 802390c:	6878      	ldr	r0, [r7, #4]
 802390e:	4611      	mov	r1, r2
 8023910:	461a      	mov	r2, r3
 8023912:	f7ff ffdb 	bl	80238cc <HW_EscWrite>
}
 8023916:	3708      	adds	r7, #8
 8023918:	46bd      	mov	sp, r7
 802391a:	bd80      	pop	{r7, pc}

0802391c <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 802391c:	b480      	push	{r7}
 802391e:	b085      	sub	sp, #20
 8023920:	af00      	add	r7, sp, #0
 8023922:	6078      	str	r0, [r7, #4]
 8023924:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8023926:	683b      	ldr	r3, [r7, #0]
 8023928:	885b      	ldrh	r3, [r3, #2]
 802392a:	3301      	adds	r3, #1
 802392c:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 802392e:	683b      	ldr	r3, [r7, #0]
 8023930:	889b      	ldrh	r3, [r3, #4]
 8023932:	89fa      	ldrh	r2, [r7, #14]
 8023934:	429a      	cmp	r2, r3
 8023936:	d101      	bne.n	802393c <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8023938:	2300      	movs	r3, #0
 802393a:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 802393c:	683b      	ldr	r3, [r7, #0]
 802393e:	881b      	ldrh	r3, [r3, #0]
 8023940:	89fa      	ldrh	r2, [r7, #14]
 8023942:	429a      	cmp	r2, r3
 8023944:	d101      	bne.n	802394a <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8023946:	2307      	movs	r3, #7
 8023948:	e00b      	b.n	8023962 <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 802394a:	683b      	ldr	r3, [r7, #0]
 802394c:	885b      	ldrh	r3, [r3, #2]
 802394e:	461a      	mov	r2, r3
 8023950:	683b      	ldr	r3, [r7, #0]
 8023952:	3202      	adds	r2, #2
 8023954:	6879      	ldr	r1, [r7, #4]
 8023956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 802395a:	683b      	ldr	r3, [r7, #0]
 802395c:	89fa      	ldrh	r2, [r7, #14]
 802395e:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8023960:	2300      	movs	r3, #0
}
 8023962:	4618      	mov	r0, r3
 8023964:	3714      	adds	r7, #20
 8023966:	46bd      	mov	sp, r7
 8023968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802396c:	4770      	bx	lr
 802396e:	bf00      	nop

08023970 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8023970:	b480      	push	{r7}
 8023972:	b085      	sub	sp, #20
 8023974:	af00      	add	r7, sp, #0
 8023976:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	881a      	ldrh	r2, [r3, #0]
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	885b      	ldrh	r3, [r3, #2]
 8023980:	429a      	cmp	r2, r3
 8023982:	d019      	beq.n	80239b8 <GetOutOfMbxQueue+0x48>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	881b      	ldrh	r3, [r3, #0]
 8023988:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 802398a:	897a      	ldrh	r2, [r7, #10]
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	3202      	adds	r2, #2
 8023990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023994:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 8023996:	897b      	ldrh	r3, [r7, #10]
 8023998:	3301      	adds	r3, #1
 802399a:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	897a      	ldrh	r2, [r7, #10]
 80239a0:	801a      	strh	r2, [r3, #0]
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 80239a2:	687b      	ldr	r3, [r7, #4]
 80239a4:	881a      	ldrh	r2, [r3, #0]
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	889b      	ldrh	r3, [r3, #4]
 80239aa:	429a      	cmp	r2, r3
 80239ac:	d103      	bne.n	80239b6 <GetOutOfMbxQueue+0x46>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	2200      	movs	r2, #0
 80239b2:	801a      	strh	r2, [r3, #0]
 80239b4:	e002      	b.n	80239bc <GetOutOfMbxQueue+0x4c>
 80239b6:	e001      	b.n	80239bc <GetOutOfMbxQueue+0x4c>
        }
    }
    else
        pMbx = 0;
 80239b8:	2300      	movs	r3, #0
 80239ba:	60fb      	str	r3, [r7, #12]


    LEAVE_MBX_CRITICAL;

    return pMbx;
 80239bc:	68fb      	ldr	r3, [r7, #12]
}
 80239be:	4618      	mov	r0, r3
 80239c0:	3714      	adds	r7, #20
 80239c2:	46bd      	mov	sp, r7
 80239c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239c8:	4770      	bx	lr
 80239ca:	bf00      	nop

080239cc <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 80239cc:	b480      	push	{r7}
 80239ce:	b083      	sub	sp, #12
 80239d0:	af00      	add	r7, sp, #0
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 80239d2:	4b29      	ldr	r3, [pc, #164]	; (8023a78 <MBX_Init+0xac>)
 80239d4:	2222      	movs	r2, #34	; 0x22
 80239d6:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 80239d8:	4b28      	ldr	r3, [pc, #160]	; (8023a7c <MBX_Init+0xb0>)
 80239da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80239de:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 80239e0:	4b27      	ldr	r3, [pc, #156]	; (8023a80 <MBX_Init+0xb4>)
 80239e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80239e6:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 80239e8:	4b26      	ldr	r3, [pc, #152]	; (8023a84 <MBX_Init+0xb8>)
 80239ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80239ee:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 80239f0:	4b25      	ldr	r3, [pc, #148]	; (8023a88 <MBX_Init+0xbc>)
 80239f2:	2200      	movs	r2, #0
 80239f4:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 80239f6:	4b24      	ldr	r3, [pc, #144]	; (8023a88 <MBX_Init+0xbc>)
 80239f8:	2200      	movs	r2, #0
 80239fa:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 80239fc:	4b22      	ldr	r3, [pc, #136]	; (8023a88 <MBX_Init+0xbc>)
 80239fe:	220a      	movs	r2, #10
 8023a00:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8023a02:	4b22      	ldr	r3, [pc, #136]	; (8023a8c <MBX_Init+0xc0>)
 8023a04:	2200      	movs	r2, #0
 8023a06:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8023a08:	4b20      	ldr	r3, [pc, #128]	; (8023a8c <MBX_Init+0xc0>)
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8023a0e:	4b1f      	ldr	r3, [pc, #124]	; (8023a8c <MBX_Init+0xc0>)
 8023a10:	220a      	movs	r2, #10
 8023a12:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8023a14:	4b1e      	ldr	r3, [pc, #120]	; (8023a90 <MBX_Init+0xc4>)
 8023a16:	2200      	movs	r2, #0
 8023a18:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 8023a1a:	4b1e      	ldr	r3, [pc, #120]	; (8023a94 <MBX_Init+0xc8>)
 8023a1c:	2200      	movs	r2, #0
 8023a1e:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8023a20:	4b1d      	ldr	r3, [pc, #116]	; (8023a98 <MBX_Init+0xcc>)
 8023a22:	2200      	movs	r2, #0
 8023a24:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8023a26:	4b1d      	ldr	r3, [pc, #116]	; (8023a9c <MBX_Init+0xd0>)
 8023a28:	2200      	movs	r2, #0
 8023a2a:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8023a2c:	4b1c      	ldr	r3, [pc, #112]	; (8023aa0 <MBX_Init+0xd4>)
 8023a2e:	2200      	movs	r2, #0
 8023a30:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 8023a32:	2300      	movs	r3, #0
 8023a34:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023a36:	4b1b      	ldr	r3, [pc, #108]	; (8023aa4 <MBX_Init+0xd8>)
 8023a38:	781b      	ldrb	r3, [r3, #0]
 8023a3a:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 8023a3c:	79fb      	ldrb	r3, [r7, #7]
 8023a3e:	f023 0302 	bic.w	r3, r3, #2
 8023a42:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023a44:	4a17      	ldr	r2, [pc, #92]	; (8023aa4 <MBX_Init+0xd8>)
 8023a46:	79fb      	ldrb	r3, [r7, #7]
 8023a48:	7013      	strb	r3, [r2, #0]
    }
    bMbxRunning = FALSE;
 8023a4a:	4b17      	ldr	r3, [pc, #92]	; (8023aa8 <MBX_Init+0xdc>)
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8023a50:	4b16      	ldr	r3, [pc, #88]	; (8023aac <MBX_Init+0xe0>)
 8023a52:	2200      	movs	r2, #0
 8023a54:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8023a56:	4b16      	ldr	r3, [pc, #88]	; (8023ab0 <MBX_Init+0xe4>)
 8023a58:	2200      	movs	r2, #0
 8023a5a:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8023a5c:	4b15      	ldr	r3, [pc, #84]	; (8023ab4 <MBX_Init+0xe8>)
 8023a5e:	2200      	movs	r2, #0
 8023a60:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8023a62:	4b15      	ldr	r3, [pc, #84]	; (8023ab8 <MBX_Init+0xec>)
 8023a64:	2200      	movs	r2, #0
 8023a66:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8023a68:	4b14      	ldr	r3, [pc, #80]	; (8023abc <MBX_Init+0xf0>)
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	701a      	strb	r2, [r3, #0]
}
 8023a6e:	370c      	adds	r7, #12
 8023a70:	46bd      	mov	sp, r7
 8023a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a76:	4770      	bx	lr
 8023a78:	1ffeac8e 	.word	0x1ffeac8e
 8023a7c:	1ffeac7c 	.word	0x1ffeac7c
 8023a80:	1ffeac74 	.word	0x1ffeac74
 8023a84:	1ffeac86 	.word	0x1ffeac86
 8023a88:	1ffeac3c 	.word	0x1ffeac3c
 8023a8c:	1ffeac08 	.word	0x1ffeac08
 8023a90:	1ffeac88 	.word	0x1ffeac88
 8023a94:	1ffeac94 	.word	0x1ffeac94
 8023a98:	1ffeac80 	.word	0x1ffeac80
 8023a9c:	1ffeac78 	.word	0x1ffeac78
 8023aa0:	1ffeac90 	.word	0x1ffeac90
 8023aa4:	5401080f 	.word	0x5401080f
 8023aa8:	1ffeac72 	.word	0x1ffeac72
 8023aac:	1ffeac71 	.word	0x1ffeac71
 8023ab0:	1ffeac84 	.word	0x1ffeac84
 8023ab4:	1ffeac8d 	.word	0x1ffeac8d
 8023ab8:	1ffeac8c 	.word	0x1ffeac8c
 8023abc:	1ffeac04 	.word	0x1ffeac04

08023ac0 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8023ac0:	b580      	push	{r7, lr}
 8023ac2:	b082      	sub	sp, #8
 8023ac4:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8023ac6:	2300      	movs	r3, #0
 8023ac8:	80fb      	strh	r3, [r7, #6]
    /* get address of the receive mailbox sync manager (SM0) */
/*ECATCHANGE_START(V5.11) HW1*/
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8023aca:	2000      	movs	r0, #0
 8023acc:	f7fd ff4a 	bl	8021964 <GetSyncMan>
 8023ad0:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8023ad2:	683b      	ldr	r3, [r7, #0]
 8023ad4:	885b      	ldrh	r3, [r3, #2]
 8023ad6:	b29a      	uxth	r2, r3
 8023ad8:	4b30      	ldr	r3, [pc, #192]	; (8023b9c <MBX_StartMailboxHandler+0xdc>)
 8023ada:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8023adc:	683b      	ldr	r3, [r7, #0]
 8023ade:	881b      	ldrh	r3, [r3, #0]
 8023ae0:	b29a      	uxth	r2, r3
 8023ae2:	4b2f      	ldr	r3, [pc, #188]	; (8023ba0 <MBX_StartMailboxHandler+0xe0>)
 8023ae4:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8023ae6:	2001      	movs	r0, #1
 8023ae8:	f7fd ff3c 	bl	8021964 <GetSyncMan>
 8023aec:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8023aee:	683b      	ldr	r3, [r7, #0]
 8023af0:	885b      	ldrh	r3, [r3, #2]
 8023af2:	b29a      	uxth	r2, r3
 8023af4:	4b2b      	ldr	r3, [pc, #172]	; (8023ba4 <MBX_StartMailboxHandler+0xe4>)
 8023af6:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8023af8:	683b      	ldr	r3, [r7, #0]
 8023afa:	881b      	ldrh	r3, [r3, #0]
 8023afc:	b29a      	uxth	r2, r3
 8023afe:	4b2a      	ldr	r3, [pc, #168]	; (8023ba8 <MBX_StartMailboxHandler+0xe8>)
 8023b00:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8023b02:	4b27      	ldr	r3, [pc, #156]	; (8023ba0 <MBX_StartMailboxHandler+0xe0>)
 8023b04:	881b      	ldrh	r3, [r3, #0]
 8023b06:	461a      	mov	r2, r3
 8023b08:	4b24      	ldr	r3, [pc, #144]	; (8023b9c <MBX_StartMailboxHandler+0xdc>)
 8023b0a:	881b      	ldrh	r3, [r3, #0]
 8023b0c:	4413      	add	r3, r2
 8023b0e:	4a26      	ldr	r2, [pc, #152]	; (8023ba8 <MBX_StartMailboxHandler+0xe8>)
 8023b10:	8812      	ldrh	r2, [r2, #0]
 8023b12:	4293      	cmp	r3, r2
 8023b14:	dd0c      	ble.n	8023b30 <MBX_StartMailboxHandler+0x70>
 8023b16:	4b22      	ldr	r3, [pc, #136]	; (8023ba0 <MBX_StartMailboxHandler+0xe0>)
 8023b18:	881b      	ldrh	r3, [r3, #0]
 8023b1a:	461a      	mov	r2, r3
 8023b1c:	4b22      	ldr	r3, [pc, #136]	; (8023ba8 <MBX_StartMailboxHandler+0xe8>)
 8023b1e:	881b      	ldrh	r3, [r3, #0]
 8023b20:	4619      	mov	r1, r3
 8023b22:	4b20      	ldr	r3, [pc, #128]	; (8023ba4 <MBX_StartMailboxHandler+0xe4>)
 8023b24:	881b      	ldrh	r3, [r3, #0]
 8023b26:	440b      	add	r3, r1
 8023b28:	429a      	cmp	r2, r3
 8023b2a:	da01      	bge.n	8023b30 <MBX_StartMailboxHandler+0x70>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8023b2c:	2316      	movs	r3, #22
 8023b2e:	e031      	b.n	8023b94 <MBX_StartMailboxHandler+0xd4>
    }

    /* enable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    EnableSyncManChannel(MAILBOX_WRITE);
 8023b30:	2000      	movs	r0, #0
 8023b32:	f7fd ff59 	bl	80219e8 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8023b36:	2001      	movs	r0, #1
 8023b38:	f7fd ff56 	bl	80219e8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

/* ECATCHANGE_START(V5.11) MBX2*/
        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8023b3c:	4b17      	ldr	r3, [pc, #92]	; (8023b9c <MBX_StartMailboxHandler+0xdc>)
 8023b3e:	881b      	ldrh	r3, [r3, #0]
 8023b40:	4618      	mov	r0, r3
 8023b42:	f006 fbc5 	bl	802a2d0 <malloc>
 8023b46:	4603      	mov	r3, r0
 8023b48:	461a      	mov	r2, r3
 8023b4a:	4b18      	ldr	r3, [pc, #96]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b4c:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8023b4e:	4b17      	ldr	r3, [pc, #92]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b50:	681b      	ldr	r3, [r3, #0]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d115      	bne.n	8023b82 <MBX_StartMailboxHandler+0xc2>
        {
            bNoMbxMemoryAvailable = TRUE;
 8023b56:	4b16      	ldr	r3, [pc, #88]	; (8023bb0 <MBX_StartMailboxHandler+0xf0>)
 8023b58:	2201      	movs	r2, #1
 8023b5a:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8023b5c:	200a      	movs	r0, #10
 8023b5e:	f006 fbb7 	bl	802a2d0 <malloc>
 8023b62:	4603      	mov	r3, r0
 8023b64:	461a      	mov	r2, r3
 8023b66:	4b11      	ldr	r3, [pc, #68]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b68:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8023b6a:	4b10      	ldr	r3, [pc, #64]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	2b00      	cmp	r3, #0
 8023b70:	d101      	bne.n	8023b76 <MBX_StartMailboxHandler+0xb6>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8023b72:	2302      	movs	r3, #2
 8023b74:	80fb      	strh	r3, [r7, #6]
            }
           
            APPL_FreeMailboxBuffer(psWriteMbx);
 8023b76:	4b0d      	ldr	r3, [pc, #52]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	f006 fbb0 	bl	802a2e0 <free>
 8023b80:	e007      	b.n	8023b92 <MBX_StartMailboxHandler+0xd2>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8023b82:	4b0b      	ldr	r3, [pc, #44]	; (8023bb0 <MBX_StartMailboxHandler+0xf0>)
 8023b84:	2200      	movs	r2, #0
 8023b86:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8023b88:	4b08      	ldr	r3, [pc, #32]	; (8023bac <MBX_StartMailboxHandler+0xec>)
 8023b8a:	681b      	ldr	r3, [r3, #0]
 8023b8c:	4618      	mov	r0, r3
 8023b8e:	f006 fba7 	bl	802a2e0 <free>
        }
/* ECATCHANGE_END(V5.11) MBX2*/

    return result;
 8023b92:	88fb      	ldrh	r3, [r7, #6]
}
 8023b94:	4618      	mov	r0, r3
 8023b96:	3708      	adds	r7, #8
 8023b98:	46bd      	mov	sp, r7
 8023b9a:	bd80      	pop	{r7, pc}
 8023b9c:	1ffeac8e 	.word	0x1ffeac8e
 8023ba0:	1ffeac74 	.word	0x1ffeac74
 8023ba4:	1ffeac7c 	.word	0x1ffeac7c
 8023ba8:	1ffeac86 	.word	0x1ffeac86
 8023bac:	1ffeac88 	.word	0x1ffeac88
 8023bb0:	1ffeac70 	.word	0x1ffeac70

08023bb4 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8023bb4:	b580      	push	{r7, lr}
 8023bb6:	b082      	sub	sp, #8
 8023bb8:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8023bba:	4b3f      	ldr	r3, [pc, #252]	; (8023cb8 <MBX_StopMailboxHandler+0x104>)
 8023bbc:	2200      	movs	r2, #0
 8023bbe:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    DisableSyncManChannel(MAILBOX_WRITE);
 8023bc0:	2000      	movs	r0, #0
 8023bc2:	f7fd fee7 	bl	8021994 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8023bc6:	2001      	movs	r0, #1
 8023bc8:	f7fd fee4 	bl	8021994 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8023bcc:	4b3b      	ldr	r3, [pc, #236]	; (8023cbc <MBX_StopMailboxHandler+0x108>)
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d004      	beq.n	8023bde <MBX_StopMailboxHandler+0x2a>
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8023bd4:	4b39      	ldr	r3, [pc, #228]	; (8023cbc <MBX_StopMailboxHandler+0x108>)
 8023bd6:	681b      	ldr	r3, [r3, #0]
 8023bd8:	4618      	mov	r0, r3
 8023bda:	f006 fb81 	bl	802a2e0 <free>

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8023bde:	4b38      	ldr	r3, [pc, #224]	; (8023cc0 <MBX_StopMailboxHandler+0x10c>)
 8023be0:	681b      	ldr	r3, [r3, #0]
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	d00a      	beq.n	8023bfc <MBX_StopMailboxHandler+0x48>
 8023be6:	4b36      	ldr	r3, [pc, #216]	; (8023cc0 <MBX_StopMailboxHandler+0x10c>)
 8023be8:	681a      	ldr	r2, [r3, #0]
 8023bea:	4b34      	ldr	r3, [pc, #208]	; (8023cbc <MBX_StopMailboxHandler+0x108>)
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	429a      	cmp	r2, r3
 8023bf0:	d004      	beq.n	8023bfc <MBX_StopMailboxHandler+0x48>
        APPL_FreeMailboxBuffer(psStoreMbx);
 8023bf2:	4b33      	ldr	r3, [pc, #204]	; (8023cc0 <MBX_StopMailboxHandler+0x10c>)
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	4618      	mov	r0, r3
 8023bf8:	f006 fb72 	bl	802a2e0 <free>

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8023bfc:	4b31      	ldr	r3, [pc, #196]	; (8023cc4 <MBX_StopMailboxHandler+0x110>)
 8023bfe:	681b      	ldr	r3, [r3, #0]
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	d010      	beq.n	8023c26 <MBX_StopMailboxHandler+0x72>
 8023c04:	4b2f      	ldr	r3, [pc, #188]	; (8023cc4 <MBX_StopMailboxHandler+0x110>)
 8023c06:	681a      	ldr	r2, [r3, #0]
 8023c08:	4b2c      	ldr	r3, [pc, #176]	; (8023cbc <MBX_StopMailboxHandler+0x108>)
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	429a      	cmp	r2, r3
 8023c0e:	d00a      	beq.n	8023c26 <MBX_StopMailboxHandler+0x72>
 8023c10:	4b2c      	ldr	r3, [pc, #176]	; (8023cc4 <MBX_StopMailboxHandler+0x110>)
 8023c12:	681a      	ldr	r2, [r3, #0]
 8023c14:	4b2a      	ldr	r3, [pc, #168]	; (8023cc0 <MBX_StopMailboxHandler+0x10c>)
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	429a      	cmp	r2, r3
 8023c1a:	d004      	beq.n	8023c26 <MBX_StopMailboxHandler+0x72>
        APPL_FreeMailboxBuffer(psReadMbx);
 8023c1c:	4b29      	ldr	r3, [pc, #164]	; (8023cc4 <MBX_StopMailboxHandler+0x110>)
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	4618      	mov	r0, r3
 8023c22:	f006 fb5d 	bl	802a2e0 <free>


    psRepeatMbx = NULL;
 8023c26:	4b25      	ldr	r3, [pc, #148]	; (8023cbc <MBX_StopMailboxHandler+0x108>)
 8023c28:	2200      	movs	r2, #0
 8023c2a:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 8023c2c:	4b25      	ldr	r3, [pc, #148]	; (8023cc4 <MBX_StopMailboxHandler+0x110>)
 8023c2e:	2200      	movs	r2, #0
 8023c30:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 8023c32:	4b23      	ldr	r3, [pc, #140]	; (8023cc0 <MBX_StopMailboxHandler+0x10c>)
 8023c34:	2200      	movs	r2, #0
 8023c36:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8023c38:	4b23      	ldr	r3, [pc, #140]	; (8023cc8 <MBX_StopMailboxHandler+0x114>)
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 8023c3e:	2300      	movs	r3, #0
 8023c40:	70fb      	strb	r3, [r7, #3]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023c42:	4b22      	ldr	r3, [pc, #136]	; (8023ccc <MBX_StopMailboxHandler+0x118>)
 8023c44:	781b      	ldrb	r3, [r3, #0]
 8023c46:	70fb      	strb	r3, [r7, #3]
        sm1Activate &= ~0x02;
 8023c48:	78fb      	ldrb	r3, [r7, #3]
 8023c4a:	f023 0302 	bic.w	r3, r3, #2
 8023c4e:	70fb      	strb	r3, [r7, #3]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023c50:	4a1e      	ldr	r2, [pc, #120]	; (8023ccc <MBX_StopMailboxHandler+0x118>)
 8023c52:	78fb      	ldrb	r3, [r7, #3]
 8023c54:	7013      	strb	r3, [r2, #0]
    }
    bSendMbxIsFull         = FALSE;
 8023c56:	4b1e      	ldr	r3, [pc, #120]	; (8023cd0 <MBX_StopMailboxHandler+0x11c>)
 8023c58:	2200      	movs	r2, #0
 8023c5a:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8023c5c:	4b1d      	ldr	r3, [pc, #116]	; (8023cd4 <MBX_StopMailboxHandler+0x120>)
 8023c5e:	2200      	movs	r2, #0
 8023c60:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8023c62:	4b1d      	ldr	r3, [pc, #116]	; (8023cd8 <MBX_StopMailboxHandler+0x124>)
 8023c64:	2200      	movs	r2, #0
 8023c66:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 8023c68:	4b1c      	ldr	r3, [pc, #112]	; (8023cdc <MBX_StopMailboxHandler+0x128>)
 8023c6a:	2200      	movs	r2, #0
 8023c6c:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8023c6e:	4b1c      	ldr	r3, [pc, #112]	; (8023ce0 <MBX_StopMailboxHandler+0x12c>)
 8023c70:	2200      	movs	r2, #0
 8023c72:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8023c74:	481b      	ldr	r0, [pc, #108]	; (8023ce4 <MBX_StopMailboxHandler+0x130>)
 8023c76:	f7ff fe7b 	bl	8023970 <GetOutOfMbxQueue>
 8023c7a:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8023c7c:	687b      	ldr	r3, [r7, #4]
 8023c7e:	2b00      	cmp	r3, #0
 8023c80:	d004      	beq.n	8023c8c <MBX_StopMailboxHandler+0xd8>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8023c82:	6878      	ldr	r0, [r7, #4]
 8023c84:	f006 fb2c 	bl	802a2e0 <free>
            pMbx = NULL;
 8023c88:	2300      	movs	r3, #0
 8023c8a:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	d1f0      	bne.n	8023c74 <MBX_StopMailboxHandler+0xc0>
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8023c92:	4815      	ldr	r0, [pc, #84]	; (8023ce8 <MBX_StopMailboxHandler+0x134>)
 8023c94:	f7ff fe6c 	bl	8023970 <GetOutOfMbxQueue>
 8023c98:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	d004      	beq.n	8023caa <MBX_StopMailboxHandler+0xf6>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8023ca0:	6878      	ldr	r0, [r7, #4]
 8023ca2:	f006 fb1d 	bl	802a2e0 <free>
            pMbx = NULL;
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d1f0      	bne.n	8023c92 <MBX_StopMailboxHandler+0xde>

}
 8023cb0:	3708      	adds	r7, #8
 8023cb2:	46bd      	mov	sp, r7
 8023cb4:	bd80      	pop	{r7, pc}
 8023cb6:	bf00      	nop
 8023cb8:	1ffeac72 	.word	0x1ffeac72
 8023cbc:	1ffeac94 	.word	0x1ffeac94
 8023cc0:	1ffeac78 	.word	0x1ffeac78
 8023cc4:	1ffeac80 	.word	0x1ffeac80
 8023cc8:	1ffeac90 	.word	0x1ffeac90
 8023ccc:	5401080f 	.word	0x5401080f
 8023cd0:	1ffeac71 	.word	0x1ffeac71
 8023cd4:	1ffeac84 	.word	0x1ffeac84
 8023cd8:	1ffeac8d 	.word	0x1ffeac8d
 8023cdc:	1ffeac8c 	.word	0x1ffeac8c
 8023ce0:	1ffeac04 	.word	0x1ffeac04
 8023ce4:	1ffeac3c 	.word	0x1ffeac3c
 8023ce8:	1ffeac08 	.word	0x1ffeac08

08023cec <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8023cec:	b580      	push	{r7, lr}
 8023cee:	b084      	sub	sp, #16
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
    UINT8 result;

    /*only FoE is allowed in Boot mode*/
    if(bBootMode == TRUE && (MBX_TYPE_FOE != ((pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )))
 8023cf4:	4b14      	ldr	r3, [pc, #80]	; (8023d48 <MailboxServiceInd+0x5c>)
 8023cf6:	781b      	ldrb	r3, [r3, #0]
 8023cf8:	2b00      	cmp	r3, #0
 8023cfa:	d007      	beq.n	8023d0c <MailboxServiceInd+0x20>
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	795b      	ldrb	r3, [r3, #5]
 8023d00:	f003 030f 	and.w	r3, r3, #15
 8023d04:	2b04      	cmp	r3, #4
 8023d06:	d001      	beq.n	8023d0c <MailboxServiceInd+0x20>
        return MBXERR_UNSUPPORTEDPROTOCOL;
 8023d08:	2302      	movs	r3, #2
 8023d0a:	e018      	b.n	8023d3e <MailboxServiceInd+0x52>

    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	795b      	ldrb	r3, [r3, #5]
 8023d10:	f003 030f 	and.w	r3, r3, #15
 8023d14:	2b03      	cmp	r3, #3
 8023d16:	d002      	beq.n	8023d1e <MailboxServiceInd+0x32>
 8023d18:	2b04      	cmp	r3, #4
 8023d1a:	d006      	beq.n	8023d2a <MailboxServiceInd+0x3e>
 8023d1c:	e00b      	b.n	8023d36 <MailboxServiceInd+0x4a>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8023d1e:	6878      	ldr	r0, [r7, #4]
 8023d20:	f7fd fad4 	bl	80212cc <COE_ServiceInd>
 8023d24:	4603      	mov	r3, r0
 8023d26:	73fb      	strb	r3, [r7, #15]
        break;
 8023d28:	e008      	b.n	8023d3c <MailboxServiceInd+0x50>

    case MBX_TYPE_FOE:
        /* FoE datagram received */
        result = FOE_ServiceInd((TFOEMBX MBXMEM *) pMbx);
 8023d2a:	6878      	ldr	r0, [r7, #4]
 8023d2c:	f7fd fb34 	bl	8021398 <FOE_ServiceInd>
 8023d30:	4603      	mov	r3, r0
 8023d32:	73fb      	strb	r3, [r7, #15]
        break;
 8023d34:	e002      	b.n	8023d3c <MailboxServiceInd+0x50>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8023d36:	2302      	movs	r3, #2
 8023d38:	73fb      	strb	r3, [r7, #15]
        break;
 8023d3a:	bf00      	nop
    }

    return result;
 8023d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d3e:	4618      	mov	r0, r3
 8023d40:	3710      	adds	r7, #16
 8023d42:	46bd      	mov	sp, r7
 8023d44:	bd80      	pop	{r7, pc}
 8023d46:	bf00      	nop
 8023d48:	1ffea85a 	.word	0x1ffea85a

08023d4c <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 8023d4c:	b580      	push	{r7, lr}
 8023d4e:	b084      	sub	sp, #16
 8023d50:	af00      	add	r7, sp, #0
 8023d52:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8023d54:	2300      	movs	r3, #0
 8023d56:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	795b      	ldrb	r3, [r3, #5]
 8023d5c:	091b      	lsrs	r3, r3, #4
 8023d5e:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	881b      	ldrh	r3, [r3, #0]
 8023d64:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 8023d66:	89bb      	ldrh	r3, [r7, #12]
 8023d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023d6c:	d914      	bls.n	8023d98 <MBX_MailboxWriteInd+0x4c>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	2204      	movs	r2, #4
 8023d72:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	795b      	ldrb	r3, [r3, #5]
 8023d78:	f023 030f 	bic.w	r3, r3, #15
 8023d7c:	b2da      	uxtb	r2, r3
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	715a      	strb	r2, [r3, #5]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	2201      	movs	r2, #1
 8023d86:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	2208      	movs	r2, #8
 8023d8c:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 8023d8e:	6878      	ldr	r0, [r7, #4]
 8023d90:	2100      	movs	r1, #0
 8023d92:	f000 f8f5 	bl	8023f80 <MBX_MailboxSendReq>
 8023d96:	e02f      	b.n	8023df8 <MBX_MailboxWriteInd+0xac>
    else
    /* if the mailbox datagram counter (Bit 4-6 of Byte 5 of the mailbox header) is unequal zero,
       the master supports the mailbox data link layer,
        in that case a repeated mailbox write request will be detected, if the counter is unequal zero
        and unchanged */
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 8023d98:	7bbb      	ldrb	r3, [r7, #14]
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	d004      	beq.n	8023da8 <MBX_MailboxWriteInd+0x5c>
 8023d9e:	4b18      	ldr	r3, [pc, #96]	; (8023e00 <MBX_MailboxWriteInd+0xb4>)
 8023da0:	781b      	ldrb	r3, [r3, #0]
 8023da2:	7bba      	ldrb	r2, [r7, #14]
 8023da4:	429a      	cmp	r2, r3
 8023da6:	d022      	beq.n	8023dee <MBX_MailboxWriteInd+0xa2>
    {
        /* new mailbox service received */
        /* mbxCounter = 0: old EtherCAT master */
        /* new MBX service received, store the new mailbox counter */
        u8MbxWriteCounter = mbxCounter;
 8023da8:	4a15      	ldr	r2, [pc, #84]	; (8023e00 <MBX_MailboxWriteInd+0xb4>)
 8023daa:	7bbb      	ldrb	r3, [r7, #14]
 8023dac:	7013      	strb	r3, [r2, #0]

        {
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8023dae:	6878      	ldr	r0, [r7, #4]
 8023db0:	4914      	ldr	r1, [pc, #80]	; (8023e04 <MBX_MailboxWriteInd+0xb8>)
 8023db2:	f7ff fdb3 	bl	802391c <PutInMbxQueue>
 8023db6:	4603      	mov	r3, r0
 8023db8:	73fb      	strb	r3, [r7, #15]
        }

        if ( result != 0 )
 8023dba:	7bfb      	ldrb	r3, [r7, #15]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d015      	beq.n	8023dec <MBX_MailboxWriteInd+0xa0>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	2204      	movs	r2, #4
 8023dc4:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8023dc6:	687b      	ldr	r3, [r7, #4]
 8023dc8:	795b      	ldrb	r3, [r3, #5]
 8023dca:	f023 030f 	bic.w	r3, r3, #15
 8023dce:	b2da      	uxtb	r2, r3
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	2201      	movs	r2, #1
 8023dd8:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8023dda:	7bfb      	ldrb	r3, [r7, #15]
 8023ddc:	b29a      	uxth	r2, r3
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023de2:	6878      	ldr	r0, [r7, #4]
 8023de4:	2100      	movs	r1, #0
 8023de6:	f000 f8cb 	bl	8023f80 <MBX_MailboxSendReq>
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
        }

        if ( result != 0 )
 8023dea:	e005      	b.n	8023df8 <MBX_MailboxWriteInd+0xac>
 8023dec:	e004      	b.n	8023df8 <MBX_MailboxWriteInd+0xac>
        }
    }
    // the mailbox buffer has to be freed here
    else
    {
        APPL_FreeMailboxBuffer(pMbx);
 8023dee:	6878      	ldr	r0, [r7, #4]
 8023df0:	f006 fa76 	bl	802a2e0 <free>
        pMbx = NULL;
 8023df4:	2300      	movs	r3, #0
 8023df6:	607b      	str	r3, [r7, #4]
    }
}
 8023df8:	3710      	adds	r7, #16
 8023dfa:	46bd      	mov	sp, r7
 8023dfc:	bd80      	pop	{r7, pc}
 8023dfe:	bf00      	nop
 8023e00:	1ffeac8c 	.word	0x1ffeac8c
 8023e04:	1ffeac3c 	.word	0x1ffeac3c

08023e08 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 8023e08:	b580      	push	{r7, lr}
 8023e0a:	b082      	sub	sp, #8
 8023e0c:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 8023e0e:	4b34      	ldr	r3, [pc, #208]	; (8023ee0 <MBX_MailboxReadInd+0xd8>)
 8023e10:	2200      	movs	r2, #0
 8023e12:	701a      	strb	r2, [r3, #0]
    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8023e14:	4b33      	ldr	r3, [pc, #204]	; (8023ee4 <MBX_MailboxReadInd+0xdc>)
 8023e16:	681b      	ldr	r3, [r3, #0]
 8023e18:	2b00      	cmp	r3, #0
 8023e1a:	d00b      	beq.n	8023e34 <MBX_MailboxReadInd+0x2c>
 8023e1c:	4b32      	ldr	r3, [pc, #200]	; (8023ee8 <MBX_MailboxReadInd+0xe0>)
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	d107      	bne.n	8023e34 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8023e24:	4b2f      	ldr	r3, [pc, #188]	; (8023ee4 <MBX_MailboxReadInd+0xdc>)
 8023e26:	681b      	ldr	r3, [r3, #0]
 8023e28:	4618      	mov	r0, r3
 8023e2a:	f006 fa59 	bl	802a2e0 <free>
        psRepeatMbx = NULL;
 8023e2e:	4b2d      	ldr	r3, [pc, #180]	; (8023ee4 <MBX_MailboxReadInd+0xdc>)
 8023e30:	2200      	movs	r2, #0
 8023e32:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8023e34:	4b2d      	ldr	r3, [pc, #180]	; (8023eec <MBX_MailboxReadInd+0xe4>)
 8023e36:	681b      	ldr	r3, [r3, #0]
 8023e38:	4a2a      	ldr	r2, [pc, #168]	; (8023ee4 <MBX_MailboxReadInd+0xdc>)
 8023e3a:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 8023e3c:	4b2a      	ldr	r3, [pc, #168]	; (8023ee8 <MBX_MailboxReadInd+0xe0>)
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	d008      	beq.n	8023e56 <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8023e44:	4b28      	ldr	r3, [pc, #160]	; (8023ee8 <MBX_MailboxReadInd+0xe0>)
 8023e46:	681b      	ldr	r3, [r3, #0]
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f000 f9a7 	bl	802419c <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 8023e4e:	4b26      	ldr	r3, [pc, #152]	; (8023ee8 <MBX_MailboxReadInd+0xe0>)
 8023e50:	2200      	movs	r2, #0
 8023e52:	601a      	str	r2, [r3, #0]
 8023e54:	e009      	b.n	8023e6a <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8023e56:	4826      	ldr	r0, [pc, #152]	; (8023ef0 <MBX_MailboxReadInd+0xe8>)
 8023e58:	f7ff fd8a 	bl	8023970 <GetOutOfMbxQueue>
 8023e5c:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d002      	beq.n	8023e6a <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 8023e64:	6878      	ldr	r0, [r7, #4]
 8023e66:	f000 f999 	bl	802419c <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 8023e6a:	4b22      	ldr	r3, [pc, #136]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023e6c:	781b      	ldrb	r3, [r3, #0]
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	d033      	beq.n	8023eda <MBX_MailboxReadInd+0xd2>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 8023e72:	4b20      	ldr	r3, [pc, #128]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023e74:	781b      	ldrb	r3, [r3, #0]
 8023e76:	f003 0302 	and.w	r3, r3, #2
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d01b      	beq.n	8023eb6 <MBX_MailboxReadInd+0xae>
        {
           UINT8 result = 0;
 8023e7e:	2300      	movs	r3, #0
 8023e80:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 8023e82:	4b1c      	ldr	r3, [pc, #112]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023e84:	781b      	ldrb	r3, [r3, #0]
 8023e86:	f023 0302 	bic.w	r3, r3, #2
 8023e8a:	b2da      	uxtb	r2, r3
 8023e8c:	4b19      	ldr	r3, [pc, #100]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023e8e:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 8023e90:	4b19      	ldr	r3, [pc, #100]	; (8023ef8 <MBX_MailboxReadInd+0xf0>)
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	4618      	mov	r0, r3
 8023e96:	f7fd fa51 	bl	802133c <COE_ContinueInd>
 8023e9a:	4603      	mov	r3, r0
 8023e9c:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 8023e9e:	78fb      	ldrb	r3, [r7, #3]
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	d007      	beq.n	8023eb4 <MBX_MailboxReadInd+0xac>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 8023ea4:	4b13      	ldr	r3, [pc, #76]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023ea6:	781b      	ldrb	r3, [r3, #0]
 8023ea8:	f043 0302 	orr.w	r3, r3, #2
 8023eac:	b2da      	uxtb	r2, r3
 8023eae:	4b11      	ldr	r3, [pc, #68]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023eb0:	701a      	strb	r2, [r3, #0]
 8023eb2:	e012      	b.n	8023eda <MBX_MailboxReadInd+0xd2>
 8023eb4:	e011      	b.n	8023eda <MBX_MailboxReadInd+0xd2>
            }
        }
        else
        if ( u8MailboxSendReqStored & FOE_SERVICE )
 8023eb6:	4b0f      	ldr	r3, [pc, #60]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023eb8:	781b      	ldrb	r3, [r3, #0]
 8023eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d00b      	beq.n	8023eda <MBX_MailboxReadInd+0xd2>
        {
            /* reset the flag indicating that FoE service to be sent was stored */
            u8MailboxSendReqStored &= ~FOE_SERVICE;
 8023ec2:	4b0c      	ldr	r3, [pc, #48]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023ec4:	781b      	ldrb	r3, [r3, #0]
 8023ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023eca:	b2da      	uxtb	r2, r3
 8023ecc:	4b09      	ldr	r3, [pc, #36]	; (8023ef4 <MBX_MailboxReadInd+0xec>)
 8023ece:	701a      	strb	r2, [r3, #0]
            /* call FoE function that will send the stored FoE service */
            FOE_ContinueInd(psWriteMbx);
 8023ed0:	4b09      	ldr	r3, [pc, #36]	; (8023ef8 <MBX_MailboxReadInd+0xf0>)
 8023ed2:	681b      	ldr	r3, [r3, #0]
 8023ed4:	4618      	mov	r0, r3
 8023ed6:	f7fd fc73 	bl	80217c0 <FOE_ContinueInd>
        }
        else
        {
        }
    }
}
 8023eda:	3708      	adds	r7, #8
 8023edc:	46bd      	mov	sp, r7
 8023ede:	bd80      	pop	{r7, pc}
 8023ee0:	1ffeac71 	.word	0x1ffeac71
 8023ee4:	1ffeac94 	.word	0x1ffeac94
 8023ee8:	1ffeac78 	.word	0x1ffeac78
 8023eec:	1ffeac80 	.word	0x1ffeac80
 8023ef0:	1ffeac08 	.word	0x1ffeac08
 8023ef4:	1ffeac8d 	.word	0x1ffeac8d
 8023ef8:	1ffeac88 	.word	0x1ffeac88

08023efc <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8023efc:	b580      	push	{r7, lr}
 8023efe:	b082      	sub	sp, #8
 8023f00:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 8023f02:	4b1a      	ldr	r3, [pc, #104]	; (8023f6c <MBX_MailboxRepeatReq+0x70>)
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d01d      	beq.n	8023f46 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8023f0a:	4b18      	ldr	r3, [pc, #96]	; (8023f6c <MBX_MailboxRepeatReq+0x70>)
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 8023f10:	4b17      	ldr	r3, [pc, #92]	; (8023f70 <MBX_MailboxRepeatReq+0x74>)
 8023f12:	781b      	ldrb	r3, [r3, #0]
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d010      	beq.n	8023f3a <MBX_MailboxRepeatReq+0x3e>
 8023f18:	4b16      	ldr	r3, [pc, #88]	; (8023f74 <MBX_MailboxRepeatReq+0x78>)
 8023f1a:	681b      	ldr	r3, [r3, #0]
 8023f1c:	2b00      	cmp	r3, #0
 8023f1e:	d10c      	bne.n	8023f3a <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
/*ECATCHANGE_START(V5.11) HW1*/
            DisableSyncManChannel(MAILBOX_READ);
 8023f20:	2001      	movs	r0, #1
 8023f22:	f7fd fd37 	bl	8021994 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8023f26:	4b14      	ldr	r3, [pc, #80]	; (8023f78 <MBX_MailboxRepeatReq+0x7c>)
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	4a12      	ldr	r2, [pc, #72]	; (8023f74 <MBX_MailboxRepeatReq+0x78>)
 8023f2c:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 8023f2e:	2001      	movs	r0, #1
 8023f30:	f7fd fd5a 	bl	80219e8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8023f34:	4b0e      	ldr	r3, [pc, #56]	; (8023f70 <MBX_MailboxRepeatReq+0x74>)
 8023f36:	2200      	movs	r2, #0
 8023f38:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8023f3a:	6878      	ldr	r0, [r7, #4]
 8023f3c:	f000 f92e 	bl	802419c <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 8023f40:	4b0a      	ldr	r3, [pc, #40]	; (8023f6c <MBX_MailboxRepeatReq+0x70>)
 8023f42:	2200      	movs	r2, #0
 8023f44:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 8023f46:	4b0d      	ldr	r3, [pc, #52]	; (8023f7c <MBX_MailboxRepeatReq+0x80>)
 8023f48:	781b      	ldrb	r3, [r3, #0]
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	bf14      	ite	ne
 8023f4e:	2301      	movne	r3, #1
 8023f50:	2300      	moveq	r3, #0
 8023f52:	b2db      	uxtb	r3, r3
 8023f54:	f083 0301 	eor.w	r3, r3, #1
 8023f58:	b2db      	uxtb	r3, r3
 8023f5a:	f003 0301 	and.w	r3, r3, #1
 8023f5e:	b2da      	uxtb	r2, r3
 8023f60:	4b06      	ldr	r3, [pc, #24]	; (8023f7c <MBX_MailboxRepeatReq+0x80>)
 8023f62:	701a      	strb	r2, [r3, #0]
}
 8023f64:	3708      	adds	r7, #8
 8023f66:	46bd      	mov	sp, r7
 8023f68:	bd80      	pop	{r7, pc}
 8023f6a:	bf00      	nop
 8023f6c:	1ffeac94 	.word	0x1ffeac94
 8023f70:	1ffeac71 	.word	0x1ffeac71
 8023f74:	1ffeac78 	.word	0x1ffeac78
 8023f78:	1ffeac80 	.word	0x1ffeac80
 8023f7c:	1ffeac90 	.word	0x1ffeac90

08023f80 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 8023f80:	b580      	push	{r7, lr}
 8023f82:	b084      	sub	sp, #16
 8023f84:	af00      	add	r7, sp, #0
 8023f86:	6078      	str	r0, [r7, #4]
 8023f88:	460b      	mov	r3, r1
 8023f8a:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 8023f8c:	2300      	movs	r3, #0
 8023f8e:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 8023f90:	4b2c      	ldr	r3, [pc, #176]	; (8024044 <MBX_MailboxSendReq+0xc4>)
 8023f92:	781b      	ldrb	r3, [r3, #0]
 8023f94:	f003 030f 	and.w	r3, r3, #15
 8023f98:	2b01      	cmp	r3, #1
 8023f9a:	d101      	bne.n	8023fa0 <MBX_MailboxSendReq+0x20>
        return ERROR_INVALIDSTATE;
 8023f9c:	23f0      	movs	r3, #240	; 0xf0
 8023f9e:	e04d      	b.n	802403c <MBX_MailboxSendReq+0xbc>
    ENTER_MBX_CRITICAL;
    DISABLE_MBX_INT;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	795b      	ldrb	r3, [r3, #5]
 8023fa4:	f003 030f 	and.w	r3, r3, #15
 8023fa8:	b2da      	uxtb	r2, r3
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	715a      	strb	r2, [r3, #5]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 8023fae:	4b26      	ldr	r3, [pc, #152]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8023fb0:	781b      	ldrb	r3, [r3, #0]
 8023fb2:	f003 0307 	and.w	r3, r3, #7
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d102      	bne.n	8023fc0 <MBX_MailboxSendReq+0x40>
        u8MbxReadCounter = 1;
 8023fba:	4b23      	ldr	r3, [pc, #140]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8023fbc:	2201      	movs	r2, #1
 8023fbe:	701a      	strb	r2, [r3, #0]

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	795b      	ldrb	r3, [r3, #5]
 8023fc4:	b2da      	uxtb	r2, r3
 8023fc6:	4b20      	ldr	r3, [pc, #128]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8023fc8:	781b      	ldrb	r3, [r3, #0]
 8023fca:	011b      	lsls	r3, r3, #4
 8023fcc:	b2db      	uxtb	r3, r3
 8023fce:	4313      	orrs	r3, r2
 8023fd0:	b2db      	uxtb	r3, r3
 8023fd2:	b2da      	uxtb	r2, r3
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	715a      	strb	r2, [r3, #5]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 8023fd8:	6878      	ldr	r0, [r7, #4]
 8023fda:	f000 f8df 	bl	802419c <MBX_CopyToSendMailbox>
 8023fde:	4603      	mov	r3, r0
 8023fe0:	2b00      	cmp	r3, #0
 8023fe2:	d014      	beq.n	802400e <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8023fe4:	6878      	ldr	r0, [r7, #4]
 8023fe6:	4919      	ldr	r1, [pc, #100]	; (802404c <MBX_MailboxSendReq+0xcc>)
 8023fe8:	f7ff fc98 	bl	802391c <PutInMbxQueue>
 8023fec:	4603      	mov	r3, r0
 8023fee:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8023ff0:	7bfb      	ldrb	r3, [r7, #15]
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	d004      	beq.n	8024000 <MBX_MailboxSendReq+0x80>
            flags |= FRAGMENTS_FOLLOW;
 8023ff6:	78fb      	ldrb	r3, [r7, #3]
 8023ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023ffc:	70fb      	strb	r3, [r7, #3]
 8023ffe:	e00c      	b.n	802401a <MBX_MailboxSendReq+0x9a>
        else
            u8MbxReadCounter++;
 8024000:	4b11      	ldr	r3, [pc, #68]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8024002:	781b      	ldrb	r3, [r3, #0]
 8024004:	3301      	adds	r3, #1
 8024006:	b2da      	uxtb	r2, r3
 8024008:	4b0f      	ldr	r3, [pc, #60]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 802400a:	701a      	strb	r2, [r3, #0]
 802400c:	e005      	b.n	802401a <MBX_MailboxSendReq+0x9a>
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 802400e:	4b0e      	ldr	r3, [pc, #56]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8024010:	781b      	ldrb	r3, [r3, #0]
 8024012:	3301      	adds	r3, #1
 8024014:	b2da      	uxtb	r2, r3
 8024016:	4b0c      	ldr	r3, [pc, #48]	; (8024048 <MBX_MailboxSendReq+0xc8>)
 8024018:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 802401a:	78fb      	ldrb	r3, [r7, #3]
 802401c:	b25b      	sxtb	r3, r3
 802401e:	2b00      	cmp	r3, #0
 8024020:	da0b      	bge.n	802403a <MBX_MailboxSendReq+0xba>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8024022:	78fb      	ldrb	r3, [r7, #3]
 8024024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024028:	b2da      	uxtb	r2, r3
 802402a:	4b09      	ldr	r3, [pc, #36]	; (8024050 <MBX_MailboxSendReq+0xd0>)
 802402c:	781b      	ldrb	r3, [r3, #0]
 802402e:	b2db      	uxtb	r3, r3
 8024030:	4313      	orrs	r3, r2
 8024032:	b2db      	uxtb	r3, r3
 8024034:	b2da      	uxtb	r2, r3
 8024036:	4b06      	ldr	r3, [pc, #24]	; (8024050 <MBX_MailboxSendReq+0xd0>)
 8024038:	701a      	strb	r2, [r3, #0]
    }

    ENABLE_MBX_INT;
    LEAVE_MBX_CRITICAL;

    return result;
 802403a:	7bfb      	ldrb	r3, [r7, #15]
}
 802403c:	4618      	mov	r0, r3
 802403e:	3710      	adds	r7, #16
 8024040:	46bd      	mov	sp, r7
 8024042:	bd80      	pop	{r7, pc}
 8024044:	1ffea825 	.word	0x1ffea825
 8024048:	1ffeac04 	.word	0x1ffeac04
 802404c:	1ffeac08 	.word	0x1ffeac08
 8024050:	1ffeac8d 	.word	0x1ffeac8d

08024054 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 8024054:	b580      	push	{r7, lr}
 8024056:	b084      	sub	sp, #16
 8024058:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 802405a:	4b46      	ldr	r3, [pc, #280]	; (8024174 <MBX_CheckAndCopyMailbox+0x120>)
 802405c:	881b      	ldrh	r3, [r3, #0]
 802405e:	085b      	lsrs	r3, r3, #1
 8024060:	b29b      	uxth	r3, r3
 8024062:	005b      	lsls	r3, r3, #1
 8024064:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8024068:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802406c:	881b      	ldrh	r3, [r3, #0]
 802406e:	81fb      	strh	r3, [r7, #14]
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);

/* ECATCHANGE_START(V5.11) MBX2*/
    if(bNoMbxMemoryAvailable == TRUE)
 8024070:	4b41      	ldr	r3, [pc, #260]	; (8024178 <MBX_CheckAndCopyMailbox+0x124>)
 8024072:	781b      	ldrb	r3, [r3, #0]
 8024074:	2b00      	cmp	r3, #0
 8024076:	d023      	beq.n	80240c0 <MBX_CheckAndCopyMailbox+0x6c>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8024078:	200a      	movs	r0, #10
 802407a:	f006 f929 	bl	802a2d0 <malloc>
 802407e:	4603      	mov	r3, r0
 8024080:	60bb      	str	r3, [r7, #8]

        if(pMbx != NULL)
 8024082:	68bb      	ldr	r3, [r7, #8]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d01b      	beq.n	80240c0 <MBX_CheckAndCopyMailbox+0x6c>
        {
            HMEMSET(pMbx,0x00,10);
 8024088:	68b8      	ldr	r0, [r7, #8]
 802408a:	2100      	movs	r1, #0
 802408c:	220a      	movs	r2, #10
 802408e:	f006 f93a 	bl	802a306 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8024092:	68bb      	ldr	r3, [r7, #8]
 8024094:	2204      	movs	r2, #4
 8024096:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8024098:	68bb      	ldr	r3, [r7, #8]
 802409a:	795b      	ldrb	r3, [r3, #5]
 802409c:	f023 030f 	bic.w	r3, r3, #15
 80240a0:	b2da      	uxtb	r2, r3
 80240a2:	68bb      	ldr	r3, [r7, #8]
 80240a4:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80240a6:	68bb      	ldr	r3, [r7, #8]
 80240a8:	2201      	movs	r2, #1
 80240aa:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 80240ac:	68bb      	ldr	r3, [r7, #8]
 80240ae:	2207      	movs	r2, #7
 80240b0:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 80240b2:	68b8      	ldr	r0, [r7, #8]
 80240b4:	2100      	movs	r1, #0
 80240b6:	f7ff ff63 	bl	8023f80 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 80240ba:	68b8      	ldr	r0, [r7, #8]
 80240bc:	f006 f910 	bl	802a2e0 <free>
        }
    }
/* ECATCHANGE_END(V5.11) MBX2*/
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 80240c0:	89fb      	ldrh	r3, [r7, #14]
 80240c2:	3306      	adds	r3, #6
 80240c4:	81fb      	strh	r3, [r7, #14]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 80240c6:	4b2d      	ldr	r3, [pc, #180]	; (802417c <MBX_CheckAndCopyMailbox+0x128>)
 80240c8:	781b      	ldrb	r3, [r3, #0]
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d103      	bne.n	80240d6 <MBX_CheckAndCopyMailbox+0x82>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 80240ce:	4b2c      	ldr	r3, [pc, #176]	; (8024180 <MBX_CheckAndCopyMailbox+0x12c>)
 80240d0:	781b      	ldrb	r3, [r3, #0]
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	d003      	beq.n	80240de <MBX_CheckAndCopyMailbox+0x8a>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 80240d6:	4b2b      	ldr	r3, [pc, #172]	; (8024184 <MBX_CheckAndCopyMailbox+0x130>)
 80240d8:	2201      	movs	r2, #1
 80240da:	701a      	strb	r2, [r3, #0]
 80240dc:	e046      	b.n	802416c <MBX_CheckAndCopyMailbox+0x118>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 80240de:	4b29      	ldr	r3, [pc, #164]	; (8024184 <MBX_CheckAndCopyMailbox+0x130>)
 80240e0:	2200      	movs	r2, #0
 80240e2:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 80240e4:	4b28      	ldr	r3, [pc, #160]	; (8024188 <MBX_CheckAndCopyMailbox+0x134>)
 80240e6:	881b      	ldrh	r3, [r3, #0]
 80240e8:	89fa      	ldrh	r2, [r7, #14]
 80240ea:	429a      	cmp	r2, r3
 80240ec:	d902      	bls.n	80240f4 <MBX_CheckAndCopyMailbox+0xa0>
            mbxLen = u16ReceiveMbxSize;
 80240ee:	4b26      	ldr	r3, [pc, #152]	; (8024188 <MBX_CheckAndCopyMailbox+0x134>)
 80240f0:	881b      	ldrh	r3, [r3, #0]
 80240f2:	81fb      	strh	r3, [r7, #14]

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80240f4:	4b24      	ldr	r3, [pc, #144]	; (8024188 <MBX_CheckAndCopyMailbox+0x134>)
 80240f6:	881b      	ldrh	r3, [r3, #0]
 80240f8:	4618      	mov	r0, r3
 80240fa:	f006 f8e9 	bl	802a2d0 <malloc>
 80240fe:	4603      	mov	r3, r0
 8024100:	461a      	mov	r2, r3
 8024102:	4b22      	ldr	r3, [pc, #136]	; (802418c <MBX_CheckAndCopyMailbox+0x138>)
 8024104:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 8024106:	4b21      	ldr	r3, [pc, #132]	; (802418c <MBX_CheckAndCopyMailbox+0x138>)
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	2b00      	cmp	r3, #0
 802410c:	d103      	bne.n	8024116 <MBX_CheckAndCopyMailbox+0xc2>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 802410e:	4b1d      	ldr	r3, [pc, #116]	; (8024184 <MBX_CheckAndCopyMailbox+0x130>)
 8024110:	2201      	movs	r2, #1
 8024112:	701a      	strb	r2, [r3, #0]
            return;
 8024114:	e02a      	b.n	802416c <MBX_CheckAndCopyMailbox+0x118>
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 8024116:	4b1d      	ldr	r3, [pc, #116]	; (802418c <MBX_CheckAndCopyMailbox+0x138>)
 8024118:	6819      	ldr	r1, [r3, #0]
 802411a:	4b16      	ldr	r3, [pc, #88]	; (8024174 <MBX_CheckAndCopyMailbox+0x120>)
 802411c:	881a      	ldrh	r2, [r3, #0]
 802411e:	89fb      	ldrh	r3, [r7, #14]
 8024120:	4608      	mov	r0, r1
 8024122:	4611      	mov	r1, r2
 8024124:	461a      	mov	r2, r3
 8024126:	f7ff fbbf 	bl	80238a8 <HW_EscReadMbxMem>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT8 smstate = 0x00;
 802412a:	2300      	movs	r3, #0
 802412c:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 802412e:	4b18      	ldr	r3, [pc, #96]	; (8024190 <MBX_CheckAndCopyMailbox+0x13c>)
 8024130:	781b      	ldrb	r3, [r3, #0]
 8024132:	b2db      	uxtb	r3, r3
 8024134:	71fb      	strb	r3, [r7, #7]

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8024136:	79fb      	ldrb	r3, [r7, #7]
 8024138:	b2db      	uxtb	r3, r3
 802413a:	f003 0308 	and.w	r3, r3, #8
 802413e:	2b00      	cmp	r3, #0
 8024140:	d00f      	beq.n	8024162 <MBX_CheckAndCopyMailbox+0x10e>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u8dummy = 0;
 8024142:	4b14      	ldr	r3, [pc, #80]	; (8024194 <MBX_CheckAndCopyMailbox+0x140>)
 8024144:	2200      	movs	r2, #0
 8024146:	701a      	strb	r2, [r3, #0]
            HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 8024148:	4b0a      	ldr	r3, [pc, #40]	; (8024174 <MBX_CheckAndCopyMailbox+0x120>)
 802414a:	881b      	ldrh	r3, [r3, #0]
 802414c:	461a      	mov	r2, r3
 802414e:	4b0e      	ldr	r3, [pc, #56]	; (8024188 <MBX_CheckAndCopyMailbox+0x134>)
 8024150:	881b      	ldrh	r3, [r3, #0]
 8024152:	4413      	add	r3, r2
 8024154:	461a      	mov	r2, r3
 8024156:	4b10      	ldr	r3, [pc, #64]	; (8024198 <MBX_CheckAndCopyMailbox+0x144>)
 8024158:	4413      	add	r3, r2
 802415a:	781b      	ldrb	r3, [r3, #0]
 802415c:	b2da      	uxtb	r2, r3
 802415e:	4b0d      	ldr	r3, [pc, #52]	; (8024194 <MBX_CheckAndCopyMailbox+0x140>)
 8024160:	701a      	strb	r2, [r3, #0]
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 8024162:	4b0a      	ldr	r3, [pc, #40]	; (802418c <MBX_CheckAndCopyMailbox+0x138>)
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	4618      	mov	r0, r3
 8024168:	f7ff fdf0 	bl	8023d4c <MBX_MailboxWriteInd>

    }
}
 802416c:	3710      	adds	r7, #16
 802416e:	46bd      	mov	sp, r7
 8024170:	bd80      	pop	{r7, pc}
 8024172:	bf00      	nop
 8024174:	1ffeac74 	.word	0x1ffeac74
 8024178:	1ffeac70 	.word	0x1ffeac70
 802417c:	1ffeac71 	.word	0x1ffeac71
 8024180:	1ffeac8d 	.word	0x1ffeac8d
 8024184:	1ffeac84 	.word	0x1ffeac84
 8024188:	1ffeac8e 	.word	0x1ffeac8e
 802418c:	1ffeac88 	.word	0x1ffeac88
 8024190:	54010805 	.word	0x54010805
 8024194:	1ffea83c 	.word	0x1ffea83c
 8024198:	5400ffff 	.word	0x5400ffff

0802419c <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 802419c:	b580      	push	{r7, lr}
 802419e:	b084      	sub	sp, #16
 80241a0:	af00      	add	r7, sp, #0
 80241a2:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 80241a4:	4b2a      	ldr	r3, [pc, #168]	; (8024250 <MBX_CopyToSendMailbox+0xb4>)
 80241a6:	781b      	ldrb	r3, [r3, #0]
 80241a8:	f003 030f 	and.w	r3, r3, #15
 80241ac:	2b01      	cmp	r3, #1
 80241ae:	d101      	bne.n	80241b4 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80241b0:	23f0      	movs	r3, #240	; 0xf0
 80241b2:	e049      	b.n	8024248 <MBX_CopyToSendMailbox+0xac>
    }


    if ( !bMbxRunning )
 80241b4:	4b27      	ldr	r3, [pc, #156]	; (8024254 <MBX_CopyToSendMailbox+0xb8>)
 80241b6:	781b      	ldrb	r3, [r3, #0]
 80241b8:	f083 0301 	eor.w	r3, r3, #1
 80241bc:	b2db      	uxtb	r3, r3
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d001      	beq.n	80241c6 <MBX_CopyToSendMailbox+0x2a>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80241c2:	23f0      	movs	r3, #240	; 0xf0
 80241c4:	e040      	b.n	8024248 <MBX_CopyToSendMailbox+0xac>
    }

    if ( bSendMbxIsFull )
 80241c6:	4b24      	ldr	r3, [pc, #144]	; (8024258 <MBX_CopyToSendMailbox+0xbc>)
 80241c8:	781b      	ldrb	r3, [r3, #0]
 80241ca:	2b00      	cmp	r3, #0
 80241cc:	d001      	beq.n	80241d2 <MBX_CopyToSendMailbox+0x36>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 80241ce:	2307      	movs	r3, #7
 80241d0:	e03a      	b.n	8024248 <MBX_CopyToSendMailbox+0xac>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	881b      	ldrh	r3, [r3, #0]
 80241d6:	81fb      	strh	r3, [r7, #14]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 80241d8:	4b20      	ldr	r3, [pc, #128]	; (802425c <MBX_CopyToSendMailbox+0xc0>)
 80241da:	881a      	ldrh	r2, [r3, #0]
 80241dc:	89fb      	ldrh	r3, [r7, #14]
 80241de:	3306      	adds	r3, #6
 80241e0:	b29b      	uxth	r3, r3
 80241e2:	6878      	ldr	r0, [r7, #4]
 80241e4:	4611      	mov	r1, r2
 80241e6:	461a      	mov	r2, r3
 80241e8:	f7ff fb86 	bl	80238f8 <HW_EscWriteMbxMem>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT8 smstate = 0x00;
 80241ec:	2300      	movs	r3, #0
 80241ee:	737b      	strb	r3, [r7, #13]
        HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 80241f0:	4b1b      	ldr	r3, [pc, #108]	; (8024260 <MBX_CopyToSendMailbox+0xc4>)
 80241f2:	781b      	ldrb	r3, [r3, #0]
 80241f4:	b2db      	uxtb	r3, r3
 80241f6:	737b      	strb	r3, [r7, #13]

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 80241f8:	7b7b      	ldrb	r3, [r7, #13]
 80241fa:	b2db      	uxtb	r3, r3
 80241fc:	f003 0308 	and.w	r3, r3, #8
 8024200:	2b00      	cmp	r3, #0
 8024202:	d10f      	bne.n	8024224 <MBX_CopyToSendMailbox+0x88>
        {

            /*Write last Byte to trigger mailbox full flag*/
            u8dummy = 0;
 8024204:	4b17      	ldr	r3, [pc, #92]	; (8024264 <MBX_CopyToSendMailbox+0xc8>)
 8024206:	2200      	movs	r2, #0
 8024208:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,(u16EscAddrSendMbx + u16SendMbxSize - 1));
 802420a:	4b14      	ldr	r3, [pc, #80]	; (802425c <MBX_CopyToSendMailbox+0xc0>)
 802420c:	881b      	ldrh	r3, [r3, #0]
 802420e:	461a      	mov	r2, r3
 8024210:	4b15      	ldr	r3, [pc, #84]	; (8024268 <MBX_CopyToSendMailbox+0xcc>)
 8024212:	881b      	ldrh	r3, [r3, #0]
 8024214:	4413      	add	r3, r2
 8024216:	461a      	mov	r2, r3
 8024218:	4b14      	ldr	r3, [pc, #80]	; (802426c <MBX_CopyToSendMailbox+0xd0>)
 802421a:	4413      	add	r3, r2
 802421c:	4a11      	ldr	r2, [pc, #68]	; (8024264 <MBX_CopyToSendMailbox+0xc8>)
 802421e:	7812      	ldrb	r2, [r2, #0]
 8024220:	b2d2      	uxtb	r2, r2
 8024222:	701a      	strb	r2, [r3, #0]
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 8024224:	4b12      	ldr	r3, [pc, #72]	; (8024270 <MBX_CopyToSendMailbox+0xd4>)
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	2b00      	cmp	r3, #0
 802422a:	d003      	beq.n	8024234 <MBX_CopyToSendMailbox+0x98>
            psWriteMbx = NULL;
 802422c:	4b11      	ldr	r3, [pc, #68]	; (8024274 <MBX_CopyToSendMailbox+0xd8>)
 802422e:	2200      	movs	r2, #0
 8024230:	601a      	str	r2, [r3, #0]
 8024232:	e002      	b.n	802423a <MBX_CopyToSendMailbox+0x9e>
        else
        {
            /* only the first time after the INIT2PREOP-transition */
            psWriteMbx = &asMbx[1];
 8024234:	4b0f      	ldr	r3, [pc, #60]	; (8024274 <MBX_CopyToSendMailbox+0xd8>)
 8024236:	4a10      	ldr	r2, [pc, #64]	; (8024278 <MBX_CopyToSendMailbox+0xdc>)
 8024238:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 802423a:	4a0d      	ldr	r2, [pc, #52]	; (8024270 <MBX_CopyToSendMailbox+0xd4>)
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 8024240:	4b05      	ldr	r3, [pc, #20]	; (8024258 <MBX_CopyToSendMailbox+0xbc>)
 8024242:	2201      	movs	r2, #1
 8024244:	701a      	strb	r2, [r3, #0]


        return 0;
 8024246:	2300      	movs	r3, #0
    }
}
 8024248:	4618      	mov	r0, r3
 802424a:	3710      	adds	r7, #16
 802424c:	46bd      	mov	sp, r7
 802424e:	bd80      	pop	{r7, pc}
 8024250:	1ffea825 	.word	0x1ffea825
 8024254:	1ffeac72 	.word	0x1ffeac72
 8024258:	1ffeac71 	.word	0x1ffeac71
 802425c:	1ffeac86 	.word	0x1ffeac86
 8024260:	5401080d 	.word	0x5401080d
 8024264:	1ffea83c 	.word	0x1ffea83c
 8024268:	1ffeac7c 	.word	0x1ffeac7c
 802426c:	5400ffff 	.word	0x5400ffff
 8024270:	1ffeac80 	.word	0x1ffeac80
 8024274:	1ffeac88 	.word	0x1ffeac88
 8024278:	1ffeab04 	.word	0x1ffeab04

0802427c <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 802427c:	b580      	push	{r7, lr}
 802427e:	b082      	sub	sp, #8
 8024280:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 8024282:	2300      	movs	r3, #0
 8024284:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 8024286:	2300      	movs	r3, #0
 8024288:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 802428a:	4818      	ldr	r0, [pc, #96]	; (80242ec <MBX_Main+0x70>)
 802428c:	f7ff fb70 	bl	8023970 <GetOutOfMbxQueue>
 8024290:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 8024292:	683b      	ldr	r3, [r7, #0]
 8024294:	2b00      	cmp	r3, #0
 8024296:	d004      	beq.n	80242a2 <MBX_Main+0x26>
            result = MailboxServiceInd(pMbx);
 8024298:	6838      	ldr	r0, [r7, #0]
 802429a:	f7ff fd27 	bl	8023cec <MailboxServiceInd>
 802429e:	4603      	mov	r3, r0
 80242a0:	71fb      	strb	r3, [r7, #7]

        if ( result != 0 )
 80242a2:	79fb      	ldrb	r3, [r7, #7]
 80242a4:	2b00      	cmp	r3, #0
 80242a6:	d014      	beq.n	80242d2 <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80242a8:	683b      	ldr	r3, [r7, #0]
 80242aa:	2204      	movs	r2, #4
 80242ac:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80242ae:	683b      	ldr	r3, [r7, #0]
 80242b0:	795b      	ldrb	r3, [r3, #5]
 80242b2:	f023 030f 	bic.w	r3, r3, #15
 80242b6:	b2da      	uxtb	r2, r3
 80242b8:	683b      	ldr	r3, [r7, #0]
 80242ba:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80242bc:	683b      	ldr	r3, [r7, #0]
 80242be:	2201      	movs	r2, #1
 80242c0:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 80242c2:	79fb      	ldrb	r3, [r7, #7]
 80242c4:	b29a      	uxth	r2, r3
 80242c6:	683b      	ldr	r3, [r7, #0]
 80242c8:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 80242ca:	6838      	ldr	r0, [r7, #0]
 80242cc:	2100      	movs	r1, #0
 80242ce:	f7ff fe57 	bl	8023f80 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 80242d2:	683b      	ldr	r3, [r7, #0]
 80242d4:	2b00      	cmp	r3, #0
 80242d6:	d1d6      	bne.n	8024286 <MBX_Main+0xa>



      if ( bReceiveMbxIsLocked )
 80242d8:	4b05      	ldr	r3, [pc, #20]	; (80242f0 <MBX_Main+0x74>)
 80242da:	781b      	ldrb	r3, [r3, #0]
 80242dc:	2b00      	cmp	r3, #0
 80242de:	d001      	beq.n	80242e4 <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 80242e0:	f7ff feb8 	bl	8024054 <MBX_CheckAndCopyMailbox>
      }
}
 80242e4:	3708      	adds	r7, #8
 80242e6:	46bd      	mov	sp, r7
 80242e8:	bd80      	pop	{r7, pc}
 80242ea:	bf00      	nop
 80242ec:	1ffeac3c 	.word	0x1ffeac3c
 80242f0:	1ffeac84 	.word	0x1ffeac84

080242f4 <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 80242f4:	b580      	push	{r7, lr}
 80242f6:	b084      	sub	sp, #16
 80242f8:	af00      	add	r7, sp, #0
 80242fa:	4603      	mov	r3, r0
 80242fc:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 80242fe:	f7fc f96b 	bl	80205d8 <COE_GetObjectDictionary>
 8024302:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 8024304:	e009      	b.n	802431a <OBJ_GetObjectHandle+0x26>
    {
        if (pObjEntry->Index == index)
 8024306:	68fb      	ldr	r3, [r7, #12]
 8024308:	891b      	ldrh	r3, [r3, #8]
 802430a:	88fa      	ldrh	r2, [r7, #6]
 802430c:	429a      	cmp	r2, r3
 802430e:	d101      	bne.n	8024314 <OBJ_GetObjectHandle+0x20>
            return pObjEntry;
 8024310:	68fb      	ldr	r3, [r7, #12]
 8024312:	e006      	b.n	8024322 <OBJ_GetObjectHandle+0x2e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8024314:	68fb      	ldr	r3, [r7, #12]
 8024316:	685b      	ldr	r3, [r3, #4]
 8024318:	60fb      	str	r3, [r7, #12]

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();

    while (pObjEntry!= NULL)
 802431a:	68fb      	ldr	r3, [r7, #12]
 802431c:	2b00      	cmp	r3, #0
 802431e:	d1f2      	bne.n	8024306 <OBJ_GetObjectHandle+0x12>
    {
        if (pObjEntry->Index == index)
            return pObjEntry;
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }
    return 0;
 8024320:	2300      	movs	r3, #0
}
 8024322:	4618      	mov	r0, r3
 8024324:	3710      	adds	r7, #16
 8024326:	46bd      	mov	sp, r7
 8024328:	bd80      	pop	{r7, pc}
 802432a:	bf00      	nop

0802432c <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 802432c:	b480      	push	{r7}
 802432e:	b085      	sub	sp, #20
 8024330:	af00      	add	r7, sp, #0
 8024332:	603a      	str	r2, [r7, #0]
 8024334:	461a      	mov	r2, r3
 8024336:	4603      	mov	r3, r0
 8024338:	80fb      	strh	r3, [r7, #6]
 802433a:	460b      	mov	r3, r1
 802433c:	717b      	strb	r3, [r7, #5]
 802433e:	4613      	mov	r3, r2
 8024340:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024342:	683b      	ldr	r3, [r7, #0]
 8024344:	899b      	ldrh	r3, [r3, #12]
 8024346:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 802434a:	121b      	asrs	r3, r3, #8
 802434c:	72bb      	strb	r3, [r7, #10]
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 802434e:	683b      	ldr	r3, [r7, #0]
 8024350:	899b      	ldrh	r3, [r3, #12]
 8024352:	727b      	strb	r3, [r7, #9]
    UINT32 size = 0;
 8024354:	2300      	movs	r3, #0
 8024356:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 8024358:	793b      	ldrb	r3, [r7, #4]
 802435a:	2b00      	cmp	r3, #0
 802435c:	d043      	beq.n	80243e6 <OBJ_GetObjectLength+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 802435e:	7abb      	ldrb	r3, [r7, #10]
 8024360:	2b07      	cmp	r3, #7
 8024362:	d101      	bne.n	8024368 <OBJ_GetObjectLength+0x3c>
            return 0;
 8024364:	2300      	movs	r3, #0
 8024366:	e061      	b.n	802442c <OBJ_GetObjectLength+0x100>
        else if ((objCode == OBJCODE_ARR)
 8024368:	7abb      	ldrb	r3, [r7, #10]
 802436a:	2b08      	cmp	r3, #8
 802436c:	d118      	bne.n	80243a0 <OBJ_GetObjectLength+0x74>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 802436e:	683b      	ldr	r3, [r7, #0]
 8024370:	699b      	ldr	r3, [r3, #24]
 8024372:	881b      	ldrh	r3, [r3, #0]
 8024374:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 8024376:	683b      	ldr	r3, [r7, #0]
 8024378:	691b      	ldr	r3, [r3, #16]
 802437a:	3306      	adds	r3, #6
 802437c:	885b      	ldrh	r3, [r3, #2]
 802437e:	461a      	mov	r2, r3
 8024380:	7a7b      	ldrb	r3, [r7, #9]
 8024382:	fb03 f302 	mul.w	r3, r3, r2
 8024386:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8024388:	68fb      	ldr	r3, [r7, #12]
 802438a:	3307      	adds	r3, #7
 802438c:	08db      	lsrs	r3, r3, #3
 802438e:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8024390:	797b      	ldrb	r3, [r7, #5]
 8024392:	2b00      	cmp	r3, #0
 8024394:	d102      	bne.n	802439c <OBJ_GetObjectLength+0x70>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8024396:	68fb      	ldr	r3, [r7, #12]
 8024398:	3302      	adds	r3, #2
 802439a:	60fb      	str	r3, [r7, #12]
            }
            return size;
 802439c:	68fb      	ldr	r3, [r7, #12]
 802439e:	e045      	b.n	802442c <OBJ_GetObjectLength+0x100>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 80243a0:	2301      	movs	r3, #1
 80243a2:	72fb      	strb	r3, [r7, #11]
 80243a4:	e00f      	b.n	80243c6 <OBJ_GetObjectLength+0x9a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 80243a6:	683b      	ldr	r3, [r7, #0]
 80243a8:	6919      	ldr	r1, [r3, #16]
 80243aa:	7afa      	ldrb	r2, [r7, #11]
 80243ac:	4613      	mov	r3, r2
 80243ae:	005b      	lsls	r3, r3, #1
 80243b0:	4413      	add	r3, r2
 80243b2:	005b      	lsls	r3, r3, #1
 80243b4:	440b      	add	r3, r1
 80243b6:	885b      	ldrh	r3, [r3, #2]
 80243b8:	461a      	mov	r2, r3
 80243ba:	68fb      	ldr	r3, [r7, #12]
 80243bc:	4413      	add	r3, r2
 80243be:	60fb      	str	r3, [r7, #12]
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 80243c0:	7afb      	ldrb	r3, [r7, #11]
 80243c2:	3301      	adds	r3, #1
 80243c4:	72fb      	strb	r3, [r7, #11]
 80243c6:	7afa      	ldrb	r2, [r7, #11]
 80243c8:	7a7b      	ldrb	r3, [r7, #9]
 80243ca:	429a      	cmp	r2, r3
 80243cc:	d9eb      	bls.n	80243a6 <OBJ_GetObjectLength+0x7a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80243ce:	68fb      	ldr	r3, [r7, #12]
 80243d0:	3307      	adds	r3, #7
 80243d2:	08db      	lsrs	r3, r3, #3
 80243d4:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 80243d6:	797b      	ldrb	r3, [r7, #5]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d102      	bne.n	80243e2 <OBJ_GetObjectLength+0xb6>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 80243dc:	68fb      	ldr	r3, [r7, #12]
 80243de:	3302      	adds	r3, #2
 80243e0:	60fb      	str	r3, [r7, #12]
            }
            return size;
 80243e2:	68fb      	ldr	r3, [r7, #12]
 80243e4:	e022      	b.n	802442c <OBJ_GetObjectLength+0x100>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 80243e6:	7abb      	ldrb	r3, [r7, #10]
 80243e8:	2b07      	cmp	r3, #7
 80243ea:	d105      	bne.n	80243f8 <OBJ_GetObjectLength+0xcc>
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 80243ec:	683b      	ldr	r3, [r7, #0]
 80243ee:	691b      	ldr	r3, [r3, #16]
 80243f0:	885b      	ldrh	r3, [r3, #2]
 80243f2:	3307      	adds	r3, #7
 80243f4:	10db      	asrs	r3, r3, #3
 80243f6:	e019      	b.n	802442c <OBJ_GetObjectLength+0x100>

        }
        else if ( subindex == 0 )
 80243f8:	797b      	ldrb	r3, [r7, #5]
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d101      	bne.n	8024402 <OBJ_GetObjectLength+0xd6>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 80243fe:	2301      	movs	r3, #1
 8024400:	e014      	b.n	802442c <OBJ_GetObjectLength+0x100>
        }
        else if((objCode == OBJCODE_ARR)
 8024402:	7abb      	ldrb	r3, [r7, #10]
 8024404:	2b08      	cmp	r3, #8
 8024406:	d106      	bne.n	8024416 <OBJ_GetObjectLength+0xea>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8024408:	683b      	ldr	r3, [r7, #0]
 802440a:	691b      	ldr	r3, [r3, #16]
 802440c:	3306      	adds	r3, #6
 802440e:	885b      	ldrh	r3, [r3, #2]
 8024410:	3307      	adds	r3, #7
 8024412:	10db      	asrs	r3, r3, #3
 8024414:	e00a      	b.n	802442c <OBJ_GetObjectLength+0x100>
        }
        else
        {
                return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 8024416:	683b      	ldr	r3, [r7, #0]
 8024418:	6919      	ldr	r1, [r3, #16]
 802441a:	797a      	ldrb	r2, [r7, #5]
 802441c:	4613      	mov	r3, r2
 802441e:	005b      	lsls	r3, r3, #1
 8024420:	4413      	add	r3, r2
 8024422:	005b      	lsls	r3, r3, #1
 8024424:	440b      	add	r3, r1
 8024426:	885b      	ldrh	r3, [r3, #2]
 8024428:	3307      	adds	r3, #7
 802442a:	10db      	asrs	r3, r3, #3
        }
    }
}
 802442c:	4618      	mov	r0, r3
 802442e:	3714      	adds	r7, #20
 8024430:	46bd      	mov	sp, r7
 8024432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024436:	4770      	bx	lr

08024438 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8024438:	b490      	push	{r4, r7}
 802443a:	b084      	sub	sp, #16
 802443c:	af00      	add	r7, sp, #0
 802443e:	6078      	str	r0, [r7, #4]
 8024440:	460b      	mov	r3, r1
 8024442:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	3302      	adds	r3, #2
 8024448:	2230      	movs	r2, #48	; 0x30
 802444a:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	781a      	ldrb	r2, [r3, #0]
 8024450:	78fb      	ldrb	r3, [r7, #3]
 8024452:	491c      	ldr	r1, [pc, #112]	; (80244c4 <OBJ_CopyNumberToString+0x8c>)
 8024454:	fba1 1303 	umull	r1, r3, r1, r3
 8024458:	095b      	lsrs	r3, r3, #5
 802445a:	b2db      	uxtb	r3, r3
 802445c:	4413      	add	r3, r2
 802445e:	b2da      	uxtb	r2, r3
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 8024464:	78fb      	ldrb	r3, [r7, #3]
 8024466:	4a17      	ldr	r2, [pc, #92]	; (80244c4 <OBJ_CopyNumberToString+0x8c>)
 8024468:	fba2 1203 	umull	r1, r2, r2, r3
 802446c:	0952      	lsrs	r2, r2, #5
 802446e:	2164      	movs	r1, #100	; 0x64
 8024470:	fb01 f202 	mul.w	r2, r1, r2
 8024474:	1a9b      	subs	r3, r3, r2
 8024476:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 8024478:	687b      	ldr	r3, [r7, #4]
 802447a:	3301      	adds	r3, #1
 802447c:	687a      	ldr	r2, [r7, #4]
 802447e:	3201      	adds	r2, #1
 8024480:	7811      	ldrb	r1, [r2, #0]
 8024482:	7bfa      	ldrb	r2, [r7, #15]
 8024484:	4810      	ldr	r0, [pc, #64]	; (80244c8 <OBJ_CopyNumberToString+0x90>)
 8024486:	fba0 0202 	umull	r0, r2, r0, r2
 802448a:	08d2      	lsrs	r2, r2, #3
 802448c:	b2d2      	uxtb	r2, r2
 802448e:	440a      	add	r2, r1
 8024490:	b2d2      	uxtb	r2, r2
 8024492:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	1c98      	adds	r0, r3, #2
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	3302      	adds	r3, #2
 802449c:	781c      	ldrb	r4, [r3, #0]
 802449e:	7bfa      	ldrb	r2, [r7, #15]
 80244a0:	4b09      	ldr	r3, [pc, #36]	; (80244c8 <OBJ_CopyNumberToString+0x90>)
 80244a2:	fba3 1302 	umull	r1, r3, r3, r2
 80244a6:	08d9      	lsrs	r1, r3, #3
 80244a8:	460b      	mov	r3, r1
 80244aa:	009b      	lsls	r3, r3, #2
 80244ac:	440b      	add	r3, r1
 80244ae:	005b      	lsls	r3, r3, #1
 80244b0:	1ad3      	subs	r3, r2, r3
 80244b2:	b2db      	uxtb	r3, r3
 80244b4:	4423      	add	r3, r4
 80244b6:	b2db      	uxtb	r3, r3
 80244b8:	7003      	strb	r3, [r0, #0]
}
 80244ba:	3710      	adds	r7, #16
 80244bc:	46bd      	mov	sp, r7
 80244be:	bc90      	pop	{r4, r7}
 80244c0:	4770      	bx	lr
 80244c2:	bf00      	nop
 80244c4:	51eb851f 	.word	0x51eb851f
 80244c8:	cccccccd 	.word	0xcccccccd

080244cc <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 80244cc:	b580      	push	{r7, lr}
 80244ce:	b086      	sub	sp, #24
 80244d0:	af00      	add	r7, sp, #0
 80244d2:	4603      	mov	r3, r0
 80244d4:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 80244d6:	79fb      	ldrb	r3, [r7, #7]
 80244d8:	2220      	movs	r2, #32
 80244da:	fa02 f303 	lsl.w	r3, r2, r3
 80244de:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 80244e0:	f7fc f87a 	bl	80205d8 <COE_GetObjectDictionary>
 80244e4:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 80244e6:	2300      	movs	r3, #0
 80244e8:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 80244ea:	e032      	b.n	8024552 <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 80244ec:	697b      	ldr	r3, [r7, #20]
 80244ee:	891b      	ldrh	r3, [r3, #8]
 80244f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80244f4:	d32a      	bcc.n	802454c <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 80244f6:	79fb      	ldrb	r3, [r7, #7]
 80244f8:	747b      	strb	r3, [r7, #17]
            if ( t )
 80244fa:	7c7b      	ldrb	r3, [r7, #17]
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	d01f      	beq.n	8024540 <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024500:	697b      	ldr	r3, [r7, #20]
 8024502:	899b      	ldrh	r3, [r3, #12]
 8024504:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8024506:	2300      	movs	r3, #0
 8024508:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 802450a:	e011      	b.n	8024530 <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 802450c:	89fb      	ldrh	r3, [r7, #14]
 802450e:	b2db      	uxtb	r3, r3
 8024510:	6978      	ldr	r0, [r7, #20]
 8024512:	4619      	mov	r1, r3
 8024514:	f000 f934 	bl	8024780 <OBJ_GetEntryDesc>
 8024518:	4603      	mov	r3, r0
 802451a:	889a      	ldrh	r2, [r3, #4]
 802451c:	89bb      	ldrh	r3, [r7, #12]
 802451e:	4013      	ands	r3, r2
 8024520:	b29b      	uxth	r3, r3
 8024522:	2b00      	cmp	r3, #0
 8024524:	d001      	beq.n	802452a <OBJ_GetNoOfObjects+0x5e>
                        t = 0;
 8024526:	2300      	movs	r3, #0
 8024528:	747b      	strb	r3, [r7, #17]
                    i++;
 802452a:	89fb      	ldrh	r3, [r7, #14]
 802452c:	3301      	adds	r3, #1
 802452e:	81fb      	strh	r3, [r7, #14]
            if ( t )
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                UINT16 i = 0;

                while ( t && i <= maxSubindex )
 8024530:	7c7b      	ldrb	r3, [r7, #17]
 8024532:	2b00      	cmp	r3, #0
 8024534:	d004      	beq.n	8024540 <OBJ_GetNoOfObjects+0x74>
 8024536:	7afb      	ldrb	r3, [r7, #11]
 8024538:	b29b      	uxth	r3, r3
 802453a:	89fa      	ldrh	r2, [r7, #14]
 802453c:	429a      	cmp	r2, r3
 802453e:	d9e5      	bls.n	802450c <OBJ_GetNoOfObjects+0x40>
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
                        t = 0;
                    i++;
                }
            }
            if ( !t )
 8024540:	7c7b      	ldrb	r3, [r7, #17]
 8024542:	2b00      	cmp	r3, #0
 8024544:	d102      	bne.n	802454c <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8024546:	8a7b      	ldrh	r3, [r7, #18]
 8024548:	3301      	adds	r3, #1
 802454a:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 802454c:	697b      	ldr	r3, [r7, #20]
 802454e:	685b      	ldr	r3, [r3, #4]
 8024550:	617b      	str	r3, [r7, #20]
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
    UINT16 n = 0;


    while (pObjEntry != NULL)
 8024552:	697b      	ldr	r3, [r7, #20]
 8024554:	2b00      	cmp	r3, #0
 8024556:	d1c9      	bne.n	80244ec <OBJ_GetNoOfObjects+0x20>
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }

    return n;
 8024558:	8a7b      	ldrh	r3, [r7, #18]
}
 802455a:	4618      	mov	r0, r3
 802455c:	3718      	adds	r7, #24
 802455e:	46bd      	mov	sp, r7
 8024560:	bd80      	pop	{r7, pc}
 8024562:	bf00      	nop

08024564 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 8024564:	b580      	push	{r7, lr}
 8024566:	b088      	sub	sp, #32
 8024568:	af00      	add	r7, sp, #0
 802456a:	60b9      	str	r1, [r7, #8]
 802456c:	607b      	str	r3, [r7, #4]
 802456e:	4603      	mov	r3, r0
 8024570:	81fb      	strh	r3, [r7, #14]
 8024572:	4613      	mov	r3, r2
 8024574:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 8024576:	89fb      	ldrh	r3, [r7, #14]
 8024578:	2220      	movs	r2, #32
 802457a:	fa02 f303 	lsl.w	r3, r2, r3
 802457e:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 8024580:	68bb      	ldr	r3, [r7, #8]
 8024582:	881b      	ldrh	r3, [r3, #0]
 8024584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024588:	d10c      	bne.n	80245a4 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 802458a:	f7fc f825 	bl	80205d8 <COE_GetObjectDictionary>
 802458e:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 8024590:	69fb      	ldr	r3, [r7, #28]
 8024592:	2b00      	cmp	r3, #0
 8024594:	d109      	bne.n	80245aa <OBJ_GetObjectList+0x46>
 8024596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024598:	2b00      	cmp	r3, #0
 802459a:	d006      	beq.n	80245aa <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 802459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802459e:	221b      	movs	r2, #27
 80245a0:	701a      	strb	r2, [r3, #0]
 80245a2:	e002      	b.n	80245aa <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 80245a4:	4b2c      	ldr	r3, [pc, #176]	; (8024658 <OBJ_GetObjectList+0xf4>)
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 80245aa:	69fb      	ldr	r3, [r7, #28]
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	d03e      	beq.n	802462e <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 80245b0:	e037      	b.n	8024622 <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 80245b2:	69fb      	ldr	r3, [r7, #28]
 80245b4:	891b      	ldrh	r3, [r3, #8]
 80245b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80245ba:	d32f      	bcc.n	802461c <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 80245bc:	89fb      	ldrh	r3, [r7, #14]
 80245be:	837b      	strh	r3, [r7, #26]
                if ( t )
 80245c0:	8b7b      	ldrh	r3, [r7, #26]
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	d01d      	beq.n	8024602 <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80245c6:	69fb      	ldr	r3, [r7, #28]
 80245c8:	899b      	ldrh	r3, [r3, #12]
 80245ca:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 80245cc:	2300      	movs	r3, #0
 80245ce:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 80245d0:	e010      	b.n	80245f4 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 80245d2:	7e7b      	ldrb	r3, [r7, #25]
 80245d4:	69f8      	ldr	r0, [r7, #28]
 80245d6:	4619      	mov	r1, r3
 80245d8:	f000 f8d2 	bl	8024780 <OBJ_GetEntryDesc>
 80245dc:	4603      	mov	r3, r0
 80245de:	889a      	ldrh	r2, [r3, #4]
 80245e0:	8afb      	ldrh	r3, [r7, #22]
 80245e2:	4013      	ands	r3, r2
 80245e4:	b29b      	uxth	r3, r3
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d001      	beq.n	80245ee <OBJ_GetObjectList+0x8a>
                            t = 0;
 80245ea:	2300      	movs	r3, #0
 80245ec:	837b      	strh	r3, [r7, #26]
                        i++;
 80245ee:	7e7b      	ldrb	r3, [r7, #25]
 80245f0:	3301      	adds	r3, #1
 80245f2:	767b      	strb	r3, [r7, #25]
                if ( t )
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                    UINT8 i = 0;

                    while ( t && i <= maxSubindex )
 80245f4:	8b7b      	ldrh	r3, [r7, #26]
 80245f6:	2b00      	cmp	r3, #0
 80245f8:	d003      	beq.n	8024602 <OBJ_GetObjectList+0x9e>
 80245fa:	7e7a      	ldrb	r2, [r7, #25]
 80245fc:	7d7b      	ldrb	r3, [r7, #21]
 80245fe:	429a      	cmp	r2, r3
 8024600:	d9e7      	bls.n	80245d2 <OBJ_GetObjectList+0x6e>
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
                            t = 0;
                        i++;
                    }
                }
                if ( !t )
 8024602:	8b7b      	ldrh	r3, [r7, #26]
 8024604:	2b00      	cmp	r3, #0
 8024606:	d109      	bne.n	802461c <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8024608:	69fb      	ldr	r3, [r7, #28]
 802460a:	891a      	ldrh	r2, [r3, #8]
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	801a      	strh	r2, [r3, #0]
                    pData++;
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	3302      	adds	r3, #2
 8024614:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8024616:	89bb      	ldrh	r3, [r7, #12]
 8024618:	3b02      	subs	r3, #2
 802461a:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 802461c:	69fb      	ldr	r3, [r7, #28]
 802461e:	685b      	ldr	r3, [r3, #4]
 8024620:	61fb      	str	r3, [r7, #28]
        pObjEntry = pSdoInfoObjEntry;
    }

    if ( pObjEntry != NULL )
    {
        while (pObjEntry != NULL && size > 1 )
 8024622:	69fb      	ldr	r3, [r7, #28]
 8024624:	2b00      	cmp	r3, #0
 8024626:	d002      	beq.n	802462e <OBJ_GetObjectList+0xca>
 8024628:	89bb      	ldrh	r3, [r7, #12]
 802462a:	2b01      	cmp	r3, #1
 802462c:	d8c1      	bhi.n	80245b2 <OBJ_GetObjectList+0x4e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 802462e:	69fb      	ldr	r3, [r7, #28]
 8024630:	2b00      	cmp	r3, #0
 8024632:	d004      	beq.n	802463e <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8024634:	69fb      	ldr	r3, [r7, #28]
 8024636:	891a      	ldrh	r2, [r3, #8]
 8024638:	68bb      	ldr	r3, [r7, #8]
 802463a:	801a      	strh	r2, [r3, #0]
 802463c:	e003      	b.n	8024646 <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 802463e:	68bb      	ldr	r3, [r7, #8]
 8024640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024644:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8024646:	4a04      	ldr	r2, [pc, #16]	; (8024658 <OBJ_GetObjectList+0xf4>)
 8024648:	69fb      	ldr	r3, [r7, #28]
 802464a:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 802464c:	89bb      	ldrh	r3, [r7, #12]
}
 802464e:	4618      	mov	r0, r3
 8024650:	3720      	adds	r7, #32
 8024652:	46bd      	mov	sp, r7
 8024654:	bd80      	pop	{r7, pc}
 8024656:	bf00      	nop
 8024658:	1ffead44 	.word	0x1ffead44

0802465c <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 802465c:	b590      	push	{r4, r7, lr}
 802465e:	b08d      	sub	sp, #52	; 0x34
 8024660:	af00      	add	r7, sp, #0
 8024662:	60ba      	str	r2, [r7, #8]
 8024664:	607b      	str	r3, [r7, #4]
 8024666:	4603      	mov	r3, r0
 8024668:	81fb      	strh	r3, [r7, #14]
 802466a:	460b      	mov	r3, r1
 802466c:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 802466e:	2300      	movs	r3, #0
 8024670:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 8024672:	68bb      	ldr	r3, [r7, #8]
 8024674:	695b      	ldr	r3, [r3, #20]
 8024676:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024678:	68bb      	ldr	r3, [r7, #8]
 802467a:	899b      	ldrh	r3, [r3, #12]
 802467c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024680:	121b      	asrs	r3, r3, #8
 8024682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8024686:	7b7b      	ldrb	r3, [r7, #13]
 8024688:	2b00      	cmp	r3, #0
 802468a:	d003      	beq.n	8024694 <OBJ_GetDesc+0x38>
 802468c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024690:	2b07      	cmp	r3, #7
 8024692:	d10f      	bne.n	80246b4 <OBJ_GetDesc+0x58>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );
 8024694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024696:	f005 fee9 	bl	802a46c <strlen>
 802469a:	4603      	mov	r3, r0
 802469c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	2b00      	cmp	r3, #0
 80246a2:	d006      	beq.n	80246b2 <OBJ_GetDesc+0x56>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 80246a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80246a6:	6878      	ldr	r0, [r7, #4]
 80246a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80246aa:	461a      	mov	r2, r3
 80246ac:	f005 fe20 	bl	802a2f0 <memcpy>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );

        // If there is a pointer given, copy data:
        if ( pData )
 80246b0:	e05f      	b.n	8024772 <OBJ_GetDesc+0x116>
 80246b2:	e05e      	b.n	8024772 <OBJ_GetDesc+0x116>
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 80246b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80246b8:	2b09      	cmp	r3, #9
 80246ba:	d13c      	bne.n	8024736 <OBJ_GetDesc+0xda>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 80246bc:	2301      	movs	r3, #1
 80246be:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 80246c0:	7b7b      	ldrb	r3, [r7, #13]
 80246c2:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 80246c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80246c6:	f005 fed1 	bl	802a46c <strlen>
 80246ca:	4603      	mov	r3, r0
 80246cc:	3301      	adds	r3, #1
 80246ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80246d0:	4413      	add	r3, r2
 80246d2:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 80246d4:	e023      	b.n	802471e <OBJ_GetDesc+0xc2>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
            {
                if ( i == tmpSubindex )
 80246d6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80246d8:	8c3b      	ldrh	r3, [r7, #32]
 80246da:	429a      	cmp	r2, r3
 80246dc:	d114      	bne.n	8024708 <OBJ_GetDesc+0xac>
                {
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
 80246de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80246e0:	f005 fec4 	bl	802a46c <strlen>
 80246e4:	4603      	mov	r3, r0
 80246e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	2b00      	cmp	r3, #0
 80246ec:	d009      	beq.n	8024702 <OBJ_GetDesc+0xa6>
 80246ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d006      	beq.n	8024702 <OBJ_GetDesc+0xa6>
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 80246f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80246f6:	6878      	ldr	r0, [r7, #4]
 80246f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80246fa:	461a      	mov	r2, r3
 80246fc:	f005 fdf8 	bl	802a2f0 <memcpy>
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8024700:	e019      	b.n	8024736 <OBJ_GetDesc+0xda>
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
                    if ( pData && strSize )
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
 8024702:	2300      	movs	r3, #0
 8024704:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8024706:	e016      	b.n	8024736 <OBJ_GetDesc+0xda>
                }
                else
                {
                    i++;
 8024708:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802470a:	3301      	adds	r3, #1
 802470c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 802470e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024710:	f005 feac 	bl	802a46c <strlen>
 8024714:	4603      	mov	r3, r0
 8024716:	3301      	adds	r3, #1
 8024718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802471a:	4413      	add	r3, r2
 802471c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 tmpSubindex = subindex;

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
            while (( i <= tmpSubindex )
 802471e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8024720:	8c3b      	ldrh	r3, [r7, #32]
 8024722:	429a      	cmp	r2, r3
 8024724:	d807      	bhi.n	8024736 <OBJ_GetDesc+0xda>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
 8024726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024728:	781b      	ldrb	r3, [r3, #0]
 802472a:	2bff      	cmp	r3, #255	; 0xff
 802472c:	d003      	beq.n	8024736 <OBJ_GetDesc+0xda>
 802472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024730:	781b      	ldrb	r3, [r3, #0]
 8024732:	2bfe      	cmp	r3, #254	; 0xfe
 8024734:	d1cf      	bne.n	80246d6 <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 8024736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024738:	2b00      	cmp	r3, #0
 802473a:	d11a      	bne.n	8024772 <OBJ_GetDesc+0x116>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 802473c:	230c      	movs	r3, #12
 802473e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	2b00      	cmp	r3, #0
 8024744:	d015      	beq.n	8024772 <OBJ_GetDesc+0x116>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 8024746:	4b0d      	ldr	r3, [pc, #52]	; (802477c <OBJ_GetDesc+0x120>)
 8024748:	f107 0410 	add.w	r4, r7, #16
 802474c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802474e:	c407      	stmia	r4!, {r0, r1, r2}
 8024750:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8024752:	f107 0310 	add.w	r3, r7, #16
 8024756:	f103 0209 	add.w	r2, r3, #9
 802475a:	7b7b      	ldrb	r3, [r7, #13]
 802475c:	4610      	mov	r0, r2
 802475e:	4619      	mov	r1, r3
 8024760:	f7ff fe6a 	bl	8024438 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 8024764:	f107 0310 	add.w	r3, r7, #16
 8024768:	6878      	ldr	r0, [r7, #4]
 802476a:	4619      	mov	r1, r3
 802476c:	220d      	movs	r2, #13
 802476e:	f005 fdbf 	bl	802a2f0 <memcpy>
            }
        }
    }

    return strSize;
 8024772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8024774:	4618      	mov	r0, r3
 8024776:	3734      	adds	r7, #52	; 0x34
 8024778:	46bd      	mov	sp, r7
 802477a:	bd90      	pop	{r4, r7, pc}
 802477c:	1ffe9398 	.word	0x1ffe9398

08024780 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8024780:	b480      	push	{r7}
 8024782:	b085      	sub	sp, #20
 8024784:	af00      	add	r7, sp, #0
 8024786:	6078      	str	r0, [r7, #4]
 8024788:	460b      	mov	r3, r1
 802478a:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	899b      	ldrh	r3, [r3, #12]
 8024790:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024794:	121b      	asrs	r3, r3, #8
 8024796:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8024798:	7afb      	ldrb	r3, [r7, #11]
 802479a:	2b08      	cmp	r3, #8
 802479c:	d10b      	bne.n	80247b6 <OBJ_GetEntryDesc+0x36>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 802479e:	78fb      	ldrb	r3, [r7, #3]
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d103      	bne.n	80247ac <OBJ_GetEntryDesc+0x2c>
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 80247a4:	687b      	ldr	r3, [r7, #4]
 80247a6:	691b      	ldr	r3, [r3, #16]
 80247a8:	60fb      	str	r3, [r7, #12]
 80247aa:	e00d      	b.n	80247c8 <OBJ_GetEntryDesc+0x48>
        else
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	691b      	ldr	r3, [r3, #16]
 80247b0:	3306      	adds	r3, #6
 80247b2:	60fb      	str	r3, [r7, #12]
 80247b4:	e008      	b.n	80247c8 <OBJ_GetEntryDesc+0x48>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	6919      	ldr	r1, [r3, #16]
 80247ba:	78fa      	ldrb	r2, [r7, #3]
 80247bc:	4613      	mov	r3, r2
 80247be:	005b      	lsls	r3, r3, #1
 80247c0:	4413      	add	r3, r2
 80247c2:	005b      	lsls	r3, r3, #1
 80247c4:	440b      	add	r3, r1
 80247c6:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 80247c8:	68fb      	ldr	r3, [r7, #12]
}
 80247ca:	4618      	mov	r0, r3
 80247cc:	3714      	adds	r7, #20
 80247ce:	46bd      	mov	sp, r7
 80247d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247d4:	4770      	bx	lr
 80247d6:	bf00      	nop

080247d8 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 80247d8:	b480      	push	{r7}
 80247da:	b083      	sub	sp, #12
 80247dc:	af00      	add	r7, sp, #0
 80247de:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 80247e0:	687b      	ldr	r3, [r7, #4]
 80247e2:	330a      	adds	r3, #10
}
 80247e4:	4618      	mov	r0, r3
 80247e6:	370c      	adds	r7, #12
 80247e8:	46bd      	mov	sp, r7
 80247ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ee:	4770      	bx	lr

080247f0 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 80247f0:	b480      	push	{r7}
 80247f2:	b087      	sub	sp, #28
 80247f4:	af00      	add	r7, sp, #0
 80247f6:	4603      	mov	r3, r0
 80247f8:	6039      	str	r1, [r7, #0]
 80247fa:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
/*ECATCHANGE_START(V5.11) OBJ1*/
    UINT16 bitOffset = 0;
 80247fc:	2300      	movs	r3, #0
 80247fe:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024800:	683b      	ldr	r3, [r7, #0]
 8024802:	899b      	ldrh	r3, [r3, #12]
 8024804:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024808:	121b      	asrs	r3, r3, #8
 802480a:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    if(subindex > 0)
 802480c:	79fb      	ldrb	r3, [r7, #7]
 802480e:	2b00      	cmp	r3, #0
 8024810:	d002      	beq.n	8024818 <OBJ_GetEntryOffset+0x28>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8024812:	8abb      	ldrh	r3, [r7, #20]
 8024814:	3310      	adds	r3, #16
 8024816:	82bb      	strh	r3, [r7, #20]
    }
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
 8024818:	7bfb      	ldrb	r3, [r7, #15]
 802481a:	2b07      	cmp	r3, #7
 802481c:	d101      	bne.n	8024822 <OBJ_GetEntryOffset+0x32>
        return 0;
 802481e:	2300      	movs	r3, #0
 8024820:	e091      	b.n	8024946 <OBJ_GetEntryOffset+0x156>

    for (i = 1; i <= subindex; i++)
 8024822:	2301      	movs	r3, #1
 8024824:	82fb      	strh	r3, [r7, #22]
 8024826:	e087      	b.n	8024938 <OBJ_GetEntryOffset+0x148>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8024828:	7bfb      	ldrb	r3, [r7, #15]
 802482a:	2b08      	cmp	r3, #8
 802482c:	d104      	bne.n	8024838 <OBJ_GetEntryOffset+0x48>
           )
            pEntry = &pObjEntry->pEntryDesc[1];
 802482e:	683b      	ldr	r3, [r7, #0]
 8024830:	691b      	ldr	r3, [r3, #16]
 8024832:	3306      	adds	r3, #6
 8024834:	613b      	str	r3, [r7, #16]
 8024836:	e008      	b.n	802484a <OBJ_GetEntryOffset+0x5a>
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8024838:	683b      	ldr	r3, [r7, #0]
 802483a:	6919      	ldr	r1, [r3, #16]
 802483c:	8afa      	ldrh	r2, [r7, #22]
 802483e:	4613      	mov	r3, r2
 8024840:	005b      	lsls	r3, r3, #1
 8024842:	4413      	add	r3, r2
 8024844:	005b      	lsls	r3, r3, #1
 8024846:	440b      	add	r3, r1
 8024848:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 802484a:	693b      	ldr	r3, [r7, #16]
 802484c:	881b      	ldrh	r3, [r3, #0]
 802484e:	2b1f      	cmp	r3, #31
 8024850:	d023      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 8024852:	2b1f      	cmp	r3, #31
 8024854:	dc0d      	bgt.n	8024872 <OBJ_GetEntryOffset+0x82>
 8024856:	2b06      	cmp	r3, #6
 8024858:	d01f      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 802485a:	2b06      	cmp	r3, #6
 802485c:	dc04      	bgt.n	8024868 <OBJ_GetEntryOffset+0x78>
 802485e:	2b03      	cmp	r3, #3
 8024860:	d01b      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 8024862:	2b04      	cmp	r3, #4
 8024864:	d037      	beq.n	80248d6 <OBJ_GetEntryOffset+0xe6>
 8024866:	e058      	b.n	802491a <OBJ_GetEntryOffset+0x12a>
 8024868:	2b08      	cmp	r3, #8
 802486a:	dd34      	ble.n	80248d6 <OBJ_GetEntryOffset+0xe6>
 802486c:	2b0b      	cmp	r3, #11
 802486e:	d014      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 8024870:	e053      	b.n	802491a <OBJ_GetEntryOffset+0x12a>
 8024872:	2b2f      	cmp	r3, #47	; 0x2f
 8024874:	d02f      	beq.n	80248d6 <OBJ_GetEntryOffset+0xe6>
 8024876:	2b2f      	cmp	r3, #47	; 0x2f
 8024878:	dc04      	bgt.n	8024884 <OBJ_GetEntryOffset+0x94>
 802487a:	2b20      	cmp	r3, #32
 802487c:	d02b      	beq.n	80248d6 <OBJ_GetEntryOffset+0xe6>
 802487e:	2b2e      	cmp	r3, #46	; 0x2e
 8024880:	d00b      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 8024882:	e04a      	b.n	802491a <OBJ_GetEntryOffset+0x12a>
 8024884:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8024888:	d007      	beq.n	802489a <OBJ_GetEntryOffset+0xaa>
 802488a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 802488e:	db44      	blt.n	802491a <OBJ_GetEntryOffset+0x12a>
 8024890:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 8024894:	2b01      	cmp	r3, #1
 8024896:	d840      	bhi.n	802491a <OBJ_GetEntryOffset+0x12a>
 8024898:	e01d      	b.n	80248d6 <OBJ_GetEntryOffset+0xe6>
/*ECATCHANGE_END(V5.11) SDO9*/

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 802489a:	8abb      	ldrh	r3, [r7, #20]
 802489c:	330f      	adds	r3, #15
 802489e:	b29b      	uxth	r3, r3
 80248a0:	f023 030f 	bic.w	r3, r3, #15
 80248a4:	82bb      	strh	r3, [r7, #20]
#endif


/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 80248a6:	79fb      	ldrb	r3, [r7, #7]
 80248a8:	b29b      	uxth	r3, r3
 80248aa:	8afa      	ldrh	r2, [r7, #22]
 80248ac:	429a      	cmp	r2, r3
 80248ae:	d211      	bcs.n	80248d4 <OBJ_GetEntryOffset+0xe4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 80248b0:	693b      	ldr	r3, [r7, #16]
 80248b2:	881b      	ldrh	r3, [r3, #0]
 80248b4:	2b0b      	cmp	r3, #11
 80248b6:	d004      	beq.n	80248c2 <OBJ_GetEntryOffset+0xd2>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 80248b8:	693b      	ldr	r3, [r7, #16]
 80248ba:	881b      	ldrh	r3, [r3, #0]
 80248bc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80248c0:	d104      	bne.n	80248cc <OBJ_GetEntryOffset+0xdc>
                {
                    bitOffset += pEntry->BitLength;
 80248c2:	693b      	ldr	r3, [r7, #16]
 80248c4:	885a      	ldrh	r2, [r3, #2]
 80248c6:	8abb      	ldrh	r3, [r7, #20]
 80248c8:	4413      	add	r3, r2
 80248ca:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 80248cc:	8abb      	ldrh	r3, [r7, #20]
 80248ce:	3310      	adds	r3, #16
 80248d0:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 80248d2:	e02e      	b.n	8024932 <OBJ_GetEntryOffset+0x142>
 80248d4:	e02d      	b.n	8024932 <OBJ_GetEntryOffset+0x142>
        case    DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 80248d6:	8abb      	ldrh	r3, [r7, #20]
 80248d8:	331f      	adds	r3, #31
 80248da:	b29b      	uxth	r3, r3
 80248dc:	f023 031f 	bic.w	r3, r3, #31
 80248e0:	82bb      	strh	r3, [r7, #20]
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 80248e2:	79fb      	ldrb	r3, [r7, #7]
 80248e4:	b29b      	uxth	r3, r3
 80248e6:	8afa      	ldrh	r2, [r7, #22]
 80248e8:	429a      	cmp	r2, r3
 80248ea:	d215      	bcs.n	8024918 <OBJ_GetEntryOffset+0x128>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 80248ec:	693b      	ldr	r3, [r7, #16]
 80248ee:	881b      	ldrh	r3, [r3, #0]
 80248f0:	f240 2262 	movw	r2, #610	; 0x262
 80248f4:	4293      	cmp	r3, r2
 80248f6:	d005      	beq.n	8024904 <OBJ_GetEntryOffset+0x114>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 80248f8:	693b      	ldr	r3, [r7, #16]
 80248fa:	881b      	ldrh	r3, [r3, #0]
 80248fc:	f240 2263 	movw	r2, #611	; 0x263
 8024900:	4293      	cmp	r3, r2
 8024902:	d105      	bne.n	8024910 <OBJ_GetEntryOffset+0x120>
                {
                    bitOffset += pEntry->BitLength;
 8024904:	693b      	ldr	r3, [r7, #16]
 8024906:	885a      	ldrh	r2, [r3, #2]
 8024908:	8abb      	ldrh	r3, [r7, #20]
 802490a:	4413      	add	r3, r2
 802490c:	82bb      	strh	r3, [r7, #20]
 802490e:	e003      	b.n	8024918 <OBJ_GetEntryOffset+0x128>
                }
                else
                   bitOffset += 32;
 8024910:	8abb      	ldrh	r3, [r7, #20]
 8024912:	3320      	adds	r3, #32
 8024914:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8024916:	e00c      	b.n	8024932 <OBJ_GetEntryOffset+0x142>
 8024918:	e00b      	b.n	8024932 <OBJ_GetEntryOffset+0x142>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 802491a:	79fb      	ldrb	r3, [r7, #7]
 802491c:	b29b      	uxth	r3, r3
 802491e:	8afa      	ldrh	r2, [r7, #22]
 8024920:	429a      	cmp	r2, r3
 8024922:	d205      	bcs.n	8024930 <OBJ_GetEntryOffset+0x140>
                bitOffset += pEntry->BitLength;
 8024924:	693b      	ldr	r3, [r7, #16]
 8024926:	885a      	ldrh	r2, [r3, #2]
 8024928:	8abb      	ldrh	r3, [r7, #20]
 802492a:	4413      	add	r3, r2
 802492c:	82bb      	strh	r3, [r7, #20]
            break;
 802492e:	e7ff      	b.n	8024930 <OBJ_GetEntryOffset+0x140>
 8024930:	bf00      	nop
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
        return 0;

    for (i = 1; i <= subindex; i++)
 8024932:	8afb      	ldrh	r3, [r7, #22]
 8024934:	3301      	adds	r3, #1
 8024936:	82fb      	strh	r3, [r7, #22]
 8024938:	79fb      	ldrb	r3, [r7, #7]
 802493a:	b29b      	uxth	r3, r3
 802493c:	8afa      	ldrh	r2, [r7, #22]
 802493e:	429a      	cmp	r2, r3
 8024940:	f67f af72 	bls.w	8024828 <OBJ_GetEntryOffset+0x38>
                bitOffset += pEntry->BitLength;
            break;
        }
    }

    return bitOffset;
 8024944:	8abb      	ldrh	r3, [r7, #20]
}
 8024946:	4618      	mov	r0, r3
 8024948:	371c      	adds	r7, #28
 802494a:	46bd      	mov	sp, r7
 802494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024950:	4770      	bx	lr
 8024952:	bf00      	nop

08024954 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8024954:	b480      	push	{r7}
 8024956:	b083      	sub	sp, #12
 8024958:	af00      	add	r7, sp, #0
 802495a:	4603      	mov	r3, r0
 802495c:	460a      	mov	r2, r1
 802495e:	80fb      	strh	r3, [r7, #6]
 8024960:	4613      	mov	r3, r2
 8024962:	80bb      	strh	r3, [r7, #4]
    /*ECATCHANGE_START(V5.11) ESM7*/
    switch (NewSyncType)
 8024964:	88bb      	ldrh	r3, [r7, #4]
 8024966:	2b22      	cmp	r3, #34	; 0x22
 8024968:	f200 80bb 	bhi.w	8024ae2 <CheckSyncTypeValue+0x18e>
 802496c:	a201      	add	r2, pc, #4	; (adr r2, 8024974 <CheckSyncTypeValue+0x20>)
 802496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024972:	bf00      	nop
 8024974:	08024a01 	.word	0x08024a01
 8024978:	08024a05 	.word	0x08024a05
 802497c:	08024a77 	.word	0x08024a77
 8024980:	08024aad 	.word	0x08024aad
 8024984:	08024ae3 	.word	0x08024ae3
 8024988:	08024ae3 	.word	0x08024ae3
 802498c:	08024ae3 	.word	0x08024ae3
 8024990:	08024ae3 	.word	0x08024ae3
 8024994:	08024ae3 	.word	0x08024ae3
 8024998:	08024ae3 	.word	0x08024ae3
 802499c:	08024ae3 	.word	0x08024ae3
 80249a0:	08024ae3 	.word	0x08024ae3
 80249a4:	08024ae3 	.word	0x08024ae3
 80249a8:	08024ae3 	.word	0x08024ae3
 80249ac:	08024ae3 	.word	0x08024ae3
 80249b0:	08024ae3 	.word	0x08024ae3
 80249b4:	08024ae3 	.word	0x08024ae3
 80249b8:	08024ae3 	.word	0x08024ae3
 80249bc:	08024ae3 	.word	0x08024ae3
 80249c0:	08024ae3 	.word	0x08024ae3
 80249c4:	08024ae3 	.word	0x08024ae3
 80249c8:	08024ae3 	.word	0x08024ae3
 80249cc:	08024ae3 	.word	0x08024ae3
 80249d0:	08024ae3 	.word	0x08024ae3
 80249d4:	08024ae3 	.word	0x08024ae3
 80249d8:	08024ae3 	.word	0x08024ae3
 80249dc:	08024ae3 	.word	0x08024ae3
 80249e0:	08024ae3 	.word	0x08024ae3
 80249e4:	08024ae3 	.word	0x08024ae3
 80249e8:	08024ae3 	.word	0x08024ae3
 80249ec:	08024ae3 	.word	0x08024ae3
 80249f0:	08024ae3 	.word	0x08024ae3
 80249f4:	08024ae3 	.word	0x08024ae3
 80249f8:	08024ae3 	.word	0x08024ae3
 80249fc:	08024a53 	.word	0x08024a53
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8024a00:	2300      	movs	r3, #0
 8024a02:	e06f      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        break;

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8024a04:	88fb      	ldrh	r3, [r7, #6]
 8024a06:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024a0a:	4293      	cmp	r3, r2
 8024a0c:	d10b      	bne.n	8024a26 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8024a0e:	4b38      	ldr	r3, [pc, #224]	; (8024af0 <CheckSyncTypeValue+0x19c>)
 8024a10:	881b      	ldrh	r3, [r3, #0]
 8024a12:	2b00      	cmp	r3, #0
 8024a14:	d007      	beq.n	8024a26 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8024a16:	4b37      	ldr	r3, [pc, #220]	; (8024af4 <CheckSyncTypeValue+0x1a0>)
 8024a18:	899b      	ldrh	r3, [r3, #12]
 8024a1a:	f003 0302 	and.w	r3, r3, #2
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	dd01      	ble.n	8024a26 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8024a22:	2300      	movs	r3, #0
 8024a24:	e05e      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) 
 8024a26:	88fb      	ldrh	r3, [r7, #6]
 8024a28:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024a2c:	4293      	cmp	r3, r2
 8024a2e:	d10f      	bne.n	8024a50 <CheckSyncTypeValue+0xfc>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024a30:	4b31      	ldr	r3, [pc, #196]	; (8024af8 <CheckSyncTypeValue+0x1a4>)
 8024a32:	899b      	ldrh	r3, [r3, #12]
 8024a34:	f003 0302 	and.w	r3, r3, #2
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	dd09      	ble.n	8024a50 <CheckSyncTypeValue+0xfc>
            && (nPdOutputSize == 0) 
 8024a3c:	4b2c      	ldr	r3, [pc, #176]	; (8024af0 <CheckSyncTypeValue+0x19c>)
 8024a3e:	881b      	ldrh	r3, [r3, #0]
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d105      	bne.n	8024a50 <CheckSyncTypeValue+0xfc>
            && (nPdInputSize > 0))
 8024a44:	4b2d      	ldr	r3, [pc, #180]	; (8024afc <CheckSyncTypeValue+0x1a8>)
 8024a46:	881b      	ldrh	r3, [r3, #0]
 8024a48:	2b00      	cmp	r3, #0
 8024a4a:	d001      	beq.n	8024a50 <CheckSyncTypeValue+0xfc>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8024a4c:	2300      	movs	r3, #0
 8024a4e:	e049      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
            }
        break;
 8024a50:	e047      	b.n	8024ae2 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 8024a52:	88fb      	ldrh	r3, [r7, #6]
 8024a54:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024a58:	4293      	cmp	r3, r2
 8024a5a:	d10b      	bne.n	8024a74 <CheckSyncTypeValue+0x120>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024a5c:	4b26      	ldr	r3, [pc, #152]	; (8024af8 <CheckSyncTypeValue+0x1a4>)
 8024a5e:	899b      	ldrh	r3, [r3, #12]
 8024a60:	f003 0302 	and.w	r3, r3, #2
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	dd05      	ble.n	8024a74 <CheckSyncTypeValue+0x120>
            && (nPdOutputSize > 0))
 8024a68:	4b21      	ldr	r3, [pc, #132]	; (8024af0 <CheckSyncTypeValue+0x19c>)
 8024a6a:	881b      	ldrh	r3, [r3, #0]
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	d001      	beq.n	8024a74 <CheckSyncTypeValue+0x120>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8024a70:	2300      	movs	r3, #0
 8024a72:	e037      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
            }
        break;
 8024a74:	e035      	b.n	8024ae2 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8024a76:	88fb      	ldrh	r3, [r7, #6]
 8024a78:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024a7c:	4293      	cmp	r3, r2
 8024a7e:	d107      	bne.n	8024a90 <CheckSyncTypeValue+0x13c>
 8024a80:	4b1c      	ldr	r3, [pc, #112]	; (8024af4 <CheckSyncTypeValue+0x1a0>)
 8024a82:	899b      	ldrh	r3, [r3, #12]
 8024a84:	f003 0304 	and.w	r3, r3, #4
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	dd01      	ble.n	8024a90 <CheckSyncTypeValue+0x13c>
        {
            return 0;
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	e029      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8024a90:	88fb      	ldrh	r3, [r7, #6]
 8024a92:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024a96:	4293      	cmp	r3, r2
 8024a98:	d107      	bne.n	8024aaa <CheckSyncTypeValue+0x156>
 8024a9a:	4b17      	ldr	r3, [pc, #92]	; (8024af8 <CheckSyncTypeValue+0x1a4>)
 8024a9c:	899b      	ldrh	r3, [r3, #12]
 8024a9e:	f003 0304 	and.w	r3, r3, #4
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	dd01      	ble.n	8024aaa <CheckSyncTypeValue+0x156>
        {
            return 0;
 8024aa6:	2300      	movs	r3, #0
 8024aa8:	e01c      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        }
        break;
 8024aaa:	e01a      	b.n	8024ae2 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8024aac:	88fb      	ldrh	r3, [r7, #6]
 8024aae:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024ab2:	4293      	cmp	r3, r2
 8024ab4:	d107      	bne.n	8024ac6 <CheckSyncTypeValue+0x172>
 8024ab6:	4b0f      	ldr	r3, [pc, #60]	; (8024af4 <CheckSyncTypeValue+0x1a0>)
 8024ab8:	899b      	ldrh	r3, [r3, #12]
 8024aba:	f003 0308 	and.w	r3, r3, #8
 8024abe:	2b00      	cmp	r3, #0
 8024ac0:	dd01      	ble.n	8024ac6 <CheckSyncTypeValue+0x172>
        {
            return 0;
 8024ac2:	2300      	movs	r3, #0
 8024ac4:	e00e      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8024ac6:	88fb      	ldrh	r3, [r7, #6]
 8024ac8:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024acc:	4293      	cmp	r3, r2
 8024ace:	d107      	bne.n	8024ae0 <CheckSyncTypeValue+0x18c>
 8024ad0:	4b09      	ldr	r3, [pc, #36]	; (8024af8 <CheckSyncTypeValue+0x1a4>)
 8024ad2:	899b      	ldrh	r3, [r3, #12]
 8024ad4:	f003 0308 	and.w	r3, r3, #8
 8024ad8:	2b00      	cmp	r3, #0
 8024ada:	dd01      	ble.n	8024ae0 <CheckSyncTypeValue+0x18c>
        {
            return 0;
 8024adc:	2300      	movs	r3, #0
 8024ade:	e001      	b.n	8024ae4 <CheckSyncTypeValue+0x190>
        }
        break;
 8024ae0:	bf00      	nop
    } //switch 
/*ECATCHANGE_END(V5.11) ESM7*/
    return ABORTIDX_VALUE_EXCEEDED;
 8024ae2:	2312      	movs	r3, #18

}
 8024ae4:	4618      	mov	r0, r3
 8024ae6:	370c      	adds	r7, #12
 8024ae8:	46bd      	mov	sp, r7
 8024aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024aee:	4770      	bx	lr
 8024af0:	1ffea826 	.word	0x1ffea826
 8024af4:	1ffeacdc 	.word	0x1ffeacdc
 8024af8:	1ffeac98 	.word	0x1ffeac98
 8024afc:	1ffea850 	.word	0x1ffea850

08024b00 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8024b00:	b590      	push	{r4, r7, lr}
 8024b02:	b091      	sub	sp, #68	; 0x44
 8024b04:	af02      	add	r7, sp, #8
 8024b06:	60ba      	str	r2, [r7, #8]
 8024b08:	607b      	str	r3, [r7, #4]
 8024b0a:	4603      	mov	r3, r0
 8024b0c:	81fb      	strh	r3, [r7, #14]
 8024b0e:	460b      	mov	r3, r1
 8024b10:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8024b12:	7b7b      	ldrb	r3, [r7, #13]
 8024b14:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	899b      	ldrh	r3, [r3, #12]
 8024b1a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024b1e:	121b      	asrs	r3, r3, #8
 8024b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	899b      	ldrh	r3, [r3, #12]
 8024b28:	b2db      	uxtb	r3, r3
 8024b2a:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8024b2c:	7b7b      	ldrb	r3, [r7, #13]
 8024b2e:	867b      	strh	r3, [r7, #50]	; 0x32

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8024b30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024b34:	2b07      	cmp	r3, #7
 8024b36:	d008      	beq.n	8024b4a <OBJ_Read+0x4a>
 8024b38:	89fb      	ldrh	r3, [r7, #14]
 8024b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024b3e:	d304      	bcc.n	8024b4a <OBJ_Read+0x4a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	699b      	ldr	r3, [r3, #24]
 8024b44:	881b      	ldrh	r3, [r3, #0]
 8024b46:	b2db      	uxtb	r3, r3
 8024b48:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 8024b4a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024b4e:	2b00      	cmp	r3, #0
 8024b50:	d00c      	beq.n	8024b6c <OBJ_Read+0x6c>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 8024b52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024b56:	2b07      	cmp	r3, #7
 8024b58:	d003      	beq.n	8024b62 <OBJ_Read+0x62>
 8024b5a:	89fb      	ldrh	r3, [r7, #14]
 8024b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024b60:	d201      	bcs.n	8024b66 <OBJ_Read+0x66>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8024b62:	2305      	movs	r3, #5
 8024b64:	e29a      	b.n	802509c <OBJ_Read+0x59c>
        }

        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 8024b66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024b68:	867b      	strh	r3, [r7, #50]	; 0x32
 8024b6a:	e02a      	b.n	8024bc2 <OBJ_Read+0xc2>
    }
    else
        if ( subindex > maxSubindex )
 8024b6c:	7b7b      	ldrb	r3, [r7, #13]
 8024b6e:	b29b      	uxth	r3, r3
 8024b70:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8024b72:	429a      	cmp	r2, r3
 8024b74:	d201      	bcs.n	8024b7a <OBJ_Read+0x7a>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8024b76:	2311      	movs	r3, #17
 8024b78:	e290      	b.n	802509c <OBJ_Read+0x59c>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8024b7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024b7c:	b2db      	uxtb	r3, r3
 8024b7e:	6878      	ldr	r0, [r7, #4]
 8024b80:	4619      	mov	r1, r3
 8024b82:	f7ff fdfd 	bl	8024780 <OBJ_GetEntryDesc>
 8024b86:	6278      	str	r0, [r7, #36]	; 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 8024b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b8a:	889b      	ldrh	r3, [r3, #4]
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d018      	beq.n	8024bc2 <OBJ_Read+0xc2>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) < (nAlStatus & STATE_MASK) )
 8024b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b92:	889b      	ldrh	r3, [r3, #4]
 8024b94:	b2db      	uxtb	r3, r3
 8024b96:	f003 0307 	and.w	r3, r3, #7
 8024b9a:	b2db      	uxtb	r3, r3
 8024b9c:	005b      	lsls	r3, r3, #1
 8024b9e:	b2db      	uxtb	r3, r3
 8024ba0:	461a      	mov	r2, r3
 8024ba2:	4b9e      	ldr	r3, [pc, #632]	; (8024e1c <OBJ_Read+0x31c>)
 8024ba4:	781b      	ldrb	r3, [r3, #0]
 8024ba6:	f003 030f 	and.w	r3, r3, #15
 8024baa:	429a      	cmp	r2, r3
 8024bac:	da09      	bge.n	8024bc2 <OBJ_Read+0xc2>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8024bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bb0:	889b      	ldrh	r3, [r3, #4]
 8024bb2:	f003 0307 	and.w	r3, r3, #7
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	d101      	bne.n	8024bbe <OBJ_Read+0xbe>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 8024bba:	2306      	movs	r3, #6
 8024bbc:	e26e      	b.n	802509c <OBJ_Read+0x59c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8024bbe:	231a      	movs	r3, #26
 8024bc0:	e26c      	b.n	802509c <OBJ_Read+0x59c>
                    }
                }
            }
        }
        if ( pObjEntry->Read != NULL )
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	69db      	ldr	r3, [r3, #28]
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	d00d      	beq.n	8024be6 <OBJ_Read+0xe6>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	69dc      	ldr	r4, [r3, #28]
 8024bce:	89f9      	ldrh	r1, [r7, #14]
 8024bd0:	7b7a      	ldrb	r2, [r7, #13]
 8024bd2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024bd6:	9300      	str	r3, [sp, #0]
 8024bd8:	4608      	mov	r0, r1
 8024bda:	4611      	mov	r1, r2
 8024bdc:	68ba      	ldr	r2, [r7, #8]
 8024bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024be0:	47a0      	blx	r4
 8024be2:	4603      	mov	r3, r0
 8024be4:	e25a      	b.n	802509c <OBJ_Read+0x59c>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8024be6:	89fb      	ldrh	r3, [r7, #14]
 8024be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024bec:	d232      	bcs.n	8024c54 <OBJ_Read+0x154>
 8024bee:	7b7b      	ldrb	r3, [r7, #13]
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d02f      	beq.n	8024c54 <OBJ_Read+0x154>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024bf4:	687b      	ldr	r3, [r7, #4]
 8024bf6:	699b      	ldr	r3, [r3, #24]
 8024bf8:	623b      	str	r3, [r7, #32]
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8024bfa:	7b7b      	ldrb	r3, [r7, #13]
 8024bfc:	6878      	ldr	r0, [r7, #4]
 8024bfe:	4619      	mov	r1, r3
 8024c00:	f7ff fdbe 	bl	8024780 <OBJ_GetEntryDesc>
 8024c04:	6278      	str	r0, [r7, #36]	; 0x24
            size = BIT2BYTE(pEntry->BitLength);
 8024c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c08:	885b      	ldrh	r3, [r3, #2]
 8024c0a:	3307      	adds	r3, #7
 8024c0c:	10db      	asrs	r3, r3, #3
 8024c0e:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 8024c10:	6a3b      	ldr	r3, [r7, #32]
 8024c12:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8024c14:	7b7b      	ldrb	r3, [r7, #13]
 8024c16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024c1a:	3b01      	subs	r3, #1
 8024c1c:	009b      	lsls	r3, r3, #2
 8024c1e:	69ba      	ldr	r2, [r7, #24]
 8024c20:	4413      	add	r3, r2
 8024c22:	681b      	ldr	r3, [r3, #0]
 8024c24:	623b      	str	r3, [r7, #32]

            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 8024c26:	6a3b      	ldr	r3, [r7, #32]
 8024c28:	881a      	ldrh	r2, [r3, #0]
 8024c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c2c:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 8024c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c30:	3302      	adds	r3, #2
 8024c32:	6a3a      	ldr	r2, [r7, #32]
 8024c34:	8852      	ldrh	r2, [r2, #2]
 8024c36:	801a      	strh	r2, [r3, #0]
            pData += 2;
 8024c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c3a:	3304      	adds	r3, #4
 8024c3c:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 8024c3e:	6a3b      	ldr	r3, [r7, #32]
 8024c40:	3304      	adds	r3, #4
 8024c42:	623b      	str	r3, [r7, #32]

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 8024c44:	8bfb      	ldrh	r3, [r7, #30]
 8024c46:	3b04      	subs	r3, #4
 8024c48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024c4a:	6a39      	ldr	r1, [r7, #32]
 8024c4c:	461a      	mov	r2, r3
 8024c4e:	f005 fb4f 	bl	802a2f0 <memcpy>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
        }
        else if ( index < 0x1000 && subindex != 0 )
        {
 8024c52:	e222      	b.n	802509a <OBJ_Read+0x59a>
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 8024c54:	2300      	movs	r3, #0
 8024c56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            UINT8 result = 0;
 8024c5a:	2300      	movs	r3, #0
 8024c5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 8024c60:	7b7b      	ldrb	r3, [r7, #13]
 8024c62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024c64:	e20d      	b.n	8025082 <OBJ_Read+0x582>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	699b      	ldr	r3, [r3, #24]
 8024c6a:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 8024c6c:	2300      	movs	r3, #0
 8024c6e:	85fb      	strh	r3, [r7, #46]	; 0x2e

                if (i == 0)
 8024c70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d00b      	beq.n	8024c8e <OBJ_Read+0x18e>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 8024c76:	89fb      	ldrh	r3, [r7, #14]
 8024c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024c7c:	d307      	bcc.n	8024c8e <OBJ_Read+0x18e>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8024c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024c80:	b2db      	uxtb	r3, r3
 8024c82:	4618      	mov	r0, r3
 8024c84:	6879      	ldr	r1, [r7, #4]
 8024c86:	f7ff fdb3 	bl	80247f0 <OBJ_GetEntryOffset>
 8024c8a:	4603      	mov	r3, r0
 8024c8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 8024c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024c90:	091b      	lsrs	r3, r3, #4
 8024c92:	b29b      	uxth	r3, r3
 8024c94:	005b      	lsls	r3, r3, #1
 8024c96:	697a      	ldr	r2, [r7, #20]
 8024c98:	4413      	add	r3, r2
 8024c9a:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8024c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024c9e:	b2db      	uxtb	r3, r3
 8024ca0:	6878      	ldr	r0, [r7, #4]
 8024ca2:	4619      	mov	r1, r3
 8024ca4:	f7ff fd6c 	bl	8024780 <OBJ_GetEntryDesc>
 8024ca8:	6278      	str	r0, [r7, #36]	; 0x24

                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) >= (nAlStatus & STATE_MASK) )
 8024caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024cac:	889b      	ldrh	r3, [r3, #4]
 8024cae:	b2db      	uxtb	r3, r3
 8024cb0:	f003 0307 	and.w	r3, r3, #7
 8024cb4:	b2db      	uxtb	r3, r3
 8024cb6:	005b      	lsls	r3, r3, #1
 8024cb8:	b2db      	uxtb	r3, r3
 8024cba:	461a      	mov	r2, r3
 8024cbc:	4b57      	ldr	r3, [pc, #348]	; (8024e1c <OBJ_Read+0x31c>)
 8024cbe:	781b      	ldrb	r3, [r3, #0]
 8024cc0:	f003 030f 	and.w	r3, r3, #15
 8024cc4:	429a      	cmp	r2, r3
 8024cc6:	f2c0 8195 	blt.w	8024ff4 <OBJ_Read+0x4f4>
                {
                    if ( i == subindex                                     /* requested entry */
 8024cca:	7b7b      	ldrb	r3, [r7, #13]
 8024ccc:	b29b      	uxth	r3, r3
 8024cce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024cd0:	429a      	cmp	r2, r3
 8024cd2:	d00a      	beq.n	8024cea <OBJ_Read+0x1ea>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8024cd4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	f000 818a 	beq.w	8024ff2 <OBJ_Read+0x4f2>
 8024cde:	7b7b      	ldrb	r3, [r7, #13]
 8024ce0:	b29b      	uxth	r3, r3
 8024ce2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024ce4:	429a      	cmp	r2, r3
 8024ce6:	f0c0 8184 	bcc.w	8024ff2 <OBJ_Read+0x4f2>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 8024cea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	d10a      	bne.n	8024d06 <OBJ_Read+0x206>
 8024cf0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024cf4:	2b07      	cmp	r3, #7
 8024cf6:	d006      	beq.n	8024d06 <OBJ_Read+0x206>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8024cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024cfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8024cfc:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 8024cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024d00:	3302      	adds	r3, #2
 8024d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8024d04:	e175      	b.n	8024ff2 <OBJ_Read+0x4f2>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 8024d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d08:	881b      	ldrh	r3, [r3, #0]
 8024d0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            if (pEntry->DataType >= 0x700)
 8024d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d0e:	881b      	ldrh	r3, [r3, #0]
 8024d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8024d14:	d315      	bcc.n	8024d42 <OBJ_Read+0x242>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 8024d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d18:	885b      	ldrh	r3, [r3, #2]
 8024d1a:	2b08      	cmp	r3, #8
 8024d1c:	d804      	bhi.n	8024d28 <OBJ_Read+0x228>
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8024d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d20:	885b      	ldrh	r3, [r3, #2]
 8024d22:	332f      	adds	r3, #47	; 0x2f
 8024d24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024d26:	e00c      	b.n	8024d42 <OBJ_Read+0x242>
                                else if ( pEntry->BitLength == 16 )
 8024d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d2a:	885b      	ldrh	r3, [r3, #2]
 8024d2c:	2b10      	cmp	r3, #16
 8024d2e:	d102      	bne.n	8024d36 <OBJ_Read+0x236>
                                    dataType = DEFTYPE_UNSIGNED16;
 8024d30:	2306      	movs	r3, #6
 8024d32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024d34:	e005      	b.n	8024d42 <OBJ_Read+0x242>
                                else if ( pEntry->BitLength == 32 )
 8024d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d38:	885b      	ldrh	r3, [r3, #2]
 8024d3a:	2b20      	cmp	r3, #32
 8024d3c:	d101      	bne.n	8024d42 <OBJ_Read+0x242>
                                    dataType = DEFTYPE_UNSIGNED32;
 8024d3e:	2307      	movs	r3, #7
 8024d40:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            }

                            switch (dataType)
 8024d42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024d44:	2b11      	cmp	r3, #17
 8024d46:	f000 80e0 	beq.w	8024f0a <OBJ_Read+0x40a>
 8024d4a:	2b11      	cmp	r3, #17
 8024d4c:	dc1e      	bgt.n	8024d8c <OBJ_Read+0x28c>
 8024d4e:	2b05      	cmp	r3, #5
 8024d50:	d066      	beq.n	8024e20 <OBJ_Read+0x320>
 8024d52:	2b05      	cmp	r3, #5
 8024d54:	dc0d      	bgt.n	8024d72 <OBJ_Read+0x272>
 8024d56:	2b02      	cmp	r3, #2
 8024d58:	dc04      	bgt.n	8024d64 <OBJ_Read+0x264>
 8024d5a:	2b01      	cmp	r3, #1
 8024d5c:	da60      	bge.n	8024e20 <OBJ_Read+0x320>
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d03a      	beq.n	8024dd8 <OBJ_Read+0x2d8>
 8024d62:	e140      	b.n	8024fe6 <OBJ_Read+0x4e6>
 8024d64:	2b03      	cmp	r3, #3
 8024d66:	f000 80ad 	beq.w	8024ec4 <OBJ_Read+0x3c4>
 8024d6a:	2b04      	cmp	r3, #4
 8024d6c:	f000 80b9 	beq.w	8024ee2 <OBJ_Read+0x3e2>
 8024d70:	e139      	b.n	8024fe6 <OBJ_Read+0x4e6>
 8024d72:	2b08      	cmp	r3, #8
 8024d74:	dc03      	bgt.n	8024d7e <OBJ_Read+0x27e>
 8024d76:	2b07      	cmp	r3, #7
 8024d78:	f280 80b3 	bge.w	8024ee2 <OBJ_Read+0x3e2>
 8024d7c:	e0a2      	b.n	8024ec4 <OBJ_Read+0x3c4>
 8024d7e:	2b09      	cmp	r3, #9
 8024d80:	f000 8109 	beq.w	8024f96 <OBJ_Read+0x496>
 8024d84:	2b0b      	cmp	r3, #11
 8024d86:	f300 812e 	bgt.w	8024fe6 <OBJ_Read+0x4e6>
 8024d8a:	e0dc      	b.n	8024f46 <OBJ_Read+0x446>
 8024d8c:	2b2d      	cmp	r3, #45	; 0x2d
 8024d8e:	d047      	beq.n	8024e20 <OBJ_Read+0x320>
 8024d90:	2b2d      	cmp	r3, #45	; 0x2d
 8024d92:	dc11      	bgt.n	8024db8 <OBJ_Read+0x2b8>
 8024d94:	2b1e      	cmp	r3, #30
 8024d96:	d043      	beq.n	8024e20 <OBJ_Read+0x320>
 8024d98:	2b1e      	cmp	r3, #30
 8024d9a:	dc06      	bgt.n	8024daa <OBJ_Read+0x2aa>
 8024d9c:	2b15      	cmp	r3, #21
 8024d9e:	f000 80b4 	beq.w	8024f0a <OBJ_Read+0x40a>
 8024da2:	2b1b      	cmp	r3, #27
 8024da4:	f000 80b1 	beq.w	8024f0a <OBJ_Read+0x40a>
 8024da8:	e11d      	b.n	8024fe6 <OBJ_Read+0x4e6>
 8024daa:	2b1f      	cmp	r3, #31
 8024dac:	f000 808a 	beq.w	8024ec4 <OBJ_Read+0x3c4>
 8024db0:	2b20      	cmp	r3, #32
 8024db2:	f000 8096 	beq.w	8024ee2 <OBJ_Read+0x3e2>
 8024db6:	e116      	b.n	8024fe6 <OBJ_Read+0x4e6>
 8024db8:	2b37      	cmp	r3, #55	; 0x37
 8024dba:	dc07      	bgt.n	8024dcc <OBJ_Read+0x2cc>
 8024dbc:	2b30      	cmp	r3, #48	; 0x30
 8024dbe:	da2f      	bge.n	8024e20 <OBJ_Read+0x320>
 8024dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8024dc2:	d07f      	beq.n	8024ec4 <OBJ_Read+0x3c4>
 8024dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8024dc6:	f000 808c 	beq.w	8024ee2 <OBJ_Read+0x3e2>
 8024dca:	e10c      	b.n	8024fe6 <OBJ_Read+0x4e6>
 8024dcc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024dd0:	2b03      	cmp	r3, #3
 8024dd2:	f200 8108 	bhi.w	8024fe6 <OBJ_Read+0x4e6>
 8024dd6:	e0b6      	b.n	8024f46 <OBJ_Read+0x446>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8024dd8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d01a      	beq.n	8024e16 <OBJ_Read+0x316>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8024de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024de2:	885b      	ldrh	r3, [r3, #2]
 8024de4:	f003 030f 	and.w	r3, r3, #15
 8024de8:	2b00      	cmp	r3, #0
 8024dea:	dd0a      	ble.n	8024e02 <OBJ_Read+0x302>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024dec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024df0:	8852      	ldrh	r2, [r2, #2]
 8024df2:	4413      	add	r3, r2
 8024df4:	f003 030f 	and.w	r3, r3, #15
 8024df8:	2b00      	cmp	r3, #0
 8024dfa:	d102      	bne.n	8024e02 <OBJ_Read+0x302>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8024dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024dfe:	3302      	adds	r3, #2
 8024e00:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 8024e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e04:	885b      	ldrh	r3, [r3, #2]
 8024e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024e0a:	111b      	asrs	r3, r3, #4
 8024e0c:	005b      	lsls	r3, r3, #1
 8024e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024e10:	4413      	add	r3, r2
 8024e12:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 8024e14:	e0e9      	b.n	8024fea <OBJ_Read+0x4ea>
                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024e16:	2318      	movs	r3, #24
 8024e18:	e140      	b.n	802509c <OBJ_Read+0x59c>
 8024e1a:	bf00      	nop
 8024e1c:	1ffea825 	.word	0x1ffea825
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8024e20:	2300      	movs	r3, #0
 8024e22:	827b      	strh	r3, [r7, #18]

                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8024e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e26:	885b      	ldrh	r3, [r3, #2]
 8024e28:	461a      	mov	r2, r3
 8024e2a:	4b9e      	ldr	r3, [pc, #632]	; (80250a4 <OBJ_Read+0x5a4>)
 8024e2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024e30:	461a      	mov	r2, r3
 8024e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024e34:	f003 030f 	and.w	r3, r3, #15
 8024e38:	fa02 f303 	lsl.w	r3, r2, r3
 8024e3c:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 8024e3e:	697b      	ldr	r3, [r7, #20]
 8024e40:	881b      	ldrh	r3, [r3, #0]
 8024e42:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 8024e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024e46:	f003 030f 	and.w	r3, r3, #15
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	d102      	bne.n	8024e54 <OBJ_Read+0x354>
                                    {
                                        pData[0] = 0;
 8024e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e50:	2200      	movs	r2, #0
 8024e52:	801a      	strh	r2, [r3, #0]
                                    }

/* ECATCHANGE_START(V5.11) SDO7*/
                                    pData[0] = SWAPWORD(pData[0]);
 8024e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e56:	881a      	ldrh	r2, [r3, #0]
 8024e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e5a:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 8024e5c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024e60:	2b00      	cmp	r3, #0
 8024e62:	d00a      	beq.n	8024e7a <OBJ_Read+0x37a>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 8024e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e66:	881a      	ldrh	r2, [r3, #0]
 8024e68:	8a79      	ldrh	r1, [r7, #18]
 8024e6a:	8a3b      	ldrh	r3, [r7, #16]
 8024e6c:	400b      	ands	r3, r1
 8024e6e:	b29b      	uxth	r3, r3
 8024e70:	4313      	orrs	r3, r2
 8024e72:	b29a      	uxth	r2, r3
 8024e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e76:	801a      	strh	r2, [r3, #0]
 8024e78:	e013      	b.n	8024ea2 <OBJ_Read+0x3a2>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 8024e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e7c:	881b      	ldrh	r3, [r3, #0]
 8024e7e:	b299      	uxth	r1, r3
 8024e80:	8a7a      	ldrh	r2, [r7, #18]
 8024e82:	8a3b      	ldrh	r3, [r7, #16]
 8024e84:	4013      	ands	r3, r2
 8024e86:	b29b      	uxth	r3, r3
 8024e88:	461a      	mov	r2, r3
 8024e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024e8c:	f003 030f 	and.w	r3, r3, #15
 8024e90:	fa42 f303 	asr.w	r3, r2, r3
 8024e94:	b29b      	uxth	r3, r3
 8024e96:	460a      	mov	r2, r1
 8024e98:	4313      	orrs	r3, r2
 8024e9a:	b29b      	uxth	r3, r3
 8024e9c:	b29a      	uxth	r2, r3
 8024e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ea0:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 8024ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ea4:	881a      	ldrh	r2, [r3, #0]
 8024ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ea8:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO7*/
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 8024eaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024eae:	8852      	ldrh	r2, [r2, #2]
 8024eb0:	4413      	add	r3, r2
 8024eb2:	f003 030f 	and.w	r3, r3, #15
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d103      	bne.n	8024ec2 <OBJ_Read+0x3c2>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8024eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ebc:	3302      	adds	r3, #2
 8024ebe:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 8024ec0:	e093      	b.n	8024fea <OBJ_Read+0x4ea>
 8024ec2:	e092      	b.n	8024fea <OBJ_Read+0x4ea>
                            case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024ec6:	f003 030f 	and.w	r3, r3, #15
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	d001      	beq.n	8024ed2 <OBJ_Read+0x3d2>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024ece:	2305      	movs	r3, #5
 8024ed0:	e0e4      	b.n	802509c <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 8024ed2:	697b      	ldr	r3, [r7, #20]
 8024ed4:	881a      	ldrh	r2, [r3, #0]
 8024ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ed8:	801a      	strh	r2, [r3, #0]
                                pData++;
 8024eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024edc:	3302      	adds	r3, #2
 8024ede:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024ee0:	e083      	b.n	8024fea <OBJ_Read+0x4ea>
                            case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024ee4:	f003 030f 	and.w	r3, r3, #15
 8024ee8:	2b00      	cmp	r3, #0
 8024eea:	d001      	beq.n	8024ef0 <OBJ_Read+0x3f0>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024eec:	2305      	movs	r3, #5
 8024eee:	e0d5      	b.n	802509c <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024ef0:	697b      	ldr	r3, [r7, #20]
 8024ef2:	881a      	ldrh	r2, [r3, #0]
 8024ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ef6:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024efa:	3302      	adds	r3, #2
 8024efc:	697a      	ldr	r2, [r7, #20]
 8024efe:	8852      	ldrh	r2, [r2, #2]
 8024f00:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 8024f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f04:	3304      	adds	r3, #4
 8024f06:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024f08:	e06f      	b.n	8024fea <OBJ_Read+0x4ea>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f0c:	f003 030f 	and.w	r3, r3, #15
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	d001      	beq.n	8024f18 <OBJ_Read+0x418>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024f14:	2305      	movs	r3, #5
 8024f16:	e0c1      	b.n	802509c <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024f18:	697b      	ldr	r3, [r7, #20]
 8024f1a:	881a      	ldrh	r2, [r3, #0]
 8024f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f1e:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f22:	3302      	adds	r3, #2
 8024f24:	697a      	ldr	r2, [r7, #20]
 8024f26:	8852      	ldrh	r2, [r2, #2]
 8024f28:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 8024f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f2c:	3304      	adds	r3, #4
 8024f2e:	697a      	ldr	r2, [r7, #20]
 8024f30:	8892      	ldrh	r2, [r2, #4]
 8024f32:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8024f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f36:	3306      	adds	r3, #6
 8024f38:	697a      	ldr	r2, [r7, #20]
 8024f3a:	88d2      	ldrh	r2, [r2, #6]
 8024f3c:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 8024f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f40:	3308      	adds	r3, #8
 8024f42:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024f44:	e051      	b.n	8024fea <OBJ_Read+0x4ea>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f48:	f003 030f 	and.w	r3, r3, #15
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d001      	beq.n	8024f54 <OBJ_Read+0x454>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024f50:	2305      	movs	r3, #5
 8024f52:	e0a3      	b.n	802509c <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8024f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f56:	885b      	ldrh	r3, [r3, #2]
 8024f58:	3307      	adds	r3, #7
 8024f5a:	10db      	asrs	r3, r3, #3
 8024f5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024f5e:	6979      	ldr	r1, [r7, #20]
 8024f60:	461a      	mov	r2, r3
 8024f62:	f005 f9c5 	bl	802a2f0 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8024f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f68:	885b      	ldrh	r3, [r3, #2]
 8024f6a:	f023 030f 	bic.w	r3, r3, #15
 8024f6e:	330f      	adds	r3, #15
 8024f70:	111b      	asrs	r3, r3, #4
 8024f72:	005b      	lsls	r3, r3, #1
 8024f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024f76:	4413      	add	r3, r2
 8024f78:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 8024f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f7c:	885b      	ldrh	r3, [r3, #2]
 8024f7e:	f003 030f 	and.w	r3, r3, #15
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	d006      	beq.n	8024f94 <OBJ_Read+0x494>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8024f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f88:	881b      	ldrh	r3, [r3, #0]
 8024f8a:	b2db      	uxtb	r3, r3
 8024f8c:	b29a      	uxth	r2, r3
 8024f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f90:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/

                                break;
 8024f92:	e02a      	b.n	8024fea <OBJ_Read+0x4ea>
 8024f94:	e029      	b.n	8024fea <OBJ_Read+0x4ea>
                            case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f98:	f003 030f 	and.w	r3, r3, #15
 8024f9c:	2b00      	cmp	r3, #0
 8024f9e:	d001      	beq.n	8024fa4 <OBJ_Read+0x4a4>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024fa0:	2305      	movs	r3, #5
 8024fa2:	e07b      	b.n	802509c <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8024fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fa6:	885b      	ldrh	r3, [r3, #2]
 8024fa8:	3307      	adds	r3, #7
 8024faa:	10db      	asrs	r3, r3, #3
 8024fac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024fae:	6979      	ldr	r1, [r7, #20]
 8024fb0:	461a      	mov	r2, r3
 8024fb2:	f005 f99d 	bl	802a2f0 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8024fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fb8:	885b      	ldrh	r3, [r3, #2]
 8024fba:	f023 030f 	bic.w	r3, r3, #15
 8024fbe:	330f      	adds	r3, #15
 8024fc0:	111b      	asrs	r3, r3, #4
 8024fc2:	005b      	lsls	r3, r3, #1
 8024fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024fc6:	4413      	add	r3, r2
 8024fc8:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 8024fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fcc:	885b      	ldrh	r3, [r3, #2]
 8024fce:	f003 030f 	and.w	r3, r3, #15
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	d006      	beq.n	8024fe4 <OBJ_Read+0x4e4>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8024fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024fd8:	881b      	ldrh	r3, [r3, #0]
 8024fda:	b2db      	uxtb	r3, r3
 8024fdc:	b29a      	uxth	r2, r3
 8024fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024fe0:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/
                                
                                break;
 8024fe2:	e002      	b.n	8024fea <OBJ_Read+0x4ea>
 8024fe4:	e001      	b.n	8024fea <OBJ_Read+0x4ea>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024fe6:	2318      	movs	r3, #24
 8024fe8:	e058      	b.n	802509c <OBJ_Read+0x59c>
                            } //switch (deftype)

                            bRead = 1;
 8024fea:	2301      	movs	r3, #1
 8024fec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8024ff0:	e044      	b.n	802507c <OBJ_Read+0x57c>
 8024ff2:	e043      	b.n	802507c <OBJ_Read+0x57c>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 8024ff4:	2300      	movs	r3, #0
 8024ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 8024ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024ffc:	f003 030f 	and.w	r3, r3, #15
 8025000:	2b00      	cmp	r3, #0
 8025002:	d102      	bne.n	802500a <OBJ_Read+0x50a>
                    {
                        *pData = 0;
 8025004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025006:	2200      	movs	r2, #0
 8025008:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 802500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802500c:	885b      	ldrh	r3, [r3, #2]
 802500e:	f003 030f 	and.w	r3, r3, #15
 8025012:	2b00      	cmp	r3, #0
 8025014:	dd0d      	ble.n	8025032 <OBJ_Read+0x532>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802501a:	8852      	ldrh	r2, [r2, #2]
 802501c:	4413      	add	r3, r2
 802501e:	f003 030f 	and.w	r3, r3, #15
 8025022:	2b00      	cmp	r3, #0
 8025024:	d105      	bne.n	8025032 <OBJ_Read+0x532>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8025026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025028:	3302      	adds	r3, #2
 802502a:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 802502c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802502e:	2200      	movs	r2, #0
 8025030:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8025032:	2300      	movs	r3, #0
 8025034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8025038:	e00a      	b.n	8025050 <OBJ_Read+0x550>
                    {
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 802503a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802503c:	3302      	adds	r3, #2
 802503e:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 8025040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025042:	2200      	movs	r2, #0
 8025044:	801a      	strh	r2, [r3, #0]
                        /*Clear new buffer*/
                        *pData = 0;
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8025046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802504a:	3301      	adds	r3, #1
 802504c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8025050:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8025054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025056:	885b      	ldrh	r3, [r3, #2]
 8025058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802505c:	111b      	asrs	r3, r3, #4
 802505e:	429a      	cmp	r2, r3
 8025060:	dbeb      	blt.n	802503a <OBJ_Read+0x53a>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8025062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025064:	889b      	ldrh	r3, [r3, #4]
 8025066:	f003 0307 	and.w	r3, r3, #7
 802506a:	2b00      	cmp	r3, #0
 802506c:	d103      	bne.n	8025076 <OBJ_Read+0x576>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 802506e:	2306      	movs	r3, #6
 8025070:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8025074:	e002      	b.n	802507c <OBJ_Read+0x57c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8025076:	231a      	movs	r3, #26
 8025078:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            UINT8 bRead = 0x0;
            UINT8 result = 0;


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 802507c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802507e:	3301      	adds	r3, #1
 8025080:	86fb      	strh	r3, [r7, #54]	; 0x36
 8025082:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025084:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8025086:	429a      	cmp	r2, r3
 8025088:	f67f aded 	bls.w	8024c66 <OBJ_Read+0x166>
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
                    }
                }
            }

            if(bRead == 0)
 802508c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8025090:	2b00      	cmp	r3, #0
 8025092:	d102      	bne.n	802509a <OBJ_Read+0x59a>
                return result;
 8025094:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8025098:	e000      	b.n	802509c <OBJ_Read+0x59c>
        }

    return 0;
 802509a:	2300      	movs	r3, #0
}
 802509c:	4618      	mov	r0, r3
 802509e:	373c      	adds	r7, #60	; 0x3c
 80250a0:	46bd      	mov	sp, r7
 80250a2:	bd90      	pop	{r4, r7, pc}
 80250a4:	0802ace8 	.word	0x0802ace8

080250a8 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 80250a8:	b590      	push	{r4, r7, lr}
 80250aa:	b091      	sub	sp, #68	; 0x44
 80250ac:	af02      	add	r7, sp, #8
 80250ae:	60ba      	str	r2, [r7, #8]
 80250b0:	607b      	str	r3, [r7, #4]
 80250b2:	4603      	mov	r3, r0
 80250b4:	81fb      	strh	r3, [r7, #14]
 80250b6:	460b      	mov	r3, r1
 80250b8:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 80250ba:	7b7b      	ldrb	r3, [r7, #13]
 80250bc:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	899b      	ldrh	r3, [r3, #12]
 80250c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80250c6:	121b      	asrs	r3, r3, #8
 80250c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 80250cc:	2300      	movs	r3, #0
 80250ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	899b      	ldrh	r3, [r3, #12]
 80250d4:	b2db      	uxtb	r3, r3
 80250d6:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 80250d8:	2300      	movs	r3, #0
 80250da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 80250de:	7b7b      	ldrb	r3, [r7, #13]
 80250e0:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 80250e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80250e6:	2b07      	cmp	r3, #7
 80250e8:	d023      	beq.n	8025132 <OBJ_Write+0x8a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	699b      	ldr	r3, [r3, #24]
 80250ee:	881b      	ldrh	r3, [r3, #0]
 80250f0:	b2db      	uxtb	r3, r3
 80250f2:	86bb      	strh	r3, [r7, #52]	; 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index)))
 80250f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	d11b      	bne.n	8025132 <OBJ_Write+0x8a>
 80250fa:	89fb      	ldrh	r3, [r7, #14]
 80250fc:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8025100:	4293      	cmp	r3, r2
 8025102:	d904      	bls.n	802510e <OBJ_Write+0x66>
 8025104:	89fb      	ldrh	r3, [r7, #14]
 8025106:	f641 422f 	movw	r2, #7215	; 0x1c2f
 802510a:	4293      	cmp	r3, r2
 802510c:	d90f      	bls.n	802512e <OBJ_Write+0x86>
 802510e:	89fb      	ldrh	r3, [r7, #14]
 8025110:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8025114:	d303      	bcc.n	802511e <OBJ_Write+0x76>
 8025116:	89fb      	ldrh	r3, [r7, #14]
 8025118:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 802511c:	d307      	bcc.n	802512e <OBJ_Write+0x86>
 802511e:	89fb      	ldrh	r3, [r7, #14]
 8025120:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8025124:	d305      	bcc.n	8025132 <OBJ_Write+0x8a>
 8025126:	89fb      	ldrh	r3, [r7, #14]
 8025128:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 802512c:	d201      	bcs.n	8025132 <OBJ_Write+0x8a>
        {
            maxSubindex = maxConfiguredSubindex;
 802512e:	8c3b      	ldrh	r3, [r7, #32]
 8025130:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8025132:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025136:	2b00      	cmp	r3, #0
 8025138:	d012      	beq.n	8025160 <OBJ_Write+0xb8>
    {
        if ( objCode == OBJCODE_VAR )
 802513a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802513e:	2b07      	cmp	r3, #7
 8025140:	d101      	bne.n	8025146 <OBJ_Write+0x9e>
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8025142:	2305      	movs	r3, #5
 8025144:	e2ce      	b.n	80256e4 <OBJ_Write+0x63c>

        if ((subindex == 0) && (dataSize > 0))
 8025146:	7b7b      	ldrb	r3, [r7, #13]
 8025148:	2b00      	cmp	r3, #0
 802514a:	d106      	bne.n	802515a <OBJ_Write+0xb2>
 802514c:	68bb      	ldr	r3, [r7, #8]
 802514e:	2b00      	cmp	r3, #0
 8025150:	d003      	beq.n	802515a <OBJ_Write+0xb2>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 8025152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025154:	881b      	ldrh	r3, [r3, #0]
 8025156:	b2db      	uxtb	r3, r3
 8025158:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 802515a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802515c:	863b      	strh	r3, [r7, #48]	; 0x30
 802515e:	e023      	b.n	80251a8 <OBJ_Write+0x100>
    }
    else
    if (subindex > maxSubindex)
 8025160:	7b7b      	ldrb	r3, [r7, #13]
 8025162:	b29b      	uxth	r3, r3
 8025164:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8025166:	429a      	cmp	r2, r3
 8025168:	d201      	bcs.n	802516e <OBJ_Write+0xc6>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 802516a:	2311      	movs	r3, #17
 802516c:	e2ba      	b.n	80256e4 <OBJ_Write+0x63c>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 802516e:	7b7b      	ldrb	r3, [r7, #13]
 8025170:	6878      	ldr	r0, [r7, #4]
 8025172:	4619      	mov	r1, r3
 8025174:	f7ff fb04 	bl	8024780 <OBJ_GetEntryDesc>
 8025178:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) < (nAlStatus & STATE_MASK) )
 802517a:	69fb      	ldr	r3, [r7, #28]
 802517c:	889b      	ldrh	r3, [r3, #4]
 802517e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025182:	109b      	asrs	r3, r3, #2
 8025184:	b2db      	uxtb	r3, r3
 8025186:	461a      	mov	r2, r3
 8025188:	4b9b      	ldr	r3, [pc, #620]	; (80253f8 <OBJ_Write+0x350>)
 802518a:	781b      	ldrb	r3, [r3, #0]
 802518c:	f003 030f 	and.w	r3, r3, #15
 8025190:	429a      	cmp	r2, r3
 8025192:	da09      	bge.n	80251a8 <OBJ_Write+0x100>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 8025194:	69fb      	ldr	r3, [r7, #28]
 8025196:	889b      	ldrh	r3, [r3, #4]
 8025198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802519c:	2b00      	cmp	r3, #0
 802519e:	d101      	bne.n	80251a4 <OBJ_Write+0xfc>
            {
                /* it is a read only entry */
                return ABORTIDX_READ_ONLY_ENTRY;
 80251a0:	2307      	movs	r3, #7
 80251a2:	e29f      	b.n	80256e4 <OBJ_Write+0x63c>
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80251a4:	231a      	movs	r3, #26
 80251a6:	e29d      	b.n	80256e4 <OBJ_Write+0x63c>
        }
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 80251a8:	7b7b      	ldrb	r3, [r7, #13]
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d024      	beq.n	80251f8 <OBJ_Write+0x150>
 80251ae:	89fb      	ldrh	r3, [r7, #14]
 80251b0:	f641 420f 	movw	r2, #7183	; 0x1c0f
 80251b4:	4293      	cmp	r3, r2
 80251b6:	d904      	bls.n	80251c2 <OBJ_Write+0x11a>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index))
 80251b8:	89fb      	ldrh	r3, [r7, #14]
 80251ba:	f641 422f 	movw	r2, #7215	; 0x1c2f
 80251be:	4293      	cmp	r3, r2
 80251c0:	d90f      	bls.n	80251e2 <OBJ_Write+0x13a>
 80251c2:	89fb      	ldrh	r3, [r7, #14]
 80251c4:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80251c8:	d303      	bcc.n	80251d2 <OBJ_Write+0x12a>
 80251ca:	89fb      	ldrh	r3, [r7, #14]
 80251cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80251d0:	d307      	bcc.n	80251e2 <OBJ_Write+0x13a>
 80251d2:	89fb      	ldrh	r3, [r7, #14]
 80251d4:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80251d8:	d30e      	bcc.n	80251f8 <OBJ_Write+0x150>
 80251da:	89fb      	ldrh	r3, [r7, #14]
 80251dc:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80251e0:	d20a      	bcs.n	80251f8 <OBJ_Write+0x150>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 80251e2:	687b      	ldr	r3, [r7, #4]
 80251e4:	699b      	ldr	r3, [r3, #24]
 80251e6:	881b      	ldrh	r3, [r3, #0]
 80251e8:	b2db      	uxtb	r3, r3
 80251ea:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 80251ec:	8b7b      	ldrh	r3, [r7, #26]
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	d002      	beq.n	80251f8 <OBJ_Write+0x150>
            bClearSubindex0Required = TRUE;
 80251f2:	2301      	movs	r3, #1
 80251f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    if ( pObjEntry->Write != NULL )
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	6a1b      	ldr	r3, [r3, #32]
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d00d      	beq.n	802521c <OBJ_Write+0x174>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 8025200:	687b      	ldr	r3, [r7, #4]
 8025202:	6a1c      	ldr	r4, [r3, #32]
 8025204:	89f9      	ldrh	r1, [r7, #14]
 8025206:	7b7a      	ldrb	r2, [r7, #13]
 8025208:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802520c:	9300      	str	r3, [sp, #0]
 802520e:	4608      	mov	r0, r1
 8025210:	4611      	mov	r1, r2
 8025212:	68ba      	ldr	r2, [r7, #8]
 8025214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025216:	47a0      	blx	r4
 8025218:	4603      	mov	r3, r0
 802521a:	e263      	b.n	80256e4 <OBJ_Write+0x63c>
    }
    else
    {
        UINT8 bWritten = 0;
 802521c:	2300      	movs	r3, #0
 802521e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 8025222:	2307      	movs	r3, #7
 8025224:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

/*ECATCHANGE_START(V5.11) ECAT*/
        if (dataSize == 0)
 8025228:	68bb      	ldr	r3, [r7, #8]
 802522a:	2b00      	cmp	r3, #0
 802522c:	d101      	bne.n	8025232 <OBJ_Write+0x18a>
        {
           return 0; //no error
 802522e:	2300      	movs	r3, #0
 8025230:	e258      	b.n	80256e4 <OBJ_Write+0x63c>
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8025232:	7b7b      	ldrb	r3, [r7, #13]
 8025234:	86fb      	strh	r3, [r7, #54]	; 0x36
 8025236:	e248      	b.n	80256ca <OBJ_Write+0x622>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	699b      	ldr	r3, [r3, #24]
 802523c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 802523e:	2300      	movs	r3, #0
 8025240:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 8025242:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025244:	b2db      	uxtb	r3, r3
 8025246:	6878      	ldr	r0, [r7, #4]
 8025248:	4619      	mov	r1, r3
 802524a:	f7ff fa99 	bl	8024780 <OBJ_GetEntryDesc>
 802524e:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8025250:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025252:	b2db      	uxtb	r3, r3
 8025254:	4618      	mov	r0, r3
 8025256:	6879      	ldr	r1, [r7, #4]
 8025258:	f7ff faca 	bl	80247f0 <OBJ_GetEntryOffset>
 802525c:	4603      	mov	r3, r0
 802525e:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if ( ((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) >= (nAlStatus & STATE_MASK) )
 8025260:	69fb      	ldr	r3, [r7, #28]
 8025262:	889b      	ldrh	r3, [r3, #4]
 8025264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025268:	109b      	asrs	r3, r3, #2
 802526a:	b2db      	uxtb	r3, r3
 802526c:	461a      	mov	r2, r3
 802526e:	4b62      	ldr	r3, [pc, #392]	; (80253f8 <OBJ_Write+0x350>)
 8025270:	781b      	ldrb	r3, [r3, #0]
 8025272:	f003 030f 	and.w	r3, r3, #15
 8025276:	429a      	cmp	r2, r3
 8025278:	f2c0 81fc 	blt.w	8025674 <OBJ_Write+0x5cc>
            {
                /* we have write access for this entry */
                if (i != 0)
 802527c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802527e:	2b00      	cmp	r3, #0
 8025280:	d006      	beq.n	8025290 <OBJ_Write+0x1e8>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 8025282:	8b3b      	ldrh	r3, [r7, #24]
 8025284:	091b      	lsrs	r3, r3, #4
 8025286:	b29b      	uxth	r3, r3
 8025288:	005b      	lsls	r3, r3, #1
 802528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802528c:	4413      	add	r3, r2
 802528e:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 8025290:	7b7b      	ldrb	r3, [r7, #13]
 8025292:	b29b      	uxth	r3, r3
 8025294:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025296:	429a      	cmp	r2, r3
 8025298:	d00a      	beq.n	80252b0 <OBJ_Write+0x208>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 802529a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802529e:	2b00      	cmp	r3, #0
 80252a0:	f000 8210 	beq.w	80256c4 <OBJ_Write+0x61c>
 80252a4:	7b7b      	ldrb	r3, [r7, #13]
 80252a6:	b29b      	uxth	r3, r3
 80252a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80252aa:	429a      	cmp	r2, r3
 80252ac:	f0c0 820a 	bcc.w	80256c4 <OBJ_Write+0x61c>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 80252b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d115      	bne.n	80252e2 <OBJ_Write+0x23a>
 80252b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80252ba:	2b07      	cmp	r3, #7
 80252bc:	d011      	beq.n	80252e2 <OBJ_Write+0x23a>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 80252be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80252c0:	881b      	ldrh	r3, [r3, #0]
 80252c2:	74fb      	strb	r3, [r7, #19]
                        if(maxConfiguredSubindex < NewSubindex0)
 80252c4:	7cfb      	ldrb	r3, [r7, #19]
 80252c6:	b29b      	uxth	r3, r3
 80252c8:	8c3a      	ldrh	r2, [r7, #32]
 80252ca:	429a      	cmp	r2, r3
 80252cc:	d201      	bcs.n	80252d2 <OBJ_Write+0x22a>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 80252ce:	2313      	movs	r3, #19
 80252d0:	e208      	b.n	80256e4 <OBJ_Write+0x63c>
                        }

                        /* subindex 0 of an array or record shall be written */
/* ECATCHANGE_START(V5.11) SDO5*/
                        pVarPtr[0] = SWAPWORD(pData[0]);
 80252d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80252d4:	881a      	ldrh	r2, [r3, #0]
 80252d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80252d8:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO5*/
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 80252da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80252dc:	3302      	adds	r3, #2
 80252de:	64bb      	str	r3, [r7, #72]	; 0x48
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
                    {
 80252e0:	e1c4      	b.n	802566c <OBJ_Write+0x5c4>
                           transmitted as UINT16 for a complete access */
                        pData++;
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 80252e2:	69fb      	ldr	r3, [r7, #28]
 80252e4:	881b      	ldrh	r3, [r3, #0]
 80252e6:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 80252e8:	69fb      	ldr	r3, [r7, #28]
 80252ea:	881b      	ldrh	r3, [r3, #0]
 80252ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80252f0:	d315      	bcc.n	802531e <OBJ_Write+0x276>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 80252f2:	69fb      	ldr	r3, [r7, #28]
 80252f4:	885b      	ldrh	r3, [r3, #2]
 80252f6:	2b08      	cmp	r3, #8
 80252f8:	d804      	bhi.n	8025304 <OBJ_Write+0x25c>
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80252fa:	69fb      	ldr	r3, [r7, #28]
 80252fc:	885b      	ldrh	r3, [r3, #2]
 80252fe:	332f      	adds	r3, #47	; 0x2f
 8025300:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025302:	e00c      	b.n	802531e <OBJ_Write+0x276>
                            else if ( pEntry->BitLength == 16 )
 8025304:	69fb      	ldr	r3, [r7, #28]
 8025306:	885b      	ldrh	r3, [r3, #2]
 8025308:	2b10      	cmp	r3, #16
 802530a:	d102      	bne.n	8025312 <OBJ_Write+0x26a>
                                dataType = DEFTYPE_UNSIGNED16;
 802530c:	2306      	movs	r3, #6
 802530e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025310:	e005      	b.n	802531e <OBJ_Write+0x276>
                            else if ( pEntry->BitLength == 32 )
 8025312:	69fb      	ldr	r3, [r7, #28]
 8025314:	885b      	ldrh	r3, [r3, #2]
 8025316:	2b20      	cmp	r3, #32
 8025318:	d101      	bne.n	802531e <OBJ_Write+0x276>
                                dataType = DEFTYPE_UNSIGNED32;
 802531a:	2307      	movs	r3, #7
 802531c:	84fb      	strh	r3, [r7, #38]	; 0x26
                        }

                        switch (dataType)
 802531e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025320:	2b11      	cmp	r3, #17
 8025322:	f000 814d 	beq.w	80255c0 <OBJ_Write+0x518>
 8025326:	2b11      	cmp	r3, #17
 8025328:	dc1e      	bgt.n	8025368 <OBJ_Write+0x2c0>
 802532a:	2b05      	cmp	r3, #5
 802532c:	d066      	beq.n	80253fc <OBJ_Write+0x354>
 802532e:	2b05      	cmp	r3, #5
 8025330:	dc0d      	bgt.n	802534e <OBJ_Write+0x2a6>
 8025332:	2b02      	cmp	r3, #2
 8025334:	dc04      	bgt.n	8025340 <OBJ_Write+0x298>
 8025336:	2b01      	cmp	r3, #1
 8025338:	da60      	bge.n	80253fc <OBJ_Write+0x354>
 802533a:	2b00      	cmp	r3, #0
 802533c:	d03b      	beq.n	80253b6 <OBJ_Write+0x30e>
 802533e:	e193      	b.n	8025668 <OBJ_Write+0x5c0>
 8025340:	2b03      	cmp	r3, #3
 8025342:	f000 80b5 	beq.w	80254b0 <OBJ_Write+0x408>
 8025346:	2b04      	cmp	r3, #4
 8025348:	f000 8112 	beq.w	8025570 <OBJ_Write+0x4c8>
 802534c:	e18c      	b.n	8025668 <OBJ_Write+0x5c0>
 802534e:	2b08      	cmp	r3, #8
 8025350:	dc03      	bgt.n	802535a <OBJ_Write+0x2b2>
 8025352:	2b07      	cmp	r3, #7
 8025354:	f280 810c 	bge.w	8025570 <OBJ_Write+0x4c8>
 8025358:	e0aa      	b.n	80254b0 <OBJ_Write+0x408>
 802535a:	2b09      	cmp	r3, #9
 802535c:	f000 814e 	beq.w	80255fc <OBJ_Write+0x554>
 8025360:	2b0b      	cmp	r3, #11
 8025362:	f300 8181 	bgt.w	8025668 <OBJ_Write+0x5c0>
 8025366:	e164      	b.n	8025632 <OBJ_Write+0x58a>
 8025368:	2b2d      	cmp	r3, #45	; 0x2d
 802536a:	d047      	beq.n	80253fc <OBJ_Write+0x354>
 802536c:	2b2d      	cmp	r3, #45	; 0x2d
 802536e:	dc11      	bgt.n	8025394 <OBJ_Write+0x2ec>
 8025370:	2b1e      	cmp	r3, #30
 8025372:	d043      	beq.n	80253fc <OBJ_Write+0x354>
 8025374:	2b1e      	cmp	r3, #30
 8025376:	dc06      	bgt.n	8025386 <OBJ_Write+0x2de>
 8025378:	2b15      	cmp	r3, #21
 802537a:	f000 8121 	beq.w	80255c0 <OBJ_Write+0x518>
 802537e:	2b1b      	cmp	r3, #27
 8025380:	f000 811e 	beq.w	80255c0 <OBJ_Write+0x518>
 8025384:	e170      	b.n	8025668 <OBJ_Write+0x5c0>
 8025386:	2b1f      	cmp	r3, #31
 8025388:	f000 8092 	beq.w	80254b0 <OBJ_Write+0x408>
 802538c:	2b20      	cmp	r3, #32
 802538e:	f000 80ef 	beq.w	8025570 <OBJ_Write+0x4c8>
 8025392:	e169      	b.n	8025668 <OBJ_Write+0x5c0>
 8025394:	2b37      	cmp	r3, #55	; 0x37
 8025396:	dc08      	bgt.n	80253aa <OBJ_Write+0x302>
 8025398:	2b30      	cmp	r3, #48	; 0x30
 802539a:	da2f      	bge.n	80253fc <OBJ_Write+0x354>
 802539c:	2b2e      	cmp	r3, #46	; 0x2e
 802539e:	f000 8087 	beq.w	80254b0 <OBJ_Write+0x408>
 80253a2:	2b2f      	cmp	r3, #47	; 0x2f
 80253a4:	f000 80e4 	beq.w	8025570 <OBJ_Write+0x4c8>
 80253a8:	e15e      	b.n	8025668 <OBJ_Write+0x5c0>
 80253aa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80253ae:	2b03      	cmp	r3, #3
 80253b0:	f200 815a 	bhi.w	8025668 <OBJ_Write+0x5c0>
 80253b4:	e13d      	b.n	8025632 <OBJ_Write+0x58a>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 80253b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80253ba:	2b00      	cmp	r3, #0
 80253bc:	d01a      	beq.n	80253f4 <OBJ_Write+0x34c>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 80253be:	69fb      	ldr	r3, [r7, #28]
 80253c0:	885b      	ldrh	r3, [r3, #2]
 80253c2:	f003 030f 	and.w	r3, r3, #15
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	dd0a      	ble.n	80253e0 <OBJ_Write+0x338>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 80253ca:	8b3b      	ldrh	r3, [r7, #24]
 80253cc:	69fa      	ldr	r2, [r7, #28]
 80253ce:	8852      	ldrh	r2, [r2, #2]
 80253d0:	4413      	add	r3, r2
 80253d2:	f003 030f 	and.w	r3, r3, #15
 80253d6:	2b00      	cmp	r3, #0
 80253d8:	d102      	bne.n	80253e0 <OBJ_Write+0x338>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 80253da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253dc:	3302      	adds	r3, #2
 80253de:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 80253e0:	69fb      	ldr	r3, [r7, #28]
 80253e2:	885b      	ldrh	r3, [r3, #2]
 80253e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80253e8:	111b      	asrs	r3, r3, #4
 80253ea:	005b      	lsls	r3, r3, #1
 80253ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80253ee:	4413      	add	r3, r2
 80253f0:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 80253f2:	e13b      	b.n	802566c <OBJ_Write+0x5c4>
                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80253f4:	2318      	movs	r3, #24
 80253f6:	e175      	b.n	80256e4 <OBJ_Write+0x63c>
 80253f8:	1ffea825 	.word	0x1ffea825
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 80253fc:	2300      	movs	r3, #0
 80253fe:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8025400:	69fb      	ldr	r3, [r7, #28]
 8025402:	885b      	ldrh	r3, [r3, #2]
 8025404:	461a      	mov	r2, r3
 8025406:	4b9f      	ldr	r3, [pc, #636]	; (8025684 <OBJ_Write+0x5dc>)
 8025408:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802540c:	461a      	mov	r2, r3
 802540e:	8b3b      	ldrh	r3, [r7, #24]
 8025410:	f003 030f 	and.w	r3, r3, #15
 8025414:	fa02 f303 	lsl.w	r3, r2, r3
 8025418:	82fb      	strh	r3, [r7, #22]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 802541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802541c:	881b      	ldrh	r3, [r3, #0]
 802541e:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8025420:	8afb      	ldrh	r3, [r7, #22]
 8025422:	43db      	mvns	r3, r3
 8025424:	b29a      	uxth	r2, r3
 8025426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025428:	4013      	ands	r3, r2
 802542a:	b29b      	uxth	r3, r3
 802542c:	84bb      	strh	r3, [r7, #36]	; 0x24

/* ECATCHANGE_START(V5.11) SDO7*/
                            if (bCompleteAccess) 
 802542e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025432:	2b00      	cmp	r3, #0
 8025434:	d008      	beq.n	8025448 <OBJ_Write+0x3a0>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8025436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025438:	881a      	ldrh	r2, [r3, #0]
 802543a:	8afb      	ldrh	r3, [r7, #22]
 802543c:	4013      	ands	r3, r2
 802543e:	b29a      	uxth	r2, r3
 8025440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025442:	4313      	orrs	r3, r2
 8025444:	84bb      	strh	r3, [r7, #36]	; 0x24
 8025446:	e023      	b.n	8025490 <OBJ_Write+0x3e8>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8025448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802544a:	881b      	ldrh	r3, [r3, #0]
 802544c:	461a      	mov	r2, r3
 802544e:	69fb      	ldr	r3, [r7, #28]
 8025450:	885b      	ldrh	r3, [r3, #2]
 8025452:	4619      	mov	r1, r3
 8025454:	4b8b      	ldr	r3, [pc, #556]	; (8025684 <OBJ_Write+0x5dc>)
 8025456:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 802545a:	43db      	mvns	r3, r3
 802545c:	4013      	ands	r3, r2
 802545e:	2b00      	cmp	r3, #0
 8025460:	d001      	beq.n	8025466 <OBJ_Write+0x3be>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 8025462:	2312      	movs	r3, #18
 8025464:	e13e      	b.n	80256e4 <OBJ_Write+0x63c>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8025466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025468:	881a      	ldrh	r2, [r3, #0]
 802546a:	69fb      	ldr	r3, [r7, #28]
 802546c:	885b      	ldrh	r3, [r3, #2]
 802546e:	4619      	mov	r1, r3
 8025470:	4b84      	ldr	r3, [pc, #528]	; (8025684 <OBJ_Write+0x5dc>)
 8025472:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8025476:	4013      	ands	r3, r2
 8025478:	b29b      	uxth	r3, r3
 802547a:	461a      	mov	r2, r3
 802547c:	8b3b      	ldrh	r3, [r7, #24]
 802547e:	f003 030f 	and.w	r3, r3, #15
 8025482:	fa02 f303 	lsl.w	r3, r2, r3
 8025486:	b29a      	uxth	r2, r3
 8025488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802548a:	4313      	orrs	r3, r2
 802548c:	b29b      	uxth	r3, r3
 802548e:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }
/* ECATCHANGE_END(V5.11) SDO7*/

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8025490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025494:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8025496:	8b3b      	ldrh	r3, [r7, #24]
 8025498:	69fa      	ldr	r2, [r7, #28]
 802549a:	8852      	ldrh	r2, [r2, #2]
 802549c:	4413      	add	r3, r2
 802549e:	f003 030f 	and.w	r3, r3, #15
 80254a2:	2b00      	cmp	r3, #0
 80254a4:	d103      	bne.n	80254ae <OBJ_Write+0x406>
                                /* we have reached the UINT16 border */
                                pData++;
 80254a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80254a8:	3302      	adds	r3, #2
 80254aa:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                            break;
 80254ac:	e0de      	b.n	802566c <OBJ_Write+0x5c4>
 80254ae:	e0dd      	b.n	802566c <OBJ_Write+0x5c4>
                        case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 80254b0:	8b3b      	ldrh	r3, [r7, #24]
 80254b2:	f003 030f 	and.w	r3, r3, #15
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	d001      	beq.n	80254be <OBJ_Write+0x416>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80254ba:	2305      	movs	r3, #5
 80254bc:	e112      	b.n	80256e4 <OBJ_Write+0x63c>
/*ECATCHANGE_END(V5.11) SDO1*/

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 80254be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80254c0:	881b      	ldrh	r3, [r3, #0]
 80254c2:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 80254c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80254c8:	2b00      	cmp	r3, #0
 80254ca:	d006      	beq.n	80254da <OBJ_Write+0x432>
 80254cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254ce:	881b      	ldrh	r3, [r3, #0]
 80254d0:	8aba      	ldrh	r2, [r7, #20]
 80254d2:	429a      	cmp	r2, r3
 80254d4:	d001      	beq.n	80254da <OBJ_Write+0x432>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 80254d6:	231c      	movs	r3, #28
 80254d8:	e104      	b.n	80256e4 <OBJ_Write+0x63c>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 80254da:	89fb      	ldrh	r3, [r7, #14]
 80254dc:	f641 420f 	movw	r2, #7183	; 0x1c0f
 80254e0:	4293      	cmp	r3, r2
 80254e2:	d919      	bls.n	8025518 <OBJ_Write+0x470>
 80254e4:	89fb      	ldrh	r3, [r7, #14]
 80254e6:	f641 422f 	movw	r2, #7215	; 0x1c2f
 80254ea:	4293      	cmp	r3, r2
 80254ec:	d814      	bhi.n	8025518 <OBJ_Write+0x470>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 80254ee:	8abb      	ldrh	r3, [r7, #20]
 80254f0:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80254f4:	d303      	bcc.n	80254fe <OBJ_Write+0x456>
 80254f6:	8abb      	ldrh	r3, [r7, #20]
 80254f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80254fc:	d30c      	bcc.n	8025518 <OBJ_Write+0x470>
 80254fe:	8abb      	ldrh	r3, [r7, #20]
 8025500:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8025504:	d303      	bcc.n	802550e <OBJ_Write+0x466>
 8025506:	8abb      	ldrh	r3, [r7, #20]
 8025508:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 802550c:	d304      	bcc.n	8025518 <OBJ_Write+0x470>
 802550e:	8abb      	ldrh	r3, [r7, #20]
 8025510:	2b00      	cmp	r3, #0
 8025512:	d001      	beq.n	8025518 <OBJ_Write+0x470>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8025514:	2312      	movs	r3, #18
 8025516:	e0e5      	b.n	80256e4 <OBJ_Write+0x63c>
                                }
                            }

                            if((index == 0x1C32 || index == 0x1C33) && (i == 1))
 8025518:	89fb      	ldrh	r3, [r7, #14]
 802551a:	f641 4232 	movw	r2, #7218	; 0x1c32
 802551e:	4293      	cmp	r3, r2
 8025520:	d004      	beq.n	802552c <OBJ_Write+0x484>
 8025522:	89fb      	ldrh	r3, [r7, #14]
 8025524:	f641 4233 	movw	r2, #7219	; 0x1c33
 8025528:	4293      	cmp	r3, r2
 802552a:	d11a      	bne.n	8025562 <OBJ_Write+0x4ba>
 802552c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802552e:	2b01      	cmp	r3, #1
 8025530:	d117      	bne.n	8025562 <OBJ_Write+0x4ba>
                            {
                                /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                if(pVarPtr[0] != u16NewData)
 8025532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025534:	881b      	ldrh	r3, [r3, #0]
 8025536:	8aba      	ldrh	r2, [r7, #20]
 8025538:	429a      	cmp	r2, r3
 802553a:	d00f      	beq.n	802555c <OBJ_Write+0x4b4>
                                {
                                    result = CheckSyncTypeValue(index,u16NewData);
 802553c:	89fa      	ldrh	r2, [r7, #14]
 802553e:	8abb      	ldrh	r3, [r7, #20]
 8025540:	4610      	mov	r0, r2
 8025542:	4619      	mov	r1, r3
 8025544:	f7ff fa06 	bl	8024954 <CheckSyncTypeValue>
 8025548:	4603      	mov	r3, r0
 802554a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                    if(result != 0)
 802554e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025552:	2b00      	cmp	r3, #0
 8025554:	d002      	beq.n	802555c <OBJ_Write+0x4b4>
                                        return result;
 8025556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802555a:	e0c3      	b.n	80256e4 <OBJ_Write+0x63c>
                                }

                                /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                bSyncSetByUser = TRUE;
 802555c:	4b4a      	ldr	r3, [pc, #296]	; (8025688 <OBJ_Write+0x5e0>)
 802555e:	2201      	movs	r2, #1
 8025560:	701a      	strb	r2, [r3, #0]
                            }

                            pVarPtr[0] = u16NewData;
 8025562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025564:	8aba      	ldrh	r2, [r7, #20]
 8025566:	801a      	strh	r2, [r3, #0]
                            pData++;
 8025568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802556a:	3302      	adds	r3, #2
 802556c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 802556e:	e07d      	b.n	802566c <OBJ_Write+0x5c4>
                        case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8025570:	8b3b      	ldrh	r3, [r7, #24]
 8025572:	f003 030f 	and.w	r3, r3, #15
 8025576:	2b00      	cmp	r3, #0
 8025578:	d001      	beq.n	802557e <OBJ_Write+0x4d6>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 802557a:	2305      	movs	r3, #5
 802557c:	e0b2      	b.n	80256e4 <OBJ_Write+0x63c>
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 802557e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025582:	2b00      	cmp	r3, #0
 8025584:	d00f      	beq.n	80255a6 <OBJ_Write+0x4fe>
                                ((pVarPtr[0] != pData[0])
 8025586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025588:	881a      	ldrh	r2, [r3, #0]
 802558a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802558c:	881b      	ldrh	r3, [r3, #0]
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 802558e:	429a      	cmp	r2, r3
 8025590:	d107      	bne.n	80255a2 <OBJ_Write+0x4fa>
                                ((pVarPtr[0] != pData[0])
                                || (pVarPtr[1] != pData[1])))
 8025592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025594:	3302      	adds	r3, #2
 8025596:	881a      	ldrh	r2, [r3, #0]
 8025598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802559a:	3302      	adds	r3, #2
 802559c:	881b      	ldrh	r3, [r3, #0]
 802559e:	429a      	cmp	r2, r3
 80255a0:	d001      	beq.n	80255a6 <OBJ_Write+0x4fe>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 80255a2:	231c      	movs	r3, #28
 80255a4:	e09e      	b.n	80256e4 <OBJ_Write+0x63c>
                            }

                            pVarPtr[0] = pData[0];
 80255a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255a8:	881a      	ldrh	r2, [r3, #0]
 80255aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255ac:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 80255ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255b0:	3302      	adds	r3, #2
 80255b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80255b4:	8852      	ldrh	r2, [r2, #2]
 80255b6:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 80255b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255ba:	3304      	adds	r3, #4
 80255bc:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 80255be:	e055      	b.n	802566c <OBJ_Write+0x5c4>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 80255c0:	8b3b      	ldrh	r3, [r7, #24]
 80255c2:	f003 030f 	and.w	r3, r3, #15
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	d001      	beq.n	80255ce <OBJ_Write+0x526>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80255ca:	2305      	movs	r3, #5
 80255cc:	e08a      	b.n	80256e4 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 80255ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255d0:	881a      	ldrh	r2, [r3, #0]
 80255d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255d4:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 80255d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255d8:	3302      	adds	r3, #2
 80255da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80255dc:	8852      	ldrh	r2, [r2, #2]
 80255de:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 80255e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255e2:	3304      	adds	r3, #4
 80255e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80255e6:	8892      	ldrh	r2, [r2, #4]
 80255e8:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 80255ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255ec:	3306      	adds	r3, #6
 80255ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80255f0:	88d2      	ldrh	r2, [r2, #6]
 80255f2:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 80255f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255f6:	3308      	adds	r3, #8
 80255f8:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 80255fa:	e037      	b.n	802566c <OBJ_Write+0x5c4>
                        case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 80255fc:	8b3b      	ldrh	r3, [r7, #24]
 80255fe:	f003 030f 	and.w	r3, r3, #15
 8025602:	2b00      	cmp	r3, #0
 8025604:	d001      	beq.n	802560a <OBJ_Write+0x562>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025606:	2305      	movs	r3, #5
 8025608:	e06c      	b.n	80256e4 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 802560a:	69fb      	ldr	r3, [r7, #28]
 802560c:	885b      	ldrh	r3, [r3, #2]
 802560e:	3307      	adds	r3, #7
 8025610:	10db      	asrs	r3, r3, #3
 8025612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025614:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025616:	461a      	mov	r2, r3
 8025618:	f004 fe6a 	bl	802a2f0 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 802561c:	69fb      	ldr	r3, [r7, #28]
 802561e:	885b      	ldrh	r3, [r3, #2]
 8025620:	f023 030f 	bic.w	r3, r3, #15
 8025624:	330f      	adds	r3, #15
 8025626:	111b      	asrs	r3, r3, #4
 8025628:	005b      	lsls	r3, r3, #1
 802562a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802562c:	4413      	add	r3, r2
 802562e:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/
                            break;
 8025630:	e01c      	b.n	802566c <OBJ_Write+0x5c4>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8025632:	8b3b      	ldrh	r3, [r7, #24]
 8025634:	f003 030f 	and.w	r3, r3, #15
 8025638:	2b00      	cmp	r3, #0
 802563a:	d001      	beq.n	8025640 <OBJ_Write+0x598>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 802563c:	2305      	movs	r3, #5
 802563e:	e051      	b.n	80256e4 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8025640:	69fb      	ldr	r3, [r7, #28]
 8025642:	885b      	ldrh	r3, [r3, #2]
 8025644:	3307      	adds	r3, #7
 8025646:	10db      	asrs	r3, r3, #3
 8025648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802564a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802564c:	461a      	mov	r2, r3
 802564e:	f004 fe4f 	bl	802a2f0 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8025652:	69fb      	ldr	r3, [r7, #28]
 8025654:	885b      	ldrh	r3, [r3, #2]
 8025656:	f023 030f 	bic.w	r3, r3, #15
 802565a:	330f      	adds	r3, #15
 802565c:	111b      	asrs	r3, r3, #4
 802565e:	005b      	lsls	r3, r3, #1
 8025660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025662:	4413      	add	r3, r2
 8025664:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/

                            break;
 8025666:	e001      	b.n	802566c <OBJ_Write+0x5c4>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8025668:	2318      	movs	r3, #24
 802566a:	e03b      	b.n	80256e4 <OBJ_Write+0x63c>
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 802566c:	2301      	movs	r3, #1
 802566e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8025672:	e027      	b.n	80256c4 <OBJ_Write+0x61c>

                }
            }
            else
            {
                if(i == 0)
 8025674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025676:	2b00      	cmp	r3, #0
 8025678:	d108      	bne.n	802568c <OBJ_Write+0x5e4>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 802567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802567c:	3302      	adds	r3, #2
 802567e:	64bb      	str	r3, [r7, #72]	; 0x48
 8025680:	e01d      	b.n	80256be <OBJ_Write+0x616>
 8025682:	bf00      	nop
 8025684:	0802ace8 	.word	0x0802ace8
 8025688:	1ffead20 	.word	0x1ffead20
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 802568c:	69fb      	ldr	r3, [r7, #28]
 802568e:	885b      	ldrh	r3, [r3, #2]
 8025690:	f003 030f 	and.w	r3, r3, #15
 8025694:	2b00      	cmp	r3, #0
 8025696:	dd0a      	ble.n	80256ae <OBJ_Write+0x606>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025698:	8b3b      	ldrh	r3, [r7, #24]
 802569a:	69fa      	ldr	r2, [r7, #28]
 802569c:	8852      	ldrh	r2, [r2, #2]
 802569e:	4413      	add	r3, r2
 80256a0:	f003 030f 	and.w	r3, r3, #15
 80256a4:	2b00      	cmp	r3, #0
 80256a6:	d102      	bne.n	80256ae <OBJ_Write+0x606>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 80256a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80256aa:	3302      	adds	r3, #2
 80256ac:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
/*ECATCHANGE_START(V5.11) SDO9*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 80256ae:	69fb      	ldr	r3, [r7, #28]
 80256b0:	885b      	ldrh	r3, [r3, #2]
 80256b2:	091b      	lsrs	r3, r3, #4
 80256b4:	b29b      	uxth	r3, r3
 80256b6:	005b      	lsls	r3, r3, #1
 80256b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80256ba:	4413      	add	r3, r2
 80256bc:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO9*/
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80256be:	2318      	movs	r3, #24
 80256c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
           return 0; //no error
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 80256c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80256c6:	3301      	adds	r3, #1
 80256c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80256ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80256cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80256ce:	429a      	cmp	r2, r3
 80256d0:	f67f adb2 	bls.w	8025238 <OBJ_Write+0x190>
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
            }
        }

        if (bWritten == 0)
 80256d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80256d8:	2b00      	cmp	r3, #0
 80256da:	d102      	bne.n	80256e2 <OBJ_Write+0x63a>
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 80256dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80256e0:	e000      	b.n	80256e4 <OBJ_Write+0x63c>
    }

    return 0;
 80256e2:	2300      	movs	r3, #0
}
 80256e4:	4618      	mov	r0, r3
 80256e6:	373c      	adds	r7, #60	; 0x3c
 80256e8:	46bd      	mov	sp, r7
 80256ea:	bd90      	pop	{r4, r7, pc}

080256ec <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 80256ec:	b5b0      	push	{r4, r5, r7, lr}
 80256ee:	b088      	sub	sp, #32
 80256f0:	af02      	add	r7, sp, #8
 80256f2:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80256f4:	2300      	movs	r3, #0
 80256f6:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 80256f8:	2300      	movs	r3, #0
 80256fa:	613b      	str	r3, [r7, #16]

    if ( (pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 80256fc:	687b      	ldr	r3, [r7, #4]
 80256fe:	7a1b      	ldrb	r3, [r3, #8]
 8025700:	f003 0310 	and.w	r3, r3, #16
 8025704:	4a86      	ldr	r2, [pc, #536]	; (8025920 <SdoDownloadSegmentInd+0x234>)
 8025706:	7812      	ldrb	r2, [r2, #0]
 8025708:	4293      	cmp	r3, r2
 802570a:	d102      	bne.n	8025712 <SdoDownloadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 802570c:	2301      	movs	r3, #1
 802570e:	75fb      	strb	r3, [r7, #23]
 8025710:	e0bb      	b.n	802588a <SdoDownloadSegmentInd+0x19e>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8025712:	4b84      	ldr	r3, [pc, #528]	; (8025924 <SdoDownloadSegmentInd+0x238>)
 8025714:	881b      	ldrh	r3, [r3, #0]
 8025716:	3b09      	subs	r3, #9
 8025718:	81fb      	strh	r3, [r7, #14]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE;
 802571a:	687b      	ldr	r3, [r7, #4]
 802571c:	7a1b      	ldrb	r3, [r3, #8]
 802571e:	f003 0310 	and.w	r3, r3, #16
 8025722:	b2da      	uxtb	r2, r3
 8025724:	4b7e      	ldr	r3, [pc, #504]	; (8025920 <SdoDownloadSegmentInd+0x234>)
 8025726:	701a      	strb	r2, [r3, #0]

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 8025728:	4b7f      	ldr	r3, [pc, #508]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 802572a:	681b      	ldr	r3, [r3, #0]
 802572c:	2b00      	cmp	r3, #0
 802572e:	f000 80aa 	beq.w	8025886 <SdoDownloadSegmentInd+0x19a>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8025732:	4b7e      	ldr	r3, [pc, #504]	; (802592c <SdoDownloadSegmentInd+0x240>)
 8025734:	681a      	ldr	r2, [r3, #0]
 8025736:	4b7e      	ldr	r3, [pc, #504]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 8025738:	681b      	ldr	r3, [r3, #0]
 802573a:	1ad3      	subs	r3, r2, r3
 802573c:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 802573e:	687b      	ldr	r3, [r7, #4]
 8025740:	7a1b      	ldrb	r3, [r3, #8]
 8025742:	f003 0301 	and.w	r3, r3, #1
 8025746:	2b00      	cmp	r3, #0
 8025748:	d02c      	beq.n	80257a4 <SdoDownloadSegmentInd+0xb8>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 802574a:	89fa      	ldrh	r2, [r7, #14]
 802574c:	693b      	ldr	r3, [r7, #16]
 802574e:	429a      	cmp	r2, r3
 8025750:	d325      	bcc.n	802579e <SdoDownloadSegmentInd+0xb2>
                {
/* ECATCHANGE_START(V5.11) ECAT7*/
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	881b      	ldrh	r3, [r3, #0]
 8025756:	81bb      	strh	r3, [r7, #12]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025758:	89bb      	ldrh	r3, [r7, #12]
 802575a:	3b03      	subs	r3, #3
 802575c:	461a      	mov	r2, r3
 802575e:	693b      	ldr	r3, [r7, #16]
 8025760:	429a      	cmp	r2, r3
 8025762:	d30c      	bcc.n	802577e <SdoDownloadSegmentInd+0x92>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 8025764:	687b      	ldr	r3, [r7, #4]
 8025766:	7a1b      	ldrb	r3, [r3, #8]
 8025768:	f003 030e 	and.w	r3, r3, #14
 802576c:	105b      	asrs	r3, r3, #1
 802576e:	b29b      	uxth	r3, r3
 8025770:	f1c3 0307 	rsb	r3, r3, #7
 8025774:	b29b      	uxth	r3, r3
 8025776:	461a      	mov	r2, r3
 8025778:	693b      	ldr	r3, [r7, #16]
 802577a:	429a      	cmp	r2, r3
 802577c:	d008      	beq.n	8025790 <SdoDownloadSegmentInd+0xa4>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 802577e:	693b      	ldr	r3, [r7, #16]
 8025780:	2b07      	cmp	r3, #7
 8025782:	d909      	bls.n	8025798 <SdoDownloadSegmentInd+0xac>
                        && (bytesToSave == (mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025784:	89bb      	ldrh	r3, [r7, #12]
 8025786:	3b03      	subs	r3, #3
 8025788:	461a      	mov	r2, r3
 802578a:	693b      	ldr	r3, [r7, #16]
 802578c:	429a      	cmp	r2, r3
 802578e:	d103      	bne.n	8025798 <SdoDownloadSegmentInd+0xac>
                        ) )
/* ECATCHANGE_END(V5.11) ECAT7*/
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 8025790:	4b68      	ldr	r3, [pc, #416]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 8025792:	2200      	movs	r2, #0
 8025794:	701a      	strb	r2, [r3, #0]
 8025796:	e011      	b.n	80257bc <SdoDownloadSegmentInd+0xd0>
                    }
                    else
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8025798:	230e      	movs	r3, #14
 802579a:	75fb      	strb	r3, [r7, #23]
 802579c:	e00e      	b.n	80257bc <SdoDownloadSegmentInd+0xd0>
                }
                else
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 802579e:	230e      	movs	r3, #14
 80257a0:	75fb      	strb	r3, [r7, #23]
 80257a2:	e00b      	b.n	80257bc <SdoDownloadSegmentInd+0xd0>
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 80257a4:	4b63      	ldr	r3, [pc, #396]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 80257a6:	2201      	movs	r2, #1
 80257a8:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 80257aa:	89fa      	ldrh	r2, [r7, #14]
 80257ac:	693b      	ldr	r3, [r7, #16]
 80257ae:	429a      	cmp	r2, r3
 80257b0:	d302      	bcc.n	80257b8 <SdoDownloadSegmentInd+0xcc>
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 80257b2:	230e      	movs	r3, #14
 80257b4:	75fb      	strb	r3, [r7, #23]
 80257b6:	e001      	b.n	80257bc <SdoDownloadSegmentInd+0xd0>
                else
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 80257b8:	89fb      	ldrh	r3, [r7, #14]
 80257ba:	613b      	str	r3, [r7, #16]
            }

            if ( abort == 0 )
 80257bc:	7dfb      	ldrb	r3, [r7, #23]
 80257be:	2b00      	cmp	r3, #0
 80257c0:	d163      	bne.n	802588a <SdoDownloadSegmentInd+0x19e>
            {
                /* the received data is copied in the buffer */
                MBXMEMCPY( ((UINT8*)pSdoSegData) + (nSdoSegBytesToHandle), pSdoInd->SdoHeader.Data, bytesToSave ); 
 80257c2:	4b59      	ldr	r3, [pc, #356]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 80257c4:	681a      	ldr	r2, [r3, #0]
 80257c6:	4b5a      	ldr	r3, [pc, #360]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 80257c8:	681b      	ldr	r3, [r3, #0]
 80257ca:	441a      	add	r2, r3
 80257cc:	687b      	ldr	r3, [r7, #4]
 80257ce:	3309      	adds	r3, #9
 80257d0:	4610      	mov	r0, r2
 80257d2:	4619      	mov	r1, r3
 80257d4:	693a      	ldr	r2, [r7, #16]
 80257d6:	f004 fd8b 	bl	802a2f0 <memcpy>

                if ( bSdoSegFollows == FALSE    )
 80257da:	4b56      	ldr	r3, [pc, #344]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 80257dc:	781b      	ldrb	r3, [r3, #0]
 80257de:	2b00      	cmp	r3, #0
 80257e0:	d153      	bne.n	802588a <SdoDownloadSegmentInd+0x19e>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 80257e2:	4b55      	ldr	r3, [pc, #340]	; (8025938 <SdoDownloadSegmentInd+0x24c>)
 80257e4:	8818      	ldrh	r0, [r3, #0]
 80257e6:	4b55      	ldr	r3, [pc, #340]	; (802593c <SdoDownloadSegmentInd+0x250>)
 80257e8:	7819      	ldrb	r1, [r3, #0]
 80257ea:	4b50      	ldr	r3, [pc, #320]	; (802592c <SdoDownloadSegmentInd+0x240>)
 80257ec:	681d      	ldr	r5, [r3, #0]
 80257ee:	4b54      	ldr	r3, [pc, #336]	; (8025940 <SdoDownloadSegmentInd+0x254>)
 80257f0:	681c      	ldr	r4, [r3, #0]
 80257f2:	4b4d      	ldr	r3, [pc, #308]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 80257f4:	681a      	ldr	r2, [r3, #0]
 80257f6:	4b53      	ldr	r3, [pc, #332]	; (8025944 <SdoDownloadSegmentInd+0x258>)
 80257f8:	781b      	ldrb	r3, [r3, #0]
 80257fa:	9200      	str	r2, [sp, #0]
 80257fc:	9301      	str	r3, [sp, #4]
 80257fe:	462a      	mov	r2, r5
 8025800:	4623      	mov	r3, r4
 8025802:	f7ff fc51 	bl	80250a8 <OBJ_Write>
 8025806:	4603      	mov	r3, r0
 8025808:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 802580a:	7dfb      	ldrb	r3, [r7, #23]
 802580c:	2bff      	cmp	r3, #255	; 0xff
 802580e:	d131      	bne.n	8025874 <SdoDownloadSegmentInd+0x188>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8025810:	4b4d      	ldr	r3, [pc, #308]	; (8025948 <SdoDownloadSegmentInd+0x25c>)
 8025812:	2202      	movs	r2, #2
 8025814:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 8025816:	4b4b      	ldr	r3, [pc, #300]	; (8025944 <SdoDownloadSegmentInd+0x258>)
 8025818:	781b      	ldrb	r3, [r3, #0]
 802581a:	2b00      	cmp	r3, #0
 802581c:	bf14      	ite	ne
 802581e:	2301      	movne	r3, #1
 8025820:	2300      	moveq	r3, #0
 8025822:	b2da      	uxtb	r2, r3
 8025824:	4b49      	ldr	r3, [pc, #292]	; (802594c <SdoDownloadSegmentInd+0x260>)
 8025826:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 8025828:	4b44      	ldr	r3, [pc, #272]	; (802593c <SdoDownloadSegmentInd+0x250>)
 802582a:	781a      	ldrb	r2, [r3, #0]
 802582c:	4b48      	ldr	r3, [pc, #288]	; (8025950 <SdoDownloadSegmentInd+0x264>)
 802582e:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 8025830:	4b41      	ldr	r3, [pc, #260]	; (8025938 <SdoDownloadSegmentInd+0x24c>)
 8025832:	881a      	ldrh	r2, [r3, #0]
 8025834:	4b47      	ldr	r3, [pc, #284]	; (8025954 <SdoDownloadSegmentInd+0x268>)
 8025836:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 8025838:	4b3c      	ldr	r3, [pc, #240]	; (802592c <SdoDownloadSegmentInd+0x240>)
 802583a:	681b      	ldr	r3, [r3, #0]
 802583c:	4a46      	ldr	r2, [pc, #280]	; (8025958 <SdoDownloadSegmentInd+0x26c>)
 802583e:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 8025840:	4b39      	ldr	r3, [pc, #228]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 8025842:	681b      	ldr	r3, [r3, #0]
 8025844:	4a45      	ldr	r2, [pc, #276]	; (802595c <SdoDownloadSegmentInd+0x270>)
 8025846:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 8025848:	4b3d      	ldr	r3, [pc, #244]	; (8025940 <SdoDownloadSegmentInd+0x254>)
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	6a1b      	ldr	r3, [r3, #32]
 802584e:	4a44      	ldr	r2, [pc, #272]	; (8025960 <SdoDownloadSegmentInd+0x274>)
 8025850:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 8025852:	4b44      	ldr	r3, [pc, #272]	; (8025964 <SdoDownloadSegmentInd+0x278>)
 8025854:	2201      	movs	r2, #1
 8025856:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8025858:	4a43      	ldr	r2, [pc, #268]	; (8025968 <SdoDownloadSegmentInd+0x27c>)
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 802585e:	4b35      	ldr	r3, [pc, #212]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 8025860:	2200      	movs	r2, #0
 8025862:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 8025864:	4b41      	ldr	r3, [pc, #260]	; (802596c <SdoDownloadSegmentInd+0x280>)
 8025866:	2200      	movs	r2, #0
 8025868:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 802586a:	4b31      	ldr	r3, [pc, #196]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 802586c:	2200      	movs	r2, #0
 802586e:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 8025870:	23ff      	movs	r3, #255	; 0xff
 8025872:	e051      	b.n	8025918 <SdoDownloadSegmentInd+0x22c>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025874:	4b2c      	ldr	r3, [pc, #176]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	4618      	mov	r0, r3
 802587a:	f004 fd31 	bl	802a2e0 <free>
                        pSdoSegData = NULL;
 802587e:	4b2a      	ldr	r3, [pc, #168]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 8025880:	2200      	movs	r2, #0
 8025882:	601a      	str	r2, [r3, #0]
 8025884:	e001      	b.n	802588a <SdoDownloadSegmentInd+0x19e>
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025886:	2303      	movs	r3, #3
 8025888:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 802588a:	7dfb      	ldrb	r3, [r7, #23]
 802588c:	2b00      	cmp	r3, #0
 802588e:	d12d      	bne.n	80258ec <SdoDownloadSegmentInd+0x200>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8025890:	687b      	ldr	r3, [r7, #4]
 8025892:	220a      	movs	r2, #10
 8025894:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025896:	687b      	ldr	r3, [r7, #4]
 8025898:	88db      	ldrh	r3, [r3, #6]
 802589a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802589e:	b29a      	uxth	r2, r3
 80258a0:	687b      	ldr	r3, [r7, #4]
 80258a2:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80258a4:	687b      	ldr	r3, [r7, #4]
 80258a6:	88db      	ldrh	r3, [r3, #6]
 80258a8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80258ac:	b29a      	uxth	r2, r3
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
        if ( bSdoSegLastToggle )
 80258b2:	4b1b      	ldr	r3, [pc, #108]	; (8025920 <SdoDownloadSegmentInd+0x234>)
 80258b4:	781b      	ldrb	r3, [r3, #0]
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d003      	beq.n	80258c2 <SdoDownloadSegmentInd+0x1d6>
        {
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE;
 80258ba:	687b      	ldr	r3, [r7, #4]
 80258bc:	2230      	movs	r2, #48	; 0x30
 80258be:	721a      	strb	r2, [r3, #8]
 80258c0:	e002      	b.n	80258c8 <SdoDownloadSegmentInd+0x1dc>
        }
        else
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES;
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	2220      	movs	r2, #32
 80258c6:	721a      	strb	r2, [r3, #8]

        if ( bSdoSegFollows == TRUE )
 80258c8:	4b1a      	ldr	r3, [pc, #104]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 80258ca:	781b      	ldrb	r3, [r3, #0]
 80258cc:	2b01      	cmp	r3, #1
 80258ce:	d106      	bne.n	80258de <SdoDownloadSegmentInd+0x1f2>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 80258d0:	4b17      	ldr	r3, [pc, #92]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 80258d2:	681a      	ldr	r2, [r3, #0]
 80258d4:	693b      	ldr	r3, [r7, #16]
 80258d6:	4413      	add	r3, r2
 80258d8:	4a15      	ldr	r2, [pc, #84]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 80258da:	6013      	str	r3, [r2, #0]
 80258dc:	e01b      	b.n	8025916 <SdoDownloadSegmentInd+0x22a>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 80258de:	4b14      	ldr	r3, [pc, #80]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 80258e0:	2200      	movs	r2, #0
 80258e2:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 80258e4:	4b21      	ldr	r3, [pc, #132]	; (802596c <SdoDownloadSegmentInd+0x280>)
 80258e6:	2200      	movs	r2, #0
 80258e8:	701a      	strb	r2, [r3, #0]
 80258ea:	e014      	b.n	8025916 <SdoDownloadSegmentInd+0x22a>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 80258ec:	4b11      	ldr	r3, [pc, #68]	; (8025934 <SdoDownloadSegmentInd+0x248>)
 80258ee:	2200      	movs	r2, #0
 80258f0:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 80258f2:	4b1e      	ldr	r3, [pc, #120]	; (802596c <SdoDownloadSegmentInd+0x280>)
 80258f4:	2200      	movs	r2, #0
 80258f6:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 80258f8:	4b0b      	ldr	r3, [pc, #44]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 80258fa:	681b      	ldr	r3, [r3, #0]
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	d007      	beq.n	8025910 <SdoDownloadSegmentInd+0x224>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025900:	4b09      	ldr	r3, [pc, #36]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 8025902:	681b      	ldr	r3, [r3, #0]
 8025904:	4618      	mov	r0, r3
 8025906:	f004 fceb 	bl	802a2e0 <free>
            pSdoSegData = NULL;
 802590a:	4b07      	ldr	r3, [pc, #28]	; (8025928 <SdoDownloadSegmentInd+0x23c>)
 802590c:	2200      	movs	r2, #0
 802590e:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 8025910:	4b07      	ldr	r3, [pc, #28]	; (8025930 <SdoDownloadSegmentInd+0x244>)
 8025912:	2200      	movs	r2, #0
 8025914:	601a      	str	r2, [r3, #0]
    }

    return abort;
 8025916:	7dfb      	ldrb	r3, [r7, #23]
}
 8025918:	4618      	mov	r0, r3
 802591a:	3718      	adds	r7, #24
 802591c:	46bd      	mov	sp, r7
 802591e:	bdb0      	pop	{r4, r5, r7, pc}
 8025920:	1ffead42 	.word	0x1ffead42
 8025924:	1ffeac8e 	.word	0x1ffeac8e
 8025928:	1ffead54 	.word	0x1ffead54
 802592c:	1ffead38 	.word	0x1ffead38
 8025930:	1ffead30 	.word	0x1ffead30
 8025934:	1ffead35 	.word	0x1ffead35
 8025938:	1ffead58 	.word	0x1ffead58
 802593c:	1ffead70 	.word	0x1ffead70
 8025940:	1ffead6c 	.word	0x1ffead6c
 8025944:	1ffead34 	.word	0x1ffead34
 8025948:	1ffead40 	.word	0x1ffead40
 802594c:	1ffead41 	.word	0x1ffead41
 8025950:	1ffead74 	.word	0x1ffead74
 8025954:	1ffead72 	.word	0x1ffead72
 8025958:	1ffead50 	.word	0x1ffead50
 802595c:	1ffead2c 	.word	0x1ffead2c
 8025960:	1ffead3c 	.word	0x1ffead3c
 8025964:	1ffe9523 	.word	0x1ffe9523
 8025968:	1ffead4c 	.word	0x1ffead4c
 802596c:	1ffead43 	.word	0x1ffead43

08025970 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8025970:	b580      	push	{r7, lr}
 8025972:	b086      	sub	sp, #24
 8025974:	af00      	add	r7, sp, #0
 8025976:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025978:	2300      	movs	r3, #0
 802597a:	75fb      	strb	r3, [r7, #23]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	60fb      	str	r3, [r7, #12]

   if ( (pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	7a1b      	ldrb	r3, [r3, #8]
 8025984:	f003 0310 	and.w	r3, r3, #16
 8025988:	4a4c      	ldr	r2, [pc, #304]	; (8025abc <SdoUploadSegmentInd+0x14c>)
 802598a:	7812      	ldrb	r2, [r2, #0]
 802598c:	4293      	cmp	r3, r2
 802598e:	d102      	bne.n	8025996 <SdoUploadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8025990:	2301      	movs	r3, #1
 8025992:	75fb      	strb	r3, [r7, #23]
 8025994:	e08c      	b.n	8025ab0 <SdoUploadSegmentInd+0x140>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 8025996:	2300      	movs	r3, #0
 8025998:	613b      	str	r3, [r7, #16]
        UINT16 maxData;
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 802599a:	4b49      	ldr	r3, [pc, #292]	; (8025ac0 <SdoUploadSegmentInd+0x150>)
 802599c:	881b      	ldrh	r3, [r3, #0]
 802599e:	3b09      	subs	r3, #9
 80259a0:	817b      	strh	r3, [r7, #10]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	7a1b      	ldrb	r3, [r3, #8]
 80259a6:	f003 0310 	and.w	r3, r3, #16
 80259aa:	b2da      	uxtb	r2, r3
 80259ac:	4b43      	ldr	r3, [pc, #268]	; (8025abc <SdoUploadSegmentInd+0x14c>)
 80259ae:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 80259b0:	897a      	ldrh	r2, [r7, #10]
 80259b2:	4b44      	ldr	r3, [pc, #272]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 80259b4:	681b      	ldr	r3, [r3, #0]
 80259b6:	441a      	add	r2, r3
 80259b8:	4b43      	ldr	r3, [pc, #268]	; (8025ac8 <SdoUploadSegmentInd+0x158>)
 80259ba:	681b      	ldr	r3, [r3, #0]
 80259bc:	429a      	cmp	r2, r3
 80259be:	d909      	bls.n	80259d4 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 80259c0:	4b41      	ldr	r3, [pc, #260]	; (8025ac8 <SdoUploadSegmentInd+0x158>)
 80259c2:	681a      	ldr	r2, [r3, #0]
 80259c4:	4b3f      	ldr	r3, [pc, #252]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 80259c6:	681b      	ldr	r3, [r3, #0]
 80259c8:	1ad3      	subs	r3, r2, r3
 80259ca:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = FALSE;
 80259cc:	4b3f      	ldr	r3, [pc, #252]	; (8025acc <SdoUploadSegmentInd+0x15c>)
 80259ce:	2200      	movs	r2, #0
 80259d0:	701a      	strb	r2, [r3, #0]
 80259d2:	e004      	b.n	80259de <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 80259d4:	897b      	ldrh	r3, [r7, #10]
 80259d6:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = TRUE;
 80259d8:	4b3c      	ldr	r3, [pc, #240]	; (8025acc <SdoUploadSegmentInd+0x15c>)
 80259da:	2201      	movs	r2, #1
 80259dc:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &(((UINT8*)pSdoSegData)[nSdoSegBytesToHandle]), size );
 80259de:	68fb      	ldr	r3, [r7, #12]
 80259e0:	f103 0109 	add.w	r1, r3, #9
 80259e4:	4b3a      	ldr	r3, [pc, #232]	; (8025ad0 <SdoUploadSegmentInd+0x160>)
 80259e6:	681a      	ldr	r2, [r3, #0]
 80259e8:	4b36      	ldr	r3, [pc, #216]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	4413      	add	r3, r2
 80259ee:	4608      	mov	r0, r1
 80259f0:	4619      	mov	r1, r3
 80259f2:	693a      	ldr	r2, [r7, #16]
 80259f4:	f004 fc7c 	bl	802a2f0 <memcpy>
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80259f8:	68fb      	ldr	r3, [r7, #12]
 80259fa:	88db      	ldrh	r3, [r3, #6]
 80259fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a00:	b29a      	uxth	r2, r3
 8025a02:	68fb      	ldr	r3, [r7, #12]
 8025a04:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025a06:	68fb      	ldr	r3, [r7, #12]
 8025a08:	88db      	ldrh	r3, [r3, #6]
 8025a0a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025a0e:	b29a      	uxth	r2, r3
 8025a10:	68fb      	ldr	r3, [r7, #12]
 8025a12:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 8025a14:	68fb      	ldr	r3, [r7, #12]
 8025a16:	2200      	movs	r2, #0
 8025a18:	721a      	strb	r2, [r3, #8]
        if (bSdoSegFollows)
 8025a1a:	4b2c      	ldr	r3, [pc, #176]	; (8025acc <SdoUploadSegmentInd+0x15c>)
 8025a1c:	781b      	ldrb	r3, [r3, #0]
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d008      	beq.n	8025a34 <SdoUploadSegmentInd+0xc4>
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle;
 8025a22:	68fb      	ldr	r3, [r7, #12]
 8025a24:	7a1a      	ldrb	r2, [r3, #8]
 8025a26:	4b25      	ldr	r3, [pc, #148]	; (8025abc <SdoUploadSegmentInd+0x14c>)
 8025a28:	781b      	ldrb	r3, [r3, #0]
 8025a2a:	4313      	orrs	r3, r2
 8025a2c:	b2da      	uxtb	r2, r3
 8025a2e:	68fb      	ldr	r3, [r7, #12]
 8025a30:	721a      	strb	r2, [r3, #8]
 8025a32:	e00a      	b.n	8025a4a <SdoUploadSegmentInd+0xda>
        else
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS;
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	7a1a      	ldrb	r2, [r3, #8]
 8025a38:	4b20      	ldr	r3, [pc, #128]	; (8025abc <SdoUploadSegmentInd+0x14c>)
 8025a3a:	781b      	ldrb	r3, [r3, #0]
 8025a3c:	4313      	orrs	r3, r2
 8025a3e:	b2db      	uxtb	r3, r3
 8025a40:	f043 0301 	orr.w	r3, r3, #1
 8025a44:	b2da      	uxtb	r2, r3
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	721a      	strb	r2, [r3, #8]

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 8025a4a:	693b      	ldr	r3, [r7, #16]
 8025a4c:	2b06      	cmp	r3, #6
 8025a4e:	d810      	bhi.n	8025a72 <SdoUploadSegmentInd+0x102>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8025a50:	68fb      	ldr	r3, [r7, #12]
 8025a52:	220a      	movs	r2, #10
 8025a54:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 8025a56:	68fb      	ldr	r3, [r7, #12]
 8025a58:	7a1a      	ldrb	r2, [r3, #8]
 8025a5a:	693b      	ldr	r3, [r7, #16]
 8025a5c:	b2db      	uxtb	r3, r3
 8025a5e:	f1c3 0307 	rsb	r3, r3, #7
 8025a62:	b2db      	uxtb	r3, r3
 8025a64:	005b      	lsls	r3, r3, #1
 8025a66:	b2db      	uxtb	r3, r3
 8025a68:	4313      	orrs	r3, r2
 8025a6a:	b2da      	uxtb	r2, r3
 8025a6c:	68fb      	ldr	r3, [r7, #12]
 8025a6e:	721a      	strb	r2, [r3, #8]
 8025a70:	e005      	b.n	8025a7e <SdoUploadSegmentInd+0x10e>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 8025a72:	693b      	ldr	r3, [r7, #16]
 8025a74:	b29b      	uxth	r3, r3
 8025a76:	3303      	adds	r3, #3
 8025a78:	b29a      	uxth	r2, r3
 8025a7a:	68fb      	ldr	r3, [r7, #12]
 8025a7c:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 8025a7e:	4b13      	ldr	r3, [pc, #76]	; (8025acc <SdoUploadSegmentInd+0x15c>)
 8025a80:	781b      	ldrb	r3, [r3, #0]
 8025a82:	2b01      	cmp	r3, #1
 8025a84:	d106      	bne.n	8025a94 <SdoUploadSegmentInd+0x124>
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 8025a86:	4b0f      	ldr	r3, [pc, #60]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 8025a88:	681a      	ldr	r2, [r3, #0]
 8025a8a:	693b      	ldr	r3, [r7, #16]
 8025a8c:	4413      	add	r3, r2
 8025a8e:	4a0d      	ldr	r2, [pc, #52]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 8025a90:	6013      	str	r3, [r2, #0]
 8025a92:	e00d      	b.n	8025ab0 <SdoUploadSegmentInd+0x140>
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025a94:	4b0e      	ldr	r3, [pc, #56]	; (8025ad0 <SdoUploadSegmentInd+0x160>)
 8025a96:	681b      	ldr	r3, [r3, #0]
 8025a98:	4618      	mov	r0, r3
 8025a9a:	f004 fc21 	bl	802a2e0 <free>
            pSdoSegData = NULL;
 8025a9e:	4b0c      	ldr	r3, [pc, #48]	; (8025ad0 <SdoUploadSegmentInd+0x160>)
 8025aa0:	2200      	movs	r2, #0
 8025aa2:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 8025aa4:	4b07      	ldr	r3, [pc, #28]	; (8025ac4 <SdoUploadSegmentInd+0x154>)
 8025aa6:	2200      	movs	r2, #0
 8025aa8:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 8025aaa:	4b0a      	ldr	r3, [pc, #40]	; (8025ad4 <SdoUploadSegmentInd+0x164>)
 8025aac:	2200      	movs	r2, #0
 8025aae:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 8025ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8025ab2:	4618      	mov	r0, r3
 8025ab4:	3718      	adds	r7, #24
 8025ab6:	46bd      	mov	sp, r7
 8025ab8:	bd80      	pop	{r7, pc}
 8025aba:	bf00      	nop
 8025abc:	1ffead42 	.word	0x1ffead42
 8025ac0:	1ffeac7c 	.word	0x1ffeac7c
 8025ac4:	1ffead30 	.word	0x1ffead30
 8025ac8:	1ffead38 	.word	0x1ffead38
 8025acc:	1ffead35 	.word	0x1ffead35
 8025ad0:	1ffead54 	.word	0x1ffead54
 8025ad4:	1ffead43 	.word	0x1ffead43

08025ad8 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 8025ad8:	b590      	push	{r4, r7, lr}
 8025ada:	b083      	sub	sp, #12
 8025adc:	af00      	add	r7, sp, #0
 8025ade:	4604      	mov	r4, r0
 8025ae0:	4608      	mov	r0, r1
 8025ae2:	4611      	mov	r1, r2
 8025ae4:	461a      	mov	r2, r3
 8025ae6:	4623      	mov	r3, r4
 8025ae8:	71fb      	strb	r3, [r7, #7]
 8025aea:	4603      	mov	r3, r0
 8025aec:	71bb      	strb	r3, [r7, #6]
 8025aee:	460b      	mov	r3, r1
 8025af0:	717b      	strb	r3, [r7, #5]
 8025af2:	4613      	mov	r3, r2
 8025af4:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 8025af6:	79bb      	ldrb	r3, [r7, #6]
 8025af8:	2b60      	cmp	r3, #96	; 0x60
 8025afa:	d005      	beq.n	8025b08 <SdoRes+0x30>
 8025afc:	79bb      	ldrb	r3, [r7, #6]
 8025afe:	2b00      	cmp	r3, #0
 8025b00:	d002      	beq.n	8025b08 <SdoRes+0x30>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] = 0;
 8025b02:	69fb      	ldr	r3, [r7, #28]
 8025b04:	2200      	movs	r2, #0
 8025b06:	721a      	strb	r2, [r3, #8]
    }
    if ( abort == 0 )
 8025b08:	79fb      	ldrb	r3, [r7, #7]
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	d16c      	bne.n	8025be8 <SdoRes+0x110>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025b0e:	69fb      	ldr	r3, [r7, #28]
 8025b10:	88db      	ldrh	r3, [r3, #6]
 8025b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025b16:	b29a      	uxth	r2, r3
 8025b18:	69fb      	ldr	r3, [r7, #28]
 8025b1a:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025b1c:	69fb      	ldr	r3, [r7, #28]
 8025b1e:	88db      	ldrh	r3, [r3, #6]
 8025b20:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025b24:	b29a      	uxth	r2, r3
 8025b26:	69fb      	ldr	r3, [r7, #28]
 8025b28:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025b2a:	79bb      	ldrb	r3, [r7, #6]
 8025b2c:	2b40      	cmp	r3, #64	; 0x40
 8025b2e:	d13f      	bne.n	8025bb0 <SdoRes+0xd8>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 8025b30:	69bb      	ldr	r3, [r7, #24]
 8025b32:	2b04      	cmp	r3, #4
 8025b34:	d818      	bhi.n	8025b68 <SdoRes+0x90>
 8025b36:	69bb      	ldr	r3, [r7, #24]
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	d015      	beq.n	8025b68 <SdoRes+0x90>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 8025b3c:	69fb      	ldr	r3, [r7, #28]
 8025b3e:	220a      	movs	r2, #10
 8025b40:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 8025b42:	69fb      	ldr	r3, [r7, #28]
 8025b44:	7a1a      	ldrb	r2, [r3, #8]
                                                                                        SDOHEADER_TRANSFERTYPE        |
                                                                                        completeAccess |
                                                                                        ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 8025b46:	69bb      	ldr	r3, [r7, #24]
 8025b48:	b2db      	uxtb	r3, r3
 8025b4a:	f1c3 0304 	rsb	r3, r3, #4
 8025b4e:	009b      	lsls	r3, r3, #2
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 8025b50:	b2d9      	uxtb	r1, r3
 8025b52:	797b      	ldrb	r3, [r7, #5]
 8025b54:	430b      	orrs	r3, r1
 8025b56:	b2db      	uxtb	r3, r3
 8025b58:	4313      	orrs	r3, r2
 8025b5a:	b2db      	uxtb	r3, r3
 8025b5c:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 8025b60:	b2da      	uxtb	r2, r3
 8025b62:	69fb      	ldr	r3, [r7, #28]
 8025b64:	721a      	strb	r2, [r3, #8]
 8025b66:	e059      	b.n	8025c1c <SdoRes+0x144>
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 8025b68:	887a      	ldrh	r2, [r7, #2]
 8025b6a:	69bb      	ldr	r3, [r7, #24]
 8025b6c:	429a      	cmp	r2, r3
 8025b6e:	d205      	bcs.n	8025b7c <SdoRes+0xa4>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 8025b70:	887b      	ldrh	r3, [r7, #2]
 8025b72:	330a      	adds	r3, #10
 8025b74:	b29a      	uxth	r2, r3
 8025b76:	69fb      	ldr	r3, [r7, #28]
 8025b78:	801a      	strh	r2, [r3, #0]
 8025b7a:	e005      	b.n	8025b88 <SdoRes+0xb0>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 8025b7c:	69bb      	ldr	r3, [r7, #24]
 8025b7e:	b29b      	uxth	r3, r3
 8025b80:	330a      	adds	r3, #10
 8025b82:	b29a      	uxth	r2, r3
 8025b84:	69fb      	ldr	r3, [r7, #28]
 8025b86:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 8025b88:	69bb      	ldr	r3, [r7, #24]
 8025b8a:	b29a      	uxth	r2, r3
 8025b8c:	69fb      	ldr	r3, [r7, #28]
 8025b8e:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 8025b90:	69bb      	ldr	r3, [r7, #24]
 8025b92:	0c1b      	lsrs	r3, r3, #16
 8025b94:	b29a      	uxth	r2, r3
 8025b96:	69fb      	ldr	r3, [r7, #28]
 8025b98:	81da      	strh	r2, [r3, #14]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 8025b9a:	69fb      	ldr	r3, [r7, #28]
 8025b9c:	7a1a      	ldrb	r2, [r3, #8]
 8025b9e:	797b      	ldrb	r3, [r7, #5]
 8025ba0:	4313      	orrs	r3, r2
 8025ba2:	b2db      	uxtb	r3, r3
 8025ba4:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8025ba8:	b2da      	uxtb	r2, r3
 8025baa:	69fb      	ldr	r3, [r7, #28]
 8025bac:	721a      	strb	r2, [r3, #8]
 8025bae:	e035      	b.n	8025c1c <SdoRes+0x144>
                                                                                        completeAccess |
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8025bb0:	79bb      	ldrb	r3, [r7, #6]
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d10a      	bne.n	8025bcc <SdoRes+0xf4>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 8025bb6:	69fb      	ldr	r3, [r7, #28]
 8025bb8:	220a      	movs	r2, #10
 8025bba:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_DOWNLOADSEGMENTRES;
 8025bbc:	69fb      	ldr	r3, [r7, #28]
 8025bbe:	7a1b      	ldrb	r3, [r3, #8]
 8025bc0:	f043 0320 	orr.w	r3, r3, #32
 8025bc4:	b2da      	uxtb	r2, r3
 8025bc6:	69fb      	ldr	r3, [r7, #28]
 8025bc8:	721a      	strb	r2, [r3, #8]
 8025bca:	e027      	b.n	8025c1c <SdoRes+0x144>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 8025bcc:	79bb      	ldrb	r3, [r7, #6]
 8025bce:	2b60      	cmp	r3, #96	; 0x60
 8025bd0:	d024      	beq.n	8025c1c <SdoRes+0x144>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 8025bd2:	69fb      	ldr	r3, [r7, #28]
 8025bd4:	220a      	movs	r2, #10
 8025bd6:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_INITIATEDOWNLOADRES;
 8025bd8:	69fb      	ldr	r3, [r7, #28]
 8025bda:	7a1b      	ldrb	r3, [r3, #8]
 8025bdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8025be0:	b2da      	uxtb	r2, r3
 8025be2:	69fb      	ldr	r3, [r7, #28]
 8025be4:	721a      	strb	r2, [r3, #8]
 8025be6:	e019      	b.n	8025c1c <SdoRes+0x144>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 8025be8:	69fb      	ldr	r3, [r7, #28]
 8025bea:	220a      	movs	r2, #10
 8025bec:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025bee:	69fb      	ldr	r3, [r7, #28]
 8025bf0:	88db      	ldrh	r3, [r3, #6]
 8025bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025bf6:	b29a      	uxth	r2, r3
 8025bf8:	69fb      	ldr	r3, [r7, #28]
 8025bfa:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 8025bfc:	69fb      	ldr	r3, [r7, #28]
 8025bfe:	88db      	ldrh	r3, [r3, #6]
 8025c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025c04:	b29a      	uxth	r2, r3
 8025c06:	69fb      	ldr	r3, [r7, #28]
 8025c08:	80da      	strh	r2, [r3, #6]
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    = SDOSERVICE_ABORTTRANSFER;
 8025c0a:	69fb      	ldr	r3, [r7, #28]
 8025c0c:	2280      	movs	r2, #128	; 0x80
 8025c0e:	721a      	strb	r2, [r3, #8]
        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 8025c10:	79fb      	ldrb	r3, [r7, #7]
 8025c12:	4a09      	ldr	r2, [pc, #36]	; (8025c38 <SdoRes+0x160>)
 8025c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025c18:	69fb      	ldr	r3, [r7, #28]
 8025c1a:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 8025c1c:	69f8      	ldr	r0, [r7, #28]
 8025c1e:	2102      	movs	r1, #2
 8025c20:	f7fe f9ae 	bl	8023f80 <MBX_MailboxSendReq>
 8025c24:	4603      	mov	r3, r0
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d002      	beq.n	8025c30 <SdoRes+0x158>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 8025c2a:	4a04      	ldr	r2, [pc, #16]	; (8025c3c <SdoRes+0x164>)
 8025c2c:	69fb      	ldr	r3, [r7, #28]
 8025c2e:	6013      	str	r3, [r2, #0]
    }
}
 8025c30:	370c      	adds	r7, #12
 8025c32:	46bd      	mov	sp, r7
 8025c34:	bd90      	pop	{r4, r7, pc}
 8025c36:	bf00      	nop
 8025c38:	0802ad08 	.word	0x0802ad08
 8025c3c:	1ffea808 	.word	0x1ffea808

08025c40 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 8025c40:	b590      	push	{r4, r7, lr}
 8025c42:	b08f      	sub	sp, #60	; 0x3c
 8025c44:	af02      	add	r7, sp, #8
 8025c46:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025c48:	2300      	movs	r3, #0
 8025c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    UINT8 sdoHeader = pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK;
 8025c4e:	687b      	ldr	r3, [r7, #4]
 8025c50:	7a1b      	ldrb	r3, [r3, #8]
 8025c52:	76bb      	strb	r3, [r7, #26]
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 8025c54:	7ebb      	ldrb	r3, [r7, #26]
 8025c56:	f023 031f 	bic.w	r3, r3, #31
 8025c5a:	767b      	strb	r3, [r7, #25]
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8025c5c:	687b      	ldr	r3, [r7, #4]
 8025c5e:	881b      	ldrh	r3, [r3, #0]
 8025c60:	82fb      	strh	r3, [r7, #22]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 8025c62:	2300      	movs	r3, #0
 8025c64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    UINT32 objLength = 0;
 8025c68:	2300      	movs	r3, #0
 8025c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 dataSize = 0;
 8025c6c:	2300      	movs	r3, #0
 8025c6e:	627b      	str	r3, [r7, #36]	; 0x24

    if ( bSdoInWork )
 8025c70:	4b99      	ldr	r3, [pc, #612]	; (8025ed8 <SDOS_SdoInd+0x298>)
 8025c72:	781b      	ldrb	r3, [r3, #0]
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d001      	beq.n	8025c7c <SDOS_SdoInd+0x3c>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 8025c78:	2309      	movs	r3, #9
 8025c7a:	e275      	b.n	8026168 <SDOS_SdoInd+0x528>
    }


    switch (command)
 8025c7c:	7e7b      	ldrb	r3, [r7, #25]
 8025c7e:	2b20      	cmp	r3, #32
 8025c80:	d00b      	beq.n	8025c9a <SDOS_SdoInd+0x5a>
 8025c82:	2b20      	cmp	r3, #32
 8025c84:	dc03      	bgt.n	8025c8e <SDOS_SdoInd+0x4e>
 8025c86:	2b00      	cmp	r3, #0
 8025c88:	f000 823b 	beq.w	8026102 <SDOS_SdoInd+0x4c2>
 8025c8c:	e253      	b.n	8026136 <SDOS_SdoInd+0x4f6>
 8025c8e:	2b40      	cmp	r3, #64	; 0x40
 8025c90:	d003      	beq.n	8025c9a <SDOS_SdoInd+0x5a>
 8025c92:	2b60      	cmp	r3, #96	; 0x60
 8025c94:	f000 8235 	beq.w	8026102 <SDOS_SdoInd+0x4c2>
 8025c98:	e24d      	b.n	8026136 <SDOS_SdoInd+0x4f6>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
        index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 8025c9a:	687b      	ldr	r3, [r7, #4]
 8025c9c:	7a9b      	ldrb	r3, [r3, #10]
 8025c9e:	82bb      	strh	r3, [r7, #20]
        index <<= 8;
 8025ca0:	8abb      	ldrh	r3, [r7, #20]
 8025ca2:	021b      	lsls	r3, r3, #8
 8025ca4:	82bb      	strh	r3, [r7, #20]
        index += pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT;
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	7a5b      	ldrb	r3, [r3, #9]
 8025caa:	b29a      	uxth	r2, r3
 8025cac:	8abb      	ldrh	r3, [r7, #20]
 8025cae:	4413      	add	r3, r2
 8025cb0:	82bb      	strh	r3, [r7, #20]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex    = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT;
 8025cb2:	687b      	ldr	r3, [r7, #4]
 8025cb4:	7adb      	ldrb	r3, [r3, #11]
 8025cb6:	74fb      	strb	r3, [r7, #19]

        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 8025cb8:	8abb      	ldrh	r3, [r7, #20]
 8025cba:	4618      	mov	r0, r3
 8025cbc:	f7fe fb1a 	bl	80242f4 <OBJ_GetObjectHandle>
 8025cc0:	60f8      	str	r0, [r7, #12]

        if ( pObjEntry )
 8025cc2:	68fb      	ldr	r3, [r7, #12]
 8025cc4:	2b00      	cmp	r3, #0
 8025cc6:	f000 8217 	beq.w	80260f8 <SDOS_SdoInd+0x4b8>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 8025cca:	2300      	movs	r3, #0
 8025ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 8025cd0:	2300      	movs	r3, #0
 8025cd2:	61fb      	str	r3, [r7, #28]
            UINT8 segTransfer = 0;
 8025cd4:	2300      	movs	r3, #0
 8025cd6:	76fb      	strb	r3, [r7, #27]

            {
                dataSize = objLength = OBJ_GetObjectLength( index, subindex, pObjEntry, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS) );
 8025cd8:	7ebb      	ldrb	r3, [r7, #26]
 8025cda:	f003 0310 	and.w	r3, r3, #16
 8025cde:	b2db      	uxtb	r3, r3
 8025ce0:	8ab9      	ldrh	r1, [r7, #20]
 8025ce2:	7cfa      	ldrb	r2, [r7, #19]
 8025ce4:	4608      	mov	r0, r1
 8025ce6:	4611      	mov	r1, r2
 8025ce8:	68fa      	ldr	r2, [r7, #12]
 8025cea:	f7fe fb1f 	bl	802432c <OBJ_GetObjectLength>
 8025cee:	62b8      	str	r0, [r7, #40]	; 0x28
 8025cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cf2:	627b      	str	r3, [r7, #36]	; 0x24

                if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025cf4:	7e7b      	ldrb	r3, [r7, #25]
 8025cf6:	2b40      	cmp	r3, #64	; 0x40
 8025cf8:	d127      	bne.n	8025d4a <SDOS_SdoInd+0x10a>
                {
                    /* SDO Upload */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 8025cfa:	8afb      	ldrh	r3, [r7, #22]
 8025cfc:	2b0a      	cmp	r3, #10
 8025cfe:	d001      	beq.n	8025d04 <SDOS_SdoInd+0xc4>
                        /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 8025d00:	2308      	movs	r3, #8
 8025d02:	e231      	b.n	8026168 <SDOS_SdoInd+0x528>
                    /* distinguish between expedited and normal upload response within the length of the response data */
                    if ( (objLength <= MAX_EXPEDITED_DATA) && objLength != 0 )
 8025d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d06:	2b04      	cmp	r3, #4
 8025d08:	d810      	bhi.n	8025d2c <SDOS_SdoInd+0xec>
 8025d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d0c:	2b00      	cmp	r3, #0
 8025d0e:	d00d      	beq.n	8025d2c <SDOS_SdoInd+0xec>
                    {
                        /* Expedited Upload */
                        bTransferType = 1;
 8025d10:	2301      	movs	r3, #1
 8025d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* pData is the pointer where the object data has to be copied for the response */
                        pData = ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	330c      	adds	r3, #12
 8025d1a:	61fb      	str	r3, [r7, #28]
                        /* initialize the 4 data bytes of the SDO upload response because the requested object data
                           could be less than 4 */
                        pData[0] = 0;
 8025d1c:	69fb      	ldr	r3, [r7, #28]
 8025d1e:	2200      	movs	r2, #0
 8025d20:	801a      	strh	r2, [r3, #0]
                        pData[1] = 0;
 8025d22:	69fb      	ldr	r3, [r7, #28]
 8025d24:	3302      	adds	r3, #2
 8025d26:	2200      	movs	r2, #0
 8025d28:	801a      	strh	r2, [r3, #0]
 8025d2a:	e013      	b.n	8025d54 <SDOS_SdoInd+0x114>
                    }
                    else
                    {
                        /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                    dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8025d2c:	4b6b      	ldr	r3, [pc, #428]	; (8025edc <SDOS_SdoInd+0x29c>)
 8025d2e:	881b      	ldrh	r3, [r3, #0]
 8025d30:	3b10      	subs	r3, #16
 8025d32:	627b      	str	r3, [r7, #36]	; 0x24
                        if ( dataSize < objLength )
 8025d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d38:	429a      	cmp	r2, r3
 8025d3a:	d202      	bcs.n	8025d42 <SDOS_SdoInd+0x102>
                            /* Segmented Upload */
                            segTransfer = 1;
 8025d3c:	2301      	movs	r3, #1
 8025d3e:	76fb      	strb	r3, [r7, #27]
 8025d40:	e008      	b.n	8025d54 <SDOS_SdoInd+0x114>
                        else
                            /* Normal Upload */
                            pData = ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 8025d42:	687b      	ldr	r3, [r7, #4]
 8025d44:	3310      	adds	r3, #16
 8025d46:	61fb      	str	r3, [r7, #28]
 8025d48:	e004      	b.n	8025d54 <SDOS_SdoInd+0x114>
                    }
                }
                else
                {
                    /* SDO-Download: store if the request is a expedited or normal request  */
                    bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 8025d4a:	7ebb      	ldrb	r3, [r7, #26]
 8025d4c:	f003 0302 	and.w	r3, r3, #2
 8025d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
            }

            if ( command == SDOSERVICE_INITIATEDOWNLOADREQ )
 8025d54:	7e7b      	ldrb	r3, [r7, #25]
 8025d56:	2b20      	cmp	r3, #32
 8025d58:	d13c      	bne.n	8025dd4 <SDOS_SdoInd+0x194>
            {
                /* SDO Download */
                if ( bTransferType )
 8025d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	d00f      	beq.n	8025d82 <SDOS_SdoInd+0x142>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 8025d62:	8afb      	ldrh	r3, [r7, #22]
 8025d64:	2b0a      	cmp	r3, #10
 8025d66:	d001      	beq.n	8025d6c <SDOS_SdoInd+0x12c>
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 8025d68:	2308      	movs	r3, #8
 8025d6a:	e1fd      	b.n	8026168 <SDOS_SdoInd+0x528>
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 8025d6c:	7ebb      	ldrb	r3, [r7, #26]
 8025d6e:	f003 030c 	and.w	r3, r3, #12
 8025d72:	109b      	asrs	r3, r3, #2
 8025d74:	f1c3 0304 	rsb	r3, r3, #4
 8025d78:	627b      	str	r3, [r7, #36]	; 0x24
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	330c      	adds	r3, #12
 8025d7e:	61fb      	str	r3, [r7, #28]
 8025d80:	e028      	b.n	8025dd4 <SDOS_SdoInd+0x194>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	89db      	ldrh	r3, [r3, #14]
 8025d86:	041b      	lsls	r3, r3, #16
 8025d88:	687a      	ldr	r2, [r7, #4]
 8025d8a:	8992      	ldrh	r2, [r2, #12]
 8025d8c:	4413      	add	r3, r2
 8025d8e:	60bb      	str	r3, [r7, #8]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 8025d90:	68bb      	ldr	r3, [r7, #8]
 8025d92:	3310      	adds	r3, #16
 8025d94:	4a52      	ldr	r2, [pc, #328]	; (8025ee0 <SDOS_SdoInd+0x2a0>)
 8025d96:	8812      	ldrh	r2, [r2, #0]
 8025d98:	4293      	cmp	r3, r2
 8025d9a:	d907      	bls.n	8025dac <SDOS_SdoInd+0x16c>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 8025d9c:	8afa      	ldrh	r2, [r7, #22]
 8025d9e:	4b50      	ldr	r3, [pc, #320]	; (8025ee0 <SDOS_SdoInd+0x2a0>)
 8025da0:	881b      	ldrh	r3, [r3, #0]
 8025da2:	3b06      	subs	r3, #6
 8025da4:	429a      	cmp	r2, r3
 8025da6:	d008      	beq.n	8025dba <SDOS_SdoInd+0x17a>
                            return MBXERR_INVALIDSIZE;
 8025da8:	2308      	movs	r3, #8
 8025daa:	e1dd      	b.n	8026168 <SDOS_SdoInd+0x528>
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 8025dac:	8afa      	ldrh	r2, [r7, #22]
 8025dae:	68bb      	ldr	r3, [r7, #8]
 8025db0:	330a      	adds	r3, #10
 8025db2:	429a      	cmp	r2, r3
 8025db4:	d001      	beq.n	8025dba <SDOS_SdoInd+0x17a>
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 8025db6:	2308      	movs	r3, #8
 8025db8:	e1d6      	b.n	8026168 <SDOS_SdoInd+0x528>
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 8025dba:	687b      	ldr	r3, [r7, #4]
 8025dbc:	3310      	adds	r3, #16
 8025dbe:	61fb      	str	r3, [r7, #28]
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 8025dc0:	68bb      	ldr	r3, [r7, #8]
 8025dc2:	627b      	str	r3, [r7, #36]	; 0x24
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 8025dc4:	8afb      	ldrh	r3, [r7, #22]
 8025dc6:	f1a3 020a 	sub.w	r2, r3, #10
 8025dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dcc:	429a      	cmp	r2, r3
 8025dce:	d201      	bcs.n	8025dd4 <SDOS_SdoInd+0x194>
                        /* Segmented Download */
                        segTransfer = 1;
 8025dd0:	2301      	movs	r3, #1
 8025dd2:	76fb      	strb	r3, [r7, #27]
                }
            }

            if ( sdoHeader & SDOHEADER_COMPLETEACCESS )
 8025dd4:	7ebb      	ldrb	r3, [r7, #26]
 8025dd6:	f003 0310 	and.w	r3, r3, #16
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d008      	beq.n	8025df0 <SDOS_SdoInd+0x1b0>
            {
                bCompleteAccess = 1;
 8025dde:	2301      	movs	r3, #1
 8025de0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 8025de4:	7cfb      	ldrb	r3, [r7, #19]
 8025de6:	2b01      	cmp	r3, #1
 8025de8:	d902      	bls.n	8025df0 <SDOS_SdoInd+0x1b0>
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8025dea:	2305      	movs	r3, #5
 8025dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if ( abort == 0 )
 8025df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	f040 817e 	bne.w	80260f6 <SDOS_SdoInd+0x4b6>
            {
                if ( segTransfer )
 8025dfa:	7efb      	ldrb	r3, [r7, #27]
 8025dfc:	2b00      	cmp	r3, #0
 8025dfe:	f000 80d7 	beq.w	8025fb0 <SDOS_SdoInd+0x370>
                {
                    bSdoSegFollows         = TRUE;
 8025e02:	4b38      	ldr	r3, [pc, #224]	; (8025ee4 <SDOS_SdoInd+0x2a4>)
 8025e04:	2201      	movs	r2, #1
 8025e06:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 8025e08:	4b37      	ldr	r3, [pc, #220]	; (8025ee8 <SDOS_SdoInd+0x2a8>)
 8025e0a:	2201      	movs	r2, #1
 8025e0c:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 8025e0e:	4a37      	ldr	r2, [pc, #220]	; (8025eec <SDOS_SdoInd+0x2ac>)
 8025e10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025e14:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 8025e16:	4a36      	ldr	r2, [pc, #216]	; (8025ef0 <SDOS_SdoInd+0x2b0>)
 8025e18:	8abb      	ldrh	r3, [r7, #20]
 8025e1a:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 8025e1c:	4a35      	ldr	r2, [pc, #212]	; (8025ef4 <SDOS_SdoInd+0x2b4>)
 8025e1e:	7cfb      	ldrb	r3, [r7, #19]
 8025e20:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 8025e22:	4a35      	ldr	r2, [pc, #212]	; (8025ef8 <SDOS_SdoInd+0x2b8>)
 8025e24:	68fb      	ldr	r3, [r7, #12]
 8025e26:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025e28:	7e7b      	ldrb	r3, [r7, #25]
 8025e2a:	2b40      	cmp	r3, #64	; 0x40
 8025e2c:	d103      	bne.n	8025e36 <SDOS_SdoInd+0x1f6>
                        nSdoSegCompleteSize    = objLength;
 8025e2e:	4a33      	ldr	r2, [pc, #204]	; (8025efc <SDOS_SdoInd+0x2bc>)
 8025e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e32:	6013      	str	r3, [r2, #0]
 8025e34:	e002      	b.n	8025e3c <SDOS_SdoInd+0x1fc>
                    else
                        nSdoSegCompleteSize    = dataSize;
 8025e36:	4a31      	ldr	r2, [pc, #196]	; (8025efc <SDOS_SdoInd+0x2bc>)
 8025e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e3a:	6013      	str	r3, [r2, #0]

                    if (pSdoSegData != NULL)
 8025e3c:	4b30      	ldr	r3, [pc, #192]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e3e:	681b      	ldr	r3, [r3, #0]
 8025e40:	2b00      	cmp	r3, #0
 8025e42:	d007      	beq.n	8025e54 <SDOS_SdoInd+0x214>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 8025e44:	4b2e      	ldr	r3, [pc, #184]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	4618      	mov	r0, r3
 8025e4a:	f004 fa49 	bl	802a2e0 <free>
                        pSdoSegData = NULL;
 8025e4e:	4b2c      	ldr	r3, [pc, #176]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e50:	2200      	movs	r2, #0
 8025e52:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 8025e54:	4b29      	ldr	r3, [pc, #164]	; (8025efc <SDOS_SdoInd+0x2bc>)
 8025e56:	681b      	ldr	r3, [r3, #0]
 8025e58:	3301      	adds	r3, #1
 8025e5a:	f023 0301 	bic.w	r3, r3, #1
 8025e5e:	4618      	mov	r0, r3
 8025e60:	f004 fa36 	bl	802a2d0 <malloc>
 8025e64:	4603      	mov	r3, r0
 8025e66:	461a      	mov	r2, r3
 8025e68:	4b25      	ldr	r3, [pc, #148]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e6a:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 8025e6c:	4b24      	ldr	r3, [pc, #144]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d10b      	bne.n	8025e8c <SDOS_SdoInd+0x24c>
                    {
/*ECATCHANGE_START(V5.11) SDO4*/
                        if(bCompleteAccess)
 8025e74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025e78:	2b00      	cmp	r3, #0
 8025e7a:	d003      	beq.n	8025e84 <SDOS_SdoInd+0x244>
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8025e7c:	2305      	movs	r3, #5
 8025e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8025e82:	e138      	b.n	80260f6 <SDOS_SdoInd+0x4b6>
                        else
/*ECATCHANGE_END(V5.11) SDO4*/
                            abort = ABORTIDX_OUT_OF_MEMORY;
 8025e84:	2304      	movs	r3, #4
 8025e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8025e8a:	e134      	b.n	80260f6 <SDOS_SdoInd+0x4b6>
                    }
                    else
                    {
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025e8c:	7e7b      	ldrb	r3, [r7, #25]
 8025e8e:	2b40      	cmp	r3, #64	; 0x40
 8025e90:	d178      	bne.n	8025f84 <SDOS_SdoInd+0x344>
                        {
                            /* Segmented Upload */
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 8025e92:	4b1b      	ldr	r3, [pc, #108]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025e94:	681b      	ldr	r3, [r3, #0]
 8025e96:	8ab9      	ldrh	r1, [r7, #20]
 8025e98:	7cfa      	ldrb	r2, [r7, #19]
 8025e9a:	9300      	str	r3, [sp, #0]
 8025e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025ea0:	9301      	str	r3, [sp, #4]
 8025ea2:	4608      	mov	r0, r1
 8025ea4:	4611      	mov	r1, r2
 8025ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025ea8:	68fb      	ldr	r3, [r7, #12]
 8025eaa:	f7fe fe29 	bl	8024b00 <OBJ_Read>
 8025eae:	4603      	mov	r3, r0
 8025eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            if ( abort == 0 )
 8025eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025eb8:	2b00      	cmp	r3, #0
 8025eba:	d125      	bne.n	8025f08 <SDOS_SdoInd+0x2c8>
                            {
                                MBXMEMCPY( ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 8025ebc:	687b      	ldr	r3, [r7, #4]
 8025ebe:	f103 0210 	add.w	r2, r3, #16
 8025ec2:	4b0f      	ldr	r3, [pc, #60]	; (8025f00 <SDOS_SdoInd+0x2c0>)
 8025ec4:	681b      	ldr	r3, [r3, #0]
 8025ec6:	4610      	mov	r0, r2
 8025ec8:	4619      	mov	r1, r3
 8025eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025ecc:	f004 fa10 	bl	802a2f0 <memcpy>
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8025ed0:	4b0c      	ldr	r3, [pc, #48]	; (8025f04 <SDOS_SdoInd+0x2c4>)
 8025ed2:	2260      	movs	r2, #96	; 0x60
 8025ed4:	701a      	strb	r2, [r3, #0]
 8025ed6:	e067      	b.n	8025fa8 <SDOS_SdoInd+0x368>
 8025ed8:	1ffe9523 	.word	0x1ffe9523
 8025edc:	1ffeac7c 	.word	0x1ffeac7c
 8025ee0:	1ffeac8e 	.word	0x1ffeac8e
 8025ee4:	1ffead35 	.word	0x1ffead35
 8025ee8:	1ffead42 	.word	0x1ffead42
 8025eec:	1ffead34 	.word	0x1ffead34
 8025ef0:	1ffead58 	.word	0x1ffead58
 8025ef4:	1ffead70 	.word	0x1ffead70
 8025ef8:	1ffead6c 	.word	0x1ffead6c
 8025efc:	1ffead38 	.word	0x1ffead38
 8025f00:	1ffead54 	.word	0x1ffead54
 8025f04:	1ffead43 	.word	0x1ffead43
                            }
                            else if ( abort == ABORTIDX_WORKING )
 8025f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025f0c:	2bff      	cmp	r3, #255	; 0xff
 8025f0e:	d14b      	bne.n	8025fa8 <SDOS_SdoInd+0x368>
                            {
                                /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 8025f10:	4b97      	ldr	r3, [pc, #604]	; (8026170 <SDOS_SdoInd+0x530>)
 8025f12:	2204      	movs	r2, #4
 8025f14:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 8025f16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	bf14      	ite	ne
 8025f1e:	2301      	movne	r3, #1
 8025f20:	2300      	moveq	r3, #0
 8025f22:	b2da      	uxtb	r2, r3
 8025f24:	4b93      	ldr	r3, [pc, #588]	; (8026174 <SDOS_SdoInd+0x534>)
 8025f26:	701a      	strb	r2, [r3, #0]
                                u8StoreSubindex = subindex;
 8025f28:	4a93      	ldr	r2, [pc, #588]	; (8026178 <SDOS_SdoInd+0x538>)
 8025f2a:	7cfb      	ldrb	r3, [r7, #19]
 8025f2c:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 8025f2e:	4a93      	ldr	r2, [pc, #588]	; (802617c <SDOS_SdoInd+0x53c>)
 8025f30:	8abb      	ldrh	r3, [r7, #20]
 8025f32:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 8025f34:	4a92      	ldr	r2, [pc, #584]	; (8026180 <SDOS_SdoInd+0x540>)
 8025f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f38:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 8025f3a:	4b92      	ldr	r3, [pc, #584]	; (8026184 <SDOS_SdoInd+0x544>)
 8025f3c:	681b      	ldr	r3, [r3, #0]
 8025f3e:	4a92      	ldr	r2, [pc, #584]	; (8026188 <SDOS_SdoInd+0x548>)
 8025f40:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	69db      	ldr	r3, [r3, #28]
 8025f46:	4a91      	ldr	r2, [pc, #580]	; (802618c <SDOS_SdoInd+0x54c>)
 8025f48:	6013      	str	r3, [r2, #0]

                                bSdoInWork = TRUE;
 8025f4a:	4b91      	ldr	r3, [pc, #580]	; (8026190 <SDOS_SdoInd+0x550>)
 8025f4c:	2201      	movs	r2, #1
 8025f4e:	701a      	strb	r2, [r3, #0]
                                /* we have to store the buffer and the response header */
                                pSdoResStored = pSdoInd;
 8025f50:	4a90      	ldr	r2, [pc, #576]	; (8026194 <SDOS_SdoInd+0x554>)
 8025f52:	687b      	ldr	r3, [r7, #4]
 8025f54:	6013      	str	r3, [r2, #0]

                                /*update command field*/
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 8025f56:	4b8f      	ldr	r3, [pc, #572]	; (8026194 <SDOS_SdoInd+0x554>)
 8025f58:	681b      	ldr	r3, [r3, #0]
 8025f5a:	2200      	movs	r2, #0
 8025f5c:	721a      	strb	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8025f5e:	4b8d      	ldr	r3, [pc, #564]	; (8026194 <SDOS_SdoInd+0x554>)
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	4a8c      	ldr	r2, [pc, #560]	; (8026194 <SDOS_SdoInd+0x554>)
 8025f64:	6812      	ldr	r2, [r2, #0]
 8025f66:	7a12      	ldrb	r2, [r2, #8]
 8025f68:	b2d1      	uxtb	r1, r2
 8025f6a:	7eba      	ldrb	r2, [r7, #26]
 8025f6c:	f022 020f 	bic.w	r2, r2, #15
 8025f70:	b2d2      	uxtb	r2, r2
 8025f72:	430a      	orrs	r2, r1
 8025f74:	b2d2      	uxtb	r2, r2
 8025f76:	b2d2      	uxtb	r2, r2
 8025f78:	721a      	strb	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8025f7a:	4b87      	ldr	r3, [pc, #540]	; (8026198 <SDOS_SdoInd+0x558>)
 8025f7c:	2260      	movs	r2, #96	; 0x60
 8025f7e:	701a      	strb	r2, [r3, #0]
                                return 0;
 8025f80:	2300      	movs	r3, #0
 8025f82:	e0f1      	b.n	8026168 <SDOS_SdoInd+0x528>
                            }
                        }
                        else
                        {
                            /* Segmented Download */
                            MBXMEMCPY( pSdoSegData, ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 8025f84:	4b7f      	ldr	r3, [pc, #508]	; (8026184 <SDOS_SdoInd+0x544>)
 8025f86:	6819      	ldr	r1, [r3, #0]
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	f103 0210 	add.w	r2, r3, #16
 8025f8e:	8afb      	ldrh	r3, [r7, #22]
 8025f90:	3b0a      	subs	r3, #10
 8025f92:	4608      	mov	r0, r1
 8025f94:	4611      	mov	r1, r2
 8025f96:	461a      	mov	r2, r3
 8025f98:	f004 f9aa 	bl	802a2f0 <memcpy>
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 8025f9c:	4b7e      	ldr	r3, [pc, #504]	; (8026198 <SDOS_SdoInd+0x558>)
 8025f9e:	2200      	movs	r2, #0
 8025fa0:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 8025fa2:	8afb      	ldrh	r3, [r7, #22]
 8025fa4:	3b0a      	subs	r3, #10
 8025fa6:	627b      	str	r3, [r7, #36]	; 0x24
                        }

                        nSdoSegBytesToHandle = dataSize;
 8025fa8:	4a7c      	ldr	r2, [pc, #496]	; (802619c <SDOS_SdoInd+0x55c>)
 8025faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fac:	6013      	str	r3, [r2, #0]
 8025fae:	e0a7      	b.n	8026100 <SDOS_SdoInd+0x4c0>
                    }
                }
                else
                {
                    if ( objLength == 0 )
 8025fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	d108      	bne.n	8025fc8 <SDOS_SdoInd+0x388>
                    {
                        /* the objLength is not known, therefore the variables for a possible segmented transfer
                            should be initialized */
                        nSdoSegIndex             = index;
 8025fb6:	4a7a      	ldr	r2, [pc, #488]	; (80261a0 <SDOS_SdoInd+0x560>)
 8025fb8:	8abb      	ldrh	r3, [r7, #20]
 8025fba:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 8025fbc:	4a79      	ldr	r2, [pc, #484]	; (80261a4 <SDOS_SdoInd+0x564>)
 8025fbe:	7cfb      	ldrb	r3, [r7, #19]
 8025fc0:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 8025fc2:	4a79      	ldr	r2, [pc, #484]	; (80261a8 <SDOS_SdoInd+0x568>)
 8025fc4:	68fb      	ldr	r3, [r7, #12]
 8025fc6:	6013      	str	r3, [r2, #0]
                    }
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025fc8:	7e7b      	ldrb	r3, [r7, #25]
 8025fca:	2b40      	cmp	r3, #64	; 0x40
 8025fcc:	d149      	bne.n	8026062 <SDOS_SdoInd+0x422>
                    {
                        /* Expedited or Normal Upload */
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 8025fce:	8ab9      	ldrh	r1, [r7, #20]
 8025fd0:	7cfa      	ldrb	r2, [r7, #19]
 8025fd2:	69fb      	ldr	r3, [r7, #28]
 8025fd4:	9300      	str	r3, [sp, #0]
 8025fd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025fda:	9301      	str	r3, [sp, #4]
 8025fdc:	4608      	mov	r0, r1
 8025fde:	4611      	mov	r1, r2
 8025fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025fe2:	68fb      	ldr	r3, [r7, #12]
 8025fe4:	f7fe fd8c 	bl	8024b00 <OBJ_Read>
 8025fe8:	4603      	mov	r3, r0
 8025fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 8025fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025ff2:	2bff      	cmp	r3, #255	; 0xff
 8025ff4:	d17f      	bne.n	80260f6 <SDOS_SdoInd+0x4b6>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_READ;
 8025ff6:	4b5e      	ldr	r3, [pc, #376]	; (8026170 <SDOS_SdoInd+0x530>)
 8025ff8:	2203      	movs	r2, #3
 8025ffa:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8025ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8026000:	2b00      	cmp	r3, #0
 8026002:	bf14      	ite	ne
 8026004:	2301      	movne	r3, #1
 8026006:	2300      	moveq	r3, #0
 8026008:	b2da      	uxtb	r2, r3
 802600a:	4b5a      	ldr	r3, [pc, #360]	; (8026174 <SDOS_SdoInd+0x534>)
 802600c:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 802600e:	4a5a      	ldr	r2, [pc, #360]	; (8026178 <SDOS_SdoInd+0x538>)
 8026010:	7cfb      	ldrb	r3, [r7, #19]
 8026012:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8026014:	4a59      	ldr	r2, [pc, #356]	; (802617c <SDOS_SdoInd+0x53c>)
 8026016:	8abb      	ldrh	r3, [r7, #20]
 8026018:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 802601a:	4a59      	ldr	r2, [pc, #356]	; (8026180 <SDOS_SdoInd+0x540>)
 802601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802601e:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8026020:	4a59      	ldr	r2, [pc, #356]	; (8026188 <SDOS_SdoInd+0x548>)
 8026022:	69fb      	ldr	r3, [r7, #28]
 8026024:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 8026026:	68fb      	ldr	r3, [r7, #12]
 8026028:	69db      	ldr	r3, [r3, #28]
 802602a:	4a58      	ldr	r2, [pc, #352]	; (802618c <SDOS_SdoInd+0x54c>)
 802602c:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 802602e:	4b58      	ldr	r3, [pc, #352]	; (8026190 <SDOS_SdoInd+0x550>)
 8026030:	2201      	movs	r2, #1
 8026032:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8026034:	4a57      	ldr	r2, [pc, #348]	; (8026194 <SDOS_SdoInd+0x554>)
 8026036:	687b      	ldr	r3, [r7, #4]
 8026038:	6013      	str	r3, [r2, #0]
                            
                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 802603a:	4b56      	ldr	r3, [pc, #344]	; (8026194 <SDOS_SdoInd+0x554>)
 802603c:	681b      	ldr	r3, [r3, #0]
 802603e:	2200      	movs	r2, #0
 8026040:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8026042:	4b54      	ldr	r3, [pc, #336]	; (8026194 <SDOS_SdoInd+0x554>)
 8026044:	681b      	ldr	r3, [r3, #0]
 8026046:	4a53      	ldr	r2, [pc, #332]	; (8026194 <SDOS_SdoInd+0x554>)
 8026048:	6812      	ldr	r2, [r2, #0]
 802604a:	7a12      	ldrb	r2, [r2, #8]
 802604c:	b2d1      	uxtb	r1, r2
 802604e:	7eba      	ldrb	r2, [r7, #26]
 8026050:	f022 020f 	bic.w	r2, r2, #15
 8026054:	b2d2      	uxtb	r2, r2
 8026056:	430a      	orrs	r2, r1
 8026058:	b2d2      	uxtb	r2, r2
 802605a:	b2d2      	uxtb	r2, r2
 802605c:	721a      	strb	r2, [r3, #8]
                            return 0;
 802605e:	2300      	movs	r3, #0
 8026060:	e082      	b.n	8026168 <SDOS_SdoInd+0x528>
                        }
                    }
                    else
                    {
                        /* Expedited or Normal Download */
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 8026062:	8ab9      	ldrh	r1, [r7, #20]
 8026064:	7cfa      	ldrb	r2, [r7, #19]
 8026066:	69fb      	ldr	r3, [r7, #28]
 8026068:	9300      	str	r3, [sp, #0]
 802606a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802606e:	9301      	str	r3, [sp, #4]
 8026070:	4608      	mov	r0, r1
 8026072:	4611      	mov	r1, r2
 8026074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026076:	68fb      	ldr	r3, [r7, #12]
 8026078:	f7ff f816 	bl	80250a8 <OBJ_Write>
 802607c:	4603      	mov	r3, r0
 802607e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 8026082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026086:	2bff      	cmp	r3, #255	; 0xff
 8026088:	d135      	bne.n	80260f6 <SDOS_SdoInd+0x4b6>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_WRITE;
 802608a:	4b39      	ldr	r3, [pc, #228]	; (8026170 <SDOS_SdoInd+0x530>)
 802608c:	2201      	movs	r2, #1
 802608e:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8026090:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8026094:	2b00      	cmp	r3, #0
 8026096:	bf14      	ite	ne
 8026098:	2301      	movne	r3, #1
 802609a:	2300      	moveq	r3, #0
 802609c:	b2da      	uxtb	r2, r3
 802609e:	4b35      	ldr	r3, [pc, #212]	; (8026174 <SDOS_SdoInd+0x534>)
 80260a0:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 80260a2:	4a35      	ldr	r2, [pc, #212]	; (8026178 <SDOS_SdoInd+0x538>)
 80260a4:	7cfb      	ldrb	r3, [r7, #19]
 80260a6:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 80260a8:	4a34      	ldr	r2, [pc, #208]	; (802617c <SDOS_SdoInd+0x53c>)
 80260aa:	8abb      	ldrh	r3, [r7, #20]
 80260ac:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 80260ae:	4a34      	ldr	r2, [pc, #208]	; (8026180 <SDOS_SdoInd+0x540>)
 80260b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260b2:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 80260b4:	4a34      	ldr	r2, [pc, #208]	; (8026188 <SDOS_SdoInd+0x548>)
 80260b6:	69fb      	ldr	r3, [r7, #28]
 80260b8:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 80260ba:	68fb      	ldr	r3, [r7, #12]
 80260bc:	6a1b      	ldr	r3, [r3, #32]
 80260be:	4a33      	ldr	r2, [pc, #204]	; (802618c <SDOS_SdoInd+0x54c>)
 80260c0:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 80260c2:	4b33      	ldr	r3, [pc, #204]	; (8026190 <SDOS_SdoInd+0x550>)
 80260c4:	2201      	movs	r2, #1
 80260c6:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 80260c8:	4a32      	ldr	r2, [pc, #200]	; (8026194 <SDOS_SdoInd+0x554>)
 80260ca:	687b      	ldr	r3, [r7, #4]
 80260cc:	6013      	str	r3, [r2, #0]

                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 80260ce:	4b31      	ldr	r3, [pc, #196]	; (8026194 <SDOS_SdoInd+0x554>)
 80260d0:	681b      	ldr	r3, [r3, #0]
 80260d2:	2200      	movs	r2, #0
 80260d4:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 80260d6:	4b2f      	ldr	r3, [pc, #188]	; (8026194 <SDOS_SdoInd+0x554>)
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	4a2e      	ldr	r2, [pc, #184]	; (8026194 <SDOS_SdoInd+0x554>)
 80260dc:	6812      	ldr	r2, [r2, #0]
 80260de:	7a12      	ldrb	r2, [r2, #8]
 80260e0:	b2d1      	uxtb	r1, r2
 80260e2:	7eba      	ldrb	r2, [r7, #26]
 80260e4:	f022 020f 	bic.w	r2, r2, #15
 80260e8:	b2d2      	uxtb	r2, r2
 80260ea:	430a      	orrs	r2, r1
 80260ec:	b2d2      	uxtb	r2, r2
 80260ee:	b2d2      	uxtb	r2, r2
 80260f0:	721a      	strb	r2, [r3, #8]
                            return 0;
 80260f2:	2300      	movs	r3, #0
 80260f4:	e038      	b.n	8026168 <SDOS_SdoInd+0x528>
 80260f6:	e003      	b.n	8026100 <SDOS_SdoInd+0x4c0>
            } /* if ( abort == 0 ) */

        } //if(pEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 80260f8:	2308      	movs	r3, #8
 80260fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 80260fe:	e01e      	b.n	802613e <SDOS_SdoInd+0x4fe>
 8026100:	e01d      	b.n	802613e <SDOS_SdoInd+0x4fe>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 8026102:	4b25      	ldr	r3, [pc, #148]	; (8026198 <SDOS_SdoInd+0x558>)
 8026104:	781b      	ldrb	r3, [r3, #0]
 8026106:	7e7a      	ldrb	r2, [r7, #25]
 8026108:	429a      	cmp	r2, r3
 802610a:	d110      	bne.n	802612e <SDOS_SdoInd+0x4ee>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 802610c:	7e7b      	ldrb	r3, [r7, #25]
 802610e:	2b00      	cmp	r3, #0
 8026110:	d106      	bne.n	8026120 <SDOS_SdoInd+0x4e0>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8026112:	6878      	ldr	r0, [r7, #4]
 8026114:	f7ff faea 	bl	80256ec <SdoDownloadSegmentInd>
 8026118:	4603      	mov	r3, r0
 802611a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 802611e:	e00e      	b.n	802613e <SDOS_SdoInd+0x4fe>
        if ( command == nSdoSegService )
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8026120:	6878      	ldr	r0, [r7, #4]
 8026122:	f7ff fc25 	bl	8025970 <SdoUploadSegmentInd>
 8026126:	4603      	mov	r3, r0
 8026128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 802612c:	e007      	b.n	802613e <SDOS_SdoInd+0x4fe>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 802612e:	2303      	movs	r3, #3
 8026130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8026134:	e003      	b.n	802613e <SDOS_SdoInd+0x4fe>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8026136:	2303      	movs	r3, #3
 8026138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 802613c:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 802613e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026142:	2bff      	cmp	r3, #255	; 0xff
 8026144:	d00f      	beq.n	8026166 <SDOS_SdoInd+0x526>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 8026146:	7ebb      	ldrb	r3, [r7, #26]
 8026148:	f003 0310 	and.w	r3, r3, #16
 802614c:	b2da      	uxtb	r2, r3
 802614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026150:	b29c      	uxth	r4, r3
 8026152:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8026156:	7e79      	ldrb	r1, [r7, #25]
 8026158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802615a:	9300      	str	r3, [sp, #0]
 802615c:	687b      	ldr	r3, [r7, #4]
 802615e:	9301      	str	r3, [sp, #4]
 8026160:	4623      	mov	r3, r4
 8026162:	f7ff fcb9 	bl	8025ad8 <SdoRes>
    }

    return 0;
 8026166:	2300      	movs	r3, #0
}
 8026168:	4618      	mov	r0, r3
 802616a:	3734      	adds	r7, #52	; 0x34
 802616c:	46bd      	mov	sp, r7
 802616e:	bd90      	pop	{r4, r7, pc}
 8026170:	1ffead40 	.word	0x1ffead40
 8026174:	1ffead41 	.word	0x1ffead41
 8026178:	1ffead74 	.word	0x1ffead74
 802617c:	1ffead72 	.word	0x1ffead72
 8026180:	1ffead50 	.word	0x1ffead50
 8026184:	1ffead54 	.word	0x1ffead54
 8026188:	1ffead2c 	.word	0x1ffead2c
 802618c:	1ffead3c 	.word	0x1ffead3c
 8026190:	1ffe9523 	.word	0x1ffe9523
 8026194:	1ffead4c 	.word	0x1ffead4c
 8026198:	1ffead43 	.word	0x1ffead43
 802619c:	1ffead30 	.word	0x1ffead30
 80261a0:	1ffead58 	.word	0x1ffead58
 80261a4:	1ffead70 	.word	0x1ffead70
 80261a8:	1ffead6c 	.word	0x1ffead6c

080261ac <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 80261ac:	b5b0      	push	{r4, r5, r7, lr}
 80261ae:	b088      	sub	sp, #32
 80261b0:	af02      	add	r7, sp, #8
 80261b2:	4603      	mov	r3, r0
 80261b4:	60b9      	str	r1, [r7, #8]
 80261b6:	607a      	str	r2, [r7, #4]
 80261b8:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 80261ba:	2300      	movs	r3, #0
 80261bc:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 80261be:	4b3a      	ldr	r3, [pc, #232]	; (80262a8 <SDOS_SdoRes+0xfc>)
 80261c0:	781b      	ldrb	r3, [r3, #0]
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d06c      	beq.n	80262a0 <SDOS_SdoRes+0xf4>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 80261c6:	4b39      	ldr	r3, [pc, #228]	; (80262ac <SDOS_SdoRes+0x100>)
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	7a1b      	ldrb	r3, [r3, #8]
 80261cc:	f023 031f 	bic.w	r3, r3, #31
 80261d0:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 80261d2:	4b36      	ldr	r3, [pc, #216]	; (80262ac <SDOS_SdoRes+0x100>)
 80261d4:	681b      	ldr	r3, [r3, #0]
 80261d6:	7a1b      	ldrb	r3, [r3, #8]
 80261d8:	f003 0310 	and.w	r3, r3, #16
 80261dc:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80261de:	7d7b      	ldrb	r3, [r7, #21]
 80261e0:	2b40      	cmp	r3, #64	; 0x40
 80261e2:	d14d      	bne.n	8026280 <SDOS_SdoRes+0xd4>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 80261e4:	4b32      	ldr	r3, [pc, #200]	; (80262b0 <SDOS_SdoRes+0x104>)
 80261e6:	881b      	ldrh	r3, [r3, #0]
 80261e8:	3b10      	subs	r3, #16
 80261ea:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 80261ec:	8afa      	ldrh	r2, [r7, #22]
 80261ee:	68bb      	ldr	r3, [r7, #8]
 80261f0:	429a      	cmp	r2, r3
 80261f2:	d21f      	bcs.n	8026234 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 80261f4:	4b2f      	ldr	r3, [pc, #188]	; (80262b4 <SDOS_SdoRes+0x108>)
 80261f6:	2201      	movs	r2, #1
 80261f8:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 80261fa:	4b2f      	ldr	r3, [pc, #188]	; (80262b8 <SDOS_SdoRes+0x10c>)
 80261fc:	2201      	movs	r2, #1
 80261fe:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 8026200:	4a2e      	ldr	r2, [pc, #184]	; (80262bc <SDOS_SdoRes+0x110>)
 8026202:	7d3b      	ldrb	r3, [r7, #20]
 8026204:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 8026206:	4a2e      	ldr	r2, [pc, #184]	; (80262c0 <SDOS_SdoRes+0x114>)
 8026208:	68bb      	ldr	r3, [r7, #8]
 802620a:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 802620c:	4b2d      	ldr	r3, [pc, #180]	; (80262c4 <SDOS_SdoRes+0x118>)
 802620e:	2260      	movs	r2, #96	; 0x60
 8026210:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 8026212:	4a2d      	ldr	r2, [pc, #180]	; (80262c8 <SDOS_SdoRes+0x11c>)
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
                MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8026218:	4b24      	ldr	r3, [pc, #144]	; (80262ac <SDOS_SdoRes+0x100>)
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	f103 0210 	add.w	r2, r3, #16
 8026220:	8afb      	ldrh	r3, [r7, #22]
 8026222:	4610      	mov	r0, r2
 8026224:	6879      	ldr	r1, [r7, #4]
 8026226:	461a      	mov	r2, r3
 8026228:	f004 f862 	bl	802a2f0 <memcpy>
                nSdoSegBytesToHandle = dataSize;
 802622c:	8afb      	ldrh	r3, [r7, #22]
 802622e:	4a27      	ldr	r2, [pc, #156]	; (80262cc <SDOS_SdoRes+0x120>)
 8026230:	6013      	str	r3, [r2, #0]
 8026232:	e025      	b.n	8026280 <SDOS_SdoRes+0xd4>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 8026234:	68bb      	ldr	r3, [r7, #8]
 8026236:	2b04      	cmp	r3, #4
 8026238:	d813      	bhi.n	8026262 <SDOS_SdoRes+0xb6>
 802623a:	68bb      	ldr	r3, [r7, #8]
 802623c:	2b00      	cmp	r3, #0
 802623e:	d010      	beq.n	8026262 <SDOS_SdoRes+0xb6>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8026240:	4b1a      	ldr	r3, [pc, #104]	; (80262ac <SDOS_SdoRes+0x100>)
 8026242:	681b      	ldr	r3, [r3, #0]
 8026244:	f103 020c 	add.w	r2, r3, #12
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	429a      	cmp	r2, r3
 802624c:	d008      	beq.n	8026260 <SDOS_SdoRes+0xb4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 802624e:	4b17      	ldr	r3, [pc, #92]	; (80262ac <SDOS_SdoRes+0x100>)
 8026250:	681b      	ldr	r3, [r3, #0]
 8026252:	330c      	adds	r3, #12
 8026254:	4618      	mov	r0, r3
 8026256:	6879      	ldr	r1, [r7, #4]
 8026258:	68ba      	ldr	r2, [r7, #8]
 802625a:	f004 f849 	bl	802a2f0 <memcpy>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 802625e:	e00f      	b.n	8026280 <SDOS_SdoRes+0xd4>
 8026260:	e00e      	b.n	8026280 <SDOS_SdoRes+0xd4>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 8026262:	4b12      	ldr	r3, [pc, #72]	; (80262ac <SDOS_SdoRes+0x100>)
 8026264:	681b      	ldr	r3, [r3, #0]
 8026266:	f103 0210 	add.w	r2, r3, #16
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	429a      	cmp	r2, r3
 802626e:	d007      	beq.n	8026280 <SDOS_SdoRes+0xd4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8026270:	4b0e      	ldr	r3, [pc, #56]	; (80262ac <SDOS_SdoRes+0x100>)
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	3310      	adds	r3, #16
 8026276:	4618      	mov	r0, r3
 8026278:	6879      	ldr	r1, [r7, #4]
 802627a:	68ba      	ldr	r2, [r7, #8]
 802627c:	f004 f838 	bl	802a2f0 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 8026280:	4b09      	ldr	r3, [pc, #36]	; (80262a8 <SDOS_SdoRes+0xfc>)
 8026282:	2200      	movs	r2, #0
 8026284:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 8026286:	4b09      	ldr	r3, [pc, #36]	; (80262ac <SDOS_SdoRes+0x100>)
 8026288:	681b      	ldr	r3, [r3, #0]
 802628a:	7bf8      	ldrb	r0, [r7, #15]
 802628c:	7d79      	ldrb	r1, [r7, #21]
 802628e:	7d3d      	ldrb	r5, [r7, #20]
 8026290:	8afc      	ldrh	r4, [r7, #22]
 8026292:	68ba      	ldr	r2, [r7, #8]
 8026294:	9200      	str	r2, [sp, #0]
 8026296:	9301      	str	r3, [sp, #4]
 8026298:	462a      	mov	r2, r5
 802629a:	4623      	mov	r3, r4
 802629c:	f7ff fc1c 	bl	8025ad8 <SdoRes>
    }
}
 80262a0:	3718      	adds	r7, #24
 80262a2:	46bd      	mov	sp, r7
 80262a4:	bdb0      	pop	{r4, r5, r7, pc}
 80262a6:	bf00      	nop
 80262a8:	1ffe9523 	.word	0x1ffe9523
 80262ac:	1ffead4c 	.word	0x1ffead4c
 80262b0:	1ffeac7c 	.word	0x1ffeac7c
 80262b4:	1ffead35 	.word	0x1ffead35
 80262b8:	1ffead42 	.word	0x1ffead42
 80262bc:	1ffead34 	.word	0x1ffead34
 80262c0:	1ffead38 	.word	0x1ffead38
 80262c4:	1ffead43 	.word	0x1ffead43
 80262c8:	1ffead54 	.word	0x1ffead54
 80262cc:	1ffead30 	.word	0x1ffead30

080262d0 <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 80262d0:	b590      	push	{r4, r7, lr}
 80262d2:	b08f      	sub	sp, #60	; 0x3c
 80262d4:	af02      	add	r7, sp, #8
 80262d6:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80262d8:	2300      	movs	r3, #0
 80262da:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	891b      	ldrh	r3, [r3, #8]
 80262e0:	b2db      	uxtb	r3, r3
 80262e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80262e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 80262ea:	2302      	movs	r3, #2
 80262ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 80262f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80262f4:	2b05      	cmp	r3, #5
 80262f6:	d105      	bne.n	8026304 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	881b      	ldrh	r3, [r3, #0]
 80262fc:	2b09      	cmp	r3, #9
 80262fe:	d807      	bhi.n	8026310 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 8026300:	2306      	movs	r3, #6
 8026302:	e1d9      	b.n	80266b8 <SDOS_SdoInfoInd+0x3e8>
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 8026304:	687b      	ldr	r3, [r7, #4]
 8026306:	881b      	ldrh	r3, [r3, #0]
 8026308:	2b07      	cmp	r3, #7
 802630a:	d801      	bhi.n	8026310 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 802630c:	2306      	movs	r3, #6
 802630e:	e1d3      	b.n	80266b8 <SDOS_SdoInfoInd+0x3e8>
    }

    switch ( opCode )
 8026310:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026314:	2b03      	cmp	r3, #3
 8026316:	f000 80ca 	beq.w	80264ae <SDOS_SdoInfoInd+0x1de>
 802631a:	2b05      	cmp	r3, #5
 802631c:	f000 80c7 	beq.w	80264ae <SDOS_SdoInfoInd+0x1de>
 8026320:	2b01      	cmp	r3, #1
 8026322:	f040 8199 	bne.w	8026658 <SDOS_SdoInfoInd+0x388>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if ( SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX )
 8026326:	687b      	ldr	r3, [r7, #4]
 8026328:	899b      	ldrh	r3, [r3, #12]
 802632a:	2b05      	cmp	r3, #5
 802632c:	f200 80be 	bhi.w	80264ac <SDOS_SdoInfoInd+0x1dc>
        {
            UINT16 size = 0;
 8026330:	2300      	movs	r3, #0
 8026332:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8) SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	899b      	ldrh	r3, [r3, #12]
 8026338:	f887 3020 	strb.w	r3, [r7, #32]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 802633c:	48a8      	ldr	r0, [pc, #672]	; (80265e0 <SDOS_SdoInfoInd+0x310>)
 802633e:	6879      	ldr	r1, [r7, #4]
 8026340:	220e      	movs	r2, #14
 8026342:	f003 ffd5 	bl	802a2f0 <memcpy>
            if ( listType-- == 0 )
 8026346:	f897 3020 	ldrb.w	r3, [r7, #32]
 802634a:	1e5a      	subs	r2, r3, #1
 802634c:	f887 2020 	strb.w	r2, [r7, #32]
 8026350:	2b00      	cmp	r3, #0
 8026352:	d122      	bne.n	802639a <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 8026354:	4ba3      	ldr	r3, [pc, #652]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 8026356:	2200      	movs	r2, #0
 8026358:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 802635a:	2300      	movs	r3, #0
 802635c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8026360:	e014      	b.n	802638c <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 8026362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026366:	4618      	mov	r0, r3
 8026368:	f7fe f8b0 	bl	80244cc <OBJ_GetNoOfObjects>
 802636c:	4603      	mov	r3, r0
 802636e:	83fb      	strh	r3, [r7, #30]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
 8026370:	687b      	ldr	r3, [r7, #4]
 8026372:	1d9a      	adds	r2, r3, #6
 8026374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026378:	3304      	adds	r3, #4
 802637a:	005b      	lsls	r3, r3, #1
 802637c:	4413      	add	r3, r2
 802637e:	8bfa      	ldrh	r2, [r7, #30]
 8026380:	801a      	strh	r2, [r3, #0]
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8026382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026386:	3301      	adds	r3, #1
 8026388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802638c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026390:	2b04      	cmp	r3, #4
 8026392:	d9e6      	bls.n	8026362 <SDOS_SdoInfoInd+0x92>
                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8026394:	2312      	movs	r3, #18
 8026396:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8026398:	e05a      	b.n	8026450 <SDOS_SdoInfoInd+0x180>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 802639a:	2300      	movs	r3, #0
 802639c:	83bb      	strh	r3, [r7, #28]

                if ( nSdoInfoFragmentsLeft )
 802639e:	4b91      	ldr	r3, [pc, #580]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 80263a0:	881b      	ldrh	r3, [r3, #0]
 80263a2:	2b00      	cmp	r3, #0
 80263a4:	d011      	beq.n	80263ca <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 80263a6:	4b90      	ldr	r3, [pc, #576]	; (80265e8 <SDOS_SdoInfoInd+0x318>)
 80263a8:	881b      	ldrh	r3, [r3, #0]
 80263aa:	3b0c      	subs	r3, #12
 80263ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO>>1];
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	3306      	adds	r3, #6
 80263b2:	3306      	adds	r3, #6
 80263b4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 80263b6:	4b8d      	ldr	r3, [pc, #564]	; (80265ec <SDOS_SdoInfoInd+0x31c>)
 80263b8:	881b      	ldrh	r3, [r3, #0]
 80263ba:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 80263bc:	4b89      	ldr	r3, [pc, #548]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 80263be:	881b      	ldrh	r3, [r3, #0]
 80263c0:	3b01      	subs	r3, #1
 80263c2:	b29a      	uxth	r2, r3
 80263c4:	4b87      	ldr	r3, [pc, #540]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 80263c6:	801a      	strh	r2, [r3, #0]
 80263c8:	e02a      	b.n	8026420 <SDOS_SdoInfoInd+0x150>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 80263ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80263ce:	4618      	mov	r0, r3
 80263d0:	f7fe f87c 	bl	80244cc <OBJ_GetNoOfObjects>
 80263d4:	4603      	mov	r3, r0
 80263d6:	83bb      	strh	r3, [r7, #28]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 80263d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80263dc:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 80263de:	4b82      	ldr	r3, [pc, #520]	; (80265e8 <SDOS_SdoInfoInd+0x318>)
 80263e0:	881b      	ldrh	r3, [r3, #0]
 80263e2:	3b0e      	subs	r3, #14
 80263e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT>>1];
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	3306      	adds	r3, #6
 80263ea:	3308      	adds	r3, #8
 80263ec:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if( (n<<1) > size)
 80263ee:	8bbb      	ldrh	r3, [r7, #28]
 80263f0:	005a      	lsls	r2, r3, #1
 80263f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80263f4:	429a      	cmp	r2, r3
 80263f6:	dd10      	ble.n	802641a <SDOS_SdoInfoInd+0x14a>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments 
                        */
                        UINT16 Fragsize = size + 2;
 80263f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80263fa:	3302      	adds	r3, #2
 80263fc:	837b      	strh	r3, [r7, #26]
                        nSdoInfoFragmentsLeft = (((n<<1)-size + (Fragsize-1)) /Fragsize);
 80263fe:	8bbb      	ldrh	r3, [r7, #28]
 8026400:	005a      	lsls	r2, r3, #1
 8026402:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026404:	1ad2      	subs	r2, r2, r3
 8026406:	8b7b      	ldrh	r3, [r7, #26]
 8026408:	3b01      	subs	r3, #1
 802640a:	441a      	add	r2, r3
 802640c:	8b7b      	ldrh	r3, [r7, #26]
 802640e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026412:	b29a      	uxth	r2, r3
 8026414:	4b73      	ldr	r3, [pc, #460]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 8026416:	801a      	strh	r2, [r3, #0]
 8026418:	e002      	b.n	8026420 <SDOS_SdoInfoInd+0x150>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 802641a:	4b72      	ldr	r3, [pc, #456]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 802641c:	2200      	movs	r2, #0
 802641e:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData,&abort);
 8026420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026424:	b298      	uxth	r0, r3
 8026426:	f107 010c 	add.w	r1, r7, #12
 802642a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 802642c:	f107 030f 	add.w	r3, r7, #15
 8026430:	9300      	str	r3, [sp, #0]
 8026432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026434:	f7fe f896 	bl	8024564 <OBJ_GetObjectList>
 8026438:	4603      	mov	r3, r0
 802643a:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 802643c:	89ba      	ldrh	r2, [r7, #12]
 802643e:	4b6b      	ldr	r3, [pc, #428]	; (80265ec <SDOS_SdoInfoInd+0x31c>)
 8026440:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8026442:	4b69      	ldr	r3, [pc, #420]	; (80265e8 <SDOS_SdoInfoInd+0x318>)
 8026444:	881a      	ldrh	r2, [r3, #0]
 8026446:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026448:	1ad3      	subs	r3, r2, r3
 802644a:	b29b      	uxth	r3, r3
 802644c:	3b06      	subs	r3, #6
 802644e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length    = size;
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8026454:	801a      	strh	r2, [r3, #0]

            if(abort == 0)
 8026456:	7bfb      	ldrb	r3, [r7, #15]
 8026458:	2b00      	cmp	r3, #0
 802645a:	d127      	bne.n	80264ac <SDOS_SdoInfoInd+0x1dc>
            {
             pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	891b      	ldrh	r3, [r3, #8]
 8026460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026464:	b29a      	uxth	r2, r3
 8026466:	687b      	ldr	r3, [r7, #4]
 8026468:	811a      	strh	r2, [r3, #8]
             pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	891b      	ldrh	r3, [r3, #8]
 802646e:	f043 0302 	orr.w	r3, r3, #2
 8026472:	b29a      	uxth	r2, r3
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft             = SWAPWORD(nSdoInfoFragmentsLeft);
 8026478:	4b5a      	ldr	r3, [pc, #360]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 802647a:	881a      	ldrh	r2, [r3, #0]
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 8026480:	4b58      	ldr	r3, [pc, #352]	; (80265e4 <SDOS_SdoInfoInd+0x314>)
 8026482:	881b      	ldrh	r3, [r3, #0]
 8026484:	2b00      	cmp	r3, #0
 8026486:	d011      	beq.n	80264ac <SDOS_SdoInfoInd+0x1dc>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~ INFOHEADER_INCOMPLETE_MASK;
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	891b      	ldrh	r3, [r3, #8]
 802648c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026490:	b29a      	uxth	r2, r3
 8026492:	687b      	ldr	r3, [r7, #4]
 8026494:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	891b      	ldrh	r3, [r3, #8]
 802649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802649e:	b29a      	uxth	r2, r3
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 80264a4:	2382      	movs	r3, #130	; 0x82
 80264a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 80264aa:	e0d7      	b.n	802665c <SDOS_SdoInfoInd+0x38c>
 80264ac:	e0d6      	b.n	802665c <SDOS_SdoInfoInd+0x38c>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	899b      	ldrh	r3, [r3, #12]
 80264b2:	81bb      	strh	r3, [r7, #12]
        if(index < 0x1000)
 80264b4:	89bb      	ldrh	r3, [r7, #12]
 80264b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80264ba:	d202      	bcs.n	80264c2 <SDOS_SdoInfoInd+0x1f2>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80264bc:	2305      	movs	r3, #5
 80264be:	73fb      	strb	r3, [r7, #15]
 80264c0:	e0c9      	b.n	8026656 <SDOS_SdoInfoInd+0x386>
        }
        else
        {
            /* get the object handle of the requested index */
            pObjEntry = OBJ_GetObjectHandle( index );
 80264c2:	89bb      	ldrh	r3, [r7, #12]
 80264c4:	4618      	mov	r0, r3
 80264c6:	f7fd ff15 	bl	80242f4 <OBJ_GetObjectHandle>
 80264ca:	6178      	str	r0, [r7, #20]

            if ( pObjEntry )
 80264cc:	697b      	ldr	r3, [r7, #20]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	f000 80be 	beq.w	8026650 <SDOS_SdoInfoInd+0x380>
            {
                /* object exists */
                UINT16 size = 0;
 80264d4:	2300      	movs	r3, #0
 80264d6:	847b      	strh	r3, [r7, #34]	; 0x22
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 80264d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80264dc:	2b03      	cmp	r3, #3
 80264de:	d12b      	bne.n	8026538 <SDOS_SdoInfoInd+0x268>
                {
                    /* object description is requested */
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	f103 040e 	add.w	r4, r3, #14
 80264e6:	6978      	ldr	r0, [r7, #20]
 80264e8:	f7fe f976 	bl	80247d8 <OBJ_GetObjDesc>
 80264ec:	4603      	mov	r3, r0
 80264ee:	4620      	mov	r0, r4
 80264f0:	4619      	mov	r1, r3
 80264f2:	2204      	movs	r2, #4
 80264f4:	f003 fefc 	bl	802a2f0 <memcpy>

                    /* the mailbox should be big enough that the maximum object description
                    fits in the mailbox (the fragmentation is not done in the sample code),
                    so it will be checked only if the object description fits */
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 80264f8:	89bb      	ldrh	r3, [r7, #12]
 80264fa:	4618      	mov	r0, r3
 80264fc:	2100      	movs	r1, #0
 80264fe:	697a      	ldr	r2, [r7, #20]
 8026500:	2300      	movs	r3, #0
 8026502:	f7fe f8ab 	bl	802465c <OBJ_GetDesc>
 8026506:	4603      	mov	r3, r0
 8026508:	330c      	adds	r3, #12
 802650a:	847b      	strh	r3, [r7, #34]	; 0x22

                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 802650c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802650e:	4b36      	ldr	r3, [pc, #216]	; (80265e8 <SDOS_SdoInfoInd+0x318>)
 8026510:	881b      	ldrh	r3, [r3, #0]
 8026512:	3b06      	subs	r3, #6
 8026514:	429a      	cmp	r2, r3
 8026516:	d902      	bls.n	802651e <SDOS_SdoInfoInd+0x24e>
                    {
                        /* size of the object description does not fit in the mailbox,
                        the object description will be sent without the name */
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 8026518:	230c      	movs	r3, #12
 802651a:	847b      	strh	r3, [r7, #34]	; 0x22
 802651c:	e07b      	b.n	8026616 <SDOS_SdoInfoInd+0x346>
                    }
                    else
                    {
                        /* object description fits in the mailbox, get the name of the object */
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 802651e:	89ba      	ldrh	r2, [r7, #12]
 8026520:	687b      	ldr	r3, [r7, #4]
 8026522:	330e      	adds	r3, #14
 8026524:	3304      	adds	r3, #4
 8026526:	4610      	mov	r0, r2
 8026528:	2100      	movs	r1, #0
 802652a:	697a      	ldr	r2, [r7, #20]
 802652c:	f7fe f896 	bl	802465c <OBJ_GetDesc>
 8026530:	4603      	mov	r3, r0
 8026532:	330c      	adds	r3, #12
 8026534:	847b      	strh	r3, [r7, #34]	; 0x22
 8026536:	e06e      	b.n	8026616 <SDOS_SdoInfoInd+0x346>
                }
                else
                {
                    /* entry description is requested,
                    get the requested subindex */
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 8026538:	687b      	ldr	r3, [r7, #4]
 802653a:	89db      	ldrh	r3, [r3, #14]
 802653c:	74fb      	strb	r3, [r7, #19]

                    /* get the maximum subindex */
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 802653e:	6978      	ldr	r0, [r7, #20]
 8026540:	f7fe f94a 	bl	80247d8 <OBJ_GetObjDesc>
 8026544:	4603      	mov	r3, r0
 8026546:	885b      	ldrh	r3, [r3, #2]
 8026548:	74bb      	strb	r3, [r7, #18]

                    if ( subindex <= maxSubindex )
 802654a:	7cfa      	ldrb	r2, [r7, #19]
 802654c:	7cbb      	ldrb	r3, [r7, #18]
 802654e:	429a      	cmp	r2, r3
 8026550:	d85f      	bhi.n	8026612 <SDOS_SdoInfoInd+0x342>
                    {
                        UINT16 ObjectFlags;
                        /* requested subindex is not too great */
                        /* get the entry description of the requested entry */
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8026552:	687b      	ldr	r3, [r7, #4]
 8026554:	f103 0410 	add.w	r4, r3, #16
 8026558:	7cfb      	ldrb	r3, [r7, #19]
 802655a:	6978      	ldr	r0, [r7, #20]
 802655c:	4619      	mov	r1, r3
 802655e:	f7fe f90f 	bl	8024780 <OBJ_GetEntryDesc>
 8026562:	4603      	mov	r3, r0
 8026564:	4620      	mov	r0, r4
 8026566:	4619      	mov	r1, r3
 8026568:	2206      	movs	r2, #6
 802656a:	f003 fec1 	bl	802a2f0 <memcpy>

                        /* the transmission of the value info is not supported yet of the sample code */
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 802656e:	687b      	ldr	r3, [r7, #4]
 8026570:	89db      	ldrh	r3, [r3, #14]
 8026572:	b2db      	uxtb	r3, r3
 8026574:	b29a      	uxth	r2, r3
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 802657a:	6978      	ldr	r0, [r7, #20]
 802657c:	f7fe f92c 	bl	80247d8 <OBJ_GetObjDesc>
 8026580:	4603      	mov	r3, r0
 8026582:	885b      	ldrh	r3, [r3, #2]
 8026584:	823b      	strh	r3, [r7, #16]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8026586:	8a3b      	ldrh	r3, [r7, #16]
 8026588:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 802658c:	121b      	asrs	r3, r3, #8
 802658e:	823b      	strh	r3, [r7, #16]

                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 8026590:	8a3b      	ldrh	r3, [r7, #16]
 8026592:	2b08      	cmp	r3, #8
 8026594:	d002      	beq.n	802659c <SDOS_SdoInfoInd+0x2cc>
 8026596:	8a3b      	ldrh	r3, [r7, #16]
 8026598:	2b09      	cmp	r3, #9
 802659a:	d10d      	bne.n	80265b8 <SDOS_SdoInfoInd+0x2e8>
 802659c:	7cfb      	ldrb	r3, [r7, #19]
 802659e:	2b00      	cmp	r3, #0
 80265a0:	d10a      	bne.n	80265b8 <SDOS_SdoInfoInd+0x2e8>
                        {
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	3310      	adds	r3, #16
 80265a6:	3306      	adds	r3, #6
 80265a8:	4618      	mov	r0, r3
 80265aa:	4911      	ldr	r1, [pc, #68]	; (80265f0 <SDOS_SdoInfoInd+0x320>)
 80265ac:	220d      	movs	r2, #13
 80265ae:	f003 fe9f 	bl	802a2f0 <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 80265b2:	231c      	movs	r3, #28
 80265b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80265b6:	e02b      	b.n	8026610 <SDOS_SdoInfoInd+0x340>
                        else
                        {
                            /* the mailbox should be big enough that the maximum entry description
                            fits in the mailbox (the fragmentation is not done in the sample code),
                            so it will be checked only if the entry description fits */
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80265b8:	89ba      	ldrh	r2, [r7, #12]
 80265ba:	7cfb      	ldrb	r3, [r7, #19]
 80265bc:	4610      	mov	r0, r2
 80265be:	4619      	mov	r1, r3
 80265c0:	697a      	ldr	r2, [r7, #20]
 80265c2:	2300      	movs	r3, #0
 80265c4:	f7fe f84a 	bl	802465c <OBJ_GetDesc>
 80265c8:	4603      	mov	r3, r0
 80265ca:	3310      	adds	r3, #16
 80265cc:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 80265ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80265d0:	4b05      	ldr	r3, [pc, #20]	; (80265e8 <SDOS_SdoInfoInd+0x318>)
 80265d2:	881b      	ldrh	r3, [r3, #0]
 80265d4:	3b06      	subs	r3, #6
 80265d6:	429a      	cmp	r2, r3
 80265d8:	d90c      	bls.n	80265f4 <SDOS_SdoInfoInd+0x324>
                            {
                                /* size of the object description does not fit in the mailbox,
                                the object description will be sent without the name */
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80265da:	2310      	movs	r3, #16
 80265dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80265de:	e017      	b.n	8026610 <SDOS_SdoInfoInd+0x340>
 80265e0:	1ffead5c 	.word	0x1ffead5c
 80265e4:	1ffead48 	.word	0x1ffead48
 80265e8:	1ffeac7c 	.word	0x1ffeac7c
 80265ec:	1ffead28 	.word	0x1ffead28
 80265f0:	1ffe9398 	.word	0x1ffe9398
                            }
                            else
                            {
                                /* object description fits in the mailbox, get the name of the entry */
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80265f4:	89b9      	ldrh	r1, [r7, #12]
 80265f6:	687b      	ldr	r3, [r7, #4]
 80265f8:	3310      	adds	r3, #16
 80265fa:	3306      	adds	r3, #6
 80265fc:	7cfa      	ldrb	r2, [r7, #19]
 80265fe:	4608      	mov	r0, r1
 8026600:	4611      	mov	r1, r2
 8026602:	697a      	ldr	r2, [r7, #20]
 8026604:	f7fe f82a 	bl	802465c <OBJ_GetDesc>
 8026608:	4603      	mov	r3, r0
 802660a:	3310      	adds	r3, #16
 802660c:	847b      	strh	r3, [r7, #34]	; 0x22
 802660e:	e002      	b.n	8026616 <SDOS_SdoInfoInd+0x346>
 8026610:	e001      	b.n	8026616 <SDOS_SdoInfoInd+0x346>
                            }
                        }
                    }
                    else
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8026612:	2311      	movs	r3, #17
 8026614:	73fb      	strb	r3, [r7, #15]
                }

                if ( abort == 0 )
 8026616:	7bfb      	ldrb	r3, [r7, #15]
 8026618:	2b00      	cmp	r3, #0
 802661a:	d118      	bne.n	802664e <SDOS_SdoInfoInd+0x37e>
                {
                    {
                        /* for the object and entry description the sample code does not support the fragmentation,
                        the mailbox has to be big enough */
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 802661c:	687b      	ldr	r3, [r7, #4]
 802661e:	2200      	movs	r2, #0
 8026620:	815a      	strh	r2, [r3, #10]
                        /* store the size of the mailbox data in the mailbox buffer */
                        pSdoInfoInd->MbxHeader.Length = size;
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8026626:	801a      	strh	r2, [r3, #0]
                        /* set the opCode of the SDO Information response */
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026628:	687b      	ldr	r3, [r7, #4]
 802662a:	891b      	ldrh	r3, [r3, #8]
 802662c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026630:	b29a      	uxth	r2, r3
 8026632:	687b      	ldr	r3, [r7, #4]
 8026634:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 8026636:	687b      	ldr	r3, [r7, #4]
 8026638:	891a      	ldrh	r2, [r3, #8]
 802663a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802663e:	b29b      	uxth	r3, r3
 8026640:	3301      	adds	r3, #1
 8026642:	b29b      	uxth	r3, r3
 8026644:	4313      	orrs	r3, r2
 8026646:	b29a      	uxth	r2, r3
 8026648:	687b      	ldr	r3, [r7, #4]
 802664a:	811a      	strh	r2, [r3, #8]
 802664c:	e003      	b.n	8026656 <SDOS_SdoInfoInd+0x386>
 802664e:	e002      	b.n	8026656 <SDOS_SdoInfoInd+0x386>
                    }
                }
            }
            else
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8026650:	2308      	movs	r3, #8
 8026652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8026654:	e002      	b.n	802665c <SDOS_SdoInfoInd+0x38c>
 8026656:	e001      	b.n	802665c <SDOS_SdoInfoInd+0x38c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8026658:	2303      	movs	r3, #3
 802665a:	73fb      	strb	r3, [r7, #15]
    }

    if ( abort )
 802665c:	7bfb      	ldrb	r3, [r7, #15]
 802665e:	2b00      	cmp	r3, #0
 8026660:	d01d      	beq.n	802669e <SDOS_SdoInfoInd+0x3ce>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8026662:	687b      	ldr	r3, [r7, #4]
 8026664:	220a      	movs	r2, #10
 8026666:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	891b      	ldrh	r3, [r3, #8]
 802666c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026670:	b29a      	uxth	r2, r3
 8026672:	687b      	ldr	r3, [r7, #4]
 8026674:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	891b      	ldrh	r3, [r3, #8]
 802667a:	f043 0307 	orr.w	r3, r3, #7
 802667e:	b29a      	uxth	r2, r3
 8026680:	687b      	ldr	r3, [r7, #4]
 8026682:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8026684:	687b      	ldr	r3, [r7, #4]
 8026686:	2200      	movs	r2, #0
 8026688:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 802668a:	7bfb      	ldrb	r3, [r7, #15]
 802668c:	461a      	mov	r2, r3
 802668e:	4b0c      	ldr	r3, [pc, #48]	; (80266c0 <SDOS_SdoInfoInd+0x3f0>)
 8026690:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026694:	687b      	ldr	r3, [r7, #4]
 8026696:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 8026698:	4b0a      	ldr	r3, [pc, #40]	; (80266c4 <SDOS_SdoInfoInd+0x3f4>)
 802669a:	2200      	movs	r2, #0
 802669c:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 802669e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80266a2:	6878      	ldr	r0, [r7, #4]
 80266a4:	4619      	mov	r1, r3
 80266a6:	f7fd fc6b 	bl	8023f80 <MBX_MailboxSendReq>
 80266aa:	4603      	mov	r3, r0
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d002      	beq.n	80266b6 <SDOS_SdoInfoInd+0x3e6>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 80266b0:	4a05      	ldr	r2, [pc, #20]	; (80266c8 <SDOS_SdoInfoInd+0x3f8>)
 80266b2:	687b      	ldr	r3, [r7, #4]
 80266b4:	6013      	str	r3, [r2, #0]
    }

    return 0;
 80266b6:	2300      	movs	r3, #0
}
 80266b8:	4618      	mov	r0, r3
 80266ba:	3734      	adds	r7, #52	; 0x34
 80266bc:	46bd      	mov	sp, r7
 80266be:	bd90      	pop	{r4, r7, pc}
 80266c0:	0802ad08 	.word	0x0802ad08
 80266c4:	1ffead48 	.word	0x1ffead48
 80266c8:	1ffea808 	.word	0x1ffea808

080266cc <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80266cc:	b580      	push	{r7, lr}
 80266ce:	b082      	sub	sp, #8
 80266d0:	af00      	add	r7, sp, #0
 80266d2:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80266d4:	687b      	ldr	r3, [r7, #4]
 80266d6:	4a07      	ldr	r2, [pc, #28]	; (80266f4 <XMC_ERU_Enable+0x28>)
 80266d8:	4293      	cmp	r3, r2
 80266da:	d107      	bne.n	80266ec <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80266dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80266e0:	f000 fc10 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80266e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80266e8:	f000 fa84 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80266ec:	3708      	adds	r7, #8
 80266ee:	46bd      	mov	sp, r7
 80266f0:	bd80      	pop	{r7, pc}
 80266f2:	bf00      	nop
 80266f4:	40044000 	.word	0x40044000

080266f8 <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 80266f8:	b480      	push	{r7}
 80266fa:	b083      	sub	sp, #12
 80266fc:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80266fe:	4b05      	ldr	r3, [pc, #20]	; (8026714 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8026700:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 8026702:	687b      	ldr	r3, [r7, #4]
 8026704:	2250      	movs	r2, #80	; 0x50
 8026706:	601a      	str	r2, [r3, #0]
}
 8026708:	370c      	adds	r7, #12
 802670a:	46bd      	mov	sp, r7
 802670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026710:	4770      	bx	lr
 8026712:	bf00      	nop
 8026714:	0c005554 	.word	0x0c005554

08026718 <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 8026718:	b480      	push	{r7}
 802671a:	b085      	sub	sp, #20
 802671c:	af00      	add	r7, sp, #0
 802671e:	6078      	str	r0, [r7, #4]
 8026720:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8026722:	4b07      	ldr	r3, [pc, #28]	; (8026740 <XMC_FLASH_lLoadPageCommand+0x28>)
 8026724:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 8026726:	68fb      	ldr	r3, [r7, #12]
 8026728:	687a      	ldr	r2, [r7, #4]
 802672a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 802672c:	4b05      	ldr	r3, [pc, #20]	; (8026744 <XMC_FLASH_lLoadPageCommand+0x2c>)
 802672e:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8026730:	68fb      	ldr	r3, [r7, #12]
 8026732:	683a      	ldr	r2, [r7, #0]
 8026734:	601a      	str	r2, [r3, #0]
}
 8026736:	3714      	adds	r7, #20
 8026738:	46bd      	mov	sp, r7
 802673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802673e:	4770      	bx	lr
 8026740:	0c0055f0 	.word	0x0c0055f0
 8026744:	0c0055f4 	.word	0x0c0055f4

08026748 <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 8026748:	b480      	push	{r7}
 802674a:	b085      	sub	sp, #20
 802674c:	af00      	add	r7, sp, #0
 802674e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026750:	4b0c      	ldr	r3, [pc, #48]	; (8026784 <XMC_FLASH_lWritePageCommand+0x3c>)
 8026752:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026754:	68fb      	ldr	r3, [r7, #12]
 8026756:	22aa      	movs	r2, #170	; 0xaa
 8026758:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 802675a:	4b0b      	ldr	r3, [pc, #44]	; (8026788 <XMC_FLASH_lWritePageCommand+0x40>)
 802675c:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 802675e:	68fb      	ldr	r3, [r7, #12]
 8026760:	2255      	movs	r2, #85	; 0x55
 8026762:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026764:	4b07      	ldr	r3, [pc, #28]	; (8026784 <XMC_FLASH_lWritePageCommand+0x3c>)
 8026766:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 8026768:	68fb      	ldr	r3, [r7, #12]
 802676a:	22a0      	movs	r2, #160	; 0xa0
 802676c:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026772:	68fb      	ldr	r3, [r7, #12]
 8026774:	22aa      	movs	r2, #170	; 0xaa
 8026776:	601a      	str	r2, [r3, #0]
}
 8026778:	3714      	adds	r7, #20
 802677a:	46bd      	mov	sp, r7
 802677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026780:	4770      	bx	lr
 8026782:	bf00      	nop
 8026784:	0c005554 	.word	0x0c005554
 8026788:	0c00aaa8 	.word	0x0c00aaa8

0802678c <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 802678c:	b480      	push	{r7}
 802678e:	b085      	sub	sp, #20
 8026790:	af00      	add	r7, sp, #0
 8026792:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026794:	4b11      	ldr	r3, [pc, #68]	; (80267dc <XMC_FLASH_lEraseSectorCommand+0x50>)
 8026796:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026798:	68fb      	ldr	r3, [r7, #12]
 802679a:	22aa      	movs	r2, #170	; 0xaa
 802679c:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 802679e:	4b10      	ldr	r3, [pc, #64]	; (80267e0 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80267a0:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80267a2:	68fb      	ldr	r3, [r7, #12]
 80267a4:	2255      	movs	r2, #85	; 0x55
 80267a6:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80267a8:	4b0c      	ldr	r3, [pc, #48]	; (80267dc <XMC_FLASH_lEraseSectorCommand+0x50>)
 80267aa:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80267ac:	68fb      	ldr	r3, [r7, #12]
 80267ae:	2280      	movs	r2, #128	; 0x80
 80267b0:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80267b2:	4b0a      	ldr	r3, [pc, #40]	; (80267dc <XMC_FLASH_lEraseSectorCommand+0x50>)
 80267b4:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80267b6:	68fb      	ldr	r3, [r7, #12]
 80267b8:	22aa      	movs	r2, #170	; 0xaa
 80267ba:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80267bc:	4b08      	ldr	r3, [pc, #32]	; (80267e0 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80267be:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80267c0:	68fb      	ldr	r3, [r7, #12]
 80267c2:	2255      	movs	r2, #85	; 0x55
 80267c4:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80267c6:	687b      	ldr	r3, [r7, #4]
 80267c8:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	2230      	movs	r2, #48	; 0x30
 80267ce:	601a      	str	r2, [r3, #0]
}
 80267d0:	3714      	adds	r7, #20
 80267d2:	46bd      	mov	sp, r7
 80267d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267d8:	4770      	bx	lr
 80267da:	bf00      	nop
 80267dc:	0c005554 	.word	0x0c005554
 80267e0:	0c00aaa8 	.word	0x0c00aaa8

080267e4 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 80267e4:	b480      	push	{r7}
 80267e6:	b083      	sub	sp, #12
 80267e8:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80267ea:	4b05      	ldr	r3, [pc, #20]	; (8026800 <XMC_FLASH_lClearStatusCommand+0x1c>)
 80267ec:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 80267ee:	687b      	ldr	r3, [r7, #4]
 80267f0:	22f5      	movs	r2, #245	; 0xf5
 80267f2:	601a      	str	r2, [r3, #0]
}
 80267f4:	370c      	adds	r7, #12
 80267f6:	46bd      	mov	sp, r7
 80267f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267fc:	4770      	bx	lr
 80267fe:	bf00      	nop
 8026800:	0c005554 	.word	0x0c005554

08026804 <XMC_FLASH_ClearStatus>:

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 8026804:	b580      	push	{r7, lr}
 8026806:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 8026808:	f7ff ffec 	bl	80267e4 <XMC_FLASH_lClearStatusCommand>
}
 802680c:	bd80      	pop	{r7, pc}
 802680e:	bf00      	nop

08026810 <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8026810:	b480      	push	{r7}
 8026812:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 8026814:	4b04      	ldr	r3, [pc, #16]	; (8026828 <XMC_FLASH_GetStatus+0x18>)
 8026816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802681a:	3310      	adds	r3, #16
 802681c:	681b      	ldr	r3, [r3, #0]
}
 802681e:	4618      	mov	r0, r3
 8026820:	46bd      	mov	sp, r7
 8026822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026826:	4770      	bx	lr
 8026828:	58001000 	.word	0x58001000

0802682c <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 802682c:	b580      	push	{r7, lr}
 802682e:	b084      	sub	sp, #16
 8026830:	af00      	add	r7, sp, #0
 8026832:	6078      	str	r0, [r7, #4]
 8026834:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 8026836:	f7ff ffd5 	bl	80267e4 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 802683a:	f7ff ff5d 	bl	80266f8 <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 802683e:	2300      	movs	r3, #0
 8026840:	60fb      	str	r3, [r7, #12]
 8026842:	e011      	b.n	8026868 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 8026844:	68fb      	ldr	r3, [r7, #12]
 8026846:	009b      	lsls	r3, r3, #2
 8026848:	683a      	ldr	r2, [r7, #0]
 802684a:	4413      	add	r3, r2
 802684c:	6819      	ldr	r1, [r3, #0]
 802684e:	68fb      	ldr	r3, [r7, #12]
 8026850:	3301      	adds	r3, #1
 8026852:	009b      	lsls	r3, r3, #2
 8026854:	683a      	ldr	r2, [r7, #0]
 8026856:	4413      	add	r3, r2
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	4608      	mov	r0, r1
 802685c:	4619      	mov	r1, r3
 802685e:	f7ff ff5b 	bl	8026718 <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8026862:	68fb      	ldr	r3, [r7, #12]
 8026864:	3302      	adds	r3, #2
 8026866:	60fb      	str	r3, [r7, #12]
 8026868:	68fb      	ldr	r3, [r7, #12]
 802686a:	2b3f      	cmp	r3, #63	; 0x3f
 802686c:	d9ea      	bls.n	8026844 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 802686e:	6878      	ldr	r0, [r7, #4]
 8026870:	f7ff ff6a 	bl	8026748 <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8026874:	bf00      	nop
 8026876:	4b06      	ldr	r3, [pc, #24]	; (8026890 <XMC_FLASH_ProgramPage+0x64>)
 8026878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802687c:	3310      	adds	r3, #16
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	f003 0301 	and.w	r3, r3, #1
 8026884:	2b00      	cmp	r3, #0
 8026886:	d1f6      	bne.n	8026876 <XMC_FLASH_ProgramPage+0x4a>
}
 8026888:	3710      	adds	r7, #16
 802688a:	46bd      	mov	sp, r7
 802688c:	bd80      	pop	{r7, pc}
 802688e:	bf00      	nop
 8026890:	58001000 	.word	0x58001000

08026894 <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 8026894:	b580      	push	{r7, lr}
 8026896:	b082      	sub	sp, #8
 8026898:	af00      	add	r7, sp, #0
 802689a:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 802689c:	f7ff ffa2 	bl	80267e4 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 80268a0:	6878      	ldr	r0, [r7, #4]
 80268a2:	f7ff ff73 	bl	802678c <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80268a6:	bf00      	nop
 80268a8:	4b05      	ldr	r3, [pc, #20]	; (80268c0 <XMC_FLASH_EraseSector+0x2c>)
 80268aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80268ae:	3310      	adds	r3, #16
 80268b0:	681b      	ldr	r3, [r3, #0]
 80268b2:	f003 0301 	and.w	r3, r3, #1
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	d1f6      	bne.n	80268a8 <XMC_FLASH_EraseSector+0x14>
}
 80268ba:	3708      	adds	r7, #8
 80268bc:	46bd      	mov	sp, r7
 80268be:	bd80      	pop	{r7, pc}
 80268c0:	58001000 	.word	0x58001000

080268c4 <XMC_FLASH_lErasePhysicalSectorCommand>:

/*
 * Command to erase physical sector which is starting with the specified address
 */
void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address)
{
 80268c4:	b480      	push	{r7}
 80268c6:	b085      	sub	sp, #20
 80268c8:	af00      	add	r7, sp, #0
 80268ca:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80268cc:	4b11      	ldr	r3, [pc, #68]	; (8026914 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80268ce:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80268d0:	68fb      	ldr	r3, [r7, #12]
 80268d2:	22aa      	movs	r2, #170	; 0xaa
 80268d4:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80268d6:	4b10      	ldr	r3, [pc, #64]	; (8026918 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 80268d8:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	2255      	movs	r2, #85	; 0x55
 80268de:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80268e0:	4b0c      	ldr	r3, [pc, #48]	; (8026914 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80268e2:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80268e4:	68fb      	ldr	r3, [r7, #12]
 80268e6:	2280      	movs	r2, #128	; 0x80
 80268e8:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80268ea:	4b0a      	ldr	r3, [pc, #40]	; (8026914 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80268ec:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	22aa      	movs	r2, #170	; 0xaa
 80268f2:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80268f4:	4b08      	ldr	r3, [pc, #32]	; (8026918 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 80268f6:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80268f8:	68fb      	ldr	r3, [r7, #12]
 80268fa:	2255      	movs	r2, #85	; 0x55
 80268fc:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	60fb      	str	r3, [r7, #12]
  *address = 0x40U;
 8026902:	68fb      	ldr	r3, [r7, #12]
 8026904:	2240      	movs	r2, #64	; 0x40
 8026906:	601a      	str	r2, [r3, #0]
}
 8026908:	3714      	adds	r7, #20
 802690a:	46bd      	mov	sp, r7
 802690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026910:	4770      	bx	lr
 8026912:	bf00      	nop
 8026914:	0c005554 	.word	0x0c005554
 8026918:	0c00aaa8 	.word	0x0c00aaa8

0802691c <XMC_FLASH_ErasePhysicalSector>:

 /* 
  * This API erase the physical sector
  */
void XMC_FLASH_ErasePhysicalSector(uint32_t *address)
{
 802691c:	b580      	push	{r7, lr}
 802691e:	b082      	sub	sp, #8
 8026920:	af00      	add	r7, sp, #0
 8026922:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8026924:	f7ff ff5e 	bl	80267e4 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lErasePhysicalSectorCommand(address);
 8026928:	6878      	ldr	r0, [r7, #4]
 802692a:	f7ff ffcb 	bl	80268c4 <XMC_FLASH_lErasePhysicalSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 802692e:	bf00      	nop
 8026930:	4b05      	ldr	r3, [pc, #20]	; (8026948 <XMC_FLASH_ErasePhysicalSector+0x2c>)
 8026932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8026936:	3310      	adds	r3, #16
 8026938:	681b      	ldr	r3, [r3, #0]
 802693a:	f003 0301 	and.w	r3, r3, #1
 802693e:	2b00      	cmp	r3, #0
 8026940:	d1f6      	bne.n	8026930 <XMC_FLASH_ErasePhysicalSector+0x14>
}
 8026942:	3708      	adds	r7, #8
 8026944:	46bd      	mov	sp, r7
 8026946:	bd80      	pop	{r7, pc}
 8026948:	58001000 	.word	0x58001000

0802694c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 802694c:	b480      	push	{r7}
 802694e:	b085      	sub	sp, #20
 8026950:	af00      	add	r7, sp, #0
 8026952:	60f8      	str	r0, [r7, #12]
 8026954:	460b      	mov	r3, r1
 8026956:	607a      	str	r2, [r7, #4]
 8026958:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 802695a:	7afb      	ldrb	r3, [r7, #11]
 802695c:	089b      	lsrs	r3, r3, #2
 802695e:	b2db      	uxtb	r3, r3
 8026960:	4618      	mov	r0, r3
 8026962:	7afb      	ldrb	r3, [r7, #11]
 8026964:	089b      	lsrs	r3, r3, #2
 8026966:	b2db      	uxtb	r3, r3
 8026968:	461a      	mov	r2, r3
 802696a:	68fb      	ldr	r3, [r7, #12]
 802696c:	3204      	adds	r2, #4
 802696e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026972:	7afb      	ldrb	r3, [r7, #11]
 8026974:	f003 0303 	and.w	r3, r3, #3
 8026978:	00db      	lsls	r3, r3, #3
 802697a:	4619      	mov	r1, r3
 802697c:	23f8      	movs	r3, #248	; 0xf8
 802697e:	408b      	lsls	r3, r1
 8026980:	43db      	mvns	r3, r3
 8026982:	ea02 0103 	and.w	r1, r2, r3
 8026986:	68fb      	ldr	r3, [r7, #12]
 8026988:	1d02      	adds	r2, r0, #4
 802698a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 802698e:	68fb      	ldr	r3, [r7, #12]
 8026990:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8026992:	7afb      	ldrb	r3, [r7, #11]
 8026994:	005b      	lsls	r3, r3, #1
 8026996:	4619      	mov	r1, r3
 8026998:	2303      	movs	r3, #3
 802699a:	408b      	lsls	r3, r1
 802699c:	43db      	mvns	r3, r3
 802699e:	401a      	ands	r2, r3
 80269a0:	68fb      	ldr	r3, [r7, #12]
 80269a2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80269a4:	68fb      	ldr	r3, [r7, #12]
 80269a6:	4a37      	ldr	r2, [pc, #220]	; (8026a84 <XMC_GPIO_Init+0x138>)
 80269a8:	4293      	cmp	r3, r2
 80269aa:	d003      	beq.n	80269b4 <XMC_GPIO_Init+0x68>
 80269ac:	68fb      	ldr	r3, [r7, #12]
 80269ae:	4a36      	ldr	r2, [pc, #216]	; (8026a88 <XMC_GPIO_Init+0x13c>)
 80269b0:	4293      	cmp	r3, r2
 80269b2:	d10a      	bne.n	80269ca <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80269b4:	68fb      	ldr	r3, [r7, #12]
 80269b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80269b8:	7afb      	ldrb	r3, [r7, #11]
 80269ba:	2101      	movs	r1, #1
 80269bc:	fa01 f303 	lsl.w	r3, r1, r3
 80269c0:	43db      	mvns	r3, r3
 80269c2:	401a      	ands	r2, r3
 80269c4:	68fb      	ldr	r3, [r7, #12]
 80269c6:	661a      	str	r2, [r3, #96]	; 0x60
 80269c8:	e03c      	b.n	8026a44 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	685a      	ldr	r2, [r3, #4]
 80269ce:	7afb      	ldrb	r3, [r7, #11]
 80269d0:	409a      	lsls	r2, r3
 80269d2:	68fb      	ldr	r3, [r7, #12]
 80269d4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80269d6:	7afb      	ldrb	r3, [r7, #11]
 80269d8:	08db      	lsrs	r3, r3, #3
 80269da:	b2db      	uxtb	r3, r3
 80269dc:	4618      	mov	r0, r3
 80269de:	7afb      	ldrb	r3, [r7, #11]
 80269e0:	08db      	lsrs	r3, r3, #3
 80269e2:	b2db      	uxtb	r3, r3
 80269e4:	461a      	mov	r2, r3
 80269e6:	68fb      	ldr	r3, [r7, #12]
 80269e8:	3210      	adds	r2, #16
 80269ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80269ee:	7afb      	ldrb	r3, [r7, #11]
 80269f0:	f003 0307 	and.w	r3, r3, #7
 80269f4:	009b      	lsls	r3, r3, #2
 80269f6:	4619      	mov	r1, r3
 80269f8:	2307      	movs	r3, #7
 80269fa:	408b      	lsls	r3, r1
 80269fc:	43db      	mvns	r3, r3
 80269fe:	ea02 0103 	and.w	r1, r2, r3
 8026a02:	68fb      	ldr	r3, [r7, #12]
 8026a04:	f100 0210 	add.w	r2, r0, #16
 8026a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8026a0c:	7afb      	ldrb	r3, [r7, #11]
 8026a0e:	08db      	lsrs	r3, r3, #3
 8026a10:	b2db      	uxtb	r3, r3
 8026a12:	4618      	mov	r0, r3
 8026a14:	7afb      	ldrb	r3, [r7, #11]
 8026a16:	08db      	lsrs	r3, r3, #3
 8026a18:	b2db      	uxtb	r3, r3
 8026a1a:	461a      	mov	r2, r3
 8026a1c:	68fb      	ldr	r3, [r7, #12]
 8026a1e:	3210      	adds	r2, #16
 8026a20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	7a1b      	ldrb	r3, [r3, #8]
 8026a28:	4619      	mov	r1, r3
 8026a2a:	7afb      	ldrb	r3, [r7, #11]
 8026a2c:	f003 0307 	and.w	r3, r3, #7
 8026a30:	009b      	lsls	r3, r3, #2
 8026a32:	fa01 f303 	lsl.w	r3, r1, r3
 8026a36:	ea42 0103 	orr.w	r1, r2, r3
 8026a3a:	68fb      	ldr	r3, [r7, #12]
 8026a3c:	f100 0210 	add.w	r2, r0, #16
 8026a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8026a44:	7afb      	ldrb	r3, [r7, #11]
 8026a46:	089b      	lsrs	r3, r3, #2
 8026a48:	b2db      	uxtb	r3, r3
 8026a4a:	4618      	mov	r0, r3
 8026a4c:	7afb      	ldrb	r3, [r7, #11]
 8026a4e:	089b      	lsrs	r3, r3, #2
 8026a50:	b2db      	uxtb	r3, r3
 8026a52:	461a      	mov	r2, r3
 8026a54:	68fb      	ldr	r3, [r7, #12]
 8026a56:	3204      	adds	r2, #4
 8026a58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026a5c:	687b      	ldr	r3, [r7, #4]
 8026a5e:	781b      	ldrb	r3, [r3, #0]
 8026a60:	4619      	mov	r1, r3
 8026a62:	7afb      	ldrb	r3, [r7, #11]
 8026a64:	f003 0303 	and.w	r3, r3, #3
 8026a68:	00db      	lsls	r3, r3, #3
 8026a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8026a6e:	ea42 0103 	orr.w	r1, r2, r3
 8026a72:	68fb      	ldr	r3, [r7, #12]
 8026a74:	1d02      	adds	r2, r0, #4
 8026a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8026a7a:	3714      	adds	r7, #20
 8026a7c:	46bd      	mov	sp, r7
 8026a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a82:	4770      	bx	lr
 8026a84:	48028e00 	.word	0x48028e00
 8026a88:	48028f00 	.word	0x48028f00

08026a8c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8026a8c:	b580      	push	{r7, lr}
 8026a8e:	b084      	sub	sp, #16
 8026a90:	af00      	add	r7, sp, #0
 8026a92:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8026a94:	f7f9 fc12 	bl	80202bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8026a98:	4b0b      	ldr	r3, [pc, #44]	; (8026ac8 <XMC_SCU_lDelay+0x3c>)
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	4a0b      	ldr	r2, [pc, #44]	; (8026acc <XMC_SCU_lDelay+0x40>)
 8026a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8026aa2:	0c9a      	lsrs	r2, r3, #18
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	fb02 f303 	mul.w	r3, r2, r3
 8026aaa:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8026aac:	2300      	movs	r3, #0
 8026aae:	60fb      	str	r3, [r7, #12]
 8026ab0:	e003      	b.n	8026aba <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8026ab2:	bf00      	nop
 8026ab4:	68fb      	ldr	r3, [r7, #12]
 8026ab6:	3301      	adds	r3, #1
 8026ab8:	60fb      	str	r3, [r7, #12]
 8026aba:	68fa      	ldr	r2, [r7, #12]
 8026abc:	687b      	ldr	r3, [r7, #4]
 8026abe:	429a      	cmp	r2, r3
 8026ac0:	d3f7      	bcc.n	8026ab2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8026ac2:	3710      	adds	r7, #16
 8026ac4:	46bd      	mov	sp, r7
 8026ac6:	bd80      	pop	{r7, pc}
 8026ac8:	2003ffc0 	.word	0x2003ffc0
 8026acc:	431bde83 	.word	0x431bde83

08026ad0 <XMC_SCU_SetBootMode>:
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
}

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8026ad0:	b480      	push	{r7}
 8026ad2:	b083      	sub	sp, #12
 8026ad4:	af00      	add	r7, sp, #0
 8026ad6:	4603      	mov	r3, r0
 8026ad8:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8026ada:	4a04      	ldr	r2, [pc, #16]	; (8026aec <XMC_SCU_SetBootMode+0x1c>)
 8026adc:	88fb      	ldrh	r3, [r7, #6]
 8026ade:	6113      	str	r3, [r2, #16]
}
 8026ae0:	370c      	adds	r7, #12
 8026ae2:	46bd      	mov	sp, r7
 8026ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ae8:	4770      	bx	lr
 8026aea:	bf00      	nop
 8026aec:	50004000 	.word	0x50004000

08026af0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8026af0:	b5b0      	push	{r4, r5, r7, lr}
 8026af2:	b084      	sub	sp, #16
 8026af4:	af02      	add	r7, sp, #8
 8026af6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8026af8:	2000      	movs	r0, #0
 8026afa:	f000 f8bb 	bl	8026c74 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8026afe:	f000 fa7d 	bl	8026ffc <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	79db      	ldrb	r3, [r3, #7]
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	d00a      	beq.n	8026b20 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8026b0a:	f000 fab5 	bl	8027078 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8026b0e:	bf00      	nop
 8026b10:	f000 faa0 	bl	8027054 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8026b14:	4603      	mov	r3, r0
 8026b16:	f083 0301 	eor.w	r3, r3, #1
 8026b1a:	b2db      	uxtb	r3, r3
 8026b1c:	2b00      	cmp	r3, #0
 8026b1e:	d1f7      	bne.n	8026b10 <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	7a5b      	ldrb	r3, [r3, #9]
 8026b24:	4618      	mov	r0, r3
 8026b26:	f000 f91f 	bl	8026d68 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8026b2a:	687b      	ldr	r3, [r7, #4]
 8026b2c:	7a1b      	ldrb	r3, [r3, #8]
 8026b2e:	4618      	mov	r0, r3
 8026b30:	f000 fa3e 	bl	8026fb0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	7c1b      	ldrb	r3, [r3, #16]
 8026b38:	4618      	mov	r0, r3
 8026b3a:	f000 f933 	bl	8026da4 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	7c5b      	ldrb	r3, [r3, #17]
 8026b42:	4618      	mov	r0, r3
 8026b44:	f000 f956 	bl	8026df4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8026b48:	687b      	ldr	r3, [r7, #4]
 8026b4a:	7c9b      	ldrb	r3, [r3, #18]
 8026b4c:	4618      	mov	r0, r3
 8026b4e:	f000 f93d 	bl	8026dcc <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8026b52:	687b      	ldr	r3, [r7, #4]
 8026b54:	7cdb      	ldrb	r3, [r3, #19]
 8026b56:	4618      	mov	r0, r3
 8026b58:	f000 f960 	bl	8026e1c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8026b5c:	687b      	ldr	r3, [r7, #4]
 8026b5e:	799b      	ldrb	r3, [r3, #6]
 8026b60:	2b00      	cmp	r3, #0
 8026b62:	d00a      	beq.n	8026b7a <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8026b64:	f000 faba 	bl	80270dc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8026b68:	bf00      	nop
 8026b6a:	f000 fadf 	bl	802712c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8026b6e:	4603      	mov	r3, r0
 8026b70:	f083 0301 	eor.w	r3, r3, #1
 8026b74:	b2db      	uxtb	r3, r3
 8026b76:	2b00      	cmp	r3, #0
 8026b78:	d1f7      	bne.n	8026b6a <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8026b7a:	687b      	ldr	r3, [r7, #4]
 8026b7c:	78db      	ldrb	r3, [r3, #3]
 8026b7e:	2b00      	cmp	r3, #0
 8026b80:	d102      	bne.n	8026b88 <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8026b82:	f000 faf7 	bl	8027174 <XMC_SCU_CLOCK_DisableSystemPll>
 8026b86:	e014      	b.n	8026bb2 <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8026b88:	f000 fae4 	bl	8027154 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	8899      	ldrh	r1, [r3, #4]
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026b98:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8026b9a:	687b      	ldr	r3, [r7, #4]
 8026b9c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026b9e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8026ba0:	687b      	ldr	r3, [r7, #4]
 8026ba2:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026ba4:	9300      	str	r3, [sp, #0]
 8026ba6:	4608      	mov	r0, r1
 8026ba8:	4611      	mov	r1, r2
 8026baa:	462a      	mov	r2, r5
 8026bac:	4623      	mov	r3, r4
 8026bae:	f000 faf1 	bl	8027194 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	68db      	ldr	r3, [r3, #12]
 8026bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026bba:	d103      	bne.n	8026bc4 <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8026bbc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8026bc0:	f000 f858 	bl	8026c74 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8026bc4:	f7f9 fb7a 	bl	80202bc <SystemCoreClockUpdate>
}
 8026bc8:	3708      	adds	r7, #8
 8026bca:	46bd      	mov	sp, r7
 8026bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8026bce:	bf00      	nop

08026bd0 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8026bd0:	b480      	push	{r7}
 8026bd2:	b083      	sub	sp, #12
 8026bd4:	af00      	add	r7, sp, #0
 8026bd6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8026bd8:	4905      	ldr	r1, [pc, #20]	; (8026bf0 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8026bda:	4b05      	ldr	r3, [pc, #20]	; (8026bf0 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8026bdc:	695a      	ldr	r2, [r3, #20]
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	4313      	orrs	r3, r2
 8026be2:	614b      	str	r3, [r1, #20]
}
 8026be4:	370c      	adds	r7, #12
 8026be6:	46bd      	mov	sp, r7
 8026be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bec:	4770      	bx	lr
 8026bee:	bf00      	nop
 8026bf0:	50004074 	.word	0x50004074

08026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8026bf4:	b480      	push	{r7}
 8026bf6:	b085      	sub	sp, #20
 8026bf8:	af00      	add	r7, sp, #0
 8026bfa:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8026bfc:	687b      	ldr	r3, [r7, #4]
 8026bfe:	0f1b      	lsrs	r3, r3, #28
 8026c00:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8026c02:	687b      	ldr	r3, [r7, #4]
 8026c04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026c08:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8026c0a:	68fa      	ldr	r2, [r7, #12]
 8026c0c:	4613      	mov	r3, r2
 8026c0e:	005b      	lsls	r3, r3, #1
 8026c10:	4413      	add	r3, r2
 8026c12:	009b      	lsls	r3, r3, #2
 8026c14:	461a      	mov	r2, r3
 8026c16:	4b04      	ldr	r3, [pc, #16]	; (8026c28 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8026c18:	4413      	add	r3, r2
 8026c1a:	68ba      	ldr	r2, [r7, #8]
 8026c1c:	601a      	str	r2, [r3, #0]
}
 8026c1e:	3714      	adds	r7, #20
 8026c20:	46bd      	mov	sp, r7
 8026c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c26:	4770      	bx	lr
 8026c28:	50004414 	.word	0x50004414

08026c2c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8026c2c:	b480      	push	{r7}
 8026c2e:	b085      	sub	sp, #20
 8026c30:	af00      	add	r7, sp, #0
 8026c32:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	0f1b      	lsrs	r3, r3, #28
 8026c38:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026c40:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8026c42:	68fa      	ldr	r2, [r7, #12]
 8026c44:	4613      	mov	r3, r2
 8026c46:	005b      	lsls	r3, r3, #1
 8026c48:	4413      	add	r3, r2
 8026c4a:	009b      	lsls	r3, r3, #2
 8026c4c:	461a      	mov	r2, r3
 8026c4e:	4b08      	ldr	r3, [pc, #32]	; (8026c70 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8026c50:	4413      	add	r3, r2
 8026c52:	681a      	ldr	r2, [r3, #0]
 8026c54:	68bb      	ldr	r3, [r7, #8]
 8026c56:	4013      	ands	r3, r2
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	bf14      	ite	ne
 8026c5c:	2301      	movne	r3, #1
 8026c5e:	2300      	moveq	r3, #0
 8026c60:	b2db      	uxtb	r3, r3
}
 8026c62:	4618      	mov	r0, r3
 8026c64:	3714      	adds	r7, #20
 8026c66:	46bd      	mov	sp, r7
 8026c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c6c:	4770      	bx	lr
 8026c6e:	bf00      	nop
 8026c70:	5000440c 	.word	0x5000440c

08026c74 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8026c74:	b480      	push	{r7}
 8026c76:	b083      	sub	sp, #12
 8026c78:	af00      	add	r7, sp, #0
 8026c7a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8026c7c:	4906      	ldr	r1, [pc, #24]	; (8026c98 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8026c7e:	4b06      	ldr	r3, [pc, #24]	; (8026c98 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8026c80:	68db      	ldr	r3, [r3, #12]
 8026c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	4313      	orrs	r3, r2
 8026c8a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8026c8c:	370c      	adds	r7, #12
 8026c8e:	46bd      	mov	sp, r7
 8026c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c94:	4770      	bx	lr
 8026c96:	bf00      	nop
 8026c98:	50004600 	.word	0x50004600

08026c9c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8026c9c:	b480      	push	{r7}
 8026c9e:	b083      	sub	sp, #12
 8026ca0:	af00      	add	r7, sp, #0
 8026ca2:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8026ca4:	4906      	ldr	r1, [pc, #24]	; (8026cc0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8026ca6:	4b06      	ldr	r3, [pc, #24]	; (8026cc0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8026ca8:	699b      	ldr	r3, [r3, #24]
 8026caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8026cae:	687b      	ldr	r3, [r7, #4]
 8026cb0:	4313      	orrs	r3, r2
 8026cb2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8026cb4:	370c      	adds	r7, #12
 8026cb6:	46bd      	mov	sp, r7
 8026cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cbc:	4770      	bx	lr
 8026cbe:	bf00      	nop
 8026cc0:	50004600 	.word	0x50004600

08026cc4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8026cc4:	b480      	push	{r7}
 8026cc6:	b083      	sub	sp, #12
 8026cc8:	af00      	add	r7, sp, #0
 8026cca:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8026ccc:	4906      	ldr	r1, [pc, #24]	; (8026ce8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8026cce:	4b06      	ldr	r3, [pc, #24]	; (8026ce8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8026cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	4313      	orrs	r3, r2
 8026cda:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8026cdc:	370c      	adds	r7, #12
 8026cde:	46bd      	mov	sp, r7
 8026ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ce4:	4770      	bx	lr
 8026ce6:	bf00      	nop
 8026ce8:	50004600 	.word	0x50004600

08026cec <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8026cec:	b480      	push	{r7}
 8026cee:	b083      	sub	sp, #12
 8026cf0:	af00      	add	r7, sp, #0
 8026cf2:	4603      	mov	r3, r0
 8026cf4:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8026cf6:	88fb      	ldrh	r3, [r7, #6]
 8026cf8:	2b00      	cmp	r3, #0
 8026cfa:	d108      	bne.n	8026d0e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8026cfc:	4a0a      	ldr	r2, [pc, #40]	; (8026d28 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026cfe:	4b0a      	ldr	r3, [pc, #40]	; (8026d28 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026d00:	68db      	ldr	r3, [r3, #12]
 8026d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026d06:	f023 0301 	bic.w	r3, r3, #1
 8026d0a:	60d3      	str	r3, [r2, #12]
 8026d0c:	e007      	b.n	8026d1e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8026d0e:	4a06      	ldr	r2, [pc, #24]	; (8026d28 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026d10:	4b05      	ldr	r3, [pc, #20]	; (8026d28 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026d12:	68db      	ldr	r3, [r3, #12]
 8026d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026d18:	f043 0301 	orr.w	r3, r3, #1
 8026d1c:	60d3      	str	r3, [r2, #12]
  }
}
 8026d1e:	370c      	adds	r7, #12
 8026d20:	46bd      	mov	sp, r7
 8026d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d26:	4770      	bx	lr
 8026d28:	50004710 	.word	0x50004710

08026d2c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8026d2c:	b480      	push	{r7}
 8026d2e:	b083      	sub	sp, #12
 8026d30:	af00      	add	r7, sp, #0
 8026d32:	4603      	mov	r3, r0
 8026d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8026d36:	bf00      	nop
 8026d38:	4b09      	ldr	r3, [pc, #36]	; (8026d60 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8026d3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8026d3e:	f003 0308 	and.w	r3, r3, #8
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d1f8      	bne.n	8026d38 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8026d46:	4907      	ldr	r1, [pc, #28]	; (8026d64 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8026d48:	4b06      	ldr	r3, [pc, #24]	; (8026d64 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8026d4a:	68db      	ldr	r3, [r3, #12]
 8026d4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8026d50:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8026d52:	4313      	orrs	r3, r2
 8026d54:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8026d56:	370c      	adds	r7, #12
 8026d58:	46bd      	mov	sp, r7
 8026d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d5e:	4770      	bx	lr
 8026d60:	50004000 	.word	0x50004000
 8026d64:	50004300 	.word	0x50004300

08026d68 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8026d68:	b480      	push	{r7}
 8026d6a:	b083      	sub	sp, #12
 8026d6c:	af00      	add	r7, sp, #0
 8026d6e:	4603      	mov	r3, r0
 8026d70:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8026d72:	bf00      	nop
 8026d74:	4b09      	ldr	r3, [pc, #36]	; (8026d9c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8026d76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8026d7a:	f003 0308 	and.w	r3, r3, #8
 8026d7e:	2b00      	cmp	r3, #0
 8026d80:	d1f8      	bne.n	8026d74 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026d82:	4907      	ldr	r1, [pc, #28]	; (8026da0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8026d84:	4b06      	ldr	r3, [pc, #24]	; (8026da0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8026d86:	68db      	ldr	r3, [r3, #12]
 8026d88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8026d8c:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026d8e:	4313      	orrs	r3, r2
 8026d90:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8026d92:	370c      	adds	r7, #12
 8026d94:	46bd      	mov	sp, r7
 8026d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d9a:	4770      	bx	lr
 8026d9c:	50004000 	.word	0x50004000
 8026da0:	50004300 	.word	0x50004300

08026da4 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8026da4:	b480      	push	{r7}
 8026da6:	b083      	sub	sp, #12
 8026da8:	af00      	add	r7, sp, #0
 8026daa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8026dac:	4906      	ldr	r1, [pc, #24]	; (8026dc8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026dae:	4b06      	ldr	r3, [pc, #24]	; (8026dc8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026db0:	68db      	ldr	r3, [r3, #12]
 8026db2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8026dba:	4313      	orrs	r3, r2
 8026dbc:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8026dbe:	370c      	adds	r7, #12
 8026dc0:	46bd      	mov	sp, r7
 8026dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc6:	4770      	bx	lr
 8026dc8:	50004600 	.word	0x50004600

08026dcc <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8026dcc:	b480      	push	{r7}
 8026dce:	b083      	sub	sp, #12
 8026dd0:	af00      	add	r7, sp, #0
 8026dd2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026dd4:	4906      	ldr	r1, [pc, #24]	; (8026df0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8026dd6:	4b06      	ldr	r3, [pc, #24]	; (8026df0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8026dd8:	6a1b      	ldr	r3, [r3, #32]
 8026dda:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8026dde:	687b      	ldr	r3, [r7, #4]
 8026de0:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026de2:	4313      	orrs	r3, r2
 8026de4:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8026de6:	370c      	adds	r7, #12
 8026de8:	46bd      	mov	sp, r7
 8026dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dee:	4770      	bx	lr
 8026df0:	50004600 	.word	0x50004600

08026df4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8026df4:	b480      	push	{r7}
 8026df6:	b083      	sub	sp, #12
 8026df8:	af00      	add	r7, sp, #0
 8026dfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8026dfc:	4906      	ldr	r1, [pc, #24]	; (8026e18 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026dfe:	4b06      	ldr	r3, [pc, #24]	; (8026e18 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026e00:	691b      	ldr	r3, [r3, #16]
 8026e02:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8026e06:	687b      	ldr	r3, [r7, #4]
 8026e08:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8026e0a:	4313      	orrs	r3, r2
 8026e0c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8026e0e:	370c      	adds	r7, #12
 8026e10:	46bd      	mov	sp, r7
 8026e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e16:	4770      	bx	lr
 8026e18:	50004600 	.word	0x50004600

08026e1c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8026e1c:	b480      	push	{r7}
 8026e1e:	b083      	sub	sp, #12
 8026e20:	af00      	add	r7, sp, #0
 8026e22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8026e24:	4906      	ldr	r1, [pc, #24]	; (8026e40 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8026e26:	4b06      	ldr	r3, [pc, #24]	; (8026e40 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8026e28:	695b      	ldr	r3, [r3, #20]
 8026e2a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8026e2e:	687b      	ldr	r3, [r7, #4]
 8026e30:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8026e32:	4313      	orrs	r3, r2
 8026e34:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8026e36:	370c      	adds	r7, #12
 8026e38:	46bd      	mov	sp, r7
 8026e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e3e:	4770      	bx	lr
 8026e40:	50004600 	.word	0x50004600

08026e44 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8026e44:	b480      	push	{r7}
 8026e46:	b083      	sub	sp, #12
 8026e48:	af00      	add	r7, sp, #0
 8026e4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8026e4c:	4906      	ldr	r1, [pc, #24]	; (8026e68 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8026e4e:	4b06      	ldr	r3, [pc, #24]	; (8026e68 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8026e50:	699b      	ldr	r3, [r3, #24]
 8026e52:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8026e5a:	4313      	orrs	r3, r2
 8026e5c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8026e5e:	370c      	adds	r7, #12
 8026e60:	46bd      	mov	sp, r7
 8026e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e66:	4770      	bx	lr
 8026e68:	50004600 	.word	0x50004600

08026e6c <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8026e6c:	b480      	push	{r7}
 8026e6e:	b083      	sub	sp, #12
 8026e70:	af00      	add	r7, sp, #0
 8026e72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8026e74:	4906      	ldr	r1, [pc, #24]	; (8026e90 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8026e76:	4b06      	ldr	r3, [pc, #24]	; (8026e90 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8026e78:	69db      	ldr	r3, [r3, #28]
 8026e7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8026e82:	4313      	orrs	r3, r2
 8026e84:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8026e86:	370c      	adds	r7, #12
 8026e88:	46bd      	mov	sp, r7
 8026e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e8e:	4770      	bx	lr
 8026e90:	50004600 	.word	0x50004600

08026e94 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8026e94:	b480      	push	{r7}
 8026e96:	b083      	sub	sp, #12
 8026e98:	af00      	add	r7, sp, #0
 8026e9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026e9c:	4906      	ldr	r1, [pc, #24]	; (8026eb8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8026e9e:	4b06      	ldr	r3, [pc, #24]	; (8026eb8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8026ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8026ea6:	687b      	ldr	r3, [r7, #4]
 8026ea8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026eaa:	4313      	orrs	r3, r2
 8026eac:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8026eae:	370c      	adds	r7, #12
 8026eb0:	46bd      	mov	sp, r7
 8026eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eb6:	4770      	bx	lr
 8026eb8:	50004600 	.word	0x50004600

08026ebc <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8026ebc:	b480      	push	{r7}
 8026ebe:	b083      	sub	sp, #12
 8026ec0:	af00      	add	r7, sp, #0
 8026ec2:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8026ec4:	4906      	ldr	r1, [pc, #24]	; (8026ee0 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026ec6:	4b06      	ldr	r3, [pc, #24]	; (8026ee0 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026eca:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 8026ece:	687b      	ldr	r3, [r7, #4]
 8026ed0:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8026ed2:	4313      	orrs	r3, r2
 8026ed4:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8026ed6:	370c      	adds	r7, #12
 8026ed8:	46bd      	mov	sp, r7
 8026eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ede:	4770      	bx	lr
 8026ee0:	50004600 	.word	0x50004600

08026ee4 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8026ee4:	b480      	push	{r7}
 8026ee6:	b083      	sub	sp, #12
 8026ee8:	af00      	add	r7, sp, #0
 8026eea:	4603      	mov	r3, r0
 8026eec:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8026eee:	4a04      	ldr	r2, [pc, #16]	; (8026f00 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8026ef0:	79fb      	ldrb	r3, [r7, #7]
 8026ef2:	6053      	str	r3, [r2, #4]
}
 8026ef4:	370c      	adds	r7, #12
 8026ef6:	46bd      	mov	sp, r7
 8026ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026efc:	4770      	bx	lr
 8026efe:	bf00      	nop
 8026f00:	50004600 	.word	0x50004600

08026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8026f04:	b480      	push	{r7}
 8026f06:	b085      	sub	sp, #20
 8026f08:	af00      	add	r7, sp, #0
 8026f0a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	0f1b      	lsrs	r3, r3, #28
 8026f10:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8026f12:	687b      	ldr	r3, [r7, #4]
 8026f14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026f18:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8026f1a:	68fa      	ldr	r2, [r7, #12]
 8026f1c:	4613      	mov	r3, r2
 8026f1e:	005b      	lsls	r3, r3, #1
 8026f20:	4413      	add	r3, r2
 8026f22:	009b      	lsls	r3, r3, #2
 8026f24:	461a      	mov	r2, r3
 8026f26:	4b04      	ldr	r3, [pc, #16]	; (8026f38 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8026f28:	4413      	add	r3, r2
 8026f2a:	68ba      	ldr	r2, [r7, #8]
 8026f2c:	601a      	str	r2, [r3, #0]
}
 8026f2e:	3714      	adds	r7, #20
 8026f30:	46bd      	mov	sp, r7
 8026f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f36:	4770      	bx	lr
 8026f38:	50004648 	.word	0x50004648

08026f3c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8026f3c:	b480      	push	{r7}
 8026f3e:	b083      	sub	sp, #12
 8026f40:	af00      	add	r7, sp, #0
 8026f42:	6078      	str	r0, [r7, #4]
 8026f44:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8026f46:	4a19      	ldr	r2, [pc, #100]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f48:	4b18      	ldr	r3, [pc, #96]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f4a:	695b      	ldr	r3, [r3, #20]
 8026f4c:	f043 0301 	orr.w	r3, r3, #1
 8026f50:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8026f52:	4a16      	ldr	r2, [pc, #88]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f54:	4b15      	ldr	r3, [pc, #84]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f56:	695b      	ldr	r3, [r3, #20]
 8026f58:	f043 0310 	orr.w	r3, r3, #16
 8026f5c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8026f5e:	4913      	ldr	r1, [pc, #76]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f60:	683b      	ldr	r3, [r7, #0]
 8026f62:	3b01      	subs	r3, #1
 8026f64:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8026f66:	687b      	ldr	r3, [r7, #4]
 8026f68:	3b01      	subs	r3, #1
 8026f6a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8026f6c:	4313      	orrs	r3, r2
 8026f6e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8026f70:	4a0e      	ldr	r2, [pc, #56]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f72:	4b0e      	ldr	r3, [pc, #56]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f74:	695b      	ldr	r3, [r3, #20]
 8026f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026f7a:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8026f7c:	4a0b      	ldr	r2, [pc, #44]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f7e:	4b0b      	ldr	r3, [pc, #44]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f80:	695b      	ldr	r3, [r3, #20]
 8026f82:	f023 0310 	bic.w	r3, r3, #16
 8026f86:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8026f88:	4a08      	ldr	r2, [pc, #32]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f8a:	4b08      	ldr	r3, [pc, #32]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f8c:	695b      	ldr	r3, [r3, #20]
 8026f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026f92:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8026f94:	bf00      	nop
 8026f96:	4b05      	ldr	r3, [pc, #20]	; (8026fac <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026f98:	691b      	ldr	r3, [r3, #16]
 8026f9a:	f003 0304 	and.w	r3, r3, #4
 8026f9e:	2b00      	cmp	r3, #0
 8026fa0:	d0f9      	beq.n	8026f96 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8026fa2:	370c      	adds	r7, #12
 8026fa4:	46bd      	mov	sp, r7
 8026fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026faa:	4770      	bx	lr
 8026fac:	50004710 	.word	0x50004710

08026fb0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8026fb0:	b580      	push	{r7, lr}
 8026fb2:	b082      	sub	sp, #8
 8026fb4:	af00      	add	r7, sp, #0
 8026fb6:	4603      	mov	r3, r0
 8026fb8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8026fba:	4a0f      	ldr	r2, [pc, #60]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fbc:	4b0e      	ldr	r3, [pc, #56]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fbe:	685b      	ldr	r3, [r3, #4]
 8026fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026fc4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8026fc6:	79fb      	ldrb	r3, [r7, #7]
 8026fc8:	2b01      	cmp	r3, #1
 8026fca:	d10e      	bne.n	8026fea <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8026fcc:	4a0a      	ldr	r2, [pc, #40]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fce:	4b0a      	ldr	r3, [pc, #40]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fd0:	685b      	ldr	r3, [r3, #4]
 8026fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8026fd6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8026fd8:	2064      	movs	r0, #100	; 0x64
 8026fda:	f7ff fd57 	bl	8026a8c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8026fde:	4a06      	ldr	r2, [pc, #24]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fe0:	4b05      	ldr	r3, [pc, #20]	; (8026ff8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026fe2:	685b      	ldr	r3, [r3, #4]
 8026fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8026fe8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8026fea:	2064      	movs	r0, #100	; 0x64
 8026fec:	f7ff fd4e 	bl	8026a8c <XMC_SCU_lDelay>
}
 8026ff0:	3708      	adds	r7, #8
 8026ff2:	46bd      	mov	sp, r7
 8026ff4:	bd80      	pop	{r7, pc}
 8026ff6:	bf00      	nop
 8026ff8:	50004710 	.word	0x50004710

08026ffc <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8026ffc:	b480      	push	{r7}
 8026ffe:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8027000:	4b12      	ldr	r3, [pc, #72]	; (802704c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8027002:	681b      	ldr	r3, [r3, #0]
 8027004:	f003 0301 	and.w	r3, r3, #1
 8027008:	2b00      	cmp	r3, #0
 802700a:	d109      	bne.n	8027020 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 802700c:	4b0f      	ldr	r3, [pc, #60]	; (802704c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 802700e:	2201      	movs	r2, #1
 8027010:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8027012:	bf00      	nop
 8027014:	4b0d      	ldr	r3, [pc, #52]	; (802704c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8027016:	681b      	ldr	r3, [r3, #0]
 8027018:	f003 0301 	and.w	r3, r3, #1
 802701c:	2b00      	cmp	r3, #0
 802701e:	d0f9      	beq.n	8027014 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8027020:	4b0b      	ldr	r3, [pc, #44]	; (8027050 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8027022:	681b      	ldr	r3, [r3, #0]
 8027024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027028:	2b00      	cmp	r3, #0
 802702a:	d00a      	beq.n	8027042 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 802702c:	4b08      	ldr	r3, [pc, #32]	; (8027050 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 802702e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8027032:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8027034:	bf00      	nop
 8027036:	4b06      	ldr	r3, [pc, #24]	; (8027050 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8027038:	681b      	ldr	r3, [r3, #0]
 802703a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802703e:	2b00      	cmp	r3, #0
 8027040:	d1f9      	bne.n	8027036 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8027042:	46bd      	mov	sp, r7
 8027044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027048:	4770      	bx	lr
 802704a:	bf00      	nop
 802704c:	50004200 	.word	0x50004200
 8027050:	50004400 	.word	0x50004400

08027054 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8027054:	b480      	push	{r7}
 8027056:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8027058:	4b06      	ldr	r3, [pc, #24]	; (8027074 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 802705a:	681b      	ldr	r3, [r3, #0]
 802705c:	f003 0308 	and.w	r3, r3, #8
 8027060:	2b00      	cmp	r3, #0
 8027062:	bf0c      	ite	eq
 8027064:	2301      	moveq	r3, #1
 8027066:	2300      	movne	r3, #0
 8027068:	b2db      	uxtb	r3, r3
}
 802706a:	4618      	mov	r0, r3
 802706c:	46bd      	mov	sp, r7
 802706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027072:	4770      	bx	lr
 8027074:	50004300 	.word	0x50004300

08027078 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8027078:	b480      	push	{r7}
 802707a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 802707c:	bf00      	nop
 802707e:	4b15      	ldr	r3, [pc, #84]	; (80270d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8027080:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8027084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027088:	2b00      	cmp	r3, #0
 802708a:	d1f8      	bne.n	802707e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 802708c:	4a12      	ldr	r2, [pc, #72]	; (80270d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 802708e:	4b12      	ldr	r3, [pc, #72]	; (80270d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8027090:	69db      	ldr	r3, [r3, #28]
 8027092:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8027096:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8027098:	bf00      	nop
 802709a:	4b0e      	ldr	r3, [pc, #56]	; (80270d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 802709c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80270a0:	f003 0308 	and.w	r3, r3, #8
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	d1f8      	bne.n	802709a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80270a8:	4a0b      	ldr	r2, [pc, #44]	; (80270d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80270aa:	4b0b      	ldr	r3, [pc, #44]	; (80270d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80270ac:	68db      	ldr	r3, [r3, #12]
 80270ae:	f043 0308 	orr.w	r3, r3, #8
 80270b2:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80270b4:	bf00      	nop
 80270b6:	4b07      	ldr	r3, [pc, #28]	; (80270d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 80270b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80270bc:	f003 0304 	and.w	r3, r3, #4
 80270c0:	2b00      	cmp	r3, #0
 80270c2:	d1f8      	bne.n	80270b6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80270c4:	4b04      	ldr	r3, [pc, #16]	; (80270d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80270c6:	2208      	movs	r2, #8
 80270c8:	609a      	str	r2, [r3, #8]
}
 80270ca:	46bd      	mov	sp, r7
 80270cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270d0:	4770      	bx	lr
 80270d2:	bf00      	nop
 80270d4:	50004000 	.word	0x50004000
 80270d8:	50004300 	.word	0x50004300

080270dc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80270dc:	b5b0      	push	{r4, r5, r7, lr}
 80270de:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80270e0:	4a0f      	ldr	r2, [pc, #60]	; (8027120 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80270e2:	4b0f      	ldr	r3, [pc, #60]	; (8027120 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80270e4:	685b      	ldr	r3, [r3, #4]
 80270e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80270ea:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80270ec:	4d0d      	ldr	r5, [pc, #52]	; (8027124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80270ee:	4b0d      	ldr	r3, [pc, #52]	; (8027124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80270f0:	685b      	ldr	r3, [r3, #4]
 80270f2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80270f6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80270fa:	f002 fc21 	bl	8029940 <OSCHP_GetFrequency>
 80270fe:	4602      	mov	r2, r0
 8027100:	4b09      	ldr	r3, [pc, #36]	; (8027128 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8027102:	fba3 2302 	umull	r2, r3, r3, r2
 8027106:	0d1b      	lsrs	r3, r3, #20
 8027108:	3b01      	subs	r3, #1
 802710a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 802710c:	4323      	orrs	r3, r4
 802710e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8027110:	4a03      	ldr	r2, [pc, #12]	; (8027120 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027112:	4b03      	ldr	r3, [pc, #12]	; (8027120 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027114:	685b      	ldr	r3, [r3, #4]
 8027116:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802711a:	6053      	str	r3, [r2, #4]
}
 802711c:	bdb0      	pop	{r4, r5, r7, pc}
 802711e:	bf00      	nop
 8027120:	50004710 	.word	0x50004710
 8027124:	50004700 	.word	0x50004700
 8027128:	6b5fca6b 	.word	0x6b5fca6b

0802712c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 802712c:	b480      	push	{r7}
 802712e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8027130:	4b07      	ldr	r3, [pc, #28]	; (8027150 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8027132:	681b      	ldr	r3, [r3, #0]
 8027134:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8027138:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 802713c:	bf0c      	ite	eq
 802713e:	2301      	moveq	r3, #1
 8027140:	2300      	movne	r3, #0
 8027142:	b2db      	uxtb	r3, r3
}
 8027144:	4618      	mov	r0, r3
 8027146:	46bd      	mov	sp, r7
 8027148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802714c:	4770      	bx	lr
 802714e:	bf00      	nop
 8027150:	50004710 	.word	0x50004710

08027154 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8027154:	b480      	push	{r7}
 8027156:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8027158:	4a05      	ldr	r2, [pc, #20]	; (8027170 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 802715a:	4b05      	ldr	r3, [pc, #20]	; (8027170 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 802715c:	685b      	ldr	r3, [r3, #4]
 802715e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027162:	f023 0302 	bic.w	r3, r3, #2
 8027166:	6053      	str	r3, [r2, #4]
}
 8027168:	46bd      	mov	sp, r7
 802716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802716e:	4770      	bx	lr
 8027170:	50004710 	.word	0x50004710

08027174 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8027174:	b480      	push	{r7}
 8027176:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8027178:	4a05      	ldr	r2, [pc, #20]	; (8027190 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 802717a:	4b05      	ldr	r3, [pc, #20]	; (8027190 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 802717c:	685b      	ldr	r3, [r3, #4]
 802717e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027182:	f043 0302 	orr.w	r3, r3, #2
 8027186:	6053      	str	r3, [r2, #4]
}
 8027188:	46bd      	mov	sp, r7
 802718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802718e:	4770      	bx	lr
 8027190:	50004710 	.word	0x50004710

08027194 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8027194:	b580      	push	{r7, lr}
 8027196:	b086      	sub	sp, #24
 8027198:	af00      	add	r7, sp, #0
 802719a:	60ba      	str	r2, [r7, #8]
 802719c:	607b      	str	r3, [r7, #4]
 802719e:	4603      	mov	r3, r0
 80271a0:	81fb      	strh	r3, [r7, #14]
 80271a2:	460b      	mov	r3, r1
 80271a4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80271a6:	89fb      	ldrh	r3, [r7, #14]
 80271a8:	4618      	mov	r0, r3
 80271aa:	f7ff fd9f 	bl	8026cec <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80271ae:	7b7b      	ldrb	r3, [r7, #13]
 80271b0:	2b01      	cmp	r3, #1
 80271b2:	f040 8084 	bne.w	80272be <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80271b6:	89fb      	ldrh	r3, [r7, #14]
 80271b8:	2b00      	cmp	r3, #0
 80271ba:	d109      	bne.n	80271d0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80271bc:	f002 fbc0 	bl	8029940 <OSCHP_GetFrequency>
 80271c0:	4602      	mov	r2, r0
 80271c2:	4b4b      	ldr	r3, [pc, #300]	; (80272f0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 80271c4:	fba3 2302 	umull	r2, r3, r3, r2
 80271c8:	0c9b      	lsrs	r3, r3, #18
 80271ca:	059b      	lsls	r3, r3, #22
 80271cc:	617b      	str	r3, [r7, #20]
 80271ce:	e002      	b.n	80271d6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80271d0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80271d4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80271d6:	697b      	ldr	r3, [r7, #20]
 80271d8:	687a      	ldr	r2, [r7, #4]
 80271da:	fb02 f203 	mul.w	r2, r2, r3
 80271de:	68bb      	ldr	r3, [r7, #8]
 80271e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80271e4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80271e6:	697b      	ldr	r3, [r7, #20]
 80271e8:	4a42      	ldr	r2, [pc, #264]	; (80272f4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 80271ea:	fba2 2303 	umull	r2, r3, r2, r3
 80271ee:	091b      	lsrs	r3, r3, #4
 80271f0:	0d9b      	lsrs	r3, r3, #22
 80271f2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80271f4:	4a40      	ldr	r2, [pc, #256]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80271f6:	4b40      	ldr	r3, [pc, #256]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80271f8:	685b      	ldr	r3, [r3, #4]
 80271fa:	f043 0301 	orr.w	r3, r3, #1
 80271fe:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8027200:	4a3d      	ldr	r2, [pc, #244]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027202:	4b3d      	ldr	r3, [pc, #244]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027204:	685b      	ldr	r3, [r3, #4]
 8027206:	f043 0310 	orr.w	r3, r3, #16
 802720a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 802720c:	493a      	ldr	r1, [pc, #232]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802720e:	4b3a      	ldr	r3, [pc, #232]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027210:	689a      	ldr	r2, [r3, #8]
 8027212:	4b3a      	ldr	r3, [pc, #232]	; (80272fc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8027214:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8027216:	687a      	ldr	r2, [r7, #4]
 8027218:	3a01      	subs	r2, #1
 802721a:	0212      	lsls	r2, r2, #8
 802721c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 802721e:	693b      	ldr	r3, [r7, #16]
 8027220:	3b01      	subs	r3, #1
 8027222:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8027224:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8027226:	68bb      	ldr	r3, [r7, #8]
 8027228:	3b01      	subs	r3, #1
 802722a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 802722c:	4313      	orrs	r3, r2
 802722e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8027230:	4a31      	ldr	r2, [pc, #196]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027232:	4b31      	ldr	r3, [pc, #196]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027234:	685b      	ldr	r3, [r3, #4]
 8027236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802723a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 802723c:	4a2e      	ldr	r2, [pc, #184]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802723e:	4b2e      	ldr	r3, [pc, #184]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027240:	685b      	ldr	r3, [r3, #4]
 8027242:	f023 0310 	bic.w	r3, r3, #16
 8027246:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8027248:	4a2b      	ldr	r2, [pc, #172]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802724a:	4b2b      	ldr	r3, [pc, #172]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802724c:	685b      	ldr	r3, [r3, #4]
 802724e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027252:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8027254:	bf00      	nop
 8027256:	4b28      	ldr	r3, [pc, #160]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027258:	681b      	ldr	r3, [r3, #0]
 802725a:	f003 0304 	and.w	r3, r3, #4
 802725e:	2b00      	cmp	r3, #0
 8027260:	d0f9      	beq.n	8027256 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8027262:	4a25      	ldr	r2, [pc, #148]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027264:	4b24      	ldr	r3, [pc, #144]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027266:	685b      	ldr	r3, [r3, #4]
 8027268:	f023 0301 	bic.w	r3, r3, #1
 802726c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 802726e:	bf00      	nop
 8027270:	4b21      	ldr	r3, [pc, #132]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027272:	681b      	ldr	r3, [r3, #0]
 8027274:	f003 0301 	and.w	r3, r3, #1
 8027278:	2b00      	cmp	r3, #0
 802727a:	d1f9      	bne.n	8027270 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 802727c:	697b      	ldr	r3, [r7, #20]
 802727e:	4a20      	ldr	r2, [pc, #128]	; (8027300 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8027280:	fba2 2303 	umull	r2, r3, r2, r3
 8027284:	095b      	lsrs	r3, r3, #5
 8027286:	0d9b      	lsrs	r3, r3, #22
 8027288:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 802728a:	6a3a      	ldr	r2, [r7, #32]
 802728c:	693b      	ldr	r3, [r7, #16]
 802728e:	429a      	cmp	r2, r3
 8027290:	d202      	bcs.n	8027298 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8027292:	6938      	ldr	r0, [r7, #16]
 8027294:	f000 f838 	bl	8027308 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8027298:	697b      	ldr	r3, [r7, #20]
 802729a:	085b      	lsrs	r3, r3, #1
 802729c:	4a19      	ldr	r2, [pc, #100]	; (8027304 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 802729e:	fba2 2303 	umull	r2, r3, r2, r3
 80272a2:	095b      	lsrs	r3, r3, #5
 80272a4:	0d9b      	lsrs	r3, r3, #22
 80272a6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80272a8:	6a3a      	ldr	r2, [r7, #32]
 80272aa:	693b      	ldr	r3, [r7, #16]
 80272ac:	429a      	cmp	r2, r3
 80272ae:	d202      	bcs.n	80272b6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80272b0:	6938      	ldr	r0, [r7, #16]
 80272b2:	f000 f829 	bl	8027308 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80272b6:	6a38      	ldr	r0, [r7, #32]
 80272b8:	f000 f826 	bl	8027308 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80272bc:	e015      	b.n	80272ea <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80272be:	490e      	ldr	r1, [pc, #56]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80272c0:	4b0d      	ldr	r3, [pc, #52]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80272c2:	689b      	ldr	r3, [r3, #8]
 80272c4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80272c8:	6a3b      	ldr	r3, [r7, #32]
 80272ca:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80272cc:	4313      	orrs	r3, r2
 80272ce:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80272d0:	4a09      	ldr	r2, [pc, #36]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80272d2:	4b09      	ldr	r3, [pc, #36]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80272d4:	685b      	ldr	r3, [r3, #4]
 80272d6:	f043 0301 	orr.w	r3, r3, #1
 80272da:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80272dc:	bf00      	nop
 80272de:	4b06      	ldr	r3, [pc, #24]	; (80272f8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80272e0:	681b      	ldr	r3, [r3, #0]
 80272e2:	f003 0301 	and.w	r3, r3, #1
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d0f9      	beq.n	80272de <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 80272ea:	3718      	adds	r7, #24
 80272ec:	46bd      	mov	sp, r7
 80272ee:	bd80      	pop	{r7, pc}
 80272f0:	431bde83 	.word	0x431bde83
 80272f4:	aaaaaaab 	.word	0xaaaaaaab
 80272f8:	50004710 	.word	0x50004710
 80272fc:	f08080ff 	.word	0xf08080ff
 8027300:	88888889 	.word	0x88888889
 8027304:	b60b60b7 	.word	0xb60b60b7

08027308 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8027308:	b580      	push	{r7, lr}
 802730a:	b082      	sub	sp, #8
 802730c:	af00      	add	r7, sp, #0
 802730e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8027310:	4907      	ldr	r1, [pc, #28]	; (8027330 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8027312:	4b07      	ldr	r3, [pc, #28]	; (8027330 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8027314:	689b      	ldr	r3, [r3, #8]
 8027316:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	3b01      	subs	r3, #1
 802731e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8027320:	4313      	orrs	r3, r2
 8027322:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8027324:	2032      	movs	r0, #50	; 0x32
 8027326:	f7ff fbb1 	bl	8026a8c <XMC_SCU_lDelay>
}
 802732a:	3708      	adds	r7, #8
 802732c:	46bd      	mov	sp, r7
 802732e:	bd80      	pop	{r7, pc}
 8027330:	50004710 	.word	0x50004710

08027334 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8027334:	b480      	push	{r7}
 8027336:	b083      	sub	sp, #12
 8027338:	af00      	add	r7, sp, #0
 802733a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 802733c:	687b      	ldr	r3, [r7, #4]
 802733e:	68db      	ldr	r3, [r3, #12]
 8027340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8027344:	687b      	ldr	r3, [r7, #4]
 8027346:	60da      	str	r2, [r3, #12]
}
 8027348:	370c      	adds	r7, #12
 802734a:	46bd      	mov	sp, r7
 802734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027350:	4770      	bx	lr
 8027352:	bf00      	nop

08027354 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8027354:	b580      	push	{r7, lr}
 8027356:	b082      	sub	sp, #8
 8027358:	af00      	add	r7, sp, #0
 802735a:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 802735c:	687b      	ldr	r3, [r7, #4]
 802735e:	4a12      	ldr	r2, [pc, #72]	; (80273a8 <XMC_CCU4_lDeassertReset+0x54>)
 8027360:	4293      	cmp	r3, r2
 8027362:	d011      	beq.n	8027388 <XMC_CCU4_lDeassertReset+0x34>
 8027364:	4a10      	ldr	r2, [pc, #64]	; (80273a8 <XMC_CCU4_lDeassertReset+0x54>)
 8027366:	4293      	cmp	r3, r2
 8027368:	d803      	bhi.n	8027372 <XMC_CCU4_lDeassertReset+0x1e>
 802736a:	4a10      	ldr	r2, [pc, #64]	; (80273ac <XMC_CCU4_lDeassertReset+0x58>)
 802736c:	4293      	cmp	r3, r2
 802736e:	d007      	beq.n	8027380 <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8027370:	e016      	b.n	80273a0 <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8027372:	4a0f      	ldr	r2, [pc, #60]	; (80273b0 <XMC_CCU4_lDeassertReset+0x5c>)
 8027374:	4293      	cmp	r3, r2
 8027376:	d00b      	beq.n	8027390 <XMC_CCU4_lDeassertReset+0x3c>
 8027378:	4a0e      	ldr	r2, [pc, #56]	; (80273b4 <XMC_CCU4_lDeassertReset+0x60>)
 802737a:	4293      	cmp	r3, r2
 802737c:	d00c      	beq.n	8027398 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 802737e:	e00f      	b.n	80273a0 <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8027380:	2004      	movs	r0, #4
 8027382:	f7ff fc37 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8027386:	e00b      	b.n	80273a0 <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8027388:	2008      	movs	r0, #8
 802738a:	f7ff fc33 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 802738e:	e007      	b.n	80273a0 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8027390:	2010      	movs	r0, #16
 8027392:	f7ff fc2f 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8027396:	e003      	b.n	80273a0 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8027398:	4807      	ldr	r0, [pc, #28]	; (80273b8 <XMC_CCU4_lDeassertReset+0x64>)
 802739a:	f7ff fc2b 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 802739e:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 80273a0:	3708      	adds	r7, #8
 80273a2:	46bd      	mov	sp, r7
 80273a4:	bd80      	pop	{r7, pc}
 80273a6:	bf00      	nop
 80273a8:	40010000 	.word	0x40010000
 80273ac:	4000c000 	.word	0x4000c000
 80273b0:	40014000 	.word	0x40014000
 80273b4:	48004000 	.word	0x48004000
 80273b8:	10000001 	.word	0x10000001

080273bc <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80273bc:	b580      	push	{r7, lr}
 80273be:	b082      	sub	sp, #8
 80273c0:	af00      	add	r7, sp, #0
 80273c2:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 80273c4:	687b      	ldr	r3, [r7, #4]
 80273c6:	4a12      	ldr	r2, [pc, #72]	; (8027410 <XMC_CCU4_lUngateClock+0x54>)
 80273c8:	4293      	cmp	r3, r2
 80273ca:	d011      	beq.n	80273f0 <XMC_CCU4_lUngateClock+0x34>
 80273cc:	4a10      	ldr	r2, [pc, #64]	; (8027410 <XMC_CCU4_lUngateClock+0x54>)
 80273ce:	4293      	cmp	r3, r2
 80273d0:	d803      	bhi.n	80273da <XMC_CCU4_lUngateClock+0x1e>
 80273d2:	4a10      	ldr	r2, [pc, #64]	; (8027414 <XMC_CCU4_lUngateClock+0x58>)
 80273d4:	4293      	cmp	r3, r2
 80273d6:	d007      	beq.n	80273e8 <XMC_CCU4_lUngateClock+0x2c>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 80273d8:	e016      	b.n	8027408 <XMC_CCU4_lUngateClock+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 80273da:	4a0f      	ldr	r2, [pc, #60]	; (8027418 <XMC_CCU4_lUngateClock+0x5c>)
 80273dc:	4293      	cmp	r3, r2
 80273de:	d00b      	beq.n	80273f8 <XMC_CCU4_lUngateClock+0x3c>
 80273e0:	4a0e      	ldr	r2, [pc, #56]	; (802741c <XMC_CCU4_lUngateClock+0x60>)
 80273e2:	4293      	cmp	r3, r2
 80273e4:	d00c      	beq.n	8027400 <XMC_CCU4_lUngateClock+0x44>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 80273e6:	e00f      	b.n	8027408 <XMC_CCU4_lUngateClock+0x4c>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80273e8:	2004      	movs	r0, #4
 80273ea:	f7ff fd8b 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80273ee:	e00b      	b.n	8027408 <XMC_CCU4_lUngateClock+0x4c>
      
#if defined(CCU41)      
    case (uint32_t)CCU41:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80273f0:	2008      	movs	r0, #8
 80273f2:	f7ff fd87 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80273f6:	e007      	b.n	8027408 <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU42)      
    case (uint32_t)CCU42:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80273f8:	2010      	movs	r0, #16
 80273fa:	f7ff fd83 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80273fe:	e003      	b.n	8027408 <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU43)      
    case (uint32_t)CCU43:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8027400:	4807      	ldr	r0, [pc, #28]	; (8027420 <XMC_CCU4_lUngateClock+0x64>)
 8027402:	f7ff fd7f 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8027406:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
 8027408:	3708      	adds	r7, #8
 802740a:	46bd      	mov	sp, r7
 802740c:	bd80      	pop	{r7, pc}
 802740e:	bf00      	nop
 8027410:	40010000 	.word	0x40010000
 8027414:	4000c000 	.word	0x4000c000
 8027418:	40014000 	.word	0x40014000
 802741c:	48004000 	.word	0x48004000
 8027420:	10000001 	.word	0x10000001

08027424 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8027424:	b580      	push	{r7, lr}
 8027426:	b082      	sub	sp, #8
 8027428:	af00      	add	r7, sp, #0
 802742a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 802742c:	2010      	movs	r0, #16
 802742e:	f7ff fd59 	bl	8026ee4 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8027432:	6878      	ldr	r0, [r7, #4]
 8027434:	f7ff ffc2 	bl	80273bc <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8027438:	6878      	ldr	r0, [r7, #4]
 802743a:	f7ff ff8b 	bl	8027354 <XMC_CCU4_lDeassertReset>
#endif
}
 802743e:	3708      	adds	r7, #8
 8027440:	46bd      	mov	sp, r7
 8027442:	bd80      	pop	{r7, pc}

08027444 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8027444:	b580      	push	{r7, lr}
 8027446:	b084      	sub	sp, #16
 8027448:	af00      	add	r7, sp, #0
 802744a:	6078      	str	r0, [r7, #4]
 802744c:	460b      	mov	r3, r1
 802744e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8027450:	6878      	ldr	r0, [r7, #4]
 8027452:	f7ff ffe7 	bl	8027424 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8027456:	6878      	ldr	r0, [r7, #4]
 8027458:	f7ff ff6c 	bl	8027334 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 802745c:	687b      	ldr	r3, [r7, #4]
 802745e:	681b      	ldr	r3, [r3, #0]
 8027460:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8027462:	68fb      	ldr	r3, [r7, #12]
 8027464:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027468:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 802746a:	78fb      	ldrb	r3, [r7, #3]
 802746c:	039b      	lsls	r3, r3, #14
 802746e:	68fa      	ldr	r2, [r7, #12]
 8027470:	4313      	orrs	r3, r2
 8027472:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8027474:	687b      	ldr	r3, [r7, #4]
 8027476:	68fa      	ldr	r2, [r7, #12]
 8027478:	601a      	str	r2, [r3, #0]
}
 802747a:	3710      	adds	r7, #16
 802747c:	46bd      	mov	sp, r7
 802747e:	bd80      	pop	{r7, pc}

08027480 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8027480:	b480      	push	{r7}
 8027482:	b083      	sub	sp, #12
 8027484:	af00      	add	r7, sp, #0
 8027486:	6078      	str	r0, [r7, #4]
 8027488:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 802748a:	683b      	ldr	r3, [r7, #0]
 802748c:	681a      	ldr	r2, [r3, #0]
 802748e:	687b      	ldr	r3, [r7, #4]
 8027490:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8027492:	683b      	ldr	r3, [r7, #0]
 8027494:	795b      	ldrb	r3, [r3, #5]
 8027496:	f3c3 1340 	ubfx	r3, r3, #5, #1
 802749a:	b2db      	uxtb	r3, r3
 802749c:	051a      	lsls	r2, r3, #20
 802749e:	687b      	ldr	r3, [r7, #4]
 80274a0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80274a2:	683b      	ldr	r3, [r7, #0]
 80274a4:	791b      	ldrb	r3, [r3, #4]
 80274a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80274aa:	b2db      	uxtb	r3, r3
 80274ac:	461a      	mov	r2, r3
 80274ae:	687b      	ldr	r3, [r7, #4]
 80274b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80274b2:	683b      	ldr	r3, [r7, #0]
 80274b4:	795b      	ldrb	r3, [r3, #5]
 80274b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80274ba:	b2db      	uxtb	r3, r3
 80274bc:	461a      	mov	r2, r3
 80274be:	687b      	ldr	r3, [r7, #4]
 80274c0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80274c2:	683b      	ldr	r3, [r7, #0]
 80274c4:	795b      	ldrb	r3, [r3, #5]
 80274c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80274ca:	b2db      	uxtb	r3, r3
 80274cc:	461a      	mov	r2, r3
 80274ce:	687b      	ldr	r3, [r7, #4]
 80274d0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80274d2:	683b      	ldr	r3, [r7, #0]
 80274d4:	791b      	ldrb	r3, [r3, #4]
 80274d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80274da:	b2db      	uxtb	r3, r3
 80274dc:	461a      	mov	r2, r3
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80274e2:	370c      	adds	r7, #12
 80274e4:	46bd      	mov	sp, r7
 80274e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274ea:	4770      	bx	lr

080274ec <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80274ec:	b480      	push	{r7}
 80274ee:	b087      	sub	sp, #28
 80274f0:	af00      	add	r7, sp, #0
 80274f2:	6078      	str	r0, [r7, #4]
 80274f4:	460b      	mov	r3, r1
 80274f6:	70fb      	strb	r3, [r7, #3]
 80274f8:	4613      	mov	r3, r2
 80274fa:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80274fc:	687b      	ldr	r3, [r7, #4]
 80274fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027502:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8027504:	78fb      	ldrb	r3, [r7, #3]
 8027506:	2b09      	cmp	r3, #9
 8027508:	d82c      	bhi.n	8027564 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 802750a:	a201      	add	r2, pc, #4	; (adr r2, 8027510 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 802750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027510:	08027539 	.word	0x08027539
 8027514:	08027539 	.word	0x08027539
 8027518:	08027543 	.word	0x08027543
 802751c:	08027543 	.word	0x08027543
 8027520:	08027565 	.word	0x08027565
 8027524:	08027565 	.word	0x08027565
 8027528:	08027565 	.word	0x08027565
 802752c:	08027565 	.word	0x08027565
 8027530:	0802754d 	.word	0x0802754d
 8027534:	08027559 	.word	0x08027559
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8027538:	2303      	movs	r3, #3
 802753a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 802753c:	2300      	movs	r3, #0
 802753e:	617b      	str	r3, [r7, #20]
      break;
 8027540:	e016      	b.n	8027570 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8027542:	230c      	movs	r3, #12
 8027544:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8027546:	2302      	movs	r3, #2
 8027548:	617b      	str	r3, [r7, #20]
      break;
 802754a:	e011      	b.n	8027570 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 802754c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027550:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8027552:	2308      	movs	r3, #8
 8027554:	617b      	str	r3, [r7, #20]
      break;
 8027556:	e00b      	b.n	8027570 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8027558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802755c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 802755e:	230a      	movs	r3, #10
 8027560:	617b      	str	r3, [r7, #20]
      break;
 8027562:	e005      	b.n	8027570 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8027564:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8027568:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 802756a:	230c      	movs	r3, #12
 802756c:	617b      	str	r3, [r7, #20]
      break;
 802756e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8027570:	693b      	ldr	r3, [r7, #16]
 8027572:	43db      	mvns	r3, r3
 8027574:	68fa      	ldr	r2, [r7, #12]
 8027576:	4013      	ands	r3, r2
 8027578:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 802757a:	78ba      	ldrb	r2, [r7, #2]
 802757c:	697b      	ldr	r3, [r7, #20]
 802757e:	fa02 f303 	lsl.w	r3, r2, r3
 8027582:	68fa      	ldr	r2, [r7, #12]
 8027584:	4313      	orrs	r3, r2
 8027586:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8027588:	687b      	ldr	r3, [r7, #4]
 802758a:	68fa      	ldr	r2, [r7, #12]
 802758c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8027590:	371c      	adds	r7, #28
 8027592:	46bd      	mov	sp, r7
 8027594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027598:	4770      	bx	lr
 802759a:	bf00      	nop

0802759c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 802759c:	b480      	push	{r7}
 802759e:	b083      	sub	sp, #12
 80275a0:	af00      	add	r7, sp, #0
 80275a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	68db      	ldr	r3, [r3, #12]
 80275a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80275ac:	687b      	ldr	r3, [r7, #4]
 80275ae:	60da      	str	r2, [r3, #12]
}
 80275b0:	370c      	adds	r7, #12
 80275b2:	46bd      	mov	sp, r7
 80275b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275b8:	4770      	bx	lr
 80275ba:	bf00      	nop

080275bc <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80275bc:	b480      	push	{r7}
 80275be:	b083      	sub	sp, #12
 80275c0:	af00      	add	r7, sp, #0
 80275c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80275c4:	687b      	ldr	r3, [r7, #4]
 80275c6:	2201      	movs	r2, #1
 80275c8:	611a      	str	r2, [r3, #16]
}
 80275ca:	370c      	adds	r7, #12
 80275cc:	46bd      	mov	sp, r7
 80275ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275d2:	4770      	bx	lr

080275d4 <XMC_CCU8_lDeassertReset>:
      break;   
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 80275d4:	b580      	push	{r7, lr}
 80275d6:	b082      	sub	sp, #8
 80275d8:	af00      	add	r7, sp, #0
 80275da:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 80275dc:	687b      	ldr	r3, [r7, #4]
 80275de:	4a09      	ldr	r2, [pc, #36]	; (8027604 <XMC_CCU8_lDeassertReset+0x30>)
 80275e0:	4293      	cmp	r3, r2
 80275e2:	d003      	beq.n	80275ec <XMC_CCU8_lDeassertReset+0x18>
 80275e4:	4a08      	ldr	r2, [pc, #32]	; (8027608 <XMC_CCU8_lDeassertReset+0x34>)
 80275e6:	4293      	cmp	r3, r2
 80275e8:	d004      	beq.n	80275f4 <XMC_CCU8_lDeassertReset+0x20>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80275ea:	e008      	b.n	80275fe <XMC_CCU8_lDeassertReset+0x2a>
__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU80:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 80275ec:	2080      	movs	r0, #128	; 0x80
 80275ee:	f7ff fb01 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80275f2:	e004      	b.n	80275fe <XMC_CCU8_lDeassertReset+0x2a>
      
#if defined(CCU81)
    case (uint32_t)CCU81:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 80275f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80275f8:	f7ff fafc 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80275fc:	bf00      	nop

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
  }
}
 80275fe:	3708      	adds	r7, #8
 8027600:	46bd      	mov	sp, r7
 8027602:	bd80      	pop	{r7, pc}
 8027604:	40020000 	.word	0x40020000
 8027608:	40024000 	.word	0x40024000

0802760c <XMC_CCU8_lUngateClock>:
      break;   
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 802760c:	b580      	push	{r7, lr}
 802760e:	b082      	sub	sp, #8
 8027610:	af00      	add	r7, sp, #0
 8027612:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8027614:	687b      	ldr	r3, [r7, #4]
 8027616:	4a09      	ldr	r2, [pc, #36]	; (802763c <XMC_CCU8_lUngateClock+0x30>)
 8027618:	4293      	cmp	r3, r2
 802761a:	d003      	beq.n	8027624 <XMC_CCU8_lUngateClock+0x18>
 802761c:	4a08      	ldr	r2, [pc, #32]	; (8027640 <XMC_CCU8_lUngateClock+0x34>)
 802761e:	4293      	cmp	r3, r2
 8027620:	d004      	beq.n	802762c <XMC_CCU8_lUngateClock+0x20>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
      break;   
 8027622:	e008      	b.n	8027636 <XMC_CCU8_lUngateClock+0x2a>
__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU80:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8027624:	2080      	movs	r0, #128	; 0x80
 8027626:	f7ff fc6d 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 802762a:	e004      	b.n	8027636 <XMC_CCU8_lUngateClock+0x2a>
      
#if defined(CCU81)      
    case (uint32_t)CCU81:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 802762c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8027630:	f7ff fc68 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8027634:	bf00      	nop

    default:
      XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
      break;   
  }
}
 8027636:	3708      	adds	r7, #8
 8027638:	46bd      	mov	sp, r7
 802763a:	bd80      	pop	{r7, pc}
 802763c:	40020000 	.word	0x40020000
 8027640:	40024000 	.word	0x40024000

08027644 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8027644:	b580      	push	{r7, lr}
 8027646:	b082      	sub	sp, #8
 8027648:	af00      	add	r7, sp, #0
 802764a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 802764c:	2010      	movs	r0, #16
 802764e:	f7ff fc49 	bl	8026ee4 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8027652:	6878      	ldr	r0, [r7, #4]
 8027654:	f7ff ffda 	bl	802760c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8027658:	6878      	ldr	r0, [r7, #4]
 802765a:	f7ff ffbb 	bl	80275d4 <XMC_CCU8_lDeassertReset>
#endif
}
 802765e:	3708      	adds	r7, #8
 8027660:	46bd      	mov	sp, r7
 8027662:	bd80      	pop	{r7, pc}

08027664 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8027664:	b580      	push	{r7, lr}
 8027666:	b084      	sub	sp, #16
 8027668:	af00      	add	r7, sp, #0
 802766a:	6078      	str	r0, [r7, #4]
 802766c:	460b      	mov	r3, r1
 802766e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8027670:	6878      	ldr	r0, [r7, #4]
 8027672:	f7ff ffe7 	bl	8027644 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8027676:	6878      	ldr	r0, [r7, #4]
 8027678:	f7ff ff90 	bl	802759c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 802767c:	687b      	ldr	r3, [r7, #4]
 802767e:	681b      	ldr	r3, [r3, #0]
 8027680:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8027682:	68fb      	ldr	r3, [r7, #12]
 8027684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027688:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 802768a:	78fb      	ldrb	r3, [r7, #3]
 802768c:	039b      	lsls	r3, r3, #14
 802768e:	68fa      	ldr	r2, [r7, #12]
 8027690:	4313      	orrs	r3, r2
 8027692:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	68fa      	ldr	r2, [r7, #12]
 8027698:	601a      	str	r2, [r3, #0]
}
 802769a:	3710      	adds	r7, #16
 802769c:	46bd      	mov	sp, r7
 802769e:	bd80      	pop	{r7, pc}

080276a0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80276a0:	b580      	push	{r7, lr}
 80276a2:	b082      	sub	sp, #8
 80276a4:	af00      	add	r7, sp, #0
 80276a6:	6078      	str	r0, [r7, #4]
 80276a8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80276aa:	6878      	ldr	r0, [r7, #4]
 80276ac:	f7ff ff86 	bl	80275bc <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80276b0:	683b      	ldr	r3, [r7, #0]
 80276b2:	681a      	ldr	r2, [r3, #0]
 80276b4:	687b      	ldr	r3, [r7, #4]
 80276b6:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80276b8:	683b      	ldr	r3, [r7, #0]
 80276ba:	7b5b      	ldrb	r3, [r3, #13]
 80276bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80276c0:	b2db      	uxtb	r3, r3
 80276c2:	051a      	lsls	r2, r3, #20
 80276c4:	687b      	ldr	r3, [r7, #4]
 80276c6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80276c8:	683b      	ldr	r3, [r7, #0]
 80276ca:	7b1b      	ldrb	r3, [r3, #12]
 80276cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80276d0:	b2db      	uxtb	r3, r3
 80276d2:	461a      	mov	r2, r3
 80276d4:	687b      	ldr	r3, [r7, #4]
 80276d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80276d8:	683b      	ldr	r3, [r7, #0]
 80276da:	7b1b      	ldrb	r3, [r3, #12]
 80276dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80276e0:	b2db      	uxtb	r3, r3
 80276e2:	461a      	mov	r2, r3
 80276e4:	687b      	ldr	r3, [r7, #4]
 80276e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80276e8:	683b      	ldr	r3, [r7, #0]
 80276ea:	7b5b      	ldrb	r3, [r3, #13]
 80276ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80276f0:	b2db      	uxtb	r3, r3
 80276f2:	461a      	mov	r2, r3
 80276f4:	687b      	ldr	r3, [r7, #4]
 80276f6:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 80276f8:	683b      	ldr	r3, [r7, #0]
 80276fa:	685a      	ldr	r2, [r3, #4]
 80276fc:	687b      	ldr	r3, [r7, #4]
 80276fe:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8027700:	683b      	ldr	r3, [r7, #0]
 8027702:	689b      	ldr	r3, [r3, #8]
 8027704:	f083 0214 	eor.w	r2, r3, #20
 8027708:	687b      	ldr	r3, [r7, #4]
 802770a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 802770c:	3708      	adds	r7, #8
 802770e:	46bd      	mov	sp, r7
 8027710:	bd80      	pop	{r7, pc}
 8027712:	bf00      	nop

08027714 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8027714:	b480      	push	{r7}
 8027716:	b085      	sub	sp, #20
 8027718:	af00      	add	r7, sp, #0
 802771a:	6078      	str	r0, [r7, #4]
 802771c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	681b      	ldr	r3, [r3, #0]
 8027722:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8027724:	683b      	ldr	r3, [r7, #0]
 8027726:	0c1b      	lsrs	r3, r3, #16
 8027728:	43db      	mvns	r3, r3
 802772a:	68fa      	ldr	r2, [r7, #12]
 802772c:	4013      	ands	r3, r2
 802772e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8027730:	683b      	ldr	r3, [r7, #0]
 8027732:	b29b      	uxth	r3, r3
 8027734:	68fa      	ldr	r2, [r7, #12]
 8027736:	4313      	orrs	r3, r2
 8027738:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 802773a:	687b      	ldr	r3, [r7, #4]
 802773c:	68fa      	ldr	r2, [r7, #12]
 802773e:	601a      	str	r2, [r3, #0]
}
 8027740:	3714      	adds	r7, #20
 8027742:	46bd      	mov	sp, r7
 8027744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027748:	4770      	bx	lr
 802774a:	bf00      	nop

0802774c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 802774c:	b480      	push	{r7}
 802774e:	b085      	sub	sp, #20
 8027750:	af00      	add	r7, sp, #0
 8027752:	6078      	str	r0, [r7, #4]
 8027754:	460b      	mov	r3, r1
 8027756:	70fb      	strb	r3, [r7, #3]
 8027758:	4613      	mov	r3, r2
 802775a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 802775c:	687b      	ldr	r3, [r7, #4]
 802775e:	685b      	ldr	r3, [r3, #4]
 8027760:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8027762:	68bb      	ldr	r3, [r7, #8]
 8027764:	f023 0303 	bic.w	r3, r3, #3
 8027768:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 802776a:	78fb      	ldrb	r3, [r7, #3]
 802776c:	68ba      	ldr	r2, [r7, #8]
 802776e:	4313      	orrs	r3, r2
 8027770:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8027772:	687b      	ldr	r3, [r7, #4]
 8027774:	68ba      	ldr	r2, [r7, #8]
 8027776:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8027778:	687b      	ldr	r3, [r7, #4]
 802777a:	695b      	ldr	r3, [r3, #20]
 802777c:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 802777e:	78bb      	ldrb	r3, [r7, #2]
 8027780:	2b01      	cmp	r3, #1
 8027782:	d104      	bne.n	802778e <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8027784:	68fb      	ldr	r3, [r7, #12]
 8027786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802778a:	60fb      	str	r3, [r7, #12]
 802778c:	e003      	b.n	8027796 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 802778e:	68fb      	ldr	r3, [r7, #12]
 8027790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027794:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8027796:	687b      	ldr	r3, [r7, #4]
 8027798:	68fa      	ldr	r2, [r7, #12]
 802779a:	615a      	str	r2, [r3, #20]
}
 802779c:	3714      	adds	r7, #20
 802779e:	46bd      	mov	sp, r7
 80277a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277a4:	4770      	bx	lr
 80277a6:	bf00      	nop

080277a8 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 80277a8:	b480      	push	{r7}
 80277aa:	b085      	sub	sp, #20
 80277ac:	af00      	add	r7, sp, #0
 80277ae:	6078      	str	r0, [r7, #4]
 80277b0:	460b      	mov	r3, r1
 80277b2:	70fb      	strb	r3, [r7, #3]
 80277b4:	4613      	mov	r3, r2
 80277b6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	685b      	ldr	r3, [r3, #4]
 80277bc:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 80277be:	68fb      	ldr	r3, [r7, #12]
 80277c0:	f023 030c 	bic.w	r3, r3, #12
 80277c4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 80277c6:	78fb      	ldrb	r3, [r7, #3]
 80277c8:	009b      	lsls	r3, r3, #2
 80277ca:	68fa      	ldr	r2, [r7, #12]
 80277cc:	4313      	orrs	r3, r2
 80277ce:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	68fa      	ldr	r2, [r7, #12]
 80277d4:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 80277d6:	687b      	ldr	r3, [r7, #4]
 80277d8:	695b      	ldr	r3, [r3, #20]
 80277da:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 80277dc:	68bb      	ldr	r3, [r7, #8]
 80277de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277e2:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 80277e4:	78bb      	ldrb	r3, [r7, #2]
 80277e6:	021b      	lsls	r3, r3, #8
 80277e8:	68ba      	ldr	r2, [r7, #8]
 80277ea:	4313      	orrs	r3, r2
 80277ec:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	68ba      	ldr	r2, [r7, #8]
 80277f2:	615a      	str	r2, [r3, #20]
}
 80277f4:	3714      	adds	r7, #20
 80277f6:	46bd      	mov	sp, r7
 80277f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277fc:	4770      	bx	lr
 80277fe:	bf00      	nop

08027800 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8027800:	b480      	push	{r7}
 8027802:	b085      	sub	sp, #20
 8027804:	af00      	add	r7, sp, #0
 8027806:	6078      	str	r0, [r7, #4]
 8027808:	460b      	mov	r3, r1
 802780a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 802780c:	687b      	ldr	r3, [r7, #4]
 802780e:	685b      	ldr	r3, [r3, #4]
 8027810:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8027812:	68fb      	ldr	r3, [r7, #12]
 8027814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8027818:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 802781a:	78fb      	ldrb	r3, [r7, #3]
 802781c:	031b      	lsls	r3, r3, #12
 802781e:	68fa      	ldr	r2, [r7, #12]
 8027820:	4313      	orrs	r3, r2
 8027822:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027824:	687b      	ldr	r3, [r7, #4]
 8027826:	68fa      	ldr	r2, [r7, #12]
 8027828:	605a      	str	r2, [r3, #4]
}
 802782a:	3714      	adds	r7, #20
 802782c:	46bd      	mov	sp, r7
 802782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027832:	4770      	bx	lr

08027834 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8027834:	b480      	push	{r7}
 8027836:	b085      	sub	sp, #20
 8027838:	af00      	add	r7, sp, #0
 802783a:	6078      	str	r0, [r7, #4]
 802783c:	460b      	mov	r3, r1
 802783e:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8027840:	687b      	ldr	r3, [r7, #4]
 8027842:	695b      	ldr	r3, [r3, #20]
 8027844:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8027846:	68fb      	ldr	r3, [r7, #12]
 8027848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802784c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 802784e:	78fb      	ldrb	r3, [r7, #3]
 8027850:	01db      	lsls	r3, r3, #7
 8027852:	68fa      	ldr	r2, [r7, #12]
 8027854:	4313      	orrs	r3, r2
 8027856:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	68fa      	ldr	r2, [r7, #12]
 802785c:	615a      	str	r2, [r3, #20]
}
 802785e:	3714      	adds	r7, #20
 8027860:	46bd      	mov	sp, r7
 8027862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027866:	4770      	bx	lr

08027868 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8027868:	b480      	push	{r7}
 802786a:	b085      	sub	sp, #20
 802786c:	af00      	add	r7, sp, #0
 802786e:	6078      	str	r0, [r7, #4]
 8027870:	4608      	mov	r0, r1
 8027872:	4611      	mov	r1, r2
 8027874:	461a      	mov	r2, r3
 8027876:	4603      	mov	r3, r0
 8027878:	70fb      	strb	r3, [r7, #3]
 802787a:	460b      	mov	r3, r1
 802787c:	70bb      	strb	r3, [r7, #2]
 802787e:	4613      	mov	r3, r2
 8027880:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8027882:	687b      	ldr	r3, [r7, #4]
 8027884:	685b      	ldr	r3, [r3, #4]
 8027886:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8027888:	68bb      	ldr	r3, [r7, #8]
 802788a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 802788e:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8027890:	78fb      	ldrb	r3, [r7, #3]
 8027892:	049b      	lsls	r3, r3, #18
 8027894:	68ba      	ldr	r2, [r7, #8]
 8027896:	4313      	orrs	r3, r2
 8027898:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	68ba      	ldr	r2, [r7, #8]
 802789e:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80278a0:	687b      	ldr	r3, [r7, #4]
 80278a2:	695b      	ldr	r3, [r3, #20]
 80278a4:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 80278a6:	78bb      	ldrb	r3, [r7, #2]
 80278a8:	2b01      	cmp	r3, #1
 80278aa:	d104      	bne.n	80278b6 <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 80278ac:	68fb      	ldr	r3, [r7, #12]
 80278ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80278b2:	60fb      	str	r3, [r7, #12]
 80278b4:	e003      	b.n	80278be <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 80278b6:	68fb      	ldr	r3, [r7, #12]
 80278b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80278bc:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 80278be:	7e3b      	ldrb	r3, [r7, #24]
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	d004      	beq.n	80278ce <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 80278c4:	68fb      	ldr	r3, [r7, #12]
 80278c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80278ca:	60fb      	str	r3, [r7, #12]
 80278cc:	e003      	b.n	80278d6 <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 80278ce:	68fb      	ldr	r3, [r7, #12]
 80278d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80278d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 80278d6:	68fb      	ldr	r3, [r7, #12]
 80278d8:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80278dc:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 80278de:	787b      	ldrb	r3, [r7, #1]
 80278e0:	06db      	lsls	r3, r3, #27
 80278e2:	68fa      	ldr	r2, [r7, #12]
 80278e4:	4313      	orrs	r3, r2
 80278e6:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 80278e8:	687b      	ldr	r3, [r7, #4]
 80278ea:	68fa      	ldr	r2, [r7, #12]
 80278ec:	615a      	str	r2, [r3, #20]
}
 80278ee:	3714      	adds	r7, #20
 80278f0:	46bd      	mov	sp, r7
 80278f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278f6:	4770      	bx	lr

080278f8 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80278f8:	b480      	push	{r7}
 80278fa:	b085      	sub	sp, #20
 80278fc:	af00      	add	r7, sp, #0
 80278fe:	6078      	str	r0, [r7, #4]
 8027900:	460b      	mov	r3, r1
 8027902:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8027904:	687b      	ldr	r3, [r7, #4]
 8027906:	685b      	ldr	r3, [r3, #4]
 8027908:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 802790a:	68fb      	ldr	r3, [r7, #12]
 802790c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027910:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8027912:	78fb      	ldrb	r3, [r7, #3]
 8027914:	039b      	lsls	r3, r3, #14
 8027916:	68fa      	ldr	r2, [r7, #12]
 8027918:	4313      	orrs	r3, r2
 802791a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	68fa      	ldr	r2, [r7, #12]
 8027920:	605a      	str	r2, [r3, #4]
}
 8027922:	3714      	adds	r7, #20
 8027924:	46bd      	mov	sp, r7
 8027926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802792a:	4770      	bx	lr

0802792c <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 802792c:	b480      	push	{r7}
 802792e:	b085      	sub	sp, #20
 8027930:	af00      	add	r7, sp, #0
 8027932:	6078      	str	r0, [r7, #4]
 8027934:	460b      	mov	r3, r1
 8027936:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8027938:	687b      	ldr	r3, [r7, #4]
 802793a:	685b      	ldr	r3, [r3, #4]
 802793c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 802793e:	68fb      	ldr	r3, [r7, #12]
 8027940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027944:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 8027946:	78fb      	ldrb	r3, [r7, #3]
 8027948:	021b      	lsls	r3, r3, #8
 802794a:	68fa      	ldr	r2, [r7, #12]
 802794c:	4313      	orrs	r3, r2
 802794e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	68fa      	ldr	r2, [r7, #12]
 8027954:	605a      	str	r2, [r3, #4]
}
 8027956:	3714      	adds	r7, #20
 8027958:	46bd      	mov	sp, r7
 802795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802795e:	4770      	bx	lr

08027960 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8027960:	b480      	push	{r7}
 8027962:	b085      	sub	sp, #20
 8027964:	af00      	add	r7, sp, #0
 8027966:	6078      	str	r0, [r7, #4]
 8027968:	460b      	mov	r3, r1
 802796a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 802796c:	687b      	ldr	r3, [r7, #4]
 802796e:	685b      	ldr	r3, [r3, #4]
 8027970:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8027978:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 802797a:	78fb      	ldrb	r3, [r7, #3]
 802797c:	029b      	lsls	r3, r3, #10
 802797e:	68fa      	ldr	r2, [r7, #12]
 8027980:	4313      	orrs	r3, r2
 8027982:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	68fa      	ldr	r2, [r7, #12]
 8027988:	605a      	str	r2, [r3, #4]
}
 802798a:	3714      	adds	r7, #20
 802798c:	46bd      	mov	sp, r7
 802798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027992:	4770      	bx	lr

08027994 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 8027994:	b480      	push	{r7}
 8027996:	b085      	sub	sp, #20
 8027998:	af00      	add	r7, sp, #0
 802799a:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 802799c:	687b      	ldr	r3, [r7, #4]
 802799e:	685b      	ldr	r3, [r3, #4]
 80279a0:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 80279a2:	68fb      	ldr	r3, [r7, #12]
 80279a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80279a8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 80279aa:	68fb      	ldr	r3, [r7, #12]
 80279ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80279b0:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80279b2:	687b      	ldr	r3, [r7, #4]
 80279b4:	68fa      	ldr	r2, [r7, #12]
 80279b6:	605a      	str	r2, [r3, #4]
}
 80279b8:	3714      	adds	r7, #20
 80279ba:	46bd      	mov	sp, r7
 80279bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279c0:	4770      	bx	lr
 80279c2:	bf00      	nop

080279c4 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80279c4:	b480      	push	{r7}
 80279c6:	b085      	sub	sp, #20
 80279c8:	af00      	add	r7, sp, #0
 80279ca:	6078      	str	r0, [r7, #4]
 80279cc:	460b      	mov	r3, r1
 80279ce:	70fb      	strb	r3, [r7, #3]
 80279d0:	4613      	mov	r3, r2
 80279d2:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80279d4:	687b      	ldr	r3, [r7, #4]
 80279d6:	685b      	ldr	r3, [r3, #4]
 80279d8:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80279da:	68bb      	ldr	r3, [r7, #8]
 80279dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80279e0:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80279e2:	68bb      	ldr	r3, [r7, #8]
 80279e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80279e8:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80279ea:	687b      	ldr	r3, [r7, #4]
 80279ec:	68ba      	ldr	r2, [r7, #8]
 80279ee:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 80279f0:	687b      	ldr	r3, [r7, #4]
 80279f2:	695b      	ldr	r3, [r3, #20]
 80279f4:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 80279f6:	78bb      	ldrb	r3, [r7, #2]
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	d004      	beq.n	8027a06 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 80279fc:	68fb      	ldr	r3, [r7, #12]
 80279fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8027a02:	60fb      	str	r3, [r7, #12]
 8027a04:	e003      	b.n	8027a0e <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8027a06:	68fb      	ldr	r3, [r7, #12]
 8027a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8027a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8027a0e:	78fb      	ldrb	r3, [r7, #3]
 8027a10:	2b01      	cmp	r3, #1
 8027a12:	d104      	bne.n	8027a1e <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8027a14:	68fb      	ldr	r3, [r7, #12]
 8027a16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8027a1a:	60fb      	str	r3, [r7, #12]
 8027a1c:	e003      	b.n	8027a26 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8027a1e:	68fb      	ldr	r3, [r7, #12]
 8027a20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8027a24:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8027a26:	687b      	ldr	r3, [r7, #4]
 8027a28:	68fa      	ldr	r2, [r7, #12]
 8027a2a:	615a      	str	r2, [r3, #20]
}
 8027a2c:	3714      	adds	r7, #20
 8027a2e:	46bd      	mov	sp, r7
 8027a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a34:	4770      	bx	lr
 8027a36:	bf00      	nop

08027a38 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8027a38:	b480      	push	{r7}
 8027a3a:	b087      	sub	sp, #28
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	60f8      	str	r0, [r7, #12]
 8027a40:	60b9      	str	r1, [r7, #8]
 8027a42:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8027a44:	68fb      	ldr	r3, [r7, #12]
 8027a46:	681b      	ldr	r3, [r3, #0]
 8027a48:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 8027a4a:	697b      	ldr	r3, [r7, #20]
 8027a4c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8027a50:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8027a52:	68bb      	ldr	r3, [r7, #8]
 8027a54:	785b      	ldrb	r3, [r3, #1]
 8027a56:	049b      	lsls	r3, r3, #18
 8027a58:	697a      	ldr	r2, [r7, #20]
 8027a5a:	4313      	orrs	r3, r2
 8027a5c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 8027a5e:	697b      	ldr	r3, [r7, #20]
 8027a60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8027a64:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 8027a66:	687b      	ldr	r3, [r7, #4]
 8027a68:	785b      	ldrb	r3, [r3, #1]
 8027a6a:	051b      	lsls	r3, r3, #20
 8027a6c:	697a      	ldr	r2, [r7, #20]
 8027a6e:	4313      	orrs	r3, r2
 8027a70:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 8027a72:	697b      	ldr	r3, [r7, #20]
 8027a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8027a78:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 8027a7a:	68bb      	ldr	r3, [r7, #8]
 8027a7c:	789b      	ldrb	r3, [r3, #2]
 8027a7e:	05db      	lsls	r3, r3, #23
 8027a80:	697a      	ldr	r2, [r7, #20]
 8027a82:	4313      	orrs	r3, r2
 8027a84:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 8027a86:	697b      	ldr	r3, [r7, #20]
 8027a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027a8c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 8027a8e:	687b      	ldr	r3, [r7, #4]
 8027a90:	789b      	ldrb	r3, [r3, #2]
 8027a92:	061b      	lsls	r3, r3, #24
 8027a94:	697a      	ldr	r2, [r7, #20]
 8027a96:	4313      	orrs	r3, r2
 8027a98:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 8027a9a:	697b      	ldr	r3, [r7, #20]
 8027a9c:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8027aa0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 8027aa2:	68bb      	ldr	r3, [r7, #8]
 8027aa4:	78db      	ldrb	r3, [r3, #3]
 8027aa6:	06db      	lsls	r3, r3, #27
 8027aa8:	697a      	ldr	r2, [r7, #20]
 8027aaa:	4313      	orrs	r3, r2
 8027aac:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 8027aae:	697b      	ldr	r3, [r7, #20]
 8027ab0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8027ab4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 8027ab6:	687b      	ldr	r3, [r7, #4]
 8027ab8:	78db      	ldrb	r3, [r3, #3]
 8027aba:	075b      	lsls	r3, r3, #29
 8027abc:	697a      	ldr	r2, [r7, #20]
 8027abe:	4313      	orrs	r3, r2
 8027ac0:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8027ac2:	697b      	ldr	r3, [r7, #20]
 8027ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027ac8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 8027aca:	68bb      	ldr	r3, [r7, #8]
 8027acc:	781b      	ldrb	r3, [r3, #0]
 8027ace:	011b      	lsls	r3, r3, #4
 8027ad0:	697a      	ldr	r2, [r7, #20]
 8027ad2:	4313      	orrs	r3, r2
 8027ad4:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 8027ad6:	697b      	ldr	r3, [r7, #20]
 8027ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8027adc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 8027ade:	687b      	ldr	r3, [r7, #4]
 8027ae0:	781b      	ldrb	r3, [r3, #0]
 8027ae2:	021b      	lsls	r3, r3, #8
 8027ae4:	697a      	ldr	r2, [r7, #20]
 8027ae6:	4313      	orrs	r3, r2
 8027ae8:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 8027aea:	68fb      	ldr	r3, [r7, #12]
 8027aec:	697a      	ldr	r2, [r7, #20]
 8027aee:	601a      	str	r2, [r3, #0]
#endif
}
 8027af0:	371c      	adds	r7, #28
 8027af2:	46bd      	mov	sp, r7
 8027af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027af8:	4770      	bx	lr
 8027afa:	bf00      	nop

08027afc <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8027afc:	b480      	push	{r7}
 8027afe:	b089      	sub	sp, #36	; 0x24
 8027b00:	af00      	add	r7, sp, #0
 8027b02:	60f8      	str	r0, [r7, #12]
 8027b04:	460b      	mov	r3, r1
 8027b06:	607a      	str	r2, [r7, #4]
 8027b08:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8027b0a:	7afb      	ldrb	r3, [r7, #11]
 8027b0c:	3b01      	subs	r3, #1
 8027b0e:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8027b10:	68fb      	ldr	r3, [r7, #12]
 8027b12:	681b      	ldr	r3, [r3, #0]
 8027b14:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8027b16:	7ffb      	ldrb	r3, [r7, #31]
 8027b18:	005b      	lsls	r3, r3, #1
 8027b1a:	b2db      	uxtb	r3, r3
 8027b1c:	3310      	adds	r3, #16
 8027b1e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8027b20:	7dfb      	ldrb	r3, [r7, #23]
 8027b22:	2203      	movs	r2, #3
 8027b24:	fa02 f303 	lsl.w	r3, r2, r3
 8027b28:	43db      	mvns	r3, r3
 8027b2a:	69ba      	ldr	r2, [r7, #24]
 8027b2c:	4013      	ands	r3, r2
 8027b2e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8027b30:	687b      	ldr	r3, [r7, #4]
 8027b32:	785b      	ldrb	r3, [r3, #1]
 8027b34:	461a      	mov	r2, r3
 8027b36:	7dfb      	ldrb	r3, [r7, #23]
 8027b38:	fa02 f303 	lsl.w	r3, r2, r3
 8027b3c:	69ba      	ldr	r2, [r7, #24]
 8027b3e:	4313      	orrs	r3, r2
 8027b40:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8027b42:	7ffb      	ldrb	r3, [r7, #31]
 8027b44:	3316      	adds	r3, #22
 8027b46:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8027b48:	7dfb      	ldrb	r3, [r7, #23]
 8027b4a:	2201      	movs	r2, #1
 8027b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8027b50:	43db      	mvns	r3, r3
 8027b52:	69ba      	ldr	r2, [r7, #24]
 8027b54:	4013      	ands	r3, r2
 8027b56:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8027b58:	687b      	ldr	r3, [r7, #4]
 8027b5a:	789b      	ldrb	r3, [r3, #2]
 8027b5c:	461a      	mov	r2, r3
 8027b5e:	7dfb      	ldrb	r3, [r7, #23]
 8027b60:	fa02 f303 	lsl.w	r3, r2, r3
 8027b64:	69ba      	ldr	r2, [r7, #24]
 8027b66:	4313      	orrs	r3, r2
 8027b68:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8027b6a:	7ffb      	ldrb	r3, [r7, #31]
 8027b6c:	005b      	lsls	r3, r3, #1
 8027b6e:	b2db      	uxtb	r3, r3
 8027b70:	3319      	adds	r3, #25
 8027b72:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8027b74:	7dfb      	ldrb	r3, [r7, #23]
 8027b76:	2203      	movs	r2, #3
 8027b78:	fa02 f303 	lsl.w	r3, r2, r3
 8027b7c:	43db      	mvns	r3, r3
 8027b7e:	69ba      	ldr	r2, [r7, #24]
 8027b80:	4013      	ands	r3, r2
 8027b82:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8027b84:	687b      	ldr	r3, [r7, #4]
 8027b86:	78db      	ldrb	r3, [r3, #3]
 8027b88:	461a      	mov	r2, r3
 8027b8a:	7dfb      	ldrb	r3, [r7, #23]
 8027b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8027b90:	69ba      	ldr	r2, [r7, #24]
 8027b92:	4313      	orrs	r3, r2
 8027b94:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8027b96:	7ffb      	ldrb	r3, [r7, #31]
 8027b98:	009b      	lsls	r3, r3, #2
 8027b9a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8027b9c:	7dfb      	ldrb	r3, [r7, #23]
 8027b9e:	220f      	movs	r2, #15
 8027ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8027ba4:	43db      	mvns	r3, r3
 8027ba6:	69ba      	ldr	r2, [r7, #24]
 8027ba8:	4013      	ands	r3, r2
 8027baa:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8027bac:	687b      	ldr	r3, [r7, #4]
 8027bae:	781b      	ldrb	r3, [r3, #0]
 8027bb0:	461a      	mov	r2, r3
 8027bb2:	7dfb      	ldrb	r3, [r7, #23]
 8027bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8027bb8:	69ba      	ldr	r2, [r7, #24]
 8027bba:	4313      	orrs	r3, r2
 8027bbc:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	69ba      	ldr	r2, [r7, #24]
 8027bc2:	601a      	str	r2, [r3, #0]
#endif
}
 8027bc4:	3724      	adds	r7, #36	; 0x24
 8027bc6:	46bd      	mov	sp, r7
 8027bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bcc:	4770      	bx	lr
 8027bce:	bf00      	nop

08027bd0 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8027bd0:	b480      	push	{r7}
 8027bd2:	b083      	sub	sp, #12
 8027bd4:	af00      	add	r7, sp, #0
 8027bd6:	6078      	str	r0, [r7, #4]
 8027bd8:	460b      	mov	r3, r1
 8027bda:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8027bdc:	887a      	ldrh	r2, [r7, #2]
 8027bde:	687b      	ldr	r3, [r7, #4]
 8027be0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8027be2:	370c      	adds	r7, #12
 8027be4:	46bd      	mov	sp, r7
 8027be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bea:	4770      	bx	lr

08027bec <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8027bec:	b480      	push	{r7}
 8027bee:	b083      	sub	sp, #12
 8027bf0:	af00      	add	r7, sp, #0
 8027bf2:	6078      	str	r0, [r7, #4]
 8027bf4:	460b      	mov	r3, r1
 8027bf6:	70fb      	strb	r3, [r7, #3]
 8027bf8:	4613      	mov	r3, r2
 8027bfa:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8027bfc:	78fb      	ldrb	r3, [r7, #3]
 8027bfe:	2b00      	cmp	r3, #0
 8027c00:	d103      	bne.n	8027c0a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8027c02:	883a      	ldrh	r2, [r7, #0]
 8027c04:	687b      	ldr	r3, [r7, #4]
 8027c06:	63da      	str	r2, [r3, #60]	; 0x3c
 8027c08:	e002      	b.n	8027c10 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8027c0a:	883a      	ldrh	r2, [r7, #0]
 8027c0c:	687b      	ldr	r3, [r7, #4]
 8027c0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8027c10:	370c      	adds	r7, #12
 8027c12:	46bd      	mov	sp, r7
 8027c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c18:	4770      	bx	lr
 8027c1a:	bf00      	nop

08027c1c <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8027c1c:	b480      	push	{r7}
 8027c1e:	b087      	sub	sp, #28
 8027c20:	af00      	add	r7, sp, #0
 8027c22:	6078      	str	r0, [r7, #4]
 8027c24:	460b      	mov	r3, r1
 8027c26:	70fb      	strb	r3, [r7, #3]
 8027c28:	4613      	mov	r3, r2
 8027c2a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8027c2c:	687b      	ldr	r3, [r7, #4]
 8027c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027c32:	60fb      	str	r3, [r7, #12]

  switch(event)
 8027c34:	78fb      	ldrb	r3, [r7, #3]
 8027c36:	2b09      	cmp	r3, #9
 8027c38:	d831      	bhi.n	8027c9e <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 8027c3a:	a201      	add	r2, pc, #4	; (adr r2, 8027c40 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 8027c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027c40:	08027c69 	.word	0x08027c69
 8027c44:	08027c69 	.word	0x08027c69
 8027c48:	08027c73 	.word	0x08027c73
 8027c4c:	08027c73 	.word	0x08027c73
 8027c50:	08027c7d 	.word	0x08027c7d
 8027c54:	08027c7d 	.word	0x08027c7d
 8027c58:	08027c9f 	.word	0x08027c9f
 8027c5c:	08027c9f 	.word	0x08027c9f
 8027c60:	08027c87 	.word	0x08027c87
 8027c64:	08027c93 	.word	0x08027c93
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8027c68:	2303      	movs	r3, #3
 8027c6a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8027c6c:	2300      	movs	r3, #0
 8027c6e:	613b      	str	r3, [r7, #16]
      break;
 8027c70:	e01b      	b.n	8027caa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8027c72:	230c      	movs	r3, #12
 8027c74:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8027c76:	2302      	movs	r3, #2
 8027c78:	613b      	str	r3, [r7, #16]
      break;
 8027c7a:	e016      	b.n	8027caa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8027c7c:	2330      	movs	r3, #48	; 0x30
 8027c7e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8027c80:	2304      	movs	r3, #4
 8027c82:	613b      	str	r3, [r7, #16]
      break;
 8027c84:	e011      	b.n	8027caa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8027c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027c8a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8027c8c:	2308      	movs	r3, #8
 8027c8e:	613b      	str	r3, [r7, #16]
      break;
 8027c90:	e00b      	b.n	8027caa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8027c92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8027c96:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8027c98:	230a      	movs	r3, #10
 8027c9a:	613b      	str	r3, [r7, #16]
      break;
 8027c9c:	e005      	b.n	8027caa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8027c9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8027ca2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8027ca4:	230c      	movs	r3, #12
 8027ca6:	613b      	str	r3, [r7, #16]
      break;
 8027ca8:	bf00      	nop
  }
  
  srs &= ~mask;
 8027caa:	697b      	ldr	r3, [r7, #20]
 8027cac:	43db      	mvns	r3, r3
 8027cae:	68fa      	ldr	r2, [r7, #12]
 8027cb0:	4013      	ands	r3, r2
 8027cb2:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8027cb4:	78ba      	ldrb	r2, [r7, #2]
 8027cb6:	693b      	ldr	r3, [r7, #16]
 8027cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8027cbc:	68fa      	ldr	r2, [r7, #12]
 8027cbe:	4313      	orrs	r3, r2
 8027cc0:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	68fa      	ldr	r2, [r7, #12]
 8027cc6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8027cca:	371c      	adds	r7, #28
 8027ccc:	46bd      	mov	sp, r7
 8027cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cd2:	4770      	bx	lr

08027cd4 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8027cd4:	b480      	push	{r7}
 8027cd6:	b083      	sub	sp, #12
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	6078      	str	r0, [r7, #4]
 8027cdc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 8027cde:	683b      	ldr	r3, [r7, #0]
 8027ce0:	685a      	ldr	r2, [r3, #4]
 8027ce2:	687b      	ldr	r3, [r7, #4]
 8027ce4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8027ce6:	683b      	ldr	r3, [r7, #0]
 8027ce8:	689a      	ldr	r2, [r3, #8]
 8027cea:	687b      	ldr	r3, [r7, #4]
 8027cec:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 8027cee:	683b      	ldr	r3, [r7, #0]
 8027cf0:	681a      	ldr	r2, [r3, #0]
 8027cf2:	687b      	ldr	r3, [r7, #4]
 8027cf4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8027cf6:	370c      	adds	r7, #12
 8027cf8:	46bd      	mov	sp, r7
 8027cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cfe:	4770      	bx	lr

08027d00 <XMC_ECAT_Enable>:
  ECAT0->MII_PDI_ACS_STATE |= 0x01;
}

/* EtherCAT module clock ungating and deassert reset API (Enables ECAT) */
void XMC_ECAT_Enable(void)
{
 8027d00:	b580      	push	{r7, lr}
 8027d02:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 8027d04:	4806      	ldr	r0, [pc, #24]	; (8027d20 <XMC_ECAT_Enable+0x20>)
 8027d06:	f7ff f8fd 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 8027d0a:	4805      	ldr	r0, [pc, #20]	; (8027d20 <XMC_ECAT_Enable+0x20>)
 8027d0c:	f7fe ff72 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>

  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == true){}
 8027d10:	bf00      	nop
 8027d12:	4803      	ldr	r0, [pc, #12]	; (8027d20 <XMC_ECAT_Enable+0x20>)
 8027d14:	f7fe ff8a 	bl	8026c2c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8027d18:	4603      	mov	r3, r0
 8027d1a:	2b00      	cmp	r3, #0
 8027d1c:	d1f9      	bne.n	8027d12 <XMC_ECAT_Enable+0x12>
}
 8027d1e:	bd80      	pop	{r7, pc}
 8027d20:	20000400 	.word	0x20000400

08027d24 <XMC_ECAT_Init>:
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
}

/* EtherCAT initialization function */
void XMC_ECAT_Init(XMC_ECAT_CONFIG_t *const config)
{
 8027d24:	b580      	push	{r7, lr}
 8027d26:	b082      	sub	sp, #8
 8027d28:	af00      	add	r7, sp, #0
 8027d2a:	6078      	str	r0, [r7, #4]
  XMC_ECAT_Enable();
 8027d2c:	f7ff ffe8 	bl	8027d00 <XMC_ECAT_Enable>

  /* The process memory is not accessible until the ESC Configuration Area is loaded successfully. */
  
  /* words 0x0-0x3 */
  ECAT0->EEP_DATA[0U] = config->dword[0U];
 8027d30:	4a19      	ldr	r2, [pc, #100]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d32:	687b      	ldr	r3, [r7, #4]
 8027d34:	681b      	ldr	r3, [r3, #0]
 8027d36:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[1U];
 8027d3a:	4a17      	ldr	r2, [pc, #92]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d3c:	687b      	ldr	r3, [r7, #4]
 8027d3e:	685b      	ldr	r3, [r3, #4]
 8027d40:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8027d44:	4a14      	ldr	r2, [pc, #80]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d46:	4b14      	ldr	r3, [pc, #80]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d48:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8027d4c:	b29b      	uxth	r3, r3
 8027d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027d52:	b29b      	uxth	r3, r3
 8027d54:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  /* words 0x4-0x7 */
  ECAT0->EEP_DATA[0U] = config->dword[2U];
 8027d58:	4a0f      	ldr	r2, [pc, #60]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d5a:	687b      	ldr	r3, [r7, #4]
 8027d5c:	689b      	ldr	r3, [r3, #8]
 8027d5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[3U];
 8027d62:	4a0d      	ldr	r2, [pc, #52]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d64:	687b      	ldr	r3, [r7, #4]
 8027d66:	68db      	ldr	r3, [r3, #12]
 8027d68:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8027d6c:	4a0a      	ldr	r2, [pc, #40]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d6e:	4b0a      	ldr	r3, [pc, #40]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d70:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8027d74:	b29b      	uxth	r3, r3
 8027d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027d7a:	b29b      	uxth	r3, r3
 8027d7c:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  while (ECAT0->EEP_CONT_STAT & ECAT_EEP_CONT_STAT_L_STAT_Msk)
 8027d80:	bf00      	nop
 8027d82:	4b05      	ldr	r3, [pc, #20]	; (8027d98 <XMC_ECAT_Init+0x74>)
 8027d84:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8027d88:	b29b      	uxth	r3, r3
 8027d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027d8e:	2b00      	cmp	r3, #0
 8027d90:	d1f7      	bne.n	8027d82 <XMC_ECAT_Init+0x5e>
  {
    /* Wait until the EEPROM_Loaded signal is active */
  }

}
 8027d92:	3708      	adds	r7, #8
 8027d94:	46bd      	mov	sp, r7
 8027d96:	bd80      	pop	{r7, pc}
 8027d98:	54010000 	.word	0x54010000

08027d9c <XMC_ECAT_DisableEvent>:
{
  ECAT0->AL_EVENT_MASK |= event;
}
/* EtherCAT application event disable API */
void XMC_ECAT_DisableEvent(uint32_t event)
{
 8027d9c:	b480      	push	{r7}
 8027d9e:	b083      	sub	sp, #12
 8027da0:	af00      	add	r7, sp, #0
 8027da2:	6078      	str	r0, [r7, #4]
  ECAT0->AL_EVENT_MASK &= ~event;
 8027da4:	4906      	ldr	r1, [pc, #24]	; (8027dc0 <XMC_ECAT_DisableEvent+0x24>)
 8027da6:	4b06      	ldr	r3, [pc, #24]	; (8027dc0 <XMC_ECAT_DisableEvent+0x24>)
 8027da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8027dac:	687b      	ldr	r3, [r7, #4]
 8027dae:	43db      	mvns	r3, r3
 8027db0:	4013      	ands	r3, r2
 8027db2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
}
 8027db6:	370c      	adds	r7, #12
 8027db8:	46bd      	mov	sp, r7
 8027dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dbe:	4770      	bx	lr
 8027dc0:	54010000 	.word	0x54010000

08027dc4 <XMC_ECAT_DisableSyncManChannel>:
  return (ECAT0->AL_EVENT_REQ);
}

/* EtherCAT SyncManager channel disable function*/
void XMC_ECAT_DisableSyncManChannel(const uint8_t channel)
{
 8027dc4:	b480      	push	{r7}
 8027dc6:	b083      	sub	sp, #12
 8027dc8:	af00      	add	r7, sp, #0
 8027dca:	4603      	mov	r3, r0
 8027dcc:	71fb      	strb	r3, [r7, #7]
  ((ECAT0_SM_Type *)(void*)((uint8_t *)(void*)ECAT0_SM0 + (channel * 8U)))->SM_PDI_CTR |= 0x1U;
 8027dce:	79fb      	ldrb	r3, [r7, #7]
 8027dd0:	00db      	lsls	r3, r3, #3
 8027dd2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8027dd6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8027dda:	79fa      	ldrb	r2, [r7, #7]
 8027ddc:	00d2      	lsls	r2, r2, #3
 8027dde:	f102 42a8 	add.w	r2, r2, #1409286144	; 0x54000000
 8027de2:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8027de6:	79d2      	ldrb	r2, [r2, #7]
 8027de8:	b2d2      	uxtb	r2, r2
 8027dea:	f042 0201 	orr.w	r2, r2, #1
 8027dee:	b2d2      	uxtb	r2, r2
 8027df0:	71da      	strb	r2, [r3, #7]
}
 8027df2:	370c      	adds	r7, #12
 8027df4:	46bd      	mov	sp, r7
 8027df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dfa:	4770      	bx	lr

08027dfc <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8027dfc:	b580      	push	{r7, lr}
 8027dfe:	b084      	sub	sp, #16
 8027e00:	af00      	add	r7, sp, #0
 8027e02:	60f8      	str	r0, [r7, #12]
 8027e04:	460b      	mov	r3, r1
 8027e06:	607a      	str	r2, [r7, #4]
 8027e08:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8027e0a:	68f8      	ldr	r0, [r7, #12]
 8027e0c:	f7fe fc5e 	bl	80266cc <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8027e10:	68fb      	ldr	r3, [r7, #12]
 8027e12:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8027e14:	7afb      	ldrb	r3, [r7, #11]
 8027e16:	009b      	lsls	r3, r3, #2
 8027e18:	4619      	mov	r1, r3
 8027e1a:	230f      	movs	r3, #15
 8027e1c:	408b      	lsls	r3, r1
 8027e1e:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8027e20:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8027e22:	687b      	ldr	r3, [r7, #4]
 8027e24:	681b      	ldr	r3, [r3, #0]
 8027e26:	7af9      	ldrb	r1, [r7, #11]
 8027e28:	0089      	lsls	r1, r1, #2
 8027e2a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8027e2c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8027e2e:	68fb      	ldr	r3, [r7, #12]
 8027e30:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8027e32:	7afa      	ldrb	r2, [r7, #11]
 8027e34:	687b      	ldr	r3, [r7, #4]
 8027e36:	6859      	ldr	r1, [r3, #4]
 8027e38:	68fb      	ldr	r3, [r7, #12]
 8027e3a:	3204      	adds	r2, #4
 8027e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8027e40:	3710      	adds	r7, #16
 8027e42:	46bd      	mov	sp, r7
 8027e44:	bd80      	pop	{r7, pc}
 8027e46:	bf00      	nop

08027e48 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8027e48:	b580      	push	{r7, lr}
 8027e4a:	b084      	sub	sp, #16
 8027e4c:	af00      	add	r7, sp, #0
 8027e4e:	60f8      	str	r0, [r7, #12]
 8027e50:	460b      	mov	r3, r1
 8027e52:	607a      	str	r2, [r7, #4]
 8027e54:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8027e56:	68f8      	ldr	r0, [r7, #12]
 8027e58:	f7fe fc38 	bl	80266cc <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8027e5c:	7afa      	ldrb	r2, [r7, #11]
 8027e5e:	687b      	ldr	r3, [r7, #4]
 8027e60:	6819      	ldr	r1, [r3, #0]
 8027e62:	68fb      	ldr	r3, [r7, #12]
 8027e64:	3208      	adds	r2, #8
 8027e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8027e6a:	3710      	adds	r7, #16
 8027e6c:	46bd      	mov	sp, r7
 8027e6e:	bd80      	pop	{r7, pc}

08027e70 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8027e70:	b480      	push	{r7}
 8027e72:	b083      	sub	sp, #12
 8027e74:	af00      	add	r7, sp, #0
 8027e76:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8027e78:	687b      	ldr	r3, [r7, #4]
 8027e7a:	681b      	ldr	r3, [r3, #0]
 8027e7c:	687a      	ldr	r2, [r7, #4]
 8027e7e:	6852      	ldr	r2, [r2, #4]
 8027e80:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8027e82:	687b      	ldr	r3, [r7, #4]
 8027e84:	681b      	ldr	r3, [r3, #0]
 8027e86:	687a      	ldr	r2, [r7, #4]
 8027e88:	6892      	ldr	r2, [r2, #8]
 8027e8a:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 8027e8c:	2300      	movs	r3, #0
}
 8027e8e:	4618      	mov	r0, r3
 8027e90:	370c      	adds	r7, #12
 8027e92:	46bd      	mov	sp, r7
 8027e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e98:	4770      	bx	lr
 8027e9a:	bf00      	nop

08027e9c <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8027e9c:	b580      	push	{r7, lr}
 8027e9e:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8027ea0:	4806      	ldr	r0, [pc, #24]	; (8027ebc <XMC_FCE_Enable+0x20>)
 8027ea2:	f7ff f82f 	bl	8026f04 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8027ea6:	4805      	ldr	r0, [pc, #20]	; (8027ebc <XMC_FCE_Enable+0x20>)
 8027ea8:	f7fe fea4 	bl	8026bf4 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8027eac:	4a04      	ldr	r2, [pc, #16]	; (8027ec0 <XMC_FCE_Enable+0x24>)
 8027eae:	4b04      	ldr	r3, [pc, #16]	; (8027ec0 <XMC_FCE_Enable+0x24>)
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	f023 0301 	bic.w	r3, r3, #1
 8027eb6:	6013      	str	r3, [r2, #0]
}
 8027eb8:	bd80      	pop	{r7, pc}
 8027eba:	bf00      	nop
 8027ebc:	20000040 	.word	0x20000040
 8027ec0:	50020000 	.word	0x50020000

08027ec4 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8027ec4:	b480      	push	{r7}
 8027ec6:	b087      	sub	sp, #28
 8027ec8:	af00      	add	r7, sp, #0
 8027eca:	60f8      	str	r0, [r7, #12]
 8027ecc:	60b9      	str	r1, [r7, #8]
 8027ece:	607a      	str	r2, [r7, #4]
 8027ed0:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8027ed2:	2300      	movs	r3, #0
 8027ed4:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 8027ed6:	687b      	ldr	r3, [r7, #4]
 8027ed8:	f003 0303 	and.w	r3, r3, #3
 8027edc:	2b00      	cmp	r3, #0
 8027ede:	d104      	bne.n	8027eea <XMC_FCE_CalculateCRC32+0x26>
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	f003 0303 	and.w	r3, r3, #3
 8027ee6:	2b00      	cmp	r3, #0
 8027ee8:	d002      	beq.n	8027ef0 <XMC_FCE_CalculateCRC32+0x2c>
  {
    status = XMC_FCE_STATUS_ERROR;
 8027eea:	2302      	movs	r3, #2
 8027eec:	75fb      	strb	r3, [r7, #23]
 8027eee:	e013      	b.n	8027f18 <XMC_FCE_CalculateCRC32+0x54>
  }
  else
  {
    while (0UL != length)
 8027ef0:	e00a      	b.n	8027f08 <XMC_FCE_CalculateCRC32+0x44>
    {
      engine->kernel_ptr->IR = *data;
 8027ef2:	68fb      	ldr	r3, [r7, #12]
 8027ef4:	681b      	ldr	r3, [r3, #0]
 8027ef6:	68ba      	ldr	r2, [r7, #8]
 8027ef8:	6812      	ldr	r2, [r2, #0]
 8027efa:	601a      	str	r2, [r3, #0]
      data++;
 8027efc:	68bb      	ldr	r3, [r7, #8]
 8027efe:	3304      	adds	r3, #4
 8027f00:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 8027f02:	687b      	ldr	r3, [r7, #4]
 8027f04:	3b04      	subs	r3, #4
 8027f06:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8027f08:	687b      	ldr	r3, [r7, #4]
 8027f0a:	2b00      	cmp	r3, #0
 8027f0c:	d1f1      	bne.n	8027ef2 <XMC_FCE_CalculateCRC32+0x2e>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8027f0e:	68fb      	ldr	r3, [r7, #12]
 8027f10:	681b      	ldr	r3, [r3, #0]
 8027f12:	699a      	ldr	r2, [r3, #24]
 8027f14:	683b      	ldr	r3, [r7, #0]
 8027f16:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8027f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8027f1a:	4618      	mov	r0, r3
 8027f1c:	371c      	adds	r7, #28
 8027f1e:	46bd      	mov	sp, r7
 8027f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f24:	4770      	bx	lr
 8027f26:	bf00      	nop

08027f28 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8027f28:	b480      	push	{r7}
 8027f2a:	b083      	sub	sp, #12
 8027f2c:	af00      	add	r7, sp, #0
 8027f2e:	6078      	str	r0, [r7, #4]
 8027f30:	460b      	mov	r3, r1
 8027f32:	70fb      	strb	r3, [r7, #3]
 8027f34:	4613      	mov	r3, r2
 8027f36:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8027f38:	78fb      	ldrb	r3, [r7, #3]
 8027f3a:	089b      	lsrs	r3, r3, #2
 8027f3c:	b2db      	uxtb	r3, r3
 8027f3e:	4618      	mov	r0, r3
 8027f40:	78fb      	ldrb	r3, [r7, #3]
 8027f42:	089b      	lsrs	r3, r3, #2
 8027f44:	b2db      	uxtb	r3, r3
 8027f46:	461a      	mov	r2, r3
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	3204      	adds	r2, #4
 8027f4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027f50:	78fb      	ldrb	r3, [r7, #3]
 8027f52:	f003 0303 	and.w	r3, r3, #3
 8027f56:	00db      	lsls	r3, r3, #3
 8027f58:	4619      	mov	r1, r3
 8027f5a:	23f8      	movs	r3, #248	; 0xf8
 8027f5c:	408b      	lsls	r3, r1
 8027f5e:	43db      	mvns	r3, r3
 8027f60:	ea02 0103 	and.w	r1, r2, r3
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	1d02      	adds	r2, r0, #4
 8027f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8027f6c:	78fb      	ldrb	r3, [r7, #3]
 8027f6e:	089b      	lsrs	r3, r3, #2
 8027f70:	b2db      	uxtb	r3, r3
 8027f72:	4618      	mov	r0, r3
 8027f74:	78fb      	ldrb	r3, [r7, #3]
 8027f76:	089b      	lsrs	r3, r3, #2
 8027f78:	b2db      	uxtb	r3, r3
 8027f7a:	461a      	mov	r2, r3
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	3204      	adds	r2, #4
 8027f80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027f84:	78bb      	ldrb	r3, [r7, #2]
 8027f86:	78f9      	ldrb	r1, [r7, #3]
 8027f88:	f001 0103 	and.w	r1, r1, #3
 8027f8c:	00c9      	lsls	r1, r1, #3
 8027f8e:	408b      	lsls	r3, r1
 8027f90:	ea42 0103 	orr.w	r1, r2, r3
 8027f94:	687b      	ldr	r3, [r7, #4]
 8027f96:	1d02      	adds	r2, r0, #4
 8027f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8027f9c:	370c      	adds	r7, #12
 8027f9e:	46bd      	mov	sp, r7
 8027fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fa4:	4770      	bx	lr
 8027fa6:	bf00      	nop

08027fa8 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8027fa8:	b480      	push	{r7}
 8027faa:	b083      	sub	sp, #12
 8027fac:	af00      	add	r7, sp, #0
 8027fae:	6078      	str	r0, [r7, #4]
 8027fb0:	460b      	mov	r3, r1
 8027fb2:	70fb      	strb	r3, [r7, #3]
 8027fb4:	4613      	mov	r3, r2
 8027fb6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8027fbc:	78fb      	ldrb	r3, [r7, #3]
 8027fbe:	005b      	lsls	r3, r3, #1
 8027fc0:	4619      	mov	r1, r3
 8027fc2:	2303      	movs	r3, #3
 8027fc4:	408b      	lsls	r3, r1
 8027fc6:	43db      	mvns	r3, r3
 8027fc8:	401a      	ands	r2, r3
 8027fca:	687b      	ldr	r3, [r7, #4]
 8027fcc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8027fce:	687b      	ldr	r3, [r7, #4]
 8027fd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8027fd2:	78bb      	ldrb	r3, [r7, #2]
 8027fd4:	78f9      	ldrb	r1, [r7, #3]
 8027fd6:	0049      	lsls	r1, r1, #1
 8027fd8:	408b      	lsls	r3, r1
 8027fda:	431a      	orrs	r2, r3
 8027fdc:	687b      	ldr	r3, [r7, #4]
 8027fde:	675a      	str	r2, [r3, #116]	; 0x74
}
 8027fe0:	370c      	adds	r7, #12
 8027fe2:	46bd      	mov	sp, r7
 8027fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe8:	4770      	bx	lr
 8027fea:	bf00      	nop

08027fec <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8027fec:	b580      	push	{r7, lr}
 8027fee:	b084      	sub	sp, #16
 8027ff0:	af00      	add	r7, sp, #0
 8027ff2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8027ff4:	4b14      	ldr	r3, [pc, #80]	; (8028048 <_sbrk+0x5c>)
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	2b00      	cmp	r3, #0
 8027ffa:	d102      	bne.n	8028002 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8027ffc:	4b12      	ldr	r3, [pc, #72]	; (8028048 <_sbrk+0x5c>)
 8027ffe:	4a13      	ldr	r2, [pc, #76]	; (802804c <_sbrk+0x60>)
 8028000:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8028002:	4b11      	ldr	r3, [pc, #68]	; (8028048 <_sbrk+0x5c>)
 8028004:	681b      	ldr	r3, [r3, #0]
 8028006:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8028008:	687b      	ldr	r3, [r7, #4]
 802800a:	3303      	adds	r3, #3
 802800c:	f023 0303 	bic.w	r3, r3, #3
 8028010:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8028012:	4b0d      	ldr	r3, [pc, #52]	; (8028048 <_sbrk+0x5c>)
 8028014:	681a      	ldr	r2, [r3, #0]
 8028016:	687b      	ldr	r3, [r7, #4]
 8028018:	4413      	add	r3, r2
 802801a:	4a0d      	ldr	r2, [pc, #52]	; (8028050 <_sbrk+0x64>)
 802801c:	4293      	cmp	r3, r2
 802801e:	d207      	bcs.n	8028030 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8028020:	4b09      	ldr	r3, [pc, #36]	; (8028048 <_sbrk+0x5c>)
 8028022:	681a      	ldr	r2, [r3, #0]
 8028024:	687b      	ldr	r3, [r7, #4]
 8028026:	4413      	add	r3, r2
 8028028:	4a07      	ldr	r2, [pc, #28]	; (8028048 <_sbrk+0x5c>)
 802802a:	6013      	str	r3, [r2, #0]
    return (base);
 802802c:	68fb      	ldr	r3, [r7, #12]
 802802e:	e006      	b.n	802803e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8028030:	f002 f922 	bl	802a278 <__errno>
 8028034:	4602      	mov	r2, r0
 8028036:	230c      	movs	r3, #12
 8028038:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 802803a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 802803e:	4618      	mov	r0, r3
 8028040:	3710      	adds	r7, #16
 8028042:	46bd      	mov	sp, r7
 8028044:	bd80      	pop	{r7, pc}
 8028046:	bf00      	nop
 8028048:	1ffe9524 	.word	0x1ffe9524
 802804c:	20000000 	.word	0x20000000
 8028050:	2003ffc0 	.word	0x2003ffc0

08028054 <_init>:

/* Init */
void _init(void)
{}
 8028054:	b480      	push	{r7}
 8028056:	af00      	add	r7, sp, #0
 8028058:	46bd      	mov	sp, r7
 802805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802805e:	4770      	bx	lr

08028060 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8028060:	b480      	push	{r7}
 8028062:	b083      	sub	sp, #12
 8028064:	af00      	add	r7, sp, #0
 8028066:	6078      	str	r0, [r7, #4]
 8028068:	460b      	mov	r3, r1
 802806a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 802806c:	687b      	ldr	r3, [r7, #4]
 802806e:	68da      	ldr	r2, [r3, #12]
 8028070:	78fb      	ldrb	r3, [r7, #3]
 8028072:	2101      	movs	r1, #1
 8028074:	fa01 f303 	lsl.w	r3, r1, r3
 8028078:	431a      	orrs	r2, r3
 802807a:	687b      	ldr	r3, [r7, #4]
 802807c:	60da      	str	r2, [r3, #12]
}
 802807e:	370c      	adds	r7, #12
 8028080:	46bd      	mov	sp, r7
 8028082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028086:	4770      	bx	lr

08028088 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8028088:	b480      	push	{r7}
 802808a:	b083      	sub	sp, #12
 802808c:	af00      	add	r7, sp, #0
 802808e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	2201      	movs	r2, #1
 8028094:	60da      	str	r2, [r3, #12]
}
 8028096:	370c      	adds	r7, #12
 8028098:	46bd      	mov	sp, r7
 802809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802809e:	4770      	bx	lr

080280a0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80280a0:	b480      	push	{r7}
 80280a2:	b083      	sub	sp, #12
 80280a4:	af00      	add	r7, sp, #0
 80280a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80280a8:	687b      	ldr	r3, [r7, #4]
 80280aa:	2202      	movs	r2, #2
 80280ac:	611a      	str	r2, [r3, #16]
}
 80280ae:	370c      	adds	r7, #12
 80280b0:	46bd      	mov	sp, r7
 80280b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280b6:	4770      	bx	lr

080280b8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80280b8:	b480      	push	{r7}
 80280ba:	b083      	sub	sp, #12
 80280bc:	af00      	add	r7, sp, #0
 80280be:	6078      	str	r0, [r7, #4]
 80280c0:	460b      	mov	r3, r1
 80280c2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80280c4:	887a      	ldrh	r2, [r7, #2]
 80280c6:	687b      	ldr	r3, [r7, #4]
 80280c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80280ca:	370c      	adds	r7, #12
 80280cc:	46bd      	mov	sp, r7
 80280ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280d2:	4770      	bx	lr

080280d4 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80280d4:	b480      	push	{r7}
 80280d6:	b083      	sub	sp, #12
 80280d8:	af00      	add	r7, sp, #0
 80280da:	6078      	str	r0, [r7, #4]
 80280dc:	460b      	mov	r3, r1
 80280de:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80280e0:	887a      	ldrh	r2, [r7, #2]
 80280e2:	687b      	ldr	r3, [r7, #4]
 80280e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80280e6:	370c      	adds	r7, #12
 80280e8:	46bd      	mov	sp, r7
 80280ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280ee:	4770      	bx	lr

080280f0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80280f0:	b480      	push	{r7}
 80280f2:	b083      	sub	sp, #12
 80280f4:	af00      	add	r7, sp, #0
 80280f6:	6078      	str	r0, [r7, #4]
 80280f8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80280fa:	687b      	ldr	r3, [r7, #4]
 80280fc:	683a      	ldr	r2, [r7, #0]
 80280fe:	611a      	str	r2, [r3, #16]
}
 8028100:	370c      	adds	r7, #12
 8028102:	46bd      	mov	sp, r7
 8028104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028108:	4770      	bx	lr
 802810a:	bf00      	nop

0802810c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 802810c:	b480      	push	{r7}
 802810e:	b083      	sub	sp, #12
 8028110:	af00      	add	r7, sp, #0
 8028112:	6078      	str	r0, [r7, #4]
 8028114:	460b      	mov	r3, r1
 8028116:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 802811e:	78fb      	ldrb	r3, [r7, #3]
 8028120:	2101      	movs	r1, #1
 8028122:	fa01 f303 	lsl.w	r3, r1, r3
 8028126:	431a      	orrs	r2, r3
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 802812e:	370c      	adds	r7, #12
 8028130:	46bd      	mov	sp, r7
 8028132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028136:	4770      	bx	lr

08028138 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8028138:	b580      	push	{r7, lr}
 802813a:	b084      	sub	sp, #16
 802813c:	af00      	add	r7, sp, #0
 802813e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8028140:	2300      	movs	r3, #0
 8028142:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8028144:	687b      	ldr	r3, [r7, #4]
 8028146:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802814a:	f083 0301 	eor.w	r3, r3, #1
 802814e:	b2db      	uxtb	r3, r3
 8028150:	2b00      	cmp	r3, #0
 8028152:	d009      	beq.n	8028168 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802815a:	2b00      	cmp	r3, #0
 802815c:	d104      	bne.n	8028168 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 802815e:	6878      	ldr	r0, [r7, #4]
 8028160:	f000 f826 	bl	80281b0 <TIMER_CCU4_lInit>
 8028164:	4603      	mov	r3, r0
 8028166:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8028168:	7bfb      	ldrb	r3, [r7, #15]
}
 802816a:	4618      	mov	r0, r3
 802816c:	3710      	adds	r7, #16
 802816e:	46bd      	mov	sp, r7
 8028170:	bd80      	pop	{r7, pc}
 8028172:	bf00      	nop

08028174 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8028174:	b580      	push	{r7, lr}
 8028176:	b084      	sub	sp, #16
 8028178:	af00      	add	r7, sp, #0
 802817a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8028182:	2b00      	cmp	r3, #0
 8028184:	d00c      	beq.n	80281a0 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802818c:	2b00      	cmp	r3, #0
 802818e:	d104      	bne.n	802819a <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8028190:	687b      	ldr	r3, [r7, #4]
 8028192:	695b      	ldr	r3, [r3, #20]
 8028194:	4618      	mov	r0, r3
 8028196:	f7ff ff77 	bl	8028088 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 802819a:	2300      	movs	r3, #0
 802819c:	73fb      	strb	r3, [r7, #15]
 802819e:	e001      	b.n	80281a4 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80281a0:	2301      	movs	r3, #1
 80281a2:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80281a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80281a6:	4618      	mov	r0, r3
 80281a8:	3710      	adds	r7, #16
 80281aa:	46bd      	mov	sp, r7
 80281ac:	bd80      	pop	{r7, pc}
 80281ae:	bf00      	nop

080281b0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80281b0:	b580      	push	{r7, lr}
 80281b2:	b084      	sub	sp, #16
 80281b4:	af00      	add	r7, sp, #0
 80281b6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80281b8:	687b      	ldr	r3, [r7, #4]
 80281ba:	691b      	ldr	r3, [r3, #16]
 80281bc:	4618      	mov	r0, r3
 80281be:	f000 fcbb 	bl	8028b38 <GLOBAL_CCU4_Init>
 80281c2:	4603      	mov	r3, r0
 80281c4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80281c6:	687b      	ldr	r3, [r7, #4]
 80281c8:	691b      	ldr	r3, [r3, #16]
 80281ca:	689a      	ldr	r2, [r3, #8]
 80281cc:	687b      	ldr	r3, [r7, #4]
 80281ce:	7e1b      	ldrb	r3, [r3, #24]
 80281d0:	4610      	mov	r0, r2
 80281d2:	4619      	mov	r1, r3
 80281d4:	f7ff ff44 	bl	8028060 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80281d8:	687b      	ldr	r3, [r7, #4]
 80281da:	695a      	ldr	r2, [r3, #20]
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	69db      	ldr	r3, [r3, #28]
 80281e0:	4610      	mov	r0, r2
 80281e2:	4619      	mov	r1, r3
 80281e4:	f7ff f94c 	bl	8027480 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80281e8:	6878      	ldr	r0, [r7, #4]
 80281ea:	f000 f82d 	bl	8028248 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80281ee:	687b      	ldr	r3, [r7, #4]
 80281f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	d00f      	beq.n	8028218 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	695a      	ldr	r2, [r3, #20]
 80281fc:	687b      	ldr	r3, [r7, #4]
 80281fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028202:	4610      	mov	r0, r2
 8028204:	2100      	movs	r1, #0
 8028206:	461a      	mov	r2, r3
 8028208:	f7ff f970 	bl	80274ec <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 802820c:	687b      	ldr	r3, [r7, #4]
 802820e:	695b      	ldr	r3, [r3, #20]
 8028210:	4618      	mov	r0, r3
 8028212:	2100      	movs	r1, #0
 8028214:	f7ff ff7a 	bl	802810c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	695b      	ldr	r3, [r3, #20]
 802821c:	4618      	mov	r0, r3
 802821e:	f7ff ff3f 	bl	80280a0 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8028222:	687b      	ldr	r3, [r7, #4]
 8028224:	2201      	movs	r2, #1
 8028226:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 802822a:	687b      	ldr	r3, [r7, #4]
 802822c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8028230:	2b00      	cmp	r3, #0
 8028232:	d004      	beq.n	802823e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8028234:	687b      	ldr	r3, [r7, #4]
 8028236:	695b      	ldr	r3, [r3, #20]
 8028238:	4618      	mov	r0, r3
 802823a:	f7ff ff25 	bl	8028088 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 802823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8028240:	4618      	mov	r0, r3
 8028242:	3710      	adds	r7, #16
 8028244:	46bd      	mov	sp, r7
 8028246:	bd80      	pop	{r7, pc}

08028248 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8028248:	b580      	push	{r7, lr}
 802824a:	b082      	sub	sp, #8
 802824c:	af00      	add	r7, sp, #0
 802824e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8028250:	687b      	ldr	r3, [r7, #4]
 8028252:	695a      	ldr	r2, [r3, #20]
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8028258:	4610      	mov	r0, r2
 802825a:	4619      	mov	r1, r3
 802825c:	f7ff ff2c 	bl	80280b8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	695b      	ldr	r3, [r3, #20]
 8028264:	4618      	mov	r0, r3
 8028266:	2100      	movs	r1, #0
 8028268:	f7ff ff34 	bl	80280d4 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 802826c:	687b      	ldr	r3, [r7, #4]
 802826e:	691b      	ldr	r3, [r3, #16]
 8028270:	689a      	ldr	r2, [r3, #8]
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	68db      	ldr	r3, [r3, #12]
 8028276:	4610      	mov	r0, r2
 8028278:	4619      	mov	r1, r3
 802827a:	f7ff ff39 	bl	80280f0 <XMC_CCU4_EnableShadowTransfer>
}
 802827e:	3708      	adds	r7, #8
 8028280:	46bd      	mov	sp, r7
 8028282:	bd80      	pop	{r7, pc}

08028284 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8028284:	b480      	push	{r7}
 8028286:	b083      	sub	sp, #12
 8028288:	af00      	add	r7, sp, #0
 802828a:	6078      	str	r0, [r7, #4]
 802828c:	460b      	mov	r3, r1
 802828e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8028290:	687b      	ldr	r3, [r7, #4]
 8028292:	68da      	ldr	r2, [r3, #12]
 8028294:	78fb      	ldrb	r3, [r7, #3]
 8028296:	2101      	movs	r1, #1
 8028298:	fa01 f303 	lsl.w	r3, r1, r3
 802829c:	431a      	orrs	r2, r3
 802829e:	687b      	ldr	r3, [r7, #4]
 80282a0:	60da      	str	r2, [r3, #12]
}
 80282a2:	370c      	adds	r7, #12
 80282a4:	46bd      	mov	sp, r7
 80282a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282aa:	4770      	bx	lr

080282ac <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 80282ac:	b480      	push	{r7}
 80282ae:	b083      	sub	sp, #12
 80282b0:	af00      	add	r7, sp, #0
 80282b2:	6078      	str	r0, [r7, #4]
 80282b4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80282b6:	687b      	ldr	r3, [r7, #4]
 80282b8:	695a      	ldr	r2, [r3, #20]
 80282ba:	683b      	ldr	r3, [r7, #0]
 80282bc:	045b      	lsls	r3, r3, #17
 80282be:	431a      	orrs	r2, r3
 80282c0:	687b      	ldr	r3, [r7, #4]
 80282c2:	615a      	str	r2, [r3, #20]
}
 80282c4:	370c      	adds	r7, #12
 80282c6:	46bd      	mov	sp, r7
 80282c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282cc:	4770      	bx	lr
 80282ce:	bf00      	nop

080282d0 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 80282d0:	b480      	push	{r7}
 80282d2:	b083      	sub	sp, #12
 80282d4:	af00      	add	r7, sp, #0
 80282d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 80282d8:	687b      	ldr	r3, [r7, #4]
 80282da:	2201      	movs	r2, #1
 80282dc:	60da      	str	r2, [r3, #12]
}
 80282de:	370c      	adds	r7, #12
 80282e0:	46bd      	mov	sp, r7
 80282e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282e6:	4770      	bx	lr

080282e8 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80282e8:	b480      	push	{r7}
 80282ea:	b083      	sub	sp, #12
 80282ec:	af00      	add	r7, sp, #0
 80282ee:	6078      	str	r0, [r7, #4]
 80282f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80282f2:	687b      	ldr	r3, [r7, #4]
 80282f4:	683a      	ldr	r2, [r7, #0]
 80282f6:	611a      	str	r2, [r3, #16]
}
 80282f8:	370c      	adds	r7, #12
 80282fa:	46bd      	mov	sp, r7
 80282fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028300:	4770      	bx	lr
 8028302:	bf00      	nop

08028304 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8028304:	b480      	push	{r7}
 8028306:	b083      	sub	sp, #12
 8028308:	af00      	add	r7, sp, #0
 802830a:	6078      	str	r0, [r7, #4]
 802830c:	460b      	mov	r3, r1
 802830e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8028310:	687b      	ldr	r3, [r7, #4]
 8028312:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8028316:	78fb      	ldrb	r3, [r7, #3]
 8028318:	2101      	movs	r1, #1
 802831a:	fa01 f303 	lsl.w	r3, r1, r3
 802831e:	431a      	orrs	r2, r3
 8028320:	687b      	ldr	r3, [r7, #4]
 8028322:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8028326:	370c      	adds	r7, #12
 8028328:	46bd      	mov	sp, r7
 802832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802832e:	4770      	bx	lr

08028330 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
 8028330:	b480      	push	{r7}
 8028332:	b083      	sub	sp, #12
 8028334:	af00      	add	r7, sp, #0
 8028336:	6078      	str	r0, [r7, #4]
 8028338:	460b      	mov	r3, r1
 802833a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 802833c:	687b      	ldr	r3, [r7, #4]
 802833e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8028342:	f023 020c 	bic.w	r2, r3, #12
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 8028346:	78fb      	ldrb	r3, [r7, #3]
 8028348:	005b      	lsls	r3, r3, #1
 802834a:	f003 0306 	and.w	r3, r3, #6
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 802834e:	431a      	orrs	r2, r3
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
 8028356:	370c      	adds	r7, #12
 8028358:	46bd      	mov	sp, r7
 802835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802835e:	4770      	bx	lr

08028360 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 8028360:	b580      	push	{r7, lr}
 8028362:	b086      	sub	sp, #24
 8028364:	af00      	add	r7, sp, #0
 8028366:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 8028368:	2301      	movs	r3, #1
 802836a:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 802836c:	2301      	movs	r3, #1
 802836e:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 8028370:	687b      	ldr	r3, [r7, #4]
 8028372:	7f1b      	ldrb	r3, [r3, #28]
 8028374:	2b00      	cmp	r3, #0
 8028376:	f040 80a4 	bne.w	80284c2 <PWM_CCU8_Init+0x162>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 802837a:	687b      	ldr	r3, [r7, #4]
 802837c:	681b      	ldr	r3, [r3, #0]
 802837e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028382:	4618      	mov	r0, r3
 8028384:	f000 fba8 	bl	8028ad8 <GLOBAL_CCU8_Init>
 8028388:	4603      	mov	r3, r0
 802838a:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 802838c:	7dbb      	ldrb	r3, [r7, #22]
 802838e:	2b00      	cmp	r3, #0
 8028390:	f040 8093 	bne.w	80284ba <PWM_CCU8_Init+0x15a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 8028394:	687b      	ldr	r3, [r7, #4]
 8028396:	689a      	ldr	r2, [r3, #8]
 8028398:	687b      	ldr	r3, [r7, #4]
 802839a:	681b      	ldr	r3, [r3, #0]
 802839c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802839e:	4610      	mov	r0, r2
 80283a0:	4619      	mov	r1, r3
 80283a2:	f7ff f97d 	bl	80276a0 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 80283a6:	687b      	ldr	r3, [r7, #4]
 80283a8:	689a      	ldr	r2, [r3, #8]
 80283aa:	687b      	ldr	r3, [r7, #4]
 80283ac:	681b      	ldr	r3, [r3, #0]
 80283ae:	885b      	ldrh	r3, [r3, #2]
 80283b0:	4610      	mov	r0, r2
 80283b2:	4619      	mov	r1, r3
 80283b4:	f7ff fc0c 	bl	8027bd0 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80283c0:	889b      	ldrh	r3, [r3, #4]
 80283c2:	4610      	mov	r0, r2
 80283c4:	2100      	movs	r1, #0
 80283c6:	461a      	mov	r2, r3
 80283c8:	f7ff fc10 	bl	8027bec <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 80283cc:	687b      	ldr	r3, [r7, #4]
 80283ce:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 80283d0:	687b      	ldr	r3, [r7, #4]
 80283d2:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 80283d4:	88db      	ldrh	r3, [r3, #6]
 80283d6:	4610      	mov	r0, r2
 80283d8:	2101      	movs	r1, #1
 80283da:	461a      	mov	r2, r3
 80283dc:	f7ff fc06 	bl	8027bec <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 80283e0:	687b      	ldr	r3, [r7, #4]
 80283e2:	681b      	ldr	r3, [r3, #0]
 80283e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80283e6:	78db      	ldrb	r3, [r3, #3]
 80283e8:	f003 0302 	and.w	r3, r3, #2
 80283ec:	b2db      	uxtb	r3, r3
 80283ee:	2b00      	cmp	r3, #0
 80283f0:	d108      	bne.n	8028404 <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	681b      	ldr	r3, [r3, #0]
 80283f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80283f8:	78db      	ldrb	r3, [r3, #3]
 80283fa:	f003 0304 	and.w	r3, r3, #4
 80283fe:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8028400:	2b00      	cmp	r3, #0
 8028402:	d008      	beq.n	8028416 <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8028408:	687b      	ldr	r3, [r7, #4]
 802840a:	681b      	ldr	r3, [r3, #0]
 802840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 802840e:	4610      	mov	r0, r2
 8028410:	4619      	mov	r1, r3
 8028412:	f7ff f97f 	bl	8027714 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
 8028416:	687b      	ldr	r3, [r7, #4]
 8028418:	689a      	ldr	r2, [r3, #8]
 802841a:	687b      	ldr	r3, [r7, #4]
 802841c:	681b      	ldr	r3, [r3, #0]
 802841e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028422:	4610      	mov	r0, r2
 8028424:	4619      	mov	r1, r3
 8028426:	f7ff ff83 	bl	8028330 <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 802842a:	687b      	ldr	r3, [r7, #4]
 802842c:	685a      	ldr	r2, [r3, #4]
 802842e:	687b      	ldr	r3, [r7, #4]
 8028430:	691b      	ldr	r3, [r3, #16]
 8028432:	4610      	mov	r0, r2
 8028434:	4619      	mov	r1, r3
 8028436:	f7ff ff57 	bl	80282e8 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 802843a:	687b      	ldr	r3, [r7, #4]
 802843c:	685a      	ldr	r2, [r3, #4]
 802843e:	687b      	ldr	r3, [r7, #4]
 8028440:	695b      	ldr	r3, [r3, #20]
 8028442:	4610      	mov	r0, r2
 8028444:	4619      	mov	r1, r3
 8028446:	f7ff ff4f 	bl	80282e8 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	689a      	ldr	r2, [r3, #8]
 802844e:	687b      	ldr	r3, [r7, #4]
 8028450:	681b      	ldr	r3, [r3, #0]
 8028452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028454:	4610      	mov	r0, r2
 8028456:	4619      	mov	r1, r3
 8028458:	f7ff fc3c 	bl	8027cd4 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 802845c:	6878      	ldr	r0, [r7, #4]
 802845e:	f000 f959 	bl	8028714 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 8028462:	6878      	ldr	r0, [r7, #4]
 8028464:	f000 f834 	bl	80284d0 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 8028468:	6878      	ldr	r0, [r7, #4]
 802846a:	f000 f8f5 	bl	8028658 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	681b      	ldr	r3, [r3, #0]
 8028472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028476:	681b      	ldr	r3, [r3, #0]
 8028478:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	681b      	ldr	r3, [r3, #0]
 802847e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028480:	7b1b      	ldrb	r3, [r3, #12]
 8028482:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8028486:	b2db      	uxtb	r3, r3
 8028488:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	693a      	ldr	r2, [r7, #16]
 802848e:	fa22 f303 	lsr.w	r3, r2, r3
 8028492:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8028494:	687b      	ldr	r3, [r7, #4]
 8028496:	693a      	ldr	r2, [r7, #16]
 8028498:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	2201      	movs	r2, #1
 802849e:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 80284a0:	2300      	movs	r3, #0
 80284a2:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	681b      	ldr	r3, [r3, #0]
 80284a8:	781b      	ldrb	r3, [r3, #0]
 80284aa:	2b00      	cmp	r3, #0
 80284ac:	d00b      	beq.n	80284c6 <PWM_CCU8_Init+0x166>
      {
        status = PWM_CCU8_Start(handle_ptr);
 80284ae:	6878      	ldr	r0, [r7, #4]
 80284b0:	f000 fa20 	bl	80288f4 <PWM_CCU8_Start>
 80284b4:	4603      	mov	r3, r0
 80284b6:	75fb      	strb	r3, [r7, #23]
 80284b8:	e005      	b.n	80284c6 <PWM_CCU8_Init+0x166>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	2200      	movs	r2, #0
 80284be:	771a      	strb	r2, [r3, #28]
 80284c0:	e001      	b.n	80284c6 <PWM_CCU8_Init+0x166>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 80284c2:	2302      	movs	r3, #2
 80284c4:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 80284c6:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 80284c8:	4618      	mov	r0, r3
 80284ca:	3718      	adds	r7, #24
 80284cc:	46bd      	mov	sp, r7
 80284ce:	bd80      	pop	{r7, pc}

080284d0 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 80284d0:	b580      	push	{r7, lr}
 80284d2:	b082      	sub	sp, #8
 80284d4:	af00      	add	r7, sp, #0
 80284d6:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 80284d8:	687b      	ldr	r3, [r7, #4]
 80284da:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 80284e0:	7c5b      	ldrb	r3, [r3, #17]
 80284e2:	4610      	mov	r0, r2
 80284e4:	2100      	movs	r1, #0
 80284e6:	461a      	mov	r2, r3
 80284e8:	f7ff fb98 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 80284ec:	687b      	ldr	r3, [r7, #4]
 80284ee:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 80284f0:	687b      	ldr	r3, [r7, #4]
 80284f2:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 80284f4:	7c9b      	ldrb	r3, [r3, #18]
 80284f6:	4610      	mov	r0, r2
 80284f8:	2102      	movs	r1, #2
 80284fa:	461a      	mov	r2, r3
 80284fc:	f7ff fb8e 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8028508:	7cdb      	ldrb	r3, [r3, #19]
 802850a:	4610      	mov	r0, r2
 802850c:	2103      	movs	r1, #3
 802850e:	461a      	mov	r2, r3
 8028510:	f7ff fb84 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 802851c:	7d1b      	ldrb	r3, [r3, #20]
 802851e:	4610      	mov	r0, r2
 8028520:	2104      	movs	r1, #4
 8028522:	461a      	mov	r2, r3
 8028524:	f7ff fb7a 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8028528:	687b      	ldr	r3, [r7, #4]
 802852a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 802852c:	687b      	ldr	r3, [r7, #4]
 802852e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8028530:	7d5b      	ldrb	r3, [r3, #21]
 8028532:	4610      	mov	r0, r2
 8028534:	2105      	movs	r1, #5
 8028536:	461a      	mov	r2, r3
 8028538:	f7ff fb70 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 802853c:	687b      	ldr	r3, [r7, #4]
 802853e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 8028540:	687b      	ldr	r3, [r7, #4]
 8028542:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8028544:	7d9b      	ldrb	r3, [r3, #22]
 8028546:	4610      	mov	r0, r2
 8028548:	2101      	movs	r1, #1
 802854a:	461a      	mov	r2, r3
 802854c:	f7ff fb66 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 8028554:	687b      	ldr	r3, [r7, #4]
 8028556:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8028558:	7ddb      	ldrb	r3, [r3, #23]
 802855a:	4610      	mov	r0, r2
 802855c:	2108      	movs	r1, #8
 802855e:	461a      	mov	r2, r3
 8028560:	f7ff fb5c 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8028564:	687b      	ldr	r3, [r7, #4]
 8028566:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 8028568:	687b      	ldr	r3, [r7, #4]
 802856a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 802856c:	7e1b      	ldrb	r3, [r3, #24]
 802856e:	4610      	mov	r0, r2
 8028570:	2109      	movs	r1, #9
 8028572:	461a      	mov	r2, r3
 8028574:	f7ff fb52 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8028578:	687b      	ldr	r3, [r7, #4]
 802857a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 802857c:	687b      	ldr	r3, [r7, #4]
 802857e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8028580:	7e5b      	ldrb	r3, [r3, #25]
 8028582:	4610      	mov	r0, r2
 8028584:	210a      	movs	r1, #10
 8028586:	461a      	mov	r2, r3
 8028588:	f7ff fb48 	bl	8027c1c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 802858c:	687b      	ldr	r3, [r7, #4]
 802858e:	681b      	ldr	r3, [r3, #0]
 8028590:	7a1b      	ldrb	r3, [r3, #8]
 8028592:	2b00      	cmp	r3, #0
 8028594:	d005      	beq.n	80285a2 <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8028596:	687b      	ldr	r3, [r7, #4]
 8028598:	689b      	ldr	r3, [r3, #8]
 802859a:	4618      	mov	r0, r3
 802859c:	2100      	movs	r1, #0
 802859e:	f7ff feb1 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 80285a2:	687b      	ldr	r3, [r7, #4]
 80285a4:	681b      	ldr	r3, [r3, #0]
 80285a6:	7a5b      	ldrb	r3, [r3, #9]
 80285a8:	2b00      	cmp	r3, #0
 80285aa:	d005      	beq.n	80285b8 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	689b      	ldr	r3, [r3, #8]
 80285b0:	4618      	mov	r0, r3
 80285b2:	2102      	movs	r1, #2
 80285b4:	f7ff fea6 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 80285b8:	687b      	ldr	r3, [r7, #4]
 80285ba:	681b      	ldr	r3, [r3, #0]
 80285bc:	7a9b      	ldrb	r3, [r3, #10]
 80285be:	2b00      	cmp	r3, #0
 80285c0:	d005      	beq.n	80285ce <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	689b      	ldr	r3, [r3, #8]
 80285c6:	4618      	mov	r0, r3
 80285c8:	2103      	movs	r1, #3
 80285ca:	f7ff fe9b 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 80285ce:	687b      	ldr	r3, [r7, #4]
 80285d0:	681b      	ldr	r3, [r3, #0]
 80285d2:	7adb      	ldrb	r3, [r3, #11]
 80285d4:	2b00      	cmp	r3, #0
 80285d6:	d005      	beq.n	80285e4 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 80285d8:	687b      	ldr	r3, [r7, #4]
 80285da:	689b      	ldr	r3, [r3, #8]
 80285dc:	4618      	mov	r0, r3
 80285de:	2104      	movs	r1, #4
 80285e0:	f7ff fe90 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 80285e4:	687b      	ldr	r3, [r7, #4]
 80285e6:	681b      	ldr	r3, [r3, #0]
 80285e8:	7b1b      	ldrb	r3, [r3, #12]
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	d005      	beq.n	80285fa <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 80285ee:	687b      	ldr	r3, [r7, #4]
 80285f0:	689b      	ldr	r3, [r3, #8]
 80285f2:	4618      	mov	r0, r3
 80285f4:	2105      	movs	r1, #5
 80285f6:	f7ff fe85 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 80285fa:	687b      	ldr	r3, [r7, #4]
 80285fc:	681b      	ldr	r3, [r3, #0]
 80285fe:	7b5b      	ldrb	r3, [r3, #13]
 8028600:	2b00      	cmp	r3, #0
 8028602:	d005      	beq.n	8028610 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8028604:	687b      	ldr	r3, [r7, #4]
 8028606:	689b      	ldr	r3, [r3, #8]
 8028608:	4618      	mov	r0, r3
 802860a:	2101      	movs	r1, #1
 802860c:	f7ff fe7a 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	681b      	ldr	r3, [r3, #0]
 8028614:	7b9b      	ldrb	r3, [r3, #14]
 8028616:	2b00      	cmp	r3, #0
 8028618:	d005      	beq.n	8028626 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	689b      	ldr	r3, [r3, #8]
 802861e:	4618      	mov	r0, r3
 8028620:	2108      	movs	r1, #8
 8028622:	f7ff fe6f 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8028626:	687b      	ldr	r3, [r7, #4]
 8028628:	681b      	ldr	r3, [r3, #0]
 802862a:	7bdb      	ldrb	r3, [r3, #15]
 802862c:	2b00      	cmp	r3, #0
 802862e:	d005      	beq.n	802863c <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 8028630:	687b      	ldr	r3, [r7, #4]
 8028632:	689b      	ldr	r3, [r3, #8]
 8028634:	4618      	mov	r0, r3
 8028636:	2109      	movs	r1, #9
 8028638:	f7ff fe64 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	681b      	ldr	r3, [r3, #0]
 8028640:	7c1b      	ldrb	r3, [r3, #16]
 8028642:	2b00      	cmp	r3, #0
 8028644:	d005      	beq.n	8028652 <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8028646:	687b      	ldr	r3, [r7, #4]
 8028648:	689b      	ldr	r3, [r3, #8]
 802864a:	4618      	mov	r0, r3
 802864c:	210a      	movs	r1, #10
 802864e:	f7ff fe59 	bl	8028304 <XMC_CCU8_SLICE_EnableEvent>
  }
}
 8028652:	3708      	adds	r7, #8
 8028654:	46bd      	mov	sp, r7
 8028656:	bd80      	pop	{r7, pc}

08028658 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 8028658:	b580      	push	{r7, lr}
 802865a:	b082      	sub	sp, #8
 802865c:	af00      	add	r7, sp, #0
 802865e:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 8028660:	687b      	ldr	r3, [r7, #4]
 8028662:	681b      	ldr	r3, [r3, #0]
 8028664:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8028668:	2b00      	cmp	r3, #0
 802866a:	d00e      	beq.n	802868a <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 802866c:	687b      	ldr	r3, [r7, #4]
 802866e:	681b      	ldr	r3, [r3, #0]
 8028670:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	681b      	ldr	r3, [r3, #0]
 8028676:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 802867a:	687b      	ldr	r3, [r7, #4]
 802867c:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 802867e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028680:	4608      	mov	r0, r1
 8028682:	4611      	mov	r1, r2
 8028684:	461a      	mov	r2, r3
 8028686:	f7fe f961 	bl	802694c <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8028692:	2b00      	cmp	r3, #0
 8028694:	d00e      	beq.n	80286b4 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	681b      	ldr	r3, [r3, #0]
 802869a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 802869c:	687b      	ldr	r3, [r7, #4]
 802869e:	681b      	ldr	r3, [r3, #0]
 80286a0:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 80286a4:	687b      	ldr	r3, [r7, #4]
 80286a6:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 80286a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80286aa:	4608      	mov	r0, r1
 80286ac:	4611      	mov	r1, r2
 80286ae:	461a      	mov	r2, r3
 80286b0:	f7fe f94c 	bl	802694c <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 80286b4:	687b      	ldr	r3, [r7, #4]
 80286b6:	681b      	ldr	r3, [r3, #0]
 80286b8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80286bc:	2b00      	cmp	r3, #0
 80286be:	d00e      	beq.n	80286de <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	681b      	ldr	r3, [r3, #0]
 80286c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80286c6:	687b      	ldr	r3, [r7, #4]
 80286c8:	681b      	ldr	r3, [r3, #0]
 80286ca:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 80286ce:	687b      	ldr	r3, [r7, #4]
 80286d0:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 80286d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80286d4:	4608      	mov	r0, r1
 80286d6:	4611      	mov	r1, r2
 80286d8:	461a      	mov	r2, r3
 80286da:	f7fe f937 	bl	802694c <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 80286de:	687b      	ldr	r3, [r7, #4]
 80286e0:	681b      	ldr	r3, [r3, #0]
 80286e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80286e6:	2b00      	cmp	r3, #0
 80286e8:	d010      	beq.n	802870c <PWM_CCU8_lInit_GPIO+0xb4>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 80286ea:	687b      	ldr	r3, [r7, #4]
 80286ec:	681b      	ldr	r3, [r3, #0]
 80286ee:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80286f2:	687b      	ldr	r3, [r7, #4]
 80286f4:	681b      	ldr	r3, [r3, #0]
 80286f6:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 80286fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028702:	4608      	mov	r0, r1
 8028704:	4611      	mov	r1, r2
 8028706:	461a      	mov	r2, r3
 8028708:	f7fe f920 	bl	802694c <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 802870c:	3708      	adds	r7, #8
 802870e:	46bd      	mov	sp, r7
 8028710:	bd80      	pop	{r7, pc}
 8028712:	bf00      	nop

08028714 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 8028714:	b580      	push	{r7, lr}
 8028716:	b084      	sub	sp, #16
 8028718:	af02      	add	r7, sp, #8
 802871a:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 802871c:	687b      	ldr	r3, [r7, #4]
 802871e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 8028720:	687b      	ldr	r3, [r7, #4]
 8028722:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8028724:	69db      	ldr	r3, [r3, #28]
 8028726:	4610      	mov	r0, r2
 8028728:	2101      	movs	r1, #1
 802872a:	461a      	mov	r2, r3
 802872c:	f7ff f9e6 	bl	8027afc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8028730:	687b      	ldr	r3, [r7, #4]
 8028732:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8028738:	6a1b      	ldr	r3, [r3, #32]
 802873a:	4610      	mov	r0, r2
 802873c:	2102      	movs	r1, #2
 802873e:	461a      	mov	r2, r3
 8028740:	f7ff f9dc 	bl	8027afc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 802874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802874e:	4610      	mov	r0, r2
 8028750:	2103      	movs	r1, #3
 8028752:	461a      	mov	r2, r3
 8028754:	f7ff f9d2 	bl	8027afc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8028758:	687b      	ldr	r3, [r7, #4]
 802875a:	681b      	ldr	r3, [r3, #0]
 802875c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8028760:	2b00      	cmp	r3, #0
 8028762:	d00e      	beq.n	8028782 <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8028764:	687b      	ldr	r3, [r7, #4]
 8028766:	6899      	ldr	r1, [r3, #8]
 8028768:	687b      	ldr	r3, [r7, #4]
 802876a:	681b      	ldr	r3, [r3, #0]
 802876c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 8028770:	687b      	ldr	r3, [r7, #4]
 8028772:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8028774:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8028778:	4608      	mov	r0, r1
 802877a:	4611      	mov	r1, r2
 802877c:	461a      	mov	r2, r3
 802877e:	f7fe ffe5 	bl	802774c <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	681b      	ldr	r3, [r3, #0]
 8028786:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 802878a:	2b00      	cmp	r3, #0
 802878c:	d00e      	beq.n	80287ac <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 802878e:	687b      	ldr	r3, [r7, #4]
 8028790:	6899      	ldr	r1, [r3, #8]
 8028792:	687b      	ldr	r3, [r7, #4]
 8028794:	681b      	ldr	r3, [r3, #0]
 8028796:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 802879a:	687b      	ldr	r3, [r7, #4]
 802879c:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 802879e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80287a2:	4608      	mov	r0, r1
 80287a4:	4611      	mov	r1, r2
 80287a6:	461a      	mov	r2, r3
 80287a8:	f7fe fffe 	bl	80277a8 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 80287ac:	687b      	ldr	r3, [r7, #4]
 80287ae:	681b      	ldr	r3, [r3, #0]
 80287b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	d009      	beq.n	80287cc <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 80287b8:	687b      	ldr	r3, [r7, #4]
 80287ba:	689a      	ldr	r2, [r3, #8]
 80287bc:	687b      	ldr	r3, [r7, #4]
 80287be:	681b      	ldr	r3, [r3, #0]
 80287c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80287c4:	4610      	mov	r0, r2
 80287c6:	4619      	mov	r1, r3
 80287c8:	f7ff f8ca 	bl	8027960 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	681b      	ldr	r3, [r3, #0]
 80287d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80287d4:	2b00      	cmp	r3, #0
 80287d6:	d009      	beq.n	80287ec <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 80287d8:	687b      	ldr	r3, [r7, #4]
 80287da:	689a      	ldr	r2, [r3, #8]
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	681b      	ldr	r3, [r3, #0]
 80287e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80287e4:	4610      	mov	r0, r2
 80287e6:	4619      	mov	r1, r3
 80287e8:	f7ff f8a0 	bl	802792c <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 80287ec:	687b      	ldr	r3, [r7, #4]
 80287ee:	681b      	ldr	r3, [r3, #0]
 80287f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d009      	beq.n	802880c <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 80287f8:	687b      	ldr	r3, [r7, #4]
 80287fa:	689a      	ldr	r2, [r3, #8]
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	681b      	ldr	r3, [r3, #0]
 8028800:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8028804:	4610      	mov	r0, r2
 8028806:	4619      	mov	r1, r3
 8028808:	f7ff f876 	bl	80278f8 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	681b      	ldr	r3, [r3, #0]
 8028810:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8028814:	2b00      	cmp	r3, #0
 8028816:	d013      	beq.n	8028840 <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	689a      	ldr	r2, [r3, #8]
 802881c:	687b      	ldr	r3, [r7, #4]
 802881e:	681b      	ldr	r3, [r3, #0]
 8028820:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8028824:	4610      	mov	r0, r2
 8028826:	4619      	mov	r1, r3
 8028828:	f7fe ffea 	bl	8027800 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	689a      	ldr	r2, [r3, #8]
 8028830:	687b      	ldr	r3, [r7, #4]
 8028832:	681b      	ldr	r3, [r3, #0]
 8028834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8028838:	4610      	mov	r0, r2
 802883a:	4619      	mov	r1, r3
 802883c:	f7fe fffa 	bl	8027834 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8028840:	687b      	ldr	r3, [r7, #4]
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8028848:	2b00      	cmp	r3, #0
 802884a:	d011      	beq.n	8028870 <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	6898      	ldr	r0, [r3, #8]
 8028850:	687b      	ldr	r3, [r7, #4]
 8028852:	681b      	ldr	r3, [r3, #0]
 8028854:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 8028858:	687b      	ldr	r3, [r7, #4]
 802885a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 802885c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 8028860:	687b      	ldr	r3, [r7, #4]
 8028862:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8028864:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8028868:	9300      	str	r3, [sp, #0]
 802886a:	2303      	movs	r3, #3
 802886c:	f7fe fffc 	bl	8027868 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8028870:	687b      	ldr	r3, [r7, #4]
 8028872:	681b      	ldr	r3, [r3, #0]
 8028874:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8028878:	2b03      	cmp	r3, #3
 802887a:	d11a      	bne.n	80288b2 <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 802887c:	687b      	ldr	r3, [r7, #4]
 802887e:	6899      	ldr	r1, [r3, #8]
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	681b      	ldr	r3, [r3, #0]
 8028884:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 802888c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028890:	4608      	mov	r0, r1
 8028892:	4611      	mov	r1, r2
 8028894:	461a      	mov	r2, r3
 8028896:	f7ff f895 	bl	80279c4 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	681b      	ldr	r3, [r3, #0]
 802889e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	d005      	beq.n	80288b2 <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	689b      	ldr	r3, [r3, #8]
 80288aa:	4618      	mov	r0, r3
 80288ac:	210f      	movs	r1, #15
 80288ae:	f7ff fcfd 	bl	80282ac <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 80288b2:	687b      	ldr	r3, [r7, #4]
 80288b4:	681b      	ldr	r3, [r3, #0]
 80288b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d105      	bne.n	80288ca <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 80288be:	687b      	ldr	r3, [r7, #4]
 80288c0:	681b      	ldr	r3, [r3, #0]
 80288c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 80288c6:	2b00      	cmp	r3, #0
 80288c8:	d011      	beq.n	80288ee <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 80288ca:	687b      	ldr	r3, [r7, #4]
 80288cc:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 80288ce:	687b      	ldr	r3, [r7, #4]
 80288d0:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 80288d2:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 80288d4:	687b      	ldr	r3, [r7, #4]
 80288d6:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 80288d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80288da:	4608      	mov	r0, r1
 80288dc:	4611      	mov	r1, r2
 80288de:	461a      	mov	r2, r3
 80288e0:	f7ff f8aa 	bl	8027a38 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 80288e4:	687b      	ldr	r3, [r7, #4]
 80288e6:	689b      	ldr	r3, [r3, #8]
 80288e8:	4618      	mov	r0, r3
 80288ea:	f7ff f853 	bl	8027994 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 80288ee:	3708      	adds	r7, #8
 80288f0:	46bd      	mov	sp, r7
 80288f2:	bd80      	pop	{r7, pc}

080288f4 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 80288f4:	b580      	push	{r7, lr}
 80288f6:	b084      	sub	sp, #16
 80288f8:	af00      	add	r7, sp, #0
 80288fa:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 80288fc:	2301      	movs	r3, #1
 80288fe:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 8028900:	687b      	ldr	r3, [r7, #4]
 8028902:	7f1b      	ldrb	r3, [r3, #28]
 8028904:	2b01      	cmp	r3, #1
 8028906:	d003      	beq.n	8028910 <PWM_CCU8_Start+0x1c>
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	7f1b      	ldrb	r3, [r3, #28]
 802890c:	2b03      	cmp	r3, #3
 802890e:	d117      	bne.n	8028940 <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	685a      	ldr	r2, [r3, #4]
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	7b5b      	ldrb	r3, [r3, #13]
 8028918:	4610      	mov	r0, r2
 802891a:	4619      	mov	r1, r3
 802891c:	f7ff fcb2 	bl	8028284 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8028928:	2b00      	cmp	r3, #0
 802892a:	d104      	bne.n	8028936 <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	689b      	ldr	r3, [r3, #8]
 8028930:	4618      	mov	r0, r3
 8028932:	f7ff fccd 	bl	80282d0 <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8028936:	687b      	ldr	r3, [r7, #4]
 8028938:	2202      	movs	r2, #2
 802893a:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 802893c:	2300      	movs	r3, #0
 802893e:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 8028940:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 8028942:	4618      	mov	r0, r3
 8028944:	3710      	adds	r7, #16
 8028946:	46bd      	mov	sp, r7
 8028948:	bd80      	pop	{r7, pc}
 802894a:	bf00      	nop

0802894c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 802894c:	b480      	push	{r7}
 802894e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8028950:	4b04      	ldr	r3, [pc, #16]	; (8028964 <NVIC_GetPriorityGrouping+0x18>)
 8028952:	68db      	ldr	r3, [r3, #12]
 8028954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028958:	0a1b      	lsrs	r3, r3, #8
}
 802895a:	4618      	mov	r0, r3
 802895c:	46bd      	mov	sp, r7
 802895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028962:	4770      	bx	lr
 8028964:	e000ed00 	.word	0xe000ed00

08028968 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8028968:	b480      	push	{r7}
 802896a:	b083      	sub	sp, #12
 802896c:	af00      	add	r7, sp, #0
 802896e:	4603      	mov	r3, r0
 8028970:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8028972:	4908      	ldr	r1, [pc, #32]	; (8028994 <NVIC_EnableIRQ+0x2c>)
 8028974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028978:	095b      	lsrs	r3, r3, #5
 802897a:	79fa      	ldrb	r2, [r7, #7]
 802897c:	f002 021f 	and.w	r2, r2, #31
 8028980:	2001      	movs	r0, #1
 8028982:	fa00 f202 	lsl.w	r2, r0, r2
 8028986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802898a:	370c      	adds	r7, #12
 802898c:	46bd      	mov	sp, r7
 802898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028992:	4770      	bx	lr
 8028994:	e000e100 	.word	0xe000e100

08028998 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8028998:	b480      	push	{r7}
 802899a:	b083      	sub	sp, #12
 802899c:	af00      	add	r7, sp, #0
 802899e:	4603      	mov	r3, r0
 80289a0:	6039      	str	r1, [r7, #0]
 80289a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80289a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80289a8:	2b00      	cmp	r3, #0
 80289aa:	da0b      	bge.n	80289c4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80289ac:	490d      	ldr	r1, [pc, #52]	; (80289e4 <NVIC_SetPriority+0x4c>)
 80289ae:	79fb      	ldrb	r3, [r7, #7]
 80289b0:	f003 030f 	and.w	r3, r3, #15
 80289b4:	3b04      	subs	r3, #4
 80289b6:	683a      	ldr	r2, [r7, #0]
 80289b8:	b2d2      	uxtb	r2, r2
 80289ba:	0092      	lsls	r2, r2, #2
 80289bc:	b2d2      	uxtb	r2, r2
 80289be:	440b      	add	r3, r1
 80289c0:	761a      	strb	r2, [r3, #24]
 80289c2:	e009      	b.n	80289d8 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80289c4:	4908      	ldr	r1, [pc, #32]	; (80289e8 <NVIC_SetPriority+0x50>)
 80289c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80289ca:	683a      	ldr	r2, [r7, #0]
 80289cc:	b2d2      	uxtb	r2, r2
 80289ce:	0092      	lsls	r2, r2, #2
 80289d0:	b2d2      	uxtb	r2, r2
 80289d2:	440b      	add	r3, r1
 80289d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80289d8:	370c      	adds	r7, #12
 80289da:	46bd      	mov	sp, r7
 80289dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289e0:	4770      	bx	lr
 80289e2:	bf00      	nop
 80289e4:	e000ed00 	.word	0xe000ed00
 80289e8:	e000e100 	.word	0xe000e100

080289ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80289ec:	b480      	push	{r7}
 80289ee:	b089      	sub	sp, #36	; 0x24
 80289f0:	af00      	add	r7, sp, #0
 80289f2:	60f8      	str	r0, [r7, #12]
 80289f4:	60b9      	str	r1, [r7, #8]
 80289f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80289f8:	68fb      	ldr	r3, [r7, #12]
 80289fa:	f003 0307 	and.w	r3, r3, #7
 80289fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8028a00:	69fb      	ldr	r3, [r7, #28]
 8028a02:	f1c3 0307 	rsb	r3, r3, #7
 8028a06:	2b06      	cmp	r3, #6
 8028a08:	bf28      	it	cs
 8028a0a:	2306      	movcs	r3, #6
 8028a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8028a0e:	69fb      	ldr	r3, [r7, #28]
 8028a10:	3306      	adds	r3, #6
 8028a12:	2b06      	cmp	r3, #6
 8028a14:	d902      	bls.n	8028a1c <NVIC_EncodePriority+0x30>
 8028a16:	69fb      	ldr	r3, [r7, #28]
 8028a18:	3b01      	subs	r3, #1
 8028a1a:	e000      	b.n	8028a1e <NVIC_EncodePriority+0x32>
 8028a1c:	2300      	movs	r3, #0
 8028a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028a20:	69bb      	ldr	r3, [r7, #24]
 8028a22:	2201      	movs	r2, #1
 8028a24:	fa02 f303 	lsl.w	r3, r2, r3
 8028a28:	1e5a      	subs	r2, r3, #1
 8028a2a:	68bb      	ldr	r3, [r7, #8]
 8028a2c:	401a      	ands	r2, r3
 8028a2e:	697b      	ldr	r3, [r7, #20]
 8028a30:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8028a32:	697b      	ldr	r3, [r7, #20]
 8028a34:	2101      	movs	r1, #1
 8028a36:	fa01 f303 	lsl.w	r3, r1, r3
 8028a3a:	1e59      	subs	r1, r3, #1
 8028a3c:	687b      	ldr	r3, [r7, #4]
 8028a3e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8028a40:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8028a42:	4618      	mov	r0, r3
 8028a44:	3724      	adds	r7, #36	; 0x24
 8028a46:	46bd      	mov	sp, r7
 8028a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a4c:	4770      	bx	lr
 8028a4e:	bf00      	nop

08028a50 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8028a50:	b580      	push	{r7, lr}
 8028a52:	b082      	sub	sp, #8
 8028a54:	af00      	add	r7, sp, #0
 8028a56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8028a58:	687b      	ldr	r3, [r7, #4]
 8028a5a:	781b      	ldrb	r3, [r3, #0]
 8028a5c:	b25b      	sxtb	r3, r3
 8028a5e:	4618      	mov	r0, r3
 8028a60:	f7ff ff82 	bl	8028968 <NVIC_EnableIRQ>
}
 8028a64:	3708      	adds	r7, #8
 8028a66:	46bd      	mov	sp, r7
 8028a68:	bd80      	pop	{r7, pc}
 8028a6a:	bf00      	nop

08028a6c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8028a6c:	b590      	push	{r4, r7, lr}
 8028a6e:	b083      	sub	sp, #12
 8028a70:	af00      	add	r7, sp, #0
 8028a72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8028a74:	687b      	ldr	r3, [r7, #4]
 8028a76:	781c      	ldrb	r4, [r3, #0]
 8028a78:	f7ff ff68 	bl	802894c <NVIC_GetPriorityGrouping>
 8028a7c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8028a7e:	687b      	ldr	r3, [r7, #4]
 8028a80:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8028a82:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8028a88:	4608      	mov	r0, r1
 8028a8a:	4611      	mov	r1, r2
 8028a8c:	461a      	mov	r2, r3
 8028a8e:	f7ff ffad 	bl	80289ec <NVIC_EncodePriority>
 8028a92:	4602      	mov	r2, r0
 8028a94:	b263      	sxtb	r3, r4
 8028a96:	4618      	mov	r0, r3
 8028a98:	4611      	mov	r1, r2
 8028a9a:	f7ff ff7d 	bl	8028998 <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	78db      	ldrb	r3, [r3, #3]
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	d002      	beq.n	8028aac <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8028aa6:	6878      	ldr	r0, [r7, #4]
 8028aa8:	f7ff ffd2 	bl	8028a50 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8028aac:	2300      	movs	r3, #0
}
 8028aae:	4618      	mov	r0, r3
 8028ab0:	370c      	adds	r7, #12
 8028ab2:	46bd      	mov	sp, r7
 8028ab4:	bd90      	pop	{r4, r7, pc}
 8028ab6:	bf00      	nop

08028ab8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8028ab8:	b480      	push	{r7}
 8028aba:	b083      	sub	sp, #12
 8028abc:	af00      	add	r7, sp, #0
 8028abe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8028ac0:	687b      	ldr	r3, [r7, #4]
 8028ac2:	68db      	ldr	r3, [r3, #12]
 8028ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8028ac8:	687b      	ldr	r3, [r7, #4]
 8028aca:	60da      	str	r2, [r3, #12]
}
 8028acc:	370c      	adds	r7, #12
 8028ace:	46bd      	mov	sp, r7
 8028ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ad4:	4770      	bx	lr
 8028ad6:	bf00      	nop

08028ad8 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8028ad8:	b580      	push	{r7, lr}
 8028ada:	b082      	sub	sp, #8
 8028adc:	af00      	add	r7, sp, #0
 8028ade:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	7b5b      	ldrb	r3, [r3, #13]
 8028ae4:	f083 0301 	eor.w	r3, r3, #1
 8028ae8:	b2db      	uxtb	r3, r3
 8028aea:	2b00      	cmp	r3, #0
 8028aec:	d00f      	beq.n	8028b0e <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	689a      	ldr	r2, [r3, #8]
 8028af2:	687b      	ldr	r3, [r7, #4]
 8028af4:	7b1b      	ldrb	r3, [r3, #12]
 8028af6:	4610      	mov	r0, r2
 8028af8:	4619      	mov	r1, r3
 8028afa:	f7fe fdb3 	bl	8027664 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8028afe:	687b      	ldr	r3, [r7, #4]
 8028b00:	689b      	ldr	r3, [r3, #8]
 8028b02:	4618      	mov	r0, r3
 8028b04:	f7ff ffd8 	bl	8028ab8 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8028b08:	687b      	ldr	r3, [r7, #4]
 8028b0a:	2201      	movs	r2, #1
 8028b0c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8028b0e:	2300      	movs	r3, #0
}
 8028b10:	4618      	mov	r0, r3
 8028b12:	3708      	adds	r7, #8
 8028b14:	46bd      	mov	sp, r7
 8028b16:	bd80      	pop	{r7, pc}

08028b18 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8028b18:	b480      	push	{r7}
 8028b1a:	b083      	sub	sp, #12
 8028b1c:	af00      	add	r7, sp, #0
 8028b1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8028b20:	687b      	ldr	r3, [r7, #4]
 8028b22:	68db      	ldr	r3, [r3, #12]
 8028b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	60da      	str	r2, [r3, #12]
}
 8028b2c:	370c      	adds	r7, #12
 8028b2e:	46bd      	mov	sp, r7
 8028b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b34:	4770      	bx	lr
 8028b36:	bf00      	nop

08028b38 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8028b38:	b580      	push	{r7, lr}
 8028b3a:	b082      	sub	sp, #8
 8028b3c:	af00      	add	r7, sp, #0
 8028b3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8028b40:	687b      	ldr	r3, [r7, #4]
 8028b42:	7b5b      	ldrb	r3, [r3, #13]
 8028b44:	f083 0301 	eor.w	r3, r3, #1
 8028b48:	b2db      	uxtb	r3, r3
 8028b4a:	2b00      	cmp	r3, #0
 8028b4c:	d00f      	beq.n	8028b6e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8028b4e:	687b      	ldr	r3, [r7, #4]
 8028b50:	689a      	ldr	r2, [r3, #8]
 8028b52:	687b      	ldr	r3, [r7, #4]
 8028b54:	7b1b      	ldrb	r3, [r3, #12]
 8028b56:	4610      	mov	r0, r2
 8028b58:	4619      	mov	r1, r3
 8028b5a:	f7fe fc73 	bl	8027444 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	689b      	ldr	r3, [r3, #8]
 8028b62:	4618      	mov	r0, r3
 8028b64:	f7ff ffd8 	bl	8028b18 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8028b68:	687b      	ldr	r3, [r7, #4]
 8028b6a:	2201      	movs	r2, #1
 8028b6c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8028b6e:	2300      	movs	r3, #0
}
 8028b70:	4618      	mov	r0, r3
 8028b72:	3708      	adds	r7, #8
 8028b74:	46bd      	mov	sp, r7
 8028b76:	bd80      	pop	{r7, pc}

08028b78 <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 8028b78:	b480      	push	{r7}
 8028b7a:	b083      	sub	sp, #12
 8028b7c:	af00      	add	r7, sp, #0
 8028b7e:	4603      	mov	r3, r0
 8028b80:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 8028b82:	4909      	ldr	r1, [pc, #36]	; (8028ba8 <XMC_FLASH_SetMargin+0x30>)
 8028b84:	4b08      	ldr	r3, [pc, #32]	; (8028ba8 <XMC_FLASH_SetMargin+0x30>)
 8028b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028b8a:	3318      	adds	r3, #24
 8028b8c:	681b      	ldr	r3, [r3, #0]
 8028b8e:	f023 020f 	bic.w	r2, r3, #15
 8028b92:	79fb      	ldrb	r3, [r7, #7]
 8028b94:	431a      	orrs	r2, r3
 8028b96:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8028b9a:	3318      	adds	r3, #24
 8028b9c:	601a      	str	r2, [r3, #0]
}
 8028b9e:	370c      	adds	r7, #12
 8028ba0:	46bd      	mov	sp, r7
 8028ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ba6:	4770      	bx	lr
 8028ba8:	58001000 	.word	0x58001000

08028bac <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 8028bac:	b480      	push	{r7}
 8028bae:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 8028bb0:	4907      	ldr	r1, [pc, #28]	; (8028bd0 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8028bb2:	4b07      	ldr	r3, [pc, #28]	; (8028bd0 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8028bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028bb8:	3318      	adds	r3, #24
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8028bc0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8028bc4:	3318      	adds	r3, #24
 8028bc6:	601a      	str	r2, [r3, #0]
}
 8028bc8:	46bd      	mov	sp, r7
 8028bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bce:	4770      	bx	lr
 8028bd0:	58001000 	.word	0x58001000

08028bd4 <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 8028bd4:	b480      	push	{r7}
 8028bd6:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 8028bd8:	4907      	ldr	r1, [pc, #28]	; (8028bf8 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8028bda:	4b07      	ldr	r3, [pc, #28]	; (8028bf8 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8028bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028be0:	3318      	adds	r3, #24
 8028be2:	681b      	ldr	r3, [r3, #0]
 8028be4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8028be8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8028bec:	3318      	adds	r3, #24
 8028bee:	601a      	str	r2, [r3, #0]
}
 8028bf0:	46bd      	mov	sp, r7
 8028bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bf6:	4770      	bx	lr
 8028bf8:	58001000 	.word	0x58001000

08028bfc <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 8028bfc:	b480      	push	{r7}
 8028bfe:	b083      	sub	sp, #12
 8028c00:	af00      	add	r7, sp, #0
 8028c02:	6078      	str	r0, [r7, #4]
 8028c04:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	683a      	ldr	r2, [r7, #0]
 8028c0c:	619a      	str	r2, [r3, #24]
}
 8028c0e:	370c      	adds	r7, #12
 8028c10:	46bd      	mov	sp, r7
 8028c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c16:	4770      	bx	lr

08028c18 <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 8028c18:	b580      	push	{r7, lr}
 8028c1a:	b084      	sub	sp, #16
 8028c1c:	af00      	add	r7, sp, #0
 8028c1e:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))

  status = E_EEPROM_XMC4_STATUS_OK;
 8028c20:	2300      	movs	r3, #0
 8028c22:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 8028c24:	687b      	ldr	r3, [r7, #4]
 8028c26:	781b      	ldrb	r3, [r3, #0]
 8028c28:	f083 0301 	eor.w	r3, r3, #1
 8028c2c:	b2db      	uxtb	r3, r3
 8028c2e:	2b00      	cmp	r3, #0
 8028c30:	d04c      	beq.n	8028ccc <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 8028c32:	4b29      	ldr	r3, [pc, #164]	; (8028cd8 <E_EEPROM_XMC4_Init+0xc0>)
 8028c34:	2200      	movs	r2, #0
 8028c36:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8028c38:	4b28      	ldr	r3, [pc, #160]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028c3a:	2200      	movs	r2, #0
 8028c3c:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 8028c3e:	2001      	movs	r0, #1
 8028c40:	f7ff ff9a 	bl	8028b78 <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 8028c44:	f7ff ffc6 	bl	8028bd4 <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 8028c48:	f7ff f928 	bl	8027e9c <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8028c4c:	4824      	ldr	r0, [pc, #144]	; (8028ce0 <E_EEPROM_XMC4_Init+0xc8>)
 8028c4e:	f7ff f90f 	bl	8027e70 <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8028c52:	2300      	movs	r3, #0
 8028c54:	60fb      	str	r3, [r7, #12]
 8028c56:	e005      	b.n	8028c64 <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 8028c58:	68f8      	ldr	r0, [r7, #12]
 8028c5a:	f000 f935 	bl	8028ec8 <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8028c5e:	68fb      	ldr	r3, [r7, #12]
 8028c60:	3301      	adds	r3, #1
 8028c62:	60fb      	str	r3, [r7, #12]
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	2b03      	cmp	r3, #3
 8028c68:	d9f6      	bls.n	8028c58 <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 8028c6a:	2000      	movs	r0, #0
 8028c6c:	f7ff ff84 	bl	8028b78 <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8028c70:	7afb      	ldrb	r3, [r7, #11]
 8028c72:	2b00      	cmp	r3, #0
 8028c74:	d125      	bne.n	8028cc2 <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8028c76:	f000 f97d 	bl	8028f74 <E_EEPROM_XMC4_lInitEraseStateMachine>
 8028c7a:	4603      	mov	r3, r0
 8028c7c:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 8028c7e:	7afb      	ldrb	r3, [r7, #11]
 8028c80:	2b00      	cmp	r3, #0
 8028c82:	d11e      	bne.n	8028cc2 <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 8028c84:	4b15      	ldr	r3, [pc, #84]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028c86:	685b      	ldr	r3, [r3, #4]
 8028c88:	2b00      	cmp	r3, #0
 8028c8a:	d106      	bne.n	8028c9a <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 8028c8c:	4b13      	ldr	r3, [pc, #76]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028c8e:	2200      	movs	r2, #0
 8028c90:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8028c92:	4b12      	ldr	r3, [pc, #72]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028c94:	4a13      	ldr	r2, [pc, #76]	; (8028ce4 <E_EEPROM_XMC4_Init+0xcc>)
 8028c96:	601a      	str	r2, [r3, #0]
 8028c98:	e013      	b.n	8028cc2 <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 8028c9a:	f000 f9c3 	bl	8029024 <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 8028c9e:	4b0f      	ldr	r3, [pc, #60]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028ca0:	681a      	ldr	r2, [r3, #0]
 8028ca2:	4b0e      	ldr	r3, [pc, #56]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028ca4:	685b      	ldr	r3, [r3, #4]
 8028ca6:	1ad3      	subs	r3, r2, r3
 8028ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028cac:	d001      	beq.n	8028cb2 <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 8028cae:	2301      	movs	r3, #1
 8028cb0:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8028cb2:	4b0a      	ldr	r3, [pc, #40]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028cb4:	681b      	ldr	r3, [r3, #0]
 8028cb6:	4a0c      	ldr	r2, [pc, #48]	; (8028ce8 <E_EEPROM_XMC4_Init+0xd0>)
 8028cb8:	4293      	cmp	r3, r2
 8028cba:	d902      	bls.n	8028cc2 <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8028cbc:	4b07      	ldr	r3, [pc, #28]	; (8028cdc <E_EEPROM_XMC4_Init+0xc4>)
 8028cbe:	4a09      	ldr	r2, [pc, #36]	; (8028ce4 <E_EEPROM_XMC4_Init+0xcc>)
 8028cc0:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 8028cc2:	f7ff ff73 	bl	8028bac <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 8028cc6:	687b      	ldr	r3, [r7, #4]
 8028cc8:	2201      	movs	r2, #1
 8028cca:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 8028ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8028cce:	4618      	mov	r0, r3
 8028cd0:	3710      	adds	r7, #16
 8028cd2:	46bd      	mov	sp, r7
 8028cd4:	bd80      	pop	{r7, pc}
 8028cd6:	bf00      	nop
 8028cd8:	1ffe9528 	.word	0x1ffe9528
 8028cdc:	1ffe942c 	.word	0x1ffe942c
 8028ce0:	0802ae50 	.word	0x0802ae50
 8028ce4:	0c010000 	.word	0x0c010000
 8028ce8:	0c01ffff 	.word	0x0c01ffff

08028cec <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
void E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 8028cec:	b480      	push	{r7}
 8028cee:	b085      	sub	sp, #20
 8028cf0:	af00      	add	r7, sp, #0
 8028cf2:	4603      	mov	r3, r0
 8028cf4:	6039      	str	r1, [r7, #0]
 8028cf6:	80fb      	strh	r3, [r7, #6]
 8028cf8:	4613      	mov	r3, r2
 8028cfa:	80bb      	strh	r3, [r7, #4]

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8028cfc:	88fb      	ldrh	r3, [r7, #6]
 8028cfe:	3308      	adds	r3, #8
 8028d00:	4a0c      	ldr	r2, [pc, #48]	; (8028d34 <E_EEPROM_XMC4_WriteArray+0x48>)
 8028d02:	4413      	add	r3, r2
 8028d04:	60bb      	str	r3, [r7, #8]

  for (i = 0U; i < length; i++)
 8028d06:	2300      	movs	r3, #0
 8028d08:	81fb      	strh	r3, [r7, #14]
 8028d0a:	e00a      	b.n	8028d22 <E_EEPROM_XMC4_WriteArray+0x36>
  {
    *(address_ptr + i) = *(data + i);
 8028d0c:	89fb      	ldrh	r3, [r7, #14]
 8028d0e:	68ba      	ldr	r2, [r7, #8]
 8028d10:	4413      	add	r3, r2
 8028d12:	89fa      	ldrh	r2, [r7, #14]
 8028d14:	6839      	ldr	r1, [r7, #0]
 8028d16:	440a      	add	r2, r1
 8028d18:	7812      	ldrb	r2, [r2, #0]
 8028d1a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i = 0U; i < length; i++)
 8028d1c:	89fb      	ldrh	r3, [r7, #14]
 8028d1e:	3301      	adds	r3, #1
 8028d20:	81fb      	strh	r3, [r7, #14]
 8028d22:	89fa      	ldrh	r2, [r7, #14]
 8028d24:	88bb      	ldrh	r3, [r7, #4]
 8028d26:	429a      	cmp	r2, r3
 8028d28:	d3f0      	bcc.n	8028d0c <E_EEPROM_XMC4_WriteArray+0x20>
  {
    *(address_ptr + i) = *(data + i);
  }
}
 8028d2a:	3714      	adds	r7, #20
 8028d2c:	46bd      	mov	sp, r7
 8028d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d32:	4770      	bx	lr
 8028d34:	1ffe9528 	.word	0x1ffe9528

08028d38 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 8028d38:	b480      	push	{r7}
 8028d3a:	b085      	sub	sp, #20
 8028d3c:	af00      	add	r7, sp, #0
 8028d3e:	4603      	mov	r3, r0
 8028d40:	6039      	str	r1, [r7, #0]
 8028d42:	80fb      	strh	r3, [r7, #6]
 8028d44:	4613      	mov	r3, r2
 8028d46:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8028d48:	88fb      	ldrh	r3, [r7, #6]
 8028d4a:	3308      	adds	r3, #8
 8028d4c:	4a0c      	ldr	r2, [pc, #48]	; (8028d80 <E_EEPROM_XMC4_ReadArray+0x48>)
 8028d4e:	4413      	add	r3, r2
 8028d50:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 8028d52:	2300      	movs	r3, #0
 8028d54:	81fb      	strh	r3, [r7, #14]
 8028d56:	e00a      	b.n	8028d6e <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 8028d58:	89fb      	ldrh	r3, [r7, #14]
 8028d5a:	683a      	ldr	r2, [r7, #0]
 8028d5c:	4413      	add	r3, r2
 8028d5e:	89fa      	ldrh	r2, [r7, #14]
 8028d60:	68b9      	ldr	r1, [r7, #8]
 8028d62:	440a      	add	r2, r1
 8028d64:	7812      	ldrb	r2, [r2, #0]
 8028d66:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8028d68:	89fb      	ldrh	r3, [r7, #14]
 8028d6a:	3301      	adds	r3, #1
 8028d6c:	81fb      	strh	r3, [r7, #14]
 8028d6e:	89fa      	ldrh	r2, [r7, #14]
 8028d70:	88bb      	ldrh	r3, [r7, #4]
 8028d72:	429a      	cmp	r2, r3
 8028d74:	d3f0      	bcc.n	8028d58 <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 8028d76:	3714      	adds	r7, #20
 8028d78:	46bd      	mov	sp, r7
 8028d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d7e:	4770      	bx	lr
 8028d80:	1ffe9528 	.word	0x1ffe9528

08028d84 <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 8028d84:	b580      	push	{r7, lr}
 8028d86:	b082      	sub	sp, #8
 8028d88:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 8028d8a:	2300      	movs	r3, #0
 8028d8c:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 8028d8e:	4b22      	ldr	r3, [pc, #136]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028d90:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 8028d92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8028d96:	3304      	adds	r3, #4
 8028d98:	039b      	lsls	r3, r3, #14
 8028d9a:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8028d9c:	4b1e      	ldr	r3, [pc, #120]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028d9e:	681a      	ldr	r2, [r3, #0]
 8028da0:	683b      	ldr	r3, [r7, #0]
 8028da2:	429a      	cmp	r2, r3
 8028da4:	d111      	bne.n	8028dca <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 8028da6:	4b1d      	ldr	r3, [pc, #116]	; (8028e1c <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8028da8:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d00d      	beq.n	8028dca <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8028dae:	4b1a      	ldr	r3, [pc, #104]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028db0:	685b      	ldr	r3, [r3, #4]
 8028db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 8028db6:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8028db8:	4a17      	ldr	r2, [pc, #92]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dba:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 8028dbc:	4b16      	ldr	r3, [pc, #88]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dbe:	220f      	movs	r2, #15
 8028dc0:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8028dc2:	f000 f8d7 	bl	8028f74 <E_EEPROM_XMC4_lInitEraseStateMachine>
 8028dc6:	4603      	mov	r3, r0
 8028dc8:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 8028dca:	79fb      	ldrb	r3, [r7, #7]
 8028dcc:	2b00      	cmp	r3, #0
 8028dce:	d11d      	bne.n	8028e0c <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 8028dd0:	4b12      	ldr	r3, [pc, #72]	; (8028e1c <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8028dd2:	685b      	ldr	r3, [r3, #4]
 8028dd4:	3301      	adds	r3, #1
 8028dd6:	4a11      	ldr	r2, [pc, #68]	; (8028e1c <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8028dd8:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 8028dda:	f000 f839 	bl	8028e50 <E_EEPROM_XMC4_lWriteToFlash>
 8028dde:	4603      	mov	r3, r0
 8028de0:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8028de2:	79fb      	ldrb	r3, [r7, #7]
 8028de4:	2b00      	cmp	r3, #0
 8028de6:	d103      	bne.n	8028df0 <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 8028de8:	4b0b      	ldr	r3, [pc, #44]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dea:	681b      	ldr	r3, [r3, #0]
 8028dec:	4a0a      	ldr	r2, [pc, #40]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dee:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028df0:	4b09      	ldr	r3, [pc, #36]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028df2:	681b      	ldr	r3, [r3, #0]
 8028df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028df8:	4a07      	ldr	r2, [pc, #28]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dfa:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8028dfc:	4b06      	ldr	r3, [pc, #24]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	4a07      	ldr	r2, [pc, #28]	; (8028e20 <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 8028e02:	4293      	cmp	r3, r2
 8028e04:	d902      	bls.n	8028e0c <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8028e06:	4b04      	ldr	r3, [pc, #16]	; (8028e18 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028e08:	4a06      	ldr	r2, [pc, #24]	; (8028e24 <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 8028e0a:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8028e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8028e0e:	4618      	mov	r0, r3
 8028e10:	3708      	adds	r7, #8
 8028e12:	46bd      	mov	sp, r7
 8028e14:	bd80      	pop	{r7, pc}
 8028e16:	bf00      	nop
 8028e18:	1ffe942c 	.word	0x1ffe942c
 8028e1c:	1ffe9528 	.word	0x1ffe9528
 8028e20:	0c01ffff 	.word	0x0c01ffff
 8028e24:	0c010000 	.word	0x0c010000

08028e28 <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 8028e28:	b480      	push	{r7}
 8028e2a:	b083      	sub	sp, #12
 8028e2c:	af00      	add	r7, sp, #0
  bool status = false;
 8028e2e:	2300      	movs	r3, #0
 8028e30:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 8028e32:	4b06      	ldr	r3, [pc, #24]	; (8028e4c <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 8028e34:	685b      	ldr	r3, [r3, #4]
 8028e36:	2b00      	cmp	r3, #0
 8028e38:	d101      	bne.n	8028e3e <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 8028e3a:	2301      	movs	r3, #1
 8028e3c:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8028e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8028e40:	4618      	mov	r0, r3
 8028e42:	370c      	adds	r7, #12
 8028e44:	46bd      	mov	sp, r7
 8028e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e4a:	4770      	bx	lr
 8028e4c:	1ffe942c 	.word	0x1ffe942c

08028e50 <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 8028e50:	b580      	push	{r7, lr}
 8028e52:	b084      	sub	sp, #16
 8028e54:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 8028e56:	2300      	movs	r3, #0
 8028e58:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 8028e5a:	4b18      	ldr	r3, [pc, #96]	; (8028ebc <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8028e60:	4b17      	ldr	r3, [pc, #92]	; (8028ec0 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 8028e62:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 8028e64:	4817      	ldr	r0, [pc, #92]	; (8028ec4 <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 8028e66:	f000 f8c5 	bl	8028ff4 <E_EEPROM_XMC4_lCalculateCRC>
 8028e6a:	4602      	mov	r2, r0
 8028e6c:	4b14      	ldr	r3, [pc, #80]	; (8028ec0 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 8028e6e:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8028e70:	2300      	movs	r3, #0
 8028e72:	607b      	str	r3, [r7, #4]
 8028e74:	e019      	b.n	8028eaa <E_EEPROM_XMC4_lWriteToFlash+0x5a>
  {
    XMC_FLASH_ClearStatus();
 8028e76:	f7fd fcc5 	bl	8026804 <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 8028e7a:	68f8      	ldr	r0, [r7, #12]
 8028e7c:	68b9      	ldr	r1, [r7, #8]
 8028e7e:	f7fd fcd5 	bl	802682c <XMC_FLASH_ProgramPage>

    if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 8028e82:	f7fd fcc5 	bl	8026810 <XMC_FLASH_GetStatus>
 8028e86:	4603      	mov	r3, r0
 8028e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8028e8c:	d102      	bne.n	8028e94 <E_EEPROM_XMC4_lWriteToFlash+0x44>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 8028e8e:	2303      	movs	r3, #3
 8028e90:	70fb      	strb	r3, [r7, #3]
      break;
 8028e92:	e00d      	b.n	8028eb0 <E_EEPROM_XMC4_lWriteToFlash+0x60>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 8028e94:	68bb      	ldr	r3, [r7, #8]
 8028e96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8028e9a:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 8028e9c:	68fb      	ldr	r3, [r7, #12]
 8028e9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8028ea2:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	3301      	adds	r3, #1
 8028ea8:	607b      	str	r3, [r7, #4]
 8028eaa:	687b      	ldr	r3, [r7, #4]
 8028eac:	2b0f      	cmp	r3, #15
 8028eae:	d9e2      	bls.n	8028e76 <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 8028eb0:	78fb      	ldrb	r3, [r7, #3]
}
 8028eb2:	4618      	mov	r0, r3
 8028eb4:	3710      	adds	r7, #16
 8028eb6:	46bd      	mov	sp, r7
 8028eb8:	bd80      	pop	{r7, pc}
 8028eba:	bf00      	nop
 8028ebc:	1ffe942c 	.word	0x1ffe942c
 8028ec0:	1ffe9528 	.word	0x1ffe9528
 8028ec4:	1ffe952c 	.word	0x1ffe952c

08028ec8 <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 8028ec8:	b580      	push	{r7, lr}
 8028eca:	b08a      	sub	sp, #40	; 0x28
 8028ecc:	af00      	add	r7, sp, #0
 8028ece:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 8028ed0:	687b      	ldr	r3, [r7, #4]
 8028ed2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8028ed6:	3304      	adds	r3, #4
 8028ed8:	039b      	lsls	r3, r3, #14
 8028eda:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028edc:	69fb      	ldr	r3, [r7, #28]
 8028ede:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8028ee2:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 8028ee4:	2300      	movs	r3, #0
 8028ee6:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 8028ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028eea:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8028eec:	69bb      	ldr	r3, [r7, #24]
 8028eee:	685b      	ldr	r3, [r3, #4]
 8028ef0:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 8028ef2:	697b      	ldr	r3, [r7, #20]
 8028ef4:	2b00      	cmp	r3, #0
 8028ef6:	d02e      	beq.n	8028f56 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8028ef8:	4b1c      	ldr	r3, [pc, #112]	; (8028f6c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028efa:	68da      	ldr	r2, [r3, #12]
 8028efc:	687b      	ldr	r3, [r7, #4]
 8028efe:	2101      	movs	r1, #1
 8028f00:	fa01 f303 	lsl.w	r3, r1, r3
 8028f04:	4313      	orrs	r3, r2
 8028f06:	4a19      	ldr	r2, [pc, #100]	; (8028f6c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028f08:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 8028f0a:	6a3b      	ldr	r3, [r7, #32]
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d103      	bne.n	8028f18 <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028f16:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8028f18:	69bb      	ldr	r3, [r7, #24]
 8028f1a:	681b      	ldr	r3, [r3, #0]
 8028f1c:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8028f1e:	69bb      	ldr	r3, [r7, #24]
 8028f20:	3304      	adds	r3, #4
 8028f22:	4618      	mov	r0, r3
 8028f24:	f000 f866 	bl	8028ff4 <E_EEPROM_XMC4_lCalculateCRC>
 8028f28:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 8028f2a:	68fa      	ldr	r2, [r7, #12]
 8028f2c:	693b      	ldr	r3, [r7, #16]
 8028f2e:	429a      	cmp	r2, r3
 8028f30:	d111      	bne.n	8028f56 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 8028f32:	4b0f      	ldr	r3, [pc, #60]	; (8028f70 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8028f34:	685a      	ldr	r2, [r3, #4]
 8028f36:	697b      	ldr	r3, [r7, #20]
 8028f38:	429a      	cmp	r2, r3
 8028f3a:	d20c      	bcs.n	8028f56 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 8028f3c:	4a0c      	ldr	r2, [pc, #48]	; (8028f70 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8028f3e:	697b      	ldr	r3, [r7, #20]
 8028f40:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 8028f42:	4a0a      	ldr	r2, [pc, #40]	; (8028f6c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 8028f48:	4a08      	ldr	r2, [pc, #32]	; (8028f6c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f4c:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 8028f4e:	4a07      	ldr	r2, [pc, #28]	; (8028f6c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028f50:	6a3b      	ldr	r3, [r7, #32]
 8028f52:	6013      	str	r3, [r2, #0]
          break;
 8028f54:	e007      	b.n	8028f66 <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f58:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8028f5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 8028f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f60:	69fb      	ldr	r3, [r7, #28]
 8028f62:	429a      	cmp	r2, r3
 8028f64:	d2c0      	bcs.n	8028ee8 <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 8028f66:	3728      	adds	r7, #40	; 0x28
 8028f68:	46bd      	mov	sp, r7
 8028f6a:	bd80      	pop	{r7, pc}
 8028f6c:	1ffe942c 	.word	0x1ffe942c
 8028f70:	1ffe9528 	.word	0x1ffe9528

08028f74 <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 8028f74:	b580      	push	{r7, lr}
 8028f76:	b084      	sub	sp, #16
 8028f78:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 8028f7a:	2300      	movs	r3, #0
 8028f7c:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 8028f7e:	2300      	movs	r3, #0
 8028f80:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 8028f82:	4b1b      	ldr	r3, [pc, #108]	; (8028ff0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8028f84:	689a      	ldr	r2, [r3, #8]
 8028f86:	68fb      	ldr	r3, [r7, #12]
 8028f88:	429a      	cmp	r2, r3
 8028f8a:	d026      	beq.n	8028fda <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8028f8c:	4b18      	ldr	r3, [pc, #96]	; (8028ff0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8028f8e:	68da      	ldr	r2, [r3, #12]
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	fa22 f303 	lsr.w	r3, r2, r3
 8028f96:	f003 0301 	and.w	r3, r3, #1
 8028f9a:	2b00      	cmp	r3, #0
 8028f9c:	d01d      	beq.n	8028fda <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 8028f9e:	68fb      	ldr	r3, [r7, #12]
 8028fa0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8028fa4:	3304      	adds	r3, #4
 8028fa6:	039b      	lsls	r3, r3, #14
 8028fa8:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 8028faa:	f7fd fc2b 	bl	8026804 <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	4618      	mov	r0, r3
 8028fb2:	f7fd fc6f 	bl	8026894 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8028fb6:	f7fd fc2b 	bl	8026810 <XMC_FLASH_GetStatus>
 8028fba:	4603      	mov	r3, r0
 8028fbc:	2b20      	cmp	r3, #32
 8028fbe:	d002      	beq.n	8028fc6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 8028fc0:	2304      	movs	r3, #4
 8028fc2:	72fb      	strb	r3, [r7, #11]
          break;
 8028fc4:	e00f      	b.n	8028fe6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8028fc6:	4b0a      	ldr	r3, [pc, #40]	; (8028ff0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8028fc8:	68da      	ldr	r2, [r3, #12]
 8028fca:	68fb      	ldr	r3, [r7, #12]
 8028fcc:	2101      	movs	r1, #1
 8028fce:	fa01 f303 	lsl.w	r3, r1, r3
 8028fd2:	43db      	mvns	r3, r3
 8028fd4:	4013      	ands	r3, r2
 8028fd6:	4a06      	ldr	r2, [pc, #24]	; (8028ff0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8028fd8:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 8028fda:	68fb      	ldr	r3, [r7, #12]
 8028fdc:	3301      	adds	r3, #1
 8028fde:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 8028fe0:	68fb      	ldr	r3, [r7, #12]
 8028fe2:	2b03      	cmp	r3, #3
 8028fe4:	d9cd      	bls.n	8028f82 <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 8028fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8028fe8:	4618      	mov	r0, r3
 8028fea:	3710      	adds	r7, #16
 8028fec:	46bd      	mov	sp, r7
 8028fee:	bd80      	pop	{r7, pc}
 8028ff0:	1ffe942c 	.word	0x1ffe942c

08028ff4 <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 8028ff4:	b580      	push	{r7, lr}
 8028ff6:	b084      	sub	sp, #16
 8028ff8:	af00      	add	r7, sp, #0
 8028ffa:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8028ffc:	4808      	ldr	r0, [pc, #32]	; (8029020 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8028ffe:	2100      	movs	r1, #0
 8029000:	f7ff fdfc 	bl	8028bfc <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8029004:	f107 030c 	add.w	r3, r7, #12
 8029008:	4805      	ldr	r0, [pc, #20]	; (8029020 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 802900a:	6879      	ldr	r1, [r7, #4]
 802900c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8029010:	f7fe ff58 	bl	8027ec4 <XMC_FCE_CalculateCRC32>

  return (result);
 8029014:	68fb      	ldr	r3, [r7, #12]
}
 8029016:	4618      	mov	r0, r3
 8029018:	3710      	adds	r7, #16
 802901a:	46bd      	mov	sp, r7
 802901c:	bd80      	pop	{r7, pc}
 802901e:	bf00      	nop
 8029020:	0802ae50 	.word	0x0802ae50

08029024 <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 8029024:	b480      	push	{r7}
 8029026:	b085      	sub	sp, #20
 8029028:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 802902a:	4b0f      	ldr	r3, [pc, #60]	; (8029068 <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 802902c:	685b      	ldr	r3, [r3, #4]
 802902e:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8029030:	4b0e      	ldr	r3, [pc, #56]	; (802906c <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 8029032:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8029034:	2300      	movs	r3, #0
 8029036:	60fb      	str	r3, [r7, #12]
 8029038:	e00c      	b.n	8029054 <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 802903a:	68fb      	ldr	r3, [r7, #12]
 802903c:	009b      	lsls	r3, r3, #2
 802903e:	687a      	ldr	r2, [r7, #4]
 8029040:	4413      	add	r3, r2
 8029042:	68fa      	ldr	r2, [r7, #12]
 8029044:	0092      	lsls	r2, r2, #2
 8029046:	68b9      	ldr	r1, [r7, #8]
 8029048:	440a      	add	r2, r1
 802904a:	6812      	ldr	r2, [r2, #0]
 802904c:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 802904e:	68fb      	ldr	r3, [r7, #12]
 8029050:	3301      	adds	r3, #1
 8029052:	60fb      	str	r3, [r7, #12]
 8029054:	68fb      	ldr	r3, [r7, #12]
 8029056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802905a:	d3ee      	bcc.n	802903a <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 802905c:	3714      	adds	r7, #20
 802905e:	46bd      	mov	sp, r7
 8029060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029064:	4770      	bx	lr
 8029066:	bf00      	nop
 8029068:	1ffe942c 	.word	0x1ffe942c
 802906c:	1ffe9528 	.word	0x1ffe9528

08029070 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 8029070:	b580      	push	{r7, lr}
 8029072:	b082      	sub	sp, #8
 8029074:	af00      	add	r7, sp, #0
 8029076:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8029078:	687b      	ldr	r3, [r7, #4]
 802907a:	7b5b      	ldrb	r3, [r3, #13]
 802907c:	f083 0301 	eor.w	r3, r3, #1
 8029080:	b2db      	uxtb	r3, r3
 8029082:	2b00      	cmp	r3, #0
 8029084:	d012      	beq.n	80290ac <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 8029086:	687b      	ldr	r3, [r7, #4]
 8029088:	6819      	ldr	r1, [r3, #0]
 802908a:	687b      	ldr	r3, [r7, #4]
 802908c:	7b1a      	ldrb	r2, [r3, #12]
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	685b      	ldr	r3, [r3, #4]
 8029092:	4608      	mov	r0, r1
 8029094:	4611      	mov	r1, r2
 8029096:	461a      	mov	r2, r3
 8029098:	f7fe fed6 	bl	8027e48 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 802909c:	687b      	ldr	r3, [r7, #4]
 802909e:	689b      	ldr	r3, [r3, #8]
 80290a0:	4618      	mov	r0, r3
 80290a2:	f7fd fd95 	bl	8026bd0 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 80290a6:	687b      	ldr	r3, [r7, #4]
 80290a8:	2201      	movs	r2, #1
 80290aa:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 80290ac:	2300      	movs	r3, #0
}
 80290ae:	4618      	mov	r0, r3
 80290b0:	3708      	adds	r7, #8
 80290b2:	46bd      	mov	sp, r7
 80290b4:	bd80      	pop	{r7, pc}
 80290b6:	bf00      	nop

080290b8 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 80290b8:	b580      	push	{r7, lr}
 80290ba:	b082      	sub	sp, #8
 80290bc:	af00      	add	r7, sp, #0
 80290be:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	7b1b      	ldrb	r3, [r3, #12]
 80290c4:	f083 0301 	eor.w	r3, r3, #1
 80290c8:	b2db      	uxtb	r3, r3
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d00d      	beq.n	80290ea <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 80290ce:	687b      	ldr	r3, [r7, #4]
 80290d0:	6819      	ldr	r1, [r3, #0]
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	791a      	ldrb	r2, [r3, #4]
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	689b      	ldr	r3, [r3, #8]
 80290da:	4608      	mov	r0, r1
 80290dc:	4611      	mov	r1, r2
 80290de:	461a      	mov	r2, r3
 80290e0:	f7fe fe8c 	bl	8027dfc <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 80290e4:	687b      	ldr	r3, [r7, #4]
 80290e6:	2201      	movs	r2, #1
 80290e8:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 80290ea:	2300      	movs	r3, #0
}
 80290ec:	4618      	mov	r0, r3
 80290ee:	3708      	adds	r7, #8
 80290f0:	46bd      	mov	sp, r7
 80290f2:	bd80      	pop	{r7, pc}

080290f4 <ECAT_SSC_Init>:

/*
 * This function intialize's the EtherCAT slave controller.
 */
ECAT_SSC_STATUS_t ECAT_SSC_Init(ECAT_SSC_t *handle)
{
 80290f4:	b580      	push	{r7, lr}
 80290f6:	b084      	sub	sp, #16
 80290f8:	af00      	add	r7, sp, #0
 80290fa:	6078      	str	r0, [r7, #4]
  uint32_t status;

  status = (uint32_t)ECAT_SSC_STATUS_FAILURE;
 80290fc:	2301      	movs	r3, #1
 80290fe:	60fb      	str	r3, [r7, #12]

  /* Initialize the Flash Emulated EEPROM and copy the latest content to the internal working RAM buffer*/
  status = (uint32_t)E_EEPROM_XMC4_Init(handle->eeprom);
 8029100:	687b      	ldr	r3, [r7, #4]
 8029102:	681b      	ldr	r3, [r3, #0]
 8029104:	4618      	mov	r0, r3
 8029106:	f7ff fd87 	bl	8028c18 <E_EEPROM_XMC4_Init>
 802910a:	4603      	mov	r3, r0
 802910c:	60fb      	str	r3, [r7, #12]

  if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	2b00      	cmp	r3, #0
 8029112:	d141      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
  {
    /* Check if the slave configuration data is available in the Flash Emulated EEPROM*/
    if (E_EEPROM_XMC4_IsFlashEmpty())
 8029114:	f7ff fe88 	bl	8028e28 <E_EEPROM_XMC4_IsFlashEmpty>
 8029118:	4603      	mov	r3, r0
 802911a:	2b00      	cmp	r3, #0
 802911c:	d00a      	beq.n	8029134 <ECAT_SSC_Init+0x40>
    {
      /* Prepare the default configuration out of the SSC for EEPROM */
      E_EEPROM_XMC4_WriteArray(0U, aEepromData, (uint16_t)E_EEPROM_XMC4_DATA_BLOCK_SIZE);
 802911e:	2000      	movs	r0, #0
 8029120:	4920      	ldr	r1, [pc, #128]	; (80291a4 <ECAT_SSC_Init+0xb0>)
 8029122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029126:	f7ff fde1 	bl	8028cec <E_EEPROM_XMC4_WriteArray>

      /* Program the RAM contents to Emulated EEPROM*/
      status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 802912a:	f7ff fe2b 	bl	8028d84 <E_EEPROM_XMC4_UpdateFlashContents>
 802912e:	4603      	mov	r3, r0
 8029130:	60fb      	str	r3, [r7, #12]
 8029132:	e005      	b.n	8029140 <ECAT_SSC_Init+0x4c>
    }
    else
    {
      /* Read the latest contents from RAM buffer which has the latest contents of EEPROM */
      E_EEPROM_XMC4_ReadArray(0U,aEepromData,(uint16_t)E_EEPROM_XMC4_DATA_BLOCK_SIZE);
 8029134:	2000      	movs	r0, #0
 8029136:	491b      	ldr	r1, [pc, #108]	; (80291a4 <ECAT_SSC_Init+0xb0>)
 8029138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802913c:	f7ff fdfc 	bl	8028d38 <E_EEPROM_XMC4_ReadArray>
    }

    /* Initialize the 1 millisecond timer module*/
    if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8029140:	68fb      	ldr	r3, [r7, #12]
 8029142:	2b00      	cmp	r3, #0
 8029144:	d128      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
    {
      status = (uint32_t)TIMER_Init(handle->timer);
 8029146:	687b      	ldr	r3, [r7, #4]
 8029148:	685b      	ldr	r3, [r3, #4]
 802914a:	4618      	mov	r0, r3
 802914c:	f7fe fff4 	bl	8028138 <TIMER_Init>
 8029150:	4603      	mov	r3, r0
 8029152:	60fb      	str	r3, [r7, #12]
      /* Initialize the timer interrupt handler*/
      if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8029154:	68fb      	ldr	r3, [r7, #12]
 8029156:	2b00      	cmp	r3, #0
 8029158:	d11e      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
      {
        status = (uint32_t)INTERRUPT_Init(handle->timer_irqhandler);
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	689b      	ldr	r3, [r3, #8]
 802915e:	4618      	mov	r0, r3
 8029160:	f7ff fc84 	bl	8028a6c <INTERRUPT_Init>
 8029164:	4603      	mov	r3, r0
 8029166:	60fb      	str	r3, [r7, #12]
        /* Call Beckhoff HW abstraction layer API to initialize the XMC4800 ESC and supporting functions*/
        if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8029168:	68fb      	ldr	r3, [r7, #12]
 802916a:	2b00      	cmp	r3, #0
 802916c:	d114      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
        {
          status = HW_Init();
 802916e:	f000 f8e5 	bl	802933c <HW_Init>
 8029172:	4603      	mov	r3, r0
 8029174:	60fb      	str	r3, [r7, #12]
          /* Call Beckhoff HW abstraction layer API to start the stack interface initialization*/
          if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8029176:	68fb      	ldr	r3, [r7, #12]
 8029178:	2b00      	cmp	r3, #0
 802917a:	d10d      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
          {
            status = MainInit();
 802917c:	f7f7 ff34 	bl	8020fe8 <MainInit>
 8029180:	4603      	mov	r3, r0
 8029182:	60fb      	str	r3, [r7, #12]
            if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8029184:	68fb      	ldr	r3, [r7, #12]
 8029186:	2b00      	cmp	r3, #0
 8029188:	d106      	bne.n	8029198 <ECAT_SSC_Init+0xa4>
            {
              /*Start the 1 millisec timer*/
              status = (uint32_t)TIMER_Start(handle->timer);
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	685b      	ldr	r3, [r3, #4]
 802918e:	4618      	mov	r0, r3
 8029190:	f7fe fff0 	bl	8028174 <TIMER_Start>
 8029194:	4603      	mov	r3, r0
 8029196:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ((ECAT_SSC_STATUS_t)status);
 8029198:	68fb      	ldr	r3, [r7, #12]
 802919a:	b2db      	uxtb	r3, r3
}
 802919c:	4618      	mov	r0, r3
 802919e:	3710      	adds	r7, #16
 80291a0:	46bd      	mov	sp, r7
 80291a2:	bd80      	pop	{r7, pc}
 80291a4:	1ffe8b8c 	.word	0x1ffe8b8c

080291a8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80291a8:	b480      	push	{r7}
 80291aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80291ac:	4b04      	ldr	r3, [pc, #16]	; (80291c0 <NVIC_GetPriorityGrouping+0x18>)
 80291ae:	68db      	ldr	r3, [r3, #12]
 80291b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80291b4:	0a1b      	lsrs	r3, r3, #8
}
 80291b6:	4618      	mov	r0, r3
 80291b8:	46bd      	mov	sp, r7
 80291ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291be:	4770      	bx	lr
 80291c0:	e000ed00 	.word	0xe000ed00

080291c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80291c4:	b480      	push	{r7}
 80291c6:	b083      	sub	sp, #12
 80291c8:	af00      	add	r7, sp, #0
 80291ca:	4603      	mov	r3, r0
 80291cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80291ce:	4908      	ldr	r1, [pc, #32]	; (80291f0 <NVIC_EnableIRQ+0x2c>)
 80291d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80291d4:	095b      	lsrs	r3, r3, #5
 80291d6:	79fa      	ldrb	r2, [r7, #7]
 80291d8:	f002 021f 	and.w	r2, r2, #31
 80291dc:	2001      	movs	r0, #1
 80291de:	fa00 f202 	lsl.w	r2, r0, r2
 80291e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80291e6:	370c      	adds	r7, #12
 80291e8:	46bd      	mov	sp, r7
 80291ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291ee:	4770      	bx	lr
 80291f0:	e000e100 	.word	0xe000e100

080291f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80291f4:	b480      	push	{r7}
 80291f6:	b083      	sub	sp, #12
 80291f8:	af00      	add	r7, sp, #0
 80291fa:	4603      	mov	r3, r0
 80291fc:	6039      	str	r1, [r7, #0]
 80291fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8029200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029204:	2b00      	cmp	r3, #0
 8029206:	da0b      	bge.n	8029220 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029208:	490d      	ldr	r1, [pc, #52]	; (8029240 <NVIC_SetPriority+0x4c>)
 802920a:	79fb      	ldrb	r3, [r7, #7]
 802920c:	f003 030f 	and.w	r3, r3, #15
 8029210:	3b04      	subs	r3, #4
 8029212:	683a      	ldr	r2, [r7, #0]
 8029214:	b2d2      	uxtb	r2, r2
 8029216:	0092      	lsls	r2, r2, #2
 8029218:	b2d2      	uxtb	r2, r2
 802921a:	440b      	add	r3, r1
 802921c:	761a      	strb	r2, [r3, #24]
 802921e:	e009      	b.n	8029234 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029220:	4908      	ldr	r1, [pc, #32]	; (8029244 <NVIC_SetPriority+0x50>)
 8029222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029226:	683a      	ldr	r2, [r7, #0]
 8029228:	b2d2      	uxtb	r2, r2
 802922a:	0092      	lsls	r2, r2, #2
 802922c:	b2d2      	uxtb	r2, r2
 802922e:	440b      	add	r3, r1
 8029230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8029234:	370c      	adds	r7, #12
 8029236:	46bd      	mov	sp, r7
 8029238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802923c:	4770      	bx	lr
 802923e:	bf00      	nop
 8029240:	e000ed00 	.word	0xe000ed00
 8029244:	e000e100 	.word	0xe000e100

08029248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8029248:	b480      	push	{r7}
 802924a:	b089      	sub	sp, #36	; 0x24
 802924c:	af00      	add	r7, sp, #0
 802924e:	60f8      	str	r0, [r7, #12]
 8029250:	60b9      	str	r1, [r7, #8]
 8029252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8029254:	68fb      	ldr	r3, [r7, #12]
 8029256:	f003 0307 	and.w	r3, r3, #7
 802925a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802925c:	69fb      	ldr	r3, [r7, #28]
 802925e:	f1c3 0307 	rsb	r3, r3, #7
 8029262:	2b06      	cmp	r3, #6
 8029264:	bf28      	it	cs
 8029266:	2306      	movcs	r3, #6
 8029268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802926a:	69fb      	ldr	r3, [r7, #28]
 802926c:	3306      	adds	r3, #6
 802926e:	2b06      	cmp	r3, #6
 8029270:	d902      	bls.n	8029278 <NVIC_EncodePriority+0x30>
 8029272:	69fb      	ldr	r3, [r7, #28]
 8029274:	3b01      	subs	r3, #1
 8029276:	e000      	b.n	802927a <NVIC_EncodePriority+0x32>
 8029278:	2300      	movs	r3, #0
 802927a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802927c:	69bb      	ldr	r3, [r7, #24]
 802927e:	2201      	movs	r2, #1
 8029280:	fa02 f303 	lsl.w	r3, r2, r3
 8029284:	1e5a      	subs	r2, r3, #1
 8029286:	68bb      	ldr	r3, [r7, #8]
 8029288:	401a      	ands	r2, r3
 802928a:	697b      	ldr	r3, [r7, #20]
 802928c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802928e:	697b      	ldr	r3, [r7, #20]
 8029290:	2101      	movs	r1, #1
 8029292:	fa01 f303 	lsl.w	r3, r1, r3
 8029296:	1e59      	subs	r1, r3, #1
 8029298:	687b      	ldr	r3, [r7, #4]
 802929a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 802929c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 802929e:	4618      	mov	r0, r3
 80292a0:	3724      	adds	r7, #36	; 0x24
 80292a2:	46bd      	mov	sp, r7
 80292a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292a8:	4770      	bx	lr
 80292aa:	bf00      	nop

080292ac <XMC_ECAT_SetPortControl>:
 * \par
 * The function sets the port control by writing the configuration into the ECAT CON register.
 *
 */
__STATIC_INLINE void XMC_ECAT_SetPortControl(const XMC_ECAT_PORT_CTRL_t port_ctrl)
{
 80292ac:	b480      	push	{r7}
 80292ae:	b085      	sub	sp, #20
 80292b0:	af00      	add	r7, sp, #0
 80292b2:	1d3b      	adds	r3, r7, #4
 80292b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ECAT0_CON->CON = (uint32_t)port_ctrl.common.raw;
 80292b8:	4a06      	ldr	r2, [pc, #24]	; (80292d4 <XMC_ECAT_SetPortControl+0x28>)
 80292ba:	687b      	ldr	r3, [r7, #4]
 80292bc:	6013      	str	r3, [r2, #0]
  ECAT0_CON->CONP0 = (uint32_t)port_ctrl.port0.raw;
 80292be:	4a05      	ldr	r2, [pc, #20]	; (80292d4 <XMC_ECAT_SetPortControl+0x28>)
 80292c0:	68bb      	ldr	r3, [r7, #8]
 80292c2:	6053      	str	r3, [r2, #4]
  ECAT0_CON->CONP1 = (uint32_t)port_ctrl.port1.raw;
 80292c4:	4a03      	ldr	r2, [pc, #12]	; (80292d4 <XMC_ECAT_SetPortControl+0x28>)
 80292c6:	68fb      	ldr	r3, [r7, #12]
 80292c8:	6093      	str	r3, [r2, #8]
}
 80292ca:	3714      	adds	r7, #20
 80292cc:	46bd      	mov	sp, r7
 80292ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292d2:	4770      	bx	lr
 80292d4:	500041b0 	.word	0x500041b0

080292d8 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80292d8:	b580      	push	{r7, lr}
 80292da:	b082      	sub	sp, #8
 80292dc:	af00      	add	r7, sp, #0
 80292de:	6078      	str	r0, [r7, #4]
 80292e0:	460b      	mov	r3, r1
 80292e2:	807b      	strh	r3, [r7, #2]
 80292e4:	4613      	mov	r3, r2
 80292e6:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 80292e8:	887b      	ldrh	r3, [r7, #2]
 80292ea:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80292ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80292f2:	883a      	ldrh	r2, [r7, #0]
 80292f4:	6878      	ldr	r0, [r7, #4]
 80292f6:	4619      	mov	r1, r3
 80292f8:	f000 fffa 	bl	802a2f0 <memcpy>
}
 80292fc:	3708      	adds	r7, #8
 80292fe:	46bd      	mov	sp, r7
 8029300:	bd80      	pop	{r7, pc}
 8029302:	bf00      	nop

08029304 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8029304:	b580      	push	{r7, lr}
 8029306:	b082      	sub	sp, #8
 8029308:	af00      	add	r7, sp, #0
 802930a:	6078      	str	r0, [r7, #4]
 802930c:	460b      	mov	r3, r1
 802930e:	807b      	strh	r3, [r7, #2]
 8029310:	4613      	mov	r3, r2
 8029312:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8029314:	887b      	ldrh	r3, [r7, #2]
 8029316:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 802931a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802931e:	883a      	ldrh	r2, [r7, #0]
 8029320:	4618      	mov	r0, r3
 8029322:	6879      	ldr	r1, [r7, #4]
 8029324:	f000 ffe4 	bl	802a2f0 <memcpy>
}
 8029328:	3708      	adds	r7, #8
 802932a:	46bd      	mov	sp, r7
 802932c:	bd80      	pop	{r7, pc}
 802932e:	bf00      	nop

08029330 <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 8029330:	b580      	push	{r7, lr}
 8029332:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 8029334:	206d      	movs	r0, #109	; 0x6d
 8029336:	f7ff ff45 	bl	80291c4 <NVIC_EnableIRQ>
}
 802933a:	bd80      	pop	{r7, pc}

0802933c <HW_Init>:
extern UINT16 (* pAPPL_EEPROM_Reload)(void);
extern UINT16 (* pAPPL_EEPROM_Write)(UINT32 wordaddr);

/* EtherCAT Beckhoff HW abstraction layer interface API to initialize XMC ESC */
UINT16 HW_Init(void)
{
 802933c:	b580      	push	{r7, lr}
 802933e:	b088      	sub	sp, #32
 8029340:	af00      	add	r7, sp, #0
  uint8_t i;
  XMC_ECAT_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;

  /* EEPROM interface API registration */
  pEEPROM = &aEepromData[0U];
 8029342:	4bdb      	ldr	r3, [pc, #876]	; (80296b0 <HW_Init+0x374>)
 8029344:	4adb      	ldr	r2, [pc, #876]	; (80296b4 <HW_Init+0x378>)
 8029346:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Reload = HW_EepromReload;
 8029348:	4bdb      	ldr	r3, [pc, #876]	; (80296b8 <HW_Init+0x37c>)
 802934a:	4adc      	ldr	r2, [pc, #880]	; (80296bc <HW_Init+0x380>)
 802934c:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Write  = HW_EepromWrite;
 802934e:	4bdc      	ldr	r3, [pc, #880]	; (80296c0 <HW_Init+0x384>)
 8029350:	4adc      	ldr	r2, [pc, #880]	; (80296c4 <HW_Init+0x388>)
 8029352:	601a      	str	r2, [r3, #0]

  /* EtherCAT slave physical layer pin settings */
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8029354:	2300      	movs	r3, #0
 8029356:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LINK_STATUS, &gpio_config);
 8029358:	1d3b      	adds	r3, r7, #4
 802935a:	48db      	ldr	r0, [pc, #876]	; (80296c8 <HW_Init+0x38c>)
 802935c:	210f      	movs	r1, #15
 802935e:	461a      	mov	r2, r3
 8029360:	f7fd faf4 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD3, &gpio_config);
 8029364:	1d3b      	adds	r3, r7, #4
 8029366:	48d9      	ldr	r0, [pc, #868]	; (80296cc <HW_Init+0x390>)
 8029368:	2107      	movs	r1, #7
 802936a:	461a      	mov	r2, r3
 802936c:	f7fd faee 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD2, &gpio_config);
 8029370:	1d3b      	adds	r3, r7, #4
 8029372:	48d6      	ldr	r0, [pc, #856]	; (80296cc <HW_Init+0x390>)
 8029374:	2102      	movs	r1, #2
 8029376:	461a      	mov	r2, r3
 8029378:	f7fd fae8 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD1, &gpio_config);
 802937c:	1d3b      	adds	r3, r7, #4
 802937e:	48d3      	ldr	r0, [pc, #844]	; (80296cc <HW_Init+0x390>)
 8029380:	2101      	movs	r1, #1
 8029382:	461a      	mov	r2, r3
 8029384:	f7fd fae2 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD0, &gpio_config);
 8029388:	1d3b      	adds	r3, r7, #4
 802938a:	48d0      	ldr	r0, [pc, #832]	; (80296cc <HW_Init+0x390>)
 802938c:	2100      	movs	r1, #0
 802938e:	461a      	mov	r2, r3
 8029390:	f7fd fadc 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_DV, &gpio_config);
 8029394:	1d3b      	adds	r3, r7, #4
 8029396:	48cd      	ldr	r0, [pc, #820]	; (80296cc <HW_Init+0x390>)
 8029398:	2106      	movs	r1, #6
 802939a:	461a      	mov	r2, r3
 802939c:	f7fd fad6 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_CLK, &gpio_config);
 80293a0:	1d3b      	adds	r3, r7, #4
 80293a2:	48ca      	ldr	r0, [pc, #808]	; (80296cc <HW_Init+0x390>)
 80293a4:	2104      	movs	r1, #4
 80293a6:	461a      	mov	r2, r3
 80293a8:	f7fd fad0 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_ERR, &gpio_config);
 80293ac:	1d3b      	adds	r3, r7, #4
 80293ae:	48c8      	ldr	r0, [pc, #800]	; (80296d0 <HW_Init+0x394>)
 80293b0:	2106      	movs	r1, #6
 80293b2:	461a      	mov	r2, r3
 80293b4:	f7fd faca 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_TX_CLK, &gpio_config);
 80293b8:	1d3b      	adds	r3, r7, #4
 80293ba:	48c4      	ldr	r0, [pc, #784]	; (80296cc <HW_Init+0x390>)
 80293bc:	2105      	movs	r1, #5
 80293be:	461a      	mov	r2, r3
 80293c0:	f7fd fac4 	bl	802694c <XMC_GPIO_Init>

  XMC_GPIO_Init(ECAT_P1_LINK_STATUS, &gpio_config);
 80293c4:	1d3b      	adds	r3, r7, #4
 80293c6:	48c3      	ldr	r0, [pc, #780]	; (80296d4 <HW_Init+0x398>)
 80293c8:	2104      	movs	r1, #4
 80293ca:	461a      	mov	r2, r3
 80293cc:	f7fd fabe 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD3, &gpio_config);
 80293d0:	1d3b      	adds	r3, r7, #4
 80293d2:	48c1      	ldr	r0, [pc, #772]	; (80296d8 <HW_Init+0x39c>)
 80293d4:	2104      	movs	r1, #4
 80293d6:	461a      	mov	r2, r3
 80293d8:	f7fd fab8 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD2, &gpio_config);
 80293dc:	1d3b      	adds	r3, r7, #4
 80293de:	48be      	ldr	r0, [pc, #760]	; (80296d8 <HW_Init+0x39c>)
 80293e0:	2105      	movs	r1, #5
 80293e2:	461a      	mov	r2, r3
 80293e4:	f7fd fab2 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD1, &gpio_config);
 80293e8:	1d3b      	adds	r3, r7, #4
 80293ea:	48bb      	ldr	r0, [pc, #748]	; (80296d8 <HW_Init+0x39c>)
 80293ec:	2106      	movs	r1, #6
 80293ee:	461a      	mov	r2, r3
 80293f0:	f7fd faac 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD0, &gpio_config);
 80293f4:	1d3b      	adds	r3, r7, #4
 80293f6:	48b8      	ldr	r0, [pc, #736]	; (80296d8 <HW_Init+0x39c>)
 80293f8:	210b      	movs	r1, #11
 80293fa:	461a      	mov	r2, r3
 80293fc:	f7fd faa6 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_DV, &gpio_config);
 8029400:	1d3b      	adds	r3, r7, #4
 8029402:	48b5      	ldr	r0, [pc, #724]	; (80296d8 <HW_Init+0x39c>)
 8029404:	2109      	movs	r1, #9
 8029406:	461a      	mov	r2, r3
 8029408:	f7fd faa0 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_CLK, &gpio_config);
 802940c:	1d3b      	adds	r3, r7, #4
 802940e:	48b2      	ldr	r0, [pc, #712]	; (80296d8 <HW_Init+0x39c>)
 8029410:	2101      	movs	r1, #1
 8029412:	461a      	mov	r2, r3
 8029414:	f7fd fa9a 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_ERR, &gpio_config);
 8029418:	1d3b      	adds	r3, r7, #4
 802941a:	48b0      	ldr	r0, [pc, #704]	; (80296dc <HW_Init+0x3a0>)
 802941c:	2102      	movs	r1, #2
 802941e:	461a      	mov	r2, r3
 8029420:	f7fd fa94 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_TX_CLK, &gpio_config);
 8029424:	1d3b      	adds	r3, r7, #4
 8029426:	48ac      	ldr	r0, [pc, #688]	; (80296d8 <HW_Init+0x39c>)
 8029428:	210a      	movs	r1, #10
 802942a:	461a      	mov	r2, r3
 802942c:	f7fd fa8e 	bl	802694c <XMC_GPIO_Init>

  port_control.common.enable_rstreq = false;
 8029430:	7c3b      	ldrb	r3, [r7, #16]
 8029432:	f36f 0300 	bfc	r3, #0, #1
 8029436:	743b      	strb	r3, [r7, #16]
  port_control.common.mdio = XMC_ECAT_PORT_CTRL_MDIO_P0_12;
 8029438:	7cbb      	ldrb	r3, [r7, #18]
 802943a:	f36f 1387 	bfc	r3, #6, #2
 802943e:	74bb      	strb	r3, [r7, #18]
  port_control.common.phyaddr_offset = 0;
 8029440:	7cbb      	ldrb	r3, [r7, #18]
 8029442:	f36f 0304 	bfc	r3, #0, #5
 8029446:	74bb      	strb	r3, [r7, #18]
  port_control.common.latch_input0 = XMC_ECAT_PORT_CTRL_LATCHIN0_P14_5;
 8029448:	7c7b      	ldrb	r3, [r7, #17]
 802944a:	f36f 0301 	bfc	r3, #0, #2
 802944e:	747b      	strb	r3, [r7, #17]
  port_control.common.latch_input1 = XMC_ECAT_PORT_CTRL_LATCHIN1_P14_4;
 8029450:	7c7b      	ldrb	r3, [r7, #17]
 8029452:	f36f 1305 	bfc	r3, #4, #2
 8029456:	747b      	strb	r3, [r7, #17]
  port_control.port0.rxd0 = XMC_ECAT_PORT0_CTRL_RXD0_P5_0;
 8029458:	7d3b      	ldrb	r3, [r7, #20]
 802945a:	2201      	movs	r2, #1
 802945c:	f362 0301 	bfi	r3, r2, #0, #2
 8029460:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd1 = XMC_ECAT_PORT0_CTRL_RXD1_P5_1;
 8029462:	7d3b      	ldrb	r3, [r7, #20]
 8029464:	2201      	movs	r2, #1
 8029466:	f362 0383 	bfi	r3, r2, #2, #2
 802946a:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd2 = XMC_ECAT_PORT0_CTRL_RXD2_P5_2;
 802946c:	7d3b      	ldrb	r3, [r7, #20]
 802946e:	2201      	movs	r2, #1
 8029470:	f362 1305 	bfi	r3, r2, #4, #2
 8029474:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd3 = XMC_ECAT_PORT0_CTRL_RXD3_P5_7;
 8029476:	7d3b      	ldrb	r3, [r7, #20]
 8029478:	2201      	movs	r2, #1
 802947a:	f362 1387 	bfi	r3, r2, #6, #2
 802947e:	753b      	strb	r3, [r7, #20]
  port_control.port0.rx_clk = XMC_ECAT_PORT0_CTRL_RX_CLK_P5_4;
 8029480:	7d7b      	ldrb	r3, [r7, #21]
 8029482:	2201      	movs	r2, #1
 8029484:	f362 1305 	bfi	r3, r2, #4, #2
 8029488:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_dv = XMC_ECAT_PORT0_CTRL_RX_DV_P5_6;
 802948a:	7d7b      	ldrb	r3, [r7, #21]
 802948c:	2201      	movs	r2, #1
 802948e:	f362 0383 	bfi	r3, r2, #2, #2
 8029492:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_err = XMC_ECAT_PORT0_CTRL_RX_ERR_P2_6;
 8029494:	7d7b      	ldrb	r3, [r7, #21]
 8029496:	2201      	movs	r2, #1
 8029498:	f362 0301 	bfi	r3, r2, #0, #2
 802949c:	757b      	strb	r3, [r7, #21]
  port_control.port0.link = XMC_ECAT_PORT0_CTRL_LINK_P1_15;
 802949e:	7dbb      	ldrb	r3, [r7, #22]
 80294a0:	2201      	movs	r2, #1
 80294a2:	f362 0301 	bfi	r3, r2, #0, #2
 80294a6:	75bb      	strb	r3, [r7, #22]
  port_control.port0.tx_clk = XMC_ECAT_PORT0_CTRL_TX_CLK_P5_5;
 80294a8:	7dfb      	ldrb	r3, [r7, #23]
 80294aa:	2201      	movs	r2, #1
 80294ac:	f362 1305 	bfi	r3, r2, #4, #2
 80294b0:	75fb      	strb	r3, [r7, #23]
  port_control.port0.tx_shift = XMC_ECAT_PORT0_CTRL_TX_SHIFT_0NS; 
 80294b2:	7dfb      	ldrb	r3, [r7, #23]
 80294b4:	f36f 1387 	bfc	r3, #6, #2
 80294b8:	75fb      	strb	r3, [r7, #23]
  port_control.port1.rxd0 = XMC_ECAT_PORT1_CTRL_RXD0_P0_11;
 80294ba:	7e3b      	ldrb	r3, [r7, #24]
 80294bc:	f36f 0301 	bfc	r3, #0, #2
 80294c0:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd1 = XMC_ECAT_PORT1_CTRL_RXD1_P0_6;
 80294c2:	7e3b      	ldrb	r3, [r7, #24]
 80294c4:	f36f 0383 	bfc	r3, #2, #2
 80294c8:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd2 = XMC_ECAT_PORT1_CTRL_RXD2_P0_5;
 80294ca:	7e3b      	ldrb	r3, [r7, #24]
 80294cc:	f36f 1305 	bfc	r3, #4, #2
 80294d0:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd3 = XMC_ECAT_PORT1_CTRL_RXD3_P0_4;
 80294d2:	7e3b      	ldrb	r3, [r7, #24]
 80294d4:	f36f 1387 	bfc	r3, #6, #2
 80294d8:	763b      	strb	r3, [r7, #24]
  port_control.port1.rx_clk = XMC_ECAT_PORT1_CTRL_RX_CLK_P0_1;
 80294da:	7e7b      	ldrb	r3, [r7, #25]
 80294dc:	f36f 1305 	bfc	r3, #4, #2
 80294e0:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_dv = XMC_ECAT_PORT1_CTRL_RX_DV_P0_9;
 80294e2:	7e7b      	ldrb	r3, [r7, #25]
 80294e4:	f36f 0383 	bfc	r3, #2, #2
 80294e8:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_err = XMC_ECAT_PORT1_CTRL_RX_ERR_P15_2;
 80294ea:	7e7b      	ldrb	r3, [r7, #25]
 80294ec:	2201      	movs	r2, #1
 80294ee:	f362 0301 	bfi	r3, r2, #0, #2
 80294f2:	767b      	strb	r3, [r7, #25]
  port_control.port1.link = XMC_ECAT_PORT1_CTRL_LINK_P3_4;
 80294f4:	7ebb      	ldrb	r3, [r7, #26]
 80294f6:	f36f 0301 	bfc	r3, #0, #2
 80294fa:	76bb      	strb	r3, [r7, #26]
  port_control.port1.tx_clk = XMC_ECAT_PORT1_CTRL_TX_CLK_P0_10;
 80294fc:	7efb      	ldrb	r3, [r7, #27]
 80294fe:	f36f 1305 	bfc	r3, #4, #2
 8029502:	76fb      	strb	r3, [r7, #27]
  port_control.port1.tx_shift = XMC_ECAT_PORT1_CTRL_TX_SHIFT_0NS;
 8029504:	7efb      	ldrb	r3, [r7, #27]
 8029506:	f36f 1387 	bfc	r3, #6, #2
 802950a:	76fb      	strb	r3, [r7, #27]
  XMC_ECAT_SetPortControl(port_control);
 802950c:	f107 0310 	add.w	r3, r7, #16
 8029510:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029514:	f7ff feca 	bl	80292ac <XMC_ECAT_SetPortControl>

  /* EtherCAT slave enable and intialization using LLD function */
  XMC_ECAT_Init((XMC_ECAT_CONFIG_t *)(void*)aEepromData);
 8029518:	4866      	ldr	r0, [pc, #408]	; (80296b4 <HW_Init+0x378>)
 802951a:	f7fe fc03 	bl	8027d24 <XMC_ECAT_Init>

  /* EtherCAT slave physical layer pin configurations */
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 802951e:	2300      	movs	r3, #0
 8029520:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029522:	23a0      	movs	r3, #160	; 0xa0
 8029524:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD3, &gpio_config);
 8029526:	1d3b      	adds	r3, r7, #4
 8029528:	486d      	ldr	r0, [pc, #436]	; (80296e0 <HW_Init+0x3a4>)
 802952a:	2106      	movs	r1, #6
 802952c:	461a      	mov	r2, r3
 802952e:	f7fd fa0d 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029532:	23a0      	movs	r3, #160	; 0xa0
 8029534:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD2, &gpio_config);
 8029536:	1d3b      	adds	r3, r7, #4
 8029538:	4869      	ldr	r0, [pc, #420]	; (80296e0 <HW_Init+0x3a4>)
 802953a:	2105      	movs	r1, #5
 802953c:	461a      	mov	r2, r3
 802953e:	f7fd fa05 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029542:	23a0      	movs	r3, #160	; 0xa0
 8029544:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD1, &gpio_config);
 8029546:	1d3b      	adds	r3, r7, #4
 8029548:	4865      	ldr	r0, [pc, #404]	; (80296e0 <HW_Init+0x3a4>)
 802954a:	2104      	movs	r1, #4
 802954c:	461a      	mov	r2, r3
 802954e:	f7fd f9fd 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029552:	23a0      	movs	r3, #160	; 0xa0
 8029554:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD0, &gpio_config);
 8029556:	1d3b      	adds	r3, r7, #4
 8029558:	4861      	ldr	r0, [pc, #388]	; (80296e0 <HW_Init+0x3a4>)
 802955a:	2102      	movs	r1, #2
 802955c:	461a      	mov	r2, r3
 802955e:	f7fd f9f5 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029562:	23a0      	movs	r3, #160	; 0xa0
 8029564:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TX_EN, &gpio_config);
 8029566:	1d3b      	adds	r3, r7, #4
 8029568:	485d      	ldr	r0, [pc, #372]	; (80296e0 <HW_Init+0x3a4>)
 802956a:	2101      	movs	r1, #1
 802956c:	461a      	mov	r2, r3
 802956e:	f7fd f9ed 	bl	802694c <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029572:	2388      	movs	r3, #136	; 0x88
 8029574:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD3, &gpio_config);
 8029576:	1d3b      	adds	r3, r7, #4
 8029578:	4857      	ldr	r0, [pc, #348]	; (80296d8 <HW_Init+0x39c>)
 802957a:	2103      	movs	r1, #3
 802957c:	461a      	mov	r2, r3
 802957e:	f7fd f9e5 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029582:	2388      	movs	r3, #136	; 0x88
 8029584:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD2, &gpio_config);
 8029586:	1d3b      	adds	r3, r7, #4
 8029588:	4853      	ldr	r0, [pc, #332]	; (80296d8 <HW_Init+0x39c>)
 802958a:	2102      	movs	r1, #2
 802958c:	461a      	mov	r2, r3
 802958e:	f7fd f9dd 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029592:	2398      	movs	r3, #152	; 0x98
 8029594:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD1, &gpio_config);
 8029596:	1d3b      	adds	r3, r7, #4
 8029598:	484e      	ldr	r0, [pc, #312]	; (80296d4 <HW_Init+0x398>)
 802959a:	2102      	movs	r1, #2
 802959c:	461a      	mov	r2, r3
 802959e:	f7fd f9d5 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 80295a2:	2398      	movs	r3, #152	; 0x98
 80295a4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD0, &gpio_config);
 80295a6:	1d3b      	adds	r3, r7, #4
 80295a8:	484a      	ldr	r0, [pc, #296]	; (80296d4 <HW_Init+0x398>)
 80295aa:	2101      	movs	r1, #1
 80295ac:	461a      	mov	r2, r3
 80295ae:	f7fd f9cd 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 80295b2:	23a0      	movs	r3, #160	; 0xa0
 80295b4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TX_EN, &gpio_config);
 80295b6:	1d3b      	adds	r3, r7, #4
 80295b8:	4846      	ldr	r0, [pc, #280]	; (80296d4 <HW_Init+0x398>)
 80295ba:	2100      	movs	r1, #0
 80295bc:	461a      	mov	r2, r3
 80295be:	f7fd f9c5 	bl	802694c <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 80295c2:	23a0      	movs	r3, #160	; 0xa0
 80295c4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_CLK25, &gpio_config);
 80295c6:	1d3b      	adds	r3, r7, #4
 80295c8:	4845      	ldr	r0, [pc, #276]	; (80296e0 <HW_Init+0x3a4>)
 80295ca:	2100      	movs	r1, #0
 80295cc:	461a      	mov	r2, r3
 80295ce:	f7fd f9bd 	bl	802694c <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 80295d2:	23a0      	movs	r3, #160	; 0xa0
 80295d4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MCLK, &gpio_config);
 80295d6:	1d3b      	adds	r3, r7, #4
 80295d8:	483e      	ldr	r0, [pc, #248]	; (80296d4 <HW_Init+0x398>)
 80295da:	2103      	movs	r1, #3
 80295dc:	461a      	mov	r2, r3
 80295de:	f7fd f9b5 	bl	802694c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80295e2:	2300      	movs	r3, #0
 80295e4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MDO, &gpio_config);
 80295e6:	1d3b      	adds	r3, r7, #4
 80295e8:	483b      	ldr	r0, [pc, #236]	; (80296d8 <HW_Init+0x39c>)
 80295ea:	210c      	movs	r1, #12
 80295ec:	461a      	mov	r2, r3
 80295ee:	f7fd f9ad 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_MDO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 80295f2:	4839      	ldr	r0, [pc, #228]	; (80296d8 <HW_Init+0x39c>)
 80295f4:	210c      	movs	r1, #12
 80295f6:	2201      	movs	r2, #1
 80295f8:	f7fe fcd6 	bl	8027fa8 <XMC_GPIO_SetHardwareControl>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE;
 80295fc:	2302      	movs	r3, #2
 80295fe:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029600:	23a0      	movs	r3, #160	; 0xa0
 8029602:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LED_LINK_ACT, &gpio_config);
 8029604:	1d3b      	adds	r3, r7, #4
 8029606:	4836      	ldr	r0, [pc, #216]	; (80296e0 <HW_Init+0x3a4>)
 8029608:	2103      	movs	r1, #3
 802960a:	461a      	mov	r2, r3
 802960c:	f7fd f99e 	bl	802694c <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029610:	2388      	movs	r3, #136	; 0x88
 8029612:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_LED_LINK_ACT, &gpio_config);
 8029614:	1d3b      	adds	r3, r7, #4
 8029616:	482f      	ldr	r0, [pc, #188]	; (80296d4 <HW_Init+0x398>)
 8029618:	210c      	movs	r1, #12
 802961a:	461a      	mov	r2, r3
 802961c:	f7fd f996 	bl	802694c <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029620:	2398      	movs	r3, #152	; 0x98
 8029622:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_RUN, &gpio_config);
 8029624:	1d3b      	adds	r3, r7, #4
 8029626:	482c      	ldr	r0, [pc, #176]	; (80296d8 <HW_Init+0x39c>)
 8029628:	2108      	movs	r1, #8
 802962a:	461a      	mov	r2, r3
 802962c:	f7fd f98e 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_RUN, XMC_GPIO_HWCTRL_DISABLED);
 8029630:	4829      	ldr	r0, [pc, #164]	; (80296d8 <HW_Init+0x39c>)
 8029632:	2108      	movs	r1, #8
 8029634:	2200      	movs	r2, #0
 8029636:	f7fe fcb7 	bl	8027fa8 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 802963a:	2398      	movs	r3, #152	; 0x98
 802963c:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_ERR, &gpio_config);
 802963e:	1d3b      	adds	r3, r7, #4
 8029640:	4825      	ldr	r0, [pc, #148]	; (80296d8 <HW_Init+0x39c>)
 8029642:	2107      	movs	r1, #7
 8029644:	461a      	mov	r2, r3
 8029646:	f7fd f981 	bl	802694c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_ERR, XMC_GPIO_HWCTRL_DISABLED);
 802964a:	4823      	ldr	r0, [pc, #140]	; (80296d8 <HW_Init+0x39c>)
 802964c:	2107      	movs	r1, #7
 802964e:	2200      	movs	r2, #0
 8029650:	f7fe fcaa 	bl	8027fa8 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029654:	2388      	movs	r3, #136	; 0x88
 8029656:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);
 8029658:	1d3b      	adds	r3, r7, #4
 802965a:	481f      	ldr	r0, [pc, #124]	; (80296d8 <HW_Init+0x39c>)
 802965c:	2100      	movs	r1, #0
 802965e:	461a      	mov	r2, r3
 8029660:	f7fd f974 	bl	802694c <XMC_GPIO_Init>

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8029664:	2300      	movs	r3, #0
 8029666:	77fb      	strb	r3, [r7, #31]
 8029668:	e006      	b.n	8029678 <HW_Init+0x33c>
  {
    XMC_ECAT_DisableSyncManChannel(i);
 802966a:	7ffb      	ldrb	r3, [r7, #31]
 802966c:	4618      	mov	r0, r3
 802966e:	f7fe fba9 	bl	8027dc4 <XMC_ECAT_DisableSyncManChannel>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8029672:	7ffb      	ldrb	r3, [r7, #31]
 8029674:	3301      	adds	r3, #1
 8029676:	77fb      	strb	r3, [r7, #31]
 8029678:	7ffb      	ldrb	r3, [r7, #31]
 802967a:	2b07      	cmp	r3, #7
 802967c:	d9f5      	bls.n	802966a <HW_Init+0x32e>
  {
    XMC_ECAT_DisableSyncManChannel(i);
  }

  /* EtherCAT slave event disable */
  XMC_ECAT_DisableEvent(0xffffffffU);
 802967e:	f04f 30ff 	mov.w	r0, #4294967295
 8029682:	f7fe fb8b 	bl	8027d9c <XMC_ECAT_DisableEvent>

  /* ECAT interrupt priority settings */
  NVIC_SetPriority(ECAT0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8029686:	f7ff fd8f 	bl	80291a8 <NVIC_GetPriorityGrouping>
 802968a:	4603      	mov	r3, r0
 802968c:	4618      	mov	r0, r3
 802968e:	213f      	movs	r1, #63	; 0x3f
 8029690:	2200      	movs	r2, #0
 8029692:	f7ff fdd9 	bl	8029248 <NVIC_EncodePriority>
 8029696:	4603      	mov	r3, r0
 8029698:	206d      	movs	r0, #109	; 0x6d
 802969a:	4619      	mov	r1, r3
 802969c:	f7ff fdaa 	bl	80291f4 <NVIC_SetPriority>
                                                     63U,
                                                     0U));

  /* EtherCAT slave interrupt enable */
  ENABLE_ESC_INT();
 80296a0:	f7ff fe46 	bl	8029330 <ENABLE_ESC_INT>

  return ((uint16_t)0U);
 80296a4:	2300      	movs	r3, #0
}
 80296a6:	4618      	mov	r0, r3
 80296a8:	3720      	adds	r7, #32
 80296aa:	46bd      	mov	sp, r7
 80296ac:	bd80      	pop	{r7, pc}
 80296ae:	bf00      	nop
 80296b0:	1ffea7f8 	.word	0x1ffea7f8
 80296b4:	1ffe8b8c 	.word	0x1ffe8b8c
 80296b8:	1ffea800 	.word	0x1ffea800
 80296bc:	08029771 	.word	0x08029771
 80296c0:	1ffea764 	.word	0x1ffea764
 80296c4:	080296e5 	.word	0x080296e5
 80296c8:	48028100 	.word	0x48028100
 80296cc:	48028500 	.word	0x48028500
 80296d0:	48028200 	.word	0x48028200
 80296d4:	48028300 	.word	0x48028300
 80296d8:	48028000 	.word	0x48028000
 80296dc:	48028f00 	.word	0x48028f00
 80296e0:	48028600 	.word	0x48028600

080296e4 <HW_EepromWrite>:
}


/* Beckhoff Hw abstraction layer interface API to write new configuration parameters to slave EEPROM area */
UINT16 HW_EepromWrite(UINT32 wordaddr)
{
 80296e4:	b580      	push	{r7, lr}
 80296e6:	b086      	sub	sp, #24
 80296e8:	af00      	add	r7, sp, #0
 80296ea:	6078      	str	r0, [r7, #4]
  UINT32 status;
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 80296ec:	2300      	movs	r3, #0
 80296ee:	827b      	strh	r3, [r7, #18]
  status = 0U;
 80296f0:	2300      	movs	r3, #0
 80296f2:	617b      	str	r3, [r7, #20]
  if ((wordaddr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80296fa:	d82d      	bhi.n	8029758 <HW_EepromWrite+0x74>
 80296fc:	4b19      	ldr	r3, [pc, #100]	; (8029764 <HW_EepromWrite+0x80>)
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	2b00      	cmp	r3, #0
 8029702:	d029      	beq.n	8029758 <HW_EepromWrite+0x74>
  {
     UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8029704:	4b17      	ldr	r3, [pc, #92]	; (8029764 <HW_EepromWrite+0x80>)
 8029706:	681b      	ldr	r3, [r3, #0]
 8029708:	60fb      	str	r3, [r7, #12]
     HW_EscRead((MEM_ADDR *)(void*)&pData[(wordaddr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_WRITE_SIZE);
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	005b      	lsls	r3, r3, #1
 802970e:	68fa      	ldr	r2, [r7, #12]
 8029710:	4413      	add	r3, r2
 8029712:	4618      	mov	r0, r3
 8029714:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8029718:	2202      	movs	r2, #2
 802971a:	f7ff fddd 	bl	80292d8 <HW_EscRead>
     if ( (wordaddr == (uint32_t)7U) || (wordaddr ==  (((uint32_t)ESC_EEPROM_SIZE >> (uint32_t)1U) - (uint32_t)1U)) )
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	2b07      	cmp	r3, #7
 8029722:	d004      	beq.n	802972e <HW_EepromWrite+0x4a>
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802972a:	4293      	cmp	r3, r2
 802972c:	d114      	bne.n	8029758 <HW_EepromWrite+0x74>
     {
      /*lets program the complete EEPROM new prepare Data for EEPROM */
      E_EEPROM_XMC4_WriteArray((uint16_t)0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE);
 802972e:	2000      	movs	r0, #0
 8029730:	490d      	ldr	r1, [pc, #52]	; (8029768 <HW_EepromWrite+0x84>)
 8029732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029736:	f7ff fad9 	bl	8028cec <E_EEPROM_XMC4_WriteArray>

      HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 802973a:	4b0c      	ldr	r3, [pc, #48]	; (802976c <HW_EepromWrite+0x88>)
 802973c:	881b      	ldrh	r3, [r3, #0]
 802973e:	827b      	strh	r3, [r7, #18]
      HW_EscWriteWord(EEPROMReg & (~ESC_EEPROM_BUSY_MASK),ESC_EEPROM_CONTROL_OFFSET);
 8029740:	4a0a      	ldr	r2, [pc, #40]	; (802976c <HW_EepromWrite+0x88>)
 8029742:	8a7b      	ldrh	r3, [r7, #18]
 8029744:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8029748:	b29b      	uxth	r3, r3
 802974a:	8013      	strh	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802974c:	b672      	cpsid	i

      __disable_irq();
      /* Program the RAM contents to Emulated EEPROM*/
      status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 802974e:	f7ff fb19 	bl	8028d84 <E_EEPROM_XMC4_UpdateFlashContents>
 8029752:	4603      	mov	r3, r0
 8029754:	617b      	str	r3, [r7, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8029756:	b662      	cpsie	i
      __enable_irq();
     }
  }

  return (uint16_t)status;
 8029758:	697b      	ldr	r3, [r7, #20]
 802975a:	b29b      	uxth	r3, r3
}
 802975c:	4618      	mov	r0, r3
 802975e:	3718      	adds	r7, #24
 8029760:	46bd      	mov	sp, r7
 8029762:	bd80      	pop	{r7, pc}
 8029764:	1ffea7f8 	.word	0x1ffea7f8
 8029768:	1ffe8b8c 	.word	0x1ffe8b8c
 802976c:	54010502 	.word	0x54010502

08029770 <HW_EepromReload>:

/* Beckhoff Hw abstraction layer interface API to reload slave EEPROM area */
UINT16 HW_EepromReload(void)
{
 8029770:	b580      	push	{r7, lr}
 8029772:	b084      	sub	sp, #16
 8029774:	af00      	add	r7, sp, #0
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8029776:	2300      	movs	r3, #0
 8029778:	81fb      	strh	r3, [r7, #14]
  UINT32 cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 802977a:	89fb      	ldrh	r3, [r7, #14]
 802977c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029780:	607b      	str	r3, [r7, #4]
  UINT32 addr;
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 8029782:	4b1b      	ldr	r3, [pc, #108]	; (80297f0 <HW_EepromReload+0x80>)
 8029784:	681b      	ldr	r3, [r3, #0]
 8029786:	60bb      	str	r3, [r7, #8]
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8029788:	68bb      	ldr	r3, [r7, #8]
 802978a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802978e:	d826      	bhi.n	80297de <HW_EepromReload+0x6e>
 8029790:	4b18      	ldr	r3, [pc, #96]	; (80297f4 <HW_EepromReload+0x84>)
 8029792:	681b      	ldr	r3, [r3, #0]
 8029794:	2b00      	cmp	r3, #0
 8029796:	d022      	beq.n	80297de <HW_EepromReload+0x6e>
  {
    UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8029798:	4b16      	ldr	r3, [pc, #88]	; (80297f4 <HW_EepromReload+0x84>)
 802979a:	681b      	ldr	r3, [r3, #0]
 802979c:	603b      	str	r3, [r7, #0]
    do
    {
    HW_EscWrite((MEM_ADDR *)(void*)&pData[(addr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_READ_SIZE);
 802979e:	68bb      	ldr	r3, [r7, #8]
 80297a0:	005b      	lsls	r3, r3, #1
 80297a2:	683a      	ldr	r2, [r7, #0]
 80297a4:	4413      	add	r3, r2
 80297a6:	4618      	mov	r0, r3
 80297a8:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80297ac:	2208      	movs	r2, #8
 80297ae:	f7ff fda9 	bl	8029304 <HW_EscWrite>

     /*Clear error bits */
     EEPROMReg &= (uint16_t)(~(uint16_t)(ESC_EEPROM_ERROR_MASK));
 80297b2:	89fb      	ldrh	r3, [r7, #14]
 80297b4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80297b8:	81fb      	strh	r3, [r7, #14]

     /*ack current reload segment */
     HW_EscWriteWord(EEPROMReg,(uint32_t)ESC_EEPROM_CONTROL_OFFSET);
 80297ba:	4a0f      	ldr	r2, [pc, #60]	; (80297f8 <HW_EepromReload+0x88>)
 80297bc:	89fb      	ldrh	r3, [r7, #14]
 80297be:	8013      	strh	r3, [r2, #0]

     /* read EEPROM control (to check if the reload is still pending) */
     HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 80297c0:	4b0d      	ldr	r3, [pc, #52]	; (80297f8 <HW_EepromReload+0x88>)
 80297c2:	881b      	ldrh	r3, [r3, #0]
 80297c4:	81fb      	strh	r3, [r7, #14]
     cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 80297c6:	89fb      	ldrh	r3, [r7, #14]
 80297c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80297cc:	607b      	str	r3, [r7, #4]

     HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 80297ce:	4b08      	ldr	r3, [pc, #32]	; (80297f0 <HW_EepromReload+0x80>)
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	60bb      	str	r3, [r7, #8]

    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80297da:	d0e0      	beq.n	802979e <HW_EepromReload+0x2e>
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
  {
 80297dc:	e003      	b.n	80297e6 <HW_EepromReload+0x76>
    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
  }
  else
  {
    /* Set Error  */
    EEPROMReg |= (uint16_t)ESC_EEPROM_ERROR_CMD_ACK;
 80297de:	89fb      	ldrh	r3, [r7, #14]
 80297e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80297e4:	81fb      	strh	r3, [r7, #14]
  }
  return 0U;
 80297e6:	2300      	movs	r3, #0
}
 80297e8:	4618      	mov	r0, r3
 80297ea:	3710      	adds	r7, #16
 80297ec:	46bd      	mov	sp, r7
 80297ee:	bd80      	pop	{r7, pc}
 80297f0:	54010504 	.word	0x54010504
 80297f4:	1ffea7f8 	.word	0x1ffea7f8
 80297f8:	54010502 	.word	0x54010502

080297fc <ECAT0_0_IRQHandler>:

/* ECAT slave interrupt handler function */
void ECAT0_0_IRQHandler(void)
{
 80297fc:	b580      	push	{r7, lr}
 80297fe:	af00      	add	r7, sp, #0
  PDI_Isr();
 8029800:	f7f7 fa72 	bl	8020ce8 <PDI_Isr>
}
 8029804:	bd80      	pop	{r7, pc}
 8029806:	bf00      	nop

08029808 <CCU43_1_IRQHandler>:

/* ECAT slave timer interrupt handler function */
void ecat_ssc_timer_handler(void)
{
 8029808:	b580      	push	{r7, lr}
 802980a:	af00      	add	r7, sp, #0
  ticks++;
 802980c:	4b03      	ldr	r3, [pc, #12]	; (802981c <CCU43_1_IRQHandler+0x14>)
 802980e:	681b      	ldr	r3, [r3, #0]
 8029810:	3301      	adds	r3, #1
 8029812:	4a02      	ldr	r2, [pc, #8]	; (802981c <CCU43_1_IRQHandler+0x14>)
 8029814:	6013      	str	r3, [r2, #0]
  ECAT_CheckTimer();
 8029816:	f7f7 f9d1 	bl	8020bbc <ECAT_CheckTimer>
}
 802981a:	bd80      	pop	{r7, pc}
 802981c:	1ffea52c 	.word	0x1ffea52c

08029820 <HW_GetTimer>:

/* Beckhoff Hw abstraction layer interface API to get the current timer value in ticks */
UINT32 HW_GetTimer(void)
{
 8029820:	b480      	push	{r7}
 8029822:	af00      	add	r7, sp, #0
  return ticks;
 8029824:	4b03      	ldr	r3, [pc, #12]	; (8029834 <HW_GetTimer+0x14>)
 8029826:	681b      	ldr	r3, [r3, #0]
}
 8029828:	4618      	mov	r0, r3
 802982a:	46bd      	mov	sp, r7
 802982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029830:	4770      	bx	lr
 8029832:	bf00      	nop
 8029834:	1ffea52c 	.word	0x1ffea52c

08029838 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8029838:	b480      	push	{r7}
 802983a:	b085      	sub	sp, #20
 802983c:	af00      	add	r7, sp, #0
 802983e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8029840:	687b      	ldr	r3, [r7, #4]
 8029842:	f003 0307 	and.w	r3, r3, #7
 8029846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8029848:	4b0c      	ldr	r3, [pc, #48]	; (802987c <NVIC_SetPriorityGrouping+0x44>)
 802984a:	68db      	ldr	r3, [r3, #12]
 802984c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802984e:	68ba      	ldr	r2, [r7, #8]
 8029850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8029854:	4013      	ands	r3, r2
 8029856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802985c:	68bb      	ldr	r3, [r7, #8]
 802985e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8029860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8029864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029868:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 802986a:	4a04      	ldr	r2, [pc, #16]	; (802987c <NVIC_SetPriorityGrouping+0x44>)
 802986c:	68bb      	ldr	r3, [r7, #8]
 802986e:	60d3      	str	r3, [r2, #12]
}
 8029870:	3714      	adds	r7, #20
 8029872:	46bd      	mov	sp, r7
 8029874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029878:	4770      	bx	lr
 802987a:	bf00      	nop
 802987c:	e000ed00 	.word	0xe000ed00

08029880 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8029880:	b580      	push	{r7, lr}
 8029882:	b082      	sub	sp, #8
 8029884:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8029886:	2001      	movs	r0, #1
 8029888:	f7ff ffd6 	bl	8029838 <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802988c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 802988e:	4b21      	ldr	r3, [pc, #132]	; (8029914 <SystemCoreSetup+0x94>)
 8029890:	4a21      	ldr	r2, [pc, #132]	; (8029918 <SystemCoreSetup+0x98>)
 8029892:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8029894:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8029898:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 802989a:	4a1e      	ldr	r2, [pc, #120]	; (8029914 <SystemCoreSetup+0x94>)
 802989c:	4b1d      	ldr	r3, [pc, #116]	; (8029914 <SystemCoreSetup+0x94>)
 802989e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80298a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80298a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80298aa:	4b1c      	ldr	r3, [pc, #112]	; (802991c <SystemCoreSetup+0x9c>)
 80298ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80298b0:	3314      	adds	r3, #20
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80298b6:	687b      	ldr	r3, [r7, #4]
 80298b8:	f023 030f 	bic.w	r3, r3, #15
 80298bc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80298be:	687b      	ldr	r3, [r7, #4]
 80298c0:	f043 0304 	orr.w	r3, r3, #4
 80298c4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80298c6:	4b15      	ldr	r3, [pc, #84]	; (802991c <SystemCoreSetup+0x9c>)
 80298c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80298cc:	3314      	adds	r3, #20
 80298ce:	687a      	ldr	r2, [r7, #4]
 80298d0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80298d2:	4a10      	ldr	r2, [pc, #64]	; (8029914 <SystemCoreSetup+0x94>)
 80298d4:	4b0f      	ldr	r3, [pc, #60]	; (8029914 <SystemCoreSetup+0x94>)
 80298d6:	695b      	ldr	r3, [r3, #20]
 80298d8:	f023 0310 	bic.w	r3, r3, #16
 80298dc:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80298de:	4a0d      	ldr	r2, [pc, #52]	; (8029914 <SystemCoreSetup+0x94>)
 80298e0:	4b0c      	ldr	r3, [pc, #48]	; (8029914 <SystemCoreSetup+0x94>)
 80298e2:	695b      	ldr	r3, [r3, #20]
 80298e4:	f023 0308 	bic.w	r3, r3, #8
 80298e8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80298ea:	4a0a      	ldr	r2, [pc, #40]	; (8029914 <SystemCoreSetup+0x94>)
 80298ec:	4b09      	ldr	r3, [pc, #36]	; (8029914 <SystemCoreSetup+0x94>)
 80298ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80298f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80298f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80298f6:	4a07      	ldr	r2, [pc, #28]	; (8029914 <SystemCoreSetup+0x94>)
 80298f8:	4b06      	ldr	r3, [pc, #24]	; (8029914 <SystemCoreSetup+0x94>)
 80298fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80298fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8029900:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8029902:	4a04      	ldr	r2, [pc, #16]	; (8029914 <SystemCoreSetup+0x94>)
 8029904:	4b03      	ldr	r3, [pc, #12]	; (8029914 <SystemCoreSetup+0x94>)
 8029906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802990c:	6253      	str	r3, [r2, #36]	; 0x24
}
 802990e:	3708      	adds	r7, #8
 8029910:	46bd      	mov	sp, r7
 8029912:	bd80      	pop	{r7, pc}
 8029914:	e000ed00 	.word	0xe000ed00
 8029918:	08020000 	.word	0x08020000
 802991c:	58001000 	.word	0x58001000

08029920 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8029920:	b480      	push	{r7}
 8029922:	b085      	sub	sp, #20
 8029924:	af00      	add	r7, sp, #0
 8029926:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8029928:	2300      	movs	r3, #0
 802992a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 802992c:	687b      	ldr	r3, [r7, #4]
 802992e:	2201      	movs	r2, #1
 8029930:	701a      	strb	r2, [r3, #0]

  return (status);
 8029932:	7bfb      	ldrb	r3, [r7, #15]
}
 8029934:	4618      	mov	r0, r3
 8029936:	3714      	adds	r7, #20
 8029938:	46bd      	mov	sp, r7
 802993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802993e:	4770      	bx	lr

08029940 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8029940:	b480      	push	{r7}
 8029942:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8029944:	4b02      	ldr	r3, [pc, #8]	; (8029950 <OSCHP_GetFrequency+0x10>)
}
 8029946:	4618      	mov	r0, r3
 8029948:	46bd      	mov	sp, r7
 802994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802994e:	4770      	bx	lr
 8029950:	00b71b00 	.word	0x00b71b00

08029954 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8029954:	b480      	push	{r7}
 8029956:	b083      	sub	sp, #12
 8029958:	af00      	add	r7, sp, #0
 802995a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 802995c:	4906      	ldr	r1, [pc, #24]	; (8029978 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 802995e:	4b06      	ldr	r3, [pc, #24]	; (8029978 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8029960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029962:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	4313      	orrs	r3, r2
 802996a:	638b      	str	r3, [r1, #56]	; 0x38
                      ((uint32_t)source);
}
 802996c:	370c      	adds	r7, #12
 802996e:	46bd      	mov	sp, r7
 8029970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029974:	4770      	bx	lr
 8029976:	bf00      	nop
 8029978:	50004600 	.word	0x50004600

0802997c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 802997c:	b5b0      	push	{r4, r5, r7, lr}
 802997e:	b086      	sub	sp, #24
 8029980:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8029982:	4b15      	ldr	r3, [pc, #84]	; (80299d8 <SystemCoreClockSetup+0x5c>)
 8029984:	1d3c      	adds	r4, r7, #4
 8029986:	461d      	mov	r5, r3
 8029988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802998a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802998c:	682b      	ldr	r3, [r5, #0]
 802998e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8029990:	1d3b      	adds	r3, r7, #4
 8029992:	4618      	mov	r0, r3
 8029994:	f7fd f8ac 	bl	8026af0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8029998:	2000      	movs	r0, #0
 802999a:	f7fd f9c7 	bl	8026d2c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 802999e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80299a2:	f7fd f97b 	bl	8026c9c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 80299a6:	2006      	movs	r0, #6
 80299a8:	f7fd fa4c 	bl	8026e44 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 80299ac:	2003      	movs	r0, #3
 80299ae:	2164      	movs	r1, #100	; 0x64
 80299b0:	f7fd fac4 	bl	8026f3c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 80299b4:	2000      	movs	r0, #0
 80299b6:	f7ff ffcd 	bl	8029954 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 80299ba:	2002      	movs	r0, #2
 80299bc:	f7fd fa7e 	bl	8026ebc <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80299c0:	2000      	movs	r0, #0
 80299c2:	f7fd f97f 	bl	8026cc4 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80299c6:	2001      	movs	r0, #1
 80299c8:	f7fd fa64 	bl	8026e94 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80299cc:	2001      	movs	r0, #1
 80299ce:	f7fd fa4d 	bl	8026e6c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80299d2:	3718      	adds	r7, #24
 80299d4:	46bd      	mov	sp, r7
 80299d6:	bdb0      	pop	{r4, r5, r7, pc}
 80299d8:	0802ae80 	.word	0x0802ae80

080299dc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80299dc:	b580      	push	{r7, lr}
 80299de:	b082      	sub	sp, #8
 80299e0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80299e2:	2300      	movs	r3, #0
 80299e4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80299e6:	4825      	ldr	r0, [pc, #148]	; (8029a7c <DAVE_Init+0xa0>)
 80299e8:	f7ff ff9a 	bl	8029920 <CLOCK_XMC4_Init>
 80299ec:	4603      	mov	r3, r0
 80299ee:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80299f0:	79fb      	ldrb	r3, [r7, #7]
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	d104      	bne.n	8029a00 <DAVE_Init+0x24>
  {
	 /**  Initialization of ECAT_SSC APP instance ECAT_SSC_0 */
	 init_status = (DAVE_STATUS_t)ECAT_SSC_Init(&ECAT_SSC_0); 
 80299f6:	4822      	ldr	r0, [pc, #136]	; (8029a80 <DAVE_Init+0xa4>)
 80299f8:	f7ff fb7c 	bl	80290f4 <ECAT_SSC_Init>
 80299fc:	4603      	mov	r3, r0
 80299fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a00:	79fb      	ldrb	r3, [r7, #7]
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d104      	bne.n	8029a10 <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC1); 
 8029a06:	481f      	ldr	r0, [pc, #124]	; (8029a84 <DAVE_Init+0xa8>)
 8029a08:	f7ff f830 	bl	8028a6c <INTERRUPT_Init>
 8029a0c:	4603      	mov	r3, r0
 8029a0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a10:	79fb      	ldrb	r3, [r7, #7]
 8029a12:	2b00      	cmp	r3, #0
 8029a14:	d104      	bne.n	8029a20 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC0); 
 8029a16:	481c      	ldr	r0, [pc, #112]	; (8029a88 <DAVE_Init+0xac>)
 8029a18:	f7ff f828 	bl	8028a6c <INTERRUPT_Init>
 8029a1c:	4603      	mov	r3, r0
 8029a1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a20:	79fb      	ldrb	r3, [r7, #7]
 8029a22:	2b00      	cmp	r3, #0
 8029a24:	d104      	bne.n	8029a30 <DAVE_Init+0x54>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC1); 
 8029a26:	4819      	ldr	r0, [pc, #100]	; (8029a8c <DAVE_Init+0xb0>)
 8029a28:	f7ff fb46 	bl	80290b8 <EVENT_DETECTOR_Init>
 8029a2c:	4603      	mov	r3, r0
 8029a2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a30:	79fb      	ldrb	r3, [r7, #7]
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d104      	bne.n	8029a40 <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 8029a36:	4816      	ldr	r0, [pc, #88]	; (8029a90 <DAVE_Init+0xb4>)
 8029a38:	f7fe fc92 	bl	8028360 <PWM_CCU8_Init>
 8029a3c:	4603      	mov	r3, r0
 8029a3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a40:	79fb      	ldrb	r3, [r7, #7]
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d104      	bne.n	8029a50 <DAVE_Init+0x74>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC1); 
 8029a46:	4813      	ldr	r0, [pc, #76]	; (8029a94 <DAVE_Init+0xb8>)
 8029a48:	f7ff fb12 	bl	8029070 <EVENT_GENERATOR_Init>
 8029a4c:	4603      	mov	r3, r0
 8029a4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a50:	79fb      	ldrb	r3, [r7, #7]
 8029a52:	2b00      	cmp	r3, #0
 8029a54:	d104      	bne.n	8029a60 <DAVE_Init+0x84>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC0); 
 8029a56:	4810      	ldr	r0, [pc, #64]	; (8029a98 <DAVE_Init+0xbc>)
 8029a58:	f7ff fb0a 	bl	8029070 <EVENT_GENERATOR_Init>
 8029a5c:	4603      	mov	r3, r0
 8029a5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029a60:	79fb      	ldrb	r3, [r7, #7]
 8029a62:	2b00      	cmp	r3, #0
 8029a64:	d104      	bne.n	8029a70 <DAVE_Init+0x94>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC0); 
 8029a66:	480d      	ldr	r0, [pc, #52]	; (8029a9c <DAVE_Init+0xc0>)
 8029a68:	f7ff fb26 	bl	80290b8 <EVENT_DETECTOR_Init>
 8029a6c:	4603      	mov	r3, r0
 8029a6e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8029a70:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8029a72:	4618      	mov	r0, r3
 8029a74:	3708      	adds	r7, #8
 8029a76:	46bd      	mov	sp, r7
 8029a78:	bd80      	pop	{r7, pc}
 8029a7a:	bf00      	nop
 8029a7c:	1ffea530 	.word	0x1ffea530
 8029a80:	0802ae74 	.word	0x0802ae74
 8029a84:	0802ae48 	.word	0x0802ae48
 8029a88:	0802ae4c 	.word	0x0802ae4c
 8029a8c:	1ffe945c 	.word	0x1ffe945c
 8029a90:	1ffe93d8 	.word	0x1ffe93d8
 8029a94:	1ffe943c 	.word	0x1ffe943c
 8029a98:	1ffe944c 	.word	0x1ffe944c
 8029a9c:	1ffe946c 	.word	0x1ffe946c

08029aa0 <FWUPDATE_StartDownload>:
/****************************************************************
* API PROTOTYPES
***************************************************************/

void FWUPDATE_StartDownload(void)
{
 8029aa0:	b580      	push	{r7, lr}
 8029aa2:	af00      	add	r7, sp, #0
  /* Check if a download has already been started,
   * if yes, return error */
  if (g_firmware_download_started)
 8029aa4:	4b08      	ldr	r3, [pc, #32]	; (8029ac8 <FWUPDATE_StartDownload+0x28>)
 8029aa6:	781b      	ldrb	r3, [r3, #0]
 8029aa8:	2b00      	cmp	r3, #0
 8029aaa:	d000      	beq.n	8029aae <FWUPDATE_StartDownload+0xe>
    return ECAT_FOE_ERRCODE_EXISTS;
 8029aac:	e00a      	b.n	8029ac4 <FWUPDATE_StartDownload+0x24>

  /* remember a firmware download has started
   * --> issue system reset when INIT-state is requested
   * to flash new binary inside bootloader */
  g_firmware_download_started = 1;
 8029aae:	4b06      	ldr	r3, [pc, #24]	; (8029ac8 <FWUPDATE_StartDownload+0x28>)
 8029ab0:	2201      	movs	r2, #1
 8029ab2:	701a      	strb	r2, [r3, #0]
   * - start address of backup partition
   * - MAX SIZE is limited by application partition
   * - Erase is already assured insid jhjhjhjhjhe bootloader executable
   * - Enable XMC flash programming check
   */
  FLASHPROG_Init(START_BACKUP_PARTITION, MAX_SIZE, FLASH_OPT_NO_ERASE, FLASH_OPT_CHECK);
 8029ab4:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 8029ab8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8029abc:	2265      	movs	r2, #101	; 0x65
 8029abe:	23c8      	movs	r3, #200	; 0xc8
 8029ac0:	f000 f8e6 	bl	8029c90 <FLASHPROG_Init>
}
 8029ac4:	bd80      	pop	{r7, pc}
 8029ac6:	bf00      	nop
 8029ac8:	1ffea634 	.word	0x1ffea634

08029acc <FWUPDATE_StateTransitionInit>:

void FWUPDATE_StateTransitionInit(void)
{
 8029acc:	b480      	push	{r7}
 8029ace:	af00      	add	r7, sp, #0
  /* If download started before, it is finished now
   * --> issue system reset  from process_app
   * to update firmware and/or cleanup flash
   */
  if (g_firmware_download_started==1)
 8029ad0:	4b05      	ldr	r3, [pc, #20]	; (8029ae8 <FWUPDATE_StateTransitionInit+0x1c>)
 8029ad2:	781b      	ldrb	r3, [r3, #0]
 8029ad4:	2b01      	cmp	r3, #1
 8029ad6:	d102      	bne.n	8029ade <FWUPDATE_StateTransitionInit+0x12>
    g_firmware_download_finished=1;
 8029ad8:	4b04      	ldr	r3, [pc, #16]	; (8029aec <FWUPDATE_StateTransitionInit+0x20>)
 8029ada:	2201      	movs	r2, #1
 8029adc:	701a      	strb	r2, [r3, #0]
}
 8029ade:	46bd      	mov	sp, r7
 8029ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ae4:	4770      	bx	lr
 8029ae6:	bf00      	nop
 8029ae8:	1ffea634 	.word	0x1ffea634
 8029aec:	1ffea635 	.word	0x1ffea635

08029af0 <FWUPDATE_GetDownloadFinished>:

uint8_t FWUPDATE_GetDownloadFinished(void)
{
 8029af0:	b480      	push	{r7}
 8029af2:	af00      	add	r7, sp, #0
	return g_firmware_download_finished;
 8029af4:	4b03      	ldr	r3, [pc, #12]	; (8029b04 <FWUPDATE_GetDownloadFinished+0x14>)
 8029af6:	781b      	ldrb	r3, [r3, #0]
}
 8029af8:	4618      	mov	r0, r3
 8029afa:	46bd      	mov	sp, r7
 8029afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b00:	4770      	bx	lr
 8029b02:	bf00      	nop
 8029b04:	1ffea635 	.word	0x1ffea635

08029b08 <FWUPDATE_Data>:

uint16_t FWUPDATE_Data(uint16_t *pdata, uint16_t size)
{
 8029b08:	b580      	push	{r7, lr}
 8029b0a:	b084      	sub	sp, #16
 8029b0c:	af00      	add	r7, sp, #0
 8029b0e:	6078      	str	r0, [r7, #4]
 8029b10:	460b      	mov	r3, r1
 8029b12:	807b      	strh	r3, [r7, #2]
  /* Next data of firmware file received
   * Proceed with programming
   */
  switch( FLASHPROG_Data((void*)pdata, (uint32_t)size) )
 8029b14:	887b      	ldrh	r3, [r7, #2]
 8029b16:	6878      	ldr	r0, [r7, #4]
 8029b18:	4619      	mov	r1, r3
 8029b1a:	f000 f8f5 	bl	8029d08 <FLASHPROG_Data>
 8029b1e:	4603      	mov	r3, r0
 8029b20:	2b01      	cmp	r3, #1
 8029b22:	d002      	beq.n	8029b2a <FWUPDATE_Data+0x22>
 8029b24:	2b02      	cmp	r3, #2
 8029b26:	d003      	beq.n	8029b30 <FWUPDATE_Data+0x28>
 8029b28:	e005      	b.n	8029b36 <FWUPDATE_Data+0x2e>
  {
    case FLASH_FULL_ERROR:
    {
      /* Maximum firmware size reached */
      return ECAT_FOE_ERRCODE_DISKFULL;
 8029b2a:	f248 0303 	movw	r3, #32771	; 0x8003
 8029b2e:	e04a      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
    }
    case FLASH_PROG_ERROR:
    {
      /* XMC flash programming error occured */
      return ECAT_FOE_ERRCODE_PROGERROR;
 8029b30:	f248 030b 	movw	r3, #32779	; 0x800b
 8029b34:	e047      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
	}
  }

  if ( size == (u16ReceiveMbxSize - MBX_HEADER_SIZE - FOE_HEADER_SIZE) )
 8029b36:	887a      	ldrh	r2, [r7, #2]
 8029b38:	4b25      	ldr	r3, [pc, #148]	; (8029bd0 <FWUPDATE_Data+0xc8>)
 8029b3a:	881b      	ldrh	r3, [r3, #0]
 8029b3c:	3b0c      	subs	r3, #12
 8029b3e:	429a      	cmp	r2, r3
 8029b40:	d101      	bne.n	8029b46 <FWUPDATE_Data+0x3e>
  {
    /* Further data will follow */
    return 0;
 8029b42:	2300      	movs	r3, #0
 8029b44:	e03f      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
  }
  else
  {
    /* last part of the file received */
	/* Finalize XMC flash programming */
  	FLASHPROG_Close();
 8029b46:	f000 f983 	bl	8029e50 <FLASHPROG_Close>

  	/* Check CRC32 (last 4 bytes of image) */
   	if (FLASHPROG_CRC32_check(START_BACKUP_PARTITION, FLASHPROG_Bytes_written())==FLASH_CRC_ERROR)
 8029b4a:	f000 f9ad 	bl	8029ea8 <FLASHPROG_Bytes_written>
 8029b4e:	4603      	mov	r3, r0
 8029b50:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 8029b54:	4619      	mov	r1, r3
 8029b56:	f000 f9b3 	bl	8029ec0 <FLASHPROG_CRC32_check>
 8029b5a:	4603      	mov	r3, r0
 8029b5c:	2b03      	cmp	r3, #3
 8029b5e:	d102      	bne.n	8029b66 <FWUPDATE_Data+0x5e>
   	{
   	  return ECAT_FOE_ERRCODE_INVALID_CHECKSUM;
 8029b60:	f248 030c 	movw	r3, #32780	; 0x800c
 8029b64:	e02f      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
   	}

   	/* Downloaded firmware binary is ok
   	 * now prepare meta info page to proceed
   	 * with flashing application partition from bootloader executable*/
    for (uint32_t i = 0; i < XMC_FLASH_BYTES_PER_PAGE / 4; i++)
 8029b66:	2300      	movs	r3, #0
 8029b68:	60fb      	str	r3, [r7, #12]
 8029b6a:	e007      	b.n	8029b7c <FWUPDATE_Data+0x74>
   	{
      meta_page[i] = 0;
 8029b6c:	4a19      	ldr	r2, [pc, #100]	; (8029bd4 <FWUPDATE_Data+0xcc>)
 8029b6e:	68fb      	ldr	r3, [r7, #12]
 8029b70:	2100      	movs	r1, #0
 8029b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	}

   	/* Downloaded firmware binary is ok
   	 * now prepare meta info page to proceed
   	 * with flashing application partition from bootloader executable*/
    for (uint32_t i = 0; i < XMC_FLASH_BYTES_PER_PAGE / 4; i++)
 8029b76:	68fb      	ldr	r3, [r7, #12]
 8029b78:	3301      	adds	r3, #1
 8029b7a:	60fb      	str	r3, [r7, #12]
 8029b7c:	68fb      	ldr	r3, [r7, #12]
 8029b7e:	2b3f      	cmp	r3, #63	; 0x3f
 8029b80:	d9f4      	bls.n	8029b6c <FWUPDATE_Data+0x64>
   	{
      meta_page[i] = 0;
    }
    /* Set meta info; firmware binary size */
    meta_page[63] = FLASHPROG_Bytes_written();
 8029b82:	f000 f991 	bl	8029ea8 <FLASHPROG_Bytes_written>
 8029b86:	4602      	mov	r2, r0
 8029b88:	4b12      	ldr	r3, [pc, #72]	; (8029bd4 <FWUPDATE_Data+0xcc>)
 8029b8a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  	/* store meta info */
    /* Initialize flash programming with offset to meta-info page */
   	FLASHPROG_Init(START_BACKUP_PARTITION + METAINFO_OFFSET, XMC_FLASH_BYTES_PER_PAGE, FLASH_OPT_NO_ERASE, FLASH_OPT_CHECK);
 8029b8e:	4812      	ldr	r0, [pc, #72]	; (8029bd8 <FWUPDATE_Data+0xd0>)
 8029b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8029b94:	2265      	movs	r2, #101	; 0x65
 8029b96:	23c8      	movs	r3, #200	; 0xc8
 8029b98:	f000 f87a 	bl	8029c90 <FLASHPROG_Init>
    switch( FLASHPROG_Data((void*)meta_page, (uint32_t)256) )
 8029b9c:	480d      	ldr	r0, [pc, #52]	; (8029bd4 <FWUPDATE_Data+0xcc>)
 8029b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8029ba2:	f000 f8b1 	bl	8029d08 <FLASHPROG_Data>
 8029ba6:	4603      	mov	r3, r0
 8029ba8:	2b01      	cmp	r3, #1
 8029baa:	d002      	beq.n	8029bb2 <FWUPDATE_Data+0xaa>
 8029bac:	2b02      	cmp	r3, #2
 8029bae:	d003      	beq.n	8029bb8 <FWUPDATE_Data+0xb0>
 8029bb0:	e005      	b.n	8029bbe <FWUPDATE_Data+0xb6>
    {
      case FLASH_FULL_ERROR:
      {
        /* can never happen; however to be code complete ... */
        return ECAT_FOE_ERRCODE_DISKFULL;
 8029bb2:	f248 0303 	movw	r3, #32771	; 0x8003
 8029bb6:	e006      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
      }
      case FLASH_PROG_ERROR:
      {
        /* XMC flash programming error occured */
        return ECAT_FOE_ERRCODE_PROGERROR;
 8029bb8:	f248 030b 	movw	r3, #32779	; 0x800b
 8029bbc:	e003      	b.n	8029bc6 <FWUPDATE_Data+0xbe>
      }
    }
    /* Finalize meta info programming inside XMC flash */
    FLASHPROG_Close();
 8029bbe:	f000 f947 	bl	8029e50 <FLASHPROG_Close>
    return FOE_ACKFINISHED;
 8029bc2:	f647 73fc 	movw	r3, #32764	; 0x7ffc
  }
}
 8029bc6:	4618      	mov	r0, r3
 8029bc8:	3710      	adds	r7, #16
 8029bca:	46bd      	mov	sp, r7
 8029bcc:	bd80      	pop	{r7, pc}
 8029bce:	bf00      	nop
 8029bd0:	1ffeac8e 	.word	0x1ffeac8e
 8029bd4:	1ffea534 	.word	0x1ffea534
 8029bd8:	0c1fff00 	.word	0x0c1fff00

08029bdc <XMC_FCE_GetCRCResult>:
 *
 * \par<b>Description: </b><br>
 * Read the final CRC value from RES register <br>
 */
__STATIC_INLINE void XMC_FCE_GetCRCResult(const XMC_FCE_t *const engine, uint32_t *result)
{
 8029bdc:	b480      	push	{r7}
 8029bde:	b083      	sub	sp, #12
 8029be0:	af00      	add	r7, sp, #0
 8029be2:	6078      	str	r0, [r7, #4]
 8029be4:	6039      	str	r1, [r7, #0]
  *result= engine->kernel_ptr->RES;
 8029be6:	687b      	ldr	r3, [r7, #4]
 8029be8:	681b      	ldr	r3, [r3, #0]
 8029bea:	685a      	ldr	r2, [r3, #4]
 8029bec:	683b      	ldr	r3, [r7, #0]
 8029bee:	601a      	str	r2, [r3, #0]
}
 8029bf0:	370c      	adds	r7, #12
 8029bf2:	46bd      	mov	sp, r7
 8029bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bf8:	4770      	bx	lr
 8029bfa:	bf00      	nop

08029bfc <Flash_lGetPhysicalSector>:
 *
 * @return : start address of physical sector
 *
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
 8029bfc:	b480      	push	{r7}
 8029bfe:	b085      	sub	sp, #20
 8029c00:	af00      	add	r7, sp, #0
 8029c02:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8029c04:	2300      	movs	r3, #0
 8029c06:	73fb      	strb	r3, [r7, #15]
 8029c08:	e016      	b.n	8029c38 <Flash_lGetPhysicalSector+0x3c>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
 8029c0a:	7bfb      	ldrb	r3, [r7, #15]
 8029c0c:	4a0f      	ldr	r2, [pc, #60]	; (8029c4c <Flash_lGetPhysicalSector+0x50>)
 8029c0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	429a      	cmp	r2, r3
 8029c16:	d80c      	bhi.n	8029c32 <Flash_lGetPhysicalSector+0x36>
 8029c18:	7bfb      	ldrb	r3, [r7, #15]
 8029c1a:	3301      	adds	r3, #1
 8029c1c:	4a0b      	ldr	r2, [pc, #44]	; (8029c4c <Flash_lGetPhysicalSector+0x50>)
 8029c1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	429a      	cmp	r2, r3
 8029c26:	d904      	bls.n	8029c32 <Flash_lGetPhysicalSector+0x36>
      return physical_sector_addresses[sector_number];
 8029c28:	7bfb      	ldrb	r3, [r7, #15]
 8029c2a:	4a08      	ldr	r2, [pc, #32]	; (8029c4c <Flash_lGetPhysicalSector+0x50>)
 8029c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029c30:	e006      	b.n	8029c40 <Flash_lGetPhysicalSector+0x44>
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8029c32:	7bfb      	ldrb	r3, [r7, #15]
 8029c34:	3301      	adds	r3, #1
 8029c36:	73fb      	strb	r3, [r7, #15]
 8029c38:	7bfb      	ldrb	r3, [r7, #15]
 8029c3a:	2b09      	cmp	r3, #9
 8029c3c:	d9e5      	bls.n	8029c0a <Flash_lGetPhysicalSector+0xe>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
      return physical_sector_addresses[sector_number];
  }
  /* should not be reached */
  return 0;
 8029c3e:	2300      	movs	r3, #0
}
 8029c40:	4618      	mov	r0, r3
 8029c42:	3714      	adds	r7, #20
 8029c44:	46bd      	mov	sp, r7
 8029c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c4a:	4770      	bx	lr
 8029c4c:	1ffe947c 	.word	0x1ffe947c

08029c50 <Flash_lGetPhysicalSectorNumber>:
 *
 * @return : sector number
 *
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
 8029c50:	b480      	push	{r7}
 8029c52:	b085      	sub	sp, #20
 8029c54:	af00      	add	r7, sp, #0
 8029c56:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8029c58:	2300      	movs	r3, #0
 8029c5a:	73fb      	strb	r3, [r7, #15]
 8029c5c:	e00b      	b.n	8029c76 <Flash_lGetPhysicalSectorNumber+0x26>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
 8029c5e:	7bfb      	ldrb	r3, [r7, #15]
 8029c60:	4a0a      	ldr	r2, [pc, #40]	; (8029c8c <Flash_lGetPhysicalSectorNumber+0x3c>)
 8029c62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029c66:	687b      	ldr	r3, [r7, #4]
 8029c68:	429a      	cmp	r2, r3
 8029c6a:	d101      	bne.n	8029c70 <Flash_lGetPhysicalSectorNumber+0x20>
      return sector_number;
 8029c6c:	7bfb      	ldrb	r3, [r7, #15]
 8029c6e:	e006      	b.n	8029c7e <Flash_lGetPhysicalSectorNumber+0x2e>
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 8029c70:	7bfb      	ldrb	r3, [r7, #15]
 8029c72:	3301      	adds	r3, #1
 8029c74:	73fb      	strb	r3, [r7, #15]
 8029c76:	7bfb      	ldrb	r3, [r7, #15]
 8029c78:	2b09      	cmp	r3, #9
 8029c7a:	d9f0      	bls.n	8029c5e <Flash_lGetPhysicalSectorNumber+0xe>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
      return sector_number;
  }
  return 0;
 8029c7c:	2300      	movs	r3, #0
}
 8029c7e:	4618      	mov	r0, r3
 8029c80:	3714      	adds	r7, #20
 8029c82:	46bd      	mov	sp, r7
 8029c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c88:	4770      	bx	lr
 8029c8a:	bf00      	nop
 8029c8c:	1ffe947c 	.word	0x1ffe947c

08029c90 <FLASHPROG_Init>:
 *
 * @return : none
 *
 */
void FLASHPROG_Init(uint32_t* dest_address, uint32_t max_size, uint8_t erase, uint8_t check_prog)
{
 8029c90:	b480      	push	{r7}
 8029c92:	b085      	sub	sp, #20
 8029c94:	af00      	add	r7, sp, #0
 8029c96:	60f8      	str	r0, [r7, #12]
 8029c98:	60b9      	str	r1, [r7, #8]
 8029c9a:	4611      	mov	r1, r2
 8029c9c:	461a      	mov	r2, r3
 8029c9e:	460b      	mov	r3, r1
 8029ca0:	71fb      	strb	r3, [r7, #7]
 8029ca2:	4613      	mov	r3, r2
 8029ca4:	71bb      	strb	r3, [r7, #6]
  gl_flash_write_address = dest_address;
 8029ca6:	4a11      	ldr	r2, [pc, #68]	; (8029cec <FLASHPROG_Init+0x5c>)
 8029ca8:	68fb      	ldr	r3, [r7, #12]
 8029caa:	6013      	str	r3, [r2, #0]
  gl_flash_write_start_address = dest_address;
 8029cac:	4a10      	ldr	r2, [pc, #64]	; (8029cf0 <FLASHPROG_Init+0x60>)
 8029cae:	68fb      	ldr	r3, [r7, #12]
 8029cb0:	6013      	str	r3, [r2, #0]
  gl_flash_max_size = max_size;
 8029cb2:	4a10      	ldr	r2, [pc, #64]	; (8029cf4 <FLASHPROG_Init+0x64>)
 8029cb4:	68bb      	ldr	r3, [r7, #8]
 8029cb6:	6013      	str	r3, [r2, #0]
  gl_flash_check_prog = check_prog;
 8029cb8:	4a0f      	ldr	r2, [pc, #60]	; (8029cf8 <FLASHPROG_Init+0x68>)
 8029cba:	79bb      	ldrb	r3, [r7, #6]
 8029cbc:	7013      	strb	r3, [r2, #0]
  gl_flash_bytes_written = 0;
 8029cbe:	4b0f      	ldr	r3, [pc, #60]	; (8029cfc <FLASHPROG_Init+0x6c>)
 8029cc0:	2200      	movs	r2, #0
 8029cc2:	601a      	str	r2, [r3, #0]
  if (erase == FLASH_OPT_NO_ERASE)
 8029cc4:	79fb      	ldrb	r3, [r7, #7]
 8029cc6:	2b65      	cmp	r3, #101	; 0x65
 8029cc8:	d104      	bne.n	8029cd4 <FLASHPROG_Init+0x44>
    gl_flash_erased = 0xffffU;
 8029cca:	4b0d      	ldr	r3, [pc, #52]	; (8029d00 <FLASHPROG_Init+0x70>)
 8029ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8029cd0:	801a      	strh	r2, [r3, #0]
 8029cd2:	e002      	b.n	8029cda <FLASHPROG_Init+0x4a>
  else
    gl_flash_erased = 0U;
 8029cd4:	4b0a      	ldr	r3, [pc, #40]	; (8029d00 <FLASHPROG_Init+0x70>)
 8029cd6:	2200      	movs	r2, #0
 8029cd8:	801a      	strh	r2, [r3, #0]
  gl_flash_page_prep_index = 0U;
 8029cda:	4b0a      	ldr	r3, [pc, #40]	; (8029d04 <FLASHPROG_Init+0x74>)
 8029cdc:	2200      	movs	r2, #0
 8029cde:	601a      	str	r2, [r3, #0]
}
 8029ce0:	3714      	adds	r7, #20
 8029ce2:	46bd      	mov	sp, r7
 8029ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ce8:	4770      	bx	lr
 8029cea:	bf00      	nop
 8029cec:	1ffea638 	.word	0x1ffea638
 8029cf0:	1ffea63c 	.word	0x1ffea63c
 8029cf4:	1ffea648 	.word	0x1ffea648
 8029cf8:	1ffea644 	.word	0x1ffea644
 8029cfc:	1ffea640 	.word	0x1ffea640
 8029d00:	1ffea646 	.word	0x1ffea646
 8029d04:	1ffea74c 	.word	0x1ffea74c

08029d08 <FLASHPROG_Data>:
 * @return : FLASH_FULL_ERROR - no more space left inside destination
 *           FLASH_PROG_ERROR - programming error
 *
 */
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
 8029d08:	b580      	push	{r7, lr}
 8029d0a:	b088      	sub	sp, #32
 8029d0c:	af00      	add	r7, sp, #0
 8029d0e:	6078      	str	r0, [r7, #4]
 8029d10:	6039      	str	r1, [r7, #0]
  uint32_t result = FLASH_OK;
 8029d12:	2300      	movs	r3, #0
 8029d14:	61fb      	str	r3, [r7, #28]
  uint32_t bytes_processed = 0;
 8029d16:	2300      	movs	r3, #0
 8029d18:	61bb      	str	r3, [r7, #24]

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 8029d1a:	e07e      	b.n	8029e1a <FLASHPROG_Data+0x112>
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 8029d1c:	e00f      	b.n	8029d3e <FLASHPROG_Data+0x36>
    {
      gl_flash_page_prep[gl_flash_page_prep_index]=((uint8_t*)src_data)[bytes_processed];
 8029d1e:	4b45      	ldr	r3, [pc, #276]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	6879      	ldr	r1, [r7, #4]
 8029d24:	69ba      	ldr	r2, [r7, #24]
 8029d26:	440a      	add	r2, r1
 8029d28:	7811      	ldrb	r1, [r2, #0]
 8029d2a:	4a43      	ldr	r2, [pc, #268]	; (8029e38 <FLASHPROG_Data+0x130>)
 8029d2c:	54d1      	strb	r1, [r2, r3]
      bytes_processed+=1;
 8029d2e:	69bb      	ldr	r3, [r7, #24]
 8029d30:	3301      	adds	r3, #1
 8029d32:	61bb      	str	r3, [r7, #24]
      gl_flash_page_prep_index++;
 8029d34:	4b3f      	ldr	r3, [pc, #252]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029d36:	681b      	ldr	r3, [r3, #0]
 8029d38:	3301      	adds	r3, #1
 8029d3a:	4a3e      	ldr	r2, [pc, #248]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029d3c:	6013      	str	r3, [r2, #0]
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 8029d3e:	4b3d      	ldr	r3, [pc, #244]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029d40:	681b      	ldr	r3, [r3, #0]
 8029d42:	2bff      	cmp	r3, #255	; 0xff
 8029d44:	d803      	bhi.n	8029d4e <FLASHPROG_Data+0x46>
 8029d46:	683a      	ldr	r2, [r7, #0]
 8029d48:	69bb      	ldr	r3, [r7, #24]
 8029d4a:	429a      	cmp	r2, r3
 8029d4c:	d8e7      	bhi.n	8029d1e <FLASHPROG_Data+0x16>
      bytes_processed+=1;
      gl_flash_page_prep_index++;
    }

    /* Complete page prepared ? */
    if (gl_flash_page_prep_index == XMC_FLASH_BYTES_PER_PAGE)
 8029d4e:	4b39      	ldr	r3, [pc, #228]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029d50:	681b      	ldr	r3, [r3, #0]
 8029d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029d56:	d160      	bne.n	8029e1a <FLASHPROG_Data+0x112>
    {
      if ((gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE) <= gl_flash_max_size)
 8029d58:	4b38      	ldr	r3, [pc, #224]	; (8029e3c <FLASHPROG_Data+0x134>)
 8029d5a:	681b      	ldr	r3, [r3, #0]
 8029d5c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8029d60:	4b37      	ldr	r3, [pc, #220]	; (8029e40 <FLASHPROG_Data+0x138>)
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	429a      	cmp	r2, r3
 8029d66:	d856      	bhi.n	8029e16 <FLASHPROG_Data+0x10e>
      {
        /* One complete page is prepared; start programming */

        /* Check if physical sector already has been deleted; if not, delete */
        uint32_t* PhysicalSector = Flash_lGetPhysicalSector(gl_flash_write_address);
 8029d68:	4b36      	ldr	r3, [pc, #216]	; (8029e44 <FLASHPROG_Data+0x13c>)
 8029d6a:	681b      	ldr	r3, [r3, #0]
 8029d6c:	4618      	mov	r0, r3
 8029d6e:	f7ff ff45 	bl	8029bfc <Flash_lGetPhysicalSector>
 8029d72:	6138      	str	r0, [r7, #16]
        uint8_t PhysicalSectorNumber = Flash_lGetPhysicalSectorNumber(PhysicalSector);
 8029d74:	6938      	ldr	r0, [r7, #16]
 8029d76:	f7ff ff6b 	bl	8029c50 <Flash_lGetPhysicalSectorNumber>
 8029d7a:	4603      	mov	r3, r0
 8029d7c:	73fb      	strb	r3, [r7, #15]
        if (!(gl_flash_erased & 1 << PhysicalSectorNumber))
 8029d7e:	4b32      	ldr	r3, [pc, #200]	; (8029e48 <FLASHPROG_Data+0x140>)
 8029d80:	881b      	ldrh	r3, [r3, #0]
 8029d82:	461a      	mov	r2, r3
 8029d84:	7bfb      	ldrb	r3, [r7, #15]
 8029d86:	fa42 f303 	asr.w	r3, r2, r3
 8029d8a:	f003 0301 	and.w	r3, r3, #1
 8029d8e:	2b00      	cmp	r3, #0
 8029d90:	d10f      	bne.n	8029db2 <FLASHPROG_Data+0xaa>
        {
          XMC_FLASH_ErasePhysicalSector(PhysicalSector);
 8029d92:	6938      	ldr	r0, [r7, #16]
 8029d94:	f7fc fdc2 	bl	802691c <XMC_FLASH_ErasePhysicalSector>
          gl_flash_erased |= (1<<PhysicalSectorNumber);
 8029d98:	7bfb      	ldrb	r3, [r7, #15]
 8029d9a:	2201      	movs	r2, #1
 8029d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8029da0:	b29a      	uxth	r2, r3
 8029da2:	4b29      	ldr	r3, [pc, #164]	; (8029e48 <FLASHPROG_Data+0x140>)
 8029da4:	881b      	ldrh	r3, [r3, #0]
 8029da6:	b29b      	uxth	r3, r3
 8029da8:	4313      	orrs	r3, r2
 8029daa:	b29b      	uxth	r3, r3
 8029dac:	b29a      	uxth	r2, r3
 8029dae:	4b26      	ldr	r3, [pc, #152]	; (8029e48 <FLASHPROG_Data+0x140>)
 8029db0:	801a      	strh	r2, [r3, #0]
        }

        /* Program page */
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 8029db2:	4b24      	ldr	r3, [pc, #144]	; (8029e44 <FLASHPROG_Data+0x13c>)
 8029db4:	681b      	ldr	r3, [r3, #0]
 8029db6:	4618      	mov	r0, r3
 8029db8:	491f      	ldr	r1, [pc, #124]	; (8029e38 <FLASHPROG_Data+0x130>)
 8029dba:	f7fc fd37 	bl	802682c <XMC_FLASH_ProgramPage>

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
 8029dbe:	4b23      	ldr	r3, [pc, #140]	; (8029e4c <FLASHPROG_Data+0x144>)
 8029dc0:	781b      	ldrb	r3, [r3, #0]
 8029dc2:	2bc8      	cmp	r3, #200	; 0xc8
 8029dc4:	d117      	bne.n	8029df6 <FLASHPROG_Data+0xee>
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 8029dc6:	2300      	movs	r3, #0
 8029dc8:	617b      	str	r3, [r7, #20]
 8029dca:	e011      	b.n	8029df0 <FLASHPROG_Data+0xe8>
          {
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
 8029dcc:	4b1d      	ldr	r3, [pc, #116]	; (8029e44 <FLASHPROG_Data+0x13c>)
 8029dce:	681a      	ldr	r2, [r3, #0]
 8029dd0:	697b      	ldr	r3, [r7, #20]
 8029dd2:	009b      	lsls	r3, r3, #2
 8029dd4:	4413      	add	r3, r2
 8029dd6:	681a      	ldr	r2, [r3, #0]
 8029dd8:	697b      	ldr	r3, [r7, #20]
 8029dda:	009b      	lsls	r3, r3, #2
 8029ddc:	4916      	ldr	r1, [pc, #88]	; (8029e38 <FLASHPROG_Data+0x130>)
 8029dde:	440b      	add	r3, r1
 8029de0:	681b      	ldr	r3, [r3, #0]
 8029de2:	429a      	cmp	r2, r3
 8029de4:	d001      	beq.n	8029dea <FLASHPROG_Data+0xe2>
              result = FLASH_PROG_ERROR;
 8029de6:	2302      	movs	r3, #2
 8029de8:	61fb      	str	r3, [r7, #28]
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 8029dea:	697b      	ldr	r3, [r7, #20]
 8029dec:	3301      	adds	r3, #1
 8029dee:	617b      	str	r3, [r7, #20]
 8029df0:	697b      	ldr	r3, [r7, #20]
 8029df2:	2b3f      	cmp	r3, #63	; 0x3f
 8029df4:	d9ea      	bls.n	8029dcc <FLASHPROG_Data+0xc4>
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
              result = FLASH_PROG_ERROR;
          }
        }

        gl_flash_write_address = gl_flash_write_address + XMC_FLASH_BYTES_PER_PAGE / 4;
 8029df6:	4b13      	ldr	r3, [pc, #76]	; (8029e44 <FLASHPROG_Data+0x13c>)
 8029df8:	681b      	ldr	r3, [r3, #0]
 8029dfa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8029dfe:	4a11      	ldr	r2, [pc, #68]	; (8029e44 <FLASHPROG_Data+0x13c>)
 8029e00:	6013      	str	r3, [r2, #0]
        gl_flash_bytes_written = gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE;
 8029e02:	4b0e      	ldr	r3, [pc, #56]	; (8029e3c <FLASHPROG_Data+0x134>)
 8029e04:	681b      	ldr	r3, [r3, #0]
 8029e06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8029e0a:	4a0c      	ldr	r2, [pc, #48]	; (8029e3c <FLASHPROG_Data+0x134>)
 8029e0c:	6013      	str	r3, [r2, #0]
        gl_flash_page_prep_index=0;
 8029e0e:	4b09      	ldr	r3, [pc, #36]	; (8029e34 <FLASHPROG_Data+0x12c>)
 8029e10:	2200      	movs	r2, #0
 8029e12:	601a      	str	r2, [r3, #0]
 8029e14:	e001      	b.n	8029e1a <FLASHPROG_Data+0x112>
      }
      else
      {
        result = FLASH_FULL_ERROR;
 8029e16:	2301      	movs	r3, #1
 8029e18:	61fb      	str	r3, [r7, #28]
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 8029e1a:	683a      	ldr	r2, [r7, #0]
 8029e1c:	69bb      	ldr	r3, [r7, #24]
 8029e1e:	429a      	cmp	r2, r3
 8029e20:	d903      	bls.n	8029e2a <FLASHPROG_Data+0x122>
 8029e22:	69fb      	ldr	r3, [r7, #28]
 8029e24:	2b00      	cmp	r3, #0
 8029e26:	f43f af79 	beq.w	8029d1c <FLASHPROG_Data+0x14>
      {
        result = FLASH_FULL_ERROR;
      }
    }
  }
  return result;
 8029e2a:	69fb      	ldr	r3, [r7, #28]
}
 8029e2c:	4618      	mov	r0, r3
 8029e2e:	3720      	adds	r7, #32
 8029e30:	46bd      	mov	sp, r7
 8029e32:	bd80      	pop	{r7, pc}
 8029e34:	1ffea74c 	.word	0x1ffea74c
 8029e38:	1ffea64c 	.word	0x1ffea64c
 8029e3c:	1ffea640 	.word	0x1ffea640
 8029e40:	1ffea648 	.word	0x1ffea648
 8029e44:	1ffea638 	.word	0x1ffea638
 8029e48:	1ffea646 	.word	0x1ffea646
 8029e4c:	1ffea644 	.word	0x1ffea644

08029e50 <FLASHPROG_Close>:
 *
 * @return : none
 *
 */
uint32_t FLASHPROG_Close(void)
{
 8029e50:	b580      	push	{r7, lr}
 8029e52:	af00      	add	r7, sp, #0
  /* Data remaining in page preparation ? */
  if (gl_flash_page_prep_index!=0)
 8029e54:	4b0f      	ldr	r3, [pc, #60]	; (8029e94 <FLASHPROG_Close+0x44>)
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	2b00      	cmp	r3, #0
 8029e5a:	d017      	beq.n	8029e8c <FLASHPROG_Close+0x3c>
  {
    if ((gl_flash_bytes_written + 256) < gl_flash_max_size)
 8029e5c:	4b0e      	ldr	r3, [pc, #56]	; (8029e98 <FLASHPROG_Close+0x48>)
 8029e5e:	681b      	ldr	r3, [r3, #0]
 8029e60:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8029e64:	4b0d      	ldr	r3, [pc, #52]	; (8029e9c <FLASHPROG_Close+0x4c>)
 8029e66:	681b      	ldr	r3, [r3, #0]
 8029e68:	429a      	cmp	r2, r3
 8029e6a:	d20d      	bcs.n	8029e88 <FLASHPROG_Close+0x38>
    {
      /* Programm remaining data */
      XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 8029e6c:	4b0c      	ldr	r3, [pc, #48]	; (8029ea0 <FLASHPROG_Close+0x50>)
 8029e6e:	681b      	ldr	r3, [r3, #0]
 8029e70:	4618      	mov	r0, r3
 8029e72:	490c      	ldr	r1, [pc, #48]	; (8029ea4 <FLASHPROG_Close+0x54>)
 8029e74:	f7fc fcda 	bl	802682c <XMC_FLASH_ProgramPage>
      gl_flash_bytes_written = gl_flash_bytes_written + gl_flash_page_prep_index;
 8029e78:	4b07      	ldr	r3, [pc, #28]	; (8029e98 <FLASHPROG_Close+0x48>)
 8029e7a:	681a      	ldr	r2, [r3, #0]
 8029e7c:	4b05      	ldr	r3, [pc, #20]	; (8029e94 <FLASHPROG_Close+0x44>)
 8029e7e:	681b      	ldr	r3, [r3, #0]
 8029e80:	4413      	add	r3, r2
 8029e82:	4a05      	ldr	r2, [pc, #20]	; (8029e98 <FLASHPROG_Close+0x48>)
 8029e84:	6013      	str	r3, [r2, #0]
 8029e86:	e001      	b.n	8029e8c <FLASHPROG_Close+0x3c>
    }
    else
    {
      return FLASH_FULL_ERROR;
 8029e88:	2301      	movs	r3, #1
 8029e8a:	e000      	b.n	8029e8e <FLASHPROG_Close+0x3e>
    }
  }
  return FLASH_OK;
 8029e8c:	2300      	movs	r3, #0
}
 8029e8e:	4618      	mov	r0, r3
 8029e90:	bd80      	pop	{r7, pc}
 8029e92:	bf00      	nop
 8029e94:	1ffea74c 	.word	0x1ffea74c
 8029e98:	1ffea640 	.word	0x1ffea640
 8029e9c:	1ffea648 	.word	0x1ffea648
 8029ea0:	1ffea638 	.word	0x1ffea638
 8029ea4:	1ffea64c 	.word	0x1ffea64c

08029ea8 <FLASHPROG_Bytes_written>:
 *
 * @return : number of bytes written
 *
 */
uint32_t FLASHPROG_Bytes_written(void)
{
 8029ea8:	b480      	push	{r7}
 8029eaa:	af00      	add	r7, sp, #0
  return gl_flash_bytes_written;
 8029eac:	4b03      	ldr	r3, [pc, #12]	; (8029ebc <FLASHPROG_Bytes_written+0x14>)
 8029eae:	681b      	ldr	r3, [r3, #0]
}
 8029eb0:	4618      	mov	r0, r3
 8029eb2:	46bd      	mov	sp, r7
 8029eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029eb8:	4770      	bx	lr
 8029eba:	bf00      	nop
 8029ebc:	1ffea640 	.word	0x1ffea640

08029ec0 <FLASHPROG_CRC32_check>:
 * @return : FLASH_OK - CRC32 check is ok
 *           FLAHS_CRC_ERROR - CRC32 check failed
 *
 */
uint32_t FLASHPROG_CRC32_check(uint32_t* ptr_startaddress, uint32_t size_bytes)
{
 8029ec0:	b580      	push	{r7, lr}
 8029ec2:	b086      	sub	sp, #24
 8029ec4:	af00      	add	r7, sp, #0
 8029ec6:	6078      	str	r0, [r7, #4]
 8029ec8:	6039      	str	r1, [r7, #0]
  uint32_t crc32_result;
  uint32_t crc32_expected;
  XMC_FCE_STATUS_t fce_status;

  XMC_FCE_Enable();
 8029eca:	f7fd ffe7 	bl	8027e9c <XMC_FCE_Enable>
  XMC_FCE_Init(&FCE_config0);
 8029ece:	4815      	ldr	r0, [pc, #84]	; (8029f24 <FLASHPROG_CRC32_check+0x64>)
 8029ed0:	f7fd ffce 	bl	8027e70 <XMC_FCE_Init>
  fce_status = XMC_FCE_CalculateCRC32(&FCE_config0,  ptr_startaddress, size_bytes - 4, &crc32_result);
 8029ed4:	683b      	ldr	r3, [r7, #0]
 8029ed6:	1f1a      	subs	r2, r3, #4
 8029ed8:	f107 030c 	add.w	r3, r7, #12
 8029edc:	4811      	ldr	r0, [pc, #68]	; (8029f24 <FLASHPROG_CRC32_check+0x64>)
 8029ede:	6879      	ldr	r1, [r7, #4]
 8029ee0:	f7fd fff0 	bl	8027ec4 <XMC_FCE_CalculateCRC32>
 8029ee4:	4603      	mov	r3, r0
 8029ee6:	75fb      	strb	r3, [r7, #23]
  XMC_FCE_GetCRCResult(&FCE_config0, &crc32_result);
 8029ee8:	f107 030c 	add.w	r3, r7, #12
 8029eec:	480d      	ldr	r0, [pc, #52]	; (8029f24 <FLASHPROG_CRC32_check+0x64>)
 8029eee:	4619      	mov	r1, r3
 8029ef0:	f7ff fe74 	bl	8029bdc <XMC_FCE_GetCRCResult>
  if (fce_status == XMC_FCE_STATUS_OK)
 8029ef4:	7dfb      	ldrb	r3, [r7, #23]
 8029ef6:	2b00      	cmp	r3, #0
 8029ef8:	d10f      	bne.n	8029f1a <FLASHPROG_CRC32_check+0x5a>
  {
    crc32_expected = *(ptr_startaddress + size_bytes/4 - 1);
 8029efa:	683b      	ldr	r3, [r7, #0]
 8029efc:	089b      	lsrs	r3, r3, #2
 8029efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029f02:	3b01      	subs	r3, #1
 8029f04:	009b      	lsls	r3, r3, #2
 8029f06:	687a      	ldr	r2, [r7, #4]
 8029f08:	4413      	add	r3, r2
 8029f0a:	681b      	ldr	r3, [r3, #0]
 8029f0c:	613b      	str	r3, [r7, #16]
    if (crc32_result != crc32_expected)
 8029f0e:	68fa      	ldr	r2, [r7, #12]
 8029f10:	693b      	ldr	r3, [r7, #16]
 8029f12:	429a      	cmp	r2, r3
 8029f14:	d001      	beq.n	8029f1a <FLASHPROG_CRC32_check+0x5a>
    {
      return FLASH_CRC_ERROR;
 8029f16:	2303      	movs	r3, #3
 8029f18:	e000      	b.n	8029f1c <FLASHPROG_CRC32_check+0x5c>
    }
  }
  return FLASH_OK;
 8029f1a:	2300      	movs	r3, #0
}
 8029f1c:	4618      	mov	r0, r3
 8029f1e:	3718      	adds	r7, #24
 8029f20:	46bd      	mov	sp, r7
 8029f22:	bd80      	pop	{r7, pc}
 8029f24:	1ffe94a8 	.word	0x1ffe94a8

08029f28 <XMC_SCU_RESET_ClearDeviceResetReason>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
{
 8029f28:	b480      	push	{r7}
 8029f2a:	af00      	add	r7, sp, #0
  /* Clear RSTSTAT.RSTSTAT bitfield */
  SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 8029f2c:	4b03      	ldr	r3, [pc, #12]	; (8029f3c <XMC_SCU_RESET_ClearDeviceResetReason+0x14>)
 8029f2e:	2201      	movs	r2, #1
 8029f30:	609a      	str	r2, [r3, #8]
}
 8029f32:	46bd      	mov	sp, r7
 8029f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f38:	4770      	bx	lr
 8029f3a:	bf00      	nop
 8029f3c:	50004400 	.word	0x50004400

08029f40 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 8029f40:	b480      	push	{r7}
 8029f42:	b085      	sub	sp, #20
 8029f44:	af00      	add	r7, sp, #0
 8029f46:	60f8      	str	r0, [r7, #12]
 8029f48:	460b      	mov	r3, r1
 8029f4a:	607a      	str	r2, [r7, #4]
 8029f4c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 8029f4e:	7afb      	ldrb	r3, [r7, #11]
 8029f50:	687a      	ldr	r2, [r7, #4]
 8029f52:	409a      	lsls	r2, r3
 8029f54:	68fb      	ldr	r3, [r7, #12]
 8029f56:	605a      	str	r2, [r3, #4]
}
 8029f58:	3714      	adds	r7, #20
 8029f5a:	46bd      	mov	sp, r7
 8029f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f60:	4770      	bx	lr
 8029f62:	bf00      	nop

08029f64 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8029f64:	b480      	push	{r7}
 8029f66:	b083      	sub	sp, #12
 8029f68:	af00      	add	r7, sp, #0
 8029f6a:	6078      	str	r0, [r7, #4]
 8029f6c:	460b      	mov	r3, r1
 8029f6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8029f70:	78fb      	ldrb	r3, [r7, #3]
 8029f72:	2201      	movs	r2, #1
 8029f74:	409a      	lsls	r2, r3
 8029f76:	687b      	ldr	r3, [r7, #4]
 8029f78:	605a      	str	r2, [r3, #4]
}
 8029f7a:	370c      	adds	r7, #12
 8029f7c:	46bd      	mov	sp, r7
 8029f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f82:	4770      	bx	lr

08029f84 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8029f84:	b480      	push	{r7}
 8029f86:	b083      	sub	sp, #12
 8029f88:	af00      	add	r7, sp, #0
 8029f8a:	6078      	str	r0, [r7, #4]
 8029f8c:	460b      	mov	r3, r1
 8029f8e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8029f90:	687b      	ldr	r3, [r7, #4]
 8029f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029f94:	78fb      	ldrb	r3, [r7, #3]
 8029f96:	fa22 f303 	lsr.w	r3, r2, r3
 8029f9a:	f003 0301 	and.w	r3, r3, #1
}
 8029f9e:	4618      	mov	r0, r3
 8029fa0:	370c      	adds	r7, #12
 8029fa2:	46bd      	mov	sp, r7
 8029fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fa8:	4770      	bx	lr
 8029faa:	bf00      	nop

08029fac <XMC_GPIO_EnableDigitalInput>:
 * Enable digital input path for analog pins and configures Pn_PDISC register.This configuration is applicable only for
 * analog port pins.
 *
 */
__STATIC_INLINE void XMC_GPIO_EnableDigitalInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8029fac:	b480      	push	{r7}
 8029fae:	b083      	sub	sp, #12
 8029fb0:	af00      	add	r7, sp, #0
 8029fb2:	6078      	str	r0, [r7, #4]
 8029fb4:	460b      	mov	r3, r1
 8029fb6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_EnableDigitalInput: Invalid analog port", XMC_GPIO_CHECK_ANALOG_PORT(port));
  
  port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8029fb8:	687b      	ldr	r3, [r7, #4]
 8029fba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8029fbc:	78fb      	ldrb	r3, [r7, #3]
 8029fbe:	2101      	movs	r1, #1
 8029fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8029fc4:	43db      	mvns	r3, r3
 8029fc6:	401a      	ands	r2, r3
 8029fc8:	687b      	ldr	r3, [r7, #4]
 8029fca:	661a      	str	r2, [r3, #96]	; 0x60
}
 8029fcc:	370c      	adds	r7, #12
 8029fce:	46bd      	mov	sp, r7
 8029fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fd4:	4770      	bx	lr
 8029fd6:	bf00      	nop

08029fd8 <Init_ECAT_Adapt_LED>:
 *
 * @return : none
 *
 */
void Init_ECAT_Adapt_LED ()
{
 8029fd8:	b580      	push	{r7, lr}
 8029fda:	af00      	add	r7, sp, #0
  /* Set mode of all LED ports to push-pull and output level to low*/
  XMC_GPIO_SetMode(P_LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8029fdc:	4824      	ldr	r0, [pc, #144]	; (802a070 <Init_ECAT_Adapt_LED+0x98>)
 8029fde:	210e      	movs	r1, #14
 8029fe0:	2280      	movs	r2, #128	; 0x80
 8029fe2:	f7fd ffa1 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED1);
 8029fe6:	4822      	ldr	r0, [pc, #136]	; (802a070 <Init_ECAT_Adapt_LED+0x98>)
 8029fe8:	210e      	movs	r1, #14
 8029fea:	f7ff ffbb 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8029fee:	4821      	ldr	r0, [pc, #132]	; (802a074 <Init_ECAT_Adapt_LED+0x9c>)
 8029ff0:	210e      	movs	r1, #14
 8029ff2:	2280      	movs	r2, #128	; 0x80
 8029ff4:	f7fd ff98 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED2);
 8029ff8:	481e      	ldr	r0, [pc, #120]	; (802a074 <Init_ECAT_Adapt_LED+0x9c>)
 8029ffa:	210e      	movs	r1, #14
 8029ffc:	f7ff ffb2 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED3, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a000:	481d      	ldr	r0, [pc, #116]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a002:	210e      	movs	r1, #14
 802a004:	2280      	movs	r2, #128	; 0x80
 802a006:	f7fd ff8f 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED3);
 802a00a:	481b      	ldr	r0, [pc, #108]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a00c:	210e      	movs	r1, #14
 802a00e:	f7ff ffa9 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED4, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a012:	4818      	ldr	r0, [pc, #96]	; (802a074 <Init_ECAT_Adapt_LED+0x9c>)
 802a014:	210f      	movs	r1, #15
 802a016:	2280      	movs	r2, #128	; 0x80
 802a018:	f7fd ff86 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED4);
 802a01c:	4815      	ldr	r0, [pc, #84]	; (802a074 <Init_ECAT_Adapt_LED+0x9c>)
 802a01e:	210f      	movs	r1, #15
 802a020:	f7ff ffa0 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED5, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a024:	4812      	ldr	r0, [pc, #72]	; (802a070 <Init_ECAT_Adapt_LED+0x98>)
 802a026:	2102      	movs	r1, #2
 802a028:	2280      	movs	r2, #128	; 0x80
 802a02a:	f7fd ff7d 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED5);
 802a02e:	4810      	ldr	r0, [pc, #64]	; (802a070 <Init_ECAT_Adapt_LED+0x98>)
 802a030:	2102      	movs	r1, #2
 802a032:	f7ff ff97 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED6, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a036:	4810      	ldr	r0, [pc, #64]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a038:	210d      	movs	r1, #13
 802a03a:	2280      	movs	r2, #128	; 0x80
 802a03c:	f7fd ff74 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED6);
 802a040:	480d      	ldr	r0, [pc, #52]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a042:	210d      	movs	r1, #13
 802a044:	f7ff ff8e 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED7, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a048:	480c      	ldr	r0, [pc, #48]	; (802a07c <Init_ECAT_Adapt_LED+0xa4>)
 802a04a:	2103      	movs	r1, #3
 802a04c:	2280      	movs	r2, #128	; 0x80
 802a04e:	f7fd ff6b 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED7);
 802a052:	480a      	ldr	r0, [pc, #40]	; (802a07c <Init_ECAT_Adapt_LED+0xa4>)
 802a054:	2103      	movs	r1, #3
 802a056:	f7ff ff85 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED8, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a05a:	4807      	ldr	r0, [pc, #28]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a05c:	210b      	movs	r1, #11
 802a05e:	2280      	movs	r2, #128	; 0x80
 802a060:	f7fd ff62 	bl	8027f28 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED8);
 802a064:	4804      	ldr	r0, [pc, #16]	; (802a078 <Init_ECAT_Adapt_LED+0xa0>)
 802a066:	210b      	movs	r1, #11
 802a068:	f7ff ff7c 	bl	8029f64 <XMC_GPIO_SetOutputHigh>
}
 802a06c:	bd80      	pop	{r7, pc}
 802a06e:	bf00      	nop
 802a070:	48028100 	.word	0x48028100
 802a074:	48028000 	.word	0x48028000
 802a078:	48028300 	.word	0x48028300
 802a07c:	48028500 	.word	0x48028500

0802a080 <Init_Relax_Button>:
 *
 * @return : none
 *
 */
void Init_Relax_Button ()
{
 802a080:	b580      	push	{r7, lr}
 802a082:	af00      	add	r7, sp, #0
  /* INITIALIZE BUTTON1 ON PORT 5.13 FOR INPUT */
  /* Set mode to input tristate */
  XMC_GPIO_SetMode(P15_13, XMC_GPIO_MODE_INPUT_TRISTATE);
 802a084:	4809      	ldr	r0, [pc, #36]	; (802a0ac <Init_Relax_Button+0x2c>)
 802a086:	210d      	movs	r1, #13
 802a088:	2200      	movs	r2, #0
 802a08a:	f7fd ff4d 	bl	8027f28 <XMC_GPIO_SetMode>
  /* Enable digital input. Only needed because P15.13 is an analog port */
  XMC_GPIO_EnableDigitalInput(P15_13);
 802a08e:	4807      	ldr	r0, [pc, #28]	; (802a0ac <Init_Relax_Button+0x2c>)
 802a090:	210d      	movs	r1, #13
 802a092:	f7ff ff8b 	bl	8029fac <XMC_GPIO_EnableDigitalInput>

  /* INITIALIZE BUTTON2 ON PORT 5.12 FOR INPUT */
  /* Set mode to input tristate */
  XMC_GPIO_SetMode(P15_12, XMC_GPIO_MODE_INPUT_TRISTATE);
 802a096:	4805      	ldr	r0, [pc, #20]	; (802a0ac <Init_Relax_Button+0x2c>)
 802a098:	210c      	movs	r1, #12
 802a09a:	2200      	movs	r2, #0
 802a09c:	f7fd ff44 	bl	8027f28 <XMC_GPIO_SetMode>
  /* Enable digital input. Only needed because P15.12 is an analog port */
  XMC_GPIO_EnableDigitalInput(P15_12);
 802a0a0:	4802      	ldr	r0, [pc, #8]	; (802a0ac <Init_Relax_Button+0x2c>)
 802a0a2:	210c      	movs	r1, #12
 802a0a4:	f7ff ff82 	bl	8029fac <XMC_GPIO_EnableDigitalInput>
}
 802a0a8:	bd80      	pop	{r7, pc}
 802a0aa:	bf00      	nop
 802a0ac:	48028f00 	.word	0x48028f00

0802a0b0 <process_app>:
 *
 */


void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC)
{
 802a0b0:	b580      	push	{r7, lr}
 802a0b2:	b082      	sub	sp, #8
 802a0b4:	af00      	add	r7, sp, #0
 802a0b6:	6078      	str	r0, [r7, #4]
 802a0b8:	6039      	str	r1, [r7, #0]
  /* Check if INIT state is entered, after firmware update was started
   * If yes, trigger system on reset to start bootloader
   */
  if (FWUPDATE_GetDownloadFinished()==1)
 802a0ba:	f7ff fd19 	bl	8029af0 <FWUPDATE_GetDownloadFinished>
 802a0be:	4603      	mov	r3, r0
 802a0c0:	2b01      	cmp	r3, #1
 802a0c2:	d109      	bne.n	802a0d8 <process_app+0x28>
  {
    /* Restart in normal bootmode */
    /* Clear the reset cause field for proper reset detection of the ssw */
	XMC_SCU_RESET_ClearDeviceResetReason();
 802a0c4:	f7ff ff30 	bl	8029f28 <XMC_SCU_RESET_ClearDeviceResetReason>
    /* Set normal boot mode */
    XMC_SCU_SetBootMode(XMC_SCU_BOOTMODE_NORMAL);
 802a0c8:	2000      	movs	r0, #0
 802a0ca:	f7fc fd01 	bl	8026ad0 <XMC_SCU_SetBootMode>
    /* Trigger power on reset */
    PPB->AIRCR = 1 << PPB_AIRCR_SYSRESETREQ_Pos |0x5FA<<PPB_AIRCR_VECTKEY_Pos | 0x1 << PPB_AIRCR_PRIGROUP_Pos;
 802a0ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 802a0d2:	4a55      	ldr	r2, [pc, #340]	; (802a228 <process_app+0x178>)
 802a0d4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  }

  /* OUTPUT PROCESSING */
  /* Check bitfield set by master OUT_GEN_Bit1..8 and set LEDs accordingly */
  XMC_GPIO_SetOutputLevel(P_LED1, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit1));
 802a0d8:	687b      	ldr	r3, [r7, #4]
 802a0da:	7a9b      	ldrb	r3, [r3, #10]
 802a0dc:	f003 0301 	and.w	r3, r3, #1
 802a0e0:	b2db      	uxtb	r3, r3
 802a0e2:	2b00      	cmp	r3, #0
 802a0e4:	d101      	bne.n	802a0ea <process_app+0x3a>
 802a0e6:	2301      	movs	r3, #1
 802a0e8:	e001      	b.n	802a0ee <process_app+0x3e>
 802a0ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a0ee:	484f      	ldr	r0, [pc, #316]	; (802a22c <process_app+0x17c>)
 802a0f0:	210e      	movs	r1, #14
 802a0f2:	461a      	mov	r2, r3
 802a0f4:	f7ff ff24 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED2, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit2));
 802a0f8:	687b      	ldr	r3, [r7, #4]
 802a0fa:	7a9b      	ldrb	r3, [r3, #10]
 802a0fc:	f003 0302 	and.w	r3, r3, #2
 802a100:	b2db      	uxtb	r3, r3
 802a102:	2b00      	cmp	r3, #0
 802a104:	d101      	bne.n	802a10a <process_app+0x5a>
 802a106:	2301      	movs	r3, #1
 802a108:	e001      	b.n	802a10e <process_app+0x5e>
 802a10a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a10e:	4848      	ldr	r0, [pc, #288]	; (802a230 <process_app+0x180>)
 802a110:	210e      	movs	r1, #14
 802a112:	461a      	mov	r2, r3
 802a114:	f7ff ff14 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED3, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit3));
 802a118:	687b      	ldr	r3, [r7, #4]
 802a11a:	7a9b      	ldrb	r3, [r3, #10]
 802a11c:	f003 0304 	and.w	r3, r3, #4
 802a120:	b2db      	uxtb	r3, r3
 802a122:	2b00      	cmp	r3, #0
 802a124:	d101      	bne.n	802a12a <process_app+0x7a>
 802a126:	2301      	movs	r3, #1
 802a128:	e001      	b.n	802a12e <process_app+0x7e>
 802a12a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a12e:	4841      	ldr	r0, [pc, #260]	; (802a234 <process_app+0x184>)
 802a130:	210e      	movs	r1, #14
 802a132:	461a      	mov	r2, r3
 802a134:	f7ff ff04 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED4, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit4));
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	7a9b      	ldrb	r3, [r3, #10]
 802a13c:	f003 0308 	and.w	r3, r3, #8
 802a140:	b2db      	uxtb	r3, r3
 802a142:	2b00      	cmp	r3, #0
 802a144:	d101      	bne.n	802a14a <process_app+0x9a>
 802a146:	2301      	movs	r3, #1
 802a148:	e001      	b.n	802a14e <process_app+0x9e>
 802a14a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a14e:	4838      	ldr	r0, [pc, #224]	; (802a230 <process_app+0x180>)
 802a150:	210f      	movs	r1, #15
 802a152:	461a      	mov	r2, r3
 802a154:	f7ff fef4 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED5, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit5));
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	7a9b      	ldrb	r3, [r3, #10]
 802a15c:	f003 0310 	and.w	r3, r3, #16
 802a160:	b2db      	uxtb	r3, r3
 802a162:	2b00      	cmp	r3, #0
 802a164:	d101      	bne.n	802a16a <process_app+0xba>
 802a166:	2301      	movs	r3, #1
 802a168:	e001      	b.n	802a16e <process_app+0xbe>
 802a16a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a16e:	482f      	ldr	r0, [pc, #188]	; (802a22c <process_app+0x17c>)
 802a170:	2102      	movs	r1, #2
 802a172:	461a      	mov	r2, r3
 802a174:	f7ff fee4 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED6, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit6));
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	7a9b      	ldrb	r3, [r3, #10]
 802a17c:	f003 0320 	and.w	r3, r3, #32
 802a180:	b2db      	uxtb	r3, r3
 802a182:	2b00      	cmp	r3, #0
 802a184:	d101      	bne.n	802a18a <process_app+0xda>
 802a186:	2301      	movs	r3, #1
 802a188:	e001      	b.n	802a18e <process_app+0xde>
 802a18a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a18e:	4829      	ldr	r0, [pc, #164]	; (802a234 <process_app+0x184>)
 802a190:	210d      	movs	r1, #13
 802a192:	461a      	mov	r2, r3
 802a194:	f7ff fed4 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED7, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit7));
 802a198:	687b      	ldr	r3, [r7, #4]
 802a19a:	7a9b      	ldrb	r3, [r3, #10]
 802a19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a1a0:	b2db      	uxtb	r3, r3
 802a1a2:	2b00      	cmp	r3, #0
 802a1a4:	d101      	bne.n	802a1aa <process_app+0xfa>
 802a1a6:	2301      	movs	r3, #1
 802a1a8:	e001      	b.n	802a1ae <process_app+0xfe>
 802a1aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a1ae:	4822      	ldr	r0, [pc, #136]	; (802a238 <process_app+0x188>)
 802a1b0:	2103      	movs	r1, #3
 802a1b2:	461a      	mov	r2, r3
 802a1b4:	f7ff fec4 	bl	8029f40 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED8, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit8));
 802a1b8:	687b      	ldr	r3, [r7, #4]
 802a1ba:	7a9b      	ldrb	r3, [r3, #10]
 802a1bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a1c0:	b2db      	uxtb	r3, r3
 802a1c2:	2b00      	cmp	r3, #0
 802a1c4:	d101      	bne.n	802a1ca <process_app+0x11a>
 802a1c6:	2301      	movs	r3, #1
 802a1c8:	e001      	b.n	802a1ce <process_app+0x11e>
 802a1ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a1ce:	4819      	ldr	r0, [pc, #100]	; (802a234 <process_app+0x184>)
 802a1d0:	210b      	movs	r1, #11
 802a1d2:	461a      	mov	r2, r3
 802a1d4:	f7ff feb4 	bl	8029f40 <XMC_GPIO_SetOutputLevel>

  /* INPUT PROCESSING */
  /*Check Button 1 and set IN_GEN_Bit1 which is sent to master accordingly*/
  if (XMC_GPIO_GetInput(P15_13))
 802a1d8:	4818      	ldr	r0, [pc, #96]	; (802a23c <process_app+0x18c>)
 802a1da:	210d      	movs	r1, #13
 802a1dc:	f7ff fed2 	bl	8029f84 <XMC_GPIO_GetInput>
 802a1e0:	4603      	mov	r3, r0
 802a1e2:	2b00      	cmp	r3, #0
 802a1e4:	d005      	beq.n	802a1f2 <process_app+0x142>
    IN_GENERIC->IN_GEN_Bit1 = 1;
 802a1e6:	683a      	ldr	r2, [r7, #0]
 802a1e8:	7a93      	ldrb	r3, [r2, #10]
 802a1ea:	f043 0301 	orr.w	r3, r3, #1
 802a1ee:	7293      	strb	r3, [r2, #10]
 802a1f0:	e004      	b.n	802a1fc <process_app+0x14c>
  else
    IN_GENERIC->IN_GEN_Bit1 = 0;
 802a1f2:	683a      	ldr	r2, [r7, #0]
 802a1f4:	7a93      	ldrb	r3, [r2, #10]
 802a1f6:	f36f 0300 	bfc	r3, #0, #1
 802a1fa:	7293      	strb	r3, [r2, #10]

  /*Check Button 2 and set IN_GEN_Bit2 which is sent to master accordingly*/
  if (XMC_GPIO_GetInput(P15_12))
 802a1fc:	480f      	ldr	r0, [pc, #60]	; (802a23c <process_app+0x18c>)
 802a1fe:	210c      	movs	r1, #12
 802a200:	f7ff fec0 	bl	8029f84 <XMC_GPIO_GetInput>
 802a204:	4603      	mov	r3, r0
 802a206:	2b00      	cmp	r3, #0
 802a208:	d005      	beq.n	802a216 <process_app+0x166>
    IN_GENERIC->IN_GEN_Bit2 = 1;
 802a20a:	683a      	ldr	r2, [r7, #0]
 802a20c:	7a93      	ldrb	r3, [r2, #10]
 802a20e:	f043 0302 	orr.w	r3, r3, #2
 802a212:	7293      	strb	r3, [r2, #10]
 802a214:	e004      	b.n	802a220 <process_app+0x170>
  else
    IN_GENERIC->IN_GEN_Bit2 = 0;
 802a216:	683a      	ldr	r2, [r7, #0]
 802a218:	7a93      	ldrb	r3, [r2, #10]
 802a21a:	f36f 0341 	bfc	r3, #1, #1
 802a21e:	7293      	strb	r3, [r2, #10]
}
 802a220:	3708      	adds	r7, #8
 802a222:	46bd      	mov	sp, r7
 802a224:	bd80      	pop	{r7, pc}
 802a226:	bf00      	nop
 802a228:	05fa0104 	.word	0x05fa0104
 802a22c:	48028100 	.word	0x48028100
 802a230:	48028000 	.word	0x48028000
 802a234:	48028300 	.word	0x48028300
 802a238:	48028500 	.word	0x48028500
 802a23c:	48028f00 	.word	0x48028f00

0802a240 <main>:
 *
 * Initializes all the consumed Apps & Creates and process SSC stack
 *
 * */
int main(void)
{
 802a240:	b580      	push	{r7, lr}
 802a242:	af00      	add	r7, sp, #0
  /*Initialize DAVE */
  if(DAVE_Init() == DAVE_STATUS_FAILURE)
 802a244:	f7ff fbca 	bl	80299dc <DAVE_Init>
 802a248:	4603      	mov	r3, r0
 802a24a:	2b01      	cmp	r3, #1
 802a24c:	d100      	bne.n	802a250 <main+0x10>
    /* Placeholder for error handler code.*/
    XMC_DEBUG(("DAVE APPs initialization failed\n"));
    while(1U)
    {
      /* do nothing */
    }
 802a24e:	e7fe      	b.n	802a24e <main+0xe>
  }

  /* Initialize the ports which drive LEDs on EtherCat shield*/
  Init_ECAT_Adapt_LED ();
 802a250:	f7ff fec2 	bl	8029fd8 <Init_ECAT_Adapt_LED>
  /* Initialize buttons on XMC4800 */
  Init_Relax_Button();
 802a254:	f7ff ff14 	bl	802a080 <Init_Relax_Button>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  for( ;; )
  {
    MainLoop();
 802a258:	f7f6 fef0 	bl	802103c <MainLoop>
  }
 802a25c:	e7fc      	b.n	802a258 <main+0x18>
 802a25e:	bf00      	nop

0802a260 <ERU1_0_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC0 Interrupts and need to call the SSC Stack
 */
void SYNC0IRQHandler (void)
{
 802a260:	b580      	push	{r7, lr}
 802a262:	af00      	add	r7, sp, #0
	Sync0_Isr();
 802a264:	f7f6 fdf0 	bl	8020e48 <Sync0_Isr>
}
 802a268:	bd80      	pop	{r7, pc}
 802a26a:	bf00      	nop

0802a26c <ERU1_3_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC1 Interrupts and need to call the SSC Stack
 */
void SYNC1IRQHandler (void)
{
 802a26c:	b580      	push	{r7, lr}
 802a26e:	af00      	add	r7, sp, #0
	Sync1_Isr();
 802a270:	f7f6 fe98 	bl	8020fa4 <Sync1_Isr>
}
 802a274:	bd80      	pop	{r7, pc}
 802a276:	bf00      	nop

0802a278 <__errno>:
 802a278:	4b01      	ldr	r3, [pc, #4]	; (802a280 <__errno+0x8>)
 802a27a:	6818      	ldr	r0, [r3, #0]
 802a27c:	4770      	bx	lr
 802a27e:	bf00      	nop
 802a280:	1ffe9514 	.word	0x1ffe9514

0802a284 <__libc_init_array>:
 802a284:	b570      	push	{r4, r5, r6, lr}
 802a286:	4b0e      	ldr	r3, [pc, #56]	; (802a2c0 <__libc_init_array+0x3c>)
 802a288:	4c0e      	ldr	r4, [pc, #56]	; (802a2c4 <__libc_init_array+0x40>)
 802a28a:	1ae4      	subs	r4, r4, r3
 802a28c:	10a4      	asrs	r4, r4, #2
 802a28e:	2500      	movs	r5, #0
 802a290:	461e      	mov	r6, r3
 802a292:	42a5      	cmp	r5, r4
 802a294:	d004      	beq.n	802a2a0 <__libc_init_array+0x1c>
 802a296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a29a:	4798      	blx	r3
 802a29c:	3501      	adds	r5, #1
 802a29e:	e7f8      	b.n	802a292 <__libc_init_array+0xe>
 802a2a0:	f7fd fed8 	bl	8028054 <_init>
 802a2a4:	4c08      	ldr	r4, [pc, #32]	; (802a2c8 <__libc_init_array+0x44>)
 802a2a6:	4b09      	ldr	r3, [pc, #36]	; (802a2cc <__libc_init_array+0x48>)
 802a2a8:	1ae4      	subs	r4, r4, r3
 802a2aa:	10a4      	asrs	r4, r4, #2
 802a2ac:	2500      	movs	r5, #0
 802a2ae:	461e      	mov	r6, r3
 802a2b0:	42a5      	cmp	r5, r4
 802a2b2:	d004      	beq.n	802a2be <__libc_init_array+0x3a>
 802a2b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a2b8:	4798      	blx	r3
 802a2ba:	3501      	adds	r5, #1
 802a2bc:	e7f8      	b.n	802a2b0 <__libc_init_array+0x2c>
 802a2be:	bd70      	pop	{r4, r5, r6, pc}
 802a2c0:	1ffe9518 	.word	0x1ffe9518
 802a2c4:	1ffe9518 	.word	0x1ffe9518
 802a2c8:	1ffe9518 	.word	0x1ffe9518
 802a2cc:	1ffe9518 	.word	0x1ffe9518

0802a2d0 <malloc>:
 802a2d0:	4b02      	ldr	r3, [pc, #8]	; (802a2dc <malloc+0xc>)
 802a2d2:	4601      	mov	r1, r0
 802a2d4:	6818      	ldr	r0, [r3, #0]
 802a2d6:	f000 b863 	b.w	802a3a0 <_malloc_r>
 802a2da:	bf00      	nop
 802a2dc:	1ffe9514 	.word	0x1ffe9514

0802a2e0 <free>:
 802a2e0:	4b02      	ldr	r3, [pc, #8]	; (802a2ec <free+0xc>)
 802a2e2:	4601      	mov	r1, r0
 802a2e4:	6818      	ldr	r0, [r3, #0]
 802a2e6:	f000 b817 	b.w	802a318 <_free_r>
 802a2ea:	bf00      	nop
 802a2ec:	1ffe9514 	.word	0x1ffe9514

0802a2f0 <memcpy>:
 802a2f0:	b510      	push	{r4, lr}
 802a2f2:	1e43      	subs	r3, r0, #1
 802a2f4:	440a      	add	r2, r1
 802a2f6:	4291      	cmp	r1, r2
 802a2f8:	d004      	beq.n	802a304 <memcpy+0x14>
 802a2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a302:	e7f8      	b.n	802a2f6 <memcpy+0x6>
 802a304:	bd10      	pop	{r4, pc}

0802a306 <memset>:
 802a306:	4402      	add	r2, r0
 802a308:	4603      	mov	r3, r0
 802a30a:	4293      	cmp	r3, r2
 802a30c:	d002      	beq.n	802a314 <memset+0xe>
 802a30e:	f803 1b01 	strb.w	r1, [r3], #1
 802a312:	e7fa      	b.n	802a30a <memset+0x4>
 802a314:	4770      	bx	lr
	...

0802a318 <_free_r>:
 802a318:	b530      	push	{r4, r5, lr}
 802a31a:	2900      	cmp	r1, #0
 802a31c:	d03d      	beq.n	802a39a <_free_r+0x82>
 802a31e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802a322:	1f0b      	subs	r3, r1, #4
 802a324:	491d      	ldr	r1, [pc, #116]	; (802a39c <_free_r+0x84>)
 802a326:	2a00      	cmp	r2, #0
 802a328:	bfb8      	it	lt
 802a32a:	189b      	addlt	r3, r3, r2
 802a32c:	680a      	ldr	r2, [r1, #0]
 802a32e:	460c      	mov	r4, r1
 802a330:	b912      	cbnz	r2, 802a338 <_free_r+0x20>
 802a332:	605a      	str	r2, [r3, #4]
 802a334:	600b      	str	r3, [r1, #0]
 802a336:	bd30      	pop	{r4, r5, pc}
 802a338:	4293      	cmp	r3, r2
 802a33a:	d20d      	bcs.n	802a358 <_free_r+0x40>
 802a33c:	6819      	ldr	r1, [r3, #0]
 802a33e:	1858      	adds	r0, r3, r1
 802a340:	4290      	cmp	r0, r2
 802a342:	bf01      	itttt	eq
 802a344:	585a      	ldreq	r2, [r3, r1]
 802a346:	1852      	addeq	r2, r2, r1
 802a348:	601a      	streq	r2, [r3, #0]
 802a34a:	6842      	ldreq	r2, [r0, #4]
 802a34c:	605a      	str	r2, [r3, #4]
 802a34e:	6023      	str	r3, [r4, #0]
 802a350:	bd30      	pop	{r4, r5, pc}
 802a352:	4299      	cmp	r1, r3
 802a354:	d803      	bhi.n	802a35e <_free_r+0x46>
 802a356:	460a      	mov	r2, r1
 802a358:	6851      	ldr	r1, [r2, #4]
 802a35a:	2900      	cmp	r1, #0
 802a35c:	d1f9      	bne.n	802a352 <_free_r+0x3a>
 802a35e:	6814      	ldr	r4, [r2, #0]
 802a360:	1915      	adds	r5, r2, r4
 802a362:	429d      	cmp	r5, r3
 802a364:	d10a      	bne.n	802a37c <_free_r+0x64>
 802a366:	681b      	ldr	r3, [r3, #0]
 802a368:	4423      	add	r3, r4
 802a36a:	18d0      	adds	r0, r2, r3
 802a36c:	4288      	cmp	r0, r1
 802a36e:	6013      	str	r3, [r2, #0]
 802a370:	d113      	bne.n	802a39a <_free_r+0x82>
 802a372:	6808      	ldr	r0, [r1, #0]
 802a374:	4403      	add	r3, r0
 802a376:	6013      	str	r3, [r2, #0]
 802a378:	684b      	ldr	r3, [r1, #4]
 802a37a:	e00d      	b.n	802a398 <_free_r+0x80>
 802a37c:	d902      	bls.n	802a384 <_free_r+0x6c>
 802a37e:	230c      	movs	r3, #12
 802a380:	6003      	str	r3, [r0, #0]
 802a382:	bd30      	pop	{r4, r5, pc}
 802a384:	681c      	ldr	r4, [r3, #0]
 802a386:	1918      	adds	r0, r3, r4
 802a388:	4288      	cmp	r0, r1
 802a38a:	bf04      	itt	eq
 802a38c:	6808      	ldreq	r0, [r1, #0]
 802a38e:	6849      	ldreq	r1, [r1, #4]
 802a390:	6059      	str	r1, [r3, #4]
 802a392:	bf04      	itt	eq
 802a394:	1900      	addeq	r0, r0, r4
 802a396:	6018      	streq	r0, [r3, #0]
 802a398:	6053      	str	r3, [r2, #4]
 802a39a:	bd30      	pop	{r4, r5, pc}
 802a39c:	1ffea754 	.word	0x1ffea754

0802a3a0 <_malloc_r>:
 802a3a0:	b570      	push	{r4, r5, r6, lr}
 802a3a2:	1ccc      	adds	r4, r1, #3
 802a3a4:	f024 0403 	bic.w	r4, r4, #3
 802a3a8:	3408      	adds	r4, #8
 802a3aa:	2c0c      	cmp	r4, #12
 802a3ac:	bf38      	it	cc
 802a3ae:	240c      	movcc	r4, #12
 802a3b0:	2c00      	cmp	r4, #0
 802a3b2:	4606      	mov	r6, r0
 802a3b4:	da03      	bge.n	802a3be <_malloc_r+0x1e>
 802a3b6:	230c      	movs	r3, #12
 802a3b8:	6033      	str	r3, [r6, #0]
 802a3ba:	2000      	movs	r0, #0
 802a3bc:	bd70      	pop	{r4, r5, r6, pc}
 802a3be:	428c      	cmp	r4, r1
 802a3c0:	d3f9      	bcc.n	802a3b6 <_malloc_r+0x16>
 802a3c2:	4a20      	ldr	r2, [pc, #128]	; (802a444 <_malloc_r+0xa4>)
 802a3c4:	6813      	ldr	r3, [r2, #0]
 802a3c6:	4610      	mov	r0, r2
 802a3c8:	4619      	mov	r1, r3
 802a3ca:	b1a1      	cbz	r1, 802a3f6 <_malloc_r+0x56>
 802a3cc:	680a      	ldr	r2, [r1, #0]
 802a3ce:	1b12      	subs	r2, r2, r4
 802a3d0:	d40e      	bmi.n	802a3f0 <_malloc_r+0x50>
 802a3d2:	2a0b      	cmp	r2, #11
 802a3d4:	d903      	bls.n	802a3de <_malloc_r+0x3e>
 802a3d6:	600a      	str	r2, [r1, #0]
 802a3d8:	188b      	adds	r3, r1, r2
 802a3da:	508c      	str	r4, [r1, r2]
 802a3dc:	e01f      	b.n	802a41e <_malloc_r+0x7e>
 802a3de:	428b      	cmp	r3, r1
 802a3e0:	bf0d      	iteet	eq
 802a3e2:	685a      	ldreq	r2, [r3, #4]
 802a3e4:	684a      	ldrne	r2, [r1, #4]
 802a3e6:	605a      	strne	r2, [r3, #4]
 802a3e8:	6002      	streq	r2, [r0, #0]
 802a3ea:	bf18      	it	ne
 802a3ec:	460b      	movne	r3, r1
 802a3ee:	e016      	b.n	802a41e <_malloc_r+0x7e>
 802a3f0:	460b      	mov	r3, r1
 802a3f2:	6849      	ldr	r1, [r1, #4]
 802a3f4:	e7e9      	b.n	802a3ca <_malloc_r+0x2a>
 802a3f6:	4d14      	ldr	r5, [pc, #80]	; (802a448 <_malloc_r+0xa8>)
 802a3f8:	682b      	ldr	r3, [r5, #0]
 802a3fa:	b91b      	cbnz	r3, 802a404 <_malloc_r+0x64>
 802a3fc:	4630      	mov	r0, r6
 802a3fe:	f000 f825 	bl	802a44c <_sbrk_r>
 802a402:	6028      	str	r0, [r5, #0]
 802a404:	4630      	mov	r0, r6
 802a406:	4621      	mov	r1, r4
 802a408:	f000 f820 	bl	802a44c <_sbrk_r>
 802a40c:	1c42      	adds	r2, r0, #1
 802a40e:	4603      	mov	r3, r0
 802a410:	d0d1      	beq.n	802a3b6 <_malloc_r+0x16>
 802a412:	1cc5      	adds	r5, r0, #3
 802a414:	f025 0503 	bic.w	r5, r5, #3
 802a418:	4285      	cmp	r5, r0
 802a41a:	d10a      	bne.n	802a432 <_malloc_r+0x92>
 802a41c:	601c      	str	r4, [r3, #0]
 802a41e:	f103 000b 	add.w	r0, r3, #11
 802a422:	1d1a      	adds	r2, r3, #4
 802a424:	f020 0007 	bic.w	r0, r0, #7
 802a428:	1a82      	subs	r2, r0, r2
 802a42a:	d00a      	beq.n	802a442 <_malloc_r+0xa2>
 802a42c:	4251      	negs	r1, r2
 802a42e:	5099      	str	r1, [r3, r2]
 802a430:	bd70      	pop	{r4, r5, r6, pc}
 802a432:	4630      	mov	r0, r6
 802a434:	1ae9      	subs	r1, r5, r3
 802a436:	f000 f809 	bl	802a44c <_sbrk_r>
 802a43a:	3001      	adds	r0, #1
 802a43c:	d0bb      	beq.n	802a3b6 <_malloc_r+0x16>
 802a43e:	462b      	mov	r3, r5
 802a440:	e7ec      	b.n	802a41c <_malloc_r+0x7c>
 802a442:	bd70      	pop	{r4, r5, r6, pc}
 802a444:	1ffea754 	.word	0x1ffea754
 802a448:	1ffea750 	.word	0x1ffea750

0802a44c <_sbrk_r>:
 802a44c:	b538      	push	{r3, r4, r5, lr}
 802a44e:	4c06      	ldr	r4, [pc, #24]	; (802a468 <_sbrk_r+0x1c>)
 802a450:	2300      	movs	r3, #0
 802a452:	4605      	mov	r5, r0
 802a454:	4608      	mov	r0, r1
 802a456:	6023      	str	r3, [r4, #0]
 802a458:	f7fd fdc8 	bl	8027fec <_sbrk>
 802a45c:	1c43      	adds	r3, r0, #1
 802a45e:	d102      	bne.n	802a466 <_sbrk_r+0x1a>
 802a460:	6823      	ldr	r3, [r4, #0]
 802a462:	b103      	cbz	r3, 802a466 <_sbrk_r+0x1a>
 802a464:	602b      	str	r3, [r5, #0]
 802a466:	bd38      	pop	{r3, r4, r5, pc}
 802a468:	1ffead78 	.word	0x1ffead78

0802a46c <strlen>:
 802a46c:	4603      	mov	r3, r0
 802a46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a472:	2a00      	cmp	r2, #0
 802a474:	d1fb      	bne.n	802a46e <strlen+0x2>
 802a476:	1a18      	subs	r0, r3, r0
 802a478:	3801      	subs	r0, #1
 802a47a:	4770      	bx	lr

0802a47c <asEntryDesc0x1600>:
 802a47c:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802a48c:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802a49c:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802a4ac:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802a4bc:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802a4cc <aName0x1600>:
 802a4cc:	554f 5f54 4547 454e 4952 2043 7270 636f     OUT_GENERIC proc
 802a4dc:	7365 2073 6164 6174 6d20 7061 6970 676e     ess data mapping
 802a4ec:	5300 6275 6e49 6564 2078 3030 0031 7553     .SubIndex 001.Su
 802a4fc:	4962 646e 7865 3020 3230 5300 6275 6e49     bIndex 002.SubIn
 802a50c:	6564 2078 3030 0033 7553 4962 646e 7865     dex 003.SubIndex
 802a51c:	3020 3430 5300 6275 6e49 6564 2078 3030      004.SubIndex 00
 802a52c:	0035 7553 4962 646e 7865 3020 3630 5300     5.SubIndex 006.S
 802a53c:	6275 6e49 6564 2078 3030 0037 7553 4962     ubIndex 007.SubI
 802a54c:	646e 7865 3020 3830 5300 6275 6e49 6564     ndex 008.SubInde
 802a55c:	2078 3030 0039 7553 4962 646e 7865 3020     x 009.SubIndex 0
 802a56c:	3031 5300 6275 6e49 6564 2078 3130 0031     10.SubIndex 011.
 802a57c:	7553 4962 646e 7865 3020 3231 ff00 0000     SubIndex 012....

0802a58c <asEntryDesc0x1A00>:
 802a58c:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802a59c:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802a5ac:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802a5bc:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802a5cc:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802a5dc <aName0x1A00>:
 802a5dc:	4e49 475f 4e45 5245 4349 7020 6f72 6563     IN_GENERIC proce
 802a5ec:	7373 6420 7461 2061 616d 7070 6e69 0067     ss data mapping.
 802a5fc:	7553 4962 646e 7865 3020 3130 5300 6275     SubIndex 001.Sub
 802a60c:	6e49 6564 2078 3030 0032 7553 4962 646e     Index 002.SubInd
 802a61c:	7865 3020 3330 5300 6275 6e49 6564 2078     ex 003.SubIndex 
 802a62c:	3030 0034 7553 4962 646e 7865 3020 3530     004.SubIndex 005
 802a63c:	5300 6275 6e49 6564 2078 3030 0036 7553     .SubIndex 006.Su
 802a64c:	4962 646e 7865 3020 3730 5300 6275 6e49     bIndex 007.SubIn
 802a65c:	6564 2078 3030 0038 7553 4962 646e 7865     dex 008.SubIndex
 802a66c:	3020 3930 5300 6275 6e49 6564 2078 3130      009.SubIndex 01
 802a67c:	0030 7553 4962 646e 7865 3020 3131 5300     0.SubIndex 011.S
 802a68c:	6275 6e49 6564 2078 3130 0032 00ff 0000     ubIndex 012.....

0802a69c <asEntryDesc0x1C12>:
 802a69c:	0005 0008 0007 0006 0010 0007               ............

0802a6a8 <aName0x1C12>:
 802a6a8:	7953 636e 614d 616e 6567 2072 2032 7361     SyncManager 2 as
 802a6b8:	6973 6e67 656d 746e ff00 0000               signment....

0802a6c4 <asEntryDesc0x1C13>:
 802a6c4:	0005 0008 0007 0006 0010 0007               ............

0802a6d0 <aName0x1C13>:
 802a6d0:	7953 636e 614d 616e 6567 2072 2033 7361     SyncManager 3 as
 802a6e0:	6973 6e67 656d 746e ff00 0000               signment....

0802a6ec <asEntryDesc0x6000>:
 802a6ec:	0005 0008 0007 0006 0010 0007 0006 0010     ................
 802a6fc:	0007 0006 0010 0007 0006 0010 0007 0001     ................
 802a70c:	0001 0007 0001 0001 0007 0001 0001 0007     ................
 802a71c:	0001 0001 0007 0001 0001 0007 0001 0001     ................
 802a72c:	0007 0001 0001 0007 0001 0001 0007 0000     ................

0802a73c <aName0x6000>:
 802a73c:	4e49 475f 4e45 5245 4349 4900 5f4e 4547     IN_GENERIC.IN_GE
 802a74c:	5f4e 4e49 3154 4900 5f4e 4547 5f4e 4e49     N_INT1.IN_GEN_IN
 802a75c:	3254 4900 5f4e 4547 5f4e 4e49 3354 4900     T2.IN_GEN_INT3.I
 802a76c:	5f4e 4547 5f4e 4e49 3454 4900 5f4e 4547     N_GEN_INT4.IN_GE
 802a77c:	5f4e 6942 3174 4900 5f4e 4547 5f4e 6942     N_Bit1.IN_GEN_Bi
 802a78c:	3274 4900 5f4e 4547 5f4e 6942 3374 4900     t2.IN_GEN_Bit3.I
 802a79c:	5f4e 4547 5f4e 6942 3474 4900 5f4e 4547     N_GEN_Bit4.IN_GE
 802a7ac:	5f4e 6942 3574 4900 5f4e 4547 5f4e 6942     N_Bit5.IN_GEN_Bi
 802a7bc:	3674 4900 5f4e 4547 5f4e 6942 3774 4900     t6.IN_GEN_Bit7.I
 802a7cc:	5f4e 4547 5f4e 6942 3874 ff00 0000 0000     N_GEN_Bit8......

0802a7dc <asEntryDesc0x7000>:
 802a7dc:	0005 0008 0007 0006 0010 003f 0006 0010     ..........?.....
 802a7ec:	003f 0006 0010 003f 0006 0010 003f 0001     ?.....?.....?...
 802a7fc:	0001 003f 0001 0001 003f 0001 0001 003f     ..?.....?.....?.
 802a80c:	0001 0001 003f 0001 0001 003f 0001 0001     ....?.....?.....
 802a81c:	003f 0001 0001 003f 0001 0001 003f 0000     ?.....?.....?...

0802a82c <aName0x7000>:
 802a82c:	554f 5f54 4547 454e 4952 0043 554f 5f54     OUT_GENERIC.OUT_
 802a83c:	4547 5f4e 4e49 3154 4f00 5455 475f 4e45     GEN_INT1.OUT_GEN
 802a84c:	495f 544e 0032 554f 5f54 4547 5f4e 4e49     _INT2.OUT_GEN_IN
 802a85c:	3354 4f00 5455 475f 4e45 495f 544e 0034     T3.OUT_GEN_INT4.
 802a86c:	554f 5f54 4547 5f4e 6942 3174 4f00 5455     OUT_GEN_Bit1.OUT
 802a87c:	475f 4e45 425f 7469 0032 554f 5f54 4547     _GEN_Bit2.OUT_GE
 802a88c:	5f4e 6942 3374 4f00 5455 475f 4e45 425f     N_Bit3.OUT_GEN_B
 802a89c:	7469 0034 554f 5f54 4547 5f4e 6942 3574     it4.OUT_GEN_Bit5
 802a8ac:	4f00 5455 475f 4e45 425f 7469 0036 554f     .OUT_GEN_Bit6.OU
 802a8bc:	5f54 4547 5f4e 6942 3774 4f00 5455 475f     T_GEN_Bit7.OUT_G
 802a8cc:	4e45 425f 7469 0038 00ff 0000               EN_Bit8.....

0802a8d8 <sEntryDesc0x1000>:
 802a8d8:	0007 0020 0007 0000                         .. .....

0802a8e0 <aName0x1000>:
 802a8e0:	6544 6976 6563 7420 7079 0065               Device type.

0802a8ec <sEntryDesc0x1001>:
 802a8ec:	0005 0008 0007 0000                         ........

0802a8f4 <aName0x1001>:
 802a8f4:	7245 6f72 2072 6572 6967 7473 7265 0000     Error register..

0802a904 <sEntryDesc0x1008>:
 802a904:	0009 0038 0007 0000                         ..8.....

0802a90c <aName0x1008>:
 802a90c:	6544 6976 6563 6e20 6d61 0065               Device name.

0802a918 <sEntryDesc0x1009>:
 802a918:	0009 0018 0007 0000                         ........

0802a920 <aName0x1009>:
 802a920:	6148 6472 6177 6572 7620 7265 6973 6e6f     Hardware version
 802a930:	0000 0000                                   ....

0802a934 <sEntryDesc0x100A>:
 802a934:	0009 0020 0007 0000                         .. .....

0802a93c <aName0x100A>:
 802a93c:	6f53 7466 6177 6572 7620 7265 6973 6e6f     Software version
 802a94c:	0000 0000                                   ....

0802a950 <asEntryDesc0x1018>:
 802a950:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802a960:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802a970 <aName0x1018>:
 802a970:	6449 6e65 6974 7974 5600 6e65 6f64 2072     Identity.Vendor 
 802a980:	4449 5000 6f72 7564 7463 6320 646f 0065     ID.Product code.
 802a990:	6552 6976 6973 6e6f 5300 7265 6169 206c     Revision.Serial 
 802a9a0:	756e 626d 7265 ff00 0000 0000               number......

0802a9ac <asEntryDesc0x10F1>:
 802a9ac:	0005 0008 0007 0007 0020 003f 0006 0010     ........ .?.....
 802a9bc:	003f 0000                                   ?...

0802a9c0 <aName0x10F1>:
 802a9c0:	7245 6f72 2072 6553 7474 6e69 7367 4c00     Error Settings.L
 802a9d0:	636f 6c61 4520 7272 726f 5220 6165 7463     ocal Error React
 802a9e0:	6f69 006e 7953 636e 4520 7272 726f 4320     ion.Sync Error C
 802a9f0:	756f 746e 7265 4c20 6d69 7469 ff00 0000     ounter Limit....

0802aa00 <asEntryDesc0x1C00>:
 802aa00:	0005 0008 0007 0005 0008 0007               ............

0802aa0c <aName0x1C00>:
 802aa0c:	7953 636e 6d20 6e61 6761 7265 7420 7079     Sync manager typ
 802aa1c:	0065 0000                                   e...

0802aa20 <asEntryDesc0x1C3x>:
 802aa20:	0005 0008 0007 0006 0010 000f 0007 0020     .............. .
 802aa30:	0007 0000 0020 0000 0006 0010 0007 0007     .... ...........
 802aa40:	0020 0007 0007 0020 0007 0000 0020 0000      ..... ..... ...
 802aa50:	0006 0010 003f 0007 0020 0007 0007 0020     ....?... ..... .
 802aa60:	003f 0006 0010 0007 0006 0010 0007 0000     ?...............
 802aa70:	0010 0000 0000 0010 0000 0000 0020 0000     ............ ...
 802aa80:	0000 0020 0000 0000 0020 0000 0000 0020     .. ..... ..... .
	...
 802aae0:	0001 0001 0007 0000                         ........

0802aae8 <aName0x1C32>:
 802aae8:	4d53 6f20 7475 7570 2074 6170 6172 656d     SM output parame
 802aaf8:	6574 0072 7953 636e 7268 6e6f 7a69 7461     ter.Synchronizat
 802ab08:	6f69 206e 7954 6570 4300 6379 656c 5420     ion Type.Cycle T
 802ab18:	6d69 0065 5300 6e79 6863 6f72 696e 617a     ime..Synchroniza
 802ab28:	6974 6e6f 5420 7079 7365 7320 7075 6f70     tion Types suppo
 802ab38:	7472 6465 4d00 6e69 6d69 6d75 4320 6379     rted.Minimum Cyc
 802ab48:	656c 5420 6d69 0065 6143 636c 6120 646e     le Time.Calc and
 802ab58:	4320 706f 2079 6954 656d 0000 6547 2074      Copy Time..Get 
 802ab68:	7943 6c63 2065 6954 656d 4400 6c65 7961     Cycle Time.Delay
 802ab78:	5420 6d69 0065 7953 636e 2030 7943 6c63      Time.Sync0 Cycl
 802ab88:	2065 6954 656d 5300 2d4d 7645 6e65 2074     e Time.SM-Event 
 802ab98:	694d 7373 6465 4300 6379 656c 5420 6d69     Missed.Cycle Tim
 802aba8:	2065 6f54 206f 6d53 6c61 006c 6853 6669     e Too Small.Shif
 802abb8:	2074 6954 656d 5420 6f6f 5320 6f68 7472     t Time Too Short
	...
 802abd8:	0000 5300 6e79 2063 7245 6f72 0072 00ff     ...Sync Error...

0802abe8 <aName0x1C33>:
 802abe8:	4d53 6920 706e 7475 7020 7261 6d61 7465     SM input paramet
 802abf8:	7265 5300 6e79 6863 6f72 696e 617a 6974     er.Synchronizati
 802ac08:	6e6f 5420 7079 0065 7943 6c63 2065 6954     on Type.Cycle Ti
 802ac18:	656d 0000 7953 636e 7268 6e6f 7a69 7461     me..Synchronizat
 802ac28:	6f69 206e 7954 6570 2073 7573 7070 726f     ion Types suppor
 802ac38:	6574 0064 694d 696e 756d 206d 7943 6c63     ted.Minimum Cycl
 802ac48:	2065 6954 656d 4300 6c61 2063 6e61 2064     e Time.Calc and 
 802ac58:	6f43 7970 5420 6d69 0065 4700 7465 4320     Copy Time..Get C
 802ac68:	6379 656c 5420 6d69 0065 6544 616c 2079     ycle Time.Delay 
 802ac78:	6954 656d 5300 6e79 3063 4320 6379 656c     Time.Sync0 Cycle
 802ac88:	5420 6d69 0065 4d53 452d 6576 746e 4d20      Time.SM-Event M
 802ac98:	7369 6573 0064 7943 6c63 2065 6954 656d     issed.Cycle Time
 802aca8:	5420 6f6f 5320 616d 6c6c 5300 6968 7466      Too Small.Shift
 802acb8:	5420 6d69 2065 6f54 206f 6853 726f 0074      Time Too Short.
	...
 802acd8:	0000 7953 636e 4520 7272 726f ff00 0000     ..Sync Error....

0802ace8 <cBitMask>:
 802ace8:	0000 0001 0003 0007 000f 001f 003f 007f     ............?...
 802acf8:	00ff 01ff 03ff 07ff 0fff 1fff 3fff 7fff     .............?..

0802ad08 <cAbortCode>:
 802ad08:	0000 0000 0000 0503 0000 0504 0001 0504     ................
 802ad18:	0005 0504 0000 0601 0001 0601 0002 0601     ................
 802ad28:	0000 0602 0041 0604 0042 0604 0043 0604     ....A...B...C...
 802ad38:	0047 0604 0000 0606 0010 0607 0012 0607     G...............
 802ad48:	0013 0607 0011 0609 0030 0609 0031 0609     ........0...1...
 802ad58:	0032 0609 0033 0609 0036 0609 0000 0800     2...3...6.......
 802ad68:	0020 0800 0021 0800 0022 0800 0023 0800      ...!..."...#...
 802ad78:	0003 0601 0004 0601                         ........

0802ad80 <PWM_CCU8_0_timer_handle>:
	...
 802ad88:	0014 0000 000d 0000                         ........

0802ad90 <PWM_CCU8_0_event0_config>:
 802ad90:	0000 0001                                   ....

0802ad94 <PWM_CCU8_0_event1_config>:
 802ad94:	0000 0001                                   ....

0802ad98 <PWM_CCU8_0_event2_config>:
 802ad98:	0000 0001                                   ....

0802ad9c <PWM_CCU8_0_dt_config>:
	...

0802ada8 <PWM_CCU8_0_ch1_out1_config>:
 802ada8:	0098 0000 0000 0001 0004 0000               ............

0802adb4 <PWM_CCU8_0_config_handle>:
 802adb4:	0001 2254 112a 1126 0000 0000 0000 0000     ..T"*.&.........
	...
 802add0:	ad90 0802 ad94 0802 ad98 0802 0000 0000     ................
	...
 802adec:	0001 0000 0000 0400 ad9c 0802 0001 0000     ................
 802adfc:	ad80 0802 0000 0000 0000 0000 0000 0000     ................
 802ae0c:	0000 0000 0001 0000 8500 4802 0008 0000     ...........H....
 802ae1c:	ada8 0802 0000 0000 0000 0000 0000 0000     ................
	...
 802ae40:	940c 1ffe                                   ....

0802ae44 <INTERRUPT_0>:
 802ae44:	1e39 0100                                   9...

0802ae48 <INT_SYNC1>:
 802ae48:	1e08 0100                                   ....

0802ae4c <INT_SYNC0>:
 802ae4c:	1e05 0100                                   ....

0802ae50 <e_eeprom_xmc4_fce>:
 802ae50:	0020 5002 0700 0000 0000 0000                ..P........

0802ae5c <EG_SYNC1_OGU_Config>:
 802ae5c:	0010 0000                                   ....

0802ae60 <EG_SYNC0_OGU_Config>:
 802ae60:	0010 0000                                   ....

0802ae64 <ED_SYNC1_ETL_Config>:
 802ae64:	0003 0000 0035 0000                         ....5...

0802ae6c <ED_SYNC0_ETL_Config>:
 802ae6c:	000c 0000 0105 0000                         ........

0802ae74 <ECAT_SSC_0>:
 802ae74:	a528 1ffe 93b0 1ffe ae44 0802 0230 0101     (.......D...0...
 802ae84:	0000 0001 0000 0000 0000 0001 0102 0101     ................
 802ae94:	0043                                        C.
