   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc4800_slave.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm MBX,384,4
  20              	 .comm MBXcontrol,3,4
  21              	 .comm ESCvar,212,4
  22              	 .comm Rb,2,4
  23              	 .comm Wb,3,4
  24              	 .comm Cb,0,4
  25              	 .comm Mb,0,4
  26              	 .section .bss.watchdog,"aw",%nobits
  27              	 .align 2
  30              	watchdog:
  31 0000 00000000 	 .space 4
  32              	 .section .text.ESC_pre_objecthandler,"ax",%progbits
  33              	 .align 2
  34              	 .global ESC_pre_objecthandler
  35              	 .thumb
  36              	 .thumb_func
  38              	ESC_pre_objecthandler:
  39              	.LFB0:
  40              	 .file 1 "../xmc4800_slave.c"
   1:../xmc4800_slave.c **** #ifndef SOES_V1
   2:../xmc4800_slave.c **** #include <stddef.h>
   3:../xmc4800_slave.c **** #include "utypes.h"
   4:../xmc4800_slave.c **** #include "esc.h"
   5:../xmc4800_slave.c **** #include "esc_coe.h"
   6:../xmc4800_slave.c **** #include "esc_foe.h"
   7:../xmc4800_slave.c **** #include "config.h"
   8:../xmc4800_slave.c **** #include "xmc4800_slave.h"
   9:../xmc4800_slave.c **** 
  10:../xmc4800_slave.c **** /* Global variables used by the stack */
  11:../xmc4800_slave.c **** uint8_t     MBX[MBXBUFFERS * MAX(MBXSIZE,MBXSIZEBOOT)];
  12:../xmc4800_slave.c **** _MBXcontrol MBXcontrol[MBXBUFFERS];
  13:../xmc4800_slave.c **** _ESCvar     ESCvar;
  14:../xmc4800_slave.c **** 
  15:../xmc4800_slave.c **** /* Application variables */
  16:../xmc4800_slave.c **** _Rbuffer    Rb;
  17:../xmc4800_slave.c **** _Wbuffer    Wb;
  18:../xmc4800_slave.c **** _Cbuffer    Cb;
  19:../xmc4800_slave.c **** _Mbuffer    Mb;
  20:../xmc4800_slave.c **** 
  21:../xmc4800_slave.c **** /* Private variables */
  22:../xmc4800_slave.c **** static volatile int watchdog;
  23:../xmc4800_slave.c **** 
  24:../xmc4800_slave.c **** /** Mandatory: Function to pre-qualify the incoming SDO download.
  25:../xmc4800_slave.c ****  *
  26:../xmc4800_slave.c ****  * @param[in] index      = index of SDO download request to check
  27:../xmc4800_slave.c ****  * @param[in] sub-index  = sub-index of SDO download request to check
  28:../xmc4800_slave.c ****  * @return 1 if the SDO Download is correct. 0 If not correct.
  29:../xmc4800_slave.c ****  */
  30:../xmc4800_slave.c **** int ESC_pre_objecthandler (uint16_t index, uint8_t subindex)
  31:../xmc4800_slave.c **** {
  41              	 .loc 1 31 0
  42              	 .cfi_startproc
  43              	 
  44              	 
  45 0000 80B5     	 push {r7,lr}
  46              	.LCFI0:
  47              	 .cfi_def_cfa_offset 8
  48              	 .cfi_offset 7,-8
  49              	 .cfi_offset 14,-4
  50 0002 84B0     	 sub sp,sp,#16
  51              	.LCFI1:
  52              	 .cfi_def_cfa_offset 24
  53 0004 00AF     	 add r7,sp,#0
  54              	.LCFI2:
  55              	 .cfi_def_cfa_register 7
  56 0006 0346     	 mov r3,r0
  57 0008 0A46     	 mov r2,r1
  58 000a FB80     	 strh r3,[r7,#6]
  59 000c 1346     	 mov r3,r2
  60 000e 7B71     	 strb r3,[r7,#5]
  32:../xmc4800_slave.c ****    int result = 1;
  61              	 .loc 1 32 0
  62 0010 0123     	 movs r3,#1
  63 0012 FB60     	 str r3,[r7,#12]
  33:../xmc4800_slave.c **** 
  34:../xmc4800_slave.c ****    if(ESCvar.pre_object_download_hook)
  64              	 .loc 1 34 0
  65 0014 084B     	 ldr r3,.L4
  66 0016 1B6D     	 ldr r3,[r3,#80]
  67 0018 002B     	 cmp r3,#0
  68 001a 07D0     	 beq .L2
  35:../xmc4800_slave.c ****    {
  36:../xmc4800_slave.c ****       result = (ESCvar.pre_object_download_hook)(index, subindex);
  69              	 .loc 1 36 0
  70 001c 064B     	 ldr r3,.L4
  71 001e 1B6D     	 ldr r3,[r3,#80]
  72 0020 F988     	 ldrh r1,[r7,#6]
  73 0022 7A79     	 ldrb r2,[r7,#5]
  74 0024 0846     	 mov r0,r1
  75 0026 1146     	 mov r1,r2
  76 0028 9847     	 blx r3
  77 002a F860     	 str r0,[r7,#12]
  78              	.L2:
  37:../xmc4800_slave.c ****    }
  38:../xmc4800_slave.c **** 
  39:../xmc4800_slave.c ****    return result;
  79              	 .loc 1 39 0
  80 002c FB68     	 ldr r3,[r7,#12]
  40:../xmc4800_slave.c **** }
  81              	 .loc 1 40 0
  82 002e 1846     	 mov r0,r3
  83 0030 1037     	 adds r7,r7,#16
  84              	.LCFI3:
  85              	 .cfi_def_cfa_offset 8
  86 0032 BD46     	 mov sp,r7
  87              	.LCFI4:
  88              	 .cfi_def_cfa_register 13
  89              	 
  90 0034 80BD     	 pop {r7,pc}
  91              	.L5:
  92 0036 00BF     	 .align 2
  93              	.L4:
  94 0038 00000000 	 .word ESCvar
  95              	 .cfi_endproc
  96              	.LFE0:
  98              	 .section .text.ESC_objecthandler,"ax",%progbits
  99              	 .align 2
 100              	 .global ESC_objecthandler
 101              	 .thumb
 102              	 .thumb_func
 104              	ESC_objecthandler:
 105              	.LFB1:
  41:../xmc4800_slave.c **** 
  42:../xmc4800_slave.c **** /** Mandatory: Hook called from the slave stack SDO Download handler to act on
  43:../xmc4800_slave.c ****  * user specified Index and Sub-index.
  44:../xmc4800_slave.c ****  *
  45:../xmc4800_slave.c ****  * @param[in] index      = index of SDO download request to handle
  46:../xmc4800_slave.c ****  * @param[in] sub-index  = sub-index of SDO download request to handle
  47:../xmc4800_slave.c ****  */
  48:../xmc4800_slave.c **** void ESC_objecthandler (uint16_t index, uint8_t subindex)
  49:../xmc4800_slave.c **** {
 106              	 .loc 1 49 0
 107              	 .cfi_startproc
 108              	 
 109              	 
 110 0000 80B5     	 push {r7,lr}
 111              	.LCFI5:
 112              	 .cfi_def_cfa_offset 8
 113              	 .cfi_offset 7,-8
 114              	 .cfi_offset 14,-4
 115 0002 82B0     	 sub sp,sp,#8
 116              	.LCFI6:
 117              	 .cfi_def_cfa_offset 16
 118 0004 00AF     	 add r7,sp,#0
 119              	.LCFI7:
 120              	 .cfi_def_cfa_register 7
 121 0006 0346     	 mov r3,r0
 122 0008 0A46     	 mov r2,r1
 123 000a FB80     	 strh r3,[r7,#6]
 124 000c 1346     	 mov r3,r2
 125 000e 7B71     	 strb r3,[r7,#5]
  50:../xmc4800_slave.c ****    switch (index)
  51:../xmc4800_slave.c ****    {
  52:../xmc4800_slave.c ****    /* Handle post-write of parameter values */
  53:../xmc4800_slave.c ****    default:
  54:../xmc4800_slave.c ****    {
  55:../xmc4800_slave.c ****       if(ESCvar.post_object_download_hook != NULL)
 126              	 .loc 1 55 0
 127 0010 074B     	 ldr r3,.L8
 128 0012 5B6D     	 ldr r3,[r3,#84]
 129 0014 002B     	 cmp r3,#0
 130 0016 06D0     	 beq .L7
  56:../xmc4800_slave.c ****       {
  57:../xmc4800_slave.c ****          (ESCvar.post_object_download_hook)(index, subindex);
 131              	 .loc 1 57 0
 132 0018 054B     	 ldr r3,.L8
 133 001a 5B6D     	 ldr r3,[r3,#84]
 134 001c F988     	 ldrh r1,[r7,#6]
 135 001e 7A79     	 ldrb r2,[r7,#5]
 136 0020 0846     	 mov r0,r1
 137 0022 1146     	 mov r1,r2
 138 0024 9847     	 blx r3
 139              	.L7:
  58:../xmc4800_slave.c ****       }
  59:../xmc4800_slave.c ****       break;
 140              	 .loc 1 59 0
 141 0026 00BF     	 nop
  60:../xmc4800_slave.c ****    }
  61:../xmc4800_slave.c ****    }
  62:../xmc4800_slave.c **** }
 142              	 .loc 1 62 0
 143 0028 0837     	 adds r7,r7,#8
 144              	.LCFI8:
 145              	 .cfi_def_cfa_offset 8
 146 002a BD46     	 mov sp,r7
 147              	.LCFI9:
 148              	 .cfi_def_cfa_register 13
 149              	 
 150 002c 80BD     	 pop {r7,pc}
 151              	.L9:
 152 002e 00BF     	 .align 2
 153              	.L8:
 154 0030 00000000 	 .word ESCvar
 155              	 .cfi_endproc
 156              	.LFE1:
 158              	 .section .text.APP_safeoutput,"ax",%progbits
 159              	 .align 2
 160              	 .global APP_safeoutput
 161              	 .thumb
 162              	 .thumb_func
 164              	APP_safeoutput:
 165              	.LFB2:
  63:../xmc4800_slave.c **** 
  64:../xmc4800_slave.c **** /** Mandatory: Hook called from the slave stack ESC_stopoutputs to act on state changes
  65:../xmc4800_slave.c ****  * forcing us to stop outputs. Here we can set them to a safe state.
  66:../xmc4800_slave.c ****  * set
  67:../xmc4800_slave.c ****  */
  68:../xmc4800_slave.c **** void APP_safeoutput (void)
  69:../xmc4800_slave.c **** {
 166              	 .loc 1 69 0
 167              	 .cfi_startproc
 168              	 
 169              	 
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI10:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 00AF     	 add r7,sp,#0
 176              	.LCFI11:
 177              	 .cfi_def_cfa_register 7
  70:../xmc4800_slave.c ****    DPRINT ("APP_safeoutput\n");
  71:../xmc4800_slave.c **** 
  72:../xmc4800_slave.c ****    if(ESCvar.safeoutput_override != NULL)
 178              	 .loc 1 72 0
 179 0004 084B     	 ldr r3,.L13
 180 0006 DB6C     	 ldr r3,[r3,#76]
 181 0008 002B     	 cmp r3,#0
 182 000a 03D0     	 beq .L11
  73:../xmc4800_slave.c ****    {
  74:../xmc4800_slave.c ****       (ESCvar.safeoutput_override)();
 183              	 .loc 1 74 0
 184 000c 064B     	 ldr r3,.L13
 185 000e DB6C     	 ldr r3,[r3,#76]
 186 0010 9847     	 blx r3
 187 0012 08E0     	 b .L10
 188              	.L11:
  75:../xmc4800_slave.c ****    }
  76:../xmc4800_slave.c ****    else
  77:../xmc4800_slave.c ****    {
  78:../xmc4800_slave.c ****       // Set safe values for Wb.LEDs
  79:../xmc4800_slave.c ****       Wb.LEDs.LED1 = 0;
 189              	 .loc 1 79 0
 190 0014 054B     	 ldr r3,.L13+4
 191 0016 0022     	 movs r2,#0
 192 0018 1A70     	 strb r2,[r3]
  80:../xmc4800_slave.c ****       Wb.LEDs.LED2 = 0;
 193              	 .loc 1 80 0
 194 001a 044B     	 ldr r3,.L13+4
 195 001c 0022     	 movs r2,#0
 196 001e 5A70     	 strb r2,[r3,#1]
  81:../xmc4800_slave.c ****       Wb.LEDs.LED3 = 0;
 197              	 .loc 1 81 0
 198 0020 024B     	 ldr r3,.L13+4
 199 0022 0022     	 movs r2,#0
 200 0024 9A70     	 strb r2,[r3,#2]
 201              	.L10:
  82:../xmc4800_slave.c ****    }
  83:../xmc4800_slave.c **** }
 202              	 .loc 1 83 0
 203 0026 80BD     	 pop {r7,pc}
 204              	.L14:
 205              	 .align 2
 206              	.L13:
 207 0028 00000000 	 .word ESCvar
 208 002c 00000000 	 .word Wb
 209              	 .cfi_endproc
 210              	.LFE2:
 212              	 .section .text.TXPDO_update,"ax",%progbits
 213              	 .align 2
 214              	 .global TXPDO_update
 215              	 .thumb
 216              	 .thumb_func
 218              	TXPDO_update:
 219              	.LFB3:
  84:../xmc4800_slave.c **** 
  85:../xmc4800_slave.c **** /** Mandatory: Write local process data to Sync Manager 3, Master Inputs.
  86:../xmc4800_slave.c ****  */
  87:../xmc4800_slave.c **** void TXPDO_update (void)
  88:../xmc4800_slave.c **** {
 220              	 .loc 1 88 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224 0000 80B5     	 push {r7,lr}
 225              	.LCFI12:
 226              	 .cfi_def_cfa_offset 8
 227              	 .cfi_offset 7,-8
 228              	 .cfi_offset 14,-4
 229 0002 00AF     	 add r7,sp,#0
 230              	.LCFI13:
 231              	 .cfi_def_cfa_register 7
  89:../xmc4800_slave.c ****    if(ESCvar.txpdo_override != NULL)
 232              	 .loc 1 89 0
 233 0004 094B     	 ldr r3,.L18
 234 0006 DB6D     	 ldr r3,[r3,#92]
 235 0008 002B     	 cmp r3,#0
 236 000a 03D0     	 beq .L16
  90:../xmc4800_slave.c ****    {
  91:../xmc4800_slave.c ****       (ESCvar.txpdo_override)();
 237              	 .loc 1 91 0
 238 000c 074B     	 ldr r3,.L18
 239 000e DB6D     	 ldr r3,[r3,#92]
 240 0010 9847     	 blx r3
 241 0012 09E0     	 b .L15
 242              	.L16:
  92:../xmc4800_slave.c ****    }
  93:../xmc4800_slave.c ****    else
  94:../xmc4800_slave.c ****    {
  95:../xmc4800_slave.c ****       ESC_write (SM3_sma, &Rb, ESCvar.TXPDOsize);
 243              	 .loc 1 95 0
 244 0014 054B     	 ldr r3,.L18
 245 0016 B3F87D30 	 ldrh r3,[r3,#125]
 246 001a 9BB2     	 uxth r3,r3
 247 001c 4FF48C50 	 mov r0,#4480
 248 0020 0349     	 ldr r1,.L18+4
 249 0022 1A46     	 mov r2,r3
 250 0024 FFF7FEFF 	 bl ESC_write
 251              	.L15:
  96:../xmc4800_slave.c ****    }
  97:../xmc4800_slave.c **** }
 252              	 .loc 1 97 0
 253 0028 80BD     	 pop {r7,pc}
 254              	.L19:
 255 002a 00BF     	 .align 2
 256              	.L18:
 257 002c 00000000 	 .word ESCvar
 258 0030 00000000 	 .word Rb
 259              	 .cfi_endproc
 260              	.LFE3:
 262              	 .section .text.RXPDO_update,"ax",%progbits
 263              	 .align 2
 264              	 .global RXPDO_update
 265              	 .thumb
 266              	 .thumb_func
 268              	RXPDO_update:
 269              	.LFB4:
  98:../xmc4800_slave.c **** 
  99:../xmc4800_slave.c **** /** Mandatory: Read Sync Manager 2 to local process data, Master Outputs.
 100:../xmc4800_slave.c ****  */
 101:../xmc4800_slave.c **** void RXPDO_update (void)
 102:../xmc4800_slave.c **** {
 270              	 .loc 1 102 0
 271              	 .cfi_startproc
 272              	 
 273              	 
 274 0000 80B5     	 push {r7,lr}
 275              	.LCFI14:
 276              	 .cfi_def_cfa_offset 8
 277              	 .cfi_offset 7,-8
 278              	 .cfi_offset 14,-4
 279 0002 00AF     	 add r7,sp,#0
 280              	.LCFI15:
 281              	 .cfi_def_cfa_register 7
 103:../xmc4800_slave.c ****    if(ESCvar.rxpdo_override != NULL)
 282              	 .loc 1 103 0
 283 0004 094B     	 ldr r3,.L23
 284 0006 9B6D     	 ldr r3,[r3,#88]
 285 0008 002B     	 cmp r3,#0
 286 000a 03D0     	 beq .L21
 104:../xmc4800_slave.c ****    {
 105:../xmc4800_slave.c ****       (ESCvar.rxpdo_override)();
 287              	 .loc 1 105 0
 288 000c 074B     	 ldr r3,.L23
 289 000e 9B6D     	 ldr r3,[r3,#88]
 290 0010 9847     	 blx r3
 291 0012 09E0     	 b .L20
 292              	.L21:
 106:../xmc4800_slave.c ****    }
 107:../xmc4800_slave.c ****    else
 108:../xmc4800_slave.c ****    {
 109:../xmc4800_slave.c ****       ESC_read (SM2_sma, &Wb, ESCvar.RXPDOsize);
 293              	 .loc 1 109 0
 294 0014 054B     	 ldr r3,.L23
 295 0016 B3F87F30 	 ldrh r3,[r3,#127]
 296 001a 9BB2     	 uxth r3,r3
 297 001c 4FF48850 	 mov r0,#4352
 298 0020 0349     	 ldr r1,.L23+4
 299 0022 1A46     	 mov r2,r3
 300 0024 FFF7FEFF 	 bl ESC_read
 301              	.L20:
 110:../xmc4800_slave.c ****    }
 111:../xmc4800_slave.c **** }
 302              	 .loc 1 111 0
 303 0028 80BD     	 pop {r7,pc}
 304              	.L24:
 305 002a 00BF     	 .align 2
 306              	.L23:
 307 002c 00000000 	 .word ESCvar
 308 0030 00000000 	 .word Wb
 309              	 .cfi_endproc
 310              	.LFE4:
 312              	 .section .text.DIG_process,"ax",%progbits
 313              	 .align 2
 314              	 .global DIG_process
 315              	 .thumb
 316              	 .thumb_func
 318              	DIG_process:
 319              	.LFB5:
 112:../xmc4800_slave.c **** 
 113:../xmc4800_slave.c **** /** Mandatory: Function to update local I/O, call read ethercat outputs, call
 114:../xmc4800_slave.c ****  * write ethercat inputs. Implement watch-dog counter to count-out if we have
 115:../xmc4800_slave.c ****  * made state change affecting the App.state.
 116:../xmc4800_slave.c ****  */
 117:../xmc4800_slave.c **** void DIG_process (uint8_t flags)
 118:../xmc4800_slave.c **** {
 320              	 .loc 1 118 0
 321              	 .cfi_startproc
 322              	 
 323              	 
 324 0000 80B5     	 push {r7,lr}
 325              	.LCFI16:
 326              	 .cfi_def_cfa_offset 8
 327              	 .cfi_offset 7,-8
 328              	 .cfi_offset 14,-4
 329 0002 82B0     	 sub sp,sp,#8
 330              	.LCFI17:
 331              	 .cfi_def_cfa_offset 16
 332 0004 00AF     	 add r7,sp,#0
 333              	.LCFI18:
 334              	 .cfi_def_cfa_register 7
 335 0006 0346     	 mov r3,r0
 336 0008 FB71     	 strb r3,[r7,#7]
 119:../xmc4800_slave.c ****    /* Handle watchdog */
 120:../xmc4800_slave.c ****    if((flags & DIG_PROCESS_WD_FLAG) > 0)
 337              	 .loc 1 120 0
 338 000a FB79     	 ldrb r3,[r7,#7]
 339 000c 03F00403 	 and r3,r3,#4
 340 0010 002B     	 cmp r3,#0
 341 0012 45DD     	 ble .L26
 121:../xmc4800_slave.c ****    {
 122:../xmc4800_slave.c **** 
 123:../xmc4800_slave.c ****       if (CC_ATOMIC_GET(watchdog) > 0)
 342              	 .loc 1 123 0
 343 0014 7F4B     	 ldr r3,.L40
 344 0016 BFF35F8F 	 dmb sy
 345 001a 1B68     	 ldr r3,[r3]
 346 001c BFF35F8F 	 dmb sy
 347 0020 002B     	 cmp r3,#0
 348 0022 0CDD     	 ble .L27
 124:../xmc4800_slave.c ****       {
 125:../xmc4800_slave.c ****          CC_ATOMIC_SUB(watchdog, 1);
 349              	 .loc 1 125 0
 350 0024 7B4B     	 ldr r3,.L40
 351 0026 BFF35F8F 	 dmb sy
 352              	.L37:
 353 002a 53E8002F 	 ldrex r2,[r3]
 354 002e 02F1FF32 	 add r2,r2,#-1
 355 0032 43E80021 	 strex r1,r2,[r3]
 356 0036 0029     	 cmp r1,#0
 357 0038 F7D1     	 bne .L37
 358 003a BFF35F8F 	 dmb sy
 359              	.L27:
 126:../xmc4800_slave.c ****       }
 127:../xmc4800_slave.c **** 
 128:../xmc4800_slave.c ****       if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 360              	 .loc 1 128 0
 361 003e 754B     	 ldr r3,.L40
 362 0040 BFF35F8F 	 dmb sy
 363 0044 1B68     	 ldr r3,[r3]
 364 0046 BFF35F8F 	 dmb sy
 365 004a 002B     	 cmp r3,#0
 366 004c 13DC     	 bgt .L28
 129:../xmc4800_slave.c ****           ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 367              	 .loc 1 129 0 discriminator 1
 368 004e 724B     	 ldr r3,.L40+4
 369 0050 BFF35F8F 	 dmb sy
 370 0054 1B78     	 ldrb r3,[r3]
 371 0056 BFF35F8F 	 dmb sy
 372 005a DBB2     	 uxtb r3,r3
 373 005c 03F00203 	 and r3,r3,#2
 128:../xmc4800_slave.c ****           ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 374              	 .loc 1 128 0 discriminator 1
 375 0060 002B     	 cmp r3,#0
 376 0062 08DD     	 ble .L28
 130:../xmc4800_slave.c ****       {
 131:../xmc4800_slave.c ****          DPRINT("DIG_process watchdog expired\n");
 132:../xmc4800_slave.c ****          ESC_stopoutput();
 377              	 .loc 1 132 0
 378 0064 FFF7FEFF 	 bl ESC_stopoutput
 133:../xmc4800_slave.c ****          /* watchdog, invalid outputs */
 134:../xmc4800_slave.c ****          ESC_ALerror (ALERR_WATCHDOG);
 379              	 .loc 1 134 0
 380 0068 1B20     	 movs r0,#27
 381 006a FFF7FEFF 	 bl ESC_ALerror
 135:../xmc4800_slave.c ****          /* goto safe-op with error bit set */
 136:../xmc4800_slave.c ****          ESC_ALstatus (ESCsafeop | ESCerror);
 382              	 .loc 1 136 0
 383 006e 1420     	 movs r0,#20
 384 0070 FFF7FEFF 	 bl ESC_ALstatus
 385 0074 14E0     	 b .L26
 386              	.L28:
 137:../xmc4800_slave.c ****       }
 138:../xmc4800_slave.c ****       else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 387              	 .loc 1 138 0
 388 0076 684B     	 ldr r3,.L40+4
 389 0078 BFF35F8F 	 dmb sy
 390 007c 1B78     	 ldrb r3,[r3]
 391 007e BFF35F8F 	 dmb sy
 392 0082 DBB2     	 uxtb r3,r3
 393 0084 03F00203 	 and r3,r3,#2
 394 0088 002B     	 cmp r3,#0
 395 008a 09D1     	 bne .L26
 139:../xmc4800_slave.c ****       {
 140:../xmc4800_slave.c ****          CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 396              	 .loc 1 140 0
 397 008c 634B     	 ldr r3,.L40+8
 398 008e D3F8C830 	 ldr r3,[r3,#200]
 399 0092 1A46     	 mov r2,r3
 400 0094 5F4B     	 ldr r3,.L40
 401 0096 BFF35F8F 	 dmb sy
 402 009a 1A60     	 str r2,[r3]
 403 009c BFF35F8F 	 dmb sy
 404              	.L26:
 141:../xmc4800_slave.c ****       }
 142:../xmc4800_slave.c ****    }
 143:../xmc4800_slave.c **** 
 144:../xmc4800_slave.c ****    /* Handle Outputs */
 145:../xmc4800_slave.c ****    if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 405              	 .loc 1 145 0
 406 00a0 FB79     	 ldrb r3,[r7,#7]
 407 00a2 03F00203 	 and r3,r3,#2
 408 00a6 002B     	 cmp r3,#0
 409 00a8 3DDD     	 ble .L29
 146:../xmc4800_slave.c ****    {
 147:../xmc4800_slave.c ****       if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 410              	 .loc 1 147 0
 411 00aa 5B4B     	 ldr r3,.L40+4
 412 00ac BFF35F8F 	 dmb sy
 413 00b0 1B78     	 ldrb r3,[r3]
 414 00b2 BFF35F8F 	 dmb sy
 415 00b6 DBB2     	 uxtb r3,r3
 416 00b8 03F00203 	 and r3,r3,#2
 417 00bc 002B     	 cmp r3,#0
 418 00be 28DD     	 ble .L30
 148:../xmc4800_slave.c ****          (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 419              	 .loc 1 148 0 discriminator 1
 420 00c0 564B     	 ldr r3,.L40+8
 421 00c2 B3F8D030 	 ldrh r3,[r3,#208]
 422 00c6 9BB2     	 uxth r3,r3
 423 00c8 03F48063 	 and r3,r3,#1024
 147:../xmc4800_slave.c ****          (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 424              	 .loc 1 147 0 discriminator 1
 425 00cc 002B     	 cmp r3,#0
 426 00ce 20D0     	 beq .L30
 149:../xmc4800_slave.c ****       {
 150:../xmc4800_slave.c ****          RXPDO_update();
 427              	 .loc 1 150 0
 428 00d0 FFF7FEFF 	 bl RXPDO_update
 151:../xmc4800_slave.c ****          CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 429              	 .loc 1 151 0
 430 00d4 514B     	 ldr r3,.L40+8
 431 00d6 D3F8C830 	 ldr r3,[r3,#200]
 432 00da 1A46     	 mov r2,r3
 433 00dc 4D4B     	 ldr r3,.L40
 434 00de BFF35F8F 	 dmb sy
 435 00e2 1A60     	 str r2,[r3]
 436 00e4 BFF35F8F 	 dmb sy
 152:../xmc4800_slave.c ****          if(ESCvar.dcsync > 0)
 437              	 .loc 1 152 0
 438 00e8 4C4B     	 ldr r3,.L40+8
 439 00ea 93F88130 	 ldrb r3,[r3,#129]
 440 00ee 002B     	 cmp r3,#0
 441 00f0 0CD0     	 beq .L31
 153:../xmc4800_slave.c ****          {
 154:../xmc4800_slave.c ****             CC_ATOMIC_ADD(ESCvar.synccounter, 1);
 442              	 .loc 1 154 0
 443 00f2 4B4B     	 ldr r3,.L40+12
 444 00f4 BFF35F8F 	 dmb sy
 445              	.L38:
 446 00f8 D3E84F2F 	 ldrexb r2,[r3]
 447 00fc 02F10102 	 add r2,r2,#1
 448 0100 C3E8412F 	 strexb r1,r2,[r3]
 449 0104 0029     	 cmp r1,#0
 450 0106 F7D1     	 bne .L38
 451 0108 BFF35F8F 	 dmb sy
 452              	.L31:
 155:../xmc4800_slave.c ****          }
 156:../xmc4800_slave.c ****          /* Set outputs */
 157:../xmc4800_slave.c ****          cb_set_LEDs();
 453              	 .loc 1 157 0
 454 010c FFF7FEFF 	 bl cb_set_LEDs
 455 0110 09E0     	 b .L29
 456              	.L30:
 158:../xmc4800_slave.c ****       }
 159:../xmc4800_slave.c ****       else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 457              	 .loc 1 159 0
 458 0112 424B     	 ldr r3,.L40+8
 459 0114 B3F8D030 	 ldrh r3,[r3,#208]
 460 0118 9BB2     	 uxth r3,r3
 461 011a 03F48063 	 and r3,r3,#1024
 462 011e 002B     	 cmp r3,#0
 463 0120 01D0     	 beq .L29
 160:../xmc4800_slave.c ****       {
 161:../xmc4800_slave.c ****          RXPDO_update();
 464              	 .loc 1 161 0
 465 0122 FFF7FEFF 	 bl RXPDO_update
 466              	.L29:
 162:../xmc4800_slave.c ****       }
 163:../xmc4800_slave.c ****    }
 164:../xmc4800_slave.c **** 
 165:../xmc4800_slave.c ****    /* Call application */
 166:../xmc4800_slave.c ****    if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 467              	 .loc 1 166 0
 468 0126 FB79     	 ldrb r3,[r7,#7]
 469 0128 03F00803 	 and r3,r3,#8
 470 012c 002B     	 cmp r3,#0
 471 012e 5CDD     	 ble .L32
 167:../xmc4800_slave.c ****    {
 168:../xmc4800_slave.c **** 
 169:../xmc4800_slave.c ****       if((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 472              	 .loc 1 169 0
 473 0130 394B     	 ldr r3,.L40+4
 474 0132 BFF35F8F 	 dmb sy
 475 0136 1B78     	 ldrb r3,[r3]
 476 0138 BFF35F8F 	 dmb sy
 477 013c DBB2     	 uxtb r3,r3
 478 013e 03F00203 	 and r3,r3,#2
 479 0142 002B     	 cmp r3,#0
 480 0144 0CDD     	 ble .L33
 170:../xmc4800_slave.c ****       {
 171:../xmc4800_slave.c ****          CC_ATOMIC_SUB(ESCvar.synccounter, 1);
 481              	 .loc 1 171 0
 482 0146 364B     	 ldr r3,.L40+12
 483 0148 BFF35F8F 	 dmb sy
 484              	.L39:
 485 014c D3E84F2F 	 ldrexb r2,[r3]
 486 0150 02F1FF32 	 add r2,r2,#-1
 487 0154 C3E8412F 	 strexb r1,r2,[r3]
 488 0158 0029     	 cmp r1,#0
 489 015a F7D1     	 bne .L39
 490 015c BFF35F8F 	 dmb sy
 491              	.L33:
 172:../xmc4800_slave.c ****       }
 173:../xmc4800_slave.c **** 
 174:../xmc4800_slave.c ****       if((ESCvar.dcsync > 0) &&
 492              	 .loc 1 174 0
 493 0160 2E4B     	 ldr r3,.L40+8
 494 0162 93F88130 	 ldrb r3,[r3,#129]
 495 0166 002B     	 cmp r3,#0
 496 0168 38D0     	 beq .L34
 175:../xmc4800_slave.c ****             ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
 497              	 .loc 1 175 0 discriminator 1
 498 016a 2D4B     	 ldr r3,.L40+12
 499 016c BFF35F8F 	 dmb sy
 500 0170 1B78     	 ldrb r3,[r3]
 501 0172 BFF35F8F 	 dmb sy
 502 0176 DBB2     	 uxtb r3,r3
 503 0178 DBB2     	 uxtb r3,r3
 504 017a 5AB2     	 sxtb r2,r3
 505 017c 274B     	 ldr r3,.L40+8
 506 017e B3F88230 	 ldrh r3,[r3,#130]
 507 0182 9BB2     	 uxth r3,r3
 508 0184 5B42     	 negs r3,r3
 174:../xmc4800_slave.c ****             ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
 509              	 .loc 1 174 0 discriminator 1
 510 0186 9A42     	 cmp r2,r3
 511 0188 0EDB     	 blt .L35
 176:../xmc4800_slave.c ****              (CC_ATOMIC_GET(ESCvar.synccounter) > ESCvar.synccounterlimit)))
 512              	 .loc 1 176 0
 513 018a 254B     	 ldr r3,.L40+12
 514 018c BFF35F8F 	 dmb sy
 515 0190 1B78     	 ldrb r3,[r3]
 516 0192 BFF35F8F 	 dmb sy
 517 0196 DBB2     	 uxtb r3,r3
 518 0198 DBB2     	 uxtb r3,r3
 519 019a 5BB2     	 sxtb r3,r3
 520 019c 1F4A     	 ldr r2,.L40+8
 521 019e B2F88220 	 ldrh r2,[r2,#130]
 522 01a2 92B2     	 uxth r2,r2
 175:../xmc4800_slave.c ****             ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
 523              	 .loc 1 175 0
 524 01a4 9342     	 cmp r3,r2
 525 01a6 19DD     	 ble .L34
 526              	.L35:
 177:../xmc4800_slave.c ****       {
 178:../xmc4800_slave.c ****          if((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 527              	 .loc 1 178 0
 528 01a8 1B4B     	 ldr r3,.L40+4
 529 01aa BFF35F8F 	 dmb sy
 530 01ae 1B78     	 ldrb r3,[r3]
 531 01b0 BFF35F8F 	 dmb sy
 532 01b4 DBB2     	 uxtb r3,r3
 533 01b6 03F00203 	 and r3,r3,#2
 534 01ba 002B     	 cmp r3,#0
 535 01bc 0EDD     	 ble .L34
 179:../xmc4800_slave.c ****          {
 180:../xmc4800_slave.c ****             DPRINT("sync error = %d\n", ESCvar.synccounter);
 181:../xmc4800_slave.c ****             ESC_stopoutput();
 536              	 .loc 1 181 0
 537 01be FFF7FEFF 	 bl ESC_stopoutput
 182:../xmc4800_slave.c ****             /* Sync error */
 183:../xmc4800_slave.c ****             ESC_ALerror (ALERR_SYNCERROR);
 538              	 .loc 1 183 0
 539 01c2 1A20     	 movs r0,#26
 540 01c4 FFF7FEFF 	 bl ESC_ALerror
 184:../xmc4800_slave.c ****             /* goto safe-op with error bit set */
 185:../xmc4800_slave.c ****             ESC_ALstatus (ESCsafeop | ESCerror);
 541              	 .loc 1 185 0
 542 01c8 1420     	 movs r0,#20
 543 01ca FFF7FEFF 	 bl ESC_ALstatus
 186:../xmc4800_slave.c ****             CC_ATOMIC_SET(ESCvar.synccounter, 0);
 544              	 .loc 1 186 0
 545 01ce 144B     	 ldr r3,.L40+12
 546 01d0 BFF35F8F 	 dmb sy
 547 01d4 0022     	 movs r2,#0
 548 01d6 1A70     	 strb r2,[r3]
 549 01d8 BFF35F8F 	 dmb sy
 550              	.L34:
 187:../xmc4800_slave.c ****          }
 188:../xmc4800_slave.c ****       }
 189:../xmc4800_slave.c ****       /* Call application callback if set */
 190:../xmc4800_slave.c ****       if (ESCvar.application_hook != NULL)
 551              	 .loc 1 190 0
 552 01dc 0F4B     	 ldr r3,.L40+8
 553 01de 9B6C     	 ldr r3,[r3,#72]
 554 01e0 002B     	 cmp r3,#0
 555 01e2 02D0     	 beq .L32
 191:../xmc4800_slave.c ****       {
 192:../xmc4800_slave.c ****          (ESCvar.application_hook)();
 556              	 .loc 1 192 0
 557 01e4 0D4B     	 ldr r3,.L40+8
 558 01e6 9B6C     	 ldr r3,[r3,#72]
 559 01e8 9847     	 blx r3
 560              	.L32:
 193:../xmc4800_slave.c ****       }
 194:../xmc4800_slave.c ****    }
 195:../xmc4800_slave.c **** 
 196:../xmc4800_slave.c ****    /* Handle Inputs */
 197:../xmc4800_slave.c ****    if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 561              	 .loc 1 197 0
 562 01ea FB79     	 ldrb r3,[r7,#7]
 563 01ec 03F00103 	 and r3,r3,#1
 564 01f0 002B     	 cmp r3,#0
 565 01f2 0CDD     	 ble .L25
 198:../xmc4800_slave.c ****    {
 199:../xmc4800_slave.c ****       if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 566              	 .loc 1 199 0
 567 01f4 084B     	 ldr r3,.L40+4
 568 01f6 BFF35F8F 	 dmb sy
 569 01fa 1B78     	 ldrb r3,[r3]
 570 01fc BFF35F8F 	 dmb sy
 571 0200 DBB2     	 uxtb r3,r3
 572 0202 002B     	 cmp r3,#0
 573 0204 03D0     	 beq .L25
 200:../xmc4800_slave.c ****       {
 201:../xmc4800_slave.c ****          /* Update inputs */
 202:../xmc4800_slave.c ****          cb_get_Buttons();
 574              	 .loc 1 202 0
 575 0206 FFF7FEFF 	 bl cb_get_Buttons
 203:../xmc4800_slave.c ****          TXPDO_update();
 576              	 .loc 1 203 0
 577 020a FFF7FEFF 	 bl TXPDO_update
 578              	.L25:
 204:../xmc4800_slave.c ****       }
 205:../xmc4800_slave.c ****    }
 206:../xmc4800_slave.c **** }
 579              	 .loc 1 206 0
 580 020e 0837     	 adds r7,r7,#8
 581              	.LCFI19:
 582              	 .cfi_def_cfa_offset 8
 583 0210 BD46     	 mov sp,r7
 584              	.LCFI20:
 585              	 .cfi_def_cfa_register 13
 586              	 
 587 0212 80BD     	 pop {r7,pc}
 588              	.L41:
 589              	 .align 2
 590              	.L40:
 591 0214 00000000 	 .word watchdog
 592 0218 D3000000 	 .word ESCvar+211
 593 021c 00000000 	 .word ESCvar
 594 0220 D2000000 	 .word ESCvar+210
 595              	 .cfi_endproc
 596              	.LFE5:
 598              	 .section .text.ecat_slv_worker,"ax",%progbits
 599              	 .align 2
 600              	 .global ecat_slv_worker
 601              	 .thumb
 602              	 .thumb_func
 604              	ecat_slv_worker:
 605              	.LFB6:
 207:../xmc4800_slave.c **** 
 208:../xmc4800_slave.c **** /**
 209:../xmc4800_slave.c ****  * Handler for SM change, SM0/1, AL CONTROL and EEPROM events, the application
 210:../xmc4800_slave.c ****  * control what interrupts that should be served and re-activated with
 211:../xmc4800_slave.c ****  * event mask argument
 212:../xmc4800_slave.c ****  */
 213:../xmc4800_slave.c **** void ecat_slv_worker (uint32_t event_mask)
 214:../xmc4800_slave.c **** {
 606              	 .loc 1 214 0
 607              	 .cfi_startproc
 608              	 
 609              	 
 610 0000 80B5     	 push {r7,lr}
 611              	.LCFI21:
 612              	 .cfi_def_cfa_offset 8
 613              	 .cfi_offset 7,-8
 614              	 .cfi_offset 14,-4
 615 0002 82B0     	 sub sp,sp,#8
 616              	.LCFI22:
 617              	 .cfi_def_cfa_offset 16
 618 0004 00AF     	 add r7,sp,#0
 619              	.LCFI23:
 620              	 .cfi_def_cfa_register 7
 621 0006 7860     	 str r0,[r7,#4]
 622              	.L46:
 215:../xmc4800_slave.c ****    do
 216:../xmc4800_slave.c ****    {
 217:../xmc4800_slave.c ****       /* Check the state machine */
 218:../xmc4800_slave.c ****       ESC_state();
 623              	 .loc 1 218 0
 624 0008 FFF7FEFF 	 bl ESC_state
 219:../xmc4800_slave.c ****       /* Check the SM activation event */
 220:../xmc4800_slave.c ****       ESC_sm_act_event();
 625              	 .loc 1 220 0
 626 000c FFF7FEFF 	 bl ESC_sm_act_event
 221:../xmc4800_slave.c **** 
 222:../xmc4800_slave.c ****       /* Check mailboxes */
 223:../xmc4800_slave.c ****       while ((ESC_mbxprocess() > 0) || (ESCvar.txcue > 0))
 627              	 .loc 1 223 0
 628 0010 05E0     	 b .L43
 629              	.L44:
 224:../xmc4800_slave.c ****       {
 225:../xmc4800_slave.c ****          ESC_coeprocess();
 630              	 .loc 1 225 0
 631 0012 FFF7FEFF 	 bl ESC_coeprocess
 226:../xmc4800_slave.c ****          ESC_foeprocess();
 632              	 .loc 1 226 0
 633 0016 FFF7FEFF 	 bl ESC_foeprocess
 227:../xmc4800_slave.c ****          ESC_xoeprocess();
 634              	 .loc 1 227 0
 635 001a FFF7FEFF 	 bl ESC_xoeprocess
 636              	.L43:
 223:../xmc4800_slave.c ****       {
 637              	 .loc 1 223 0
 638 001e FFF7FEFF 	 bl ESC_mbxprocess
 639 0022 0346     	 mov r3,r0
 640 0024 002B     	 cmp r3,#0
 641 0026 F4D1     	 bne .L44
 223:../xmc4800_slave.c ****       {
 642              	 .loc 1 223 0 is_stmt 0 discriminator 1
 643 0028 144B     	 ldr r3,.L47
 644 002a 93F89330 	 ldrb r3,[r3,#147]
 645 002e 002B     	 cmp r3,#0
 646 0030 EFD1     	 bne .L44
 228:../xmc4800_slave.c ****       }
 229:../xmc4800_slave.c **** 
 230:../xmc4800_slave.c ****       /* Call emulated eeprom handler if set */
 231:../xmc4800_slave.c ****       if (ESCvar.esc_hw_eep_handler != NULL)
 647              	 .loc 1 231 0 is_stmt 1
 648 0032 124B     	 ldr r3,.L47
 649 0034 9B6E     	 ldr r3,[r3,#104]
 650 0036 002B     	 cmp r3,#0
 651 0038 02D0     	 beq .L45
 232:../xmc4800_slave.c ****       {
 233:../xmc4800_slave.c ****          (ESCvar.esc_hw_eep_handler)();
 652              	 .loc 1 233 0
 653 003a 104B     	 ldr r3,.L47
 654 003c 9B6E     	 ldr r3,[r3,#104]
 655 003e 9847     	 blx r3
 656              	.L45:
 234:../xmc4800_slave.c ****       }
 235:../xmc4800_slave.c **** 
 236:../xmc4800_slave.c ****       CC_ATOMIC_SET(ESCvar.ALevent, ESC_ALeventread());
 657              	 .loc 1 236 0
 658 0040 FFF7FEFF 	 bl ESC_ALeventread
 659 0044 0346     	 mov r3,r0
 660 0046 9AB2     	 uxth r2,r3
 661 0048 0D4B     	 ldr r3,.L47+4
 662 004a BFF35F8F 	 dmb sy
 663 004e 1A80     	 strh r2,[r3]
 664 0050 BFF35F8F 	 dmb sy
 237:../xmc4800_slave.c **** 
 238:../xmc4800_slave.c ****    }while(ESCvar.ALevent & event_mask);
 665              	 .loc 1 238 0
 666 0054 094B     	 ldr r3,.L47
 667 0056 B3F8D030 	 ldrh r3,[r3,#208]
 668 005a 9BB2     	 uxth r3,r3
 669 005c 1A46     	 mov r2,r3
 670 005e 7B68     	 ldr r3,[r7,#4]
 671 0060 1340     	 ands r3,r3,r2
 672 0062 002B     	 cmp r3,#0
 673 0064 D0D1     	 bne .L46
 239:../xmc4800_slave.c **** 
 240:../xmc4800_slave.c ****    ESC_ALeventmaskwrite(ESC_ALeventmaskread() | event_mask);
 674              	 .loc 1 240 0
 675 0066 FFF7FEFF 	 bl ESC_ALeventmaskread
 676 006a 0246     	 mov r2,r0
 677 006c 7B68     	 ldr r3,[r7,#4]
 678 006e 1343     	 orrs r3,r3,r2
 679 0070 1846     	 mov r0,r3
 680 0072 FFF7FEFF 	 bl ESC_ALeventmaskwrite
 241:../xmc4800_slave.c **** }
 681              	 .loc 1 241 0
 682 0076 0837     	 adds r7,r7,#8
 683              	.LCFI24:
 684              	 .cfi_def_cfa_offset 8
 685 0078 BD46     	 mov sp,r7
 686              	.LCFI25:
 687              	 .cfi_def_cfa_register 13
 688              	 
 689 007a 80BD     	 pop {r7,pc}
 690              	.L48:
 691              	 .align 2
 692              	.L47:
 693 007c 00000000 	 .word ESCvar
 694 0080 D0000000 	 .word ESCvar+208
 695              	 .cfi_endproc
 696              	.LFE6:
 698              	 .section .text.ecat_slv_isr,"ax",%progbits
 699              	 .align 2
 700              	 .global ecat_slv_isr
 701              	 .thumb
 702              	 .thumb_func
 704              	ecat_slv_isr:
 705              	.LFB7:
 242:../xmc4800_slave.c **** 
 243:../xmc4800_slave.c **** /**
 244:../xmc4800_slave.c ****  * ISR function. It should be called from ISR for applications entirely driven by
 245:../xmc4800_slave.c ****  * interrupts.
 246:../xmc4800_slave.c ****  * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 247:../xmc4800_slave.c ****  */
 248:../xmc4800_slave.c **** void ecat_slv_isr (void)
 249:../xmc4800_slave.c **** {
 706              	 .loc 1 249 0
 707              	 .cfi_startproc
 708              	 
 709              	 
 710 0000 80B5     	 push {r7,lr}
 711              	.LCFI26:
 712              	 .cfi_def_cfa_offset 8
 713              	 .cfi_offset 7,-8
 714              	 .cfi_offset 14,-4
 715 0002 00AF     	 add r7,sp,#0
 716              	.LCFI27:
 717              	 .cfi_def_cfa_register 7
 250:../xmc4800_slave.c ****    ecat_slv_worker(ESCREG_ALEVENT_CONTROL | ESCREG_ALEVENT_SMCHANGE
 718              	 .loc 1 250 0
 719 0004 40F23130 	 movw r0,#817
 720 0008 FFF7FEFF 	 bl ecat_slv_worker
 251:../xmc4800_slave.c ****             | ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1 | ESCREG_ALEVENT_EEP);
 252:../xmc4800_slave.c **** }
 721              	 .loc 1 252 0
 722 000c 80BD     	 pop {r7,pc}
 723              	 .cfi_endproc
 724              	.LFE7:
 726 000e 00BF     	 .section .text.ecat_slv_poll,"ax",%progbits
 727              	 .align 2
 728              	 .global ecat_slv_poll
 729              	 .thumb
 730              	 .thumb_func
 732              	ecat_slv_poll:
 733              	.LFB8:
 253:../xmc4800_slave.c **** 
 254:../xmc4800_slave.c **** /**
 255:../xmc4800_slave.c ****  * Polling function. It should be called periodically for an application 
 256:../xmc4800_slave.c ****  * when only SM2/DC interrupt is active.
 257:../xmc4800_slave.c ****  * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 258:../xmc4800_slave.c ****  */
 259:../xmc4800_slave.c **** void ecat_slv_poll (void)
 260:../xmc4800_slave.c **** {
 734              	 .loc 1 260 0
 735              	 .cfi_startproc
 736              	 
 737              	 
 738 0000 80B5     	 push {r7,lr}
 739              	.LCFI28:
 740              	 .cfi_def_cfa_offset 8
 741              	 .cfi_offset 7,-8
 742              	 .cfi_offset 14,-4
 743 0002 00AF     	 add r7,sp,#0
 744              	.LCFI29:
 745              	 .cfi_def_cfa_register 7
 261:../xmc4800_slave.c ****    /* Read local time from ESC*/
 262:../xmc4800_slave.c ****    ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 746              	 .loc 1 262 0
 747 0004 4FF41160 	 mov r0,#2320
 748 0008 1249     	 ldr r1,.L53
 749 000a 0422     	 movs r2,#4
 750 000c FFF7FEFF 	 bl ESC_read
 263:../xmc4800_slave.c ****    ESCvar.Time = etohl (ESCvar.Time);
 751              	 .loc 1 263 0
 752 0010 114B     	 ldr r3,.L53+4
 753 0012 D3F8CC20 	 ldr r2,[r3,#204]
 754 0016 104B     	 ldr r3,.L53+4
 755 0018 D3F8CC10 	 ldr r1,[r3,#204]
 756 001c 0021     	 movs r1,#0
 757 001e 0A43     	 orrs r2,r2,r1
 758 0020 C3F8CC20 	 str r2,[r3,#204]
 264:../xmc4800_slave.c **** 
 265:../xmc4800_slave.c ****    /* Check the state machine */
 266:../xmc4800_slave.c ****    ESC_state();
 759              	 .loc 1 266 0
 760 0024 FFF7FEFF 	 bl ESC_state
 267:../xmc4800_slave.c ****    /* Check the SM activation event */
 268:../xmc4800_slave.c ****    ESC_sm_act_event();
 761              	 .loc 1 268 0
 762 0028 FFF7FEFF 	 bl ESC_sm_act_event
 269:../xmc4800_slave.c **** 
 270:../xmc4800_slave.c ****    /* Check mailboxes */
 271:../xmc4800_slave.c ****    if (ESC_mbxprocess())
 763              	 .loc 1 271 0
 764 002c FFF7FEFF 	 bl ESC_mbxprocess
 765 0030 0346     	 mov r3,r0
 766 0032 002B     	 cmp r3,#0
 767 0034 05D0     	 beq .L51
 272:../xmc4800_slave.c ****    {
 273:../xmc4800_slave.c ****       ESC_coeprocess();
 768              	 .loc 1 273 0
 769 0036 FFF7FEFF 	 bl ESC_coeprocess
 274:../xmc4800_slave.c ****       ESC_foeprocess();
 770              	 .loc 1 274 0
 771 003a FFF7FEFF 	 bl ESC_foeprocess
 275:../xmc4800_slave.c ****       ESC_xoeprocess();
 772              	 .loc 1 275 0
 773 003e FFF7FEFF 	 bl ESC_xoeprocess
 774              	.L51:
 276:../xmc4800_slave.c ****    }
 277:../xmc4800_slave.c **** 
 278:../xmc4800_slave.c ****    /* Call emulated eeprom handler if set */
 279:../xmc4800_slave.c ****    if (ESCvar.esc_hw_eep_handler != NULL)
 775              	 .loc 1 279 0
 776 0042 054B     	 ldr r3,.L53+4
 777 0044 9B6E     	 ldr r3,[r3,#104]
 778 0046 002B     	 cmp r3,#0
 779 0048 02D0     	 beq .L50
 280:../xmc4800_slave.c ****    {
 281:../xmc4800_slave.c ****       (ESCvar.esc_hw_eep_handler)();
 780              	 .loc 1 281 0
 781 004a 034B     	 ldr r3,.L53+4
 782 004c 9B6E     	 ldr r3,[r3,#104]
 783 004e 9847     	 blx r3
 784              	.L50:
 282:../xmc4800_slave.c ****    }
 283:../xmc4800_slave.c **** }
 785              	 .loc 1 283 0
 786 0050 80BD     	 pop {r7,pc}
 787              	.L54:
 788 0052 00BF     	 .align 2
 789              	.L53:
 790 0054 CC000000 	 .word ESCvar+204
 791 0058 00000000 	 .word ESCvar
 792              	 .cfi_endproc
 793              	.LFE8:
 795              	 .section .text.ecat_slv,"ax",%progbits
 796              	 .align 2
 797              	 .global ecat_slv
 798              	 .thumb
 799              	 .thumb_func
 801              	ecat_slv:
 802              	.LFB9:
 284:../xmc4800_slave.c **** 
 285:../xmc4800_slave.c **** void ecat_slv (void)
 286:../xmc4800_slave.c **** {
 803              	 .loc 1 286 0
 804              	 .cfi_startproc
 805              	 
 806              	 
 807 0000 80B5     	 push {r7,lr}
 808              	.LCFI30:
 809              	 .cfi_def_cfa_offset 8
 810              	 .cfi_offset 7,-8
 811              	 .cfi_offset 14,-4
 812 0002 00AF     	 add r7,sp,#0
 813              	.LCFI31:
 814              	 .cfi_def_cfa_register 7
 287:../xmc4800_slave.c ****    ecat_slv_poll();
 815              	 .loc 1 287 0
 816 0004 FFF7FEFF 	 bl ecat_slv_poll
 288:../xmc4800_slave.c ****    DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 817              	 .loc 1 288 0
 818 0008 0F20     	 movs r0,#15
 819 000a FFF7FEFF 	 bl DIG_process
 289:../xmc4800_slave.c ****          DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 290:../xmc4800_slave.c **** }
 820              	 .loc 1 290 0
 821 000e 80BD     	 pop {r7,pc}
 822              	 .cfi_endproc
 823              	.LFE9:
 825              	 .section .text.ecat_slv_init,"ax",%progbits
 826              	 .align 2
 827              	 .global ecat_slv_init
 828              	 .thumb
 829              	 .thumb_func
 831              	ecat_slv_init:
 832              	.LFB10:
 291:../xmc4800_slave.c **** 
 292:../xmc4800_slave.c **** /**
 293:../xmc4800_slave.c ****  * Initialize the slave stack.
 294:../xmc4800_slave.c ****  */
 295:../xmc4800_slave.c **** void ecat_slv_init (esc_cfg_t * config)
 296:../xmc4800_slave.c **** {
 833              	 .loc 1 296 0
 834              	 .cfi_startproc
 835              	 
 836              	 
 837 0000 80B5     	 push {r7,lr}
 838              	.LCFI32:
 839              	 .cfi_def_cfa_offset 8
 840              	 .cfi_offset 7,-8
 841              	 .cfi_offset 14,-4
 842 0002 82B0     	 sub sp,sp,#8
 843              	.LCFI33:
 844              	 .cfi_def_cfa_offset 16
 845 0004 00AF     	 add r7,sp,#0
 846              	.LCFI34:
 847              	 .cfi_def_cfa_register 7
 848 0006 7860     	 str r0,[r7,#4]
 297:../xmc4800_slave.c ****    DPRINT ("Slave stack init started\n");
 298:../xmc4800_slave.c **** 
 299:../xmc4800_slave.c ****    ESCvar.TXPDOsize = ESCvar.ESC_SM3_sml = sizeOfPDO(TX_PDO_OBJIDX);
 849              	 .loc 1 299 0
 850 0008 41F61340 	 movw r0,#7187
 851 000c FFF7FEFF 	 bl sizeOfPDO
 852 0010 0346     	 mov r3,r0
 853 0012 1A46     	 mov r2,r3
 854 0014 254B     	 ldr r3,.L59
 855 0016 A3F87B20 	 strh r2,[r3,#123]
 856 001a 244B     	 ldr r3,.L59
 857 001c B3F87B30 	 ldrh r3,[r3,#123]
 858 0020 9AB2     	 uxth r2,r3
 859 0022 224B     	 ldr r3,.L59
 860 0024 A3F87D20 	 strh r2,[r3,#125]
 300:../xmc4800_slave.c ****    ESCvar.RXPDOsize = ESCvar.ESC_SM2_sml = sizeOfPDO(RX_PDO_OBJIDX);
 861              	 .loc 1 300 0
 862 0028 41F61240 	 movw r0,#7186
 863 002c FFF7FEFF 	 bl sizeOfPDO
 864 0030 0346     	 mov r3,r0
 865 0032 1A46     	 mov r2,r3
 866 0034 1D4B     	 ldr r3,.L59
 867 0036 A3F87920 	 strh r2,[r3,#121]
 868 003a 1C4B     	 ldr r3,.L59
 869 003c B3F87930 	 ldrh r3,[r3,#121]
 870 0040 9AB2     	 uxth r2,r3
 871 0042 1A4B     	 ldr r3,.L59
 872 0044 A3F87F20 	 strh r2,[r3,#127]
 301:../xmc4800_slave.c **** 
 302:../xmc4800_slave.c ****    /* Init watchdog */
 303:../xmc4800_slave.c ****    watchdog = config->watchdog_cnt;
 873              	 .loc 1 303 0
 874 0048 7B68     	 ldr r3,[r7,#4]
 875 004a 9B68     	 ldr r3,[r3,#8]
 876 004c 184A     	 ldr r2,.L59+4
 877 004e 1360     	 str r3,[r2]
 304:../xmc4800_slave.c **** 
 305:../xmc4800_slave.c ****    /* Call stack configuration */
 306:../xmc4800_slave.c ****    ESC_config (config);
 878              	 .loc 1 306 0
 879 0050 7868     	 ldr r0,[r7,#4]
 880 0052 FFF7FEFF 	 bl ESC_config
 307:../xmc4800_slave.c ****    /* Call HW init */
 308:../xmc4800_slave.c ****    ESC_init (config);
 881              	 .loc 1 308 0
 882 0056 7868     	 ldr r0,[r7,#4]
 883 0058 FFF7FEFF 	 bl ESC_init
 309:../xmc4800_slave.c **** 
 310:../xmc4800_slave.c ****    /*  wait until ESC is started up */
 311:../xmc4800_slave.c ****    while ((ESCvar.DLstatus & 0x0001) == 0)
 884              	 .loc 1 311 0
 885 005c 0CE0     	 b .L57
 886              	.L58:
 312:../xmc4800_slave.c ****    {
 313:../xmc4800_slave.c ****       ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 887              	 .loc 1 313 0
 888 005e 4FF48870 	 mov r0,#272
 889 0062 1449     	 ldr r1,.L59+8
 890 0064 0222     	 movs r2,#2
 891 0066 FFF7FEFF 	 bl ESC_read
 314:../xmc4800_slave.c ****                 sizeof (ESCvar.DLstatus));
 315:../xmc4800_slave.c ****       ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 892              	 .loc 1 315 0
 893 006a 104B     	 ldr r3,.L59
 894 006c B3F88A30 	 ldrh r3,[r3,#138]
 895 0070 9AB2     	 uxth r2,r3
 896 0072 0E4B     	 ldr r3,.L59
 897 0074 A3F88A20 	 strh r2,[r3,#138]
 898              	.L57:
 311:../xmc4800_slave.c ****    {
 899              	 .loc 1 311 0
 900 0078 0C4B     	 ldr r3,.L59
 901 007a B3F88A30 	 ldrh r3,[r3,#138]
 902 007e 9BB2     	 uxth r3,r3
 903 0080 03F00103 	 and r3,r3,#1
 904 0084 002B     	 cmp r3,#0
 905 0086 EAD0     	 beq .L58
 316:../xmc4800_slave.c ****    }
 317:../xmc4800_slave.c **** 
 318:../xmc4800_slave.c ****    /* Init FoE */
 319:../xmc4800_slave.c ****    FOE_init();
 906              	 .loc 1 319 0
 907 0088 FFF7FEFF 	 bl FOE_init
 320:../xmc4800_slave.c **** 
 321:../xmc4800_slave.c ****    /* reset ESC to init state */
 322:../xmc4800_slave.c ****    ESC_ALstatus (ESCinit);
 908              	 .loc 1 322 0
 909 008c 0120     	 movs r0,#1
 910 008e FFF7FEFF 	 bl ESC_ALstatus
 323:../xmc4800_slave.c ****    ESC_ALerror (ALERR_NONE);
 911              	 .loc 1 323 0
 912 0092 0020     	 movs r0,#0
 913 0094 FFF7FEFF 	 bl ESC_ALerror
 324:../xmc4800_slave.c ****    ESC_stopmbx();
 914              	 .loc 1 324 0
 915 0098 FFF7FEFF 	 bl ESC_stopmbx
 325:../xmc4800_slave.c ****    ESC_stopinput();
 916              	 .loc 1 325 0
 917 009c FFF7FEFF 	 bl ESC_stopinput
 326:../xmc4800_slave.c ****    ESC_stopoutput();
 918              	 .loc 1 326 0
 919 00a0 FFF7FEFF 	 bl ESC_stopoutput
 327:../xmc4800_slave.c **** }
 920              	 .loc 1 327 0
 921 00a4 0837     	 adds r7,r7,#8
 922              	.LCFI35:
 923              	 .cfi_def_cfa_offset 8
 924 00a6 BD46     	 mov sp,r7
 925              	.LCFI36:
 926              	 .cfi_def_cfa_register 13
 927              	 
 928 00a8 80BD     	 pop {r7,pc}
 929              	.L60:
 930 00aa 00BF     	 .align 2
 931              	.L59:
 932 00ac 00000000 	 .word ESCvar
 933 00b0 00000000 	 .word watchdog
 934 00b4 8A000000 	 .word ESCvar+138
 935              	 .cfi_endproc
 936              	.LFE10:
 938              	 .text
 939              	.Letext0:
 940              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 941              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 942              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 943              	 .file 5 "../utypes.h"
 944              	 .file 6 "C:/Workspaces/SOES-SAMPLE/soes/soes/esc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4800_slave.c
                            *COM*:00000180 MBX
                            *COM*:00000003 MBXcontrol
                            *COM*:000000d4 ESCvar
                            *COM*:00000002 Rb
                            *COM*:00000003 Wb
                            *COM*:00000000 Cb
                            *COM*:00000000 Mb
    {standard input}:27     .bss.watchdog:00000000 $d
    {standard input}:30     .bss.watchdog:00000000 watchdog
    {standard input}:33     .text.ESC_pre_objecthandler:00000000 $t
    {standard input}:38     .text.ESC_pre_objecthandler:00000000 ESC_pre_objecthandler
    {standard input}:94     .text.ESC_pre_objecthandler:00000038 $d
    {standard input}:99     .text.ESC_objecthandler:00000000 $t
    {standard input}:104    .text.ESC_objecthandler:00000000 ESC_objecthandler
    {standard input}:154    .text.ESC_objecthandler:00000030 $d
    {standard input}:159    .text.APP_safeoutput:00000000 $t
    {standard input}:164    .text.APP_safeoutput:00000000 APP_safeoutput
    {standard input}:207    .text.APP_safeoutput:00000028 $d
    {standard input}:213    .text.TXPDO_update:00000000 $t
    {standard input}:218    .text.TXPDO_update:00000000 TXPDO_update
    {standard input}:257    .text.TXPDO_update:0000002c $d
    {standard input}:263    .text.RXPDO_update:00000000 $t
    {standard input}:268    .text.RXPDO_update:00000000 RXPDO_update
    {standard input}:307    .text.RXPDO_update:0000002c $d
    {standard input}:313    .text.DIG_process:00000000 $t
    {standard input}:318    .text.DIG_process:00000000 DIG_process
    {standard input}:591    .text.DIG_process:00000214 $d
    {standard input}:599    .text.ecat_slv_worker:00000000 $t
    {standard input}:604    .text.ecat_slv_worker:00000000 ecat_slv_worker
    {standard input}:693    .text.ecat_slv_worker:0000007c $d
    {standard input}:699    .text.ecat_slv_isr:00000000 $t
    {standard input}:704    .text.ecat_slv_isr:00000000 ecat_slv_isr
    {standard input}:727    .text.ecat_slv_poll:00000000 $t
    {standard input}:732    .text.ecat_slv_poll:00000000 ecat_slv_poll
    {standard input}:790    .text.ecat_slv_poll:00000054 $d
    {standard input}:796    .text.ecat_slv:00000000 $t
    {standard input}:801    .text.ecat_slv:00000000 ecat_slv
    {standard input}:826    .text.ecat_slv_init:00000000 $t
    {standard input}:831    .text.ecat_slv_init:00000000 ecat_slv_init
    {standard input}:932    .text.ecat_slv_init:000000ac $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ESC_write
ESC_read
ESC_stopoutput
ESC_ALerror
ESC_ALstatus
cb_set_LEDs
cb_get_Buttons
ESC_state
ESC_sm_act_event
ESC_coeprocess
ESC_foeprocess
ESC_xoeprocess
ESC_mbxprocess
ESC_ALeventread
ESC_ALeventmaskread
ESC_ALeventmaskwrite
sizeOfPDO
ESC_config
ESC_init
FOE_init
ESC_stopmbx
ESC_stopinput
