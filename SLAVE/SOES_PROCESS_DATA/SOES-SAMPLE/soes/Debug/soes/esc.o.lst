   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "esc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.ESC_ALerror,"ax",%progbits
  20              	 .align 2
  21              	 .global ESC_ALerror
  22              	 .thumb
  23              	 .thumb_func
  25              	ESC_ALerror:
  26              	.LFB0:
  27              	 .file 1 "../soes/esc.c"
   1:../soes/esc.c **** /*
   2:../soes/esc.c ****  * Licensed under the GNU General Public License version 2 with exceptions. See
   3:../soes/esc.c ****  * LICENSE file in the project root for full license information
   4:../soes/esc.c ****  */
   5:../soes/esc.c **** #include <string.h>
   6:../soes/esc.c **** #include <cc.h>
   7:../soes/esc.c **** #include "esc.h"
   8:../soes/esc.c **** #include "esc_coe.h"
   9:../soes/esc.c **** #include "esc_foe.h"
  10:../soes/esc.c **** 
  11:../soes/esc.c **** /** \file
  12:../soes/esc.c ****  * \brief
  13:../soes/esc.c ****  * Base EtherCAT functions for handling the Data Link Layer and Malilboxes
  14:../soes/esc.c ****  *
  15:../soes/esc.c ****  *
  16:../soes/esc.c ****  * State machine and mailbox support.
  17:../soes/esc.c ****  */
  18:../soes/esc.c **** 
  19:../soes/esc.c **** /** Write AL Status Code to the ESC.
  20:../soes/esc.c ****  *
  21:../soes/esc.c ****  * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status 
  22:../soes/esc.c ****  */
  23:../soes/esc.c **** void ESC_ALerror (uint16_t errornumber)
  24:../soes/esc.c **** {
  28              	 .loc 1 24 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 84B0     	 sub sp,sp,#16
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 24
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 0346     	 mov r3,r0
  44 0008 FB80     	 strh r3,[r7,#6]
  25:../soes/esc.c ****    uint16_t dummy;
  26:../soes/esc.c ****    ESCvar.ALerror = errornumber;
  45              	 .loc 1 26 0
  46 000a 084B     	 ldr r3,.L2
  47 000c FA88     	 ldrh r2,[r7,#6]
  48 000e A3F88820 	 strh r2,[r3,#136]
  27:../soes/esc.c ****    dummy = htoes (errornumber);
  49              	 .loc 1 27 0
  50 0012 FB88     	 ldrh r3,[r7,#6]
  51 0014 FB81     	 strh r3,[r7,#14]
  28:../soes/esc.c ****    ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
  52              	 .loc 1 28 0
  53 0016 07F10E03 	 add r3,r7,#14
  54 001a 4FF49A70 	 mov r0,#308
  55 001e 1946     	 mov r1,r3
  56 0020 0222     	 movs r2,#2
  57 0022 FFF7FEFF 	 bl ESC_write
  29:../soes/esc.c **** }
  58              	 .loc 1 29 0
  59 0026 1037     	 adds r7,r7,#16
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 8
  62 0028 BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 002a 80BD     	 pop {r7,pc}
  67              	.L3:
  68              	 .align 2
  69              	.L2:
  70 002c 00000000 	 .word ESCvar
  71              	 .cfi_endproc
  72              	.LFE0:
  74              	 .section .text.ESC_ALstatus,"ax",%progbits
  75              	 .align 2
  76              	 .global ESC_ALstatus
  77              	 .thumb
  78              	 .thumb_func
  80              	ESC_ALstatus:
  81              	.LFB1:
  30:../soes/esc.c **** 
  31:../soes/esc.c **** /** Write AL Status to the ESC.
  32:../soes/esc.c ****  *
  33:../soes/esc.c ****  * @param[in] status   = Write current slave status to register 0x130 AL Status
  34:../soes/esc.c ****  * reflecting actual state and error indication if present
  35:../soes/esc.c ****  */
  36:../soes/esc.c **** void ESC_ALstatus (uint8_t status)
  37:../soes/esc.c **** {
  82              	 .loc 1 37 0
  83              	 .cfi_startproc
  84              	 
  85              	 
  86 0000 80B5     	 push {r7,lr}
  87              	.LCFI5:
  88              	 .cfi_def_cfa_offset 8
  89              	 .cfi_offset 7,-8
  90              	 .cfi_offset 14,-4
  91 0002 84B0     	 sub sp,sp,#16
  92              	.LCFI6:
  93              	 .cfi_def_cfa_offset 24
  94 0004 00AF     	 add r7,sp,#0
  95              	.LCFI7:
  96              	 .cfi_def_cfa_register 7
  97 0006 0346     	 mov r3,r0
  98 0008 FB71     	 strb r3,[r7,#7]
  38:../soes/esc.c ****    uint16_t dummy;
  39:../soes/esc.c ****    ESCvar.ALstatus = status;
  99              	 .loc 1 39 0
 100 000a FB79     	 ldrb r3,[r7,#7]
 101 000c 9AB2     	 uxth r2,r3
 102 000e 084B     	 ldr r3,.L5
 103 0010 A3F88420 	 strh r2,[r3,#132]
  40:../soes/esc.c ****    dummy = htoes ((uint16_t) status);
 104              	 .loc 1 40 0
 105 0014 FB79     	 ldrb r3,[r7,#7]
 106 0016 9BB2     	 uxth r3,r3
 107 0018 FB81     	 strh r3,[r7,#14]
  41:../soes/esc.c ****    ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 108              	 .loc 1 41 0
 109 001a 07F10E03 	 add r3,r7,#14
 110 001e 4FF49870 	 mov r0,#304
 111 0022 1946     	 mov r1,r3
 112 0024 0222     	 movs r2,#2
 113 0026 FFF7FEFF 	 bl ESC_write
  42:../soes/esc.c **** }
 114              	 .loc 1 42 0
 115 002a 1037     	 adds r7,r7,#16
 116              	.LCFI8:
 117              	 .cfi_def_cfa_offset 8
 118 002c BD46     	 mov sp,r7
 119              	.LCFI9:
 120              	 .cfi_def_cfa_register 13
 121              	 
 122 002e 80BD     	 pop {r7,pc}
 123              	.L6:
 124              	 .align 2
 125              	.L5:
 126 0030 00000000 	 .word ESCvar
 127              	 .cfi_endproc
 128              	.LFE1:
 130              	 .section .text.ESC_ALeventmaskwrite,"ax",%progbits
 131              	 .align 2
 132              	 .global ESC_ALeventmaskwrite
 133              	 .thumb
 134              	 .thumb_func
 136              	ESC_ALeventmaskwrite:
 137              	.LFB2:
  43:../soes/esc.c **** 
  44:../soes/esc.c **** /** Write ALeventMask register 0x204.
  45:../soes/esc.c ****  *
  46:../soes/esc.c ****  * @param[in] n   = AL Event Mask
  47:../soes/esc.c ****  */
  48:../soes/esc.c **** void ESC_ALeventmaskwrite (uint32_t mask)
  49:../soes/esc.c **** {
 138              	 .loc 1 49 0
 139              	 .cfi_startproc
 140              	 
 141              	 
 142 0000 80B5     	 push {r7,lr}
 143              	.LCFI10:
 144              	 .cfi_def_cfa_offset 8
 145              	 .cfi_offset 7,-8
 146              	 .cfi_offset 14,-4
 147 0002 84B0     	 sub sp,sp,#16
 148              	.LCFI11:
 149              	 .cfi_def_cfa_offset 24
 150 0004 00AF     	 add r7,sp,#0
 151              	.LCFI12:
 152              	 .cfi_def_cfa_register 7
 153 0006 7860     	 str r0,[r7,#4]
  50:../soes/esc.c ****    uint32_t aleventmask;
  51:../soes/esc.c ****    aleventmask = htoel(mask);
 154              	 .loc 1 51 0
 155 0008 7B68     	 ldr r3,[r7,#4]
 156 000a FB60     	 str r3,[r7,#12]
  52:../soes/esc.c ****    ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 157              	 .loc 1 52 0
 158 000c 07F10C03 	 add r3,r7,#12
 159 0010 4FF40170 	 mov r0,#516
 160 0014 1946     	 mov r1,r3
 161 0016 0422     	 movs r2,#4
 162 0018 FFF7FEFF 	 bl ESC_write
  53:../soes/esc.c **** }
 163              	 .loc 1 53 0
 164 001c 1037     	 adds r7,r7,#16
 165              	.LCFI13:
 166              	 .cfi_def_cfa_offset 8
 167 001e BD46     	 mov sp,r7
 168              	.LCFI14:
 169              	 .cfi_def_cfa_register 13
 170              	 
 171 0020 80BD     	 pop {r7,pc}
 172              	 .cfi_endproc
 173              	.LFE2:
 175 0022 00BF     	 .section .text.ESC_ALeventmaskread,"ax",%progbits
 176              	 .align 2
 177              	 .global ESC_ALeventmaskread
 178              	 .thumb
 179              	 .thumb_func
 181              	ESC_ALeventmaskread:
 182              	.LFB3:
  54:../soes/esc.c **** 
  55:../soes/esc.c **** /** Read AleventMask register 0x204.
  56:../soes/esc.c ****  *
  57:../soes/esc.c ****  * @return value of register AL Event Mask
  58:../soes/esc.c ****  */
  59:../soes/esc.c **** uint32_t ESC_ALeventmaskread (void)
  60:../soes/esc.c **** {
 183              	 .loc 1 60 0
 184              	 .cfi_startproc
 185              	 
 186              	 
 187 0000 80B5     	 push {r7,lr}
 188              	.LCFI15:
 189              	 .cfi_def_cfa_offset 8
 190              	 .cfi_offset 7,-8
 191              	 .cfi_offset 14,-4
 192 0002 82B0     	 sub sp,sp,#8
 193              	.LCFI16:
 194              	 .cfi_def_cfa_offset 16
 195 0004 00AF     	 add r7,sp,#0
 196              	.LCFI17:
 197              	 .cfi_def_cfa_register 7
  61:../soes/esc.c ****    uint32_t aleventmask;
  62:../soes/esc.c **** 
  63:../soes/esc.c ****    ESC_read (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 198              	 .loc 1 63 0
 199 0006 3B1D     	 adds r3,r7,#4
 200 0008 4FF40170 	 mov r0,#516
 201 000c 1946     	 mov r1,r3
 202 000e 0422     	 movs r2,#4
 203 0010 FFF7FEFF 	 bl ESC_read
  64:../soes/esc.c ****    return htoel(aleventmask);
 204              	 .loc 1 64 0
 205 0014 7B68     	 ldr r3,[r7,#4]
  65:../soes/esc.c **** }
 206              	 .loc 1 65 0
 207 0016 1846     	 mov r0,r3
 208 0018 0837     	 adds r7,r7,#8
 209              	.LCFI18:
 210              	 .cfi_def_cfa_offset 8
 211 001a BD46     	 mov sp,r7
 212              	.LCFI19:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 001c 80BD     	 pop {r7,pc}
 216              	 .cfi_endproc
 217              	.LFE3:
 219 001e 00BF     	 .section .text.ESC_ALeventwrite,"ax",%progbits
 220              	 .align 2
 221              	 .global ESC_ALeventwrite
 222              	 .thumb
 223              	 .thumb_func
 225              	ESC_ALeventwrite:
 226              	.LFB4:
  66:../soes/esc.c **** 
  67:../soes/esc.c **** /** Write ALevent register 0x220.
  68:../soes/esc.c ****  *
  69:../soes/esc.c ****  * @param[in] n   = AL Event Mask
  70:../soes/esc.c ****  */
  71:../soes/esc.c **** void ESC_ALeventwrite (uint32_t event)
  72:../soes/esc.c **** {
 227              	 .loc 1 72 0
 228              	 .cfi_startproc
 229              	 
 230              	 
 231 0000 80B5     	 push {r7,lr}
 232              	.LCFI20:
 233              	 .cfi_def_cfa_offset 8
 234              	 .cfi_offset 7,-8
 235              	 .cfi_offset 14,-4
 236 0002 84B0     	 sub sp,sp,#16
 237              	.LCFI21:
 238              	 .cfi_def_cfa_offset 24
 239 0004 00AF     	 add r7,sp,#0
 240              	.LCFI22:
 241              	 .cfi_def_cfa_register 7
 242 0006 7860     	 str r0,[r7,#4]
  73:../soes/esc.c ****    uint32_t alevent;
  74:../soes/esc.c ****    alevent = htoel(event);
 243              	 .loc 1 74 0
 244 0008 7B68     	 ldr r3,[r7,#4]
 245 000a FB60     	 str r3,[r7,#12]
  75:../soes/esc.c ****    ESC_write (ESCREG_ALEVENT, &alevent, sizeof(alevent));
 246              	 .loc 1 75 0
 247 000c 07F10C03 	 add r3,r7,#12
 248 0010 4FF40870 	 mov r0,#544
 249 0014 1946     	 mov r1,r3
 250 0016 0422     	 movs r2,#4
 251 0018 FFF7FEFF 	 bl ESC_write
  76:../soes/esc.c **** }
 252              	 .loc 1 76 0
 253 001c 1037     	 adds r7,r7,#16
 254              	.LCFI23:
 255              	 .cfi_def_cfa_offset 8
 256 001e BD46     	 mov sp,r7
 257              	.LCFI24:
 258              	 .cfi_def_cfa_register 13
 259              	 
 260 0020 80BD     	 pop {r7,pc}
 261              	 .cfi_endproc
 262              	.LFE4:
 264 0022 00BF     	 .section .text.ESC_ALeventread,"ax",%progbits
 265              	 .align 2
 266              	 .global ESC_ALeventread
 267              	 .thumb
 268              	 .thumb_func
 270              	ESC_ALeventread:
 271              	.LFB5:
  77:../soes/esc.c **** 
  78:../soes/esc.c **** /** Read Alevent register 0x220.
  79:../soes/esc.c ****  *
  80:../soes/esc.c ****  * @return value of register AL Event Mask
  81:../soes/esc.c ****  */
  82:../soes/esc.c **** uint32_t ESC_ALeventread (void)
  83:../soes/esc.c **** {
 272              	 .loc 1 83 0
 273              	 .cfi_startproc
 274              	 
 275              	 
 276 0000 80B5     	 push {r7,lr}
 277              	.LCFI25:
 278              	 .cfi_def_cfa_offset 8
 279              	 .cfi_offset 7,-8
 280              	 .cfi_offset 14,-4
 281 0002 82B0     	 sub sp,sp,#8
 282              	.LCFI26:
 283              	 .cfi_def_cfa_offset 16
 284 0004 00AF     	 add r7,sp,#0
 285              	.LCFI27:
 286              	 .cfi_def_cfa_register 7
  84:../soes/esc.c ****    uint32_t alevent;
  85:../soes/esc.c ****    ESC_read (ESCREG_ALEVENT, &alevent, sizeof(alevent));
 287              	 .loc 1 85 0
 288 0006 3B1D     	 adds r3,r7,#4
 289 0008 4FF40870 	 mov r0,#544
 290 000c 1946     	 mov r1,r3
 291 000e 0422     	 movs r2,#4
 292 0010 FFF7FEFF 	 bl ESC_read
  86:../soes/esc.c ****    return htoel(alevent);
 293              	 .loc 1 86 0
 294 0014 7B68     	 ldr r3,[r7,#4]
  87:../soes/esc.c **** }
 295              	 .loc 1 87 0
 296 0016 1846     	 mov r0,r3
 297 0018 0837     	 adds r7,r7,#8
 298              	.LCFI28:
 299              	 .cfi_def_cfa_offset 8
 300 001a BD46     	 mov sp,r7
 301              	.LCFI29:
 302              	 .cfi_def_cfa_register 13
 303              	 
 304 001c 80BD     	 pop {r7,pc}
 305              	 .cfi_endproc
 306              	.LFE5:
 308 001e 00BF     	 .section .text.ESC_SMack,"ax",%progbits
 309              	 .align 2
 310              	 .global ESC_SMack
 311              	 .thumb
 312              	 .thumb_func
 314              	ESC_SMack:
 315              	.LFB6:
  88:../soes/esc.c **** 
  89:../soes/esc.c **** /** Read SM Status register 0x805(+ offset to SyncManager n) to acknowledge a
  90:../soes/esc.c ****  * Sync Manager event Bit 3 in ALevent. The result is not used.
  91:../soes/esc.c ****  *
  92:../soes/esc.c ****  * @param[in] n   = Read Sync Manager no. n
  93:../soes/esc.c ****  */
  94:../soes/esc.c **** void ESC_SMack (uint8_t n)
  95:../soes/esc.c **** {
 316              	 .loc 1 95 0
 317              	 .cfi_startproc
 318              	 
 319              	 
 320 0000 80B5     	 push {r7,lr}
 321              	.LCFI30:
 322              	 .cfi_def_cfa_offset 8
 323              	 .cfi_offset 7,-8
 324              	 .cfi_offset 14,-4
 325 0002 84B0     	 sub sp,sp,#16
 326              	.LCFI31:
 327              	 .cfi_def_cfa_offset 24
 328 0004 00AF     	 add r7,sp,#0
 329              	.LCFI32:
 330              	 .cfi_def_cfa_register 7
 331 0006 0346     	 mov r3,r0
 332 0008 FB71     	 strb r3,[r7,#7]
  96:../soes/esc.c ****    uint16_t dummy;
  97:../soes/esc.c ****    ESC_read (ESCREG_SM0STATUS + (n << 3), &dummy, 2);
 333              	 .loc 1 97 0
 334 000a FB79     	 ldrb r3,[r7,#7]
 335 000c 9BB2     	 uxth r3,r3
 336 000e DB00     	 lsls r3,r3,#3
 337 0010 9BB2     	 uxth r3,r3
 338 0012 03F60503 	 addw r3,r3,#2053
 339 0016 9AB2     	 uxth r2,r3
 340 0018 07F10E03 	 add r3,r7,#14
 341 001c 1046     	 mov r0,r2
 342 001e 1946     	 mov r1,r3
 343 0020 0222     	 movs r2,#2
 344 0022 FFF7FEFF 	 bl ESC_read
  98:../soes/esc.c **** }
 345              	 .loc 1 98 0
 346 0026 1037     	 adds r7,r7,#16
 347              	.LCFI33:
 348              	 .cfi_def_cfa_offset 8
 349 0028 BD46     	 mov sp,r7
 350              	.LCFI34:
 351              	 .cfi_def_cfa_register 13
 352              	 
 353 002a 80BD     	 pop {r7,pc}
 354              	 .cfi_endproc
 355              	.LFE6:
 357              	 .section .text.ESC_SMstatus,"ax",%progbits
 358              	 .align 2
 359              	 .global ESC_SMstatus
 360              	 .thumb
 361              	 .thumb_func
 363              	ESC_SMstatus:
 364              	.LFB7:
  99:../soes/esc.c **** 
 100:../soes/esc.c **** /** Read SM Status register 0x805(+ offset to SyncManager n) and save the
 101:../soes/esc.c ****  * result in global variable ESCvar.SM[n].
 102:../soes/esc.c ****  *
 103:../soes/esc.c ****  * @param[in] n   = Read Sync Manager no. n
 104:../soes/esc.c ****  */
 105:../soes/esc.c **** void ESC_SMstatus (uint8_t n)
 106:../soes/esc.c **** {
 365              	 .loc 1 106 0
 366              	 .cfi_startproc
 367              	 
 368              	 
 369 0000 80B5     	 push {r7,lr}
 370              	.LCFI35:
 371              	 .cfi_def_cfa_offset 8
 372              	 .cfi_offset 7,-8
 373              	 .cfi_offset 14,-4
 374 0002 84B0     	 sub sp,sp,#16
 375              	.LCFI36:
 376              	 .cfi_def_cfa_offset 24
 377 0004 00AF     	 add r7,sp,#0
 378              	.LCFI37:
 379              	 .cfi_def_cfa_register 7
 380 0006 0346     	 mov r3,r0
 381 0008 FB71     	 strb r3,[r7,#7]
 107:../soes/esc.c ****    _ESCsm2 *sm;
 108:../soes/esc.c ****    uint16_t temp;
 109:../soes/esc.c ****    sm = (_ESCsm2 *) & ESCvar.SM[n];
 382              	 .loc 1 109 0
 383 000a FB79     	 ldrb r3,[r7,#7]
 384 000c 1533     	 adds r3,r3,#21
 385 000e DB00     	 lsls r3,r3,#3
 386 0010 0E4A     	 ldr r2,.L15
 387 0012 1344     	 add r3,r3,r2
 388 0014 FB60     	 str r3,[r7,#12]
 110:../soes/esc.c ****    ESC_read (ESCREG_SM0STATUS + (n << 3), &temp, 2);
 389              	 .loc 1 110 0
 390 0016 FB79     	 ldrb r3,[r7,#7]
 391 0018 9BB2     	 uxth r3,r3
 392 001a DB00     	 lsls r3,r3,#3
 393 001c 9BB2     	 uxth r3,r3
 394 001e 03F60503 	 addw r3,r3,#2053
 395 0022 9AB2     	 uxth r2,r3
 396 0024 07F10A03 	 add r3,r7,#10
 397 0028 1046     	 mov r0,r2
 398 002a 1946     	 mov r1,r3
 399 002c 0222     	 movs r2,#2
 400 002e FFF7FEFF 	 bl ESC_read
 111:../soes/esc.c **** #if defined(EC_LITTLE_ENDIAN)
 112:../soes/esc.c ****    sm->ActESC = temp >> 8;
 401              	 .loc 1 112 0
 402 0032 7B89     	 ldrh r3,[r7,#10]
 403 0034 1B0A     	 lsrs r3,r3,#8
 404 0036 9BB2     	 uxth r3,r3
 405 0038 DAB2     	 uxtb r2,r3
 406 003a FB68     	 ldr r3,[r7,#12]
 407 003c 9A71     	 strb r2,[r3,#6]
 113:../soes/esc.c ****    sm->Status = temp;
 408              	 .loc 1 113 0
 409 003e 7B89     	 ldrh r3,[r7,#10]
 410 0040 DAB2     	 uxtb r2,r3
 411 0042 FB68     	 ldr r3,[r7,#12]
 412 0044 5A71     	 strb r2,[r3,#5]
 114:../soes/esc.c **** #endif
 115:../soes/esc.c **** 
 116:../soes/esc.c **** #if defined(EC_BIG_ENDIAN)
 117:../soes/esc.c ****    sm->ActESC = temp;
 118:../soes/esc.c ****    sm->Status = temp >> 8;
 119:../soes/esc.c **** #endif
 120:../soes/esc.c **** }
 413              	 .loc 1 120 0
 414 0046 1037     	 adds r7,r7,#16
 415              	.LCFI38:
 416              	 .cfi_def_cfa_offset 8
 417 0048 BD46     	 mov sp,r7
 418              	.LCFI39:
 419              	 .cfi_def_cfa_register 13
 420              	 
 421 004a 80BD     	 pop {r7,pc}
 422              	.L16:
 423              	 .align 2
 424              	.L15:
 425 004c 00000000 	 .word ESCvar
 426              	 .cfi_endproc
 427              	.LFE7:
 429              	 .section .text.ESC_SMwritepdi,"ax",%progbits
 430              	 .align 2
 431              	 .global ESC_SMwritepdi
 432              	 .thumb
 433              	 .thumb_func
 435              	ESC_SMwritepdi:
 436              	.LFB8:
 121:../soes/esc.c **** 
 122:../soes/esc.c **** /** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 123:../soes/esc.c ****  *
 124:../soes/esc.c ****  * @param[in] n   = Write to Sync Manager no. n
 125:../soes/esc.c ****  */
 126:../soes/esc.c **** void ESC_SMwritepdi (uint8_t n)
 127:../soes/esc.c **** {
 437              	 .loc 1 127 0
 438              	 .cfi_startproc
 439              	 
 440              	 
 441 0000 80B5     	 push {r7,lr}
 442              	.LCFI40:
 443              	 .cfi_def_cfa_offset 8
 444              	 .cfi_offset 7,-8
 445              	 .cfi_offset 14,-4
 446 0002 84B0     	 sub sp,sp,#16
 447              	.LCFI41:
 448              	 .cfi_def_cfa_offset 24
 449 0004 00AF     	 add r7,sp,#0
 450              	.LCFI42:
 451              	 .cfi_def_cfa_register 7
 452 0006 0346     	 mov r3,r0
 453 0008 FB71     	 strb r3,[r7,#7]
 128:../soes/esc.c ****    _ESCsm2 *sm;
 129:../soes/esc.c ****    sm = (_ESCsm2 *) & ESCvar.SM[n];
 454              	 .loc 1 129 0
 455 000a FB79     	 ldrb r3,[r7,#7]
 456 000c 1533     	 adds r3,r3,#21
 457 000e DB00     	 lsls r3,r3,#3
 458 0010 094A     	 ldr r2,.L18
 459 0012 1344     	 add r3,r3,r2
 460 0014 FB60     	 str r3,[r7,#12]
 130:../soes/esc.c ****    ESC_write (ESCREG_SM0PDI + (n << 3), &(sm->ActPDI), 1);
 461              	 .loc 1 130 0
 462 0016 FB79     	 ldrb r3,[r7,#7]
 463 0018 9BB2     	 uxth r3,r3
 464 001a DB00     	 lsls r3,r3,#3
 465 001c 9BB2     	 uxth r3,r3
 466 001e 03F60703 	 addw r3,r3,#2055
 467 0022 9AB2     	 uxth r2,r3
 468 0024 FB68     	 ldr r3,[r7,#12]
 469 0026 0733     	 adds r3,r3,#7
 470 0028 1046     	 mov r0,r2
 471 002a 1946     	 mov r1,r3
 472 002c 0122     	 movs r2,#1
 473 002e FFF7FEFF 	 bl ESC_write
 131:../soes/esc.c **** }
 474              	 .loc 1 131 0
 475 0032 1037     	 adds r7,r7,#16
 476              	.LCFI43:
 477              	 .cfi_def_cfa_offset 8
 478 0034 BD46     	 mov sp,r7
 479              	.LCFI44:
 480              	 .cfi_def_cfa_register 13
 481              	 
 482 0036 80BD     	 pop {r7,pc}
 483              	.L19:
 484              	 .align 2
 485              	.L18:
 486 0038 00000000 	 .word ESCvar
 487              	 .cfi_endproc
 488              	.LFE8:
 490              	 .section .text.ESC_SMenable,"ax",%progbits
 491              	 .align 2
 492              	 .global ESC_SMenable
 493              	 .thumb
 494              	 .thumb_func
 496              	ESC_SMenable:
 497              	.LFB9:
 132:../soes/esc.c **** 
 133:../soes/esc.c **** /** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Syn
 134:../soes/esc.c ****  *
 135:../soes/esc.c ****  * @param[in] n   = Write to Sync Manager no. n
 136:../soes/esc.c ****  */
 137:../soes/esc.c **** void ESC_SMenable (uint8_t n)
 138:../soes/esc.c **** {
 498              	 .loc 1 138 0
 499              	 .cfi_startproc
 500              	 
 501              	 
 502 0000 80B5     	 push {r7,lr}
 503              	.LCFI45:
 504              	 .cfi_def_cfa_offset 8
 505              	 .cfi_offset 7,-8
 506              	 .cfi_offset 14,-4
 507 0002 84B0     	 sub sp,sp,#16
 508              	.LCFI46:
 509              	 .cfi_def_cfa_offset 24
 510 0004 00AF     	 add r7,sp,#0
 511              	.LCFI47:
 512              	 .cfi_def_cfa_register 7
 513 0006 0346     	 mov r3,r0
 514 0008 FB71     	 strb r3,[r7,#7]
 139:../soes/esc.c ****    _ESCsm2 *sm;
 140:../soes/esc.c ****    sm = (_ESCsm2 *) & ESCvar.SM[n];
 515              	 .loc 1 140 0
 516 000a FB79     	 ldrb r3,[r7,#7]
 517 000c 1533     	 adds r3,r3,#21
 518 000e DB00     	 lsls r3,r3,#3
 519 0010 084A     	 ldr r2,.L21
 520 0012 1344     	 add r3,r3,r2
 521 0014 FB60     	 str r3,[r7,#12]
 141:../soes/esc.c ****    sm->ActPDI &= ~ESCREG_SMENABLE_BIT;
 522              	 .loc 1 141 0
 523 0016 FB68     	 ldr r3,[r7,#12]
 524 0018 DB79     	 ldrb r3,[r3,#7]
 525 001a 23F00103 	 bic r3,r3,#1
 526 001e DAB2     	 uxtb r2,r3
 527 0020 FB68     	 ldr r3,[r7,#12]
 528 0022 DA71     	 strb r2,[r3,#7]
 142:../soes/esc.c ****    ESC_SMwritepdi (n);
 529              	 .loc 1 142 0
 530 0024 FB79     	 ldrb r3,[r7,#7]
 531 0026 1846     	 mov r0,r3
 532 0028 FFF7FEFF 	 bl ESC_SMwritepdi
 143:../soes/esc.c **** }
 533              	 .loc 1 143 0
 534 002c 1037     	 adds r7,r7,#16
 535              	.LCFI48:
 536              	 .cfi_def_cfa_offset 8
 537 002e BD46     	 mov sp,r7
 538              	.LCFI49:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 0030 80BD     	 pop {r7,pc}
 542              	.L22:
 543 0032 00BF     	 .align 2
 544              	.L21:
 545 0034 00000000 	 .word ESCvar
 546              	 .cfi_endproc
 547              	.LFE9:
 549              	 .section .text.ESC_SMdisable,"ax",%progbits
 550              	 .align 2
 551              	 .global ESC_SMdisable
 552              	 .thumb
 553              	 .thumb_func
 555              	ESC_SMdisable:
 556              	.LFB10:
 144:../soes/esc.c **** /** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the S
 145:../soes/esc.c ****  *
 146:../soes/esc.c ****  * @param[in] n   = Write to Sync Manager no. n
 147:../soes/esc.c ****  */
 148:../soes/esc.c **** void ESC_SMdisable (uint8_t n)
 149:../soes/esc.c **** {
 557              	 .loc 1 149 0
 558              	 .cfi_startproc
 559              	 
 560              	 
 561 0000 80B5     	 push {r7,lr}
 562              	.LCFI50:
 563              	 .cfi_def_cfa_offset 8
 564              	 .cfi_offset 7,-8
 565              	 .cfi_offset 14,-4
 566 0002 84B0     	 sub sp,sp,#16
 567              	.LCFI51:
 568              	 .cfi_def_cfa_offset 24
 569 0004 00AF     	 add r7,sp,#0
 570              	.LCFI52:
 571              	 .cfi_def_cfa_register 7
 572 0006 0346     	 mov r3,r0
 573 0008 FB71     	 strb r3,[r7,#7]
 150:../soes/esc.c ****    _ESCsm2 *sm;
 151:../soes/esc.c ****    sm = (_ESCsm2 *) & ESCvar.SM[n];
 574              	 .loc 1 151 0
 575 000a FB79     	 ldrb r3,[r7,#7]
 576 000c 1533     	 adds r3,r3,#21
 577 000e DB00     	 lsls r3,r3,#3
 578 0010 084A     	 ldr r2,.L24
 579 0012 1344     	 add r3,r3,r2
 580 0014 FB60     	 str r3,[r7,#12]
 152:../soes/esc.c ****    sm->ActPDI |= ESCREG_SMENABLE_BIT;
 581              	 .loc 1 152 0
 582 0016 FB68     	 ldr r3,[r7,#12]
 583 0018 DB79     	 ldrb r3,[r3,#7]
 584 001a 43F00103 	 orr r3,r3,#1
 585 001e DAB2     	 uxtb r2,r3
 586 0020 FB68     	 ldr r3,[r7,#12]
 587 0022 DA71     	 strb r2,[r3,#7]
 153:../soes/esc.c ****    ESC_SMwritepdi (n);
 588              	 .loc 1 153 0
 589 0024 FB79     	 ldrb r3,[r7,#7]
 590 0026 1846     	 mov r0,r3
 591 0028 FFF7FEFF 	 bl ESC_SMwritepdi
 154:../soes/esc.c **** }
 592              	 .loc 1 154 0
 593 002c 1037     	 adds r7,r7,#16
 594              	.LCFI53:
 595              	 .cfi_def_cfa_offset 8
 596 002e BD46     	 mov sp,r7
 597              	.LCFI54:
 598              	 .cfi_def_cfa_register 13
 599              	 
 600 0030 80BD     	 pop {r7,pc}
 601              	.L25:
 602 0032 00BF     	 .align 2
 603              	.L24:
 604 0034 00000000 	 .word ESCvar
 605              	 .cfi_endproc
 606              	.LFE10:
 608              	 .section .text.ESC_address,"ax",%progbits
 609              	 .align 2
 610              	 .global ESC_address
 611              	 .thumb
 612              	 .thumb_func
 614              	ESC_address:
 615              	.LFB11:
 155:../soes/esc.c **** /** Read Configured Station Address register 0x010 assigned by the Master.
 156:../soes/esc.c ****  *
 157:../soes/esc.c ****  */
 158:../soes/esc.c **** void ESC_address (void)
 159:../soes/esc.c **** {
 616              	 .loc 1 159 0
 617              	 .cfi_startproc
 618              	 
 619              	 
 620 0000 80B5     	 push {r7,lr}
 621              	.LCFI55:
 622              	 .cfi_def_cfa_offset 8
 623              	 .cfi_offset 7,-8
 624              	 .cfi_offset 14,-4
 625 0002 00AF     	 add r7,sp,#0
 626              	.LCFI56:
 627              	 .cfi_def_cfa_register 7
 160:../soes/esc.c ****    ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 628              	 .loc 1 160 0
 629 0004 1020     	 movs r0,#16
 630 0006 0649     	 ldr r1,.L27
 631 0008 0222     	 movs r2,#2
 632 000a FFF7FEFF 	 bl ESC_read
 161:../soes/esc.c ****    ESCvar.address = etohs (ESCvar.address);
 633              	 .loc 1 161 0
 634 000e 054B     	 ldr r3,.L27+4
 635 0010 B3F88C30 	 ldrh r3,[r3,#140]
 636 0014 9AB2     	 uxth r2,r3
 637 0016 034B     	 ldr r3,.L27+4
 638 0018 A3F88C20 	 strh r2,[r3,#140]
 162:../soes/esc.c **** }
 639              	 .loc 1 162 0
 640 001c 80BD     	 pop {r7,pc}
 641              	.L28:
 642 001e 00BF     	 .align 2
 643              	.L27:
 644 0020 8C000000 	 .word ESCvar+140
 645 0024 00000000 	 .word ESCvar
 646              	 .cfi_endproc
 647              	.LFE11:
 649              	 .section .text.ESC_WDstatus,"ax",%progbits
 650              	 .align 2
 651              	 .global ESC_WDstatus
 652              	 .thumb
 653              	 .thumb_func
 655              	ESC_WDstatus:
 656              	.LFB12:
 163:../soes/esc.c **** 
 164:../soes/esc.c **** /** Read Watchdog Status register 0x440. Result Bit0 0= Expired, 1= Active or disabled.
 165:../soes/esc.c ****  *
 166:../soes/esc.c ****  * @return value of register Watchdog Status.
 167:../soes/esc.c ****  */
 168:../soes/esc.c **** uint8_t ESC_WDstatus (void)
 169:../soes/esc.c **** {
 657              	 .loc 1 169 0
 658              	 .cfi_startproc
 659              	 
 660              	 
 661 0000 80B5     	 push {r7,lr}
 662              	.LCFI57:
 663              	 .cfi_def_cfa_offset 8
 664              	 .cfi_offset 7,-8
 665              	 .cfi_offset 14,-4
 666 0002 82B0     	 sub sp,sp,#8
 667              	.LCFI58:
 668              	 .cfi_def_cfa_offset 16
 669 0004 00AF     	 add r7,sp,#0
 670              	.LCFI59:
 671              	 .cfi_def_cfa_register 7
 170:../soes/esc.c ****    uint16_t wdstatus;
 171:../soes/esc.c ****    ESC_read (ESCREG_WDSTATUS, &wdstatus, 2);
 672              	 .loc 1 171 0
 673 0006 BB1D     	 adds r3,r7,#6
 674 0008 4FF48860 	 mov r0,#1088
 675 000c 1946     	 mov r1,r3
 676 000e 0222     	 movs r2,#2
 677 0010 FFF7FEFF 	 bl ESC_read
 172:../soes/esc.c ****    wdstatus = etohs (wdstatus);
 678              	 .loc 1 172 0
 679 0014 FB88     	 ldrh r3,[r7,#6]
 680 0016 FB80     	 strh r3,[r7,#6]
 173:../soes/esc.c ****    return (uint8_t) wdstatus;
 681              	 .loc 1 173 0
 682 0018 FB88     	 ldrh r3,[r7,#6]
 683 001a DBB2     	 uxtb r3,r3
 174:../soes/esc.c **** }
 684              	 .loc 1 174 0
 685 001c 1846     	 mov r0,r3
 686 001e 0837     	 adds r7,r7,#8
 687              	.LCFI60:
 688              	 .cfi_def_cfa_offset 8
 689 0020 BD46     	 mov sp,r7
 690              	.LCFI61:
 691              	 .cfi_def_cfa_register 13
 692              	 
 693 0022 80BD     	 pop {r7,pc}
 694              	 .cfi_endproc
 695              	.LFE12:
 697              	 .section .text.ESC_SYNCactivation,"ax",%progbits
 698              	 .align 2
 699              	 .global ESC_SYNCactivation
 700              	 .thumb
 701              	 .thumb_func
 703              	ESC_SYNCactivation:
 704              	.LFB13:
 175:../soes/esc.c **** 
 176:../soes/esc.c **** /** Read SYNC Out Unit activation registers 0x981
 177:../soes/esc.c ****  *
 178:../soes/esc.c ****  * @return value of register Activation.
 179:../soes/esc.c ****  */
 180:../soes/esc.c **** uint8_t ESC_SYNCactivation (void)
 181:../soes/esc.c **** {
 705              	 .loc 1 181 0
 706              	 .cfi_startproc
 707              	 
 708              	 
 709 0000 80B5     	 push {r7,lr}
 710              	.LCFI62:
 711              	 .cfi_def_cfa_offset 8
 712              	 .cfi_offset 7,-8
 713              	 .cfi_offset 14,-4
 714 0002 82B0     	 sub sp,sp,#8
 715              	.LCFI63:
 716              	 .cfi_def_cfa_offset 16
 717 0004 00AF     	 add r7,sp,#0
 718              	.LCFI64:
 719              	 .cfi_def_cfa_register 7
 182:../soes/esc.c ****    uint8_t activation;
 183:../soes/esc.c ****    ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 720              	 .loc 1 183 0
 721 0006 FB1D     	 adds r3,r7,#7
 722 0008 40F68110 	 movw r0,#2433
 723 000c 1946     	 mov r1,r3
 724 000e 0122     	 movs r2,#1
 725 0010 FFF7FEFF 	 bl ESC_read
 184:../soes/esc.c ****    return activation;
 726              	 .loc 1 184 0
 727 0014 FB79     	 ldrb r3,[r7,#7]
 185:../soes/esc.c **** }
 728              	 .loc 1 185 0
 729 0016 1846     	 mov r0,r3
 730 0018 0837     	 adds r7,r7,#8
 731              	.LCFI65:
 732              	 .cfi_def_cfa_offset 8
 733 001a BD46     	 mov sp,r7
 734              	.LCFI66:
 735              	 .cfi_def_cfa_register 13
 736              	 
 737 001c 80BD     	 pop {r7,pc}
 738              	 .cfi_endproc
 739              	.LFE13:
 741 001e 00BF     	 .section .text.ESC_SYNC0cycletime,"ax",%progbits
 742              	 .align 2
 743              	 .global ESC_SYNC0cycletime
 744              	 .thumb
 745              	 .thumb_func
 747              	ESC_SYNC0cycletime:
 748              	.LFB14:
 186:../soes/esc.c **** 
 187:../soes/esc.c **** /** Read SYNC0 cycle time
 188:../soes/esc.c ****  *
 189:../soes/esc.c ****  * @return value of register SYNC0 cycle time
 190:../soes/esc.c ****  */
 191:../soes/esc.c **** uint32_t ESC_SYNC0cycletime (void)
 192:../soes/esc.c **** {
 749              	 .loc 1 192 0
 750              	 .cfi_startproc
 751              	 
 752              	 
 753 0000 80B5     	 push {r7,lr}
 754              	.LCFI67:
 755              	 .cfi_def_cfa_offset 8
 756              	 .cfi_offset 7,-8
 757              	 .cfi_offset 14,-4
 758 0002 82B0     	 sub sp,sp,#8
 759              	.LCFI68:
 760              	 .cfi_def_cfa_offset 16
 761 0004 00AF     	 add r7,sp,#0
 762              	.LCFI69:
 763              	 .cfi_def_cfa_register 7
 193:../soes/esc.c ****    uint32_t cycletime;
 194:../soes/esc.c ****    ESC_read (ESCREG_SYNC0_CYCLE_TIME, &cycletime, sizeof(cycletime));
 764              	 .loc 1 194 0
 765 0006 3B1D     	 adds r3,r7,#4
 766 0008 4FF41A60 	 mov r0,#2464
 767 000c 1946     	 mov r1,r3
 768 000e 0422     	 movs r2,#4
 769 0010 FFF7FEFF 	 bl ESC_read
 195:../soes/esc.c ****    cycletime = etohl (cycletime);
 770              	 .loc 1 195 0
 771 0014 7B68     	 ldr r3,[r7,#4]
 772 0016 7B60     	 str r3,[r7,#4]
 196:../soes/esc.c ****    return cycletime;
 773              	 .loc 1 196 0
 774 0018 7B68     	 ldr r3,[r7,#4]
 197:../soes/esc.c **** }
 775              	 .loc 1 197 0
 776 001a 1846     	 mov r0,r3
 777 001c 0837     	 adds r7,r7,#8
 778              	.LCFI70:
 779              	 .cfi_def_cfa_offset 8
 780 001e BD46     	 mov sp,r7
 781              	.LCFI71:
 782              	 .cfi_def_cfa_register 13
 783              	 
 784 0020 80BD     	 pop {r7,pc}
 785              	 .cfi_endproc
 786              	.LFE14:
 788 0022 00BF     	 .section .text.ESC_SYNC1cycletime,"ax",%progbits
 789              	 .align 2
 790              	 .global ESC_SYNC1cycletime
 791              	 .thumb
 792              	 .thumb_func
 794              	ESC_SYNC1cycletime:
 795              	.LFB15:
 198:../soes/esc.c **** 
 199:../soes/esc.c **** /** Read SYNC1 cycle time
 200:../soes/esc.c ****  *
 201:../soes/esc.c ****  * @return value of register SYNC1 cycle time
 202:../soes/esc.c ****  */
 203:../soes/esc.c **** uint32_t ESC_SYNC1cycletime (void)
 204:../soes/esc.c **** {
 796              	 .loc 1 204 0
 797              	 .cfi_startproc
 798              	 
 799              	 
 800 0000 80B5     	 push {r7,lr}
 801              	.LCFI72:
 802              	 .cfi_def_cfa_offset 8
 803              	 .cfi_offset 7,-8
 804              	 .cfi_offset 14,-4
 805 0002 82B0     	 sub sp,sp,#8
 806              	.LCFI73:
 807              	 .cfi_def_cfa_offset 16
 808 0004 00AF     	 add r7,sp,#0
 809              	.LCFI74:
 810              	 .cfi_def_cfa_register 7
 205:../soes/esc.c ****    uint32_t cycletime;
 206:../soes/esc.c ****    ESC_read (ESCREG_SYNC1_CYCLE_TIME, &cycletime, 4);
 811              	 .loc 1 206 0
 812 0006 3B1D     	 adds r3,r7,#4
 813 0008 40F6A410 	 movw r0,#2468
 814 000c 1946     	 mov r1,r3
 815 000e 0422     	 movs r2,#4
 816 0010 FFF7FEFF 	 bl ESC_read
 207:../soes/esc.c ****    cycletime = etohl (cycletime);
 817              	 .loc 1 207 0
 818 0014 7B68     	 ldr r3,[r7,#4]
 819 0016 7B60     	 str r3,[r7,#4]
 208:../soes/esc.c ****    return cycletime;
 820              	 .loc 1 208 0
 821 0018 7B68     	 ldr r3,[r7,#4]
 209:../soes/esc.c **** }
 822              	 .loc 1 209 0
 823 001a 1846     	 mov r0,r3
 824 001c 0837     	 adds r7,r7,#8
 825              	.LCFI75:
 826              	 .cfi_def_cfa_offset 8
 827 001e BD46     	 mov sp,r7
 828              	.LCFI76:
 829              	 .cfi_def_cfa_register 13
 830              	 
 831 0020 80BD     	 pop {r7,pc}
 832              	 .cfi_endproc
 833              	.LFE15:
 835 0022 00BF     	 .section .text.ESC_checkDC,"ax",%progbits
 836              	 .align 2
 837              	 .global ESC_checkDC
 838              	 .thumb
 839              	 .thumb_func
 841              	ESC_checkDC:
 842              	.LFB16:
 210:../soes/esc.c **** 
 211:../soes/esc.c **** 
 212:../soes/esc.c **** /** Validate the DC values if the SYNC unit is activated.
 213:../soes/esc.c ****  *
 214:../soes/esc.c ****  * @return = 0 if OK, else ERROR code to be set by caller.
 215:../soes/esc.c ****  */
 216:../soes/esc.c **** uint16_t ESC_checkDC (void)
 217:../soes/esc.c **** {
 843              	 .loc 1 217 0
 844              	 .cfi_startproc
 845              	 
 846              	 
 847 0000 80B5     	 push {r7,lr}
 848              	.LCFI77:
 849              	 .cfi_def_cfa_offset 8
 850              	 .cfi_offset 7,-8
 851              	 .cfi_offset 14,-4
 852 0002 84B0     	 sub sp,sp,#16
 853              	.LCFI78:
 854              	 .cfi_def_cfa_offset 24
 855 0004 00AF     	 add r7,sp,#0
 856              	.LCFI79:
 857              	 .cfi_def_cfa_register 7
 218:../soes/esc.c ****    uint16_t ret = 0;
 858              	 .loc 1 218 0
 859 0006 0023     	 movs r3,#0
 860 0008 FB81     	 strh r3,[r7,#14]
 219:../soes/esc.c **** 
 220:../soes/esc.c ****    uint8_t sync_act = ESC_SYNCactivation();
 861              	 .loc 1 220 0
 862 000a FFF7FEFF 	 bl ESC_SYNCactivation
 863 000e 0346     	 mov r3,r0
 864 0010 7B73     	 strb r3,[r7,#13]
 221:../soes/esc.c ****    uint32_t sync0_cycletime = ESC_SYNC0cycletime();
 865              	 .loc 1 221 0
 866 0012 FFF7FEFF 	 bl ESC_SYNC0cycletime
 867 0016 B860     	 str r0,[r7,#8]
 222:../soes/esc.c ****    uint16_t sync_type_supported1c32 = 0;
 868              	 .loc 1 222 0
 869 0018 0023     	 movs r3,#0
 870 001a FB80     	 strh r3,[r7,#6]
 223:../soes/esc.c ****    uint32_t mincycletime = 0;
 871              	 .loc 1 223 0
 872 001c 0023     	 movs r3,#0
 873 001e 3B60     	 str r3,[r7]
 224:../soes/esc.c **** 
 225:../soes/esc.c ****    /* Do we need to check sync settings? */
 226:../soes/esc.c ****    if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 874              	 .loc 1 226 0
 875 0020 7B7B     	 ldrb r3,[r7,#13]
 876 0022 03F00903 	 and r3,r3,#9
 877 0026 002B     	 cmp r3,#0
 878 0028 5EDD     	 ble .L38
 227:../soes/esc.c ****    {
 228:../soes/esc.c ****       /* If the sync unit is active at least on signal should be activated */
 229:../soes/esc.c ****       if(COE_getSyncMgrPara(0x1c32, 0x4, &sync_type_supported1c32, DTYPE_UNSIGNED16) == 0)
 879              	 .loc 1 229 0
 880 002a BB1D     	 adds r3,r7,#6
 881 002c 41F63240 	 movw r0,#7218
 882 0030 0421     	 movs r1,#4
 883 0032 1A46     	 mov r2,r3
 884 0034 0623     	 movs r3,#6
 885 0036 FFF7FEFF 	 bl COE_getSyncMgrPara
 886 003a 0346     	 mov r3,r0
 887 003c 002B     	 cmp r3,#0
 888 003e 02D1     	 bne .L39
 230:../soes/esc.c ****       {
 231:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 889              	 .loc 1 231 0
 890 0040 3023     	 movs r3,#48
 891 0042 FB81     	 strh r3,[r7,#14]
 892 0044 58E0     	 b .L47
 893              	.L39:
 232:../soes/esc.c **** 
 233:../soes/esc.c ****       }
 234:../soes/esc.c ****       else if(COE_getSyncMgrPara(0x1c32, 0x5, &mincycletime, DTYPE_UNSIGNED32) == 0)
 894              	 .loc 1 234 0
 895 0046 3B46     	 mov r3,r7
 896 0048 41F63240 	 movw r0,#7218
 897 004c 0521     	 movs r1,#5
 898 004e 1A46     	 mov r2,r3
 899 0050 0723     	 movs r3,#7
 900 0052 FFF7FEFF 	 bl COE_getSyncMgrPara
 901 0056 0346     	 mov r3,r0
 902 0058 002B     	 cmp r3,#0
 903 005a 02D1     	 bne .L41
 235:../soes/esc.c ****       {
 236:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 904              	 .loc 1 236 0
 905 005c 3023     	 movs r3,#48
 906 005e FB81     	 strh r3,[r7,#14]
 907 0060 4AE0     	 b .L47
 908              	.L41:
 237:../soes/esc.c ****       }
 238:../soes/esc.c ****       else if(COE_getSyncMgrPara(0x10F1, 0x2, &ESCvar.synccounterlimit, DTYPE_UNSIGNED16) == 0)
 909              	 .loc 1 238 0
 910 0062 41F2F100 	 movw r0,#4337
 911 0066 0221     	 movs r1,#2
 912 0068 264A     	 ldr r2,.L49
 913 006a 0623     	 movs r3,#6
 914 006c FFF7FEFF 	 bl COE_getSyncMgrPara
 915 0070 0346     	 mov r3,r0
 916 0072 002B     	 cmp r3,#0
 917 0074 02D1     	 bne .L42
 239:../soes/esc.c ****       {
 240:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 918              	 .loc 1 240 0
 919 0076 3023     	 movs r3,#48
 920 0078 FB81     	 strh r3,[r7,#14]
 921 007a 3DE0     	 b .L47
 922              	.L42:
 241:../soes/esc.c ****       }
 242:../soes/esc.c ****       else if((sync_act & (ESCREG_SYNC_SYNC0_EN | ESCREG_SYNC_SYNC1_EN)) == 0)
 923              	 .loc 1 242 0
 924 007c 7B7B     	 ldrb r3,[r7,#13]
 925 007e 03F00603 	 and r3,r3,#6
 926 0082 002B     	 cmp r3,#0
 927 0084 02D1     	 bne .L43
 243:../soes/esc.c ****       {
 244:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 928              	 .loc 1 244 0
 929 0086 3023     	 movs r3,#48
 930 0088 FB81     	 strh r3,[r7,#14]
 931 008a 35E0     	 b .L47
 932              	.L43:
 245:../soes/esc.c ****       }
 246:../soes/esc.c ****       /* Do we support activated signals */
 247:../soes/esc.c ****       else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC0) == 0) &&
 933              	 .loc 1 247 0
 934 008c FB88     	 ldrh r3,[r7,#6]
 935 008e 03F00403 	 and r3,r3,#4
 936 0092 002B     	 cmp r3,#0
 937 0094 07D1     	 bne .L44
 248:../soes/esc.c ****             ((sync_act & ESCREG_SYNC_SYNC0_EN) > 0))
 938              	 .loc 1 248 0 discriminator 1
 939 0096 7B7B     	 ldrb r3,[r7,#13]
 940 0098 03F00203 	 and r3,r3,#2
 247:../soes/esc.c ****             ((sync_act & ESCREG_SYNC_SYNC0_EN) > 0))
 941              	 .loc 1 247 0 discriminator 1
 942 009c 002B     	 cmp r3,#0
 943 009e 02DD     	 ble .L44
 249:../soes/esc.c ****       {
 250:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 944              	 .loc 1 250 0
 945 00a0 3023     	 movs r3,#48
 946 00a2 FB81     	 strh r3,[r7,#14]
 947 00a4 1FE0     	 b .L40
 948              	.L44:
 251:../soes/esc.c ****       }
 252:../soes/esc.c ****       /* Do we support activated signals */
 253:../soes/esc.c ****       else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC1) == 0) &&
 949              	 .loc 1 253 0
 950 00a6 FB88     	 ldrh r3,[r7,#6]
 951 00a8 03F00803 	 and r3,r3,#8
 952 00ac 002B     	 cmp r3,#0
 953 00ae 07D1     	 bne .L45
 254:../soes/esc.c ****             ((sync_act & ESCREG_SYNC_SYNC1_EN) > 0))
 954              	 .loc 1 254 0 discriminator 1
 955 00b0 7B7B     	 ldrb r3,[r7,#13]
 956 00b2 03F00403 	 and r3,r3,#4
 253:../soes/esc.c ****             ((sync_act & ESCREG_SYNC_SYNC1_EN) > 0))
 957              	 .loc 1 253 0 discriminator 1
 958 00b6 002B     	 cmp r3,#0
 959 00b8 02DD     	 ble .L45
 255:../soes/esc.c ****       {
 256:../soes/esc.c ****          ret = ALERR_DCINVALIDSYNCCFG;
 960              	 .loc 1 256 0
 961 00ba 3023     	 movs r3,#48
 962 00bc FB81     	 strh r3,[r7,#14]
 963 00be 12E0     	 b .L40
 964              	.L45:
 257:../soes/esc.c ****       }
 258:../soes/esc.c ****       else if((sync0_cycletime != 0) && (sync0_cycletime < mincycletime))
 965              	 .loc 1 258 0
 966 00c0 BB68     	 ldr r3,[r7,#8]
 967 00c2 002B     	 cmp r3,#0
 968 00c4 06D0     	 beq .L46
 969              	 .loc 1 258 0 is_stmt 0 discriminator 1
 970 00c6 3B68     	 ldr r3,[r7]
 971 00c8 BA68     	 ldr r2,[r7,#8]
 972 00ca 9A42     	 cmp r2,r3
 973 00cc 02D2     	 bcs .L46
 259:../soes/esc.c ****       {
 260:../soes/esc.c ****          ret = ALERR_DCSYNC0CYCLETIME;
 974              	 .loc 1 260 0 is_stmt 1
 975 00ce 3623     	 movs r3,#54
 976 00d0 FB81     	 strh r3,[r7,#14]
 977 00d2 08E0     	 b .L40
 978              	.L46:
 261:../soes/esc.c ****       }
 262:../soes/esc.c ****       else
 263:../soes/esc.c ****       {
 264:../soes/esc.c ****          ESCvar.dcsync = 1;
 979              	 .loc 1 264 0
 980 00d4 0C4B     	 ldr r3,.L49+4
 981 00d6 0122     	 movs r2,#1
 982 00d8 83F88120 	 strb r2,[r3,#129]
 265:../soes/esc.c ****          ESCvar.synccounter = 0;
 983              	 .loc 1 265 0
 984 00dc 0A4B     	 ldr r3,.L49+4
 985 00de 0022     	 movs r2,#0
 986 00e0 83F8D220 	 strb r2,[r3,#210]
 987 00e4 08E0     	 b .L47
 988              	.L40:
 989 00e6 07E0     	 b .L47
 990              	.L38:
 266:../soes/esc.c ****       }
 267:../soes/esc.c ****    }
 268:../soes/esc.c ****    else
 269:../soes/esc.c ****    {
 270:../soes/esc.c ****       ESCvar.dcsync = 0;
 991              	 .loc 1 270 0
 992 00e8 074B     	 ldr r3,.L49+4
 993 00ea 0022     	 movs r2,#0
 994 00ec 83F88120 	 strb r2,[r3,#129]
 271:../soes/esc.c ****       ESCvar.synccounter = 0;
 995              	 .loc 1 271 0
 996 00f0 054B     	 ldr r3,.L49+4
 997 00f2 0022     	 movs r2,#0
 998 00f4 83F8D220 	 strb r2,[r3,#210]
 999              	.L47:
 272:../soes/esc.c ****    }
 273:../soes/esc.c **** 
 274:../soes/esc.c ****    return ret;
 1000              	 .loc 1 274 0
 1001 00f8 FB89     	 ldrh r3,[r7,#14]
 275:../soes/esc.c **** }
 1002              	 .loc 1 275 0
 1003 00fa 1846     	 mov r0,r3
 1004 00fc 1037     	 adds r7,r7,#16
 1005              	.LCFI80:
 1006              	 .cfi_def_cfa_offset 8
 1007 00fe BD46     	 mov sp,r7
 1008              	.LCFI81:
 1009              	 .cfi_def_cfa_register 13
 1010              	 
 1011 0100 80BD     	 pop {r7,pc}
 1012              	.L50:
 1013 0102 00BF     	 .align 2
 1014              	.L49:
 1015 0104 82000000 	 .word ESCvar+130
 1016 0108 00000000 	 .word ESCvar
 1017              	 .cfi_endproc
 1018              	.LFE16:
 1020              	 .section .text.ESC_checkmbx,"ax",%progbits
 1021              	 .align 2
 1022              	 .global ESC_checkmbx
 1023              	 .thumb
 1024              	 .thumb_func
 1026              	ESC_checkmbx:
 1027              	.LFB17:
 276:../soes/esc.c **** 
 277:../soes/esc.c **** /** Check mailbox status by reading all SyncManager 0 and 1 data. The read values
 278:../soes/esc.c ****  * are compared with local definitions for SM Physical Address, SM Length and SM Control.
 279:../soes/esc.c ****  * If we check fails we disable Mailboxes by disabling SyncManager 0 and 1 and return
 280:../soes/esc.c ****  * state Init with Error flag set.
 281:../soes/esc.c ****  *
 282:../soes/esc.c ****  * @param[in] state   = Current state request read from ALControl 0x0120
 283:../soes/esc.c ****  * @return if all Mailbox values is correct we return incoming state request, otherwise
 284:../soes/esc.c ****  * we return state Init with Error flag set.
 285:../soes/esc.c ****  */
 286:../soes/esc.c **** uint8_t ESC_checkmbx (uint8_t state)
 287:../soes/esc.c **** {
 1028              	 .loc 1 287 0
 1029              	 .cfi_startproc
 1030              	 
 1031              	 
 1032 0000 80B5     	 push {r7,lr}
 1033              	.LCFI82:
 1034              	 .cfi_def_cfa_offset 8
 1035              	 .cfi_offset 7,-8
 1036              	 .cfi_offset 14,-4
 1037 0002 84B0     	 sub sp,sp,#16
 1038              	.LCFI83:
 1039              	 .cfi_def_cfa_offset 24
 1040 0004 00AF     	 add r7,sp,#0
 1041              	.LCFI84:
 1042              	 .cfi_def_cfa_register 7
 1043 0006 0346     	 mov r3,r0
 1044 0008 FB71     	 strb r3,[r7,#7]
 288:../soes/esc.c ****    _ESCsm2 *SM;
 289:../soes/esc.c ****    ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 1045              	 .loc 1 289 0
 1046 000a 4FF40060 	 mov r0,#2048
 1047 000e 3749     	 ldr r1,.L57
 1048 0010 0822     	 movs r2,#8
 1049 0012 FFF7FEFF 	 bl ESC_read
 290:../soes/esc.c ****    ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 1050              	 .loc 1 290 0
 1051 0016 40F60800 	 movw r0,#2056
 1052 001a 3549     	 ldr r1,.L57+4
 1053 001c 0822     	 movs r2,#8
 1054 001e FFF7FEFF 	 bl ESC_read
 291:../soes/esc.c ****    SM = (_ESCsm2 *) & ESCvar.SM[0];
 1055              	 .loc 1 291 0
 1056 0022 324B     	 ldr r3,.L57
 1057 0024 FB60     	 str r3,[r7,#12]
 292:../soes/esc.c ****    if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 1058              	 .loc 1 292 0
 1059 0026 FB68     	 ldr r3,[r7,#12]
 1060 0028 1B88     	 ldrh r3,[r3]
 1061 002a 9AB2     	 uxth r2,r3
 1062 002c 314B     	 ldr r3,.L57+8
 1063 002e D3F87130 	 ldr r3,[r3,#113]
 1064 0032 1B88     	 ldrh r3,[r3]
 1065 0034 9A42     	 cmp r2,r3
 1066 0036 18D1     	 bne .L52
 1067              	 .loc 1 292 0 is_stmt 0 discriminator 1
 1068 0038 FB68     	 ldr r3,[r7,#12]
 1069 003a 5B88     	 ldrh r3,[r3,#2]
 1070 003c 9AB2     	 uxth r2,r3
 1071 003e 2D4B     	 ldr r3,.L57+8
 1072 0040 D3F87130 	 ldr r3,[r3,#113]
 1073 0044 5B88     	 ldrh r3,[r3,#2]
 1074 0046 9A42     	 cmp r2,r3
 1075 0048 0FD1     	 bne .L52
 293:../soes/esc.c ****        || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 1076              	 .loc 1 293 0 is_stmt 1
 1077 004a FB68     	 ldr r3,[r7,#12]
 1078 004c 1A79     	 ldrb r2,[r3,#4]
 1079 004e 294B     	 ldr r3,.L57+8
 1080 0050 D3F87130 	 ldr r3,[r3,#113]
 1081 0054 9B79     	 ldrb r3,[r3,#6]
 1082 0056 9A42     	 cmp r2,r3
 1083 0058 07D1     	 bne .L52
 1084              	 .loc 1 293 0 is_stmt 0 discriminator 1
 1085 005a 264B     	 ldr r3,.L57+8
 1086 005c 93F8AE30 	 ldrb r3,[r3,#174]
 1087 0060 03F00103 	 and r3,r3,#1
 1088 0064 DBB2     	 uxtb r3,r3
 1089 0066 002B     	 cmp r3,#0
 1090 0068 0BD1     	 bne .L53
 1091              	.L52:
 294:../soes/esc.c ****    {
 295:../soes/esc.c ****       ESCvar.SMtestresult = SMRESULT_ERRSM0;
 1092              	 .loc 1 295 0 is_stmt 1
 1093 006a 224B     	 ldr r3,.L57+8
 1094 006c 0122     	 movs r2,#1
 1095 006e 83F8A120 	 strb r2,[r3,#161]
 296:../soes/esc.c ****       ESC_SMdisable (0);
 1096              	 .loc 1 296 0
 1097 0072 0020     	 movs r0,#0
 1098 0074 FFF7FEFF 	 bl ESC_SMdisable
 297:../soes/esc.c ****       ESC_SMdisable (1);
 1099              	 .loc 1 297 0
 1100 0078 0120     	 movs r0,#1
 1101 007a FFF7FEFF 	 bl ESC_SMdisable
 298:../soes/esc.c ****       return (uint8_t) (ESCinit | ESCerror);      //fail state change
 1102              	 .loc 1 298 0
 1103 007e 1123     	 movs r3,#17
 1104 0080 30E0     	 b .L54
 1105              	.L53:
 299:../soes/esc.c ****    }
 300:../soes/esc.c ****    SM = (_ESCsm2 *) & ESCvar.SM[1];
 1106              	 .loc 1 300 0
 1107 0082 1B4B     	 ldr r3,.L57+4
 1108 0084 FB60     	 str r3,[r7,#12]
 301:../soes/esc.c ****    if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 1109              	 .loc 1 301 0
 1110 0086 FB68     	 ldr r3,[r7,#12]
 1111 0088 1B88     	 ldrh r3,[r3]
 1112 008a 9AB2     	 uxth r2,r3
 1113 008c 194B     	 ldr r3,.L57+8
 1114 008e D3F87530 	 ldr r3,[r3,#117]
 1115 0092 1B88     	 ldrh r3,[r3]
 1116 0094 9A42     	 cmp r2,r3
 1117 0096 18D1     	 bne .L55
 1118              	 .loc 1 301 0 is_stmt 0 discriminator 1
 1119 0098 FB68     	 ldr r3,[r7,#12]
 1120 009a 5B88     	 ldrh r3,[r3,#2]
 1121 009c 9AB2     	 uxth r2,r3
 1122 009e 154B     	 ldr r3,.L57+8
 1123 00a0 D3F87530 	 ldr r3,[r3,#117]
 1124 00a4 5B88     	 ldrh r3,[r3,#2]
 1125 00a6 9A42     	 cmp r2,r3
 1126 00a8 0FD1     	 bne .L55
 302:../soes/esc.c ****        || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 1127              	 .loc 1 302 0 is_stmt 1
 1128 00aa FB68     	 ldr r3,[r7,#12]
 1129 00ac 1A79     	 ldrb r2,[r3,#4]
 1130 00ae 114B     	 ldr r3,.L57+8
 1131 00b0 D3F87530 	 ldr r3,[r3,#117]
 1132 00b4 9B79     	 ldrb r3,[r3,#6]
 1133 00b6 9A42     	 cmp r2,r3
 1134 00b8 07D1     	 bne .L55
 1135              	 .loc 1 302 0 is_stmt 0 discriminator 1
 1136 00ba 0E4B     	 ldr r3,.L57+8
 1137 00bc 93F8B630 	 ldrb r3,[r3,#182]
 1138 00c0 03F00103 	 and r3,r3,#1
 1139 00c4 DBB2     	 uxtb r3,r3
 1140 00c6 002B     	 cmp r3,#0
 1141 00c8 0BD1     	 bne .L56
 1142              	.L55:
 303:../soes/esc.c ****    {
 304:../soes/esc.c ****       ESCvar.SMtestresult = SMRESULT_ERRSM1;
 1143              	 .loc 1 304 0 is_stmt 1
 1144 00ca 0A4B     	 ldr r3,.L57+8
 1145 00cc 0222     	 movs r2,#2
 1146 00ce 83F8A120 	 strb r2,[r3,#161]
 305:../soes/esc.c ****       ESC_SMdisable (0);
 1147              	 .loc 1 305 0
 1148 00d2 0020     	 movs r0,#0
 1149 00d4 FFF7FEFF 	 bl ESC_SMdisable
 306:../soes/esc.c ****       ESC_SMdisable (1);
 1150              	 .loc 1 306 0
 1151 00d8 0120     	 movs r0,#1
 1152 00da FFF7FEFF 	 bl ESC_SMdisable
 307:../soes/esc.c ****       return ESCinit | ESCerror;        //fail state change
 1153              	 .loc 1 307 0
 1154 00de 1123     	 movs r3,#17
 1155 00e0 00E0     	 b .L54
 1156              	.L56:
 308:../soes/esc.c ****    }
 309:../soes/esc.c ****    return state;
 1157              	 .loc 1 309 0
 1158 00e2 FB79     	 ldrb r3,[r7,#7]
 1159              	.L54:
 310:../soes/esc.c **** }
 1160              	 .loc 1 310 0
 1161 00e4 1846     	 mov r0,r3
 1162 00e6 1037     	 adds r7,r7,#16
 1163              	.LCFI85:
 1164              	 .cfi_def_cfa_offset 8
 1165 00e8 BD46     	 mov sp,r7
 1166              	.LCFI86:
 1167              	 .cfi_def_cfa_register 13
 1168              	 
 1169 00ea 80BD     	 pop {r7,pc}
 1170              	.L58:
 1171              	 .align 2
 1172              	.L57:
 1173 00ec A8000000 	 .word ESCvar+168
 1174 00f0 B0000000 	 .word ESCvar+176
 1175 00f4 00000000 	 .word ESCvar
 1176              	 .cfi_endproc
 1177              	.LFE17:
 1179              	 .section .text.ESC_startmbx,"ax",%progbits
 1180              	 .align 2
 1181              	 .global ESC_startmbx
 1182              	 .thumb
 1183              	 .thumb_func
 1185              	ESC_startmbx:
 1186              	.LFB18:
 311:../soes/esc.c **** /** Try to start mailboxes for current ALControl state request by enabling SyncManager 0 and 1.
 312:../soes/esc.c ****  * If all mailbox settings is correct we return incoming state request, otherwise
 313:../soes/esc.c ****  * we return state Init with Error flag set and update local ALerror with code 0x16 Invalid
 314:../soes/esc.c ****  * mailbox configuration.
 315:../soes/esc.c ****  *
 316:../soes/esc.c ****  * @param[in] state   = Current state request read from ALControl 0x0120
 317:../soes/esc.c ****  * @return if all Mailbox values is correct we return incoming state, otherwise
 318:../soes/esc.c ****  * we return state Init with Error flag set.
 319:../soes/esc.c ****  */
 320:../soes/esc.c **** uint8_t ESC_startmbx (uint8_t state)
 321:../soes/esc.c **** {
 1187              	 .loc 1 321 0
 1188              	 .cfi_startproc
 1189              	 
 1190              	 
 1191 0000 80B5     	 push {r7,lr}
 1192              	.LCFI87:
 1193              	 .cfi_def_cfa_offset 8
 1194              	 .cfi_offset 7,-8
 1195              	 .cfi_offset 14,-4
 1196 0002 82B0     	 sub sp,sp,#8
 1197              	.LCFI88:
 1198              	 .cfi_def_cfa_offset 16
 1199 0004 00AF     	 add r7,sp,#0
 1200              	.LCFI89:
 1201              	 .cfi_def_cfa_register 7
 1202 0006 0346     	 mov r3,r0
 1203 0008 FB71     	 strb r3,[r7,#7]
 322:../soes/esc.c ****    /* Assign SM settings */
 323:../soes/esc.c ****    ESCvar.activembxsize = ESCvar.mbxsize;
 1204              	 .loc 1 323 0
 1205 000a 214B     	 ldr r3,.L63
 1206 000c 5B68     	 ldr r3,[r3,#4]
 1207 000e 204A     	 ldr r2,.L63
 1208 0010 C2F86D30 	 str r3,[r2,#109]
 324:../soes/esc.c ****    ESCvar.activemb0 = &ESCvar.mb[0];
 1209              	 .loc 1 324 0
 1210 0014 1E4B     	 ldr r3,.L63
 1211 0016 1F4A     	 ldr r2,.L63+4
 1212 0018 C3F87120 	 str r2,[r3,#113]
 325:../soes/esc.c ****    ESCvar.activemb1 = &ESCvar.mb[1];
 1213              	 .loc 1 325 0
 1214 001c 1C4B     	 ldr r3,.L63
 1215 001e 1E4A     	 ldr r2,.L63+8
 1216 0020 C3F87520 	 str r2,[r3,#117]
 326:../soes/esc.c **** 
 327:../soes/esc.c **** 
 328:../soes/esc.c ****    ESC_SMenable (0);
 1217              	 .loc 1 328 0
 1218 0024 0020     	 movs r0,#0
 1219 0026 FFF7FEFF 	 bl ESC_SMenable
 329:../soes/esc.c ****    ESC_SMenable (1);
 1220              	 .loc 1 329 0
 1221 002a 0120     	 movs r0,#1
 1222 002c FFF7FEFF 	 bl ESC_SMenable
 330:../soes/esc.c ****    ESC_SMstatus (0);
 1223              	 .loc 1 330 0
 1224 0030 0020     	 movs r0,#0
 1225 0032 FFF7FEFF 	 bl ESC_SMstatus
 331:../soes/esc.c ****    ESC_SMstatus (1);
 1226              	 .loc 1 331 0
 1227 0036 0120     	 movs r0,#1
 1228 0038 FFF7FEFF 	 bl ESC_SMstatus
 332:../soes/esc.c ****    if ((state = ESC_checkmbx (state)) & ESCerror)
 1229              	 .loc 1 332 0
 1230 003c FB79     	 ldrb r3,[r7,#7]
 1231 003e 1846     	 mov r0,r3
 1232 0040 FFF7FEFF 	 bl ESC_checkmbx
 1233 0044 0346     	 mov r3,r0
 1234 0046 FB71     	 strb r3,[r7,#7]
 1235 0048 FB79     	 ldrb r3,[r7,#7]
 1236 004a 03F01003 	 and r3,r3,#16
 1237 004e 002B     	 cmp r3,#0
 1238 0050 07D0     	 beq .L60
 333:../soes/esc.c ****    {
 334:../soes/esc.c ****       ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 1239              	 .loc 1 334 0
 1240 0052 1620     	 movs r0,#22
 1241 0054 FFF7FEFF 	 bl ESC_ALerror
 335:../soes/esc.c ****       ESCvar.MBXrun = 0;
 1242              	 .loc 1 335 0
 1243 0058 0D4B     	 ldr r3,.L63
 1244 005a 0022     	 movs r2,#0
 1245 005c 83F86C20 	 strb r2,[r3,#108]
 1246 0060 10E0     	 b .L61
 1247              	.L60:
 336:../soes/esc.c ****    }
 337:../soes/esc.c ****    else
 338:../soes/esc.c ****    {
 339:../soes/esc.c ****       ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 1248              	 .loc 1 339 0
 1249 0062 0B4B     	 ldr r3,.L63
 1250 0064 93F8B630 	 ldrb r3,[r3,#182]
 1251 0068 C3F34003 	 ubfx r3,r3,#1,#1
 1252 006c D9B2     	 uxtb r1,r3
 1253 006e 084A     	 ldr r2,.L63
 1254 0070 92F8A030 	 ldrb r3,[r2,#160]
 1255 0074 61F34103 	 bfi r3,r1,#1,#1
 1256 0078 82F8A030 	 strb r3,[r2,#160]
 340:../soes/esc.c ****       ESCvar.MBXrun = 1;
 1257              	 .loc 1 340 0
 1258 007c 044B     	 ldr r3,.L63
 1259 007e 0122     	 movs r2,#1
 1260 0080 83F86C20 	 strb r2,[r3,#108]
 1261              	.L61:
 341:../soes/esc.c ****    }
 342:../soes/esc.c ****    return state;
 1262              	 .loc 1 342 0
 1263 0084 FB79     	 ldrb r3,[r7,#7]
 343:../soes/esc.c **** }
 1264              	 .loc 1 343 0
 1265 0086 1846     	 mov r0,r3
 1266 0088 0837     	 adds r7,r7,#8
 1267              	.LCFI90:
 1268              	 .cfi_def_cfa_offset 8
 1269 008a BD46     	 mov sp,r7
 1270              	.LCFI91:
 1271              	 .cfi_def_cfa_register 13
 1272              	 
 1273 008c 80BD     	 pop {r7,pc}
 1274              	.L64:
 1275 008e 00BF     	 .align 2
 1276              	.L63:
 1277 0090 00000000 	 .word ESCvar
 1278 0094 10000000 	 .word ESCvar+16
 1279 0098 18000000 	 .word ESCvar+24
 1280              	 .cfi_endproc
 1281              	.LFE18:
 1283              	 .section .text.ESC_startmbxboot,"ax",%progbits
 1284              	 .align 2
 1285              	 .global ESC_startmbxboot
 1286              	 .thumb
 1287              	 .thumb_func
 1289              	ESC_startmbxboot:
 1290              	.LFB19:
 344:../soes/esc.c **** 
 345:../soes/esc.c **** /** Try to start bootstrap mailboxes for current ALControl state request by enabling SyncManager 0 
 346:../soes/esc.c ****  * If all mailbox settings is correct we return incoming state request, otherwise
 347:../soes/esc.c ****  * we return state Init with Error flag set and update local ALerror with code 0x16 Invalid
 348:../soes/esc.c ****  * mailbox configuration.
 349:../soes/esc.c ****  *
 350:../soes/esc.c ****  * @param[in] state   = Current state request read from ALControl 0x0120
 351:../soes/esc.c ****  * @return if all Mailbox values is correct we return incoming state, otherwise
 352:../soes/esc.c ****  * we return state Init with Error flag set.
 353:../soes/esc.c ****  */
 354:../soes/esc.c **** uint8_t ESC_startmbxboot (uint8_t state)
 355:../soes/esc.c **** {
 1291              	 .loc 1 355 0
 1292              	 .cfi_startproc
 1293              	 
 1294              	 
 1295 0000 80B5     	 push {r7,lr}
 1296              	.LCFI92:
 1297              	 .cfi_def_cfa_offset 8
 1298              	 .cfi_offset 7,-8
 1299              	 .cfi_offset 14,-4
 1300 0002 82B0     	 sub sp,sp,#8
 1301              	.LCFI93:
 1302              	 .cfi_def_cfa_offset 16
 1303 0004 00AF     	 add r7,sp,#0
 1304              	.LCFI94:
 1305              	 .cfi_def_cfa_register 7
 1306 0006 0346     	 mov r3,r0
 1307 0008 FB71     	 strb r3,[r7,#7]
 356:../soes/esc.c ****    /* Assign SM settings */
 357:../soes/esc.c ****    ESCvar.activembxsize = ESCvar.mbxsizeboot;
 1308              	 .loc 1 357 0
 1309 000a 214B     	 ldr r3,.L69
 1310 000c 9B68     	 ldr r3,[r3,#8]
 1311 000e 204A     	 ldr r2,.L69
 1312 0010 C2F86D30 	 str r3,[r2,#109]
 358:../soes/esc.c ****    ESCvar.activemb0 = &ESCvar.mbboot[0];
 1313              	 .loc 1 358 0
 1314 0014 1E4B     	 ldr r3,.L69
 1315 0016 1F4A     	 ldr r2,.L69+4
 1316 0018 C3F87120 	 str r2,[r3,#113]
 359:../soes/esc.c ****    ESCvar.activemb1 = &ESCvar.mbboot[1];
 1317              	 .loc 1 359 0
 1318 001c 1C4B     	 ldr r3,.L69
 1319 001e 1E4A     	 ldr r2,.L69+8
 1320 0020 C3F87520 	 str r2,[r3,#117]
 360:../soes/esc.c **** 
 361:../soes/esc.c ****    ESC_SMenable (0);
 1321              	 .loc 1 361 0
 1322 0024 0020     	 movs r0,#0
 1323 0026 FFF7FEFF 	 bl ESC_SMenable
 362:../soes/esc.c ****    ESC_SMenable (1);
 1324              	 .loc 1 362 0
 1325 002a 0120     	 movs r0,#1
 1326 002c FFF7FEFF 	 bl ESC_SMenable
 363:../soes/esc.c ****    ESC_SMstatus (0);
 1327              	 .loc 1 363 0
 1328 0030 0020     	 movs r0,#0
 1329 0032 FFF7FEFF 	 bl ESC_SMstatus
 364:../soes/esc.c ****    ESC_SMstatus (1);
 1330              	 .loc 1 364 0
 1331 0036 0120     	 movs r0,#1
 1332 0038 FFF7FEFF 	 bl ESC_SMstatus
 365:../soes/esc.c ****    if ((state = ESC_checkmbx (state)) & ESCerror)
 1333              	 .loc 1 365 0
 1334 003c FB79     	 ldrb r3,[r7,#7]
 1335 003e 1846     	 mov r0,r3
 1336 0040 FFF7FEFF 	 bl ESC_checkmbx
 1337 0044 0346     	 mov r3,r0
 1338 0046 FB71     	 strb r3,[r7,#7]
 1339 0048 FB79     	 ldrb r3,[r7,#7]
 1340 004a 03F01003 	 and r3,r3,#16
 1341 004e 002B     	 cmp r3,#0
 1342 0050 07D0     	 beq .L66
 366:../soes/esc.c ****    {
 367:../soes/esc.c ****       ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 1343              	 .loc 1 367 0
 1344 0052 1520     	 movs r0,#21
 1345 0054 FFF7FEFF 	 bl ESC_ALerror
 368:../soes/esc.c ****       ESCvar.MBXrun = 0;
 1346              	 .loc 1 368 0
 1347 0058 0D4B     	 ldr r3,.L69
 1348 005a 0022     	 movs r2,#0
 1349 005c 83F86C20 	 strb r2,[r3,#108]
 1350 0060 10E0     	 b .L67
 1351              	.L66:
 369:../soes/esc.c ****    }
 370:../soes/esc.c ****    else
 371:../soes/esc.c ****    {
 372:../soes/esc.c ****       ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 1352              	 .loc 1 372 0
 1353 0062 0B4B     	 ldr r3,.L69
 1354 0064 93F8B630 	 ldrb r3,[r3,#182]
 1355 0068 C3F34003 	 ubfx r3,r3,#1,#1
 1356 006c D9B2     	 uxtb r1,r3
 1357 006e 084A     	 ldr r2,.L69
 1358 0070 92F8A030 	 ldrb r3,[r2,#160]
 1359 0074 61F34103 	 bfi r3,r1,#1,#1
 1360 0078 82F8A030 	 strb r3,[r2,#160]
 373:../soes/esc.c ****       ESCvar.MBXrun = 1;
 1361              	 .loc 1 373 0
 1362 007c 044B     	 ldr r3,.L69
 1363 007e 0122     	 movs r2,#1
 1364 0080 83F86C20 	 strb r2,[r3,#108]
 1365              	.L67:
 374:../soes/esc.c ****    }
 375:../soes/esc.c ****    return state;
 1366              	 .loc 1 375 0
 1367 0084 FB79     	 ldrb r3,[r7,#7]
 376:../soes/esc.c **** }
 1368              	 .loc 1 376 0
 1369 0086 1846     	 mov r0,r3
 1370 0088 0837     	 adds r7,r7,#8
 1371              	.LCFI95:
 1372              	 .cfi_def_cfa_offset 8
 1373 008a BD46     	 mov sp,r7
 1374              	.LCFI96:
 1375              	 .cfi_def_cfa_register 13
 1376              	 
 1377 008c 80BD     	 pop {r7,pc}
 1378              	.L70:
 1379 008e 00BF     	 .align 2
 1380              	.L69:
 1381 0090 00000000 	 .word ESCvar
 1382 0094 20000000 	 .word ESCvar+32
 1383 0098 28000000 	 .word ESCvar+40
 1384              	 .cfi_endproc
 1385              	.LFE19:
 1387              	 .section .text.ESC_stopmbx,"ax",%progbits
 1388              	 .align 2
 1389              	 .global ESC_stopmbx
 1390              	 .thumb
 1391              	 .thumb_func
 1393              	ESC_stopmbx:
 1394              	.LFB20:
 377:../soes/esc.c **** 
 378:../soes/esc.c **** /** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 379:../soes/esc.c ****  * stored in ESCvar.
 380:../soes/esc.c ****  */
 381:../soes/esc.c **** void ESC_stopmbx (void)
 382:../soes/esc.c **** {
 1395              	 .loc 1 382 0
 1396              	 .cfi_startproc
 1397              	 
 1398              	 
 1399 0000 80B5     	 push {r7,lr}
 1400              	.LCFI97:
 1401              	 .cfi_def_cfa_offset 8
 1402              	 .cfi_offset 7,-8
 1403              	 .cfi_offset 14,-4
 1404 0002 82B0     	 sub sp,sp,#8
 1405              	.LCFI98:
 1406              	 .cfi_def_cfa_offset 16
 1407 0004 00AF     	 add r7,sp,#0
 1408              	.LCFI99:
 1409              	 .cfi_def_cfa_register 7
 383:../soes/esc.c ****    uint8_t n;
 384:../soes/esc.c ****    ESCvar.MBXrun = 0;
 1410              	 .loc 1 384 0
 1411 0006 264B     	 ldr r3,.L74
 1412 0008 0022     	 movs r2,#0
 1413 000a 83F86C20 	 strb r2,[r3,#108]
 385:../soes/esc.c ****    ESC_SMdisable (0);
 1414              	 .loc 1 385 0
 1415 000e 0020     	 movs r0,#0
 1416 0010 FFF7FEFF 	 bl ESC_SMdisable
 386:../soes/esc.c ****    ESC_SMdisable (1);
 1417              	 .loc 1 386 0
 1418 0014 0120     	 movs r0,#1
 1419 0016 FFF7FEFF 	 bl ESC_SMdisable
 387:../soes/esc.c ****    for (n = 0; n < ESC_MBXBUFFERS; n++)
 1420              	 .loc 1 387 0
 1421 001a 0023     	 movs r3,#0
 1422 001c FB71     	 strb r3,[r7,#7]
 1423 001e 06E0     	 b .L72
 1424              	.L73:
 388:../soes/esc.c ****    {
 389:../soes/esc.c ****       MBXcontrol[n].state = MBXstate_idle;
 1425              	 .loc 1 389 0 discriminator 3
 1426 0020 FB79     	 ldrb r3,[r7,#7]
 1427 0022 204A     	 ldr r2,.L74+4
 1428 0024 0021     	 movs r1,#0
 1429 0026 D154     	 strb r1,[r2,r3]
 387:../soes/esc.c ****    for (n = 0; n < ESC_MBXBUFFERS; n++)
 1430              	 .loc 1 387 0 discriminator 3
 1431 0028 FB79     	 ldrb r3,[r7,#7]
 1432 002a 0133     	 adds r3,r3,#1
 1433 002c FB71     	 strb r3,[r7,#7]
 1434              	.L72:
 387:../soes/esc.c ****    for (n = 0; n < ESC_MBXBUFFERS; n++)
 1435              	 .loc 1 387 0 is_stmt 0 discriminator 1
 1436 002e FA79     	 ldrb r2,[r7,#7]
 1437 0030 1B4B     	 ldr r3,.L74
 1438 0032 DB68     	 ldr r3,[r3,#12]
 1439 0034 9A42     	 cmp r2,r3
 1440 0036 F3DB     	 blt .L73
 390:../soes/esc.c ****    }
 391:../soes/esc.c ****    ESCvar.mbxoutpost = 0;
 1441              	 .loc 1 391 0 is_stmt 1
 1442 0038 194B     	 ldr r3,.L74
 1443 003a 0022     	 movs r2,#0
 1444 003c 83F89020 	 strb r2,[r3,#144]
 392:../soes/esc.c ****    ESCvar.mbxbackup = 0;
 1445              	 .loc 1 392 0
 1446 0040 174B     	 ldr r3,.L74
 1447 0042 0022     	 movs r2,#0
 1448 0044 83F89120 	 strb r2,[r3,#145]
 393:../soes/esc.c ****    ESCvar.xoe = 0;
 1449              	 .loc 1 393 0
 1450 0048 154B     	 ldr r3,.L74
 1451 004a 0022     	 movs r2,#0
 1452 004c 83F89220 	 strb r2,[r3,#146]
 394:../soes/esc.c ****    ESCvar.mbxfree = 1;
 1453              	 .loc 1 394 0
 1454 0050 134B     	 ldr r3,.L74
 1455 0052 0122     	 movs r2,#1
 1456 0054 83F89420 	 strb r2,[r3,#148]
 395:../soes/esc.c ****    ESCvar.toggle = 0;
 1457              	 .loc 1 395 0
 1458 0058 114A     	 ldr r2,.L74
 1459 005a 92F8A030 	 ldrb r3,[r2,#160]
 1460 005e 6FF34103 	 bfc r3,#1,#1
 1461 0062 82F8A030 	 strb r3,[r2,#160]
 396:../soes/esc.c ****    ESCvar.mbxincnt = 0;
 1462              	 .loc 1 396 0
 1463 0066 0E4B     	 ldr r3,.L74
 1464 0068 0022     	 movs r2,#0
 1465 006a 83F88F20 	 strb r2,[r3,#143]
 397:../soes/esc.c ****    ESCvar.segmented = 0;
 1466              	 .loc 1 397 0
 1467 006e 0C4B     	 ldr r3,.L74
 1468 0070 0022     	 movs r2,#0
 1469 0072 83F89520 	 strb r2,[r3,#149]
 398:../soes/esc.c ****    ESCvar.frags = 0;
 1470              	 .loc 1 398 0
 1471 0076 0A4B     	 ldr r3,.L74
 1472 0078 0022     	 movs r2,#0
 1473 007a 83F89C20 	 strb r2,[r3,#156]
 1474 007e 0022     	 movs r2,#0
 1475 0080 83F89D20 	 strb r2,[r3,#157]
 399:../soes/esc.c ****    ESCvar.fragsleft = 0;
 1476              	 .loc 1 399 0
 1477 0084 064B     	 ldr r3,.L74
 1478 0086 0022     	 movs r2,#0
 1479 0088 83F89E20 	 strb r2,[r3,#158]
 1480 008c 0022     	 movs r2,#0
 1481 008e 83F89F20 	 strb r2,[r3,#159]
 400:../soes/esc.c ****    ESCvar.txcue = 0;
 1482              	 .loc 1 400 0
 1483 0092 034B     	 ldr r3,.L74
 1484 0094 0022     	 movs r2,#0
 1485 0096 83F89320 	 strb r2,[r3,#147]
 401:../soes/esc.c **** }
 1486              	 .loc 1 401 0
 1487 009a 0837     	 adds r7,r7,#8
 1488              	.LCFI100:
 1489              	 .cfi_def_cfa_offset 8
 1490 009c BD46     	 mov sp,r7
 1491              	.LCFI101:
 1492              	 .cfi_def_cfa_register 13
 1493              	 
 1494 009e 80BD     	 pop {r7,pc}
 1495              	.L75:
 1496              	 .align 2
 1497              	.L74:
 1498 00a0 00000000 	 .word ESCvar
 1499 00a4 00000000 	 .word MBXcontrol
 1500              	 .cfi_endproc
 1501              	.LFE20:
 1503              	 .section .text.ESC_readmbx,"ax",%progbits
 1504              	 .align 2
 1505              	 .global ESC_readmbx
 1506              	 .thumb
 1507              	 .thumb_func
 1509              	ESC_readmbx:
 1510              	.LFB21:
 402:../soes/esc.c **** 
 403:../soes/esc.c **** /** Read Receive mailbox and store data in local ESCvar.MBX variable.
 404:../soes/esc.c ****  * Combined function for bootstrap and other states. State check decides
 405:../soes/esc.c ****  * which one to read.
 406:../soes/esc.c ****  */
 407:../soes/esc.c **** void ESC_readmbx (void)
 408:../soes/esc.c **** {
 1511              	 .loc 1 408 0
 1512              	 .cfi_startproc
 1513              	 
 1514              	 
 1515 0000 80B5     	 push {r7,lr}
 1516              	.LCFI102:
 1517              	 .cfi_def_cfa_offset 8
 1518              	 .cfi_offset 7,-8
 1519              	 .cfi_offset 14,-4
 1520 0002 82B0     	 sub sp,sp,#8
 1521              	.LCFI103:
 1522              	 .cfi_def_cfa_offset 16
 1523 0004 00AF     	 add r7,sp,#0
 1524              	.LCFI104:
 1525              	 .cfi_def_cfa_register 7
 409:../soes/esc.c ****    _MBX *MB = (_MBX *)&MBX[0];
 1526              	 .loc 1 409 0
 1527 0006 224B     	 ldr r3,.L79
 1528 0008 7B60     	 str r3,[r7,#4]
 410:../soes/esc.c ****    uint16_t length;
 411:../soes/esc.c **** 
 412:../soes/esc.c ****    ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 1529              	 .loc 1 412 0
 1530 000a 224B     	 ldr r3,.L79+4
 1531 000c D3F87130 	 ldr r3,[r3,#113]
 1532 0010 1B88     	 ldrh r3,[r3]
 1533 0012 1846     	 mov r0,r3
 1534 0014 7968     	 ldr r1,[r7,#4]
 1535 0016 0622     	 movs r2,#6
 1536 0018 FFF7FEFF 	 bl ESC_read
 413:../soes/esc.c ****    length = etohs (MB->header.length);
 1537              	 .loc 1 413 0
 1538 001c 7B68     	 ldr r3,[r7,#4]
 1539 001e 1B88     	 ldrh r3,[r3]
 1540 0020 9BB2     	 uxth r3,r3
 1541 0022 7B80     	 strh r3,[r7,#2]
 414:../soes/esc.c **** 
 415:../soes/esc.c ****    if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 1542              	 .loc 1 415 0
 1543 0024 7B88     	 ldrh r3,[r7,#2]
 1544 0026 1A46     	 mov r2,r3
 1545 0028 1A4B     	 ldr r3,.L79+4
 1546 002a D3F87130 	 ldr r3,[r3,#113]
 1547 002e 5B88     	 ldrh r3,[r3,#2]
 1548 0030 063B     	 subs r3,r3,#6
 1549 0032 9A42     	 cmp r2,r3
 1550 0034 06D9     	 bls .L77
 416:../soes/esc.c ****    {
 417:../soes/esc.c ****       length = ESC_MBX0_sml - ESC_MBXHSIZE;
 1551              	 .loc 1 417 0
 1552 0036 174B     	 ldr r3,.L79+4
 1553 0038 D3F87130 	 ldr r3,[r3,#113]
 1554 003c 5B88     	 ldrh r3,[r3,#2]
 1555 003e 063B     	 subs r3,r3,#6
 1556 0040 9BB2     	 uxth r3,r3
 1557 0042 7B80     	 strh r3,[r7,#2]
 1558              	.L77:
 418:../soes/esc.c ****    }
 419:../soes/esc.c ****    ESC_read (ESC_MBX0_sma + ESC_MBXHSIZE, MB->b, length);
 1559              	 .loc 1 419 0
 1560 0044 134B     	 ldr r3,.L79+4
 1561 0046 D3F87130 	 ldr r3,[r3,#113]
 1562 004a 1B88     	 ldrh r3,[r3]
 1563 004c 0633     	 adds r3,r3,#6
 1564 004e 99B2     	 uxth r1,r3
 1565 0050 7B68     	 ldr r3,[r7,#4]
 1566 0052 9A1D     	 adds r2,r3,#6
 1567 0054 7B88     	 ldrh r3,[r7,#2]
 1568 0056 0846     	 mov r0,r1
 1569 0058 1146     	 mov r1,r2
 1570 005a 1A46     	 mov r2,r3
 1571 005c FFF7FEFF 	 bl ESC_read
 420:../soes/esc.c ****    if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 1572              	 .loc 1 420 0
 1573 0060 7B88     	 ldrh r3,[r7,#2]
 1574 0062 0633     	 adds r3,r3,#6
 1575 0064 0B4A     	 ldr r2,.L79+4
 1576 0066 D2F87120 	 ldr r2,[r2,#113]
 1577 006a 5288     	 ldrh r2,[r2,#2]
 1578 006c 9342     	 cmp r3,r2
 1579 006e 09D2     	 bcs .L78
 421:../soes/esc.c ****    {
 422:../soes/esc.c ****       ESC_read (ESC_MBX0_sme, &length, 1);
 1580              	 .loc 1 422 0
 1581 0070 084B     	 ldr r3,.L79+4
 1582 0072 D3F87130 	 ldr r3,[r3,#113]
 1583 0076 9A88     	 ldrh r2,[r3,#4]
 1584 0078 BB1C     	 adds r3,r7,#2
 1585 007a 1046     	 mov r0,r2
 1586 007c 1946     	 mov r1,r3
 1587 007e 0122     	 movs r2,#1
 1588 0080 FFF7FEFF 	 bl ESC_read
 1589              	.L78:
 423:../soes/esc.c ****    }
 424:../soes/esc.c **** 
 425:../soes/esc.c ****    MBXcontrol[0].state = MBXstate_inclaim;
 1590              	 .loc 1 425 0
 1591 0084 044B     	 ldr r3,.L79+8
 1592 0086 0122     	 movs r2,#1
 1593 0088 1A70     	 strb r2,[r3]
 426:../soes/esc.c **** }
 1594              	 .loc 1 426 0
 1595 008a 0837     	 adds r7,r7,#8
 1596              	.LCFI105:
 1597              	 .cfi_def_cfa_offset 8
 1598 008c BD46     	 mov sp,r7
 1599              	.LCFI106:
 1600              	 .cfi_def_cfa_register 13
 1601              	 
 1602 008e 80BD     	 pop {r7,pc}
 1603              	.L80:
 1604              	 .align 2
 1605              	.L79:
 1606 0090 00000000 	 .word MBX
 1607 0094 00000000 	 .word ESCvar
 1608 0098 00000000 	 .word MBXcontrol
 1609              	 .cfi_endproc
 1610              	.LFE21:
 1612              	 .section .text.ESC_writembx,"ax",%progbits
 1613              	 .align 2
 1614              	 .global ESC_writembx
 1615              	 .thumb
 1616              	 .thumb_func
 1618              	ESC_writembx:
 1619              	.LFB22:
 427:../soes/esc.c **** /** Write local mailbox buffer ESCvar.MBX[n] to Send mailbox.
 428:../soes/esc.c ****  * Combined function for bootstrap and other states. State check decides
 429:../soes/esc.c ****  * which one to write.
 430:../soes/esc.c ****  *
 431:../soes/esc.c ****  * @param[in] n   = Which local mailbox buffer n to send.
 432:../soes/esc.c ****  */
 433:../soes/esc.c **** void ESC_writembx (uint8_t n)
 434:../soes/esc.c **** {
 1620              	 .loc 1 434 0
 1621              	 .cfi_startproc
 1622              	 
 1623              	 
 1624 0000 80B5     	 push {r7,lr}
 1625              	.LCFI107:
 1626              	 .cfi_def_cfa_offset 8
 1627              	 .cfi_offset 7,-8
 1628              	 .cfi_offset 14,-4
 1629 0002 86B0     	 sub sp,sp,#24
 1630              	.LCFI108:
 1631              	 .cfi_def_cfa_offset 32
 1632 0004 00AF     	 add r7,sp,#0
 1633              	.LCFI109:
 1634              	 .cfi_def_cfa_register 7
 1635 0006 0346     	 mov r3,r0
 1636 0008 FB71     	 strb r3,[r7,#7]
 435:../soes/esc.c ****    _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 1637              	 .loc 1 435 0
 1638 000a FB79     	 ldrb r3,[r7,#7]
 1639 000c 214A     	 ldr r2,.L84
 1640 000e D2F86D20 	 ldr r2,[r2,#109]
 1641 0012 02FB03F3 	 mul r3,r2,r3
 1642 0016 204A     	 ldr r2,.L84+4
 1643 0018 1344     	 add r3,r3,r2
 1644 001a 3B61     	 str r3,[r7,#16]
 436:../soes/esc.c ****    uint8_t dummy = 0;
 1645              	 .loc 1 436 0
 1646 001c 0023     	 movs r3,#0
 1647 001e FB73     	 strb r3,[r7,#15]
 437:../soes/esc.c ****    uint16_t length;
 438:../soes/esc.c ****    length = etohs (MBh->length);
 1648              	 .loc 1 438 0
 1649 0020 3B69     	 ldr r3,[r7,#16]
 1650 0022 1A78     	 ldrb r2,[r3]
 1651 0024 5B78     	 ldrb r3,[r3,#1]
 1652 0026 1B02     	 lsls r3,r3,#8
 1653 0028 1343     	 orrs r3,r3,r2
 1654 002a FB82     	 strh r3,[r7,#22]
 439:../soes/esc.c **** 
 440:../soes/esc.c ****    if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 1655              	 .loc 1 440 0
 1656 002c FA8A     	 ldrh r2,[r7,#22]
 1657 002e 194B     	 ldr r3,.L84
 1658 0030 D3F87530 	 ldr r3,[r3,#117]
 1659 0034 5B88     	 ldrh r3,[r3,#2]
 1660 0036 063B     	 subs r3,r3,#6
 1661 0038 9A42     	 cmp r2,r3
 1662 003a 05D9     	 bls .L82
 441:../soes/esc.c ****    {
 442:../soes/esc.c ****       length = ESC_MBX1_sml - ESC_MBXHSIZE;
 1663              	 .loc 1 442 0
 1664 003c 154B     	 ldr r3,.L84
 1665 003e D3F87530 	 ldr r3,[r3,#117]
 1666 0042 5B88     	 ldrh r3,[r3,#2]
 1667 0044 063B     	 subs r3,r3,#6
 1668 0046 FB82     	 strh r3,[r7,#22]
 1669              	.L82:
 443:../soes/esc.c ****    }
 444:../soes/esc.c ****    ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);
 1670              	 .loc 1 444 0
 1671 0048 124B     	 ldr r3,.L84
 1672 004a D3F87530 	 ldr r3,[r3,#117]
 1673 004e 1A88     	 ldrh r2,[r3]
 1674 0050 FB8A     	 ldrh r3,[r7,#22]
 1675 0052 0633     	 adds r3,r3,#6
 1676 0054 9BB2     	 uxth r3,r3
 1677 0056 1046     	 mov r0,r2
 1678 0058 3969     	 ldr r1,[r7,#16]
 1679 005a 1A46     	 mov r2,r3
 1680 005c FFF7FEFF 	 bl ESC_write
 445:../soes/esc.c ****    if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 1681              	 .loc 1 445 0
 1682 0060 FB8A     	 ldrh r3,[r7,#22]
 1683 0062 0633     	 adds r3,r3,#6
 1684 0064 0B4A     	 ldr r2,.L84
 1685 0066 D2F87520 	 ldr r2,[r2,#117]
 1686 006a 5288     	 ldrh r2,[r2,#2]
 1687 006c 9342     	 cmp r3,r2
 1688 006e 0AD2     	 bcs .L83
 446:../soes/esc.c ****    {
 447:../soes/esc.c ****       ESC_write (ESC_MBX1_sme, &dummy, 1);
 1689              	 .loc 1 447 0
 1690 0070 084B     	 ldr r3,.L84
 1691 0072 D3F87530 	 ldr r3,[r3,#117]
 1692 0076 9A88     	 ldrh r2,[r3,#4]
 1693 0078 07F10F03 	 add r3,r7,#15
 1694 007c 1046     	 mov r0,r2
 1695 007e 1946     	 mov r1,r3
 1696 0080 0122     	 movs r2,#1
 1697 0082 FFF7FEFF 	 bl ESC_write
 1698              	.L83:
 448:../soes/esc.c ****    }
 449:../soes/esc.c **** 
 450:../soes/esc.c ****    ESCvar.mbxfree = 0;
 1699              	 .loc 1 450 0
 1700 0086 034B     	 ldr r3,.L84
 1701 0088 0022     	 movs r2,#0
 1702 008a 83F89420 	 strb r2,[r3,#148]
 451:../soes/esc.c **** }
 1703              	 .loc 1 451 0
 1704 008e 1837     	 adds r7,r7,#24
 1705              	.LCFI110:
 1706              	 .cfi_def_cfa_offset 8
 1707 0090 BD46     	 mov sp,r7
 1708              	.LCFI111:
 1709              	 .cfi_def_cfa_register 13
 1710              	 
 1711 0092 80BD     	 pop {r7,pc}
 1712              	.L85:
 1713              	 .align 2
 1714              	.L84:
 1715 0094 00000000 	 .word ESCvar
 1716 0098 00000000 	 .word MBX
 1717              	 .cfi_endproc
 1718              	.LFE22:
 1720              	 .section .text.ESC_ackmbxread,"ax",%progbits
 1721              	 .align 2
 1722              	 .global ESC_ackmbxread
 1723              	 .thumb
 1724              	 .thumb_func
 1726              	ESC_ackmbxread:
 1727              	.LFB23:
 452:../soes/esc.c **** 
 453:../soes/esc.c **** /** TBD
 454:../soes/esc.c ****  */
 455:../soes/esc.c **** void ESC_ackmbxread (void)
 456:../soes/esc.c **** {
 1728              	 .loc 1 456 0
 1729              	 .cfi_startproc
 1730              	 
 1731              	 
 1732 0000 80B5     	 push {r7,lr}
 1733              	.LCFI112:
 1734              	 .cfi_def_cfa_offset 8
 1735              	 .cfi_offset 7,-8
 1736              	 .cfi_offset 14,-4
 1737 0002 82B0     	 sub sp,sp,#8
 1738              	.LCFI113:
 1739              	 .cfi_def_cfa_offset 16
 1740 0004 00AF     	 add r7,sp,#0
 1741              	.LCFI114:
 1742              	 .cfi_def_cfa_register 7
 457:../soes/esc.c ****    uint8_t dummy = 0;
 1743              	 .loc 1 457 0
 1744 0006 0023     	 movs r3,#0
 1745 0008 FB71     	 strb r3,[r7,#7]
 458:../soes/esc.c **** 
 459:../soes/esc.c ****    ESC_write (ESC_MBX1_sma, &dummy, 1);
 1746              	 .loc 1 459 0
 1747 000a 084B     	 ldr r3,.L87
 1748 000c D3F87530 	 ldr r3,[r3,#117]
 1749 0010 1A88     	 ldrh r2,[r3]
 1750 0012 FB1D     	 adds r3,r7,#7
 1751 0014 1046     	 mov r0,r2
 1752 0016 1946     	 mov r1,r3
 1753 0018 0122     	 movs r2,#1
 1754 001a FFF7FEFF 	 bl ESC_write
 460:../soes/esc.c ****    ESCvar.mbxfree = 1;
 1755              	 .loc 1 460 0
 1756 001e 034B     	 ldr r3,.L87
 1757 0020 0122     	 movs r2,#1
 1758 0022 83F89420 	 strb r2,[r3,#148]
 461:../soes/esc.c **** }
 1759              	 .loc 1 461 0
 1760 0026 0837     	 adds r7,r7,#8
 1761              	.LCFI115:
 1762              	 .cfi_def_cfa_offset 8
 1763 0028 BD46     	 mov sp,r7
 1764              	.LCFI116:
 1765              	 .cfi_def_cfa_register 13
 1766              	 
 1767 002a 80BD     	 pop {r7,pc}
 1768              	.L88:
 1769              	 .align 2
 1770              	.L87:
 1771 002c 00000000 	 .word ESCvar
 1772              	 .cfi_endproc
 1773              	.LFE23:
 1775              	 .section .text.ESC_claimbuffer,"ax",%progbits
 1776              	 .align 2
 1777              	 .global ESC_claimbuffer
 1778              	 .thumb
 1779              	 .thumb_func
 1781              	ESC_claimbuffer:
 1782              	.LFB24:
 462:../soes/esc.c **** 
 463:../soes/esc.c **** /** Allocate and prepare a mailbox buffer. Take the first Idle buffer from the End.
 464:../soes/esc.c ****  * Set Mailbox control state to be used for outbox and fill the mailbox buffer with
 465:../soes/esc.c ****  * address master and mailbox next CNT value between 1-7.
 466:../soes/esc.c ****  *
 467:../soes/esc.c ****  * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 468:../soes/esc.c ****  */
 469:../soes/esc.c **** uint8_t ESC_claimbuffer (void)
 470:../soes/esc.c **** {
 1783              	 .loc 1 470 0
 1784              	 .cfi_startproc
 1785              	 
 1786              	 
 1787              	 
 1788 0000 80B4     	 push {r7}
 1789              	.LCFI117:
 1790              	 .cfi_def_cfa_offset 4
 1791              	 .cfi_offset 7,-4
 1792 0002 83B0     	 sub sp,sp,#12
 1793              	.LCFI118:
 1794              	 .cfi_def_cfa_offset 16
 1795 0004 00AF     	 add r7,sp,#0
 1796              	.LCFI119:
 1797              	 .cfi_def_cfa_register 7
 471:../soes/esc.c ****    _MBXh *MBh;
 472:../soes/esc.c ****    uint8_t n = ESC_MBXBUFFERS - 1;
 1798              	 .loc 1 472 0
 1799 0006 324B     	 ldr r3,.L96
 1800 0008 DB68     	 ldr r3,[r3,#12]
 1801 000a DBB2     	 uxtb r3,r3
 1802 000c 013B     	 subs r3,r3,#1
 1803 000e FB71     	 strb r3,[r7,#7]
 473:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state))
 1804              	 .loc 1 473 0
 1805 0010 02E0     	 b .L90
 1806              	.L92:
 474:../soes/esc.c ****    {
 475:../soes/esc.c ****       n--;
 1807              	 .loc 1 475 0
 1808 0012 FB79     	 ldrb r3,[r7,#7]
 1809 0014 013B     	 subs r3,r3,#1
 1810 0016 FB71     	 strb r3,[r7,#7]
 1811              	.L90:
 473:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state))
 1812              	 .loc 1 473 0
 1813 0018 FB79     	 ldrb r3,[r7,#7]
 1814 001a 002B     	 cmp r3,#0
 1815 001c 04D0     	 beq .L91
 473:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state))
 1816              	 .loc 1 473 0 is_stmt 0 discriminator 1
 1817 001e FB79     	 ldrb r3,[r7,#7]
 1818 0020 2C4A     	 ldr r2,.L96+4
 1819 0022 D35C     	 ldrb r3,[r2,r3]
 1820 0024 002B     	 cmp r3,#0
 1821 0026 F4D1     	 bne .L92
 1822              	.L91:
 476:../soes/esc.c ****    }
 477:../soes/esc.c ****    if (n)
 1823              	 .loc 1 477 0 is_stmt 1
 1824 0028 FB79     	 ldrb r3,[r7,#7]
 1825 002a 002B     	 cmp r3,#0
 1826 002c 48D0     	 beq .L93
 478:../soes/esc.c ****    {
 479:../soes/esc.c ****       MBXcontrol[n].state = MBXstate_outclaim;
 1827              	 .loc 1 479 0
 1828 002e FB79     	 ldrb r3,[r7,#7]
 1829 0030 284A     	 ldr r2,.L96+4
 1830 0032 0221     	 movs r1,#2
 1831 0034 D154     	 strb r1,[r2,r3]
 480:../soes/esc.c ****       MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 1832              	 .loc 1 480 0
 1833 0036 FB79     	 ldrb r3,[r7,#7]
 1834 0038 254A     	 ldr r2,.L96
 1835 003a D2F86D20 	 ldr r2,[r2,#109]
 1836 003e 02FB03F3 	 mul r3,r2,r3
 1837 0042 254A     	 ldr r2,.L96+8
 1838 0044 1344     	 add r3,r3,r2
 1839 0046 3B60     	 str r3,[r7]
 481:../soes/esc.c ****       ESCvar.mbxcnt++;
 1840              	 .loc 1 481 0
 1841 0048 214B     	 ldr r3,.L96
 1842 004a 93F88E30 	 ldrb r3,[r3,#142]
 1843 004e 0133     	 adds r3,r3,#1
 1844 0050 DAB2     	 uxtb r2,r3
 1845 0052 1F4B     	 ldr r3,.L96
 1846 0054 83F88E20 	 strb r2,[r3,#142]
 482:../soes/esc.c ****       ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 1847              	 .loc 1 482 0
 1848 0058 1D4B     	 ldr r3,.L96
 1849 005a 93F88E30 	 ldrb r3,[r3,#142]
 1850 005e 03F00703 	 and r3,r3,#7
 1851 0062 DAB2     	 uxtb r2,r3
 1852 0064 1A4B     	 ldr r3,.L96
 1853 0066 83F88E20 	 strb r2,[r3,#142]
 483:../soes/esc.c ****       if (ESCvar.mbxcnt == 0)
 1854              	 .loc 1 483 0
 1855 006a 194B     	 ldr r3,.L96
 1856 006c 93F88E30 	 ldrb r3,[r3,#142]
 1857 0070 002B     	 cmp r3,#0
 1858 0072 03D1     	 bne .L94
 484:../soes/esc.c ****       {
 485:../soes/esc.c ****          ESCvar.mbxcnt = 1;
 1859              	 .loc 1 485 0
 1860 0074 164B     	 ldr r3,.L96
 1861 0076 0122     	 movs r2,#1
 1862 0078 83F88E20 	 strb r2,[r3,#142]
 1863              	.L94:
 486:../soes/esc.c ****       }
 487:../soes/esc.c ****       MBh->address = htoes (0x0000);      // destination is master
 1864              	 .loc 1 487 0
 1865 007c 3B68     	 ldr r3,[r7]
 1866 007e 0022     	 movs r2,#0
 1867 0080 9A70     	 strb r2,[r3,#2]
 1868 0082 0022     	 movs r2,#0
 1869 0084 DA70     	 strb r2,[r3,#3]
 488:../soes/esc.c ****       MBh->channel = 0;
 1870              	 .loc 1 488 0
 1871 0086 3A68     	 ldr r2,[r7]
 1872 0088 1379     	 ldrb r3,[r2,#4]
 1873 008a 6FF30503 	 bfc r3,#0,#6
 1874 008e 1371     	 strb r3,[r2,#4]
 489:../soes/esc.c ****       MBh->priority = 0;
 1875              	 .loc 1 489 0
 1876 0090 3A68     	 ldr r2,[r7]
 1877 0092 1379     	 ldrb r3,[r2,#4]
 1878 0094 6FF38713 	 bfc r3,#6,#2
 1879 0098 1371     	 strb r3,[r2,#4]
 490:../soes/esc.c ****       MBh->mbxcnt = ESCvar.mbxcnt;
 1880              	 .loc 1 490 0
 1881 009a 0D4B     	 ldr r3,.L96
 1882 009c 93F88E30 	 ldrb r3,[r3,#142]
 1883 00a0 03F00F03 	 and r3,r3,#15
 1884 00a4 D9B2     	 uxtb r1,r3
 1885 00a6 3A68     	 ldr r2,[r7]
 1886 00a8 5379     	 ldrb r3,[r2,#5]
 1887 00aa 61F30713 	 bfi r3,r1,#4,#4
 1888 00ae 5371     	 strb r3,[r2,#5]
 491:../soes/esc.c ****       ESCvar.txcue++;
 1889              	 .loc 1 491 0
 1890 00b0 074B     	 ldr r3,.L96
 1891 00b2 93F89330 	 ldrb r3,[r3,#147]
 1892 00b6 0133     	 adds r3,r3,#1
 1893 00b8 DAB2     	 uxtb r2,r3
 1894 00ba 054B     	 ldr r3,.L96
 1895 00bc 83F89320 	 strb r2,[r3,#147]
 1896              	.L93:
 492:../soes/esc.c ****    }
 493:../soes/esc.c ****    return n;
 1897              	 .loc 1 493 0
 1898 00c0 FB79     	 ldrb r3,[r7,#7]
 494:../soes/esc.c **** }
 1899              	 .loc 1 494 0
 1900 00c2 1846     	 mov r0,r3
 1901 00c4 0C37     	 adds r7,r7,#12
 1902              	.LCFI120:
 1903              	 .cfi_def_cfa_offset 4
 1904 00c6 BD46     	 mov sp,r7
 1905              	.LCFI121:
 1906              	 .cfi_def_cfa_register 13
 1907              	 
 1908 00c8 5DF8047B 	 ldr r7,[sp],#4
 1909              	.LCFI122:
 1910              	 .cfi_restore 7
 1911              	 .cfi_def_cfa_offset 0
 1912 00cc 7047     	 bx lr
 1913              	.L97:
 1914 00ce 00BF     	 .align 2
 1915              	.L96:
 1916 00d0 00000000 	 .word ESCvar
 1917 00d4 00000000 	 .word MBXcontrol
 1918 00d8 00000000 	 .word MBX
 1919              	 .cfi_endproc
 1920              	.LFE24:
 1922              	 .section .text.ESC_outreqbuffer,"ax",%progbits
 1923              	 .align 2
 1924              	 .global ESC_outreqbuffer
 1925              	 .thumb
 1926              	 .thumb_func
 1928              	ESC_outreqbuffer:
 1929              	.LFB25:
 495:../soes/esc.c **** 
 496:../soes/esc.c **** /** Look for any present requests for posting to the outbox.
 497:../soes/esc.c ****  *
 498:../soes/esc.c ****  * @return the index of Mailbox buffer ready to be posted.
 499:../soes/esc.c ****  */
 500:../soes/esc.c **** uint8_t ESC_outreqbuffer (void)
 501:../soes/esc.c **** {
 1930              	 .loc 1 501 0
 1931              	 .cfi_startproc
 1932              	 
 1933              	 
 1934              	 
 1935 0000 80B4     	 push {r7}
 1936              	.LCFI123:
 1937              	 .cfi_def_cfa_offset 4
 1938              	 .cfi_offset 7,-4
 1939 0002 83B0     	 sub sp,sp,#12
 1940              	.LCFI124:
 1941              	 .cfi_def_cfa_offset 16
 1942 0004 00AF     	 add r7,sp,#0
 1943              	.LCFI125:
 1944              	 .cfi_def_cfa_register 7
 502:../soes/esc.c ****    uint8_t n = ESC_MBXBUFFERS - 1;
 1945              	 .loc 1 502 0
 1946 0006 0C4B     	 ldr r3,.L103
 1947 0008 DB68     	 ldr r3,[r3,#12]
 1948 000a DBB2     	 uxtb r3,r3
 1949 000c 013B     	 subs r3,r3,#1
 1950 000e FB71     	 strb r3,[r7,#7]
 503:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 1951              	 .loc 1 503 0
 1952 0010 02E0     	 b .L99
 1953              	.L101:
 504:../soes/esc.c ****    {
 505:../soes/esc.c ****       n--;
 1954              	 .loc 1 505 0
 1955 0012 FB79     	 ldrb r3,[r7,#7]
 1956 0014 013B     	 subs r3,r3,#1
 1957 0016 FB71     	 strb r3,[r7,#7]
 1958              	.L99:
 503:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 1959              	 .loc 1 503 0
 1960 0018 FB79     	 ldrb r3,[r7,#7]
 1961 001a 002B     	 cmp r3,#0
 1962 001c 04D0     	 beq .L100
 503:../soes/esc.c ****    while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 1963              	 .loc 1 503 0 is_stmt 0 discriminator 1
 1964 001e FB79     	 ldrb r3,[r7,#7]
 1965 0020 064A     	 ldr r2,.L103+4
 1966 0022 D35C     	 ldrb r3,[r2,r3]
 1967 0024 032B     	 cmp r3,#3
 1968 0026 F4D1     	 bne .L101
 1969              	.L100:
 506:../soes/esc.c ****    }
 507:../soes/esc.c ****    return n;
 1970              	 .loc 1 507 0 is_stmt 1
 1971 0028 FB79     	 ldrb r3,[r7,#7]
 508:../soes/esc.c **** }
 1972              	 .loc 1 508 0
 1973 002a 1846     	 mov r0,r3
 1974 002c 0C37     	 adds r7,r7,#12
 1975              	.LCFI126:
 1976              	 .cfi_def_cfa_offset 4
 1977 002e BD46     	 mov sp,r7
 1978              	.LCFI127:
 1979              	 .cfi_def_cfa_register 13
 1980              	 
 1981 0030 5DF8047B 	 ldr r7,[sp],#4
 1982              	.LCFI128:
 1983              	 .cfi_restore 7
 1984              	 .cfi_def_cfa_offset 0
 1985 0034 7047     	 bx lr
 1986              	.L104:
 1987 0036 00BF     	 .align 2
 1988              	.L103:
 1989 0038 00000000 	 .word ESCvar
 1990 003c 00000000 	 .word MBXcontrol
 1991              	 .cfi_endproc
 1992              	.LFE25:
 1994              	 .section .text.MBX_error,"ax",%progbits
 1995              	 .align 2
 1996              	 .global MBX_error
 1997              	 .thumb
 1998              	 .thumb_func
 2000              	MBX_error:
 2001              	.LFB26:
 509:../soes/esc.c **** /** Allocate and prepare a mailbox buffer for sending an error message. Take the first Idle
 510:../soes/esc.c ****  * buffer from the end. Set Mailbox control state to be used for outbox and fill the mailbox
 511:../soes/esc.c ****  * buffer with error information.
 512:../soes/esc.c ****  *
 513:../soes/esc.c ****  * @param[in] n   = Error number to be sent in mailbox error message.
 514:../soes/esc.c ****  */
 515:../soes/esc.c **** void MBX_error (uint16_t error)
 516:../soes/esc.c **** {
 2002              	 .loc 1 516 0
 2003              	 .cfi_startproc
 2004              	 
 2005              	 
 2006 0000 80B5     	 push {r7,lr}
 2007              	.LCFI129:
 2008              	 .cfi_def_cfa_offset 8
 2009              	 .cfi_offset 7,-8
 2010              	 .cfi_offset 14,-4
 2011 0002 84B0     	 sub sp,sp,#16
 2012              	.LCFI130:
 2013              	 .cfi_def_cfa_offset 24
 2014 0004 00AF     	 add r7,sp,#0
 2015              	.LCFI131:
 2016              	 .cfi_def_cfa_register 7
 2017 0006 0346     	 mov r3,r0
 2018 0008 FB80     	 strh r3,[r7,#6]
 517:../soes/esc.c ****    uint8_t MBXout;
 518:../soes/esc.c ****    _MBXerr *mbxerr;
 519:../soes/esc.c ****    MBXout = ESC_claimbuffer ();
 2019              	 .loc 1 519 0
 2020 000a FFF7FEFF 	 bl ESC_claimbuffer
 2021 000e 0346     	 mov r3,r0
 2022 0010 FB73     	 strb r3,[r7,#15]
 520:../soes/esc.c ****    if (MBXout)
 2023              	 .loc 1 520 0
 2024 0012 FB7B     	 ldrb r3,[r7,#15]
 2025 0014 002B     	 cmp r3,#0
 2026 0016 22D0     	 beq .L105
 521:../soes/esc.c ****    {
 522:../soes/esc.c ****       mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 2027              	 .loc 1 522 0
 2028 0018 FB7B     	 ldrb r3,[r7,#15]
 2029 001a 124A     	 ldr r2,.L107
 2030 001c D2F86D20 	 ldr r2,[r2,#109]
 2031 0020 02FB03F3 	 mul r3,r2,r3
 2032 0024 104A     	 ldr r2,.L107+4
 2033 0026 1344     	 add r3,r3,r2
 2034 0028 BB60     	 str r3,[r7,#8]
 523:../soes/esc.c ****       mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 2035              	 .loc 1 523 0
 2036 002a BB68     	 ldr r3,[r7,#8]
 2037 002c 0022     	 movs r2,#0
 2038 002e 42F00402 	 orr r2,r2,#4
 2039 0032 1A70     	 strb r2,[r3]
 2040 0034 0022     	 movs r2,#0
 2041 0036 5A70     	 strb r2,[r3,#1]
 524:../soes/esc.c ****       mbxerr->mbxheader.mbxtype = MBXERR;
 2042              	 .loc 1 524 0
 2043 0038 BA68     	 ldr r2,[r7,#8]
 2044 003a 5379     	 ldrb r3,[r2,#5]
 2045 003c 6FF30303 	 bfc r3,#0,#4
 2046 0040 5371     	 strb r3,[r2,#5]
 525:../soes/esc.c ****       mbxerr->type = htoes ((uint16_t) 0x01);
 2047              	 .loc 1 525 0
 2048 0042 BB68     	 ldr r3,[r7,#8]
 2049 0044 0022     	 movs r2,#0
 2050 0046 42F00102 	 orr r2,r2,#1
 2051 004a 9A71     	 strb r2,[r3,#6]
 2052 004c 0022     	 movs r2,#0
 2053 004e DA71     	 strb r2,[r3,#7]
 526:../soes/esc.c ****       mbxerr->detail = htoes (error);
 2054              	 .loc 1 526 0
 2055 0050 BB68     	 ldr r3,[r7,#8]
 2056 0052 FA88     	 ldrh r2,[r7,#6]
 2057 0054 1A81     	 strh r2,[r3,#8]
 527:../soes/esc.c ****       MBXcontrol[MBXout].state = MBXstate_outreq;
 2058              	 .loc 1 527 0
 2059 0056 FB7B     	 ldrb r3,[r7,#15]
 2060 0058 044A     	 ldr r2,.L107+8
 2061 005a 0321     	 movs r1,#3
 2062 005c D154     	 strb r1,[r2,r3]
 2063              	.L105:
 528:../soes/esc.c ****    }
 529:../soes/esc.c **** }
 2064              	 .loc 1 529 0
 2065 005e 1037     	 adds r7,r7,#16
 2066              	.LCFI132:
 2067              	 .cfi_def_cfa_offset 8
 2068 0060 BD46     	 mov sp,r7
 2069              	.LCFI133:
 2070              	 .cfi_def_cfa_register 13
 2071              	 
 2072 0062 80BD     	 pop {r7,pc}
 2073              	.L108:
 2074              	 .align 2
 2075              	.L107:
 2076 0064 00000000 	 .word ESCvar
 2077 0068 00000000 	 .word MBX
 2078 006c 00000000 	 .word MBXcontrol
 2079              	 .cfi_endproc
 2080              	.LFE26:
 2082              	 .section .text.ESC_mbxprocess,"ax",%progbits
 2083              	 .align 2
 2084              	 .global ESC_mbxprocess
 2085              	 .thumb
 2086              	 .thumb_func
 2088              	ESC_mbxprocess:
 2089              	.LFB27:
 530:../soes/esc.c **** 
 531:../soes/esc.c **** /** Mailbox routine for implementing the low-level part of the mailbox protocol
 532:../soes/esc.c ****  * used by Application Layers running on-top of mailboxes. It takes care of sending
 533:../soes/esc.c ****  * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 534:../soes/esc.c ****  *
 535:../soes/esc.c ****  * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 536:../soes/esc.c ****  */
 537:../soes/esc.c **** uint8_t ESC_mbxprocess (void)
 538:../soes/esc.c **** {
 2090              	 .loc 1 538 0
 2091              	 .cfi_startproc
 2092              	 
 2093              	 
 2094 0000 80B5     	 push {r7,lr}
 2095              	.LCFI134:
 2096              	 .cfi_def_cfa_offset 8
 2097              	 .cfi_offset 7,-8
 2098              	 .cfi_offset 14,-4
 2099 0002 82B0     	 sub sp,sp,#8
 2100              	.LCFI135:
 2101              	 .cfi_def_cfa_offset 16
 2102 0004 00AF     	 add r7,sp,#0
 2103              	.LCFI136:
 2104              	 .cfi_def_cfa_register 7
 539:../soes/esc.c ****    uint8_t mbxhandle = 0;
 2105              	 .loc 1 539 0
 2106 0006 0023     	 movs r3,#0
 2107 0008 FB71     	 strb r3,[r7,#7]
 540:../soes/esc.c ****    _MBXh *MBh = (_MBXh *)&MBX[0];
 2108              	 .loc 1 540 0
 2109 000a 984B     	 ldr r3,.L127
 2110 000c 3B60     	 str r3,[r7]
 541:../soes/esc.c **** 
 542:../soes/esc.c ****    if (ESCvar.MBXrun == 0)
 2111              	 .loc 1 542 0
 2112 000e 984B     	 ldr r3,.L127+4
 2113 0010 93F86C30 	 ldrb r3,[r3,#108]
 2114 0014 002B     	 cmp r3,#0
 2115 0016 01D1     	 bne .L110
 543:../soes/esc.c ****    {
 544:../soes/esc.c ****       /* nothing to do */
 545:../soes/esc.c ****       return 0;
 2116              	 .loc 1 545 0
 2117 0018 0023     	 movs r3,#0
 2118 001a 23E1     	 b .L111
 2119              	.L110:
 546:../soes/esc.c ****    }
 547:../soes/esc.c **** 
 548:../soes/esc.c ****    /* SM0/1 access or SMn change event */
 549:../soes/esc.c ****    if (ESCvar.ALevent & ESCREG_ALEVENT_SM_MASK)
 2120              	 .loc 1 549 0
 2121 001c 944B     	 ldr r3,.L127+4
 2122 001e B3F8D030 	 ldrh r3,[r3,#208]
 2123 0022 9BB2     	 uxth r3,r3
 2124 0024 03F44473 	 and r3,r3,#784
 2125 0028 002B     	 cmp r3,#0
 2126 002a 05D0     	 beq .L112
 550:../soes/esc.c ****    {
 551:../soes/esc.c ****       ESC_SMstatus (0);
 2127              	 .loc 1 551 0
 2128 002c 0020     	 movs r0,#0
 2129 002e FFF7FEFF 	 bl ESC_SMstatus
 552:../soes/esc.c ****       ESC_SMstatus (1);
 2130              	 .loc 1 552 0
 2131 0032 0120     	 movs r0,#1
 2132 0034 FFF7FEFF 	 bl ESC_SMstatus
 2133              	.L112:
 553:../soes/esc.c ****    }
 554:../soes/esc.c **** 
 555:../soes/esc.c ****    /* outmbx read by master */
 556:../soes/esc.c ****    if (ESCvar.mbxoutpost && ESCvar.SM[1].IntR)
 2134              	 .loc 1 556 0
 2135 0038 8D4B     	 ldr r3,.L127+4
 2136 003a 93F89030 	 ldrb r3,[r3,#144]
 2137 003e 002B     	 cmp r3,#0
 2138 0040 3DD0     	 beq .L113
 2139              	 .loc 1 556 0 is_stmt 0 discriminator 1
 2140 0042 8B4B     	 ldr r3,.L127+4
 2141 0044 93F8B530 	 ldrb r3,[r3,#181]
 2142 0048 03F00203 	 and r3,r3,#2
 2143 004c DBB2     	 uxtb r3,r3
 2144 004e 002B     	 cmp r3,#0
 2145 0050 35D0     	 beq .L113
 557:../soes/esc.c ****    {
 558:../soes/esc.c ****       ESC_ackmbxread ();
 2146              	 .loc 1 558 0 is_stmt 1
 2147 0052 FFF7FEFF 	 bl ESC_ackmbxread
 559:../soes/esc.c ****       /* dispose old backup */
 560:../soes/esc.c ****       if (ESCvar.mbxbackup)
 2148              	 .loc 1 560 0
 2149 0056 864B     	 ldr r3,.L127+4
 2150 0058 93F89130 	 ldrb r3,[r3,#145]
 2151 005c 002B     	 cmp r3,#0
 2152 005e 06D0     	 beq .L114
 561:../soes/esc.c ****       {
 562:../soes/esc.c ****          MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 2153              	 .loc 1 562 0
 2154 0060 834B     	 ldr r3,.L127+4
 2155 0062 93F89130 	 ldrb r3,[r3,#145]
 2156 0066 1A46     	 mov r2,r3
 2157 0068 824B     	 ldr r3,.L127+8
 2158 006a 0021     	 movs r1,#0
 2159 006c 9954     	 strb r1,[r3,r2]
 2160              	.L114:
 563:../soes/esc.c ****       }
 564:../soes/esc.c ****       /* if still to do */
 565:../soes/esc.c ****       if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 2161              	 .loc 1 565 0
 2162 006e 804B     	 ldr r3,.L127+4
 2163 0070 93F89030 	 ldrb r3,[r3,#144]
 2164 0074 1A46     	 mov r2,r3
 2165 0076 7F4B     	 ldr r3,.L127+8
 2166 0078 9B5C     	 ldrb r3,[r3,r2]
 2167 007a 062B     	 cmp r3,#6
 2168 007c 05D1     	 bne .L115
 566:../soes/esc.c ****       {
 567:../soes/esc.c ****          ESC_writembx (ESCvar.mbxoutpost);
 2169              	 .loc 1 567 0
 2170 007e 7C4B     	 ldr r3,.L127+4
 2171 0080 93F89030 	 ldrb r3,[r3,#144]
 2172 0084 1846     	 mov r0,r3
 2173 0086 FFF7FEFF 	 bl ESC_writembx
 2174              	.L115:
 568:../soes/esc.c ****       }
 569:../soes/esc.c ****       /* create new backup */
 570:../soes/esc.c ****       MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 2175              	 .loc 1 570 0
 2176 008a 794B     	 ldr r3,.L127+4
 2177 008c 93F89030 	 ldrb r3,[r3,#144]
 2178 0090 1A46     	 mov r2,r3
 2179 0092 784B     	 ldr r3,.L127+8
 2180 0094 0521     	 movs r1,#5
 2181 0096 9954     	 strb r1,[r3,r2]
 571:../soes/esc.c ****       ESCvar.mbxbackup = ESCvar.mbxoutpost;
 2182              	 .loc 1 571 0
 2183 0098 754B     	 ldr r3,.L127+4
 2184 009a 93F89020 	 ldrb r2,[r3,#144]
 2185 009e 744B     	 ldr r3,.L127+4
 2186 00a0 83F89120 	 strb r2,[r3,#145]
 572:../soes/esc.c ****       ESCvar.mbxoutpost = 0;
 2187              	 .loc 1 572 0
 2188 00a4 724B     	 ldr r3,.L127+4
 2189 00a6 0022     	 movs r2,#0
 2190 00a8 83F89020 	 strb r2,[r3,#144]
 573:../soes/esc.c ****       /* Do we have any ongoing protocol transfers, return 1 */
 574:../soes/esc.c ****       if(ESCvar.xoe > 0)
 2191              	 .loc 1 574 0
 2192 00ac 704B     	 ldr r3,.L127+4
 2193 00ae 93F89230 	 ldrb r3,[r3,#146]
 2194 00b2 002B     	 cmp r3,#0
 2195 00b4 01D0     	 beq .L116
 575:../soes/esc.c ****       {
 576:../soes/esc.c ****          return 1;
 2196              	 .loc 1 576 0
 2197 00b6 0123     	 movs r3,#1
 2198 00b8 D4E0     	 b .L111
 2199              	.L116:
 577:../soes/esc.c ****       }
 578:../soes/esc.c ****       return 0;
 2200              	 .loc 1 578 0
 2201 00ba 0023     	 movs r3,#0
 2202 00bc D2E0     	 b .L111
 2203              	.L113:
 579:../soes/esc.c ****    }
 580:../soes/esc.c **** 
 581:../soes/esc.c ****    /* repeat request */
 582:../soes/esc.c ****    if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 2204              	 .loc 1 582 0
 2205 00be 6C4B     	 ldr r3,.L127+4
 2206 00c0 93F8B630 	 ldrb r3,[r3,#182]
 2207 00c4 C3F34003 	 ubfx r3,r3,#1,#1
 2208 00c8 DAB2     	 uxtb r2,r3
 2209 00ca 694B     	 ldr r3,.L127+4
 2210 00cc 93F8A030 	 ldrb r3,[r3,#160]
 2211 00d0 C3F34003 	 ubfx r3,r3,#1,#1
 2212 00d4 DBB2     	 uxtb r3,r3
 2213 00d6 9A42     	 cmp r2,r3
 2214 00d8 47D0     	 beq .L117
 583:../soes/esc.c ****    {
 584:../soes/esc.c ****       if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 2215              	 .loc 1 584 0
 2216 00da 654B     	 ldr r3,.L127+4
 2217 00dc 93F89030 	 ldrb r3,[r3,#144]
 2218 00e0 002B     	 cmp r3,#0
 2219 00e2 04D1     	 bne .L118
 2220              	 .loc 1 584 0 is_stmt 0 discriminator 1
 2221 00e4 624B     	 ldr r3,.L127+4
 2222 00e6 93F89130 	 ldrb r3,[r3,#145]
 2223 00ea 002B     	 cmp r3,#0
 2224 00ec 3BD0     	 beq .L119
 2225              	.L118:
 585:../soes/esc.c ****       {
 586:../soes/esc.c ****          /* if outmbx empty */
 587:../soes/esc.c ****          if (ESCvar.mbxoutpost == 0)
 2226              	 .loc 1 587 0 is_stmt 1
 2227 00ee 604B     	 ldr r3,.L127+4
 2228 00f0 93F89030 	 ldrb r3,[r3,#144]
 2229 00f4 002B     	 cmp r3,#0
 2230 00f6 06D1     	 bne .L120
 588:../soes/esc.c ****          {
 589:../soes/esc.c ****             /* use backup mbx */
 590:../soes/esc.c ****             ESC_writembx (ESCvar.mbxbackup);
 2231              	 .loc 1 590 0
 2232 00f8 5D4B     	 ldr r3,.L127+4
 2233 00fa 93F89130 	 ldrb r3,[r3,#145]
 2234 00fe 1846     	 mov r0,r3
 2235 0100 FFF7FEFF 	 bl ESC_writembx
 2236 0104 12E0     	 b .L121
 2237              	.L120:
 591:../soes/esc.c ****          }
 592:../soes/esc.c ****          else
 593:../soes/esc.c ****          {
 594:../soes/esc.c ****             /* reset mailbox */
 595:../soes/esc.c ****             ESC_SMdisable (1);
 2238              	 .loc 1 595 0
 2239 0106 0120     	 movs r0,#1
 2240 0108 FFF7FEFF 	 bl ESC_SMdisable
 596:../soes/esc.c ****             /* have to resend later */
 597:../soes/esc.c ****             MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 2241              	 .loc 1 597 0
 2242 010c 584B     	 ldr r3,.L127+4
 2243 010e 93F89030 	 ldrb r3,[r3,#144]
 2244 0112 1A46     	 mov r2,r3
 2245 0114 574B     	 ldr r3,.L127+8
 2246 0116 0621     	 movs r1,#6
 2247 0118 9954     	 strb r1,[r3,r2]
 598:../soes/esc.c ****             /* activate mailbox */
 599:../soes/esc.c ****             ESC_SMenable (1);
 2248              	 .loc 1 599 0
 2249 011a 0120     	 movs r0,#1
 2250 011c FFF7FEFF 	 bl ESC_SMenable
 600:../soes/esc.c ****             /* use backup mbx */
 601:../soes/esc.c ****             ESC_writembx (ESCvar.mbxbackup);
 2251              	 .loc 1 601 0
 2252 0120 534B     	 ldr r3,.L127+4
 2253 0122 93F89130 	 ldrb r3,[r3,#145]
 2254 0126 1846     	 mov r0,r3
 2255 0128 FFF7FEFF 	 bl ESC_writembx
 2256              	.L121:
 602:../soes/esc.c ****          }
 603:../soes/esc.c ****          ESCvar.toggle = ESCvar.SM[1].ECrep;
 2257              	 .loc 1 603 0
 2258 012c 504B     	 ldr r3,.L127+4
 2259 012e 93F8B630 	 ldrb r3,[r3,#182]
 2260 0132 C3F34003 	 ubfx r3,r3,#1,#1
 2261 0136 D9B2     	 uxtb r1,r3
 2262 0138 4D4A     	 ldr r2,.L127+4
 2263 013a 92F8A030 	 ldrb r3,[r2,#160]
 2264 013e 61F34103 	 bfi r3,r1,#1,#1
 2265 0142 82F8A030 	 strb r3,[r2,#160]
 604:../soes/esc.c ****          ESCvar.SM[1].PDIrep = ESCvar.toggle;
 2266              	 .loc 1 604 0
 2267 0146 4A4B     	 ldr r3,.L127+4
 2268 0148 93F8A030 	 ldrb r3,[r3,#160]
 2269 014c C3F34003 	 ubfx r3,r3,#1,#1
 2270 0150 D9B2     	 uxtb r1,r3
 2271 0152 474A     	 ldr r2,.L127+4
 2272 0154 92F8B730 	 ldrb r3,[r2,#183]
 2273 0158 61F34103 	 bfi r3,r1,#1,#1
 2274 015c 82F8B730 	 strb r3,[r2,#183]
 605:../soes/esc.c ****          ESC_SMwritepdi (1);
 2275              	 .loc 1 605 0
 2276 0160 0120     	 movs r0,#1
 2277 0162 FFF7FEFF 	 bl ESC_SMwritepdi
 2278              	.L119:
 606:../soes/esc.c ****       }
 607:../soes/esc.c ****       return 0;
 2279              	 .loc 1 607 0
 2280 0166 0023     	 movs r3,#0
 2281 0168 7CE0     	 b .L111
 2282              	.L117:
 608:../soes/esc.c ****    }
 609:../soes/esc.c **** 
 610:../soes/esc.c ****    /* if the outmailbox is free check if we have something to send */
 611:../soes/esc.c ****    if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 2283              	 .loc 1 611 0
 2284 016a 414B     	 ldr r3,.L127+4
 2285 016c 93F89330 	 ldrb r3,[r3,#147]
 2286 0170 002B     	 cmp r3,#0
 2287 0172 2CD0     	 beq .L122
 2288              	 .loc 1 611 0 is_stmt 0 discriminator 1
 2289 0174 3E4B     	 ldr r3,.L127+4
 2290 0176 93F89430 	 ldrb r3,[r3,#148]
 2291 017a 002B     	 cmp r3,#0
 2292 017c 07D1     	 bne .L123
 2293              	 .loc 1 611 0 discriminator 2
 2294 017e 3C4B     	 ldr r3,.L127+4
 2295 0180 93F8B530 	 ldrb r3,[r3,#181]
 2296 0184 03F00803 	 and r3,r3,#8
 2297 0188 DBB2     	 uxtb r3,r3
 2298 018a 002B     	 cmp r3,#0
 2299 018c 1FD1     	 bne .L122
 2300              	.L123:
 612:../soes/esc.c ****    {
 613:../soes/esc.c ****       /* check out request mbx */
 614:../soes/esc.c ****       mbxhandle = ESC_outreqbuffer ();
 2301              	 .loc 1 614 0 is_stmt 1
 2302 018e FFF7FEFF 	 bl ESC_outreqbuffer
 2303 0192 0346     	 mov r3,r0
 2304 0194 FB71     	 strb r3,[r7,#7]
 615:../soes/esc.c ****       /* outmbx empty and outreq mbx available */
 616:../soes/esc.c ****       if (mbxhandle)
 2305              	 .loc 1 616 0
 2306 0196 FB79     	 ldrb r3,[r7,#7]
 2307 0198 002B     	 cmp r3,#0
 2308 019a 18D0     	 beq .L122
 617:../soes/esc.c ****       {
 618:../soes/esc.c ****          ESC_writembx (mbxhandle);
 2309              	 .loc 1 618 0
 2310 019c FB79     	 ldrb r3,[r7,#7]
 2311 019e 1846     	 mov r0,r3
 2312 01a0 FFF7FEFF 	 bl ESC_writembx
 619:../soes/esc.c ****          /* change state */
 620:../soes/esc.c ****          MBXcontrol[mbxhandle].state = MBXstate_outpost;
 2313              	 .loc 1 620 0
 2314 01a4 FB79     	 ldrb r3,[r7,#7]
 2315 01a6 334A     	 ldr r2,.L127+8
 2316 01a8 0421     	 movs r1,#4
 2317 01aa D154     	 strb r1,[r2,r3]
 621:../soes/esc.c ****          ESCvar.mbxoutpost = mbxhandle;
 2318              	 .loc 1 621 0
 2319 01ac 304A     	 ldr r2,.L127+4
 2320 01ae FB79     	 ldrb r3,[r7,#7]
 2321 01b0 82F89030 	 strb r3,[r2,#144]
 622:../soes/esc.c ****          if (ESCvar.txcue)
 2322              	 .loc 1 622 0
 2323 01b4 2E4B     	 ldr r3,.L127+4
 2324 01b6 93F89330 	 ldrb r3,[r3,#147]
 2325 01ba 002B     	 cmp r3,#0
 2326 01bc 07D0     	 beq .L122
 623:../soes/esc.c ****          {
 624:../soes/esc.c ****             ESCvar.txcue--;
 2327              	 .loc 1 624 0
 2328 01be 2C4B     	 ldr r3,.L127+4
 2329 01c0 93F89330 	 ldrb r3,[r3,#147]
 2330 01c4 013B     	 subs r3,r3,#1
 2331 01c6 DAB2     	 uxtb r2,r3
 2332 01c8 294B     	 ldr r3,.L127+4
 2333 01ca 83F89320 	 strb r2,[r3,#147]
 2334              	.L122:
 625:../soes/esc.c ****          }
 626:../soes/esc.c ****       }
 627:../soes/esc.c ****    }
 628:../soes/esc.c **** 
 629:../soes/esc.c ****    /* read mailbox if full and no xoe in progress */
 630:../soes/esc.c ****    if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 2335              	 .loc 1 630 0
 2336 01ce 284B     	 ldr r3,.L127+4
 2337 01d0 93F8AD30 	 ldrb r3,[r3,#173]
 2338 01d4 03F00803 	 and r3,r3,#8
 2339 01d8 DBB2     	 uxtb r3,r3
 2340 01da 002B     	 cmp r3,#0
 2341 01dc 41D0     	 beq .L124
 2342              	 .loc 1 630 0 is_stmt 0 discriminator 1
 2343 01de 254B     	 ldr r3,.L127+8
 2344 01e0 1B78     	 ldrb r3,[r3]
 2345 01e2 002B     	 cmp r3,#0
 2346 01e4 3DD1     	 bne .L124
 631:../soes/esc.c ****          && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 2347              	 .loc 1 631 0 is_stmt 1
 2348 01e6 224B     	 ldr r3,.L127+4
 2349 01e8 93F89030 	 ldrb r3,[r3,#144]
 2350 01ec 002B     	 cmp r3,#0
 2351 01ee 38D1     	 bne .L124
 2352              	 .loc 1 631 0 is_stmt 0 discriminator 1
 2353 01f0 1F4B     	 ldr r3,.L127+4
 2354 01f2 93F89230 	 ldrb r3,[r3,#146]
 2355 01f6 002B     	 cmp r3,#0
 2356 01f8 33D1     	 bne .L124
 632:../soes/esc.c ****    {
 633:../soes/esc.c ****       ESC_readmbx ();
 2357              	 .loc 1 633 0 is_stmt 1
 2358 01fa FFF7FEFF 	 bl ESC_readmbx
 634:../soes/esc.c ****       ESCvar.SM[0].MBXstat = 0;
 2359              	 .loc 1 634 0
 2360 01fe 1C4A     	 ldr r2,.L127+4
 2361 0200 92F8AD30 	 ldrb r3,[r2,#173]
 2362 0204 6FF3C303 	 bfc r3,#3,#1
 2363 0208 82F8AD30 	 strb r3,[r2,#173]
 635:../soes/esc.c ****       if (etohs (MBh->length) == 0)
 2364              	 .loc 1 635 0
 2365 020c 3B68     	 ldr r3,[r7]
 2366 020e 1B88     	 ldrh r3,[r3]
 2367 0210 9BB2     	 uxth r3,r3
 2368 0212 002B     	 cmp r3,#0
 2369 0214 05D1     	 bne .L125
 636:../soes/esc.c ****       {
 637:../soes/esc.c ****          MBX_error (MBXERR_INVALIDHEADER);
 2370              	 .loc 1 637 0
 2371 0216 0520     	 movs r0,#5
 2372 0218 FFF7FEFF 	 bl MBX_error
 638:../soes/esc.c ****          /* drop mailbox */
 639:../soes/esc.c ****          MBXcontrol[0].state = MBXstate_idle;
 2373              	 .loc 1 639 0
 2374 021c 154B     	 ldr r3,.L127+8
 2375 021e 0022     	 movs r2,#0
 2376 0220 1A70     	 strb r2,[r3]
 2377              	.L125:
 640:../soes/esc.c ****       }
 641:../soes/esc.c ****       if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 2378              	 .loc 1 641 0
 2379 0222 3B68     	 ldr r3,[r7]
 2380 0224 5B79     	 ldrb r3,[r3,#5]
 2381 0226 23F00F03 	 bic r3,r3,#15
 2382 022a DBB2     	 uxtb r3,r3
 2383 022c 002B     	 cmp r3,#0
 2384 022e 0DD0     	 beq .L126
 2385              	 .loc 1 641 0 is_stmt 0 discriminator 1
 2386 0230 3B68     	 ldr r3,[r7]
 2387 0232 5B79     	 ldrb r3,[r3,#5]
 2388 0234 C3F30313 	 ubfx r3,r3,#4,#4
 2389 0238 DBB2     	 uxtb r3,r3
 2390 023a 1A46     	 mov r2,r3
 2391 023c 0C4B     	 ldr r3,.L127+4
 2392 023e 93F88F30 	 ldrb r3,[r3,#143]
 2393 0242 9A42     	 cmp r2,r3
 2394 0244 02D1     	 bne .L126
 642:../soes/esc.c ****       {
 643:../soes/esc.c ****          /* drop mailbox */
 644:../soes/esc.c ****          MBXcontrol[0].state = MBXstate_idle;
 2395              	 .loc 1 644 0 is_stmt 1
 2396 0246 0B4B     	 ldr r3,.L127+8
 2397 0248 0022     	 movs r2,#0
 2398 024a 1A70     	 strb r2,[r3]
 2399              	.L126:
 645:../soes/esc.c ****       }
 646:../soes/esc.c ****       ESCvar.mbxincnt = MBh->mbxcnt;
 2400              	 .loc 1 646 0
 2401 024c 3B68     	 ldr r3,[r7]
 2402 024e 5B79     	 ldrb r3,[r3,#5]
 2403 0250 C3F30313 	 ubfx r3,r3,#4,#4
 2404 0254 DBB2     	 uxtb r3,r3
 2405 0256 1A46     	 mov r2,r3
 2406 0258 054B     	 ldr r3,.L127+4
 2407 025a 83F88F20 	 strb r2,[r3,#143]
 647:../soes/esc.c ****       return 1;
 2408              	 .loc 1 647 0
 2409 025e 0123     	 movs r3,#1
 2410 0260 00E0     	 b .L111
 2411              	.L124:
 648:../soes/esc.c ****    }
 649:../soes/esc.c **** 
 650:../soes/esc.c ****    return 0;
 2412              	 .loc 1 650 0
 2413 0262 0023     	 movs r3,#0
 2414              	.L111:
 651:../soes/esc.c **** }
 2415              	 .loc 1 651 0
 2416 0264 1846     	 mov r0,r3
 2417 0266 0837     	 adds r7,r7,#8
 2418              	.LCFI137:
 2419              	 .cfi_def_cfa_offset 8
 2420 0268 BD46     	 mov sp,r7
 2421              	.LCFI138:
 2422              	 .cfi_def_cfa_register 13
 2423              	 
 2424 026a 80BD     	 pop {r7,pc}
 2425              	.L128:
 2426              	 .align 2
 2427              	.L127:
 2428 026c 00000000 	 .word MBX
 2429 0270 00000000 	 .word ESCvar
 2430 0274 00000000 	 .word MBXcontrol
 2431              	 .cfi_endproc
 2432              	.LFE27:
 2434              	 .section .text.ESC_xoeprocess,"ax",%progbits
 2435              	 .align 2
 2436              	 .global ESC_xoeprocess
 2437              	 .thumb
 2438              	 .thumb_func
 2440              	ESC_xoeprocess:
 2441              	.LFB28:
 652:../soes/esc.c **** /** Handler for incorrect or unsupported mailbox data. Write error response
 653:../soes/esc.c ****  * in Mailbox.
 654:../soes/esc.c ****  */
 655:../soes/esc.c **** void ESC_xoeprocess (void)
 656:../soes/esc.c **** {
 2442              	 .loc 1 656 0
 2443              	 .cfi_startproc
 2444              	 
 2445              	 
 2446 0000 80B5     	 push {r7,lr}
 2447              	.LCFI139:
 2448              	 .cfi_def_cfa_offset 8
 2449              	 .cfi_offset 7,-8
 2450              	 .cfi_offset 14,-4
 2451 0002 82B0     	 sub sp,sp,#8
 2452              	.LCFI140:
 2453              	 .cfi_def_cfa_offset 16
 2454 0004 00AF     	 add r7,sp,#0
 2455              	.LCFI141:
 2456              	 .cfi_def_cfa_register 7
 657:../soes/esc.c ****    _MBXh *mbh;
 658:../soes/esc.c ****    if (ESCvar.MBXrun == 0)
 2457              	 .loc 1 658 0
 2458 0006 154B     	 ldr r3,.L135
 2459 0008 93F86C30 	 ldrb r3,[r3,#108]
 2460 000c 002B     	 cmp r3,#0
 2461 000e 00D1     	 bne .L130
 659:../soes/esc.c ****    {
 660:../soes/esc.c ****       return;
 2462              	 .loc 1 660 0
 2463 0010 20E0     	 b .L129
 2464              	.L130:
 661:../soes/esc.c ****    }
 662:../soes/esc.c ****    if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 2465              	 .loc 1 662 0
 2466 0012 124B     	 ldr r3,.L135
 2467 0014 93F89230 	 ldrb r3,[r3,#146]
 2468 0018 002B     	 cmp r3,#0
 2469 001a 1BD1     	 bne .L129
 2470              	 .loc 1 662 0 is_stmt 0 discriminator 1
 2471 001c 104B     	 ldr r3,.L135+4
 2472 001e 1B78     	 ldrb r3,[r3]
 2473 0020 012B     	 cmp r3,#1
 2474 0022 17D1     	 bne .L129
 663:../soes/esc.c ****    {
 664:../soes/esc.c ****       mbh = (_MBXh *) &MBX[0];
 2475              	 .loc 1 664 0 is_stmt 1
 2476 0024 0F4B     	 ldr r3,.L135+8
 2477 0026 7B60     	 str r3,[r7,#4]
 665:../soes/esc.c ****       if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 2478              	 .loc 1 665 0
 2479 0028 7B68     	 ldr r3,[r7,#4]
 2480 002a 5B79     	 ldrb r3,[r3,#5]
 2481 002c 03F00F03 	 and r3,r3,#15
 2482 0030 DBB2     	 uxtb r3,r3
 2483 0032 002B     	 cmp r3,#0
 2484 0034 04D0     	 beq .L132
 2485              	 .loc 1 665 0 is_stmt 0 discriminator 1
 2486 0036 7B68     	 ldr r3,[r7,#4]
 2487 0038 1B88     	 ldrh r3,[r3]
 2488 003a 9BB2     	 uxth r3,r3
 2489 003c 002B     	 cmp r3,#0
 2490 003e 03D1     	 bne .L133
 2491              	.L132:
 666:../soes/esc.c ****       {
 667:../soes/esc.c ****          MBX_error (MBXERR_INVALIDHEADER);
 2492              	 .loc 1 667 0 is_stmt 1
 2493 0040 0520     	 movs r0,#5
 2494 0042 FFF7FEFF 	 bl MBX_error
 2495 0046 02E0     	 b .L134
 2496              	.L133:
 668:../soes/esc.c ****       }
 669:../soes/esc.c ****       else
 670:../soes/esc.c ****       {
 671:../soes/esc.c ****          MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 2497              	 .loc 1 671 0
 2498 0048 0220     	 movs r0,#2
 2499 004a FFF7FEFF 	 bl MBX_error
 2500              	.L134:
 672:../soes/esc.c ****       }
 673:../soes/esc.c ****       /* mailbox type not supported, drop mailbox */
 674:../soes/esc.c ****       MBXcontrol[0].state = MBXstate_idle;
 2501              	 .loc 1 674 0
 2502 004e 044B     	 ldr r3,.L135+4
 2503 0050 0022     	 movs r2,#0
 2504 0052 1A70     	 strb r2,[r3]
 2505              	.L129:
 675:../soes/esc.c ****    }
 676:../soes/esc.c **** }
 2506              	 .loc 1 676 0
 2507 0054 0837     	 adds r7,r7,#8
 2508              	.LCFI142:
 2509              	 .cfi_def_cfa_offset 8
 2510 0056 BD46     	 mov sp,r7
 2511              	.LCFI143:
 2512              	 .cfi_def_cfa_register 13
 2513              	 
 2514 0058 80BD     	 pop {r7,pc}
 2515              	.L136:
 2516 005a 00BF     	 .align 2
 2517              	.L135:
 2518 005c 00000000 	 .word ESCvar
 2519 0060 00000000 	 .word MBXcontrol
 2520 0064 00000000 	 .word MBX
 2521              	 .cfi_endproc
 2522              	.LFE28:
 2524              	 .section .text.ESC_checkSM23,"ax",%progbits
 2525              	 .align 2
 2526              	 .global ESC_checkSM23
 2527              	 .thumb
 2528              	 .thumb_func
 2530              	ESC_checkSM23:
 2531              	.LFB29:
 677:../soes/esc.c **** 
 678:../soes/esc.c **** /** Validate the values of Sync Manager 2 & 3 that the current ESC values is
 679:../soes/esc.c ****  * equal to configured and calculated local values.
 680:../soes/esc.c ****  *
 681:../soes/esc.c ****  * @param[in] state   = Requested state.
 682:../soes/esc.c ****  * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if somet
 683:../soes/esc.c ****  */
 684:../soes/esc.c **** uint8_t ESC_checkSM23 (uint8_t state)
 685:../soes/esc.c **** {
 2532              	 .loc 1 685 0
 2533              	 .cfi_startproc
 2534              	 
 2535              	 
 2536 0000 80B5     	 push {r7,lr}
 2537              	.LCFI144:
 2538              	 .cfi_def_cfa_offset 8
 2539              	 .cfi_offset 7,-8
 2540              	 .cfi_offset 14,-4
 2541 0002 84B0     	 sub sp,sp,#16
 2542              	.LCFI145:
 2543              	 .cfi_def_cfa_offset 24
 2544 0004 00AF     	 add r7,sp,#0
 2545              	.LCFI146:
 2546              	 .cfi_def_cfa_register 7
 2547 0006 0346     	 mov r3,r0
 2548 0008 FB71     	 strb r3,[r7,#7]
 686:../soes/esc.c ****    _ESCsm2 *SM;
 687:../soes/esc.c ****    ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 2549              	 .loc 1 687 0
 2550 000a 4FF40160 	 mov r0,#2064
 2551 000e 3049     	 ldr r1,.L143
 2552 0010 0822     	 movs r2,#8
 2553 0012 FFF7FEFF 	 bl ESC_read
 688:../soes/esc.c ****    SM = (_ESCsm2 *) & ESCvar.SM[2];
 2554              	 .loc 1 688 0
 2555 0016 2E4B     	 ldr r3,.L143
 2556 0018 FB60     	 str r3,[r7,#12]
 689:../soes/esc.c ****    if ((etohs (SM->PSA) != ESC_SM2_sma) || (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 2557              	 .loc 1 689 0
 2558 001a FB68     	 ldr r3,[r7,#12]
 2559 001c 1B88     	 ldrh r3,[r3]
 2560 001e 9AB2     	 uxth r2,r3
 2561 0020 2C4B     	 ldr r3,.L143+4
 2562 0022 1B8E     	 ldrh r3,[r3,#48]
 2563 0024 9BB2     	 uxth r3,r3
 2564 0026 9A42     	 cmp r2,r3
 2565 0028 18D1     	 bne .L138
 2566              	 .loc 1 689 0 is_stmt 0 discriminator 1
 2567 002a FB68     	 ldr r3,[r7,#12]
 2568 002c 5B88     	 ldrh r3,[r3,#2]
 2569 002e 9AB2     	 uxth r2,r3
 2570 0030 284B     	 ldr r3,.L143+4
 2571 0032 B3F87930 	 ldrh r3,[r3,#121]
 2572 0036 9BB2     	 uxth r3,r3
 2573 0038 9A42     	 cmp r2,r3
 2574 003a 0FD1     	 bne .L138
 690:../soes/esc.c ****        || (SM->Command != ESC_SM2_smc) || !(SM->ActESC & ESC_SM2_act))
 2575              	 .loc 1 690 0 is_stmt 1
 2576 003c FB68     	 ldr r3,[r7,#12]
 2577 003e 1A79     	 ldrb r2,[r3,#4]
 2578 0040 244B     	 ldr r3,.L143+4
 2579 0042 93F83630 	 ldrb r3,[r3,#54]
 2580 0046 9A42     	 cmp r2,r3
 2581 0048 08D1     	 bne .L138
 2582              	 .loc 1 690 0 is_stmt 0 discriminator 1
 2583 004a FB68     	 ldr r3,[r7,#12]
 2584 004c 9A79     	 ldrb r2,[r3,#6]
 2585 004e 214B     	 ldr r3,.L143+4
 2586 0050 93F83730 	 ldrb r3,[r3,#55]
 2587 0054 1340     	 ands r3,r3,r2
 2588 0056 DBB2     	 uxtb r3,r3
 2589 0058 002B     	 cmp r3,#0
 2590 005a 05D1     	 bne .L139
 2591              	.L138:
 691:../soes/esc.c ****    {
 692:../soes/esc.c ****       ESCvar.SMtestresult = SMRESULT_ERRSM2;
 2592              	 .loc 1 692 0 is_stmt 1
 2593 005c 1D4B     	 ldr r3,.L143+4
 2594 005e 0422     	 movs r2,#4
 2595 0060 83F8A120 	 strb r2,[r3,#161]
 693:../soes/esc.c ****       /* fail state change */
 694:../soes/esc.c ****       return (ESCpreop | ESCerror);
 2596              	 .loc 1 694 0
 2597 0064 1223     	 movs r3,#18
 2598 0066 2FE0     	 b .L140
 2599              	.L139:
 695:../soes/esc.c ****    }
 696:../soes/esc.c ****    ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 2600              	 .loc 1 696 0
 2601 0068 40F61800 	 movw r0,#2072
 2602 006c 1A49     	 ldr r1,.L143+8
 2603 006e 0822     	 movs r2,#8
 2604 0070 FFF7FEFF 	 bl ESC_read
 697:../soes/esc.c ****    SM = (_ESCsm2 *) & ESCvar.SM[3];
 2605              	 .loc 1 697 0
 2606 0074 184B     	 ldr r3,.L143+8
 2607 0076 FB60     	 str r3,[r7,#12]
 698:../soes/esc.c ****    if ((etohs (SM->PSA) != ESC_SM3_sma) || (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 2608              	 .loc 1 698 0
 2609 0078 FB68     	 ldr r3,[r7,#12]
 2610 007a 1B88     	 ldrh r3,[r3]
 2611 007c 9AB2     	 uxth r2,r3
 2612 007e 154B     	 ldr r3,.L143+4
 2613 0080 1B8F     	 ldrh r3,[r3,#56]
 2614 0082 9BB2     	 uxth r3,r3
 2615 0084 9A42     	 cmp r2,r3
 2616 0086 18D1     	 bne .L141
 2617              	 .loc 1 698 0 is_stmt 0 discriminator 1
 2618 0088 FB68     	 ldr r3,[r7,#12]
 2619 008a 5B88     	 ldrh r3,[r3,#2]
 2620 008c 9AB2     	 uxth r2,r3
 2621 008e 114B     	 ldr r3,.L143+4
 2622 0090 B3F87B30 	 ldrh r3,[r3,#123]
 2623 0094 9BB2     	 uxth r3,r3
 2624 0096 9A42     	 cmp r2,r3
 2625 0098 0FD1     	 bne .L141
 699:../soes/esc.c ****        || (SM->Command != ESC_SM3_smc) || !(SM->ActESC & ESC_SM3_act))
 2626              	 .loc 1 699 0 is_stmt 1
 2627 009a FB68     	 ldr r3,[r7,#12]
 2628 009c 1A79     	 ldrb r2,[r3,#4]
 2629 009e 0D4B     	 ldr r3,.L143+4
 2630 00a0 93F83E30 	 ldrb r3,[r3,#62]
 2631 00a4 9A42     	 cmp r2,r3
 2632 00a6 08D1     	 bne .L141
 2633              	 .loc 1 699 0 is_stmt 0 discriminator 1
 2634 00a8 FB68     	 ldr r3,[r7,#12]
 2635 00aa 9A79     	 ldrb r2,[r3,#6]
 2636 00ac 094B     	 ldr r3,.L143+4
 2637 00ae 93F83F30 	 ldrb r3,[r3,#63]
 2638 00b2 1340     	 ands r3,r3,r2
 2639 00b4 DBB2     	 uxtb r3,r3
 2640 00b6 002B     	 cmp r3,#0
 2641 00b8 05D1     	 bne .L142
 2642              	.L141:
 700:../soes/esc.c ****    {
 701:../soes/esc.c ****       ESCvar.SMtestresult = SMRESULT_ERRSM3;
 2643              	 .loc 1 701 0 is_stmt 1
 2644 00ba 064B     	 ldr r3,.L143+4
 2645 00bc 0822     	 movs r2,#8
 2646 00be 83F8A120 	 strb r2,[r3,#161]
 702:../soes/esc.c ****       /* fail state change */
 703:../soes/esc.c ****       return (ESCpreop | ESCerror);
 2647              	 .loc 1 703 0
 2648 00c2 1223     	 movs r3,#18
 2649 00c4 00E0     	 b .L140
 2650              	.L142:
 704:../soes/esc.c ****    }
 705:../soes/esc.c ****    return state;
 2651              	 .loc 1 705 0
 2652 00c6 FB79     	 ldrb r3,[r7,#7]
 2653              	.L140:
 706:../soes/esc.c **** }
 2654              	 .loc 1 706 0
 2655 00c8 1846     	 mov r0,r3
 2656 00ca 1037     	 adds r7,r7,#16
 2657              	.LCFI147:
 2658              	 .cfi_def_cfa_offset 8
 2659 00cc BD46     	 mov sp,r7
 2660              	.LCFI148:
 2661              	 .cfi_def_cfa_register 13
 2662              	 
 2663 00ce 80BD     	 pop {r7,pc}
 2664              	.L144:
 2665              	 .align 2
 2666              	.L143:
 2667 00d0 B8000000 	 .word ESCvar+184
 2668 00d4 00000000 	 .word ESCvar
 2669 00d8 C0000000 	 .word ESCvar+192
 2670              	 .cfi_endproc
 2671              	.LFE29:
 2673              	 .section .text.ESC_startinput,"ax",%progbits
 2674              	 .align 2
 2675              	 .global ESC_startinput
 2676              	 .thumb
 2677              	 .thumb_func
 2679              	ESC_startinput:
 2680              	.LFB30:
 707:../soes/esc.c **** 
 708:../soes/esc.c **** /** Function trying to enable start updating the process data inputs. It calls the check SM 2 & 3
 709:../soes/esc.c ****  * routine, based on the result from there if enables or disables the Input SyncManager, in additio
 710:../soes/esc.c ****  * it updates the ALStatusCode case something didn't pass the check.
 711:../soes/esc.c ****  *
 712:../soes/esc.c ****  * @param[in] state   = Requested state.
 713:../soes/esc.c ****  * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if 
 714:../soes/esc.c ****  */
 715:../soes/esc.c **** uint8_t ESC_startinput (uint8_t state)
 716:../soes/esc.c **** {
 2681              	 .loc 1 716 0
 2682              	 .cfi_startproc
 2683              	 
 2684              	 
 2685 0000 80B5     	 push {r7,lr}
 2686              	.LCFI149:
 2687              	 .cfi_def_cfa_offset 8
 2688              	 .cfi_offset 7,-8
 2689              	 .cfi_offset 14,-4
 2690 0002 84B0     	 sub sp,sp,#16
 2691              	.LCFI150:
 2692              	 .cfi_def_cfa_offset 24
 2693 0004 00AF     	 add r7,sp,#0
 2694              	.LCFI151:
 2695              	 .cfi_def_cfa_register 7
 2696 0006 0346     	 mov r3,r0
 2697 0008 FB71     	 strb r3,[r7,#7]
 717:../soes/esc.c **** 
 718:../soes/esc.c ****    state = ESC_checkSM23 (state);
 2698              	 .loc 1 718 0
 2699 000a FB79     	 ldrb r3,[r7,#7]
 2700 000c 1846     	 mov r0,r3
 2701 000e FFF7FEFF 	 bl ESC_checkSM23
 2702 0012 0346     	 mov r3,r0
 2703 0014 FB71     	 strb r3,[r7,#7]
 719:../soes/esc.c **** 
 720:../soes/esc.c ****    if (state != (ESCpreop | ESCerror))
 2704              	 .loc 1 720 0
 2705 0016 FB79     	 ldrb r3,[r7,#7]
 2706 0018 122B     	 cmp r3,#18
 2707 001a 0AD0     	 beq .L146
 721:../soes/esc.c ****    {
 722:../soes/esc.c ****       ESC_SMenable (3);
 2708              	 .loc 1 722 0
 2709 001c 0320     	 movs r0,#3
 2710 001e FFF7FEFF 	 bl ESC_SMenable
 723:../soes/esc.c ****       CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 2711              	 .loc 1 723 0
 2712 0022 2C4B     	 ldr r3,.L154
 2713 0024 BFF35F8F 	 dmb sy
 2714 0028 0122     	 movs r2,#1
 2715 002a 1A70     	 strb r2,[r3]
 2716 002c BFF35F8F 	 dmb sy
 2717 0030 13E0     	 b .L147
 2718              	.L146:
 724:../soes/esc.c ****    }
 725:../soes/esc.c ****    else
 726:../soes/esc.c ****    {
 727:../soes/esc.c ****       ESC_SMdisable (2);
 2719              	 .loc 1 727 0
 2720 0032 0220     	 movs r0,#2
 2721 0034 FFF7FEFF 	 bl ESC_SMdisable
 728:../soes/esc.c ****       ESC_SMdisable (3);
 2722              	 .loc 1 728 0
 2723 0038 0320     	 movs r0,#3
 2724 003a FFF7FEFF 	 bl ESC_SMdisable
 729:../soes/esc.c ****       if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 2725              	 .loc 1 729 0
 2726 003e 264B     	 ldr r3,.L154+4
 2727 0040 93F8A130 	 ldrb r3,[r3,#161]
 2728 0044 03F00803 	 and r3,r3,#8
 2729 0048 002B     	 cmp r3,#0
 2730 004a 03D0     	 beq .L148
 730:../soes/esc.c ****       {
 731:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDINPUTSM);
 2731              	 .loc 1 731 0
 2732 004c 1E20     	 movs r0,#30
 2733 004e FFF7FEFF 	 bl ESC_ALerror
 2734 0052 02E0     	 b .L147
 2735              	.L148:
 732:../soes/esc.c ****       }
 733:../soes/esc.c ****       else
 734:../soes/esc.c ****       {
 735:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 2736              	 .loc 1 735 0
 2737 0054 1D20     	 movs r0,#29
 2738 0056 FFF7FEFF 	 bl ESC_ALerror
 2739              	.L147:
 736:../soes/esc.c ****       }
 737:../soes/esc.c ****    }
 738:../soes/esc.c **** 
 739:../soes/esc.c ****    /* Exit here if polling */
 740:../soes/esc.c ****    if (ESCvar.use_interrupt == 0)
 2740              	 .loc 1 740 0
 2741 005a 1F4B     	 ldr r3,.L154+4
 2742 005c 1B68     	 ldr r3,[r3]
 2743 005e 002B     	 cmp r3,#0
 2744 0060 01D1     	 bne .L149
 741:../soes/esc.c ****    {
 742:../soes/esc.c ****       return state;
 2745              	 .loc 1 742 0
 2746 0062 FB79     	 ldrb r3,[r7,#7]
 2747 0064 32E0     	 b .L150
 2748              	.L149:
 743:../soes/esc.c ****    }
 744:../soes/esc.c **** 
 745:../soes/esc.c ****    if (state != (ESCpreop | ESCerror))
 2749              	 .loc 1 745 0
 2750 0066 FB79     	 ldrb r3,[r7,#7]
 2751 0068 122B     	 cmp r3,#18
 2752 006a 2ED0     	 beq .L151
 2753              	.LBB2:
 746:../soes/esc.c ****    {
 747:../soes/esc.c ****       uint16_t dc_check_result;
 748:../soes/esc.c ****       dc_check_result = ESC_checkDC();
 2754              	 .loc 1 748 0
 2755 006c FFF7FEFF 	 bl ESC_checkDC
 2756 0070 0346     	 mov r3,r0
 2757 0072 FB81     	 strh r3,[r7,#14]
 749:../soes/esc.c ****       if(dc_check_result > 0)
 2758              	 .loc 1 749 0
 2759 0074 FB89     	 ldrh r3,[r7,#14]
 2760 0076 002B     	 cmp r3,#0
 2761 0078 13D0     	 beq .L152
 750:../soes/esc.c ****       {
 751:../soes/esc.c ****          ESC_ALerror (dc_check_result);
 2762              	 .loc 1 751 0
 2763 007a FB89     	 ldrh r3,[r7,#14]
 2764 007c 1846     	 mov r0,r3
 2765 007e FFF7FEFF 	 bl ESC_ALerror
 752:../soes/esc.c ****          state = (ESCpreop | ESCerror);
 2766              	 .loc 1 752 0
 2767 0082 1223     	 movs r3,#18
 2768 0084 FB71     	 strb r3,[r7,#7]
 753:../soes/esc.c **** 
 754:../soes/esc.c ****          ESC_SMdisable (2);
 2769              	 .loc 1 754 0
 2770 0086 0220     	 movs r0,#2
 2771 0088 FFF7FEFF 	 bl ESC_SMdisable
 755:../soes/esc.c ****          ESC_SMdisable (3);
 2772              	 .loc 1 755 0
 2773 008c 0320     	 movs r0,#3
 2774 008e FFF7FEFF 	 bl ESC_SMdisable
 756:../soes/esc.c ****          CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 2775              	 .loc 1 756 0
 2776 0092 104B     	 ldr r3,.L154
 2777 0094 BFF35F8F 	 dmb sy
 2778 0098 0022     	 movs r2,#0
 2779 009a 1A70     	 strb r2,[r3]
 2780 009c BFF35F8F 	 dmb sy
 2781 00a0 13E0     	 b .L151
 2782              	.L152:
 757:../soes/esc.c ****       }
 758:../soes/esc.c ****       else
 759:../soes/esc.c ****       {
 760:../soes/esc.c ****          if (ESCvar.esc_hw_interrupt_enable != NULL)
 2783              	 .loc 1 760 0
 2784 00a2 0D4B     	 ldr r3,.L154+4
 2785 00a4 1B6E     	 ldr r3,[r3,#96]
 2786 00a6 002B     	 cmp r3,#0
 2787 00a8 0FD0     	 beq .L151
 761:../soes/esc.c ****          {
 762:../soes/esc.c ****             if(ESCvar.dcsync > 0)
 2788              	 .loc 1 762 0
 2789 00aa 0B4B     	 ldr r3,.L154+4
 2790 00ac 93F88130 	 ldrb r3,[r3,#129]
 2791 00b0 002B     	 cmp r3,#0
 2792 00b2 05D0     	 beq .L153
 763:../soes/esc.c ****             {
 764:../soes/esc.c ****                ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_DC_SYNC0 |
 2793              	 .loc 1 764 0
 2794 00b4 084B     	 ldr r3,.L154+4
 2795 00b6 1B6E     	 ldr r3,[r3,#96]
 2796 00b8 40F20440 	 movw r0,#1028
 2797 00bc 9847     	 blx r3
 2798 00be 04E0     	 b .L151
 2799              	.L153:
 765:../soes/esc.c ****                      ESCREG_ALEVENT_SM2);
 766:../soes/esc.c ****             }
 767:../soes/esc.c ****             else
 768:../soes/esc.c ****             {
 769:../soes/esc.c ****                ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_SM2);
 2800              	 .loc 1 769 0
 2801 00c0 054B     	 ldr r3,.L154+4
 2802 00c2 1B6E     	 ldr r3,[r3,#96]
 2803 00c4 4FF48060 	 mov r0,#1024
 2804 00c8 9847     	 blx r3
 2805              	.L151:
 2806              	.LBE2:
 770:../soes/esc.c ****             }
 771:../soes/esc.c ****          }
 772:../soes/esc.c ****       }
 773:../soes/esc.c ****    }
 774:../soes/esc.c **** 
 775:../soes/esc.c ****    return state;
 2807              	 .loc 1 775 0
 2808 00ca FB79     	 ldrb r3,[r7,#7]
 2809              	.L150:
 776:../soes/esc.c **** }
 2810              	 .loc 1 776 0
 2811 00cc 1846     	 mov r0,r3
 2812 00ce 1037     	 adds r7,r7,#16
 2813              	.LCFI152:
 2814              	 .cfi_def_cfa_offset 8
 2815 00d0 BD46     	 mov sp,r7
 2816              	.LCFI153:
 2817              	 .cfi_def_cfa_register 13
 2818              	 
 2819 00d2 80BD     	 pop {r7,pc}
 2820              	.L155:
 2821              	 .align 2
 2822              	.L154:
 2823 00d4 D3000000 	 .word ESCvar+211
 2824 00d8 00000000 	 .word ESCvar
 2825              	 .cfi_endproc
 2826              	.LFE30:
 2828              	 .section .text.ESC_stopinput,"ax",%progbits
 2829              	 .align 2
 2830              	 .global ESC_stopinput
 2831              	 .thumb
 2832              	 .thumb_func
 2834              	ESC_stopinput:
 2835              	.LFB31:
 777:../soes/esc.c **** 
 778:../soes/esc.c **** /** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 779:../soes/esc.c ****  * Set the App.state to APPSTATE_IDLE.
 780:../soes/esc.c ****  *
 781:../soes/esc.c ****  */
 782:../soes/esc.c **** void ESC_stopinput (void)
 783:../soes/esc.c **** {
 2836              	 .loc 1 783 0
 2837              	 .cfi_startproc
 2838              	 
 2839              	 
 2840 0000 80B5     	 push {r7,lr}
 2841              	.LCFI154:
 2842              	 .cfi_def_cfa_offset 8
 2843              	 .cfi_offset 7,-8
 2844              	 .cfi_offset 14,-4
 2845 0002 00AF     	 add r7,sp,#0
 2846              	.LCFI155:
 2847              	 .cfi_def_cfa_register 7
 784:../soes/esc.c ****    CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 2848              	 .loc 1 784 0
 2849 0004 0D4B     	 ldr r3,.L158
 2850 0006 BFF35F8F 	 dmb sy
 2851 000a 0022     	 movs r2,#0
 2852 000c 1A70     	 strb r2,[r3]
 2853 000e BFF35F8F 	 dmb sy
 785:../soes/esc.c ****    ESC_SMdisable (3);
 2854              	 .loc 1 785 0
 2855 0012 0320     	 movs r0,#3
 2856 0014 FFF7FEFF 	 bl ESC_SMdisable
 786:../soes/esc.c ****    ESC_SMdisable (2);
 2857              	 .loc 1 786 0
 2858 0018 0220     	 movs r0,#2
 2859 001a FFF7FEFF 	 bl ESC_SMdisable
 787:../soes/esc.c **** 
 788:../soes/esc.c ****    /* Call interrupt disable hook case it have been configured  */
 789:../soes/esc.c ****    if ((ESCvar.use_interrupt != 0) &&
 2860              	 .loc 1 789 0
 2861 001e 084B     	 ldr r3,.L158+4
 2862 0020 1B68     	 ldr r3,[r3]
 2863 0022 002B     	 cmp r3,#0
 2864 0024 08D0     	 beq .L156
 790:../soes/esc.c ****          (ESCvar.esc_hw_interrupt_disable != NULL))
 2865              	 .loc 1 790 0 discriminator 1
 2866 0026 064B     	 ldr r3,.L158+4
 2867 0028 5B6E     	 ldr r3,[r3,#100]
 789:../soes/esc.c ****          (ESCvar.esc_hw_interrupt_disable != NULL))
 2868              	 .loc 1 789 0 discriminator 1
 2869 002a 002B     	 cmp r3,#0
 2870 002c 04D0     	 beq .L156
 791:../soes/esc.c ****    {
 792:../soes/esc.c ****       ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 2871              	 .loc 1 792 0
 2872 002e 044B     	 ldr r3,.L158+4
 2873 0030 5B6E     	 ldr r3,[r3,#100]
 2874 0032 40F20440 	 movw r0,#1028
 2875 0036 9847     	 blx r3
 2876              	.L156:
 793:../soes/esc.c ****             ESCREG_ALEVENT_SM2);
 794:../soes/esc.c ****    }
 795:../soes/esc.c **** }
 2877              	 .loc 1 795 0
 2878 0038 80BD     	 pop {r7,pc}
 2879              	.L159:
 2880 003a 00BF     	 .align 2
 2881              	.L158:
 2882 003c D3000000 	 .word ESCvar+211
 2883 0040 00000000 	 .word ESCvar
 2884              	 .cfi_endproc
 2885              	.LFE31:
 2887              	 .section .text.ESC_startoutput,"ax",%progbits
 2888              	 .align 2
 2889              	 .global ESC_startoutput
 2890              	 .thumb
 2891              	 .thumb_func
 2893              	ESC_startoutput:
 2894              	.LFB32:
 796:../soes/esc.c **** 
 797:../soes/esc.c **** 
 798:../soes/esc.c **** /** Unconditional start of updating outputs by enabling Sync Manager 2.
 799:../soes/esc.c ****  * Set the App.state to APPSTATE_OUTPUT.
 800:../soes/esc.c ****  *
 801:../soes/esc.c ****  * @param[in] state   = Not used.
 802:../soes/esc.c ****  * @return = state unchanged.
 803:../soes/esc.c ****  *
 804:../soes/esc.c ****  */
 805:../soes/esc.c **** uint8_t ESC_startoutput (uint8_t state)
 806:../soes/esc.c **** {
 2895              	 .loc 1 806 0
 2896              	 .cfi_startproc
 2897              	 
 2898              	 
 2899 0000 80B5     	 push {r7,lr}
 2900              	.LCFI156:
 2901              	 .cfi_def_cfa_offset 8
 2902              	 .cfi_offset 7,-8
 2903              	 .cfi_offset 14,-4
 2904 0002 82B0     	 sub sp,sp,#8
 2905              	.LCFI157:
 2906              	 .cfi_def_cfa_offset 16
 2907 0004 00AF     	 add r7,sp,#0
 2908              	.LCFI158:
 2909              	 .cfi_def_cfa_register 7
 2910 0006 0346     	 mov r3,r0
 2911 0008 FB71     	 strb r3,[r7,#7]
 807:../soes/esc.c **** 
 808:../soes/esc.c ****    ESC_SMenable (2);
 2912              	 .loc 1 808 0
 2913 000a 0220     	 movs r0,#2
 2914 000c FFF7FEFF 	 bl ESC_SMenable
 809:../soes/esc.c ****    CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 2915              	 .loc 1 809 0
 2916 0010 084B     	 ldr r3,.L163
 2917 0012 BFF35F8F 	 dmb sy
 2918              	.L162:
 2919 0016 D3E84F2F 	 ldrexb r2,[r3]
 2920 001a 42F00202 	 orr r2,r2,#2
 2921 001e C3E8412F 	 strexb r1,r2,[r3]
 2922 0022 0029     	 cmp r1,#0
 2923 0024 F7D1     	 bne .L162
 2924 0026 BFF35F8F 	 dmb sy
 810:../soes/esc.c ****    return state;
 2925              	 .loc 1 810 0
 2926 002a FB79     	 ldrb r3,[r7,#7]
 811:../soes/esc.c **** 
 812:../soes/esc.c **** }
 2927              	 .loc 1 812 0
 2928 002c 1846     	 mov r0,r3
 2929 002e 0837     	 adds r7,r7,#8
 2930              	.LCFI159:
 2931              	 .cfi_def_cfa_offset 8
 2932 0030 BD46     	 mov sp,r7
 2933              	.LCFI160:
 2934              	 .cfi_def_cfa_register 13
 2935              	 
 2936 0032 80BD     	 pop {r7,pc}
 2937              	.L164:
 2938              	 .align 2
 2939              	.L163:
 2940 0034 D3000000 	 .word ESCvar+211
 2941              	 .cfi_endproc
 2942              	.LFE32:
 2944              	 .section .text.ESC_stopoutput,"ax",%progbits
 2945              	 .align 2
 2946              	 .global ESC_stopoutput
 2947              	 .thumb
 2948              	 .thumb_func
 2950              	ESC_stopoutput:
 2951              	.LFB33:
 813:../soes/esc.c **** 
 814:../soes/esc.c **** /** Unconditional stop of updating outputs by disabling Sync Manager 2.
 815:../soes/esc.c ****  * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 816:../soes/esc.c ****  * letting the user to set safe state values on outputs.
 817:../soes/esc.c ****  *
 818:../soes/esc.c ****  */
 819:../soes/esc.c **** void ESC_stopoutput (void)
 820:../soes/esc.c **** {
 2952              	 .loc 1 820 0
 2953              	 .cfi_startproc
 2954              	 
 2955              	 
 2956 0000 80B5     	 push {r7,lr}
 2957              	.LCFI161:
 2958              	 .cfi_def_cfa_offset 8
 2959              	 .cfi_offset 7,-8
 2960              	 .cfi_offset 14,-4
 2961 0002 00AF     	 add r7,sp,#0
 2962              	.LCFI162:
 2963              	 .cfi_def_cfa_register 7
 821:../soes/esc.c ****    CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 2964              	 .loc 1 821 0
 2965 0004 094B     	 ldr r3,.L167
 2966 0006 BFF35F8F 	 dmb sy
 2967              	.L166:
 2968 000a D3E84F2F 	 ldrexb r2,[r3]
 2969 000e 02F00102 	 and r2,r2,#1
 2970 0012 C3E8412F 	 strexb r1,r2,[r3]
 2971 0016 0029     	 cmp r1,#0
 2972 0018 F7D1     	 bne .L166
 2973 001a BFF35F8F 	 dmb sy
 822:../soes/esc.c ****    ESC_SMdisable (2);
 2974              	 .loc 1 822 0
 2975 001e 0220     	 movs r0,#2
 2976 0020 FFF7FEFF 	 bl ESC_SMdisable
 823:../soes/esc.c ****    APP_safeoutput ();
 2977              	 .loc 1 823 0
 2978 0024 FFF7FEFF 	 bl APP_safeoutput
 824:../soes/esc.c **** }
 2979              	 .loc 1 824 0
 2980 0028 80BD     	 pop {r7,pc}
 2981              	.L168:
 2982 002a 00BF     	 .align 2
 2983              	.L167:
 2984 002c D3000000 	 .word ESCvar+211
 2985              	 .cfi_endproc
 2986              	.LFE33:
 2988              	 .section .text.ESC_sm_act_event,"ax",%progbits
 2989              	 .align 2
 2990              	 .global ESC_sm_act_event
 2991              	 .thumb
 2992              	 .thumb_func
 2994              	ESC_sm_act_event:
 2995              	.LFB34:
 825:../soes/esc.c **** 
 826:../soes/esc.c **** /** The state handler acting on SyncManager Activation BIT(4)
 827:../soes/esc.c ****  * events in the Al Event Request register 0x220.
 828:../soes/esc.c ****  *
 829:../soes/esc.c ****  */
 830:../soes/esc.c **** void ESC_sm_act_event (void)
 831:../soes/esc.c **** {
 2996              	 .loc 1 831 0
 2997              	 .cfi_startproc
 2998              	 
 2999              	 
 3000 0000 80B5     	 push {r7,lr}
 3001              	.LCFI163:
 3002              	 .cfi_def_cfa_offset 8
 3003              	 .cfi_offset 7,-8
 3004              	 .cfi_offset 14,-4
 3005 0002 82B0     	 sub sp,sp,#8
 3006              	.LCFI164:
 3007              	 .cfi_def_cfa_offset 16
 3008 0004 00AF     	 add r7,sp,#0
 3009              	.LCFI165:
 3010              	 .cfi_def_cfa_register 7
 832:../soes/esc.c ****    uint8_t ac, an, as, ax, ax23;
 833:../soes/esc.c **** 
 834:../soes/esc.c ****    /* Have at least on Sync Manager  changed */
 835:../soes/esc.c ****    if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 3011              	 .loc 1 835 0
 3012 0006 564B     	 ldr r3,.L181
 3013 0008 B3F8D030 	 ldrh r3,[r3,#208]
 3014 000c 9BB2     	 uxth r3,r3
 3015 000e 03F01003 	 and r3,r3,#16
 3016 0012 002B     	 cmp r3,#0
 3017 0014 00D1     	 bne .L170
 836:../soes/esc.c ****    {
 837:../soes/esc.c ****       /* nothing to do */
 838:../soes/esc.c ****       return;
 3018              	 .loc 1 838 0
 3019 0016 9FE0     	 b .L169
 3020              	.L170:
 839:../soes/esc.c ****    }
 840:../soes/esc.c **** 
 841:../soes/esc.c ****    /* Mask state request bits + Error ACK */
 842:../soes/esc.c ****    ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 3021              	 .loc 1 842 0
 3022 0018 514B     	 ldr r3,.L181
 3023 001a B3F88630 	 ldrh r3,[r3,#134]
 3024 001e 9BB2     	 uxth r3,r3
 3025 0020 DBB2     	 uxtb r3,r3
 3026 0022 03F01F03 	 and r3,r3,#31
 3027 0026 FB71     	 strb r3,[r7,#7]
 843:../soes/esc.c ****    as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 3028              	 .loc 1 843 0
 3029 0028 4D4B     	 ldr r3,.L181
 3030 002a B3F88430 	 ldrh r3,[r3,#132]
 3031 002e 9BB2     	 uxth r3,r3
 3032 0030 DBB2     	 uxtb r3,r3
 3033 0032 03F01F03 	 and r3,r3,#31
 3034 0036 7B71     	 strb r3,[r7,#5]
 844:../soes/esc.c ****    an = as;
 3035              	 .loc 1 844 0
 3036 0038 7B79     	 ldrb r3,[r7,#5]
 3037 003a BB71     	 strb r3,[r7,#6]
 845:../soes/esc.c ****    if (((ac & ESCerror) || (ac == ESCinit)))
 3038              	 .loc 1 845 0
 3039 003c FB79     	 ldrb r3,[r7,#7]
 3040 003e 03F01003 	 and r3,r3,#16
 3041 0042 002B     	 cmp r3,#0
 3042 0044 02D1     	 bne .L172
 3043              	 .loc 1 845 0 is_stmt 0 discriminator 1
 3044 0046 FB79     	 ldrb r3,[r7,#7]
 3045 0048 012B     	 cmp r3,#1
 3046 004a 07D1     	 bne .L173
 3047              	.L172:
 846:../soes/esc.c ****    {
 847:../soes/esc.c ****       /* if error bit confirmed reset */
 848:../soes/esc.c ****       ac &= ESCREG_AL_ERRACKMASK;
 3048              	 .loc 1 848 0 is_stmt 1
 3049 004c FB79     	 ldrb r3,[r7,#7]
 3050 004e 03F00F03 	 and r3,r3,#15
 3051 0052 FB71     	 strb r3,[r7,#7]
 849:../soes/esc.c ****       an &= ESCREG_AL_ERRACKMASK;
 3052              	 .loc 1 849 0
 3053 0054 BB79     	 ldrb r3,[r7,#6]
 3054 0056 03F00F03 	 and r3,r3,#15
 3055 005a BB71     	 strb r3,[r7,#6]
 3056              	.L173:
 850:../soes/esc.c ****    }
 851:../soes/esc.c ****    /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
 852:../soes/esc.c ****     * is up and running
 853:../soes/esc.c ****     */
 854:../soes/esc.c ****    if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 3057              	 .loc 1 854 0
 3058 005c 7B79     	 ldrb r3,[r7,#5]
 3059 005e 03F00E03 	 and r3,r3,#14
 3060 0062 002B     	 cmp r3,#0
 3061 0064 60D0     	 beq .L174
 3062              	 .loc 1 854 0 is_stmt 0 discriminator 1
 3063 0066 7B79     	 ldrb r3,[r7,#5]
 3064 0068 032B     	 cmp r3,#3
 3065 006a 5DD0     	 beq .L174
 855:../soes/esc.c ****        ((as == ESCboot) == 0) && ESCvar.MBXrun)
 3066              	 .loc 1 855 0 is_stmt 1
 3067 006c 3C4B     	 ldr r3,.L181
 3068 006e 93F86C30 	 ldrb r3,[r3,#108]
 3069 0072 002B     	 cmp r3,#0
 3070 0074 58D0     	 beq .L174
 856:../soes/esc.c ****    {
 857:../soes/esc.c ****       /* Validate Sync Managers, reading the Activation register will
 858:../soes/esc.c ****        * acknowledge the SyncManager Activation event making us enter
 859:../soes/esc.c ****        * this execution path.
 860:../soes/esc.c ****        */
 861:../soes/esc.c ****       ax = ESC_checkmbx (as);
 3071              	 .loc 1 861 0
 3072 0076 7B79     	 ldrb r3,[r7,#5]
 3073 0078 1846     	 mov r0,r3
 3074 007a FFF7FEFF 	 bl ESC_checkmbx
 3075 007e 0346     	 mov r3,r0
 3076 0080 3B71     	 strb r3,[r7,#4]
 862:../soes/esc.c ****       ax23 = ESC_checkSM23 (as);
 3077              	 .loc 1 862 0
 3078 0082 7B79     	 ldrb r3,[r7,#5]
 3079 0084 1846     	 mov r0,r3
 3080 0086 FFF7FEFF 	 bl ESC_checkSM23
 3081 008a 0346     	 mov r3,r0
 3082 008c FB70     	 strb r3,[r7,#3]
 863:../soes/esc.c ****       if ((an & ESCerror) && ((ac & ESCerror) == 0))
 3083              	 .loc 1 863 0
 3084 008e BB79     	 ldrb r3,[r7,#6]
 3085 0090 03F01003 	 and r3,r3,#16
 3086 0094 002B     	 cmp r3,#0
 3087 0096 05D0     	 beq .L175
 3088              	 .loc 1 863 0 is_stmt 0 discriminator 1
 3089 0098 FB79     	 ldrb r3,[r7,#7]
 3090 009a 03F01003 	 and r3,r3,#16
 3091 009e 002B     	 cmp r3,#0
 3092 00a0 00D1     	 bne .L175
 3093              	 .loc 1 863 0
 3094 00a2 40E0     	 b .L176
 3095              	.L175:
 864:../soes/esc.c ****       {
 865:../soes/esc.c ****          /* if in error then stay there */
 866:../soes/esc.c ****       }
 867:../soes/esc.c ****       /* Have we been forced to step down to INIT we will stop mailboxes,
 868:../soes/esc.c ****        * update AL Status Code and exit ESC_state
 869:../soes/esc.c ****        */
 870:../soes/esc.c ****       else if (ax == (ESCinit | ESCerror))
 3096              	 .loc 1 870 0 is_stmt 1
 3097 00a4 3B79     	 ldrb r3,[r7,#4]
 3098 00a6 112B     	 cmp r3,#17
 3099 00a8 1AD1     	 bne .L177
 871:../soes/esc.c ****       {
 872:../soes/esc.c ****          /* If we have activated Inputs and Outputs we need to disable them */
 873:../soes/esc.c ****          if (CC_ATOMIC_GET(ESCvar.App.state))
 3100              	 .loc 1 873 0
 3101 00aa 2E4B     	 ldr r3,.L181+4
 3102 00ac BFF35F8F 	 dmb sy
 3103 00b0 1B78     	 ldrb r3,[r3]
 3104 00b2 BFF35F8F 	 dmb sy
 3105 00b6 DBB2     	 uxtb r3,r3
 3106 00b8 002B     	 cmp r3,#0
 3107 00ba 03D0     	 beq .L178
 874:../soes/esc.c ****          {
 875:../soes/esc.c ****             ESC_stopoutput ();
 3108              	 .loc 1 875 0
 3109 00bc FFF7FEFF 	 bl ESC_stopoutput
 876:../soes/esc.c ****             ESC_stopinput ();
 3110              	 .loc 1 876 0
 3111 00c0 FFF7FEFF 	 bl ESC_stopinput
 3112              	.L178:
 877:../soes/esc.c ****          }
 878:../soes/esc.c ****          /* Stop mailboxes and update ALStatus code */
 879:../soes/esc.c ****          ESC_stopmbx ();
 3113              	 .loc 1 879 0
 3114 00c4 FFF7FEFF 	 bl ESC_stopmbx
 880:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 3115              	 .loc 1 880 0
 3116 00c8 1620     	 movs r0,#22
 3117 00ca FFF7FEFF 	 bl ESC_ALerror
 881:../soes/esc.c ****          ESCvar.MBXrun = 0;
 3118              	 .loc 1 881 0
 3119 00ce 244B     	 ldr r3,.L181
 3120 00d0 0022     	 movs r2,#0
 3121 00d2 83F86C20 	 strb r2,[r3,#108]
 882:../soes/esc.c ****          ESC_ALstatus (ax);
 3122              	 .loc 1 882 0
 3123 00d6 3B79     	 ldrb r3,[r7,#4]
 3124 00d8 1846     	 mov r0,r3
 3125 00da FFF7FEFF 	 bl ESC_ALstatus
 883:../soes/esc.c ****          return;
 3126              	 .loc 1 883 0
 3127 00de 3BE0     	 b .L169
 3128              	.L177:
 884:../soes/esc.c ****       }
 885:../soes/esc.c ****       /* Have we been forced to step down to PREOP we will stop inputs
 886:../soes/esc.c ****        * and outputs, update AL Status Code and exit ESC_state
 887:../soes/esc.c ****        */
 888:../soes/esc.c ****       else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 3129              	 .loc 1 888 0
 3130 00e0 204B     	 ldr r3,.L181+4
 3131 00e2 BFF35F8F 	 dmb sy
 3132 00e6 1B78     	 ldrb r3,[r3]
 3133 00e8 BFF35F8F 	 dmb sy
 3134 00ec DBB2     	 uxtb r3,r3
 3135 00ee 002B     	 cmp r3,#0
 3136 00f0 19D0     	 beq .L176
 3137              	 .loc 1 888 0 is_stmt 0 discriminator 1
 3138 00f2 FB78     	 ldrb r3,[r7,#3]
 3139 00f4 122B     	 cmp r3,#18
 3140 00f6 16D1     	 bne .L176
 889:../soes/esc.c ****       {
 890:../soes/esc.c ****          ESC_stopoutput ();
 3141              	 .loc 1 890 0 is_stmt 1
 3142 00f8 FFF7FEFF 	 bl ESC_stopoutput
 891:../soes/esc.c ****          ESC_stopinput ();
 3143              	 .loc 1 891 0
 3144 00fc FFF7FEFF 	 bl ESC_stopinput
 892:../soes/esc.c ****          if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 3145              	 .loc 1 892 0
 3146 0100 174B     	 ldr r3,.L181
 3147 0102 93F8A130 	 ldrb r3,[r3,#161]
 3148 0106 03F00803 	 and r3,r3,#8
 3149 010a 002B     	 cmp r3,#0
 3150 010c 03D0     	 beq .L179
 893:../soes/esc.c ****          {
 894:../soes/esc.c ****             ESC_ALerror (ALERR_INVALIDINPUTSM);
 3151              	 .loc 1 894 0
 3152 010e 1E20     	 movs r0,#30
 3153 0110 FFF7FEFF 	 bl ESC_ALerror
 3154 0114 02E0     	 b .L180
 3155              	.L179:
 895:../soes/esc.c ****          }
 896:../soes/esc.c ****          else
 897:../soes/esc.c ****          {
 898:../soes/esc.c ****             ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 3156              	 .loc 1 898 0
 3157 0116 1D20     	 movs r0,#29
 3158 0118 FFF7FEFF 	 bl ESC_ALerror
 3159              	.L180:
 899:../soes/esc.c ****          }
 900:../soes/esc.c ****          ESC_ALstatus (ax23);
 3160              	 .loc 1 900 0
 3161 011c FB78     	 ldrb r3,[r7,#3]
 3162 011e 1846     	 mov r0,r3
 3163 0120 FFF7FEFF 	 bl ESC_ALstatus
 863:../soes/esc.c ****       {
 3164              	 .loc 1 863 0
 3165 0124 18E0     	 b .L169
 3166              	.L176:
 863:../soes/esc.c ****       {
 3167              	 .loc 1 863 0 is_stmt 0 discriminator 2
 3168 0126 17E0     	 b .L169
 3169              	.L174:
 901:../soes/esc.c ****       }
 902:../soes/esc.c ****    }
 903:../soes/esc.c ****    else
 904:../soes/esc.c ****    {
 905:../soes/esc.c ****       ESC_SMack (0);
 3170              	 .loc 1 905 0 is_stmt 1
 3171 0128 0020     	 movs r0,#0
 3172 012a FFF7FEFF 	 bl ESC_SMack
 906:../soes/esc.c ****       ESC_SMack (1);
 3173              	 .loc 1 906 0
 3174 012e 0120     	 movs r0,#1
 3175 0130 FFF7FEFF 	 bl ESC_SMack
 907:../soes/esc.c ****       ESC_SMack (2);
 3176              	 .loc 1 907 0
 3177 0134 0220     	 movs r0,#2
 3178 0136 FFF7FEFF 	 bl ESC_SMack
 908:../soes/esc.c ****       ESC_SMack (3);
 3179              	 .loc 1 908 0
 3180 013a 0320     	 movs r0,#3
 3181 013c FFF7FEFF 	 bl ESC_SMack
 909:../soes/esc.c ****       ESC_SMack (4);
 3182              	 .loc 1 909 0
 3183 0140 0420     	 movs r0,#4
 3184 0142 FFF7FEFF 	 bl ESC_SMack
 910:../soes/esc.c ****       ESC_SMack (5);
 3185              	 .loc 1 910 0
 3186 0146 0520     	 movs r0,#5
 3187 0148 FFF7FEFF 	 bl ESC_SMack
 911:../soes/esc.c ****       ESC_SMack (6);
 3188              	 .loc 1 911 0
 3189 014c 0620     	 movs r0,#6
 3190 014e FFF7FEFF 	 bl ESC_SMack
 912:../soes/esc.c ****       ESC_SMack (7);
 3191              	 .loc 1 912 0
 3192 0152 0720     	 movs r0,#7
 3193 0154 FFF7FEFF 	 bl ESC_SMack
 3194              	.L169:
 913:../soes/esc.c ****    }
 914:../soes/esc.c **** }
 3195              	 .loc 1 914 0
 3196 0158 0837     	 adds r7,r7,#8
 3197              	.LCFI166:
 3198              	 .cfi_def_cfa_offset 8
 3199 015a BD46     	 mov sp,r7
 3200              	.LCFI167:
 3201              	 .cfi_def_cfa_register 13
 3202              	 
 3203 015c 80BD     	 pop {r7,pc}
 3204              	.L182:
 3205 015e 00BF     	 .align 2
 3206              	.L181:
 3207 0160 00000000 	 .word ESCvar
 3208 0164 D3000000 	 .word ESCvar+211
 3209              	 .cfi_endproc
 3210              	.LFE34:
 3212              	 .section .text.ESC_state,"ax",%progbits
 3213              	 .align 2
 3214              	 .global ESC_state
 3215              	 .thumb
 3216              	 .thumb_func
 3218              	ESC_state:
 3219              	.LFB35:
 915:../soes/esc.c **** /** The state handler acting on ALControl Bit(0)
 916:../soes/esc.c ****  * events in the Al Event Request register 0x220.
 917:../soes/esc.c ****  *
 918:../soes/esc.c ****  */
 919:../soes/esc.c **** void ESC_state (void)
 920:../soes/esc.c **** {
 3220              	 .loc 1 920 0
 3221              	 .cfi_startproc
 3222              	 
 3223              	 
 3224 0000 80B5     	 push {r7,lr}
 3225              	.LCFI168:
 3226              	 .cfi_def_cfa_offset 8
 3227              	 .cfi_offset 7,-8
 3228              	 .cfi_offset 14,-4
 3229 0002 82B0     	 sub sp,sp,#8
 3230              	.LCFI169:
 3231              	 .cfi_def_cfa_offset 16
 3232 0004 00AF     	 add r7,sp,#0
 3233              	.LCFI170:
 3234              	 .cfi_def_cfa_register 7
 921:../soes/esc.c ****    uint8_t ac, an, as;
 922:../soes/esc.c **** 
 923:../soes/esc.c ****    /* Do we have a state change request pending */
 924:../soes/esc.c ****    if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 3235              	 .loc 1 924 0
 3236 0006 DE4B     	 ldr r3,.L219
 3237 0008 B3F8D030 	 ldrh r3,[r3,#208]
 3238 000c 9BB2     	 uxth r3,r3
 3239 000e 03F00103 	 and r3,r3,#1
 3240 0012 002B     	 cmp r3,#0
 3241 0014 25D0     	 beq .L184
 925:../soes/esc.c ****    {
 926:../soes/esc.c ****       ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 3242              	 .loc 1 926 0
 3243 0016 4FF49070 	 mov r0,#288
 3244 001a DA49     	 ldr r1,.L219+4
 3245 001c 0222     	 movs r2,#2
 3246 001e FFF7FEFF 	 bl ESC_read
 927:../soes/esc.c ****                 sizeof (ESCvar.ALcontrol));
 928:../soes/esc.c ****       ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 3247              	 .loc 1 928 0
 3248 0022 D74B     	 ldr r3,.L219
 3249 0024 B3F88630 	 ldrh r3,[r3,#134]
 3250 0028 9AB2     	 uxth r2,r3
 3251 002a D54B     	 ldr r3,.L219
 3252 002c A3F88620 	 strh r2,[r3,#134]
 929:../soes/esc.c ****    }
 930:../soes/esc.c ****    else
 931:../soes/esc.c ****    {
 932:../soes/esc.c ****       /* nothing to do */
 933:../soes/esc.c ****       return;
 934:../soes/esc.c ****    }
 935:../soes/esc.c ****    /* Mask state request bits + Error ACK */
 936:../soes/esc.c ****    ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 3253              	 .loc 1 936 0
 3254 0030 D34B     	 ldr r3,.L219
 3255 0032 B3F88630 	 ldrh r3,[r3,#134]
 3256 0036 9BB2     	 uxth r3,r3
 3257 0038 DBB2     	 uxtb r3,r3
 3258 003a 03F01F03 	 and r3,r3,#31
 3259 003e FB71     	 strb r3,[r7,#7]
 937:../soes/esc.c ****    as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 3260              	 .loc 1 937 0
 3261 0040 CF4B     	 ldr r3,.L219
 3262 0042 B3F88430 	 ldrh r3,[r3,#132]
 3263 0046 9BB2     	 uxth r3,r3
 3264 0048 DBB2     	 uxtb r3,r3
 3265 004a 03F01F03 	 and r3,r3,#31
 3266 004e DBB2     	 uxtb r3,r3
 3267 0050 7B71     	 strb r3,[r7,#5]
 938:../soes/esc.c ****    an = as;
 3268              	 .loc 1 938 0
 3269 0052 7B79     	 ldrb r3,[r7,#5]
 3270 0054 BB71     	 strb r3,[r7,#6]
 939:../soes/esc.c ****    if (((ac & ESCerror) || (ac == ESCinit)))
 3271              	 .loc 1 939 0
 3272 0056 FB79     	 ldrb r3,[r7,#7]
 3273 0058 03F01003 	 and r3,r3,#16
 3274 005c 002B     	 cmp r3,#0
 3275 005e 04D1     	 bne .L187
 3276 0060 00E0     	 b .L217
 3277              	.L184:
 933:../soes/esc.c ****    }
 3278              	 .loc 1 933 0
 3279 0062 E3E1     	 b .L183
 3280              	.L217:
 3281              	 .loc 1 939 0 discriminator 1
 3282 0064 FB79     	 ldrb r3,[r7,#7]
 3283 0066 012B     	 cmp r3,#1
 3284 0068 08D1     	 bne .L188
 3285              	.L187:
 940:../soes/esc.c ****    {
 941:../soes/esc.c ****       /* if error bit confirmed reset */
 942:../soes/esc.c ****       ac &= ESCREG_AL_ERRACKMASK;
 3286              	 .loc 1 942 0
 3287 006a FB79     	 ldrb r3,[r7,#7]
 3288 006c 03F00F03 	 and r3,r3,#15
 3289 0070 FB71     	 strb r3,[r7,#7]
 943:../soes/esc.c ****       an &= ESCREG_AL_ERRACKMASK;
 3290              	 .loc 1 943 0
 3291 0072 BB79     	 ldrb r3,[r7,#6]
 3292 0074 03F00F03 	 and r3,r3,#15
 3293 0078 DBB2     	 uxtb r3,r3
 3294 007a BB71     	 strb r3,[r7,#6]
 3295              	.L188:
 944:../soes/esc.c ****    }
 945:../soes/esc.c **** 
 946:../soes/esc.c ****    /* Error state not acked, leave original */
 947:../soes/esc.c ****    if ((an & ESCerror) && ((ac & ESCerror) == 0))
 3296              	 .loc 1 947 0
 3297 007c BB79     	 ldrb r3,[r7,#6]
 3298 007e 03F01003 	 and r3,r3,#16
 3299 0082 002B     	 cmp r3,#0
 3300 0084 05D0     	 beq .L189
 3301              	 .loc 1 947 0 is_stmt 0 discriminator 1
 3302 0086 FB79     	 ldrb r3,[r7,#7]
 3303 0088 03F01003 	 and r3,r3,#16
 3304 008c 002B     	 cmp r3,#0
 3305 008e 00D1     	 bne .L189
 948:../soes/esc.c ****    {
 949:../soes/esc.c ****       return;
 3306              	 .loc 1 949 0 is_stmt 1
 3307 0090 CCE1     	 b .L183
 3308              	.L189:
 950:../soes/esc.c ****    }
 951:../soes/esc.c **** 
 952:../soes/esc.c ****    /* Mask high bits ALcommand, low bits ALstatus */
 953:../soes/esc.c ****    as = (ac << 4) | (as & 0x0f);
 3309              	 .loc 1 953 0
 3310 0092 FB79     	 ldrb r3,[r7,#7]
 3311 0094 1B01     	 lsls r3,r3,#4
 3312 0096 DAB2     	 uxtb r2,r3
 3313 0098 7B79     	 ldrb r3,[r7,#5]
 3314 009a DBB2     	 uxtb r3,r3
 3315 009c 03F00F03 	 and r3,r3,#15
 3316 00a0 DBB2     	 uxtb r3,r3
 3317 00a2 1343     	 orrs r3,r3,r2
 3318 00a4 DBB2     	 uxtb r3,r3
 3319 00a6 DBB2     	 uxtb r3,r3
 3320 00a8 7B71     	 strb r3,[r7,#5]
 954:../soes/esc.c **** 
 955:../soes/esc.c ****    /* Call post state change hook case it have been configured  */
 956:../soes/esc.c ****    if (ESCvar.pre_state_change_hook != NULL)
 3321              	 .loc 1 956 0
 3322 00aa B54B     	 ldr r3,.L219
 3323 00ac 1B6C     	 ldr r3,[r3,#64]
 3324 00ae 002B     	 cmp r3,#0
 3325 00b0 06D0     	 beq .L190
 957:../soes/esc.c ****    {
 958:../soes/esc.c ****       ESCvar.pre_state_change_hook (&as, &an);
 3326              	 .loc 1 958 0
 3327 00b2 B34B     	 ldr r3,.L219
 3328 00b4 1B6C     	 ldr r3,[r3,#64]
 3329 00b6 791D     	 adds r1,r7,#5
 3330 00b8 BA1D     	 adds r2,r7,#6
 3331 00ba 0846     	 mov r0,r1
 3332 00bc 1146     	 mov r1,r2
 3333 00be 9847     	 blx r3
 3334              	.L190:
 959:../soes/esc.c ****    }
 960:../soes/esc.c **** 
 961:../soes/esc.c ****    /* Switch through the state change requested via AlControl from
 962:../soes/esc.c ****     * current state read in AL status
 963:../soes/esc.c ****     */
 964:../soes/esc.c ****    switch (as)
 3335              	 .loc 1 964 0
 3336 00c0 7B79     	 ldrb r3,[r7,#5]
 3337 00c2 113B     	 subs r3,r3,#17
 3338 00c4 772B     	 cmp r3,#119
 3339 00c6 00F27E81 	 bhi .L191
 3340 00ca 01A2     	 adr r2,.L193
 3341 00cc 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3342              	 .p2align 2
 3343              	.L193:
 3344 00d0 F1030000 	 .word .L218+1
 3345 00d4 05030000 	 .word .L194+1
 3346 00d8 0F030000 	 .word .L195+1
 3347 00dc F7020000 	 .word .L196+1
 3348 00e0 C7030000 	 .word .L191+1
 3349 00e4 C7030000 	 .word .L191+1
 3350 00e8 C7030000 	 .word .L191+1
 3351 00ec E5020000 	 .word .L197+1
 3352 00f0 C7030000 	 .word .L191+1
 3353 00f4 C7030000 	 .word .L191+1
 3354 00f8 C7030000 	 .word .L191+1
 3355 00fc C7030000 	 .word .L191+1
 3356 0100 C7030000 	 .word .L191+1
 3357 0104 C7030000 	 .word .L191+1
 3358 0108 C7030000 	 .word .L191+1
 3359 010c C7030000 	 .word .L191+1
 3360 0110 B1020000 	 .word .L198+1
 3361 0114 F1030000 	 .word .L218+1
 3362 0118 19030000 	 .word .L199+1
 3363 011c 89030000 	 .word .L200+1
 3364 0120 C7030000 	 .word .L191+1
 3365 0124 C7030000 	 .word .L191+1
 3366 0128 C7030000 	 .word .L191+1
 3367 012c 73030000 	 .word .L201+1
 3368 0130 C7030000 	 .word .L191+1
 3369 0134 C7030000 	 .word .L191+1
 3370 0138 C7030000 	 .word .L191+1
 3371 013c C7030000 	 .word .L191+1
 3372 0140 C7030000 	 .word .L191+1
 3373 0144 C7030000 	 .word .L191+1
 3374 0148 C7030000 	 .word .L191+1
 3375 014c C7030000 	 .word .L191+1
 3376 0150 C7020000 	 .word .L202+1
 3377 0154 19030000 	 .word .L199+1
 3378 0158 C7020000 	 .word .L202+1
 3379 015c 93030000 	 .word .L203+1
 3380 0160 C7030000 	 .word .L191+1
 3381 0164 C7030000 	 .word .L191+1
 3382 0168 C7030000 	 .word .L191+1
 3383 016c AD030000 	 .word .L204+1
 3384 0170 C7030000 	 .word .L191+1
 3385 0174 C7030000 	 .word .L191+1
 3386 0178 C7030000 	 .word .L191+1
 3387 017c C7030000 	 .word .L191+1
 3388 0180 C7030000 	 .word .L191+1
 3389 0184 C7030000 	 .word .L191+1
 3390 0188 C7030000 	 .word .L191+1
 3391 018c C7030000 	 .word .L191+1
 3392 0190 D9020000 	 .word .L205+1
 3393 0194 25030000 	 .word .L206+1
 3394 0198 19030000 	 .word .L199+1
 3395 019c 25030000 	 .word .L206+1
 3396 01a0 C7030000 	 .word .L191+1
 3397 01a4 C7030000 	 .word .L191+1
 3398 01a8 C7030000 	 .word .L191+1
 3399 01ac BD030000 	 .word .L207+1
 3400 01b0 C7030000 	 .word .L191+1
 3401 01b4 C7030000 	 .word .L191+1
 3402 01b8 C7030000 	 .word .L191+1
 3403 01bc C7030000 	 .word .L191+1
 3404 01c0 C7030000 	 .word .L191+1
 3405 01c4 C7030000 	 .word .L191+1
 3406 01c8 C7030000 	 .word .L191+1
 3407 01cc C7030000 	 .word .L191+1
 3408 01d0 C7030000 	 .word .L191+1
 3409 01d4 C7030000 	 .word .L191+1
 3410 01d8 C7030000 	 .word .L191+1
 3411 01dc C7030000 	 .word .L191+1
 3412 01e0 C7030000 	 .word .L191+1
 3413 01e4 C7030000 	 .word .L191+1
 3414 01e8 C7030000 	 .word .L191+1
 3415 01ec C7030000 	 .word .L191+1
 3416 01f0 C7030000 	 .word .L191+1
 3417 01f4 C7030000 	 .word .L191+1
 3418 01f8 C7030000 	 .word .L191+1
 3419 01fc C7030000 	 .word .L191+1
 3420 0200 C7030000 	 .word .L191+1
 3421 0204 C7030000 	 .word .L191+1
 3422 0208 C7030000 	 .word .L191+1
 3423 020c C7030000 	 .word .L191+1
 3424 0210 C7030000 	 .word .L191+1
 3425 0214 C7030000 	 .word .L191+1
 3426 0218 C7030000 	 .word .L191+1
 3427 021c C7030000 	 .word .L191+1
 3428 0220 C7030000 	 .word .L191+1
 3429 0224 C7030000 	 .word .L191+1
 3430 0228 C7030000 	 .word .L191+1
 3431 022c C7030000 	 .word .L191+1
 3432 0230 C7030000 	 .word .L191+1
 3433 0234 C7030000 	 .word .L191+1
 3434 0238 C7030000 	 .word .L191+1
 3435 023c C7030000 	 .word .L191+1
 3436 0240 C7030000 	 .word .L191+1
 3437 0244 C7030000 	 .word .L191+1
 3438 0248 C7030000 	 .word .L191+1
 3439 024c C7030000 	 .word .L191+1
 3440 0250 C7030000 	 .word .L191+1
 3441 0254 C7030000 	 .word .L191+1
 3442 0258 C7030000 	 .word .L191+1
 3443 025c C7030000 	 .word .L191+1
 3444 0260 C7030000 	 .word .L191+1
 3445 0264 C7030000 	 .word .L191+1
 3446 0268 C7030000 	 .word .L191+1
 3447 026c C7030000 	 .word .L191+1
 3448 0270 C7030000 	 .word .L191+1
 3449 0274 C7030000 	 .word .L191+1
 3450 0278 C7030000 	 .word .L191+1
 3451 027c C7030000 	 .word .L191+1
 3452 0280 C7030000 	 .word .L191+1
 3453 0284 C7030000 	 .word .L191+1
 3454 0288 C7030000 	 .word .L191+1
 3455 028c C7030000 	 .word .L191+1
 3456 0290 D9020000 	 .word .L205+1
 3457 0294 67030000 	 .word .L208+1
 3458 0298 19030000 	 .word .L199+1
 3459 029c 9F030000 	 .word .L209+1
 3460 02a0 C7030000 	 .word .L191+1
 3461 02a4 C7030000 	 .word .L191+1
 3462 02a8 C7030000 	 .word .L191+1
 3463 02ac F1030000 	 .word .L218+1
 3464              	 .p2align 1
 3465              	.L198:
 965:../soes/esc.c ****    {
 966:../soes/esc.c ****       case INIT_TO_INIT:
 967:../soes/esc.c ****       case PREOP_TO_PREOP:
 968:../soes/esc.c ****       case OP_TO_OP:
 969:../soes/esc.c ****       {
 970:../soes/esc.c ****          break;
 971:../soes/esc.c ****       }
 972:../soes/esc.c ****       case INIT_TO_PREOP:
 973:../soes/esc.c ****       {
 974:../soes/esc.c ****          /* get station address */
 975:../soes/esc.c ****          ESC_address ();
 3466              	 .loc 1 975 0
 3467 02b0 FFF7FEFF 	 bl ESC_address
 976:../soes/esc.c ****          COE_initDefaultSyncMgrPara ();
 3468              	 .loc 1 976 0
 3469 02b4 FFF7FEFF 	 bl COE_initDefaultSyncMgrPara
 977:../soes/esc.c ****          an = ESC_startmbx (ac);
 3470              	 .loc 1 977 0
 3471 02b8 FB79     	 ldrb r3,[r7,#7]
 3472 02ba 1846     	 mov r0,r3
 3473 02bc FFF7FEFF 	 bl ESC_startmbx
 3474 02c0 0346     	 mov r3,r0
 3475 02c2 BB71     	 strb r3,[r7,#6]
 978:../soes/esc.c ****          break;
 3476              	 .loc 1 978 0
 3477 02c4 95E0     	 b .L210
 3478              	.L202:
 979:../soes/esc.c ****       }
 980:../soes/esc.c ****       case INIT_TO_BOOT:
 981:../soes/esc.c ****       case BOOT_TO_BOOT:
 982:../soes/esc.c ****       {
 983:../soes/esc.c ****          /* get station address */
 984:../soes/esc.c ****          ESC_address ();
 3479              	 .loc 1 984 0
 3480 02c6 FFF7FEFF 	 bl ESC_address
 985:../soes/esc.c ****          an = ESC_startmbxboot (ac);
 3481              	 .loc 1 985 0
 3482 02ca FB79     	 ldrb r3,[r7,#7]
 3483 02cc 1846     	 mov r0,r3
 3484 02ce FFF7FEFF 	 bl ESC_startmbxboot
 3485 02d2 0346     	 mov r3,r0
 3486 02d4 BB71     	 strb r3,[r7,#6]
 986:../soes/esc.c ****          break;
 3487              	 .loc 1 986 0
 3488 02d6 8CE0     	 b .L210
 3489              	.L205:
 987:../soes/esc.c ****       }
 988:../soes/esc.c ****       case INIT_TO_SAFEOP:
 989:../soes/esc.c ****       case INIT_TO_OP:
 990:../soes/esc.c ****       {
 991:../soes/esc.c ****          an = ESCinit | ESCerror;
 3490              	 .loc 1 991 0
 3491 02d8 1123     	 movs r3,#17
 3492 02da BB71     	 strb r3,[r7,#6]
 992:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 3493              	 .loc 1 992 0
 3494 02dc 1120     	 movs r0,#17
 3495 02de FFF7FEFF 	 bl ESC_ALerror
 993:../soes/esc.c ****          break;
 3496              	 .loc 1 993 0
 3497 02e2 86E0     	 b .L210
 3498              	.L197:
 994:../soes/esc.c ****       }
 995:../soes/esc.c ****       case OP_TO_INIT:
 996:../soes/esc.c ****       {
 997:../soes/esc.c ****          ESC_stopoutput ();
 3499              	 .loc 1 997 0
 3500 02e4 FFF7FEFF 	 bl ESC_stopoutput
 998:../soes/esc.c ****          ESC_stopinput ();
 3501              	 .loc 1 998 0
 3502 02e8 FFF7FEFF 	 bl ESC_stopinput
 999:../soes/esc.c ****          ESC_stopmbx ();
 3503              	 .loc 1 999 0
 3504 02ec FFF7FEFF 	 bl ESC_stopmbx
1000:../soes/esc.c ****          an = ESCinit;
 3505              	 .loc 1 1000 0
 3506 02f0 0123     	 movs r3,#1
 3507 02f2 BB71     	 strb r3,[r7,#6]
1001:../soes/esc.c ****          break;
 3508              	 .loc 1 1001 0
 3509 02f4 7DE0     	 b .L210
 3510              	.L196:
1002:../soes/esc.c ****       }
1003:../soes/esc.c ****       case SAFEOP_TO_INIT:
1004:../soes/esc.c ****       {
1005:../soes/esc.c ****          ESC_stopinput ();
 3511              	 .loc 1 1005 0
 3512 02f6 FFF7FEFF 	 bl ESC_stopinput
1006:../soes/esc.c ****          ESC_stopmbx ();
 3513              	 .loc 1 1006 0
 3514 02fa FFF7FEFF 	 bl ESC_stopmbx
1007:../soes/esc.c ****          an = ESCinit;
 3515              	 .loc 1 1007 0
 3516 02fe 0123     	 movs r3,#1
 3517 0300 BB71     	 strb r3,[r7,#6]
1008:../soes/esc.c ****          break;
 3518              	 .loc 1 1008 0
 3519 0302 76E0     	 b .L210
 3520              	.L194:
1009:../soes/esc.c ****       }
1010:../soes/esc.c ****       case PREOP_TO_INIT:
1011:../soes/esc.c ****       {
1012:../soes/esc.c ****          ESC_stopmbx ();
 3521              	 .loc 1 1012 0
 3522 0304 FFF7FEFF 	 bl ESC_stopmbx
1013:../soes/esc.c ****          an = ESCinit;
 3523              	 .loc 1 1013 0
 3524 0308 0123     	 movs r3,#1
 3525 030a BB71     	 strb r3,[r7,#6]
1014:../soes/esc.c ****          break;
 3526              	 .loc 1 1014 0
 3527 030c 71E0     	 b .L210
 3528              	.L195:
1015:../soes/esc.c ****       }
1016:../soes/esc.c ****       case BOOT_TO_INIT:
1017:../soes/esc.c ****       {
1018:../soes/esc.c ****          ESC_stopmbx ();
 3529              	 .loc 1 1018 0
 3530 030e FFF7FEFF 	 bl ESC_stopmbx
1019:../soes/esc.c ****          an = ESCinit;
 3531              	 .loc 1 1019 0
 3532 0312 0123     	 movs r3,#1
 3533 0314 BB71     	 strb r3,[r7,#6]
1020:../soes/esc.c ****          break;
 3534              	 .loc 1 1020 0
 3535 0316 6CE0     	 b .L210
 3536              	.L199:
1021:../soes/esc.c ****       }
1022:../soes/esc.c ****       case PREOP_TO_BOOT:
1023:../soes/esc.c ****       case BOOT_TO_PREOP:
1024:../soes/esc.c ****       case BOOT_TO_SAFEOP:
1025:../soes/esc.c ****       case BOOT_TO_OP:
1026:../soes/esc.c ****       {
1027:../soes/esc.c ****          an = ESCpreop | ESCerror;
 3537              	 .loc 1 1027 0
 3538 0318 1223     	 movs r3,#18
 3539 031a BB71     	 strb r3,[r7,#6]
1028:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 3540              	 .loc 1 1028 0
 3541 031c 1120     	 movs r0,#17
 3542 031e FFF7FEFF 	 bl ESC_ALerror
1029:../soes/esc.c ****          break;
 3543              	 .loc 1 1029 0
 3544 0322 66E0     	 b .L210
 3545              	.L206:
1030:../soes/esc.c ****       }
1031:../soes/esc.c ****       case PREOP_TO_SAFEOP:
1032:../soes/esc.c ****       case SAFEOP_TO_SAFEOP:
1033:../soes/esc.c ****       {
1034:../soes/esc.c ****          ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX);
 3546              	 .loc 1 1034 0
 3547 0324 41F61240 	 movw r0,#7186
 3548 0328 FFF7FEFF 	 bl sizeOfPDO
 3549 032c 0346     	 mov r3,r0
 3550 032e 1A46     	 mov r2,r3
 3551 0330 134B     	 ldr r3,.L219
 3552 0332 A3F87920 	 strh r2,[r3,#121]
1035:../soes/esc.c ****          ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX);
 3553              	 .loc 1 1035 0
 3554 0336 41F61340 	 movw r0,#7187
 3555 033a FFF7FEFF 	 bl sizeOfPDO
 3556 033e 0346     	 mov r3,r0
 3557 0340 1A46     	 mov r2,r3
 3558 0342 0F4B     	 ldr r3,.L219
 3559 0344 A3F87B20 	 strh r2,[r3,#123]
1036:../soes/esc.c ****          an = ESC_startinput (ac);
 3560              	 .loc 1 1036 0
 3561 0348 FB79     	 ldrb r3,[r7,#7]
 3562 034a 1846     	 mov r0,r3
 3563 034c FFF7FEFF 	 bl ESC_startinput
 3564 0350 0346     	 mov r3,r0
 3565 0352 BB71     	 strb r3,[r7,#6]
1037:../soes/esc.c ****          if (an == ac)
 3566              	 .loc 1 1037 0
 3567 0354 BB79     	 ldrb r3,[r7,#6]
 3568 0356 FA79     	 ldrb r2,[r7,#7]
 3569 0358 9A42     	 cmp r2,r3
 3570 035a 03D1     	 bne .L211
1038:../soes/esc.c ****          {
1039:../soes/esc.c ****             ESC_SMenable (2);
 3571              	 .loc 1 1039 0
 3572 035c 0220     	 movs r0,#2
 3573 035e FFF7FEFF 	 bl ESC_SMenable
1040:../soes/esc.c ****          }
1041:../soes/esc.c ****          break;
 3574              	 .loc 1 1041 0
 3575 0362 46E0     	 b .L210
 3576              	.L211:
 3577 0364 45E0     	 b .L210
 3578              	.L208:
1042:../soes/esc.c ****       }
1043:../soes/esc.c ****       case PREOP_TO_OP:
1044:../soes/esc.c ****       {
1045:../soes/esc.c ****          an = ESCpreop | ESCerror;
 3579              	 .loc 1 1045 0
 3580 0366 1223     	 movs r3,#18
 3581 0368 BB71     	 strb r3,[r7,#6]
1046:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 3582              	 .loc 1 1046 0
 3583 036a 1120     	 movs r0,#17
 3584 036c FFF7FEFF 	 bl ESC_ALerror
1047:../soes/esc.c ****          break;
 3585              	 .loc 1 1047 0
 3586 0370 3FE0     	 b .L210
 3587              	.L201:
1048:../soes/esc.c ****       }
1049:../soes/esc.c ****       case OP_TO_PREOP:
1050:../soes/esc.c ****       {
1051:../soes/esc.c ****          ESC_stopoutput ();
 3588              	 .loc 1 1051 0
 3589 0372 FFF7FEFF 	 bl ESC_stopoutput
1052:../soes/esc.c ****          ESC_stopinput ();
 3590              	 .loc 1 1052 0
 3591 0376 FFF7FEFF 	 bl ESC_stopinput
1053:../soes/esc.c ****          an = ESCpreop;
 3592              	 .loc 1 1053 0
 3593 037a 0223     	 movs r3,#2
 3594 037c BB71     	 strb r3,[r7,#6]
1054:../soes/esc.c ****          break;
 3595              	 .loc 1 1054 0
 3596 037e 38E0     	 b .L210
 3597              	.L220:
 3598              	 .align 2
 3599              	.L219:
 3600 0380 00000000 	 .word ESCvar
 3601 0384 86000000 	 .word ESCvar+134
 3602              	.L200:
1055:../soes/esc.c ****       }
1056:../soes/esc.c ****       case SAFEOP_TO_PREOP:
1057:../soes/esc.c ****       {
1058:../soes/esc.c ****          ESC_stopinput ();
 3603              	 .loc 1 1058 0
 3604 0388 FFF7FEFF 	 bl ESC_stopinput
1059:../soes/esc.c ****          an = ESCpreop;
 3605              	 .loc 1 1059 0
 3606 038c 0223     	 movs r3,#2
 3607 038e BB71     	 strb r3,[r7,#6]
1060:../soes/esc.c ****          break;
 3608              	 .loc 1 1060 0
 3609 0390 2FE0     	 b .L210
 3610              	.L203:
1061:../soes/esc.c ****       }
1062:../soes/esc.c ****       case SAFEOP_TO_BOOT:
1063:../soes/esc.c ****       {
1064:../soes/esc.c ****          an = ESCsafeop | ESCerror;
 3611              	 .loc 1 1064 0
 3612 0392 1423     	 movs r3,#20
 3613 0394 BB71     	 strb r3,[r7,#6]
1065:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 3614              	 .loc 1 1065 0
 3615 0396 1120     	 movs r0,#17
 3616 0398 FFF7FEFF 	 bl ESC_ALerror
1066:../soes/esc.c ****          break;
 3617              	 .loc 1 1066 0
 3618 039c 29E0     	 b .L210
 3619              	.L209:
1067:../soes/esc.c ****       }
1068:../soes/esc.c ****       case SAFEOP_TO_OP:
1069:../soes/esc.c ****       {
1070:../soes/esc.c ****          an = ESC_startoutput (ac);
 3620              	 .loc 1 1070 0
 3621 039e FB79     	 ldrb r3,[r7,#7]
 3622 03a0 1846     	 mov r0,r3
 3623 03a2 FFF7FEFF 	 bl ESC_startoutput
 3624 03a6 0346     	 mov r3,r0
 3625 03a8 BB71     	 strb r3,[r7,#6]
1071:../soes/esc.c ****          break;
 3626              	 .loc 1 1071 0
 3627 03aa 22E0     	 b .L210
 3628              	.L204:
1072:../soes/esc.c ****       }
1073:../soes/esc.c ****       case OP_TO_BOOT:
1074:../soes/esc.c ****       {
1075:../soes/esc.c ****          an = ESCsafeop | ESCerror;
 3629              	 .loc 1 1075 0
 3630 03ac 1423     	 movs r3,#20
 3631 03ae BB71     	 strb r3,[r7,#6]
1076:../soes/esc.c ****          ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 3632              	 .loc 1 1076 0
 3633 03b0 1120     	 movs r0,#17
 3634 03b2 FFF7FEFF 	 bl ESC_ALerror
1077:../soes/esc.c ****          ESC_stopoutput ();
 3635              	 .loc 1 1077 0
 3636 03b6 FFF7FEFF 	 bl ESC_stopoutput
1078:../soes/esc.c ****          break;
 3637              	 .loc 1 1078 0
 3638 03ba 1AE0     	 b .L210
 3639              	.L207:
1079:../soes/esc.c ****       }
1080:../soes/esc.c ****       case OP_TO_SAFEOP:
1081:../soes/esc.c ****       {
1082:../soes/esc.c ****          an = ESCsafeop;
 3640              	 .loc 1 1082 0
 3641 03bc 0423     	 movs r3,#4
 3642 03be BB71     	 strb r3,[r7,#6]
1083:../soes/esc.c ****          ESC_stopoutput ();
 3643              	 .loc 1 1083 0
 3644 03c0 FFF7FEFF 	 bl ESC_stopoutput
1084:../soes/esc.c ****          break;
 3645              	 .loc 1 1084 0
 3646 03c4 15E0     	 b .L210
 3647              	.L191:
1085:../soes/esc.c ****       }
1086:../soes/esc.c ****       default:
1087:../soes/esc.c ****       {
1088:../soes/esc.c ****          if (an == ESCop)
 3648              	 .loc 1 1088 0
 3649 03c6 BB79     	 ldrb r3,[r7,#6]
 3650 03c8 082B     	 cmp r3,#8
 3651 03ca 03D1     	 bne .L212
1089:../soes/esc.c ****          {
1090:../soes/esc.c ****             ESC_stopoutput ();
 3652              	 .loc 1 1090 0
 3653 03cc FFF7FEFF 	 bl ESC_stopoutput
1091:../soes/esc.c ****             an = ESCsafeop;
 3654              	 .loc 1 1091 0
 3655 03d0 0423     	 movs r3,#4
 3656 03d2 BB71     	 strb r3,[r7,#6]
 3657              	.L212:
1092:../soes/esc.c ****          }
1093:../soes/esc.c ****          if (as == ESCsafeop)
 3658              	 .loc 1 1093 0
 3659 03d4 7B79     	 ldrb r3,[r7,#5]
 3660 03d6 042B     	 cmp r3,#4
 3661 03d8 01D1     	 bne .L213
1094:../soes/esc.c ****          {
1095:../soes/esc.c ****             ESC_stopinput ();
 3662              	 .loc 1 1095 0
 3663 03da FFF7FEFF 	 bl ESC_stopinput
 3664              	.L213:
1096:../soes/esc.c ****          }
1097:../soes/esc.c ****          an |= ESCerror;
 3665              	 .loc 1 1097 0
 3666 03de BB79     	 ldrb r3,[r7,#6]
 3667 03e0 43F01003 	 orr r3,r3,#16
 3668 03e4 DBB2     	 uxtb r3,r3
 3669 03e6 BB71     	 strb r3,[r7,#6]
1098:../soes/esc.c ****          ESC_ALerror (ALERR_UNKNOWNSTATE);
 3670              	 .loc 1 1098 0
 3671 03e8 1220     	 movs r0,#18
 3672 03ea FFF7FEFF 	 bl ESC_ALerror
1099:../soes/esc.c ****          break;
 3673              	 .loc 1 1099 0
 3674 03ee 00E0     	 b .L210
 3675              	.L218:
 970:../soes/esc.c ****       }
 3676              	 .loc 1 970 0
 3677 03f0 00BF     	 nop
 3678              	.L210:
1100:../soes/esc.c ****       }
1101:../soes/esc.c ****    }
1102:../soes/esc.c **** 
1103:../soes/esc.c ****    /* Call post state change hook case it have been configured  */
1104:../soes/esc.c ****    if (ESCvar.post_state_change_hook != NULL)
 3679              	 .loc 1 1104 0
 3680 03f2 104B     	 ldr r3,.L221
 3681 03f4 5B6C     	 ldr r3,[r3,#68]
 3682 03f6 002B     	 cmp r3,#0
 3683 03f8 06D0     	 beq .L214
1105:../soes/esc.c ****    {
1106:../soes/esc.c ****       ESCvar.post_state_change_hook (&as, &an);
 3684              	 .loc 1 1106 0
 3685 03fa 0E4B     	 ldr r3,.L221
 3686 03fc 5B6C     	 ldr r3,[r3,#68]
 3687 03fe 791D     	 adds r1,r7,#5
 3688 0400 BA1D     	 adds r2,r7,#6
 3689 0402 0846     	 mov r0,r1
 3690 0404 1146     	 mov r1,r2
 3691 0406 9847     	 blx r3
 3692              	.L214:
1107:../soes/esc.c ****    }
1108:../soes/esc.c **** 
1109:../soes/esc.c ****    if (!(an & ESCerror) && (ESCvar.ALerror))
 3693              	 .loc 1 1109 0
 3694 0408 BB79     	 ldrb r3,[r7,#6]
 3695 040a 03F01003 	 and r3,r3,#16
 3696 040e 002B     	 cmp r3,#0
 3697 0410 08D1     	 bne .L215
 3698              	 .loc 1 1109 0 is_stmt 0 discriminator 1
 3699 0412 084B     	 ldr r3,.L221
 3700 0414 B3F88830 	 ldrh r3,[r3,#136]
 3701 0418 9BB2     	 uxth r3,r3
 3702 041a 002B     	 cmp r3,#0
 3703 041c 02D0     	 beq .L215
1110:../soes/esc.c ****    {
1111:../soes/esc.c ****       /* clear error */
1112:../soes/esc.c ****       ESC_ALerror (ALERR_NONE);
 3704              	 .loc 1 1112 0 is_stmt 1
 3705 041e 0020     	 movs r0,#0
 3706 0420 FFF7FEFF 	 bl ESC_ALerror
 3707              	.L215:
1113:../soes/esc.c ****    }
1114:../soes/esc.c **** 
1115:../soes/esc.c ****    ESC_ALstatus (an);
 3708              	 .loc 1 1115 0
 3709 0424 BB79     	 ldrb r3,[r7,#6]
 3710 0426 1846     	 mov r0,r3
 3711 0428 FFF7FEFF 	 bl ESC_ALstatus
 3712              	.L183:
1116:../soes/esc.c **** 
1117:../soes/esc.c **** }
 3713              	 .loc 1 1117 0
 3714 042c 0837     	 adds r7,r7,#8
 3715              	.LCFI171:
 3716              	 .cfi_def_cfa_offset 8
 3717 042e BD46     	 mov sp,r7
 3718              	.LCFI172:
 3719              	 .cfi_def_cfa_register 13
 3720              	 
 3721 0430 80BD     	 pop {r7,pc}
 3722              	.L222:
 3723 0432 00BF     	 .align 2
 3724              	.L221:
 3725 0434 00000000 	 .word ESCvar
 3726              	 .cfi_endproc
 3727              	.LFE35:
 3729              	 .section .text.ESC_config,"ax",%progbits
 3730              	 .align 2
 3731              	 .global ESC_config
 3732              	 .thumb
 3733              	 .thumb_func
 3735              	ESC_config:
 3736              	.LFB36:
1118:../soes/esc.c **** /** Function copying the application configuration variable
1119:../soes/esc.c ****  * data to the stack local variable.
1120:../soes/esc.c ****  *
1121:../soes/esc.c ****  * @param[in] cfg   = Pointer to the Application configuration variable
1122:../soes/esc.c ****  * holding application specific details. Data is copied.
1123:../soes/esc.c ****  */
1124:../soes/esc.c **** void ESC_config (esc_cfg_t * cfg)
1125:../soes/esc.c **** {
 3737              	 .loc 1 1125 0
 3738              	 .cfi_startproc
 3739              	 
 3740              	 
 3741              	 
 3742 0000 80B4     	 push {r7}
 3743              	.LCFI173:
 3744              	 .cfi_def_cfa_offset 4
 3745              	 .cfi_offset 7,-4
 3746 0002 83B0     	 sub sp,sp,#12
 3747              	.LCFI174:
 3748              	 .cfi_def_cfa_offset 16
 3749 0004 00AF     	 add r7,sp,#0
 3750              	.LCFI175:
 3751              	 .cfi_def_cfa_register 7
 3752 0006 7860     	 str r0,[r7,#4]
1126:../soes/esc.c ****    /* Copy configuration data */
1127:../soes/esc.c ****    ESCvar.use_interrupt = cfg->use_interrupt;
 3753              	 .loc 1 1127 0
 3754 0008 7B68     	 ldr r3,[r7,#4]
 3755 000a 5B68     	 ldr r3,[r3,#4]
 3756 000c 384A     	 ldr r2,.L224
 3757 000e 1360     	 str r3,[r2]
1128:../soes/esc.c ****    ESCvar.watchdogcnt = cfg->watchdog_cnt;
 3758              	 .loc 1 1128 0
 3759 0010 7B68     	 ldr r3,[r7,#4]
 3760 0012 9A68     	 ldr r2,[r3,#8]
 3761 0014 364B     	 ldr r3,.L224
 3762 0016 D3F8C810 	 ldr r1,[r3,#200]
 3763 001a 0021     	 movs r1,#0
 3764 001c 0A43     	 orrs r2,r2,r1
 3765 001e C3F8C820 	 str r2,[r3,#200]
1129:../soes/esc.c ****    ESCvar.mbxsize = cfg->mbxsize;
 3766              	 .loc 1 1129 0
 3767 0022 7B68     	 ldr r3,[r7,#4]
 3768 0024 DB68     	 ldr r3,[r3,#12]
 3769 0026 324A     	 ldr r2,.L224
 3770 0028 5360     	 str r3,[r2,#4]
1130:../soes/esc.c ****    ESCvar.mbxsizeboot = cfg->mbxsizeboot;
 3771              	 .loc 1 1130 0
 3772 002a 7B68     	 ldr r3,[r7,#4]
 3773 002c 1B69     	 ldr r3,[r3,#16]
 3774 002e 304A     	 ldr r2,.L224
 3775 0030 9360     	 str r3,[r2,#8]
1131:../soes/esc.c ****    ESCvar.mbxbuffers = cfg->mbxbuffers;
 3776              	 .loc 1 1131 0
 3777 0032 7B68     	 ldr r3,[r7,#4]
 3778 0034 5B69     	 ldr r3,[r3,#20]
 3779 0036 2E4A     	 ldr r2,.L224
 3780 0038 D360     	 str r3,[r2,#12]
1132:../soes/esc.c **** 
1133:../soes/esc.c ****    ESCvar.mb[0] = cfg->mb[0];
 3781              	 .loc 1 1133 0
 3782 003a 2D4A     	 ldr r2,.L224
 3783 003c 7B68     	 ldr r3,[r7,#4]
 3784 003e 1032     	 adds r2,r2,#16
 3785 0040 1833     	 adds r3,r3,#24
 3786 0042 03CB     	 ldmia r3!,{r0,r1}
 3787 0044 1060     	 str r0,[r2]
 3788 0046 5160     	 str r1,[r2,#4]
1134:../soes/esc.c ****    ESCvar.mb[1] = cfg->mb[1];
 3789              	 .loc 1 1134 0
 3790 0048 294A     	 ldr r2,.L224
 3791 004a 7B68     	 ldr r3,[r7,#4]
 3792 004c 1832     	 adds r2,r2,#24
 3793 004e 2033     	 adds r3,r3,#32
 3794 0050 03CB     	 ldmia r3!,{r0,r1}
 3795 0052 1060     	 str r0,[r2]
 3796 0054 5160     	 str r1,[r2,#4]
1135:../soes/esc.c ****    ESCvar.mbboot[0] = cfg->mb_boot[0];
 3797              	 .loc 1 1135 0
 3798 0056 264A     	 ldr r2,.L224
 3799 0058 7B68     	 ldr r3,[r7,#4]
 3800 005a 2032     	 adds r2,r2,#32
 3801 005c 2833     	 adds r3,r3,#40
 3802 005e 03CB     	 ldmia r3!,{r0,r1}
 3803 0060 1060     	 str r0,[r2]
 3804 0062 5160     	 str r1,[r2,#4]
1136:../soes/esc.c ****    ESCvar.mbboot[1] = cfg->mb_boot[1];
 3805              	 .loc 1 1136 0
 3806 0064 224A     	 ldr r2,.L224
 3807 0066 7B68     	 ldr r3,[r7,#4]
 3808 0068 2832     	 adds r2,r2,#40
 3809 006a 3033     	 adds r3,r3,#48
 3810 006c 03CB     	 ldmia r3!,{r0,r1}
 3811 006e 1060     	 str r0,[r2]
 3812 0070 5160     	 str r1,[r2,#4]
1137:../soes/esc.c ****    ESCvar.pdosm[0] = cfg->pdosm[0];
 3813              	 .loc 1 1137 0
 3814 0072 1F4A     	 ldr r2,.L224
 3815 0074 7B68     	 ldr r3,[r7,#4]
 3816 0076 3032     	 adds r2,r2,#48
 3817 0078 3833     	 adds r3,r3,#56
 3818 007a 03CB     	 ldmia r3!,{r0,r1}
 3819 007c 1060     	 str r0,[r2]
 3820 007e 5160     	 str r1,[r2,#4]
1138:../soes/esc.c ****    ESCvar.pdosm[1] = cfg->pdosm[1];
 3821              	 .loc 1 1138 0
 3822 0080 1B4A     	 ldr r2,.L224
 3823 0082 7B68     	 ldr r3,[r7,#4]
 3824 0084 3832     	 adds r2,r2,#56
 3825 0086 4033     	 adds r3,r3,#64
 3826 0088 03CB     	 ldmia r3!,{r0,r1}
 3827 008a 1060     	 str r0,[r2]
 3828 008c 5160     	 str r1,[r2,#4]
1139:../soes/esc.c **** 
1140:../soes/esc.c ****    ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 3829              	 .loc 1 1140 0
 3830 008e 7B68     	 ldr r3,[r7,#4]
 3831 0090 9B6C     	 ldr r3,[r3,#72]
 3832 0092 174A     	 ldr r2,.L224
 3833 0094 1364     	 str r3,[r2,#64]
1141:../soes/esc.c ****    ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 3834              	 .loc 1 1141 0
 3835 0096 7B68     	 ldr r3,[r7,#4]
 3836 0098 DB6C     	 ldr r3,[r3,#76]
 3837 009a 154A     	 ldr r2,.L224
 3838 009c 5364     	 str r3,[r2,#68]
1142:../soes/esc.c ****    ESCvar.application_hook = cfg->application_hook;
 3839              	 .loc 1 1142 0
 3840 009e 7B68     	 ldr r3,[r7,#4]
 3841 00a0 1B6D     	 ldr r3,[r3,#80]
 3842 00a2 134A     	 ldr r2,.L224
 3843 00a4 9364     	 str r3,[r2,#72]
1143:../soes/esc.c ****    ESCvar.safeoutput_override = cfg->safeoutput_override;
 3844              	 .loc 1 1143 0
 3845 00a6 7B68     	 ldr r3,[r7,#4]
 3846 00a8 5B6D     	 ldr r3,[r3,#84]
 3847 00aa 114A     	 ldr r2,.L224
 3848 00ac D364     	 str r3,[r2,#76]
1144:../soes/esc.c ****    ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 3849              	 .loc 1 1144 0
 3850 00ae 7B68     	 ldr r3,[r7,#4]
 3851 00b0 9B6D     	 ldr r3,[r3,#88]
 3852 00b2 0F4A     	 ldr r2,.L224
 3853 00b4 1365     	 str r3,[r2,#80]
1145:../soes/esc.c ****    ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 3854              	 .loc 1 1145 0
 3855 00b6 7B68     	 ldr r3,[r7,#4]
 3856 00b8 DB6D     	 ldr r3,[r3,#92]
 3857 00ba 0D4A     	 ldr r2,.L224
 3858 00bc 5365     	 str r3,[r2,#84]
1146:../soes/esc.c ****    ESCvar.rxpdo_override = cfg->rxpdo_override;
 3859              	 .loc 1 1146 0
 3860 00be 7B68     	 ldr r3,[r7,#4]
 3861 00c0 1B6E     	 ldr r3,[r3,#96]
 3862 00c2 0B4A     	 ldr r2,.L224
 3863 00c4 9365     	 str r3,[r2,#88]
1147:../soes/esc.c ****    ESCvar.txpdo_override = cfg->txpdo_override;
 3864              	 .loc 1 1147 0
 3865 00c6 7B68     	 ldr r3,[r7,#4]
 3866 00c8 5B6E     	 ldr r3,[r3,#100]
 3867 00ca 094A     	 ldr r2,.L224
 3868 00cc D365     	 str r3,[r2,#92]
1148:../soes/esc.c ****    ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 3869              	 .loc 1 1148 0
 3870 00ce 7B68     	 ldr r3,[r7,#4]
 3871 00d0 9B6E     	 ldr r3,[r3,#104]
 3872 00d2 074A     	 ldr r2,.L224
 3873 00d4 1366     	 str r3,[r2,#96]
1149:../soes/esc.c ****    ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 3874              	 .loc 1 1149 0
 3875 00d6 7B68     	 ldr r3,[r7,#4]
 3876 00d8 DB6E     	 ldr r3,[r3,#108]
 3877 00da 054A     	 ldr r2,.L224
 3878 00dc 5366     	 str r3,[r2,#100]
1150:../soes/esc.c ****    ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 3879              	 .loc 1 1150 0
 3880 00de 7B68     	 ldr r3,[r7,#4]
 3881 00e0 1B6F     	 ldr r3,[r3,#112]
 3882 00e2 034A     	 ldr r2,.L224
 3883 00e4 9366     	 str r3,[r2,#104]
1151:../soes/esc.c **** }
 3884              	 .loc 1 1151 0
 3885 00e6 0C37     	 adds r7,r7,#12
 3886              	.LCFI176:
 3887              	 .cfi_def_cfa_offset 4
 3888 00e8 BD46     	 mov sp,r7
 3889              	.LCFI177:
 3890              	 .cfi_def_cfa_register 13
 3891              	 
 3892 00ea 5DF8047B 	 ldr r7,[sp],#4
 3893              	.LCFI178:
 3894              	 .cfi_restore 7
 3895              	 .cfi_def_cfa_offset 0
 3896 00ee 7047     	 bx lr
 3897              	.L225:
 3898              	 .align 2
 3899              	.L224:
 3900 00f0 00000000 	 .word ESCvar
 3901              	 .cfi_endproc
 3902              	.LFE36:
 3904              	 .text
 3905              	.Letext0:
 3906              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 3907              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3908              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3909              	 .file 5 "../soes/esc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 esc.c
    {standard input}:20     .text.ESC_ALerror:00000000 $t
    {standard input}:25     .text.ESC_ALerror:00000000 ESC_ALerror
    {standard input}:70     .text.ESC_ALerror:0000002c $d
    {standard input}:75     .text.ESC_ALstatus:00000000 $t
    {standard input}:80     .text.ESC_ALstatus:00000000 ESC_ALstatus
    {standard input}:126    .text.ESC_ALstatus:00000030 $d
    {standard input}:131    .text.ESC_ALeventmaskwrite:00000000 $t
    {standard input}:136    .text.ESC_ALeventmaskwrite:00000000 ESC_ALeventmaskwrite
    {standard input}:176    .text.ESC_ALeventmaskread:00000000 $t
    {standard input}:181    .text.ESC_ALeventmaskread:00000000 ESC_ALeventmaskread
    {standard input}:220    .text.ESC_ALeventwrite:00000000 $t
    {standard input}:225    .text.ESC_ALeventwrite:00000000 ESC_ALeventwrite
    {standard input}:265    .text.ESC_ALeventread:00000000 $t
    {standard input}:270    .text.ESC_ALeventread:00000000 ESC_ALeventread
    {standard input}:309    .text.ESC_SMack:00000000 $t
    {standard input}:314    .text.ESC_SMack:00000000 ESC_SMack
    {standard input}:358    .text.ESC_SMstatus:00000000 $t
    {standard input}:363    .text.ESC_SMstatus:00000000 ESC_SMstatus
    {standard input}:425    .text.ESC_SMstatus:0000004c $d
    {standard input}:430    .text.ESC_SMwritepdi:00000000 $t
    {standard input}:435    .text.ESC_SMwritepdi:00000000 ESC_SMwritepdi
    {standard input}:486    .text.ESC_SMwritepdi:00000038 $d
    {standard input}:491    .text.ESC_SMenable:00000000 $t
    {standard input}:496    .text.ESC_SMenable:00000000 ESC_SMenable
    {standard input}:545    .text.ESC_SMenable:00000034 $d
    {standard input}:550    .text.ESC_SMdisable:00000000 $t
    {standard input}:555    .text.ESC_SMdisable:00000000 ESC_SMdisable
    {standard input}:604    .text.ESC_SMdisable:00000034 $d
    {standard input}:609    .text.ESC_address:00000000 $t
    {standard input}:614    .text.ESC_address:00000000 ESC_address
    {standard input}:644    .text.ESC_address:00000020 $d
    {standard input}:650    .text.ESC_WDstatus:00000000 $t
    {standard input}:655    .text.ESC_WDstatus:00000000 ESC_WDstatus
    {standard input}:698    .text.ESC_SYNCactivation:00000000 $t
    {standard input}:703    .text.ESC_SYNCactivation:00000000 ESC_SYNCactivation
    {standard input}:742    .text.ESC_SYNC0cycletime:00000000 $t
    {standard input}:747    .text.ESC_SYNC0cycletime:00000000 ESC_SYNC0cycletime
    {standard input}:789    .text.ESC_SYNC1cycletime:00000000 $t
    {standard input}:794    .text.ESC_SYNC1cycletime:00000000 ESC_SYNC1cycletime
    {standard input}:836    .text.ESC_checkDC:00000000 $t
    {standard input}:841    .text.ESC_checkDC:00000000 ESC_checkDC
    {standard input}:1015   .text.ESC_checkDC:00000104 $d
    {standard input}:1021   .text.ESC_checkmbx:00000000 $t
    {standard input}:1026   .text.ESC_checkmbx:00000000 ESC_checkmbx
    {standard input}:1173   .text.ESC_checkmbx:000000ec $d
    {standard input}:1180   .text.ESC_startmbx:00000000 $t
    {standard input}:1185   .text.ESC_startmbx:00000000 ESC_startmbx
    {standard input}:1277   .text.ESC_startmbx:00000090 $d
    {standard input}:1284   .text.ESC_startmbxboot:00000000 $t
    {standard input}:1289   .text.ESC_startmbxboot:00000000 ESC_startmbxboot
    {standard input}:1381   .text.ESC_startmbxboot:00000090 $d
    {standard input}:1388   .text.ESC_stopmbx:00000000 $t
    {standard input}:1393   .text.ESC_stopmbx:00000000 ESC_stopmbx
    {standard input}:1498   .text.ESC_stopmbx:000000a0 $d
    {standard input}:1504   .text.ESC_readmbx:00000000 $t
    {standard input}:1509   .text.ESC_readmbx:00000000 ESC_readmbx
    {standard input}:1606   .text.ESC_readmbx:00000090 $d
    {standard input}:1613   .text.ESC_writembx:00000000 $t
    {standard input}:1618   .text.ESC_writembx:00000000 ESC_writembx
    {standard input}:1715   .text.ESC_writembx:00000094 $d
    {standard input}:1721   .text.ESC_ackmbxread:00000000 $t
    {standard input}:1726   .text.ESC_ackmbxread:00000000 ESC_ackmbxread
    {standard input}:1771   .text.ESC_ackmbxread:0000002c $d
    {standard input}:1776   .text.ESC_claimbuffer:00000000 $t
    {standard input}:1781   .text.ESC_claimbuffer:00000000 ESC_claimbuffer
    {standard input}:1916   .text.ESC_claimbuffer:000000d0 $d
    {standard input}:1923   .text.ESC_outreqbuffer:00000000 $t
    {standard input}:1928   .text.ESC_outreqbuffer:00000000 ESC_outreqbuffer
    {standard input}:1989   .text.ESC_outreqbuffer:00000038 $d
    {standard input}:1995   .text.MBX_error:00000000 $t
    {standard input}:2000   .text.MBX_error:00000000 MBX_error
    {standard input}:2076   .text.MBX_error:00000064 $d
    {standard input}:2083   .text.ESC_mbxprocess:00000000 $t
    {standard input}:2088   .text.ESC_mbxprocess:00000000 ESC_mbxprocess
    {standard input}:2428   .text.ESC_mbxprocess:0000026c $d
    {standard input}:2435   .text.ESC_xoeprocess:00000000 $t
    {standard input}:2440   .text.ESC_xoeprocess:00000000 ESC_xoeprocess
    {standard input}:2518   .text.ESC_xoeprocess:0000005c $d
    {standard input}:2525   .text.ESC_checkSM23:00000000 $t
    {standard input}:2530   .text.ESC_checkSM23:00000000 ESC_checkSM23
    {standard input}:2667   .text.ESC_checkSM23:000000d0 $d
    {standard input}:2674   .text.ESC_startinput:00000000 $t
    {standard input}:2679   .text.ESC_startinput:00000000 ESC_startinput
    {standard input}:2823   .text.ESC_startinput:000000d4 $d
    {standard input}:2829   .text.ESC_stopinput:00000000 $t
    {standard input}:2834   .text.ESC_stopinput:00000000 ESC_stopinput
    {standard input}:2882   .text.ESC_stopinput:0000003c $d
    {standard input}:2888   .text.ESC_startoutput:00000000 $t
    {standard input}:2893   .text.ESC_startoutput:00000000 ESC_startoutput
    {standard input}:2940   .text.ESC_startoutput:00000034 $d
    {standard input}:2945   .text.ESC_stopoutput:00000000 $t
    {standard input}:2950   .text.ESC_stopoutput:00000000 ESC_stopoutput
    {standard input}:2984   .text.ESC_stopoutput:0000002c $d
    {standard input}:2989   .text.ESC_sm_act_event:00000000 $t
    {standard input}:2994   .text.ESC_sm_act_event:00000000 ESC_sm_act_event
    {standard input}:3207   .text.ESC_sm_act_event:00000160 $d
    {standard input}:3213   .text.ESC_state:00000000 $t
    {standard input}:3218   .text.ESC_state:00000000 ESC_state
    {standard input}:3344   .text.ESC_state:000000d0 $d
    {standard input}:3464   .text.ESC_state:000002b0 $t
    {standard input}:3600   .text.ESC_state:00000380 $d
    {standard input}:3604   .text.ESC_state:00000388 $t
    {standard input}:3725   .text.ESC_state:00000434 $d
    {standard input}:3730   .text.ESC_config:00000000 $t
    {standard input}:3735   .text.ESC_config:00000000 ESC_config
    {standard input}:3900   .text.ESC_config:000000f0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ESC_write
ESCvar
ESC_read
COE_getSyncMgrPara
MBXcontrol
MBX
APP_safeoutput
COE_initDefaultSyncMgrPara
sizeOfPDO
