
ETHCAT_FWUPDATE_SSC_APPLICATION_XMC48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b832  08020000  0c020000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  2 .data         00000d70  1ffe8800  0c02b832  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000014a4  1ffe9570  0c02c5a2  00019570  2**3
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001620  00000000  00000000  00019570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023690  00000000  00000000  0001ab90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000053de  00000000  00000000  0003e220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bee4  00000000  00000000  000435fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005914  00000000  00000000  0004f4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000e0ae  00000000  00000000  00054df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1d0  00000000  00000000  00062ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001308  00000000  00000000  0006e076  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000d04  00000000  00000000  0006f37e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <__Vectors>:
 8020000:	00 88 fe 1f 01 02 02 08 99 02 02 08 99 02 02 08     ................
 8020010:	99 02 02 08 99 02 02 08 99 02 02 08 00 00 00 00     ................
	...
 802002c:	99 02 02 08 99 02 02 08 00 00 00 00 99 02 02 08     ................
 802003c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802004c:	99 02 02 08 99 02 02 08 31 ab 02 08 99 02 02 08     ........1.......
 802005c:	99 02 02 08 3d ab 02 08 00 00 00 00 00 00 00 00     ....=...........
 802006c:	00 00 00 00 99 02 02 08 00 00 00 00 99 02 02 08     ................
 802007c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802008c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802009c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200ac:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200bc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200cc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200dc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200ec:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80200fc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802010c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802011c:	99 02 02 08 99 02 02 08 e1 9f 02 08 99 02 02 08     ................
 802012c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802013c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802014c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802015c:	99 02 02 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 802016c:	00 00 00 00 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802017c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802018c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 802019c:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201ac:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201bc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201cc:	99 02 02 08 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201dc:	00 00 00 00 99 02 02 08 99 02 02 08 99 02 02 08     ................
 80201ec:	99 02 02 08 99 02 02 08 d5 9f 02 08 99 02 02 08     ................
 80201fc:	00 00 00 00                                         ....

08020200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8020200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8020278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8020204:	481d      	ldr	r0, [pc, #116]	; (802027c <__zero_table_end__+0x4>)
    blx  r0
 8020206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8020208:	4c1d      	ldr	r4, [pc, #116]	; (8020280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 802020a:	4d1e      	ldr	r5, [pc, #120]	; (8020284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 802020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 802020e:	da09      	bge.n	8020224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8020210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8020212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8020214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8020216:	3b04      	subs	r3, #4
	ittt	ge
 8020218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 802021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 802021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 802021e:	e7fa      	bge.n	8020216 <Reset_Handler+0x16>

	adds	r4, #12
 8020220:	340c      	adds	r4, #12
	b	.L_loop0
 8020222:	e7f3      	b.n	802020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8020224:	4b18      	ldr	r3, [pc, #96]	; (8020288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8020226:	4c19      	ldr	r4, [pc, #100]	; (802028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8020228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 802022a:	da08      	bge.n	802023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 802022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 802022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8020230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8020232:	3a04      	subs	r2, #4
	itt	ge
 8020234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8020236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8020238:	e7fb      	bge.n	8020232 <Reset_Handler+0x32>

	adds	r3, #8
 802023a:	3308      	adds	r3, #8
	b	.L_loop2
 802023c:	e7f4      	b.n	8020228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 802023e:	4814      	ldr	r0, [pc, #80]	; (8020290 <__zero_table_end__+0x18>)
    blx  r0
 8020240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8020242:	4814      	ldr	r0, [pc, #80]	; (8020294 <__zero_table_end__+0x1c>)
    blx  r0
 8020244:	4780      	blx	r0
	...

08020248 <__copy_table_start__>:
 8020248:	0c02b832 	.word	0x0c02b832
 802024c:	1ffe8800 	.word	0x1ffe8800
 8020250:	00000d70 	.word	0x00000d70
 8020254:	0c02b832 	.word	0x0c02b832
 8020258:	1ffe8800 	.word	0x1ffe8800
 802025c:	00000000 	.word	0x00000000

08020260 <__copy_table_end__>:
 8020260:	1ffe9570 	.word	0x1ffe9570
 8020264:	000014a4 	.word	0x000014a4
 8020268:	20000000 	.word	0x20000000
 802026c:	00000000 	.word	0x00000000
 8020270:	20000000 	.word	0x20000000
 8020274:	00000000 	.word	0x00000000

08020278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8020278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 802027c:	0802029d 	.word	0x0802029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8020280:	08020248 	.word	0x08020248
	ldr	r5, =__copy_table_end__
 8020284:	08020260 	.word	0x08020260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8020288:	08020260 	.word	0x08020260
	ldr	r4, =__zero_table_end__
 802028c:	08020278 	.word	0x08020278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8020290:	0802ab8d 	.word	0x0802ab8d
    blx  r0
#endif

    ldr  r0, =main
 8020294:	0802ab11 	.word	0x0802ab11

08020298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8020298:	e7fe      	b.n	8020298 <BusFault_Handler>
	...

0802029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 802029c:	b598      	push	{r3, r4, r7, lr}
 802029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80202a0:	4a05      	ldr	r2, [pc, #20]	; (80202b8 <SystemInit+0x1c>)
 80202a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80202a6:	4614      	mov	r4, r2
 80202a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80202aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80202ae:	f009 fef5 	bl	802a09c <SystemCoreSetup>
  SystemCoreClockSetup();
 80202b2:	f009 ff71 	bl	802a198 <SystemCoreClockSetup>
}
 80202b6:	bd98      	pop	{r3, r4, r7, pc}
 80202b8:	2003ffc4 	.word	0x2003ffc4

080202bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	b084      	sub	sp, #16
 80202c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80202c2:	4b2f      	ldr	r3, [pc, #188]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 80202c4:	68db      	ldr	r3, [r3, #12]
 80202c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d03e      	beq.n	802034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80202ce:	4b2d      	ldr	r3, [pc, #180]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202d0:	68db      	ldr	r3, [r3, #12]
 80202d2:	f003 0301 	and.w	r3, r3, #1
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d002      	beq.n	80202e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80202da:	4b2b      	ldr	r3, [pc, #172]	; (8020388 <SystemCoreClockUpdate+0xcc>)
 80202dc:	60fb      	str	r3, [r7, #12]
 80202de:	e002      	b.n	80202e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80202e0:	f009 ff3c 	bl	802a15c <OSCHP_GetFrequency>
 80202e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80202e6:	4b27      	ldr	r3, [pc, #156]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	f003 0304 	and.w	r3, r3, #4
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d020      	beq.n	8020334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80202f2:	4b24      	ldr	r3, [pc, #144]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 80202f4:	689b      	ldr	r3, [r3, #8]
 80202f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80202fa:	0e1b      	lsrs	r3, r3, #24
 80202fc:	3301      	adds	r3, #1
 80202fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020300:	4b20      	ldr	r3, [pc, #128]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020302:	689b      	ldr	r3, [r3, #8]
 8020304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8020308:	0a1b      	lsrs	r3, r3, #8
 802030a:	3301      	adds	r3, #1
 802030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 802030e:	4b1d      	ldr	r3, [pc, #116]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020310:	689b      	ldr	r3, [r3, #8]
 8020312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8020316:	0c1b      	lsrs	r3, r3, #16
 8020318:	3301      	adds	r3, #1
 802031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 802031c:	68bb      	ldr	r3, [r7, #8]
 802031e:	683a      	ldr	r2, [r7, #0]
 8020320:	fb02 f303 	mul.w	r3, r2, r3
 8020324:	68fa      	ldr	r2, [r7, #12]
 8020326:	fbb2 f3f3 	udiv	r3, r2, r3
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	fb02 f303 	mul.w	r3, r2, r3
 8020330:	60fb      	str	r3, [r7, #12]
 8020332:	e00d      	b.n	8020350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020334:	4b13      	ldr	r3, [pc, #76]	; (8020384 <SystemCoreClockUpdate+0xc8>)
 8020336:	689b      	ldr	r3, [r3, #8]
 8020338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802033c:	3301      	adds	r3, #1
 802033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8020340:	68fa      	ldr	r2, [r7, #12]
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	fbb2 f3f3 	udiv	r3, r2, r3
 8020348:	60fb      	str	r3, [r7, #12]
 802034a:	e001      	b.n	8020350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 802034c:	4b0e      	ldr	r3, [pc, #56]	; (8020388 <SystemCoreClockUpdate+0xcc>)
 802034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8020350:	4b0b      	ldr	r3, [pc, #44]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 8020352:	68db      	ldr	r3, [r3, #12]
 8020354:	b2db      	uxtb	r3, r3
 8020356:	3301      	adds	r3, #1
 8020358:	68fa      	ldr	r2, [r7, #12]
 802035a:	fbb2 f3f3 	udiv	r3, r2, r3
 802035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8020360:	4b07      	ldr	r3, [pc, #28]	; (8020380 <SystemCoreClockUpdate+0xc4>)
 8020362:	691b      	ldr	r3, [r3, #16]
 8020364:	f003 0301 	and.w	r3, r3, #1
 8020368:	3301      	adds	r3, #1
 802036a:	68fa      	ldr	r2, [r7, #12]
 802036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8020372:	4a06      	ldr	r2, [pc, #24]	; (802038c <SystemCoreClockUpdate+0xd0>)
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	6013      	str	r3, [r2, #0]
}
 8020378:	3710      	adds	r7, #16
 802037a:	46bd      	mov	sp, r7
 802037c:	bd80      	pop	{r7, pc}
 802037e:	bf00      	nop
 8020380:	50004600 	.word	0x50004600
 8020384:	50004710 	.word	0x50004710
 8020388:	016e3600 	.word	0x016e3600
 802038c:	2003ffc0 	.word	0x2003ffc0

08020390 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 8020390:	b480      	push	{r7}
 8020392:	b083      	sub	sp, #12
 8020394:	af00      	add	r7, sp, #0
 8020396:	4603      	mov	r3, r0
 8020398:	80fb      	strh	r3, [r7, #6]

}
 802039a:	370c      	adds	r7, #12
 802039c:	46bd      	mov	sp, r7
 802039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a2:	4770      	bx	lr

080203a4 <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 80203a4:	b480      	push	{r7}
 80203a6:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203a8:	2300      	movs	r3, #0
}
 80203aa:	4618      	mov	r0, r3
 80203ac:	46bd      	mov	sp, r7
 80203ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b2:	4770      	bx	lr

080203b4 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////
void FWUPDATE_StateTransitionInit(void);
UINT16 APPL_StopMailboxHandler(void)
{
 80203b4:	b580      	push	{r7, lr}
 80203b6:	af00      	add	r7, sp, #0
	FWUPDATE_StateTransitionInit();
 80203b8:	f009 ff96 	bl	802a2e8 <FWUPDATE_StateTransitionInit>
    return ALSTATUSCODE_NOERROR;
 80203bc:	2300      	movs	r3, #0
}
 80203be:	4618      	mov	r0, r3
 80203c0:	bd80      	pop	{r7, pc}
 80203c2:	bf00      	nop

080203c4 <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 80203c4:	b480      	push	{r7}
 80203c6:	b083      	sub	sp, #12
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 80203cc:	2300      	movs	r3, #0
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	370c      	adds	r7, #12
 80203d2:	46bd      	mov	sp, r7
 80203d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d8:	4770      	bx	lr
 80203da:	bf00      	nop

080203dc <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 80203dc:	b480      	push	{r7}
 80203de:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203e0:	2300      	movs	r3, #0
}
 80203e2:	4618      	mov	r0, r3
 80203e4:	46bd      	mov	sp, r7
 80203e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ea:	4770      	bx	lr

080203ec <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 80203ec:	b480      	push	{r7}
 80203ee:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80203f0:	2300      	movs	r3, #0
}
 80203f2:	4618      	mov	r0, r3
 80203f4:	46bd      	mov	sp, r7
 80203f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fa:	4770      	bx	lr

080203fc <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 80203fc:	b480      	push	{r7}
 80203fe:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020400:	2300      	movs	r3, #0
}
 8020402:	4618      	mov	r0, r3
 8020404:	46bd      	mov	sp, r7
 8020406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802040a:	4770      	bx	lr

0802040c <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 802040c:	b590      	push	{r4, r7, lr}
 802040e:	b089      	sub	sp, #36	; 0x24
 8020410:	af00      	add	r7, sp, #0
 8020412:	6078      	str	r0, [r7, #4]
 8020414:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 8020416:	2300      	movs	r3, #0
 8020418:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 802041a:	2300      	movs	r3, #0
 802041c:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 802041e:	2300      	movs	r3, #0
 8020420:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 8020422:	2300      	movs	r3, #0
 8020424:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 8020426:	2300      	movs	r3, #0
 8020428:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 802042a:	2300      	movs	r3, #0
 802042c:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 802042e:	2300      	movs	r3, #0
 8020430:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8020432:	2300      	movs	r3, #0
 8020434:	82fb      	strh	r3, [r7, #22]
   
#if MAX_PD_OUTPUT_SIZE > 0
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8020436:	2300      	movs	r3, #0
 8020438:	833b      	strh	r3, [r7, #24]
 802043a:	e03c      	b.n	80204b6 <APPL_GenerateMapping+0xaa>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 802043c:	8b3b      	ldrh	r3, [r7, #24]
 802043e:	4a4e      	ldr	r2, [pc, #312]	; (8020578 <APPL_GenerateMapping+0x16c>)
 8020440:	005b      	lsls	r3, r3, #1
 8020442:	4413      	add	r3, r2
 8020444:	885b      	ldrh	r3, [r3, #2]
 8020446:	4618      	mov	r0, r3
 8020448:	f004 f9f8 	bl	802483c <OBJ_GetObjectHandle>
 802044c:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 802044e:	693b      	ldr	r3, [r7, #16]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d028      	beq.n	80204a6 <APPL_GenerateMapping+0x9a>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8020454:	693b      	ldr	r3, [r7, #16]
 8020456:	699b      	ldr	r3, [r3, #24]
 8020458:	881b      	ldrh	r3, [r3, #0]
 802045a:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 802045c:	2300      	movs	r3, #0
 802045e:	82fb      	strh	r3, [r7, #22]
 8020460:	e01c      	b.n	802049c <APPL_GenerateMapping+0x90>
            {
                pPDOEntry = (UINT32 *)((UINT16 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3)/2);    //goto PDO entry
 8020462:	693b      	ldr	r3, [r7, #16]
 8020464:	699c      	ldr	r4, [r3, #24]
 8020466:	8afb      	ldrh	r3, [r7, #22]
 8020468:	b2db      	uxtb	r3, r3
 802046a:	3301      	adds	r3, #1
 802046c:	b2db      	uxtb	r3, r3
 802046e:	4618      	mov	r0, r3
 8020470:	6939      	ldr	r1, [r7, #16]
 8020472:	f004 fc65 	bl	8024d40 <OBJ_GetEntryOffset>
 8020476:	4603      	mov	r3, r0
 8020478:	08db      	lsrs	r3, r3, #3
 802047a:	b29b      	uxth	r3, r3
 802047c:	085b      	lsrs	r3, r3, #1
 802047e:	b29b      	uxth	r3, r3
 8020480:	005b      	lsls	r3, r3, #1
 8020482:	4423      	add	r3, r4
 8020484:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8020486:	68bb      	ldr	r3, [r7, #8]
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	b29b      	uxth	r3, r3
 802048c:	b2db      	uxtb	r3, r3
 802048e:	b29a      	uxth	r2, r3
 8020490:	8b7b      	ldrh	r3, [r7, #26]
 8020492:	4413      	add	r3, r2
 8020494:	837b      	strh	r3, [r7, #26]
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
        if(pPDO != NULL)
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020496:	8afb      	ldrh	r3, [r7, #22]
 8020498:	3301      	adds	r3, #1
 802049a:	82fb      	strh	r3, [r7, #22]
 802049c:	8afa      	ldrh	r2, [r7, #22]
 802049e:	89fb      	ldrh	r3, [r7, #14]
 80204a0:	429a      	cmp	r2, r3
 80204a2:	d3de      	bcc.n	8020462 <APPL_GenerateMapping+0x56>
 80204a4:	e004      	b.n	80204b0 <APPL_GenerateMapping+0xa4>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 80204a6:	2300      	movs	r3, #0
 80204a8:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 80204aa:	2325      	movs	r3, #37	; 0x25
 80204ac:	83fb      	strh	r3, [r7, #30]
            break;
 80204ae:	e007      	b.n	80204c0 <APPL_GenerateMapping+0xb4>
    UINT32 *pPDOEntry = NULL;
    UINT16 PDOEntryCnt = 0;
   
#if MAX_PD_OUTPUT_SIZE > 0
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80204b0:	8b3b      	ldrh	r3, [r7, #24]
 80204b2:	3301      	adds	r3, #1
 80204b4:	833b      	strh	r3, [r7, #24]
 80204b6:	4b30      	ldr	r3, [pc, #192]	; (8020578 <APPL_GenerateMapping+0x16c>)
 80204b8:	881b      	ldrh	r3, [r3, #0]
 80204ba:	8b3a      	ldrh	r2, [r7, #24]
 80204bc:	429a      	cmp	r2, r3
 80204be:	d3bd      	bcc.n	802043c <APPL_GenerateMapping+0x30>
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
            break;
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 80204c0:	8b7b      	ldrh	r3, [r7, #26]
 80204c2:	3307      	adds	r3, #7
 80204c4:	10db      	asrs	r3, r3, #3
 80204c6:	837b      	strh	r3, [r7, #26]
#endif

#if MAX_PD_INPUT_SIZE > 0
    if(result == 0)
 80204c8:	8bfb      	ldrh	r3, [r7, #30]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d144      	bne.n	8020558 <APPL_GenerateMapping+0x14c>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80204ce:	2300      	movs	r3, #0
 80204d0:	833b      	strh	r3, [r7, #24]
 80204d2:	e03c      	b.n	802054e <APPL_GenerateMapping+0x142>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 80204d4:	8b3b      	ldrh	r3, [r7, #24]
 80204d6:	4a29      	ldr	r2, [pc, #164]	; (802057c <APPL_GenerateMapping+0x170>)
 80204d8:	005b      	lsls	r3, r3, #1
 80204da:	4413      	add	r3, r2
 80204dc:	885b      	ldrh	r3, [r3, #2]
 80204de:	4618      	mov	r0, r3
 80204e0:	f004 f9ac 	bl	802483c <OBJ_GetObjectHandle>
 80204e4:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 80204e6:	693b      	ldr	r3, [r7, #16]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d028      	beq.n	802053e <APPL_GenerateMapping+0x132>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80204ec:	693b      	ldr	r3, [r7, #16]
 80204ee:	699b      	ldr	r3, [r3, #24]
 80204f0:	881b      	ldrh	r3, [r3, #0]
 80204f2:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80204f4:	2300      	movs	r3, #0
 80204f6:	82fb      	strh	r3, [r7, #22]
 80204f8:	e01c      	b.n	8020534 <APPL_GenerateMapping+0x128>
                {
                    pPDOEntry = (UINT32 *)((UINT16 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3)/2);    //goto PDO entry
 80204fa:	693b      	ldr	r3, [r7, #16]
 80204fc:	699c      	ldr	r4, [r3, #24]
 80204fe:	8afb      	ldrh	r3, [r7, #22]
 8020500:	b2db      	uxtb	r3, r3
 8020502:	3301      	adds	r3, #1
 8020504:	b2db      	uxtb	r3, r3
 8020506:	4618      	mov	r0, r3
 8020508:	6939      	ldr	r1, [r7, #16]
 802050a:	f004 fc19 	bl	8024d40 <OBJ_GetEntryOffset>
 802050e:	4603      	mov	r3, r0
 8020510:	08db      	lsrs	r3, r3, #3
 8020512:	b29b      	uxth	r3, r3
 8020514:	085b      	lsrs	r3, r3, #1
 8020516:	b29b      	uxth	r3, r3
 8020518:	005b      	lsls	r3, r3, #1
 802051a:	4423      	add	r3, r4
 802051c:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 802051e:	68bb      	ldr	r3, [r7, #8]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	b29b      	uxth	r3, r3
 8020524:	b2db      	uxtb	r3, r3
 8020526:	b29a      	uxth	r2, r3
 8020528:	8bbb      	ldrh	r3, [r7, #28]
 802052a:	4413      	add	r3, r2
 802052c:	83bb      	strh	r3, [r7, #28]
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
            if(pPDO != NULL)
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 802052e:	8afb      	ldrh	r3, [r7, #22]
 8020530:	3301      	adds	r3, #1
 8020532:	82fb      	strh	r3, [r7, #22]
 8020534:	8afa      	ldrh	r2, [r7, #22]
 8020536:	89fb      	ldrh	r3, [r7, #14]
 8020538:	429a      	cmp	r2, r3
 802053a:	d3de      	bcc.n	80204fa <APPL_GenerateMapping+0xee>
 802053c:	e004      	b.n	8020548 <APPL_GenerateMapping+0x13c>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 802053e:	2300      	movs	r3, #0
 8020540:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8020542:	2324      	movs	r3, #36	; 0x24
 8020544:	83fb      	strh	r3, [r7, #30]
                break;
 8020546:	e007      	b.n	8020558 <APPL_GenerateMapping+0x14c>

#if MAX_PD_INPUT_SIZE > 0
    if(result == 0)
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8020548:	8b3b      	ldrh	r3, [r7, #24]
 802054a:	3301      	adds	r3, #1
 802054c:	833b      	strh	r3, [r7, #24]
 802054e:	4b0b      	ldr	r3, [pc, #44]	; (802057c <APPL_GenerateMapping+0x170>)
 8020550:	881b      	ldrh	r3, [r3, #0]
 8020552:	8b3a      	ldrh	r2, [r7, #24]
 8020554:	429a      	cmp	r2, r3
 8020556:	d3bd      	bcc.n	80204d4 <APPL_GenerateMapping+0xc8>
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
                break;
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 8020558:	8bbb      	ldrh	r3, [r7, #28]
 802055a:	3307      	adds	r3, #7
 802055c:	10db      	asrs	r3, r3, #3
 802055e:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	8bba      	ldrh	r2, [r7, #28]
 8020564:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 8020566:	683b      	ldr	r3, [r7, #0]
 8020568:	8b7a      	ldrh	r2, [r7, #26]
 802056a:	801a      	strh	r2, [r3, #0]
    return result;
 802056c:	8bfb      	ldrh	r3, [r7, #30]
}
 802056e:	4618      	mov	r0, r3
 8020570:	3724      	adds	r7, #36	; 0x24
 8020572:	46bd      	mov	sp, r7
 8020574:	bd90      	pop	{r4, r7, pc}
 8020576:	bf00      	nop
 8020578:	1ffe8868 	.word	0x1ffe8868
 802057c:	1ffe886c 	.word	0x1ffe886c

08020580 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 8020580:	b580      	push	{r7, lr}
 8020582:	b082      	sub	sp, #8
 8020584:	af00      	add	r7, sp, #0
 8020586:	6078      	str	r0, [r7, #4]
	memcpy(pData, &(((UINT16 *)&IN_GENERIC0x6000)[1]), SIZEOF(IN_GENERIC0x6000)-2);
 8020588:	6878      	ldr	r0, [r7, #4]
 802058a:	4903      	ldr	r1, [pc, #12]	; (8020598 <APPL_InputMapping+0x18>)
 802058c:	220a      	movs	r2, #10
 802058e:	f00a fb43 	bl	802ac18 <memcpy>
}
 8020592:	3708      	adds	r7, #8
 8020594:	46bd      	mov	sp, r7
 8020596:	bd80      	pop	{r7, pc}
 8020598:	1ffe8872 	.word	0x1ffe8872

0802059c <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b082      	sub	sp, #8
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
	memcpy(&(((UINT16 *)&OUT_GENERIC0x7000)[1]), pData, SIZEOF(OUT_GENERIC0x7000)-2);
 80205a4:	4803      	ldr	r0, [pc, #12]	; (80205b4 <APPL_OutputMapping+0x18>)
 80205a6:	6879      	ldr	r1, [r7, #4]
 80205a8:	220a      	movs	r2, #10
 80205aa:	f00a fb35 	bl	802ac18 <memcpy>
}
 80205ae:	3708      	adds	r7, #8
 80205b0:	46bd      	mov	sp, r7
 80205b2:	bd80      	pop	{r7, pc}
 80205b4:	1ffe887e 	.word	0x1ffe887e

080205b8 <APPL_Application>:
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC);
void APPL_Application(void)
{
 80205b8:	b580      	push	{r7, lr}
 80205ba:	af00      	add	r7, sp, #0
	process_app(&OUT_GENERIC0x7000, &IN_GENERIC0x6000);
 80205bc:	4802      	ldr	r0, [pc, #8]	; (80205c8 <APPL_Application+0x10>)
 80205be:	4903      	ldr	r1, [pc, #12]	; (80205cc <APPL_Application+0x14>)
 80205c0:	f00a f9de 	bl	802a980 <process_app>
}
 80205c4:	bd80      	pop	{r7, pc}
 80205c6:	bf00      	nop
 80205c8:	1ffe887c 	.word	0x1ffe887c
 80205cc:	1ffe8870 	.word	0x1ffe8870

080205d0 <BL_Start>:
 \param    State        Current state

 \brief Called from INIT to BOOT
*////////////////////////////////////////////////////////////////////////////////////////
void BL_Start( UINT8 State)
{
 80205d0:	b480      	push	{r7}
 80205d2:	b083      	sub	sp, #12
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	4603      	mov	r3, r0
 80205d8:	71fb      	strb	r3, [r7, #7]
}
 80205da:	370c      	adds	r7, #12
 80205dc:	46bd      	mov	sp, r7
 80205de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e2:	4770      	bx	lr

080205e4 <BL_Stop>:
/**

\brief Called in the state transition from BOOT to Init
*////////////////////////////////////////////////////////////////////////////////////////
void BL_Stop(void)
{
 80205e4:	b480      	push	{r7}
 80205e6:	af00      	add	r7, sp, #0
}
 80205e8:	46bd      	mov	sp, r7
 80205ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ee:	4770      	bx	lr

080205f0 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80205f0:	b580      	push	{r7, lr}
 80205f2:	b082      	sub	sp, #8
 80205f4:	af00      	add	r7, sp, #0
 80205f6:	6078      	str	r0, [r7, #4]
 80205f8:	460b      	mov	r3, r1
 80205fa:	807b      	strh	r3, [r7, #2]
 80205fc:	4613      	mov	r3, r2
 80205fe:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8020600:	887b      	ldrh	r3, [r7, #2]
 8020602:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020606:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802060a:	883a      	ldrh	r2, [r7, #0]
 802060c:	6878      	ldr	r0, [r7, #4]
 802060e:	4619      	mov	r1, r3
 8020610:	f00a fb02 	bl	802ac18 <memcpy>
}
 8020614:	3708      	adds	r7, #8
 8020616:	46bd      	mov	sp, r7
 8020618:	bd80      	pop	{r7, pc}
 802061a:	bf00      	nop

0802061c <Read0x10F8>:
sdosrv.h))

\brief    This function reads the object 0x10F8
*/
UINT8 Read0x10F8(UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess)
{
 802061c:	b580      	push	{r7, lr}
 802061e:	b084      	sub	sp, #16
 8020620:	af00      	add	r7, sp, #0
 8020622:	60ba      	str	r2, [r7, #8]
 8020624:	607b      	str	r3, [r7, #4]
 8020626:	4603      	mov	r3, r0
 8020628:	81fb      	strh	r3, [r7, #14]
 802062a:	460b      	mov	r3, r1
 802062c:	737b      	strb	r3, [r7, #13]

    if (index != 0x10F8)
 802062e:	89fb      	ldrh	r3, [r7, #14]
 8020630:	f241 02f8 	movw	r2, #4344	; 0x10f8
 8020634:	4293      	cmp	r3, r2
 8020636:	d001      	beq.n	802063c <Read0x10F8+0x20>
    {
        return ABORTIDX_PARAM_IS_INCOMPATIBLE;
 8020638:	230b      	movs	r3, #11
 802063a:	e016      	b.n	802066a <Read0x10F8+0x4e>
    }

    
    if (bCompleteAccess)
 802063c:	7e3b      	ldrb	r3, [r7, #24]
 802063e:	2b00      	cmp	r3, #0
 8020640:	d001      	beq.n	8020646 <Read0x10F8+0x2a>
    {
         /* Complete Access is not supported for object 0x10F8 */
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8020642:	2305      	movs	r3, #5
 8020644:	e011      	b.n	802066a <Read0x10F8+0x4e>
    }

    if (subindex > 0)
 8020646:	7b7b      	ldrb	r3, [r7, #13]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d001      	beq.n	8020650 <Read0x10F8+0x34>
    {
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 802064c:	2311      	movs	r3, #17
 802064e:	e00c      	b.n	802066a <Read0x10F8+0x4e>
    }

    if (dataSize > 8)
 8020650:	68bb      	ldr	r3, [r7, #8]
 8020652:	2b08      	cmp	r3, #8
 8020654:	d901      	bls.n	802065a <Read0x10F8+0x3e>
    {
        return ABORTIDX_PARAM_LENGTH_TOO_LONG;
 8020656:	230f      	movs	r3, #15
 8020658:	e007      	b.n	802066a <Read0x10F8+0x4e>
    }


    COE_SyncTimeStamp();
 802065a:	f000 f80d 	bl	8020678 <COE_SyncTimeStamp>

    MEMCPY(pData, &u64Timestamp, dataSize);
 802065e:	6878      	ldr	r0, [r7, #4]
 8020660:	4904      	ldr	r1, [pc, #16]	; (8020674 <Read0x10F8+0x58>)
 8020662:	68ba      	ldr	r2, [r7, #8]
 8020664:	f00a fad8 	bl	802ac18 <memcpy>
    return 0;
 8020668:	2300      	movs	r3, #0
}
 802066a:	4618      	mov	r0, r3
 802066c:	3710      	adds	r7, #16
 802066e:	46bd      	mov	sp, r7
 8020670:	bd80      	pop	{r7, pc}
 8020672:	bf00      	nop
 8020674:	1ffe9570 	.word	0x1ffe9570

08020678 <COE_SyncTimeStamp>:
/**
\brief    This function updates the local timestamp object (0x10F8) and has to be called at least every 4.2sec to detect an 32Bit DC unit overrun.
          Called from the Timer handler 
*////////////////////////////////////////////////////////////////////////////////////////
void COE_SyncTimeStamp(void)
{
 8020678:	b580      	push	{r7, lr}
 802067a:	b082      	sub	sp, #8
 802067c:	af00      	add	r7, sp, #0

    if (b32BitDc)
 802067e:	4b20      	ldr	r3, [pc, #128]	; (8020700 <COE_SyncTimeStamp+0x88>)
 8020680:	781b      	ldrb	r3, [r3, #0]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d02f      	beq.n	80206e6 <COE_SyncTimeStamp+0x6e>
    {
        UINT32 DcTime = (UINT32)(u64Timestamp & (UINT64)0x00000000FFFFFFFF);
 8020686:	4b1f      	ldr	r3, [pc, #124]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 8020688:	e9d3 2300 	ldrd	r2, r3, [r3]
 802068c:	4613      	mov	r3, r2
 802068e:	607b      	str	r3, [r7, #4]


        HW_EscReadDWord(DcTime, ESC_SYSTEMTIME_OFFSET);
 8020690:	4b1d      	ldr	r3, [pc, #116]	; (8020708 <COE_SyncTimeStamp+0x90>)
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	607b      	str	r3, [r7, #4]

        /*update the lower 32Bit*/
        u64Timestamp = ((u64Timestamp & ((UINT64)0xFFFFFFFF00000000)) | (UINT64)DcTime);
 8020696:	4b1b      	ldr	r3, [pc, #108]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 8020698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802069c:	f04f 0000 	mov.w	r0, #0
 80206a0:	f04f 31ff 	mov.w	r1, #4294967295
 80206a4:	ea00 0002 	and.w	r0, r0, r2
 80206a8:	ea01 0103 	and.w	r1, r1, r3
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	461a      	mov	r2, r3
 80206b0:	f04f 0300 	mov.w	r3, #0
 80206b4:	ea42 0200 	orr.w	r2, r2, r0
 80206b8:	ea43 0301 	orr.w	r3, r3, r1
 80206bc:	4911      	ldr	r1, [pc, #68]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 80206be:	e9c1 2300 	strd	r2, r3, [r1]

        if (DcTime < u32LastDc32Value)
 80206c2:	4b12      	ldr	r3, [pc, #72]	; (802070c <COE_SyncTimeStamp+0x94>)
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	687a      	ldr	r2, [r7, #4]
 80206c8:	429a      	cmp	r2, r3
 80206ca:	d208      	bcs.n	80206de <COE_SyncTimeStamp+0x66>
        {
            /*32Bit overrun*/
            u64Timestamp = u64Timestamp + ((UINT64)0x0000000100000000);
 80206cc:	4b0d      	ldr	r3, [pc, #52]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 80206ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206d2:	3200      	adds	r2, #0
 80206d4:	f143 0301 	adc.w	r3, r3, #1
 80206d8:	490a      	ldr	r1, [pc, #40]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 80206da:	e9c1 2300 	strd	r2, r3, [r1]
        }
        
        u32LastDc32Value = DcTime;
 80206de:	4a0b      	ldr	r2, [pc, #44]	; (802070c <COE_SyncTimeStamp+0x94>)
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	6013      	str	r3, [r2, #0]
 80206e4:	e005      	b.n	80206f2 <COE_SyncTimeStamp+0x7a>
    }
    else
    {
        /*The DC unit supports 64Bit => update the complete object*/
        
        HW_EscRead((MEM_ADDR *)&u64Timestamp, ESC_SYSTEMTIME_OFFSET, 8);
 80206e6:	4807      	ldr	r0, [pc, #28]	; (8020704 <COE_SyncTimeStamp+0x8c>)
 80206e8:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80206ec:	2208      	movs	r2, #8
 80206ee:	f7ff ff7f 	bl	80205f0 <HW_EscRead>
    }

    u32CheckForDcOverrunCnt = 0;
 80206f2:	4b07      	ldr	r3, [pc, #28]	; (8020710 <COE_SyncTimeStamp+0x98>)
 80206f4:	2200      	movs	r2, #0
 80206f6:	601a      	str	r2, [r3, #0]

}
 80206f8:	3708      	adds	r7, #8
 80206fa:	46bd      	mov	sp, r7
 80206fc:	bd80      	pop	{r7, pc}
 80206fe:	bf00      	nop
 8020700:	1ffea878 	.word	0x1ffea878
 8020704:	1ffe9570 	.word	0x1ffe9570
 8020708:	54010910 	.word	0x54010910
 802070c:	1ffea7b8 	.word	0x1ffea7b8
 8020710:	1ffea7bc 	.word	0x1ffea7bc

08020714 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8020714:	b480      	push	{r7}
 8020716:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8020718:	4b03      	ldr	r3, [pc, #12]	; (8020728 <COE_GetObjectDictionary+0x14>)
 802071a:	681b      	ldr	r3, [r3, #0]
}
 802071c:	4618      	mov	r0, r3
 802071e:	46bd      	mov	sp, r7
 8020720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020724:	4770      	bx	lr
 8020726:	bf00      	nop
 8020728:	1ffe957c 	.word	0x1ffe957c

0802072c <COE_UpdateSyncErrorStatus>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief     Update the Sync Error Indication
*////////////////////////////////////////////////////////////////////////////////////////
void COE_UpdateSyncErrorStatus(void)
{
 802072c:	b480      	push	{r7}
 802072e:	af00      	add	r7, sp, #0
    if (sSyncManOutPar.u16CycleExceededCounter > 0 || sSyncManOutPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8020730:	4b14      	ldr	r3, [pc, #80]	; (8020784 <COE_UpdateSyncErrorStatus+0x58>)
 8020732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020734:	2b00      	cmp	r3, #0
 8020736:	d105      	bne.n	8020744 <COE_UpdateSyncErrorStatus+0x18>
 8020738:	4b12      	ldr	r3, [pc, #72]	; (8020784 <COE_UpdateSyncErrorStatus+0x58>)
 802073a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802073c:	4b12      	ldr	r3, [pc, #72]	; (8020788 <COE_UpdateSyncErrorStatus+0x5c>)
 802073e:	891b      	ldrh	r3, [r3, #8]
 8020740:	429a      	cmp	r2, r3
 8020742:	d904      	bls.n	802074e <COE_UpdateSyncErrorStatus+0x22>
    {
        sSyncManOutPar.u8SyncError = 1;
 8020744:	4b0f      	ldr	r3, [pc, #60]	; (8020784 <COE_UpdateSyncErrorStatus+0x58>)
 8020746:	2201      	movs	r2, #1
 8020748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802074c:	e003      	b.n	8020756 <COE_UpdateSyncErrorStatus+0x2a>
    }
    else
    {
        sSyncManOutPar.u8SyncError = 0;
 802074e:	4b0d      	ldr	r3, [pc, #52]	; (8020784 <COE_UpdateSyncErrorStatus+0x58>)
 8020750:	2200      	movs	r2, #0
 8020752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }


    if (sSyncManInPar.u16CycleExceededCounter > 0 || sSyncManInPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8020756:	4b0d      	ldr	r3, [pc, #52]	; (802078c <COE_UpdateSyncErrorStatus+0x60>)
 8020758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802075a:	2b00      	cmp	r3, #0
 802075c:	d105      	bne.n	802076a <COE_UpdateSyncErrorStatus+0x3e>
 802075e:	4b0b      	ldr	r3, [pc, #44]	; (802078c <COE_UpdateSyncErrorStatus+0x60>)
 8020760:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020762:	4b09      	ldr	r3, [pc, #36]	; (8020788 <COE_UpdateSyncErrorStatus+0x5c>)
 8020764:	891b      	ldrh	r3, [r3, #8]
 8020766:	429a      	cmp	r2, r3
 8020768:	d904      	bls.n	8020774 <COE_UpdateSyncErrorStatus+0x48>
    {
        sSyncManInPar.u8SyncError = 1;
 802076a:	4b08      	ldr	r3, [pc, #32]	; (802078c <COE_UpdateSyncErrorStatus+0x60>)
 802076c:	2201      	movs	r2, #1
 802076e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020772:	e003      	b.n	802077c <COE_UpdateSyncErrorStatus+0x50>
    }
    else
    {
        sSyncManInPar.u8SyncError = 0;
 8020774:	4b05      	ldr	r3, [pc, #20]	; (802078c <COE_UpdateSyncErrorStatus+0x60>)
 8020776:	2200      	movs	r2, #0
 8020778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

}
 802077c:	46bd      	mov	sp, r7
 802077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020782:	4770      	bx	lr
 8020784:	1ffea974 	.word	0x1ffea974
 8020788:	1ffe93e4 	.word	0x1ffe93e4
 802078c:	1ffea930 	.word	0x1ffea930

08020790 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	b082      	sub	sp, #8
 8020794:	af00      	add	r7, sp, #0
    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 8020796:	4b43      	ldr	r3, [pc, #268]	; (80208a4 <COE_ObjInit+0x114>)
 8020798:	2220      	movs	r2, #32
 802079a:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 802079c:	4b41      	ldr	r3, [pc, #260]	; (80208a4 <COE_ObjInit+0x114>)
 802079e:	2200      	movs	r2, #0
 80207a0:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 80207a2:	4b40      	ldr	r3, [pc, #256]	; (80208a4 <COE_ObjInit+0x114>)
 80207a4:	2200      	movs	r2, #0
 80207a6:	605a      	str	r2, [r3, #4]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 80207a8:	4b3e      	ldr	r3, [pc, #248]	; (80208a4 <COE_ObjInit+0x114>)
 80207aa:	f244 021f 	movw	r2, #16415	; 0x401f
 80207ae:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 80207b0:	4b3c      	ldr	r3, [pc, #240]	; (80208a4 <COE_ObjInit+0x114>)
 80207b2:	4a3d      	ldr	r2, [pc, #244]	; (80208a8 <COE_ObjInit+0x118>)
 80207b4:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 80207b6:	4b3b      	ldr	r3, [pc, #236]	; (80208a4 <COE_ObjInit+0x114>)
 80207b8:	2200      	movs	r2, #0
 80207ba:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 80207bc:	4b39      	ldr	r3, [pc, #228]	; (80208a4 <COE_ObjInit+0x114>)
 80207be:	2200      	movs	r2, #0
 80207c0:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 80207c2:	4b38      	ldr	r3, [pc, #224]	; (80208a4 <COE_ObjInit+0x114>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	621a      	str	r2, [r3, #32]

/*ECATCHANGE_START(V5.12) ECAT5*/
    /*subindex 11: reset the sm missed error counter*/
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 80207c8:	4b36      	ldr	r3, [pc, #216]	; (80208a4 <COE_ObjInit+0x114>)
 80207ca:	2200      	movs	r2, #0
 80207cc:	851a      	strh	r2, [r3, #40]	; 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManOutPar.u16CycleExceededCounter = 0;
 80207ce:	4b35      	ldr	r3, [pc, #212]	; (80208a4 <COE_ObjInit+0x114>)
 80207d0:	2200      	movs	r2, #0
 80207d2:	855a      	strh	r2, [r3, #42]	; 0x2a
/*ECATCHANGE_END(V5.12) ECAT5*/

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 80207d4:	4b33      	ldr	r3, [pc, #204]	; (80208a4 <COE_ObjInit+0x114>)
 80207d6:	2200      	movs	r2, #0
 80207d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 80207dc:	4b33      	ldr	r3, [pc, #204]	; (80208ac <COE_ObjInit+0x11c>)
 80207de:	2220      	movs	r2, #32
 80207e0:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 80207e2:	4b32      	ldr	r3, [pc, #200]	; (80208ac <COE_ObjInit+0x11c>)
 80207e4:	2200      	movs	r2, #0
 80207e6:	805a      	strh	r2, [r3, #2]

    
    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 80207e8:	4b2e      	ldr	r3, [pc, #184]	; (80208a4 <COE_ObjInit+0x114>)
 80207ea:	685b      	ldr	r3, [r3, #4]
 80207ec:	4a2f      	ldr	r2, [pc, #188]	; (80208ac <COE_ObjInit+0x11c>)
 80207ee:	6053      	str	r3, [r2, #4]

    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 80207f0:	4b2c      	ldr	r3, [pc, #176]	; (80208a4 <COE_ObjInit+0x114>)
 80207f2:	899a      	ldrh	r2, [r3, #12]
 80207f4:	4b2d      	ldr	r3, [pc, #180]	; (80208ac <COE_ObjInit+0x11c>)
 80207f6:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 80207f8:	4b2c      	ldr	r3, [pc, #176]	; (80208ac <COE_ObjInit+0x11c>)
 80207fa:	4a2b      	ldr	r2, [pc, #172]	; (80208a8 <COE_ObjInit+0x118>)
 80207fc:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 80207fe:	4b2b      	ldr	r3, [pc, #172]	; (80208ac <COE_ObjInit+0x11c>)
 8020800:	2200      	movs	r2, #0
 8020802:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8020804:	4b29      	ldr	r3, [pc, #164]	; (80208ac <COE_ObjInit+0x11c>)
 8020806:	2200      	movs	r2, #0
 8020808:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 802080a:	4b28      	ldr	r3, [pc, #160]	; (80208ac <COE_ObjInit+0x11c>)
 802080c:	2200      	movs	r2, #0
 802080e:	621a      	str	r2, [r3, #32]

/*ECATCHANGE_START(V5.12) ECAT5*/
    /*subindex 11: reset the sm missed error counter*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8020810:	4b26      	ldr	r3, [pc, #152]	; (80208ac <COE_ObjInit+0x11c>)
 8020812:	2200      	movs	r2, #0
 8020814:	851a      	strh	r2, [r3, #40]	; 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManInPar.u16CycleExceededCounter = 0;
 8020816:	4b25      	ldr	r3, [pc, #148]	; (80208ac <COE_ObjInit+0x11c>)
 8020818:	2200      	movs	r2, #0
 802081a:	855a      	strh	r2, [r3, #42]	; 0x2a
/*ECATCHANGE_END(V5.12) ECAT5*/

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 802081c:	4b23      	ldr	r3, [pc, #140]	; (80208ac <COE_ObjInit+0x11c>)
 802081e:	2200      	movs	r2, #0
 8020820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8020824:	4b22      	ldr	r3, [pc, #136]	; (80208b0 <COE_ObjInit+0x120>)
 8020826:	2200      	movs	r2, #0
 8020828:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 802082a:	f000 f951 	bl	8020ad0 <COE_ObjDictionaryInit>
 802082e:	4603      	mov	r3, r0
 8020830:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8020832:	88fb      	ldrh	r3, [r7, #6]
 8020834:	2b00      	cmp	r3, #0
 8020836:	d001      	beq.n	802083c <COE_ObjInit+0xac>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 8020838:	f000 f90a 	bl	8020a50 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 802083c:	4b1d      	ldr	r3, [pc, #116]	; (80208b4 <COE_ObjInit+0x124>)
 802083e:	2200      	movs	r2, #0
 8020840:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8020842:	4b1d      	ldr	r3, [pc, #116]	; (80208b8 <COE_ObjInit+0x128>)
 8020844:	2200      	movs	r2, #0
 8020846:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 8020848:	4b1c      	ldr	r3, [pc, #112]	; (80208bc <COE_ObjInit+0x12c>)
 802084a:	2200      	movs	r2, #0
 802084c:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 802084e:	4b1c      	ldr	r3, [pc, #112]	; (80208c0 <COE_ObjInit+0x130>)
 8020850:	2200      	movs	r2, #0
 8020852:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8020854:	4b1b      	ldr	r3, [pc, #108]	; (80208c4 <COE_ObjInit+0x134>)
 8020856:	2200      	movs	r2, #0
 8020858:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 802085a:	4b1b      	ldr	r3, [pc, #108]	; (80208c8 <COE_ObjInit+0x138>)
 802085c:	2200      	movs	r2, #0
 802085e:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 8020860:	4b1a      	ldr	r3, [pc, #104]	; (80208cc <COE_ObjInit+0x13c>)
 8020862:	2200      	movs	r2, #0
 8020864:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 8020866:	4b1a      	ldr	r3, [pc, #104]	; (80208d0 <COE_ObjInit+0x140>)
 8020868:	2200      	movs	r2, #0
 802086a:	601a      	str	r2, [r3, #0]


/*ECATCHANGE_START(V5.12) COE4*/
    UINT32 EscFeature = 0;
 802086c:	2300      	movs	r3, #0
 802086e:	603b      	str	r3, [r7, #0]
    HW_EscReadDWord(EscFeature, ESC_FEATURES_OFFSET);
 8020870:	4b18      	ldr	r3, [pc, #96]	; (80208d4 <COE_ObjInit+0x144>)
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	603b      	str	r3, [r7, #0]
    EscFeature = SWAPDWORD(EscFeature);

    if ((EscFeature & ESC_DC_32BIT_MASK) > 0)
 8020876:	683b      	ldr	r3, [r7, #0]
 8020878:	f003 0308 	and.w	r3, r3, #8
 802087c:	2b00      	cmp	r3, #0
 802087e:	d003      	beq.n	8020888 <COE_ObjInit+0xf8>
    {
        b32BitDc = FALSE;
 8020880:	4b15      	ldr	r3, [pc, #84]	; (80208d8 <COE_ObjInit+0x148>)
 8020882:	2200      	movs	r2, #0
 8020884:	701a      	strb	r2, [r3, #0]
 8020886:	e006      	b.n	8020896 <COE_ObjInit+0x106>
    }
    else
    {
        b32BitDc = TRUE;
 8020888:	4b13      	ldr	r3, [pc, #76]	; (80208d8 <COE_ObjInit+0x148>)
 802088a:	2201      	movs	r2, #1
 802088c:	701a      	strb	r2, [r3, #0]

        HW_EscReadDWord(u32LastDc32Value, ESC_SYSTEMTIME_OFFSET);
 802088e:	4b13      	ldr	r3, [pc, #76]	; (80208dc <COE_ObjInit+0x14c>)
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	4a13      	ldr	r2, [pc, #76]	; (80208e0 <COE_ObjInit+0x150>)
 8020894:	6013      	str	r3, [r2, #0]
    }

    u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8020896:	4b13      	ldr	r3, [pc, #76]	; (80208e4 <COE_ObjInit+0x154>)
 8020898:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 802089c:	601a      	str	r2, [r3, #0]

    /*ECATCHANGE_END(V5.12) COE4*/
}
 802089e:	3708      	adds	r7, #8
 80208a0:	46bd      	mov	sp, r7
 80208a2:	bd80      	pop	{r7, pc}
 80208a4:	1ffea974 	.word	0x1ffea974
 80208a8:	0001e848 	.word	0x0001e848
 80208ac:	1ffea930 	.word	0x1ffea930
 80208b0:	1ffea9b8 	.word	0x1ffea9b8
 80208b4:	1ffea9d8 	.word	0x1ffea9d8
 80208b8:	1ffea9d9 	.word	0x1ffea9d9
 80208bc:	1ffeaa0a 	.word	0x1ffeaa0a
 80208c0:	1ffeaa0c 	.word	0x1ffeaa0c
 80208c4:	1ffea9e8 	.word	0x1ffea9e8
 80208c8:	1ffea9c4 	.word	0x1ffea9c4
 80208cc:	1ffea9d4 	.word	0x1ffea9d4
 80208d0:	1ffea9ec 	.word	0x1ffea9ec
 80208d4:	54010008 	.word	0x54010008
 80208d8:	1ffea878 	.word	0x1ffea878
 80208dc:	54010910 	.word	0x54010910
 80208e0:	1ffea7b8 	.word	0x1ffea7b8
 80208e4:	1ffea7bc 	.word	0x1ffea7bc

080208e8 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 80208e8:	b480      	push	{r7}
 80208ea:	b085      	sub	sp, #20
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d062      	beq.n	80209bc <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 80208f6:	4b35      	ldr	r3, [pc, #212]	; (80209cc <COE_AddObjectToDic+0xe4>)
 80208f8:	681b      	ldr	r3, [r3, #0]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d10c      	bne.n	8020918 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 80208fe:	4a33      	ldr	r2, [pc, #204]	; (80209cc <COE_AddObjectToDic+0xe4>)
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8020904:	4b31      	ldr	r3, [pc, #196]	; (80209cc <COE_AddObjectToDic+0xe4>)
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	2200      	movs	r2, #0
 802090a:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 802090c:	4b2f      	ldr	r3, [pc, #188]	; (80209cc <COE_AddObjectToDic+0xe4>)
 802090e:	681b      	ldr	r3, [r3, #0]
 8020910:	2200      	movs	r2, #0
 8020912:	601a      	str	r2, [r3, #0]
            return 0;
 8020914:	2300      	movs	r3, #0
 8020916:	e052      	b.n	80209be <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8020918:	4b2c      	ldr	r3, [pc, #176]	; (80209cc <COE_AddObjectToDic+0xe4>)
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	891a      	ldrh	r2, [r3, #8]
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	891b      	ldrh	r3, [r3, #8]
 8020922:	429a      	cmp	r2, r3
 8020924:	d90f      	bls.n	8020946 <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	2200      	movs	r2, #0
 802092a:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 802092c:	4b27      	ldr	r3, [pc, #156]	; (80209cc <COE_AddObjectToDic+0xe4>)
 802092e:	681a      	ldr	r2, [r3, #0]
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8020934:	4b25      	ldr	r3, [pc, #148]	; (80209cc <COE_AddObjectToDic+0xe4>)
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	687a      	ldr	r2, [r7, #4]
 802093a:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 802093c:	4a23      	ldr	r2, [pc, #140]	; (80209cc <COE_AddObjectToDic+0xe4>)
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	6013      	str	r3, [r2, #0]
            return 0;
 8020942:	2300      	movs	r3, #0
 8020944:	e03b      	b.n	80209be <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8020946:	4b21      	ldr	r3, [pc, #132]	; (80209cc <COE_AddObjectToDic+0xe4>)
 8020948:	681b      	ldr	r3, [r3, #0]
 802094a:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 802094c:	e033      	b.n	80209b6 <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 802094e:	68fb      	ldr	r3, [r7, #12]
 8020950:	891a      	ldrh	r2, [r3, #8]
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	891b      	ldrh	r3, [r3, #8]
 8020956:	429a      	cmp	r2, r3
 8020958:	d101      	bne.n	802095e <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 802095a:	2301      	movs	r3, #1
 802095c:	e02f      	b.n	80209be <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	891a      	ldrh	r2, [r3, #8]
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	891b      	ldrh	r3, [r3, #8]
 8020966:	429a      	cmp	r2, r3
 8020968:	d913      	bls.n	8020992 <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	681a      	ldr	r2, [r3, #0]
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	68fa      	ldr	r2, [r7, #12]
 8020976:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	2b00      	cmp	r3, #0
 802097e:	d003      	beq.n	8020988 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	687a      	ldr	r2, [r7, #4]
 8020986:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 8020988:	68fb      	ldr	r3, [r7, #12]
 802098a:	687a      	ldr	r2, [r7, #4]
 802098c:	601a      	str	r2, [r3, #0]

                    return 0;
 802098e:	2300      	movs	r3, #0
 8020990:	e015      	b.n	80209be <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 8020992:	68fb      	ldr	r3, [r7, #12]
 8020994:	685b      	ldr	r3, [r3, #4]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d10a      	bne.n	80209b0 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 802099a:	68fb      	ldr	r3, [r7, #12]
 802099c:	687a      	ldr	r2, [r7, #4]
 802099e:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	68fa      	ldr	r2, [r7, #12]
 80209a4:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 80209a6:	687b      	ldr	r3, [r7, #4]
 80209a8:	2200      	movs	r2, #0
 80209aa:	605a      	str	r2, [r3, #4]
                    return 0;
 80209ac:	2300      	movs	r3, #0
 80209ae:	e006      	b.n	80209be <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	685b      	ldr	r3, [r3, #4]
 80209b4:	60fb      	str	r3, [r7, #12]
            return 0;
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
            while(pDicEntry != NULL)
 80209b6:	68fb      	ldr	r3, [r7, #12]
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d1c8      	bne.n	802094e <COE_AddObjectToDic+0x66>
                    pDicEntry = pDicEntry->pNext;
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 80209bc:	2301      	movs	r3, #1
}
 80209be:	4618      	mov	r0, r3
 80209c0:	3714      	adds	r7, #20
 80209c2:	46bd      	mov	sp, r7
 80209c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209c8:	4770      	bx	lr
 80209ca:	bf00      	nop
 80209cc:	1ffe957c 	.word	0x1ffe957c

080209d0 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 80209d0:	b480      	push	{r7}
 80209d2:	b087      	sub	sp, #28
 80209d4:	af00      	add	r7, sp, #0
 80209d6:	4603      	mov	r3, r0
 80209d8:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 80209da:	4b1c      	ldr	r3, [pc, #112]	; (8020a4c <COE_RemoveDicEntry+0x7c>)
 80209dc:	681b      	ldr	r3, [r3, #0]
 80209de:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 80209e0:	e02b      	b.n	8020a3a <COE_RemoveDicEntry+0x6a>
    {
        if(pDicEntry->Index == index)
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	891b      	ldrh	r3, [r3, #8]
 80209e6:	88fa      	ldrh	r2, [r7, #6]
 80209e8:	429a      	cmp	r2, r3
 80209ea:	d123      	bne.n	8020a34 <COE_RemoveDicEntry+0x64>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 80209ec:	697b      	ldr	r3, [r7, #20]
 80209ee:	681b      	ldr	r3, [r3, #0]
 80209f0:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 80209f2:	697b      	ldr	r3, [r7, #20]
 80209f4:	685b      	ldr	r3, [r3, #4]
 80209f6:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 80209f8:	693b      	ldr	r3, [r7, #16]
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d002      	beq.n	8020a04 <COE_RemoveDicEntry+0x34>
            {
                pPrevEntry->pNext = pNextEntry;
 80209fe:	693b      	ldr	r3, [r7, #16]
 8020a00:	68fa      	ldr	r2, [r7, #12]
 8020a02:	605a      	str	r2, [r3, #4]
            }

            if(pNextEntry != NULL)
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d002      	beq.n	8020a10 <COE_RemoveDicEntry+0x40>
            {
                pNextEntry->pPrev = pPrevEntry;
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	693a      	ldr	r2, [r7, #16]
 8020a0e:	601a      	str	r2, [r3, #0]
            }

            pDicEntry->pPrev = NULL;
 8020a10:	697b      	ldr	r3, [r7, #20]
 8020a12:	2200      	movs	r2, #0
 8020a14:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 8020a16:	697b      	ldr	r3, [r7, #20]
 8020a18:	2200      	movs	r2, #0
 8020a1a:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8020a1c:	697b      	ldr	r3, [r7, #20]
 8020a1e:	891a      	ldrh	r2, [r3, #8]
 8020a20:	4b0a      	ldr	r3, [pc, #40]	; (8020a4c <COE_RemoveDicEntry+0x7c>)
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	891b      	ldrh	r3, [r3, #8]
 8020a26:	429a      	cmp	r2, r3
 8020a28:	d103      	bne.n	8020a32 <COE_RemoveDicEntry+0x62>
            {
                ObjDicList = pNextEntry;
 8020a2a:	4a08      	ldr	r2, [pc, #32]	; (8020a4c <COE_RemoveDicEntry+0x7c>)
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	6013      	str	r3, [r2, #0]
            }
            return;
 8020a30:	e006      	b.n	8020a40 <COE_RemoveDicEntry+0x70>
 8020a32:	e005      	b.n	8020a40 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8020a34:	697b      	ldr	r3, [r7, #20]
 8020a36:	685b      	ldr	r3, [r3, #4]
 8020a38:	617b      	str	r3, [r7, #20]
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;

    while(pDicEntry != NULL)
 8020a3a:	697b      	ldr	r3, [r7, #20]
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d1d0      	bne.n	80209e2 <COE_RemoveDicEntry+0x12>
            return;
        }

        pDicEntry = pDicEntry->pNext;
    }
}
 8020a40:	371c      	adds	r7, #28
 8020a42:	46bd      	mov	sp, r7
 8020a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a48:	4770      	bx	lr
 8020a4a:	bf00      	nop
 8020a4c:	1ffe957c 	.word	0x1ffe957c

08020a50 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b082      	sub	sp, #8
 8020a54:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 8020a56:	4b0c      	ldr	r3, [pc, #48]	; (8020a88 <COE_ClearObjDictionary+0x38>)
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 8020a60:	e009      	b.n	8020a76 <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	891b      	ldrh	r3, [r3, #8]
 8020a66:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	685b      	ldr	r3, [r3, #4]
 8020a6c:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 8020a6e:	887b      	ldrh	r3, [r7, #2]
 8020a70:	4618      	mov	r0, r3
 8020a72:	f7ff ffad 	bl	80209d0 <COE_RemoveDicEntry>
void COE_ClearObjDictionary(void)
{
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
    UINT16 Index = 0;

    while(pObjEntry != NULL)
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d1f2      	bne.n	8020a62 <COE_ClearObjDictionary+0x12>
        Index = pObjEntry->Index;
        pObjEntry = pObjEntry->pNext;

        COE_RemoveDicEntry(Index);
    }
    ObjDicList = NULL;
 8020a7c:	4b02      	ldr	r3, [pc, #8]	; (8020a88 <COE_ClearObjDictionary+0x38>)
 8020a7e:	2200      	movs	r2, #0
 8020a80:	601a      	str	r2, [r3, #0]
}
 8020a82:	3708      	adds	r7, #8
 8020a84:	46bd      	mov	sp, r7
 8020a86:	bd80      	pop	{r7, pc}
 8020a88:	1ffe957c 	.word	0x1ffe957c

08020a8c <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 8020a8c:	b580      	push	{r7, lr}
 8020a8e:	b084      	sub	sp, #16
 8020a90:	af00      	add	r7, sp, #0
 8020a92:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8020a94:	2300      	movs	r3, #0
 8020a96:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 8020a98:	687b      	ldr	r3, [r7, #4]
 8020a9a:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 8020a9c:	e00c      	b.n	8020ab8 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 8020a9e:	68b8      	ldr	r0, [r7, #8]
 8020aa0:	f7ff ff22 	bl	80208e8 <COE_AddObjectToDic>
 8020aa4:	4603      	mov	r3, r0
 8020aa6:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 8020aa8:	89fb      	ldrh	r3, [r7, #14]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d001      	beq.n	8020ab2 <AddObjectsToObjDictionary+0x26>
        {
            return result;
 8020aae:	89fb      	ldrh	r3, [r7, #14]
 8020ab0:	e009      	b.n	8020ac6 <AddObjectsToObjDictionary+0x3a>
        }

        pEntry++;
 8020ab2:	68bb      	ldr	r3, [r7, #8]
 8020ab4:	3328      	adds	r3, #40	; 0x28
 8020ab6:	60bb      	str	r3, [r7, #8]
UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
    UINT16 result = 0;
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;

    while(pEntry->Index != 0xFFFF)
 8020ab8:	68bb      	ldr	r3, [r7, #8]
 8020aba:	891b      	ldrh	r3, [r3, #8]
 8020abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020ac0:	4293      	cmp	r3, r2
 8020ac2:	d1ec      	bne.n	8020a9e <AddObjectsToObjDictionary+0x12>
        }

        pEntry++;
    }

    return result;
 8020ac4:	89fb      	ldrh	r3, [r7, #14]

}
 8020ac6:	4618      	mov	r0, r3
 8020ac8:	3710      	adds	r7, #16
 8020aca:	46bd      	mov	sp, r7
 8020acc:	bd80      	pop	{r7, pc}
 8020ace:	bf00      	nop

08020ad0 <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	b082      	sub	sp, #8
 8020ad4:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 8020ada:	4b0b      	ldr	r3, [pc, #44]	; (8020b08 <COE_ObjDictionaryInit+0x38>)
 8020adc:	2200      	movs	r2, #0
 8020ade:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8020ae0:	480a      	ldr	r0, [pc, #40]	; (8020b0c <COE_ObjDictionaryInit+0x3c>)
 8020ae2:	f7ff ffd3 	bl	8020a8c <AddObjectsToObjDictionary>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 8020aea:	88fb      	ldrh	r3, [r7, #6]
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d001      	beq.n	8020af4 <COE_ObjDictionaryInit+0x24>
    {
        return result;
 8020af0:	88fb      	ldrh	r3, [r7, #6]
 8020af2:	e005      	b.n	8020b00 <COE_ObjDictionaryInit+0x30>
    }
    
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8020af4:	4806      	ldr	r0, [pc, #24]	; (8020b10 <COE_ObjDictionaryInit+0x40>)
 8020af6:	f7ff ffc9 	bl	8020a8c <AddObjectsToObjDictionary>
 8020afa:	4603      	mov	r3, r0
 8020afc:	80fb      	strh	r3, [r7, #6]
    }



    return result;
 8020afe:	88fb      	ldrh	r3, [r7, #6]
}
 8020b00:	4618      	mov	r0, r3
 8020b02:	3708      	adds	r7, #8
 8020b04:	46bd      	mov	sp, r7
 8020b06:	bd80      	pop	{r7, pc}
 8020b08:	1ffe957c 	.word	0x1ffe957c
 8020b0c:	1ffe8a04 	.word	0x1ffe8a04
 8020b10:	1ffe8890 	.word	0x1ffe8890

08020b14 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8020b14:	b5b0      	push	{r4, r5, r7, lr}
 8020b16:	b084      	sub	sp, #16
 8020b18:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 8020b1a:	2300      	movs	r3, #0
 8020b1c:	71fb      	strb	r3, [r7, #7]
     
    if(pSdoPendFunc != NULL)
 8020b1e:	4b2f      	ldr	r3, [pc, #188]	; (8020bdc <COE_Main+0xc8>)
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d057      	beq.n	8020bd6 <COE_Main+0xc2>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8020b26:	4b2d      	ldr	r3, [pc, #180]	; (8020bdc <COE_Main+0xc8>)
 8020b28:	681c      	ldr	r4, [r3, #0]
 8020b2a:	4b2d      	ldr	r3, [pc, #180]	; (8020be0 <COE_Main+0xcc>)
 8020b2c:	8818      	ldrh	r0, [r3, #0]
 8020b2e:	4b2d      	ldr	r3, [pc, #180]	; (8020be4 <COE_Main+0xd0>)
 8020b30:	7819      	ldrb	r1, [r3, #0]
 8020b32:	4b2d      	ldr	r3, [pc, #180]	; (8020be8 <COE_Main+0xd4>)
 8020b34:	681a      	ldr	r2, [r3, #0]
 8020b36:	4b2d      	ldr	r3, [pc, #180]	; (8020bec <COE_Main+0xd8>)
 8020b38:	681d      	ldr	r5, [r3, #0]
 8020b3a:	4b2d      	ldr	r3, [pc, #180]	; (8020bf0 <COE_Main+0xdc>)
 8020b3c:	781b      	ldrb	r3, [r3, #0]
 8020b3e:	9300      	str	r3, [sp, #0]
 8020b40:	462b      	mov	r3, r5
 8020b42:	47a0      	blx	r4
 8020b44:	4603      	mov	r3, r0
 8020b46:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8020b48:	79fb      	ldrb	r3, [r7, #7]
 8020b4a:	2bff      	cmp	r3, #255	; 0xff
 8020b4c:	d043      	beq.n	8020bd6 <COE_Main+0xc2>
        {
            switch(u8PendingSdo)
 8020b4e:	4b29      	ldr	r3, [pc, #164]	; (8020bf4 <COE_Main+0xe0>)
 8020b50:	781b      	ldrb	r3, [r3, #0]
 8020b52:	3b01      	subs	r3, #1
 8020b54:	2b03      	cmp	r3, #3
 8020b56:	d829      	bhi.n	8020bac <COE_Main+0x98>
 8020b58:	a201      	add	r2, pc, #4	; (adr r2, 8020b60 <COE_Main+0x4c>)
 8020b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b5e:	bf00      	nop
 8020b60:	08020b89 	.word	0x08020b89
 8020b64:	08020b71 	.word	0x08020b71
 8020b68:	08020b97 	.word	0x08020b97
 8020b6c:	08020b97 	.word	0x08020b97
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 8020b70:	4b21      	ldr	r3, [pc, #132]	; (8020bf8 <COE_Main+0xe4>)
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	d007      	beq.n	8020b88 <COE_Main+0x74>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8020b78:	4b1f      	ldr	r3, [pc, #124]	; (8020bf8 <COE_Main+0xe4>)
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	f00a f833 	bl	802abe8 <free>
                        pSdoSegData = NULL;
 8020b82:	4b1d      	ldr	r3, [pc, #116]	; (8020bf8 <COE_Main+0xe4>)
 8020b84:	2200      	movs	r2, #0
 8020b86:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8020b88:	79fb      	ldrb	r3, [r7, #7]
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	2100      	movs	r1, #0
 8020b8e:	2200      	movs	r2, #0
 8020b90:	f005 fe34 	bl	80267fc <SDOS_SdoRes>
                break;
 8020b94:	e00a      	b.n	8020bac <COE_Main+0x98>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 8020b96:	4b14      	ldr	r3, [pc, #80]	; (8020be8 <COE_Main+0xd4>)
 8020b98:	681a      	ldr	r2, [r3, #0]
 8020b9a:	4b14      	ldr	r3, [pc, #80]	; (8020bec <COE_Main+0xd8>)
 8020b9c:	681b      	ldr	r3, [r3, #0]
 8020b9e:	79f9      	ldrb	r1, [r7, #7]
 8020ba0:	4608      	mov	r0, r1
 8020ba2:	4611      	mov	r1, r2
 8020ba4:	461a      	mov	r2, r3
 8020ba6:	f005 fe29 	bl	80267fc <SDOS_SdoRes>
                    break;
 8020baa:	bf00      	nop

            }

            u8PendingSdo = 0;
 8020bac:	4b11      	ldr	r3, [pc, #68]	; (8020bf4 <COE_Main+0xe0>)
 8020bae:	2200      	movs	r2, #0
 8020bb0:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 8020bb2:	4b0b      	ldr	r3, [pc, #44]	; (8020be0 <COE_Main+0xcc>)
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 8020bb8:	4b0a      	ldr	r3, [pc, #40]	; (8020be4 <COE_Main+0xd0>)
 8020bba:	2200      	movs	r2, #0
 8020bbc:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 8020bbe:	4b0a      	ldr	r3, [pc, #40]	; (8020be8 <COE_Main+0xd4>)
 8020bc0:	2200      	movs	r2, #0
 8020bc2:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8020bc4:	4b09      	ldr	r3, [pc, #36]	; (8020bec <COE_Main+0xd8>)
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8020bca:	4b09      	ldr	r3, [pc, #36]	; (8020bf0 <COE_Main+0xdc>)
 8020bcc:	2200      	movs	r2, #0
 8020bce:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 8020bd0:	4b02      	ldr	r3, [pc, #8]	; (8020bdc <COE_Main+0xc8>)
 8020bd2:	2200      	movs	r2, #0
 8020bd4:	601a      	str	r2, [r3, #0]
        }
    }
}
 8020bd6:	3708      	adds	r7, #8
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	bdb0      	pop	{r4, r5, r7, pc}
 8020bdc:	1ffea9d4 	.word	0x1ffea9d4
 8020be0:	1ffeaa0a 	.word	0x1ffeaa0a
 8020be4:	1ffeaa0c 	.word	0x1ffeaa0c
 8020be8:	1ffea9e8 	.word	0x1ffea9e8
 8020bec:	1ffea9c4 	.word	0x1ffea9c4
 8020bf0:	1ffea9d9 	.word	0x1ffea9d9
 8020bf4:	1ffea9d8 	.word	0x1ffea9d8
 8020bf8:	1ffea9ec 	.word	0x1ffea9ec

08020bfc <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 8020bfc:	b480      	push	{r7}
 8020bfe:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8020c00:	4b04      	ldr	r3, [pc, #16]	; (8020c14 <XMC_ECAT_GetALEventRegister+0x18>)
 8020c02:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8020c06:	b29b      	uxth	r3, r3
}
 8020c08:	4618      	mov	r0, r3
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c10:	4770      	bx	lr
 8020c12:	bf00      	nop
 8020c14:	54010000 	.word	0x54010000

08020c18 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	b082      	sub	sp, #8
 8020c1c:	af00      	add	r7, sp, #0
 8020c1e:	6078      	str	r0, [r7, #4]
 8020c20:	460b      	mov	r3, r1
 8020c22:	807b      	strh	r3, [r7, #2]
 8020c24:	4613      	mov	r3, r2
 8020c26:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8020c28:	887b      	ldrh	r3, [r7, #2]
 8020c2a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020c2e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020c32:	883a      	ldrh	r2, [r7, #0]
 8020c34:	6878      	ldr	r0, [r7, #4]
 8020c36:	4619      	mov	r1, r3
 8020c38:	f009 ffee 	bl	802ac18 <memcpy>
}
 8020c3c:	3708      	adds	r7, #8
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	bd80      	pop	{r7, pc}
 8020c42:	bf00      	nop

08020c44 <HW_EscReadIsr>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscReadIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b082      	sub	sp, #8
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
 8020c4c:	460b      	mov	r3, r1
 8020c4e:	807b      	strh	r3, [r7, #2]
 8020c50:	4613      	mov	r3, r2
 8020c52:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8020c54:	887a      	ldrh	r2, [r7, #2]
 8020c56:	883b      	ldrh	r3, [r7, #0]
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	4611      	mov	r1, r2
 8020c5c:	461a      	mov	r2, r3
 8020c5e:	f7ff ffdb 	bl	8020c18 <HW_EscRead>
}
 8020c62:	3708      	adds	r7, #8
 8020c64:	46bd      	mov	sp, r7
 8020c66:	bd80      	pop	{r7, pc}

08020c68 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	b082      	sub	sp, #8
 8020c6c:	af00      	add	r7, sp, #0
 8020c6e:	6078      	str	r0, [r7, #4]
 8020c70:	460b      	mov	r3, r1
 8020c72:	807b      	strh	r3, [r7, #2]
 8020c74:	4613      	mov	r3, r2
 8020c76:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8020c78:	887b      	ldrh	r3, [r7, #2]
 8020c7a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020c7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020c82:	883a      	ldrh	r2, [r7, #0]
 8020c84:	4618      	mov	r0, r3
 8020c86:	6879      	ldr	r1, [r7, #4]
 8020c88:	f009 ffc6 	bl	802ac18 <memcpy>
}
 8020c8c:	3708      	adds	r7, #8
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd80      	pop	{r7, pc}
 8020c92:	bf00      	nop

08020c94 <HW_EscWriteIsr>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWriteIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020c94:	b580      	push	{r7, lr}
 8020c96:	b082      	sub	sp, #8
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	6078      	str	r0, [r7, #4]
 8020c9c:	460b      	mov	r3, r1
 8020c9e:	807b      	strh	r3, [r7, #2]
 8020ca0:	4613      	mov	r3, r2
 8020ca2:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 8020ca4:	887a      	ldrh	r2, [r7, #2]
 8020ca6:	883b      	ldrh	r3, [r7, #0]
 8020ca8:	6878      	ldr	r0, [r7, #4]
 8020caa:	4611      	mov	r1, r2
 8020cac:	461a      	mov	r2, r3
 8020cae:	f7ff ffdb 	bl	8020c68 <HW_EscWrite>
}
 8020cb2:	3708      	adds	r7, #8
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	bd80      	pop	{r7, pc}

08020cb8 <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8020cbc:	f7ff ff9e 	bl	8020bfc <XMC_ECAT_GetALEventRegister>
 8020cc0:	4603      	mov	r3, r0
}
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	bd80      	pop	{r7, pc}
 8020cc6:	bf00      	nop

08020cc8 <HW_GetALEventRegister_Isr>:
 * Special function for ESC access from interrupt service routines if required, otherwise this function is defined as
 * HW_GetALEventRegister.
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister_Isr(void)
{
 8020cc8:	b580      	push	{r7, lr}
 8020cca:	af00      	add	r7, sp, #0
  return HW_GetALEventRegister();
 8020ccc:	f7ff fff4 	bl	8020cb8 <HW_GetALEventRegister>
 8020cd0:	4603      	mov	r3, r0
}
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	bd80      	pop	{r7, pc}
 8020cd6:	bf00      	nop

08020cd8 <PDO_InputMapping>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8020cd8:	b580      	push	{r7, lr}
 8020cda:	b082      	sub	sp, #8
 8020cdc:	af00      	add	r7, sp, #0

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    /*ECATCHANGE_START(V5.12) ECAT1*/
    UINT32 u32TimeValue = 0;
 8020cde:	2300      	movs	r3, #0
 8020ce0:	607b      	str	r3, [r7, #4]
    UINT16 ALEvent = HW_GetALEventRegister_Isr();
 8020ce2:	f7ff fff1 	bl	8020cc8 <HW_GetALEventRegister_Isr>
 8020ce6:	4603      	mov	r3, r0
 8020ce8:	807b      	strh	r3, [r7, #2]
    ALEvent = SWAPWORD(ALEvent);


    if (MEASUREMENT_ACTIVE)
 8020cea:	4b1b      	ldr	r3, [pc, #108]	; (8020d58 <PDO_InputMapping+0x80>)
 8020cec:	8b9b      	ldrh	r3, [r3, #28]
 8020cee:	f003 0301 	and.w	r3, r3, #1
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	d105      	bne.n	8020d02 <PDO_InputMapping+0x2a>
 8020cf6:	4b19      	ldr	r3, [pc, #100]	; (8020d5c <PDO_InputMapping+0x84>)
 8020cf8:	8b9b      	ldrh	r3, [r3, #28]
 8020cfa:	f003 0301 	and.w	r3, r3, #1
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d003      	beq.n	8020d0a <PDO_InputMapping+0x32>
    {
        u32TimeValue = GetSystemTimeDelay(0);
 8020d02:	2000      	movs	r0, #0
 8020d04:	f000 f946 	bl	8020f94 <GetSystemTimeDelay>
 8020d08:	6078      	str	r0, [r7, #4]




  
    APPL_InputMapping((UINT16*)aPdInputData);
 8020d0a:	4815      	ldr	r0, [pc, #84]	; (8020d60 <PDO_InputMapping+0x88>)
 8020d0c:	f7ff fc38 	bl	8020580 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 8020d10:	4b14      	ldr	r3, [pc, #80]	; (8020d64 <PDO_InputMapping+0x8c>)
 8020d12:	881a      	ldrh	r2, [r3, #0]
 8020d14:	4b14      	ldr	r3, [pc, #80]	; (8020d68 <PDO_InputMapping+0x90>)
 8020d16:	881b      	ldrh	r3, [r3, #0]
 8020d18:	4811      	ldr	r0, [pc, #68]	; (8020d60 <PDO_InputMapping+0x88>)
 8020d1a:	4611      	mov	r1, r2
 8020d1c:	461a      	mov	r2, r3
 8020d1e:	f7ff ffb9 	bl	8020c94 <HW_EscWriteIsr>
    

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    /*ECATCHANGE_START(V5.12) ECAT1*/

    if (MEASUREMENT_ACTIVE)
 8020d22:	4b0d      	ldr	r3, [pc, #52]	; (8020d58 <PDO_InputMapping+0x80>)
 8020d24:	8b9b      	ldrh	r3, [r3, #28]
 8020d26:	f003 0301 	and.w	r3, r3, #1
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	d105      	bne.n	8020d3a <PDO_InputMapping+0x62>
 8020d2e:	4b0b      	ldr	r3, [pc, #44]	; (8020d5c <PDO_InputMapping+0x84>)
 8020d30:	8b9b      	ldrh	r3, [r3, #28]
 8020d32:	f003 0301 	and.w	r3, r3, #1
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d00b      	beq.n	8020d52 <PDO_InputMapping+0x7a>
    {
        u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 8020d3a:	6878      	ldr	r0, [r7, #4]
 8020d3c:	f000 f92a 	bl	8020f94 <GetSystemTimeDelay>
 8020d40:	6078      	str	r0, [r7, #4]

#if (PD_INPUT_CALC_AND_COPY_TIME == 0)
        if (sSyncManInPar.u32CalcAndCopyTime < u32TimeValue)
 8020d42:	4b06      	ldr	r3, [pc, #24]	; (8020d5c <PDO_InputMapping+0x84>)
 8020d44:	695a      	ldr	r2, [r3, #20]
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	429a      	cmp	r2, r3
 8020d4a:	d202      	bcs.n	8020d52 <PDO_InputMapping+0x7a>
        {
            sSyncManInPar.u32CalcAndCopyTime = u32TimeValue;
 8020d4c:	4a03      	ldr	r2, [pc, #12]	; (8020d5c <PDO_InputMapping+0x84>)
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	6153      	str	r3, [r2, #20]
    }

    /*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0)) */

}
 8020d52:	3708      	adds	r7, #8
 8020d54:	46bd      	mov	sp, r7
 8020d56:	bd80      	pop	{r7, pc}
 8020d58:	1ffea974 	.word	0x1ffea974
 8020d5c:	1ffea930 	.word	0x1ffea930
 8020d60:	1ffea808 	.word	0x1ffea808
 8020d64:	1ffea898 	.word	0x1ffea898
 8020d68:	1ffea87e 	.word	0x1ffea87e

08020d6c <PDO_OutputMapping>:
/**
\brief    This function will copies the outputs from the ESC memory to the local memory.
        This function is only called in case of an SM2 (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8020d6c:	b580      	push	{r7, lr}
 8020d6e:	b082      	sub	sp, #8
 8020d70:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.12) ECAT1*/
   UINT32 u32TimeValue = 0;
 8020d72:	2300      	movs	r3, #0
 8020d74:	607b      	str	r3, [r7, #4]
   if (MEASUREMENT_ACTIVE)
 8020d76:	4b21      	ldr	r3, [pc, #132]	; (8020dfc <PDO_OutputMapping+0x90>)
 8020d78:	8b9b      	ldrh	r3, [r3, #28]
 8020d7a:	f003 0301 	and.w	r3, r3, #1
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d105      	bne.n	8020d8e <PDO_OutputMapping+0x22>
 8020d82:	4b1f      	ldr	r3, [pc, #124]	; (8020e00 <PDO_OutputMapping+0x94>)
 8020d84:	8b9b      	ldrh	r3, [r3, #28]
 8020d86:	f003 0301 	and.w	r3, r3, #1
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d00e      	beq.n	8020dac <PDO_OutputMapping+0x40>
   {
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
      u32TimeValue = GetSystemTimeDelay(0);
 8020d8e:	2000      	movs	r0, #0
 8020d90:	f000 f900 	bl	8020f94 <GetSystemTimeDelay>
 8020d94:	6078      	str	r0, [r7, #4]
      u32MinCycleTimeStartValue = u32TimeValue;
 8020d96:	4a1b      	ldr	r2, [pc, #108]	; (8020e04 <PDO_OutputMapping+0x98>)
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	6013      	str	r3, [r2, #0]

      bMinCycleTimeMeasurementStarted = TRUE;
 8020d9c:	4b1a      	ldr	r3, [pc, #104]	; (8020e08 <PDO_OutputMapping+0x9c>)
 8020d9e:	2201      	movs	r2, #1
 8020da0:	701a      	strb	r2, [r3, #0]
      u32MinCycleTimeValue = 0;
 8020da2:	4b1a      	ldr	r3, [pc, #104]	; (8020e0c <PDO_OutputMapping+0xa0>)
 8020da4:	2200      	movs	r2, #0
 8020da6:	601a      	str	r2, [r3, #0]

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */

      HandleCycleTimeMeasurement();
 8020da8:	f000 f8b4 	bl	8020f14 <HandleCycleTimeMeasurement>

   }
/*ECATCHANGE_END(V5.12) ECAT1*/

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 8020dac:	4b18      	ldr	r3, [pc, #96]	; (8020e10 <PDO_OutputMapping+0xa4>)
 8020dae:	881a      	ldrh	r2, [r3, #0]
 8020db0:	4b18      	ldr	r3, [pc, #96]	; (8020e14 <PDO_OutputMapping+0xa8>)
 8020db2:	881b      	ldrh	r3, [r3, #0]
 8020db4:	4818      	ldr	r0, [pc, #96]	; (8020e18 <PDO_OutputMapping+0xac>)
 8020db6:	4611      	mov	r1, r2
 8020db8:	461a      	mov	r2, r3
 8020dba:	f7ff ff43 	bl	8020c44 <HW_EscReadIsr>
    APPL_OutputMapping((UINT16*) aPdOutputData);
 8020dbe:	4816      	ldr	r0, [pc, #88]	; (8020e18 <PDO_OutputMapping+0xac>)
 8020dc0:	f7ff fbec 	bl	802059c <APPL_OutputMapping>


/*ECATCHANGE_START(V5.12) ECAT1*/
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
    if (MEASUREMENT_ACTIVE)
 8020dc4:	4b0d      	ldr	r3, [pc, #52]	; (8020dfc <PDO_OutputMapping+0x90>)
 8020dc6:	8b9b      	ldrh	r3, [r3, #28]
 8020dc8:	f003 0301 	and.w	r3, r3, #1
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	d105      	bne.n	8020ddc <PDO_OutputMapping+0x70>
 8020dd0:	4b0b      	ldr	r3, [pc, #44]	; (8020e00 <PDO_OutputMapping+0x94>)
 8020dd2:	8b9b      	ldrh	r3, [r3, #28]
 8020dd4:	f003 0301 	and.w	r3, r3, #1
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d00b      	beq.n	8020df4 <PDO_OutputMapping+0x88>
    {
       u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 8020ddc:	6878      	ldr	r0, [r7, #4]
 8020dde:	f000 f8d9 	bl	8020f94 <GetSystemTimeDelay>
 8020de2:	6078      	str	r0, [r7, #4]

#if (PD_OUTPUT_CALC_AND_COPY_TIME == 0)
       if (sSyncManOutPar.u32CalcAndCopyTime < u32TimeValue)
 8020de4:	4b05      	ldr	r3, [pc, #20]	; (8020dfc <PDO_OutputMapping+0x90>)
 8020de6:	695a      	ldr	r2, [r3, #20]
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	429a      	cmp	r2, r3
 8020dec:	d202      	bcs.n	8020df4 <PDO_OutputMapping+0x88>
       {
          sSyncManOutPar.u32CalcAndCopyTime = u32TimeValue;
 8020dee:	4a03      	ldr	r2, [pc, #12]	; (8020dfc <PDO_OutputMapping+0x90>)
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	6153      	str	r3, [r2, #20]
       u32MinCycleTimeValue = u32TimeValue;
#endif
    }
#endif /* #if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */
/*ECATCHANGE_END(V5.12) ECAT1*/
}
 8020df4:	3708      	adds	r7, #8
 8020df6:	46bd      	mov	sp, r7
 8020df8:	bd80      	pop	{r7, pc}
 8020dfa:	bf00      	nop
 8020dfc:	1ffea974 	.word	0x1ffea974
 8020e00:	1ffea930 	.word	0x1ffea930
 8020e04:	1ffea804 	.word	0x1ffea804
 8020e08:	1ffea7c4 	.word	0x1ffea7c4
 8020e0c:	1ffea7e0 	.word	0x1ffea7e0
 8020e10:	1ffea85e 	.word	0x1ffea85e
 8020e14:	1ffea852 	.word	0x1ffea852
 8020e18:	1ffea7e4 	.word	0x1ffea7e4

08020e1c <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	af00      	add	r7, sp, #0

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 8020e20:	4b32      	ldr	r3, [pc, #200]	; (8020eec <ECAT_CheckTimer+0xd0>)
 8020e22:	781b      	ldrb	r3, [r3, #0]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d00d      	beq.n	8020e44 <ECAT_CheckTimer+0x28>
 8020e28:	4b31      	ldr	r3, [pc, #196]	; (8020ef0 <ECAT_CheckTimer+0xd4>)
 8020e2a:	881b      	ldrh	r3, [r3, #0]
 8020e2c:	b21b      	sxth	r3, r3
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	dd08      	ble.n	8020e44 <ECAT_CheckTimer+0x28>
    {
        EsmTimeoutCounter--;
 8020e32:	4b2f      	ldr	r3, [pc, #188]	; (8020ef0 <ECAT_CheckTimer+0xd4>)
 8020e34:	881b      	ldrh	r3, [r3, #0]
 8020e36:	b29b      	uxth	r3, r3
 8020e38:	b29b      	uxth	r3, r3
 8020e3a:	3b01      	subs	r3, #1
 8020e3c:	b29b      	uxth	r3, r3
 8020e3e:	b29a      	uxth	r2, r3
 8020e40:	4b2b      	ldr	r3, [pc, #172]	; (8020ef0 <ECAT_CheckTimer+0xd4>)
 8020e42:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 8020e44:	f002 fcbc 	bl	80237c0 <DC_CheckWatchdog>

/*ECATCHANGE_START(V5.12) EEPROM3*/

    if (u16EepromStoreTimeoutValue > 0)
 8020e48:	4b2a      	ldr	r3, [pc, #168]	; (8020ef4 <ECAT_CheckTimer+0xd8>)
 8020e4a:	881b      	ldrh	r3, [r3, #0]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d018      	beq.n	8020e82 <ECAT_CheckTimer+0x66>
    {
        u16EepromStoreTimeoutCounter++;
 8020e50:	4b29      	ldr	r3, [pc, #164]	; (8020ef8 <ECAT_CheckTimer+0xdc>)
 8020e52:	881b      	ldrh	r3, [r3, #0]
 8020e54:	3301      	adds	r3, #1
 8020e56:	b29a      	uxth	r2, r3
 8020e58:	4b27      	ldr	r3, [pc, #156]	; (8020ef8 <ECAT_CheckTimer+0xdc>)
 8020e5a:	801a      	strh	r2, [r3, #0]

        if (u16EepromStoreTimeoutValue <= u16EepromStoreTimeoutCounter)
 8020e5c:	4b25      	ldr	r3, [pc, #148]	; (8020ef4 <ECAT_CheckTimer+0xd8>)
 8020e5e:	881a      	ldrh	r2, [r3, #0]
 8020e60:	4b25      	ldr	r3, [pc, #148]	; (8020ef8 <ECAT_CheckTimer+0xdc>)
 8020e62:	881b      	ldrh	r3, [r3, #0]
 8020e64:	429a      	cmp	r2, r3
 8020e66:	d80c      	bhi.n	8020e82 <ECAT_CheckTimer+0x66>
        {
            u16EepromStoreTimeoutValue = 0;
 8020e68:	4b22      	ldr	r3, [pc, #136]	; (8020ef4 <ECAT_CheckTimer+0xd8>)
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	801a      	strh	r2, [r3, #0]
            u16EepromStoreTimeoutCounter = 0;
 8020e6e:	4b22      	ldr	r3, [pc, #136]	; (8020ef8 <ECAT_CheckTimer+0xdc>)
 8020e70:	2200      	movs	r2, #0
 8020e72:	801a      	strh	r2, [r3, #0]

            if (pAPPL_EEPROM_Store != NULL)
 8020e74:	4b21      	ldr	r3, [pc, #132]	; (8020efc <ECAT_CheckTimer+0xe0>)
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d002      	beq.n	8020e82 <ECAT_CheckTimer+0x66>
            {
                pAPPL_EEPROM_Store();
 8020e7c:	4b1f      	ldr	r3, [pc, #124]	; (8020efc <ECAT_CheckTimer+0xe0>)
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	4798      	blx	r3


/*ECATCHANGE_START(V5.12) COE4*/

    /* Increment the counter every ms between two updates based on the system time (32Bit overrun is handled in COE_SyncTimeStamp) */
    if (!b32BitDc || ((u64Timestamp & 0xFFFFFFFF) <= 4293000000))
 8020e82:	4b1f      	ldr	r3, [pc, #124]	; (8020f00 <ECAT_CheckTimer+0xe4>)
 8020e84:	781b      	ldrb	r3, [r3, #0]
 8020e86:	f083 0301 	eor.w	r3, r3, #1
 8020e8a:	b2db      	uxtb	r3, r3
 8020e8c:	2b00      	cmp	r3, #0
 8020e8e:	d111      	bne.n	8020eb4 <ECAT_CheckTimer+0x98>
 8020e90:	4b1c      	ldr	r3, [pc, #112]	; (8020f04 <ECAT_CheckTimer+0xe8>)
 8020e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e96:	f04f 30ff 	mov.w	r0, #4294967295
 8020e9a:	f04f 0100 	mov.w	r1, #0
 8020e9e:	ea02 0200 	and.w	r2, r2, r0
 8020ea2:	ea03 0301 	and.w	r3, r3, r1
 8020ea6:	4818      	ldr	r0, [pc, #96]	; (8020f08 <ECAT_CheckTimer+0xec>)
 8020ea8:	f04f 0100 	mov.w	r1, #0
 8020eac:	4299      	cmp	r1, r3
 8020eae:	bf08      	it	eq
 8020eb0:	4290      	cmpeq	r0, r2
 8020eb2:	d30c      	bcc.n	8020ece <ECAT_CheckTimer+0xb2>
    {

        /* the timestamp is stored in ns */
        u64Timestamp = u64Timestamp + 1000000;
 8020eb4:	4b13      	ldr	r3, [pc, #76]	; (8020f04 <ECAT_CheckTimer+0xe8>)
 8020eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eba:	4814      	ldr	r0, [pc, #80]	; (8020f0c <ECAT_CheckTimer+0xf0>)
 8020ebc:	f04f 0100 	mov.w	r1, #0
 8020ec0:	1812      	adds	r2, r2, r0
 8020ec2:	eb43 0301 	adc.w	r3, r3, r1
 8020ec6:	490f      	ldr	r1, [pc, #60]	; (8020f04 <ECAT_CheckTimer+0xe8>)
 8020ec8:	e9c1 2300 	strd	r2, r3, [r1]
 8020ecc:	e007      	b.n	8020ede <ECAT_CheckTimer+0xc2>

    }
    else if(b32BitDc)
 8020ece:	4b0c      	ldr	r3, [pc, #48]	; (8020f00 <ECAT_CheckTimer+0xe4>)
 8020ed0:	781b      	ldrb	r3, [r3, #0]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d003      	beq.n	8020ede <ECAT_CheckTimer+0xc2>
    {
        /* in case of a 32Bit DC and almost expired time stamp check for a DC overrun*/
        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8020ed6:	4b0e      	ldr	r3, [pc, #56]	; (8020f10 <ECAT_CheckTimer+0xf4>)
 8020ed8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8020edc:	601a      	str	r2, [r3, #0]
    }

    u32CheckForDcOverrunCnt++;
 8020ede:	4b0c      	ldr	r3, [pc, #48]	; (8020f10 <ECAT_CheckTimer+0xf4>)
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	3301      	adds	r3, #1
 8020ee4:	4a0a      	ldr	r2, [pc, #40]	; (8020f10 <ECAT_CheckTimer+0xf4>)
 8020ee6:	6013      	str	r3, [r2, #0]
/*ECATCHANGE_END(V5.12) COE4*/
}
 8020ee8:	bd80      	pop	{r7, pc}
 8020eea:	bf00      	nop
 8020eec:	1ffea87c 	.word	0x1ffea87c
 8020ef0:	1ffea886 	.word	0x1ffea886
 8020ef4:	1ffea828 	.word	0x1ffea828
 8020ef8:	1ffea7f4 	.word	0x1ffea7f4
 8020efc:	1ffea7c0 	.word	0x1ffea7c0
 8020f00:	1ffea878 	.word	0x1ffea878
 8020f04:	1ffe9570 	.word	0x1ffe9570
 8020f08:	ffe1fb40 	.word	0xffe1fb40
 8020f0c:	000f4240 	.word	0x000f4240
 8020f10:	1ffea7bc 	.word	0x1ffea7bc

08020f14 <HandleCycleTimeMeasurement>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief    In case of non DC synchronization the cycle time measurement is started and 0x1C3.2 (Cycle time) is updated
*////////////////////////////////////////////////////////////////////////////////////////
void HandleCycleTimeMeasurement(void)
{
 8020f14:	b580      	push	{r7, lr}
 8020f16:	af00      	add	r7, sp, #0
    if (!bDcSyncActive) //no DC sync configured (cycle time measurement 0x1C3x.2 is only available in no DC sync modes)
 8020f18:	4b1a      	ldr	r3, [pc, #104]	; (8020f84 <HandleCycleTimeMeasurement+0x70>)
 8020f1a:	781b      	ldrb	r3, [r3, #0]
 8020f1c:	f083 0301 	eor.w	r3, r3, #1
 8020f20:	b2db      	uxtb	r3, r3
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d02d      	beq.n	8020f82 <HandleCycleTimeMeasurement+0x6e>
    {
        if (u32CycleTimeStartValue > 0)
 8020f26:	4b18      	ldr	r3, [pc, #96]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d023      	beq.n	8020f76 <HandleCycleTimeMeasurement+0x62>
        {
            /* bus cycle completed*/
            u32CycleTimeStartValue = GetSystemTimeDelay(u32CycleTimeStartValue);
 8020f2e:	4b16      	ldr	r3, [pc, #88]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	4618      	mov	r0, r3
 8020f34:	f000 f82e 	bl	8020f94 <GetSystemTimeDelay>
 8020f38:	4602      	mov	r2, r0
 8020f3a:	4b13      	ldr	r3, [pc, #76]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f3c:	601a      	str	r2, [r3, #0]

            if ((sSyncManOutPar.u32CycleTime == 0) || (sSyncManOutPar.u32CycleTime > u32CycleTimeStartValue))
 8020f3e:	4b13      	ldr	r3, [pc, #76]	; (8020f8c <HandleCycleTimeMeasurement+0x78>)
 8020f40:	685b      	ldr	r3, [r3, #4]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d005      	beq.n	8020f52 <HandleCycleTimeMeasurement+0x3e>
 8020f46:	4b11      	ldr	r3, [pc, #68]	; (8020f8c <HandleCycleTimeMeasurement+0x78>)
 8020f48:	685a      	ldr	r2, [r3, #4]
 8020f4a:	4b0f      	ldr	r3, [pc, #60]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	429a      	cmp	r2, r3
 8020f50:	d903      	bls.n	8020f5a <HandleCycleTimeMeasurement+0x46>
            {
                    sSyncManOutPar.u32CycleTime = u32CycleTimeStartValue;
 8020f52:	4b0d      	ldr	r3, [pc, #52]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	4a0d      	ldr	r2, [pc, #52]	; (8020f8c <HandleCycleTimeMeasurement+0x78>)
 8020f58:	6053      	str	r3, [r2, #4]
            }

            if ((sSyncManInPar.u32CycleTime == 0) || (sSyncManInPar.u32CycleTime > u32CycleTimeStartValue))
 8020f5a:	4b0d      	ldr	r3, [pc, #52]	; (8020f90 <HandleCycleTimeMeasurement+0x7c>)
 8020f5c:	685b      	ldr	r3, [r3, #4]
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d005      	beq.n	8020f6e <HandleCycleTimeMeasurement+0x5a>
 8020f62:	4b0b      	ldr	r3, [pc, #44]	; (8020f90 <HandleCycleTimeMeasurement+0x7c>)
 8020f64:	685a      	ldr	r2, [r3, #4]
 8020f66:	4b08      	ldr	r3, [pc, #32]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	429a      	cmp	r2, r3
 8020f6c:	d903      	bls.n	8020f76 <HandleCycleTimeMeasurement+0x62>
            {
                    sSyncManInPar.u32CycleTime = u32CycleTimeStartValue;
 8020f6e:	4b06      	ldr	r3, [pc, #24]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	4a07      	ldr	r2, [pc, #28]	; (8020f90 <HandleCycleTimeMeasurement+0x7c>)
 8020f74:	6053      	str	r3, [r2, #4]
            }
        }
        /* get next start value */
        u32CycleTimeStartValue = GetSystemTimeDelay(0);
 8020f76:	2000      	movs	r0, #0
 8020f78:	f000 f80c 	bl	8020f94 <GetSystemTimeDelay>
 8020f7c:	4602      	mov	r2, r0
 8020f7e:	4b02      	ldr	r3, [pc, #8]	; (8020f88 <HandleCycleTimeMeasurement+0x74>)
 8020f80:	601a      	str	r2, [r3, #0]
        
    }/* No DC sync configured */
}
 8020f82:	bd80      	pop	{r7, pc}
 8020f84:	1ffea889 	.word	0x1ffea889
 8020f88:	1ffea7c8 	.word	0x1ffea7c8
 8020f8c:	1ffea974 	.word	0x1ffea974
 8020f90:	1ffea930 	.word	0x1ffea930

08020f94 <GetSystemTimeDelay>:
\brief    Calculates the difference between the old and current system time value in ns.
          NOTE: This function only handles a 32Bit system time values (therefore the maximum delay about 4sec).
*////////////////////////////////////////////////////////////////////////////////////////

UINT32 GetSystemTimeDelay(UINT32 u32StartTime)
{
 8020f94:	b480      	push	{r7}
 8020f96:	b085      	sub	sp, #20
 8020f98:	af00      	add	r7, sp, #0
 8020f9a:	6078      	str	r0, [r7, #4]
   UINT32 u32CurValue = 0;
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	60bb      	str	r3, [r7, #8]
   UINT32 u32Delta = 0;
 8020fa0:	2300      	movs	r3, #0
 8020fa2:	60fb      	str	r3, [r7, #12]

   
   HW_EscReadDWordIsr(u32CurValue, ESC_SYSTEMTIME_OFFSET);
 8020fa4:	4b15      	ldr	r3, [pc, #84]	; (8020ffc <GetSystemTimeDelay+0x68>)
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	60bb      	str	r3, [r7, #8]

   if (u32CurValue > 0)
 8020faa:	68bb      	ldr	r3, [r7, #8]
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d00d      	beq.n	8020fcc <GetSystemTimeDelay+0x38>
   {
      if (u32StartTime <= u32CurValue)
 8020fb0:	687a      	ldr	r2, [r7, #4]
 8020fb2:	68bb      	ldr	r3, [r7, #8]
 8020fb4:	429a      	cmp	r2, r3
 8020fb6:	d804      	bhi.n	8020fc2 <GetSystemTimeDelay+0x2e>
      {
         u32Delta = u32CurValue - u32StartTime;
 8020fb8:	68ba      	ldr	r2, [r7, #8]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	1ad3      	subs	r3, r2, r3
 8020fbe:	60fb      	str	r3, [r7, #12]
 8020fc0:	e004      	b.n	8020fcc <GetSystemTimeDelay+0x38>
      }
      else
      {
         //The 32Bit timer is wrapped around
         u32Delta = u32CurValue + (0xFFFFFFFF - u32StartTime);
 8020fc2:	68ba      	ldr	r2, [r7, #8]
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	1ad3      	subs	r3, r2, r3
 8020fc8:	3b01      	subs	r3, #1
 8020fca:	60fb      	str	r3, [r7, #12]
      }
   }// current value successfully read out

   if (u32StartTime > 0)
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d00c      	beq.n	8020fec <GetSystemTimeDelay+0x58>
   {

       /*the difference between two timestamps are calculated => subtract measurement failure*/
       if (u32SystemTimeReadFailure < u32Delta)
 8020fd2:	4b0b      	ldr	r3, [pc, #44]	; (8021000 <GetSystemTimeDelay+0x6c>)
 8020fd4:	681a      	ldr	r2, [r3, #0]
 8020fd6:	68fb      	ldr	r3, [r7, #12]
 8020fd8:	429a      	cmp	r2, r3
 8020fda:	d205      	bcs.n	8020fe8 <GetSystemTimeDelay+0x54>
       {
           u32Delta = u32Delta - u32SystemTimeReadFailure;
 8020fdc:	4b08      	ldr	r3, [pc, #32]	; (8021000 <GetSystemTimeDelay+0x6c>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	68fa      	ldr	r2, [r7, #12]
 8020fe2:	1ad3      	subs	r3, r2, r3
 8020fe4:	60fb      	str	r3, [r7, #12]
 8020fe6:	e001      	b.n	8020fec <GetSystemTimeDelay+0x58>
       }
       else
       {
           /*set the delta to 0 if the measurement failure is greater than the calculated difference*/
           u32Delta = 0;
 8020fe8:	2300      	movs	r3, #0
 8020fea:	60fb      	str	r3, [r7, #12]
       }
   }
   return u32Delta;
 8020fec:	68fb      	ldr	r3, [r7, #12]
}
 8020fee:	4618      	mov	r0, r3
 8020ff0:	3714      	adds	r7, #20
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff8:	4770      	bx	lr
 8020ffa:	bf00      	nop
 8020ffc:	54010910 	.word	0x54010910
 8021000:	1ffea7d8 	.word	0x1ffea7d8

08021004 <PDI_Isr>:
/*ECATCHANGE_END(V5.12) ECAT1*/

void PDI_Isr(void)
{
 8021004:	b580      	push	{r7, lr}
 8021006:	b082      	sub	sp, #8
 8021008:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 802100a:	4b45      	ldr	r3, [pc, #276]	; (8021120 <PDI_Isr+0x11c>)
 802100c:	781b      	ldrb	r3, [r3, #0]
 802100e:	2b00      	cmp	r3, #0
 8021010:	f000 8081 	beq.w	8021116 <PDI_Isr+0x112>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8021014:	f7ff fe58 	bl	8020cc8 <HW_GetALEventRegister_Isr>
 8021018:	4603      	mov	r3, r0
 802101a:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 802101c:	88fb      	ldrh	r3, [r7, #6]
 802101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021022:	2b00      	cmp	r3, #0
 8021024:	d039      	beq.n	802109a <PDI_Isr+0x96>
        {
            if(bDcRunning && bDcSyncActive)
 8021026:	4b3f      	ldr	r3, [pc, #252]	; (8021124 <PDI_Isr+0x120>)
 8021028:	781b      	ldrb	r3, [r3, #0]
 802102a:	2b00      	cmp	r3, #0
 802102c:	d006      	beq.n	802103c <PDI_Isr+0x38>
 802102e:	4b3e      	ldr	r3, [pc, #248]	; (8021128 <PDI_Isr+0x124>)
 8021030:	781b      	ldrb	r3, [r3, #0]
 8021032:	2b00      	cmp	r3, #0
 8021034:	d002      	beq.n	802103c <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8021036:	4b3d      	ldr	r3, [pc, #244]	; (802112c <PDI_Isr+0x128>)
 8021038:	2200      	movs	r2, #0
 802103a:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 802103c:	4b3c      	ldr	r3, [pc, #240]	; (8021130 <PDI_Isr+0x12c>)
 802103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021040:	2b00      	cmp	r3, #0
 8021042:	d005      	beq.n	8021050 <PDI_Isr+0x4c>
            {
                sSyncManOutPar.u16SmEventMissedCounter--;
 8021044:	4b3a      	ldr	r3, [pc, #232]	; (8021130 <PDI_Isr+0x12c>)
 8021046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021048:	3b01      	subs	r3, #1
 802104a:	b29a      	uxth	r2, r3
 802104c:	4b38      	ldr	r3, [pc, #224]	; (8021130 <PDI_Isr+0x12c>)
 802104e:	851a      	strh	r2, [r3, #40]	; 0x28
            }

/*ECATCHANGE_START(V5.12) ECAT5*/
            sSyncManInPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter;
 8021050:	4b37      	ldr	r3, [pc, #220]	; (8021130 <PDI_Isr+0x12c>)
 8021052:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8021054:	4b37      	ldr	r3, [pc, #220]	; (8021134 <PDI_Isr+0x130>)
 8021056:	851a      	strh	r2, [r3, #40]	; 0x28
/*ECATCHANGE_END(V5.12) ECAT5*/



        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8021058:	4b37      	ldr	r3, [pc, #220]	; (8021138 <PDI_Isr+0x134>)
 802105a:	2201      	movs	r2, #1
 802105c:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 802105e:	4b37      	ldr	r3, [pc, #220]	; (802113c <PDI_Isr+0x138>)
 8021060:	781b      	ldrb	r3, [r3, #0]
 8021062:	2b00      	cmp	r3, #0
 8021064:	d002      	beq.n	802106c <PDI_Isr+0x68>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8021066:	f7ff fe81 	bl	8020d6c <PDO_OutputMapping>
 802106a:	e016      	b.n	802109a <PDI_Isr+0x96>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 802106c:	4b34      	ldr	r3, [pc, #208]	; (8021140 <PDI_Isr+0x13c>)
 802106e:	881b      	ldrh	r3, [r3, #0]
 8021070:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021074:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021078:	781b      	ldrb	r3, [r3, #0]
 802107a:	b2da      	uxtb	r2, r3
 802107c:	4b31      	ldr	r3, [pc, #196]	; (8021144 <PDI_Isr+0x140>)
 802107e:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8021080:	4b2f      	ldr	r3, [pc, #188]	; (8021140 <PDI_Isr+0x13c>)
 8021082:	881b      	ldrh	r3, [r3, #0]
 8021084:	461a      	mov	r2, r3
 8021086:	4b30      	ldr	r3, [pc, #192]	; (8021148 <PDI_Isr+0x144>)
 8021088:	881b      	ldrh	r3, [r3, #0]
 802108a:	4413      	add	r3, r2
 802108c:	461a      	mov	r2, r3
 802108e:	4b2f      	ldr	r3, [pc, #188]	; (802114c <PDI_Isr+0x148>)
 8021090:	4413      	add	r3, r2
 8021092:	781b      	ldrb	r3, [r3, #0]
 8021094:	b2da      	uxtb	r2, r3
 8021096:	4b2b      	ldr	r3, [pc, #172]	; (8021144 <PDI_Isr+0x140>)
 8021098:	701a      	strb	r2, [r3, #0]
        }

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 802109a:	4b25      	ldr	r3, [pc, #148]	; (8021130 <PDI_Isr+0x12c>)
 802109c:	885b      	ldrh	r3, [r3, #2]
 802109e:	2b01      	cmp	r3, #1
 80210a0:	d101      	bne.n	80210a6 <PDI_Isr+0xa2>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 80210a2:	f000 fa4b 	bl	802153c <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 80210a6:	4b2a      	ldr	r3, [pc, #168]	; (8021150 <PDI_Isr+0x14c>)
 80210a8:	781b      	ldrb	r3, [r3, #0]
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d009      	beq.n	80210c2 <PDI_Isr+0xbe>
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 80210ae:	4b21      	ldr	r3, [pc, #132]	; (8021134 <PDI_Isr+0x130>)
 80210b0:	885b      	ldrh	r3, [r3, #2]
 80210b2:	2b01      	cmp	r3, #1
 80210b4:	d003      	beq.n	80210be <PDI_Isr+0xba>
 80210b6:	4b1f      	ldr	r3, [pc, #124]	; (8021134 <PDI_Isr+0x130>)
 80210b8:	885b      	ldrh	r3, [r3, #2]
 80210ba:	2b22      	cmp	r3, #34	; 0x22
 80210bc:	d101      	bne.n	80210c2 <PDI_Isr+0xbe>
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 80210be:	f7ff fe0b 	bl	8020cd8 <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 80210c2:	f7ff fe01 	bl	8020cc8 <HW_GetALEventRegister_Isr>
 80210c6:	4603      	mov	r3, r0
 80210c8:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80210ca:	88fb      	ldrh	r3, [r7, #6]
 80210cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d020      	beq.n	8021116 <PDI_Isr+0x112>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 80210d4:	4b16      	ldr	r3, [pc, #88]	; (8021130 <PDI_Isr+0x12c>)
 80210d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80210d8:	3301      	adds	r3, #1
 80210da:	b29a      	uxth	r2, r3
 80210dc:	4b14      	ldr	r3, [pc, #80]	; (8021130 <PDI_Isr+0x12c>)
 80210de:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 80210e0:	4b13      	ldr	r3, [pc, #76]	; (8021130 <PDI_Isr+0x12c>)
 80210e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80210e4:	4b13      	ldr	r3, [pc, #76]	; (8021134 <PDI_Isr+0x130>)
 80210e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 80210e8:	4b15      	ldr	r3, [pc, #84]	; (8021140 <PDI_Isr+0x13c>)
 80210ea:	881b      	ldrh	r3, [r3, #0]
 80210ec:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80210f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80210f4:	781b      	ldrb	r3, [r3, #0]
 80210f6:	b2da      	uxtb	r2, r3
 80210f8:	4b12      	ldr	r3, [pc, #72]	; (8021144 <PDI_Isr+0x140>)
 80210fa:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 80210fc:	4b10      	ldr	r3, [pc, #64]	; (8021140 <PDI_Isr+0x13c>)
 80210fe:	881b      	ldrh	r3, [r3, #0]
 8021100:	461a      	mov	r2, r3
 8021102:	4b11      	ldr	r3, [pc, #68]	; (8021148 <PDI_Isr+0x144>)
 8021104:	881b      	ldrh	r3, [r3, #0]
 8021106:	4413      	add	r3, r2
 8021108:	461a      	mov	r2, r3
 802110a:	4b10      	ldr	r3, [pc, #64]	; (802114c <PDI_Isr+0x148>)
 802110c:	4413      	add	r3, r2
 802110e:	781b      	ldrb	r3, [r3, #0]
 8021110:	b2da      	uxtb	r2, r3
 8021112:	4b0c      	ldr	r3, [pc, #48]	; (8021144 <PDI_Isr+0x140>)
 8021114:	701a      	strb	r2, [r3, #0]
    }
    } //if(bEscIntEnabled)

/*ECATCHANGE_START(V5.12) ECAT5*/
    COE_UpdateSyncErrorStatus();
 8021116:	f7ff fb09 	bl	802072c <COE_UpdateSyncErrorStatus>
/*ECATCHANGE_END(V5.12) ECAT5*/

}
 802111a:	3708      	adds	r7, #8
 802111c:	46bd      	mov	sp, r7
 802111e:	bd80      	pop	{r7, pc}
 8021120:	1ffea891 	.word	0x1ffea891
 8021124:	1ffea86c 	.word	0x1ffea86c
 8021128:	1ffea889 	.word	0x1ffea889
 802112c:	1ffea894 	.word	0x1ffea894
 8021130:	1ffea974 	.word	0x1ffea974
 8021134:	1ffea930 	.word	0x1ffea930
 8021138:	1ffea884 	.word	0x1ffea884
 802113c:	1ffea88a 	.word	0x1ffea88a
 8021140:	1ffea85e 	.word	0x1ffea85e
 8021144:	1ffea868 	.word	0x1ffea868
 8021148:	1ffea852 	.word	0x1ffea852
 802114c:	5400ffff 	.word	0x5400ffff
 8021150:	1ffea890 	.word	0x1ffea890

08021154 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b082      	sub	sp, #8
 8021158:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 802115a:	4b48      	ldr	r3, [pc, #288]	; (802127c <Sync0_Isr+0x128>)
 802115c:	2200      	movs	r2, #0
 802115e:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8021160:	4b47      	ldr	r3, [pc, #284]	; (8021280 <Sync0_Isr+0x12c>)
 8021162:	781b      	ldrb	r3, [r3, #0]
 8021164:	2b00      	cmp	r3, #0
 8021166:	f000 8083 	beq.w	8021270 <Sync0_Isr+0x11c>
    {

        if ( bEcatInputUpdateRunning )
 802116a:	4b46      	ldr	r3, [pc, #280]	; (8021284 <Sync0_Isr+0x130>)
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d005      	beq.n	802117e <Sync0_Isr+0x2a>
        {
            LatchInputSync0Counter++;
 8021172:	4b45      	ldr	r3, [pc, #276]	; (8021288 <Sync0_Isr+0x134>)
 8021174:	881b      	ldrh	r3, [r3, #0]
 8021176:	3301      	adds	r3, #1
 8021178:	b29a      	uxth	r2, r3
 802117a:	4b43      	ldr	r3, [pc, #268]	; (8021288 <Sync0_Isr+0x134>)
 802117c:	801a      	strh	r2, [r3, #0]
        }

        if(u16SmSync0Value > 0)
 802117e:	4b43      	ldr	r3, [pc, #268]	; (802128c <Sync0_Isr+0x138>)
 8021180:	881b      	ldrh	r3, [r3, #0]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d05b      	beq.n	802123e <Sync0_Isr+0xea>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8021186:	4b42      	ldr	r3, [pc, #264]	; (8021290 <Sync0_Isr+0x13c>)
 8021188:	881a      	ldrh	r2, [r3, #0]
 802118a:	4b40      	ldr	r3, [pc, #256]	; (802128c <Sync0_Isr+0x138>)
 802118c:	881b      	ldrh	r3, [r3, #0]
 802118e:	429a      	cmp	r2, r3
 8021190:	d923      	bls.n	80211da <Sync0_Isr+0x86>
           {
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8021192:	4b40      	ldr	r3, [pc, #256]	; (8021294 <Sync0_Isr+0x140>)
 8021194:	881b      	ldrh	r3, [r3, #0]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d00b      	beq.n	80211b2 <Sync0_Isr+0x5e>
 802119a:	4b3f      	ldr	r3, [pc, #252]	; (8021298 <Sync0_Isr+0x144>)
 802119c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802119e:	4b3f      	ldr	r3, [pc, #252]	; (802129c <Sync0_Isr+0x148>)
 80211a0:	891b      	ldrh	r3, [r3, #8]
 80211a2:	429a      	cmp	r2, r3
 80211a4:	d805      	bhi.n	80211b2 <Sync0_Isr+0x5e>
              {
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 80211a6:	4b3c      	ldr	r3, [pc, #240]	; (8021298 <Sync0_Isr+0x144>)
 80211a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80211aa:	3303      	adds	r3, #3
 80211ac:	b29a      	uxth	r2, r3
 80211ae:	4b3a      	ldr	r3, [pc, #232]	; (8021298 <Sync0_Isr+0x144>)
 80211b0:	851a      	strh	r2, [r3, #40]	; 0x28
              }

           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 80211b2:	4b3b      	ldr	r3, [pc, #236]	; (80212a0 <Sync0_Isr+0x14c>)
 80211b4:	881b      	ldrh	r3, [r3, #0]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d00f      	beq.n	80211da <Sync0_Isr+0x86>
 80211ba:	4b36      	ldr	r3, [pc, #216]	; (8021294 <Sync0_Isr+0x140>)
 80211bc:	881b      	ldrh	r3, [r3, #0]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d10b      	bne.n	80211da <Sync0_Isr+0x86>
 80211c2:	4b38      	ldr	r3, [pc, #224]	; (80212a4 <Sync0_Isr+0x150>)
 80211c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80211c6:	4b35      	ldr	r3, [pc, #212]	; (802129c <Sync0_Isr+0x148>)
 80211c8:	891b      	ldrh	r3, [r3, #8]
 80211ca:	429a      	cmp	r2, r3
 80211cc:	d805      	bhi.n	80211da <Sync0_Isr+0x86>
           {
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 80211ce:	4b35      	ldr	r3, [pc, #212]	; (80212a4 <Sync0_Isr+0x150>)
 80211d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80211d2:	3303      	adds	r3, #3
 80211d4:	b29a      	uxth	r2, r3
 80211d6:	4b33      	ldr	r3, [pc, #204]	; (80212a4 <Sync0_Isr+0x150>)
 80211d8:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 80211da:	4b2e      	ldr	r3, [pc, #184]	; (8021294 <Sync0_Isr+0x140>)
 80211dc:	881b      	ldrh	r3, [r3, #0]
 80211de:	2b00      	cmp	r3, #0
 80211e0:	d121      	bne.n	8021226 <Sync0_Isr+0xd2>
 80211e2:	4b2f      	ldr	r3, [pc, #188]	; (80212a0 <Sync0_Isr+0x14c>)
 80211e4:	881b      	ldrh	r3, [r3, #0]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d01d      	beq.n	8021226 <Sync0_Isr+0xd2>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 80211ea:	f7ff fd6d 	bl	8020cc8 <HW_GetALEventRegister_Isr>
 80211ee:	4603      	mov	r3, r0
 80211f0:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 80211f2:	88fb      	ldrh	r3, [r7, #6]
 80211f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d10c      	bne.n	8021216 <Sync0_Isr+0xc2>
              {

                 /* no input data was read by the master, increment the sm missed counter*/
                if (u16SmSync0Counter <= u16SmSync0Value)
 80211fc:	4b24      	ldr	r3, [pc, #144]	; (8021290 <Sync0_Isr+0x13c>)
 80211fe:	881a      	ldrh	r2, [r3, #0]
 8021200:	4b22      	ldr	r3, [pc, #136]	; (802128c <Sync0_Isr+0x138>)
 8021202:	881b      	ldrh	r3, [r3, #0]
 8021204:	429a      	cmp	r2, r3
 8021206:	d80d      	bhi.n	8021224 <Sync0_Isr+0xd0>
                {
                    u16SmSync0Counter++;
 8021208:	4b21      	ldr	r3, [pc, #132]	; (8021290 <Sync0_Isr+0x13c>)
 802120a:	881b      	ldrh	r3, [r3, #0]
 802120c:	3301      	adds	r3, #1
 802120e:	b29a      	uxth	r2, r3
 8021210:	4b1f      	ldr	r3, [pc, #124]	; (8021290 <Sync0_Isr+0x13c>)
 8021212:	801a      	strh	r2, [r3, #0]

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8021214:	e013      	b.n	802123e <Sync0_Isr+0xea>
                }
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8021216:	4b1e      	ldr	r3, [pc, #120]	; (8021290 <Sync0_Isr+0x13c>)
 8021218:	2200      	movs	r2, #0
 802121a:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 802121c:	4b21      	ldr	r3, [pc, #132]	; (80212a4 <Sync0_Isr+0x150>)
 802121e:	2200      	movs	r2, #0
 8021220:	851a      	strh	r2, [r3, #40]	; 0x28

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8021222:	e00c      	b.n	802123e <Sync0_Isr+0xea>
 8021224:	e00b      	b.n	802123e <Sync0_Isr+0xea>

                 sSyncManInPar.u16SmEventMissedCounter = 0;

              }
           }
           else if (u16SmSync0Counter <= u16SmSync0Value)
 8021226:	4b1a      	ldr	r3, [pc, #104]	; (8021290 <Sync0_Isr+0x13c>)
 8021228:	881a      	ldrh	r2, [r3, #0]
 802122a:	4b18      	ldr	r3, [pc, #96]	; (802128c <Sync0_Isr+0x138>)
 802122c:	881b      	ldrh	r3, [r3, #0]
 802122e:	429a      	cmp	r2, r3
 8021230:	d805      	bhi.n	802123e <Sync0_Isr+0xea>
           {

               u16SmSync0Counter++;
 8021232:	4b17      	ldr	r3, [pc, #92]	; (8021290 <Sync0_Isr+0x13c>)
 8021234:	881b      	ldrh	r3, [r3, #0]
 8021236:	3301      	adds	r3, #1
 8021238:	b29a      	uxth	r2, r3
 802123a:	4b15      	ldr	r3, [pc, #84]	; (8021290 <Sync0_Isr+0x13c>)
 802123c:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled


        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 802123e:	f000 f97d 	bl	802153c <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8021242:	4b10      	ldr	r3, [pc, #64]	; (8021284 <Sync0_Isr+0x130>)
 8021244:	781b      	ldrb	r3, [r3, #0]
 8021246:	2b00      	cmp	r3, #0
 8021248:	d012      	beq.n	8021270 <Sync0_Isr+0x11c>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 802124a:	4b17      	ldr	r3, [pc, #92]	; (80212a8 <Sync0_Isr+0x154>)
 802124c:	881b      	ldrh	r3, [r3, #0]
 802124e:	2b00      	cmp	r3, #0
 8021250:	d00e      	beq.n	8021270 <Sync0_Isr+0x11c>
 8021252:	4b15      	ldr	r3, [pc, #84]	; (80212a8 <Sync0_Isr+0x154>)
 8021254:	881a      	ldrh	r2, [r3, #0]
 8021256:	4b0c      	ldr	r3, [pc, #48]	; (8021288 <Sync0_Isr+0x134>)
 8021258:	881b      	ldrh	r3, [r3, #0]
 802125a:	429a      	cmp	r2, r3
 802125c:	d108      	bne.n	8021270 <Sync0_Isr+0x11c>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 802125e:	f7ff fd3b 	bl	8020cd8 <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8021262:	4b11      	ldr	r3, [pc, #68]	; (80212a8 <Sync0_Isr+0x154>)
 8021264:	881b      	ldrh	r3, [r3, #0]
 8021266:	2b01      	cmp	r3, #1
 8021268:	d102      	bne.n	8021270 <Sync0_Isr+0x11c>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 802126a:	4b07      	ldr	r3, [pc, #28]	; (8021288 <Sync0_Isr+0x134>)
 802126c:	2200      	movs	r2, #0
 802126e:	801a      	strh	r2, [r3, #0]
        }

    }

/*ECATCHANGE_START(V5.12) ECAT5*/
    COE_UpdateSyncErrorStatus();
 8021270:	f7ff fa5c 	bl	802072c <COE_UpdateSyncErrorStatus>
/*ECATCHANGE_END(V5.12) ECAT5*/

}
 8021274:	3708      	adds	r7, #8
 8021276:	46bd      	mov	sp, r7
 8021278:	bd80      	pop	{r7, pc}
 802127a:	bf00      	nop
 802127c:	1ffea856 	.word	0x1ffea856
 8021280:	1ffea889 	.word	0x1ffea889
 8021284:	1ffea890 	.word	0x1ffea890
 8021288:	1ffea85a 	.word	0x1ffea85a
 802128c:	1ffea880 	.word	0x1ffea880
 8021290:	1ffea894 	.word	0x1ffea894
 8021294:	1ffea852 	.word	0x1ffea852
 8021298:	1ffea974 	.word	0x1ffea974
 802129c:	1ffe93e4 	.word	0x1ffe93e4
 80212a0:	1ffea87e 	.word	0x1ffea87e
 80212a4:	1ffea930 	.word	0x1ffea930
 80212a8:	1ffea87a 	.word	0x1ffea87a

080212ac <Sync1_Isr>:

void Sync1_Isr(void)
{
 80212ac:	b580      	push	{r7, lr}
 80212ae:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 80212b0:	4b0a      	ldr	r3, [pc, #40]	; (80212dc <Sync1_Isr+0x30>)
 80212b2:	2200      	movs	r2, #0
 80212b4:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 80212b6:	4b0a      	ldr	r3, [pc, #40]	; (80212e0 <Sync1_Isr+0x34>)
 80212b8:	781b      	ldrb	r3, [r3, #0]
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d009      	beq.n	80212d2 <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 80212be:	4b09      	ldr	r3, [pc, #36]	; (80212e4 <Sync1_Isr+0x38>)
 80212c0:	885b      	ldrh	r3, [r3, #2]
 80212c2:	2b03      	cmp	r3, #3
 80212c4:	d105      	bne.n	80212d2 <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 80212c6:	4b08      	ldr	r3, [pc, #32]	; (80212e8 <Sync1_Isr+0x3c>)
 80212c8:	881b      	ldrh	r3, [r3, #0]
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d101      	bne.n	80212d2 <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 80212ce:	f7ff fd03 	bl	8020cd8 <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 80212d2:	4b06      	ldr	r3, [pc, #24]	; (80212ec <Sync1_Isr+0x40>)
 80212d4:	2200      	movs	r2, #0
 80212d6:	801a      	strh	r2, [r3, #0]
}
 80212d8:	bd80      	pop	{r7, pc}
 80212da:	bf00      	nop
 80212dc:	1ffea88c 	.word	0x1ffea88c
 80212e0:	1ffea890 	.word	0x1ffea890
 80212e4:	1ffea930 	.word	0x1ffea930
 80212e8:	1ffea87a 	.word	0x1ffea87a
 80212ec:	1ffea85a 	.word	0x1ffea85a

080212f0 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 80212f0:	b580      	push	{r7, lr}
 80212f2:	b086      	sub	sp, #24
 80212f4:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 80212f6:	2300      	movs	r3, #0
 80212f8:	81fb      	strh	r3, [r7, #14]
/*Hardware init function need to be called from the application layer*/

#ifdef SET_EEPROM_PTR
    SET_EEPROM_PTR
 80212fa:	4b3e      	ldr	r3, [pc, #248]	; (80213f4 <MainInit+0x104>)
 80212fc:	4a3e      	ldr	r2, [pc, #248]	; (80213f8 <MainInit+0x108>)
 80212fe:	601a      	str	r2, [r3, #0]
#endif


/*ECATCHANGE_START(V5.12) ECAT8*/
/* Reset application function pointer*/
pAPPL_EEPROM_Read = NULL;
 8021300:	4b3e      	ldr	r3, [pc, #248]	; (80213fc <MainInit+0x10c>)
 8021302:	2200      	movs	r2, #0
 8021304:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Write = NULL;
 8021306:	4b3e      	ldr	r3, [pc, #248]	; (8021400 <MainInit+0x110>)
 8021308:	2200      	movs	r2, #0
 802130a:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Reload = NULL;
 802130c:	4b3d      	ldr	r3, [pc, #244]	; (8021404 <MainInit+0x114>)
 802130e:	2200      	movs	r2, #0
 8021310:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Store = NULL;
 8021312:	4b3d      	ldr	r3, [pc, #244]	; (8021408 <MainInit+0x118>)
 8021314:	2200      	movs	r2, #0
 8021316:	601a      	str	r2, [r3, #0]



    pAPPL_FoeRead = NULL;
 8021318:	4b3c      	ldr	r3, [pc, #240]	; (802140c <MainInit+0x11c>)
 802131a:	2200      	movs	r2, #0
 802131c:	601a      	str	r2, [r3, #0]
    pAPPL_FoeReadData = NULL;
 802131e:	4b3c      	ldr	r3, [pc, #240]	; (8021410 <MainInit+0x120>)
 8021320:	2200      	movs	r2, #0
 8021322:	601a      	str	r2, [r3, #0]
    pAPPL_FoeError = NULL;
 8021324:	4b3b      	ldr	r3, [pc, #236]	; (8021414 <MainInit+0x124>)
 8021326:	2200      	movs	r2, #0
 8021328:	601a      	str	r2, [r3, #0]
    pAPPL_FoeWrite = NULL;
 802132a:	4b3b      	ldr	r3, [pc, #236]	; (8021418 <MainInit+0x128>)
 802132c:	2200      	movs	r2, #0
 802132e:	601a      	str	r2, [r3, #0]
    pAPPL_FoeWriteData = NULL;
 8021330:	4b3a      	ldr	r3, [pc, #232]	; (802141c <MainInit+0x12c>)
 8021332:	2200      	movs	r2, #0
 8021334:	601a      	str	r2, [r3, #0]

    pAPPL_MainLoop = NULL;
 8021336:	4b3a      	ldr	r3, [pc, #232]	; (8021420 <MainInit+0x130>)
 8021338:	2200      	movs	r2, #0
 802133a:	601a      	str	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ECAT8*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 802133c:	f002 fb22 	bl	8023984 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 8021340:	f7ff fa26 	bl	8020790 <COE_ObjInit>


    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 8021344:	4b37      	ldr	r3, [pc, #220]	; (8021424 <MainInit+0x134>)
 8021346:	2201      	movs	r2, #1
 8021348:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ECAT1*/

    bMinCycleTimeMeasurementStarted = FALSE;
 802134a:	4b37      	ldr	r3, [pc, #220]	; (8021428 <MainInit+0x138>)
 802134c:	2200      	movs	r2, #0
 802134e:	701a      	strb	r2, [r3, #0]
    u32CycleTimeStartValue = 0;
 8021350:	4b36      	ldr	r3, [pc, #216]	; (802142c <MainInit+0x13c>)
 8021352:	2200      	movs	r2, #0
 8021354:	601a      	str	r2, [r3, #0]
    u32MinCycleTimeStartValue = 0;
 8021356:	4b36      	ldr	r3, [pc, #216]	; (8021430 <MainInit+0x140>)
 8021358:	2200      	movs	r2, #0
 802135a:	601a      	str	r2, [r3, #0]

    u32SystemTimeReadFailure = 0;
 802135c:	4b35      	ldr	r3, [pc, #212]	; (8021434 <MainInit+0x144>)
 802135e:	2200      	movs	r2, #0
 8021360:	601a      	str	r2, [r3, #0]

    /* Get the System Time read failure */
    {
       UINT32 u32TimeValue = 0;
 8021362:	2300      	movs	r3, #0
 8021364:	60bb      	str	r3, [r7, #8]
       UINT32 u32Cnt = 0;
 8021366:	2300      	movs	r3, #0
 8021368:	617b      	str	r3, [r7, #20]
       UINT32 u32Delta = 0;
 802136a:	2300      	movs	r3, #0
 802136c:	613b      	str	r3, [r7, #16]

       while (u32Cnt < 1000)
 802136e:	e026      	b.n	80213be <MainInit+0xce>
       {
           HW_EscReadDWordIsr(u32TimeValue, ESC_SYSTEMTIME_OFFSET);
 8021370:	4b31      	ldr	r3, [pc, #196]	; (8021438 <MainInit+0x148>)
 8021372:	681b      	ldr	r3, [r3, #0]
 8021374:	60bb      	str	r3, [r7, #8]
           HW_EscReadDWordIsr(u32Delta, ESC_SYSTEMTIME_OFFSET);
 8021376:	4b30      	ldr	r3, [pc, #192]	; (8021438 <MainInit+0x148>)
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	613b      	str	r3, [r7, #16]

            if (u32TimeValue <= u32Delta)
 802137c:	68ba      	ldr	r2, [r7, #8]
 802137e:	693b      	ldr	r3, [r7, #16]
 8021380:	429a      	cmp	r2, r3
 8021382:	d804      	bhi.n	802138e <MainInit+0x9e>
            {
                    u32Delta = u32Delta - u32TimeValue;
 8021384:	693a      	ldr	r2, [r7, #16]
 8021386:	68bb      	ldr	r3, [r7, #8]
 8021388:	1ad3      	subs	r3, r2, r3
 802138a:	613b      	str	r3, [r7, #16]
 802138c:	e004      	b.n	8021398 <MainInit+0xa8>
            }
            else
            {
                //The 32Bit timer is wrapped around
                u32Delta = u32Delta + (0xFFFFFFFF - u32TimeValue);
 802138e:	693a      	ldr	r2, [r7, #16]
 8021390:	68bb      	ldr	r3, [r7, #8]
 8021392:	1ad3      	subs	r3, r2, r3
 8021394:	3b01      	subs	r3, #1
 8021396:	613b      	str	r3, [r7, #16]
            }


            if (u32SystemTimeReadFailure == 0)
 8021398:	4b26      	ldr	r3, [pc, #152]	; (8021434 <MainInit+0x144>)
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	2b00      	cmp	r3, #0
 802139e:	d103      	bne.n	80213a8 <MainInit+0xb8>
            {
                u32SystemTimeReadFailure = u32Delta;
 80213a0:	4a24      	ldr	r2, [pc, #144]	; (8021434 <MainInit+0x144>)
 80213a2:	693b      	ldr	r3, [r7, #16]
 80213a4:	6013      	str	r3, [r2, #0]
 80213a6:	e007      	b.n	80213b8 <MainInit+0xc8>
            }
            else if (u32SystemTimeReadFailure > u32Delta)
 80213a8:	4b22      	ldr	r3, [pc, #136]	; (8021434 <MainInit+0x144>)
 80213aa:	681a      	ldr	r2, [r3, #0]
 80213ac:	693b      	ldr	r3, [r7, #16]
 80213ae:	429a      	cmp	r2, r3
 80213b0:	d902      	bls.n	80213b8 <MainInit+0xc8>
            {
                u32SystemTimeReadFailure = u32Delta;
 80213b2:	4a20      	ldr	r2, [pc, #128]	; (8021434 <MainInit+0x144>)
 80213b4:	693b      	ldr	r3, [r7, #16]
 80213b6:	6013      	str	r3, [r2, #0]
            }

          u32Cnt++;
 80213b8:	697b      	ldr	r3, [r7, #20]
 80213ba:	3301      	adds	r3, #1
 80213bc:	617b      	str	r3, [r7, #20]
    {
       UINT32 u32TimeValue = 0;
       UINT32 u32Cnt = 0;
       UINT32 u32Delta = 0;

       while (u32Cnt < 1000)
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80213c4:	d3d4      	bcc.n	8021370 <MainInit+0x80>

    /*ECATCHANGE_END(V5.12) ECAT1*/

/*ECATCHANGE_START(V5.12) EEPROM1*/
    {
        UINT16 TmpData = 0;
 80213c6:	2300      	movs	r3, #0
 80213c8:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(TmpData, ESC_EEPROM_CONTROL_OFFSET);
 80213ca:	4b1c      	ldr	r3, [pc, #112]	; (802143c <MainInit+0x14c>)
 80213cc:	881b      	ldrh	r3, [r3, #0]
 80213ce:	80fb      	strh	r3, [r7, #6]
        TmpData = SWAPDWORD(TmpData);
        //get bit6 of register 0x502
        if ((TmpData & ESC_EEPROM_SUPPORTED_READBYTES_MASK) > 0)
 80213d0:	88fb      	ldrh	r3, [r7, #6]
 80213d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	dd03      	ble.n	80213e2 <MainInit+0xf2>
        {
            //8Bytes EEPROM read access
            EepromReadSize = 8;
 80213da:	4b19      	ldr	r3, [pc, #100]	; (8021440 <MainInit+0x150>)
 80213dc:	2208      	movs	r2, #8
 80213de:	801a      	strh	r2, [r3, #0]
 80213e0:	e002      	b.n	80213e8 <MainInit+0xf8>
        }
        else
        {
            //4Bytes EEPROM read access
            EepromReadSize = 4;
 80213e2:	4b17      	ldr	r3, [pc, #92]	; (8021440 <MainInit+0x150>)
 80213e4:	2204      	movs	r2, #4
 80213e6:	801a      	strh	r2, [r3, #0]
        }
    }
/*ECATCHANGE_END(V5.12) EEPROM1*/

/*Application Init need to be called from the application layer*/
     return Error;
 80213e8:	89fb      	ldrh	r3, [r7, #14]
}
 80213ea:	4618      	mov	r0, r3
 80213ec:	3718      	adds	r7, #24
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bd80      	pop	{r7, pc}
 80213f2:	bf00      	nop
 80213f4:	1ffea814 	.word	0x1ffea814
 80213f8:	1ffe8be4 	.word	0x1ffe8be4
 80213fc:	1ffea7cc 	.word	0x1ffea7cc
 8021400:	1ffea7d0 	.word	0x1ffea7d0
 8021404:	1ffea820 	.word	0x1ffea820
 8021408:	1ffea7c0 	.word	0x1ffea7c0
 802140c:	1ffea824 	.word	0x1ffea824
 8021410:	1ffea7f8 	.word	0x1ffea7f8
 8021414:	1ffea7f0 	.word	0x1ffea7f0
 8021418:	1ffea82c 	.word	0x1ffea82c
 802141c:	1ffea81c 	.word	0x1ffea81c
 8021420:	1ffea7fc 	.word	0x1ffea7fc
 8021424:	1ffe9580 	.word	0x1ffe9580
 8021428:	1ffea7c4 	.word	0x1ffea7c4
 802142c:	1ffea7c8 	.word	0x1ffea7c8
 8021430:	1ffea804 	.word	0x1ffea804
 8021434:	1ffea7d8 	.word	0x1ffea7d8
 8021438:	54010910 	.word	0x54010910
 802143c:	54010502 	.word	0x54010502
 8021440:	1ffea7f6 	.word	0x1ffea7f6

08021444 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b082      	sub	sp, #8
 8021448:	af00      	add	r7, sp, #0
    
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 802144a:	4b33      	ldr	r3, [pc, #204]	; (8021518 <MainLoop+0xd4>)
 802144c:	781b      	ldrb	r3, [r3, #0]
 802144e:	f083 0301 	eor.w	r3, r3, #1
 8021452:	b2db      	uxtb	r3, r3
 8021454:	2b00      	cmp	r3, #0
 8021456:	d000      	beq.n	802145a <MainLoop+0x16>
    {
        return;
 8021458:	e05a      	b.n	8021510 <MainLoop+0xcc>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 802145a:	4b30      	ldr	r3, [pc, #192]	; (802151c <MainLoop+0xd8>)
 802145c:	781b      	ldrb	r3, [r3, #0]
 802145e:	f083 0301 	eor.w	r3, r3, #1
 8021462:	b2db      	uxtb	r3, r3


        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
 8021464:	2b00      	cmp	r3, #0
 8021466:	d106      	bne.n	8021476 <MainLoop+0x32>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8021468:	4b2d      	ldr	r3, [pc, #180]	; (8021520 <MainLoop+0xdc>)
 802146a:	781b      	ldrb	r3, [r3, #0]
 802146c:	f083 0301 	eor.w	r3, r3, #1
 8021470:	b2db      	uxtb	r3, r3
 8021472:	2b00      	cmp	r3, #0
 8021474:	d038      	beq.n	80214e8 <MainLoop+0xa4>
          && !bDcSyncActive                                               /* DC-Synchronous */
 8021476:	4b2b      	ldr	r3, [pc, #172]	; (8021524 <MainLoop+0xe0>)
 8021478:	781b      	ldrb	r3, [r3, #0]
 802147a:	f083 0301 	eor.w	r3, r3, #1
 802147e:	b2db      	uxtb	r3, r3
 8021480:	2b00      	cmp	r3, #0
 8021482:	d031      	beq.n	80214e8 <MainLoop+0xa4>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 8021484:	4b25      	ldr	r3, [pc, #148]	; (802151c <MainLoop+0xd8>)
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	f083 0301 	eor.w	r3, r3, #1
 802148c:	b2db      	uxtb	r3, r3
 802148e:	2b00      	cmp	r3, #0
 8021490:	d01e      	beq.n	80214d0 <MainLoop+0x8c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 8021492:	f7ff fc11 	bl	8020cb8 <HW_GetALEventRegister>
 8021496:	4603      	mov	r3, r0
 8021498:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 802149a:	88fb      	ldrh	r3, [r7, #6]
 802149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d009      	beq.n	80214b8 <MainLoop+0x74>
                {
                    /* set the flag for the state machine behavior */
                    bEcatFirstOutputsReceived = TRUE;
 80214a4:	4b1e      	ldr	r3, [pc, #120]	; (8021520 <MainLoop+0xdc>)
 80214a6:	2201      	movs	r2, #1
 80214a8:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 80214aa:	4b1f      	ldr	r3, [pc, #124]	; (8021528 <MainLoop+0xe4>)
 80214ac:	781b      	ldrb	r3, [r3, #0]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d00e      	beq.n	80214d0 <MainLoop+0x8c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 80214b2:	f7ff fc5b 	bl	8020d6c <PDO_OutputMapping>
 80214b6:	e00b      	b.n	80214d0 <MainLoop+0x8c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 80214b8:	4b1c      	ldr	r3, [pc, #112]	; (802152c <MainLoop+0xe8>)
 80214ba:	881b      	ldrh	r3, [r3, #0]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d107      	bne.n	80214d0 <MainLoop+0x8c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 80214c0:	88fb      	ldrh	r3, [r7, #6]
 80214c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d002      	beq.n	80214d0 <MainLoop+0x8c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 80214ca:	4b15      	ldr	r3, [pc, #84]	; (8021520 <MainLoop+0xdc>)
 80214cc:	2201      	movs	r2, #1
 80214ce:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

/*ECATCHANGE_START(V5.12) ECAT3*/
            DISABLE_ESC_INT();
 80214d0:	f008 fda0 	bl	802a014 <DISABLE_ESC_INT>
/*ECATCHANGE_END(V5.12) ECAT3*/
             ECAT_Application();
 80214d4:	f000 f832 	bl	802153c <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 80214d8:	4b15      	ldr	r3, [pc, #84]	; (8021530 <MainLoop+0xec>)
 80214da:	781b      	ldrb	r3, [r3, #0]
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d001      	beq.n	80214e4 <MainLoop+0xa0>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 80214e0:	f7ff fbfa 	bl	8020cd8 <PDO_InputMapping>
            }
/*ECATCHANGE_START(V5.12) ECAT3*/
            ENABLE_ESC_INT();
 80214e4:	f008 fd88 	bl	8029ff8 <ENABLE_ESC_INT>
/*ECATCHANGE_END(V5.12) ECAT3*/
        }


/*ECATCHANGE_START(V5.12) COE4*/
        if (u32CheckForDcOverrunCnt >= CHECK_DC_OVERRUN_IN_MS)
 80214e8:	4b12      	ldr	r3, [pc, #72]	; (8021534 <MainLoop+0xf0>)
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80214f0:	d301      	bcc.n	80214f6 <MainLoop+0xb2>
        {
            COE_SyncTimeStamp();
 80214f2:	f7ff f8c1 	bl	8020678 <COE_SyncTimeStamp>
        }
/*ECATCHANGE_END(V5.12) COE4*/

        /* call EtherCAT functions */
        ECAT_Main();
 80214f6:	f002 faf3 	bl	8023ae0 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 80214fa:	f7ff fb0b 	bl	8020b14 <COE_Main>
       CheckIfEcatError();
 80214fe:	f002 f9ed 	bl	80238dc <CheckIfEcatError>


/*ECATCHANGE_START(V5.12) APPL1*/
    if (pAPPL_MainLoop != NULL)
 8021502:	4b0d      	ldr	r3, [pc, #52]	; (8021538 <MainLoop+0xf4>)
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	2b00      	cmp	r3, #0
 8021508:	d002      	beq.n	8021510 <MainLoop+0xcc>
    {
        pAPPL_MainLoop();
 802150a:	4b0b      	ldr	r3, [pc, #44]	; (8021538 <MainLoop+0xf4>)
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	4798      	blx	r3
    }
/*ECATCHANGE_END(V5.12) APPL1*/
}
 8021510:	3708      	adds	r7, #8
 8021512:	46bd      	mov	sp, r7
 8021514:	bd80      	pop	{r7, pc}
 8021516:	bf00      	nop
 8021518:	1ffe9580 	.word	0x1ffe9580
 802151c:	1ffea891 	.word	0x1ffea891
 8021520:	1ffea884 	.word	0x1ffea884
 8021524:	1ffea889 	.word	0x1ffea889
 8021528:	1ffea88a 	.word	0x1ffea88a
 802152c:	1ffea852 	.word	0x1ffea852
 8021530:	1ffea890 	.word	0x1ffea890
 8021534:	1ffea7bc 	.word	0x1ffea7bc
 8021538:	1ffea7fc 	.word	0x1ffea7fc

0802153c <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	af00      	add	r7, sp, #0
        }
    } /* measurement started*/
/*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* (MIN_PD_CYCLE_TIME == 0)*/

    if (MEASUREMENT_ACTIVE)
 8021540:	4b0a      	ldr	r3, [pc, #40]	; (802156c <ECAT_Application+0x30>)
 8021542:	8b9b      	ldrh	r3, [r3, #28]
 8021544:	f003 0301 	and.w	r3, r3, #1
 8021548:	2b00      	cmp	r3, #0
 802154a:	d105      	bne.n	8021558 <ECAT_Application+0x1c>
 802154c:	4b08      	ldr	r3, [pc, #32]	; (8021570 <ECAT_Application+0x34>)
 802154e:	8b9b      	ldrh	r3, [r3, #28]
 8021550:	f003 0301 	and.w	r3, r3, #1
 8021554:	2b00      	cmp	r3, #0
 8021556:	d005      	beq.n	8021564 <ECAT_Application+0x28>
    {
        if (nPdOutputSize == 0)
 8021558:	4b06      	ldr	r3, [pc, #24]	; (8021574 <ECAT_Application+0x38>)
 802155a:	881b      	ldrh	r3, [r3, #0]
 802155c:	2b00      	cmp	r3, #0
 802155e:	d101      	bne.n	8021564 <ECAT_Application+0x28>
        {
            /* in case of an input only device the cycle starts with an ECAT_Application call*/
            HandleCycleTimeMeasurement();
 8021560:	f7ff fcd8 	bl	8020f14 <HandleCycleTimeMeasurement>
        }
    }

    {
        APPL_Application();
 8021564:	f7ff f828 	bl	80205b8 <APPL_Application>
        }

    }/* measurement started*/
/*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* #if MIN_PD_CYCLE_TIME == 0 */
}
 8021568:	bd80      	pop	{r7, pc}
 802156a:	bf00      	nop
 802156c:	1ffea974 	.word	0x1ffea974
 8021570:	1ffea930 	.word	0x1ffea930
 8021574:	1ffea852 	.word	0x1ffea852

08021578 <EEPROM_CommandHandler>:


void EEPROM_CommandHandler(void)
{
 8021578:	b580      	push	{r7, lr}
 802157a:	b088      	sub	sp, #32
 802157c:	af00      	add	r7, sp, #0
   UINT16 Result = 0;
 802157e:	2300      	movs	r3, #0
 8021580:	82fb      	strh	r3, [r7, #22]
    UINT16 EEPROMReg = 0; //Regvalue 0x502 - 0x5003
 8021582:	2300      	movs	r3, #0
 8021584:	83fb      	strh	r3, [r7, #30]

    HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8021586:	4b8e      	ldr	r3, [pc, #568]	; (80217c0 <EEPROM_CommandHandler+0x248>)
 8021588:	881b      	ldrh	r3, [r3, #0]
 802158a:	83fb      	strh	r3, [r7, #30]
    EEPROMReg = SWAPWORD(EEPROMReg);

    if (EEPROMReg & ESC_EEPROM_BUSY_MASK) 
 802158c:	8bfb      	ldrh	r3, [r7, #30]
 802158e:	b21b      	sxth	r3, r3
 8021590:	2b00      	cmp	r3, #0
 8021592:	f280 8112 	bge.w	80217ba <EEPROM_CommandHandler+0x242>
    {
        UINT32 cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 8021596:	8bfb      	ldrh	r3, [r7, #30]
 8021598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802159c:	613b      	str	r3, [r7, #16]
        UINT32 addr;
        
        
        HW_EscReadDWord(addr,ESC_EEPROM_ADDRESS_OFFSET);
 802159e:	4b89      	ldr	r3, [pc, #548]	; (80217c4 <EEPROM_CommandHandler+0x24c>)
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	61bb      	str	r3, [r7, #24]
        addr = SWAPDWORD(addr);

/*ECATCHANGE_START(V5.12) EEPROM1*/
        //Clear error bits (except the eeprom crc error)
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK & ~ESC_EEPROM_ERROR_CRC);
 80215a4:	8bfb      	ldrh	r3, [r7, #30]
 80215a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80215aa:	83fb      	strh	r3, [r7, #30]
/*ECATCHANGE_END(V5.12) EEPROM1*/
        switch (cmd) {
 80215ac:	693b      	ldr	r3, [r7, #16]
 80215ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80215b2:	d00d      	beq.n	80215d0 <EEPROM_CommandHandler+0x58>
 80215b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80215b8:	d803      	bhi.n	80215c2 <EEPROM_CommandHandler+0x4a>
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	f000 80f4 	beq.w	80217a8 <EEPROM_CommandHandler+0x230>
 80215c0:	e0ed      	b.n	802179e <EEPROM_CommandHandler+0x226>
 80215c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80215c6:	d033      	beq.n	8021630 <EEPROM_CommandHandler+0xb8>
 80215c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80215cc:	d061      	beq.n	8021692 <EEPROM_CommandHandler+0x11a>
 80215ce:	e0e6      	b.n	802179e <EEPROM_CommandHandler+0x226>
        case 0x00: //IDLE
            break;
        case ESC_EEPROM_CMD_READ_MASK:
        {
           if (pAPPL_EEPROM_Read != NULL)
 80215d0:	4b7d      	ldr	r3, [pc, #500]	; (80217c8 <EEPROM_CommandHandler+0x250>)
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d00d      	beq.n	80215f4 <EEPROM_CommandHandler+0x7c>
           {
              Result = pAPPL_EEPROM_Read(addr);
 80215d8:	4b7b      	ldr	r3, [pc, #492]	; (80217c8 <EEPROM_CommandHandler+0x250>)
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	69b8      	ldr	r0, [r7, #24]
 80215de:	4798      	blx	r3
 80215e0:	4603      	mov	r3, r0
 80215e2:	82fb      	strh	r3, [r7, #22]
              if (Result > 0)
 80215e4:	8afb      	ldrh	r3, [r7, #22]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d021      	beq.n	802162e <EEPROM_CommandHandler+0xb6>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80215ea:	8bfb      	ldrh	r3, [r7, #30]
 80215ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80215f0:	83fb      	strh	r3, [r7, #30]
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
              }
           }
        }
        break;
 80215f2:	e0da      	b.n	80217aa <EEPROM_CommandHandler+0x232>
              }
           }
           else
           {

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 80215f4:	69bb      	ldr	r3, [r7, #24]
 80215f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80215fa:	d813      	bhi.n	8021624 <EEPROM_CommandHandler+0xac>
 80215fc:	4b73      	ldr	r3, [pc, #460]	; (80217cc <EEPROM_CommandHandler+0x254>)
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	2b00      	cmp	r3, #0
 8021602:	d00f      	beq.n	8021624 <EEPROM_CommandHandler+0xac>
              {
                 UINT16 *pData = (UINT16 *)pEEPROM;
 8021604:	4b71      	ldr	r3, [pc, #452]	; (80217cc <EEPROM_CommandHandler+0x254>)
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	60fb      	str	r3, [r7, #12]
/*ECATCHANGE_START(V5.12) EEPROM1*/
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
 802160a:	69bb      	ldr	r3, [r7, #24]
 802160c:	005b      	lsls	r3, r3, #1
 802160e:	68fa      	ldr	r2, [r7, #12]
 8021610:	441a      	add	r2, r3
 8021612:	4b6f      	ldr	r3, [pc, #444]	; (80217d0 <EEPROM_CommandHandler+0x258>)
 8021614:	881b      	ldrh	r3, [r3, #0]
 8021616:	4610      	mov	r0, r2
 8021618:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 802161c:	461a      	mov	r2, r3
 802161e:	f7ff fb23 	bl	8020c68 <HW_EscWrite>
           }
           else
           {

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
              {
 8021622:	e004      	b.n	802162e <EEPROM_CommandHandler+0xb6>
/*ECATCHANGE_END(V5.12) EEPROM1*/
              }
              else
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021624:	8bfb      	ldrh	r3, [r7, #30]
 8021626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802162a:	83fb      	strh	r3, [r7, #30]
              }
           }
        }
        break;
 802162c:	e0bd      	b.n	80217aa <EEPROM_CommandHandler+0x232>
 802162e:	e0bc      	b.n	80217aa <EEPROM_CommandHandler+0x232>
        case ESC_EEPROM_CMD_WRITE_MASK:
            {
                 if (pAPPL_EEPROM_Write != NULL)
 8021630:	4b68      	ldr	r3, [pc, #416]	; (80217d4 <EEPROM_CommandHandler+0x25c>)
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d00d      	beq.n	8021654 <EEPROM_CommandHandler+0xdc>
                 {
                    Result = pAPPL_EEPROM_Write(addr);
 8021638:	4b66      	ldr	r3, [pc, #408]	; (80217d4 <EEPROM_CommandHandler+0x25c>)
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	69b8      	ldr	r0, [r7, #24]
 802163e:	4798      	blx	r3
 8021640:	4603      	mov	r3, r0
 8021642:	82fb      	strh	r3, [r7, #22]
                    if (Result > 0)
 8021644:	8afb      	ldrh	r3, [r7, #22]
 8021646:	2b00      	cmp	r3, #0
 8021648:	d01e      	beq.n	8021688 <EEPROM_CommandHandler+0x110>
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 802164a:	8bfb      	ldrh	r3, [r7, #30]
 802164c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021650:	83fb      	strh	r3, [r7, #30]
 8021652:	e019      	b.n	8021688 <EEPROM_CommandHandler+0x110>
                    }
                 }
                 else
                 {

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8021654:	69bb      	ldr	r3, [r7, #24]
 8021656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802165a:	d811      	bhi.n	8021680 <EEPROM_CommandHandler+0x108>
 802165c:	4b5b      	ldr	r3, [pc, #364]	; (80217cc <EEPROM_CommandHandler+0x254>)
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	2b00      	cmp	r3, #0
 8021662:	d00d      	beq.n	8021680 <EEPROM_CommandHandler+0x108>
                    {
                       UINT16 *pData = (UINT16 *)pEEPROM;
 8021664:	4b59      	ldr	r3, [pc, #356]	; (80217cc <EEPROM_CommandHandler+0x254>)
 8021666:	681b      	ldr	r3, [r3, #0]
 8021668:	60bb      	str	r3, [r7, #8]
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
 802166a:	69bb      	ldr	r3, [r7, #24]
 802166c:	005b      	lsls	r3, r3, #1
 802166e:	68ba      	ldr	r2, [r7, #8]
 8021670:	4413      	add	r3, r2
 8021672:	4618      	mov	r0, r3
 8021674:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8021678:	2202      	movs	r2, #2
 802167a:	f7ff facd 	bl	8020c18 <HW_EscRead>
                 }
                 else
                 {

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                    {
 802167e:	e003      	b.n	8021688 <EEPROM_CommandHandler+0x110>
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
                    }
                    else
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021680:	8bfb      	ldrh	r3, [r7, #30]
 8021682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021686:	83fb      	strh	r3, [r7, #30]
                    }
                 }

/*ECATCHANGE_START(V5.12) EEPROM3*/
                 /* init the Store EEPROM timeout value (will be reset after the timer has expired)*/
                 u16EepromStoreTimeoutValue = 1000;
 8021688:	4b53      	ldr	r3, [pc, #332]	; (80217d8 <EEPROM_CommandHandler+0x260>)
 802168a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802168e:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) EEPROM3*/

            }
            break;
 8021690:	e08b      	b.n	80217aa <EEPROM_CommandHandler+0x232>
        case ESC_EEPROM_CMD_RELOAD_MASK:
/* ECATCHANGE_START(V5.12) EEPROM2*/
            if (EepromReadSize == 8)
 8021692:	4b4f      	ldr	r3, [pc, #316]	; (80217d0 <EEPROM_CommandHandler+0x258>)
 8021694:	881b      	ldrh	r3, [r3, #0]
 8021696:	2b08      	cmp	r3, #8
 8021698:	d150      	bne.n	802173c <EEPROM_CommandHandler+0x1c4>
            {
                /* "full" EEPROM emulation ( 8Bytes EEPROM data) */
                do
                {
                    if (addr > ESC_EEPROM_SIZE)
 802169a:	69bb      	ldr	r3, [r7, #24]
 802169c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80216a0:	d904      	bls.n	80216ac <EEPROM_CommandHandler+0x134>
                    {
                        //Set Error
                        EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80216a2:	8bfb      	ldrh	r3, [r7, #30]
 80216a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80216a8:	83fb      	strh	r3, [r7, #30]
                        break;
 80216aa:	e046      	b.n	802173a <EEPROM_CommandHandler+0x1c2>
                    }
                    else
                    {
                        if (pAPPL_EEPROM_Read != NULL)
 80216ac:	4b46      	ldr	r3, [pc, #280]	; (80217c8 <EEPROM_CommandHandler+0x250>)
 80216ae:	681b      	ldr	r3, [r3, #0]
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d00d      	beq.n	80216d0 <EEPROM_CommandHandler+0x158>
                        {
                            Result = pAPPL_EEPROM_Read(addr);
 80216b4:	4b44      	ldr	r3, [pc, #272]	; (80217c8 <EEPROM_CommandHandler+0x250>)
 80216b6:	681b      	ldr	r3, [r3, #0]
 80216b8:	69b8      	ldr	r0, [r7, #24]
 80216ba:	4798      	blx	r3
 80216bc:	4603      	mov	r3, r0
 80216be:	82fb      	strh	r3, [r7, #22]
                            if (Result > 0)
 80216c0:	8afb      	ldrh	r3, [r7, #22]
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	d021      	beq.n	802170a <EEPROM_CommandHandler+0x192>
                            {
                                //Set Error
                                EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80216c6:	8bfb      	ldrh	r3, [r7, #30]
 80216c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80216cc:	83fb      	strh	r3, [r7, #30]
                                break;
 80216ce:	e034      	b.n	802173a <EEPROM_CommandHandler+0x1c2>
                            }
                        }
                        else
                        {
                            if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 80216d0:	69bb      	ldr	r3, [r7, #24]
 80216d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80216d6:	d813      	bhi.n	8021700 <EEPROM_CommandHandler+0x188>
 80216d8:	4b3c      	ldr	r3, [pc, #240]	; (80217cc <EEPROM_CommandHandler+0x254>)
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d00f      	beq.n	8021700 <EEPROM_CommandHandler+0x188>
                            {
                                UINT16 *pData = (UINT16 *)pEEPROM;
 80216e0:	4b3a      	ldr	r3, [pc, #232]	; (80217cc <EEPROM_CommandHandler+0x254>)
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	607b      	str	r3, [r7, #4]
                                HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
 80216e6:	69bb      	ldr	r3, [r7, #24]
 80216e8:	005b      	lsls	r3, r3, #1
 80216ea:	687a      	ldr	r2, [r7, #4]
 80216ec:	441a      	add	r2, r3
 80216ee:	4b38      	ldr	r3, [pc, #224]	; (80217d0 <EEPROM_CommandHandler+0x258>)
 80216f0:	881b      	ldrh	r3, [r3, #0]
 80216f2:	4610      	mov	r0, r2
 80216f4:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80216f8:	461a      	mov	r2, r3
 80216fa:	f7ff fab5 	bl	8020c68 <HW_EscWrite>
                            }
                        }
                        else
                        {
                            if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                            {
 80216fe:	e004      	b.n	802170a <EEPROM_CommandHandler+0x192>
                                HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
                            }
                            else
                            {
                                //Set Error
                                EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021700:	8bfb      	ldrh	r3, [r7, #30]
 8021702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021706:	83fb      	strh	r3, [r7, #30]
                                break;
 8021708:	e017      	b.n	802173a <EEPROM_CommandHandler+0x1c2>
                            }
                        }

                        //Clear error bits
                        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
 802170a:	8bfb      	ldrh	r3, [r7, #30]
 802170c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8021710:	83fb      	strh	r3, [r7, #30]

                        //ack current reload segment
                        UINT16 TmpData = SWAPWORD(EEPROMReg);
 8021712:	8bfb      	ldrh	r3, [r7, #30]
 8021714:	807b      	strh	r3, [r7, #2]
                        HW_EscWriteWord(TmpData, ESC_EEPROM_CONTROL_OFFSET);
 8021716:	4a2a      	ldr	r2, [pc, #168]	; (80217c0 <EEPROM_CommandHandler+0x248>)
 8021718:	887b      	ldrh	r3, [r7, #2]
 802171a:	8013      	strh	r3, [r2, #0]

                        // read EEPROM control (to check if the reload is still pending)
                        HW_EscReadWord(EEPROMReg, ESC_EEPROM_CONTROL_OFFSET);
 802171c:	4b28      	ldr	r3, [pc, #160]	; (80217c0 <EEPROM_CommandHandler+0x248>)
 802171e:	881b      	ldrh	r3, [r3, #0]
 8021720:	83fb      	strh	r3, [r7, #30]
                        EEPROMReg = SWAPWORD(EEPROMReg);
                        cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 8021722:	8bfb      	ldrh	r3, [r7, #30]
 8021724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8021728:	613b      	str	r3, [r7, #16]

                        HW_EscReadDWord(addr, ESC_EEPROM_ADDRESS_OFFSET);
 802172a:	4b26      	ldr	r3, [pc, #152]	; (80217c4 <EEPROM_CommandHandler+0x24c>)
 802172c:	681b      	ldr	r3, [r3, #0]
 802172e:	61bb      	str	r3, [r7, #24]
                        addr = SWAPDWORD(addr);
                    }


                } while (cmd == ESC_EEPROM_CMD_RELOAD_MASK);
 8021730:	693b      	ldr	r3, [r7, #16]
 8021732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021736:	d0b0      	beq.n	802169a <EEPROM_CommandHandler+0x122>
 8021738:	e030      	b.n	802179c <EEPROM_CommandHandler+0x224>
 802173a:	e02f      	b.n	802179c <EEPROM_CommandHandler+0x224>
            {
                /* The case is only called if the "small" EEPROM emulation (4 read bytes) is configured*/
    /* ECATCHANGE_END(V5.12) EEPROM2*/

    /* ECATCHANGE_START(V5.12) EEPROM2*/
                if (pAPPL_EEPROM_Reload != NULL)
 802173c:	4b27      	ldr	r3, [pc, #156]	; (80217dc <EEPROM_CommandHandler+0x264>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	2b00      	cmp	r3, #0
 8021742:	d011      	beq.n	8021768 <EEPROM_CommandHandler+0x1f0>
                {
                    Result = pAPPL_EEPROM_Reload();
 8021744:	4b25      	ldr	r3, [pc, #148]	; (80217dc <EEPROM_CommandHandler+0x264>)
 8021746:	681b      	ldr	r3, [r3, #0]
 8021748:	4798      	blx	r3
 802174a:	4603      	mov	r3, r0
 802174c:	82fb      	strh	r3, [r7, #22]
                    if (Result > 0)
 802174e:	8afb      	ldrh	r3, [r7, #22]
 8021750:	2b00      	cmp	r3, #0
 8021752:	d004      	beq.n	802175e <EEPROM_CommandHandler+0x1e6>
                    {
                        //Set Error
                        EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021754:	8bfb      	ldrh	r3, [r7, #30]
 8021756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802175a:	83fb      	strh	r3, [r7, #30]
 802175c:	e01e      	b.n	802179c <EEPROM_CommandHandler+0x224>
                    }
                    else
                    {
                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
 802175e:	8bfb      	ldrh	r3, [r7, #30]
 8021760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021764:	83fb      	strh	r3, [r7, #30]
                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
                    }
/* ECATCHANGE_END(V5.12) EEPROM2*/
                }
            }
         break;
 8021766:	e020      	b.n	80217aa <EEPROM_CommandHandler+0x232>
                    }
                }
                else
                {

                    Result = HW_EepromReload();
 8021768:	f008 fbee 	bl	8029f48 <HW_EepromReload>
 802176c:	4603      	mov	r3, r0
 802176e:	82fb      	strh	r3, [r7, #22]
                    if (Result != 0 || (pEEPROM == NULL))
 8021770:	8afb      	ldrh	r3, [r7, #22]
 8021772:	2b00      	cmp	r3, #0
 8021774:	d103      	bne.n	802177e <EEPROM_CommandHandler+0x206>
 8021776:	4b15      	ldr	r3, [pc, #84]	; (80217cc <EEPROM_CommandHandler+0x254>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d104      	bne.n	8021788 <EEPROM_CommandHandler+0x210>
                    {
                        EEPROMReg |= ESC_EEPROM_ERROR_CRC;
 802177e:	8bfb      	ldrh	r3, [r7, #30]
 8021780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021784:	83fb      	strh	r3, [r7, #30]
 8021786:	e009      	b.n	802179c <EEPROM_CommandHandler+0x224>
                    }
                    else
                    {
                        //copy the configured station alias
                        HW_EscWriteWord(((UINT16 *)pEEPROM)[0x4], ESC_EEPROM_DATA_OFFSET);
 8021788:	4a15      	ldr	r2, [pc, #84]	; (80217e0 <EEPROM_CommandHandler+0x268>)
 802178a:	4b10      	ldr	r3, [pc, #64]	; (80217cc <EEPROM_CommandHandler+0x254>)
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	891b      	ldrh	r3, [r3, #8]
 8021790:	8013      	strh	r3, [r2, #0]

                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
 8021792:	8bfb      	ldrh	r3, [r7, #30]
 8021794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021798:	83fb      	strh	r3, [r7, #30]
                    }
/* ECATCHANGE_END(V5.12) EEPROM2*/
                }
            }
         break;
 802179a:	e006      	b.n	80217aa <EEPROM_CommandHandler+0x232>
 802179c:	e005      	b.n	80217aa <EEPROM_CommandHandler+0x232>
        default:
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 802179e:	8bfb      	ldrh	r3, [r7, #30]
 80217a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80217a4:	83fb      	strh	r3, [r7, #30]
            break;
 80217a6:	e000      	b.n	80217aa <EEPROM_CommandHandler+0x232>
        //Clear error bits (except the eeprom crc error)
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK & ~ESC_EEPROM_ERROR_CRC);
/*ECATCHANGE_END(V5.12) EEPROM1*/
        switch (cmd) {
        case 0x00: //IDLE
            break;
 80217a8:	bf00      	nop
            break;
        }

/*ECATCHANGE_START(V5.12) EEPROM3*/
        /* reset the store eeprom timeout counter*/
        u16EepromStoreTimeoutCounter = 0;
 80217aa:	4b0e      	ldr	r3, [pc, #56]	; (80217e4 <EEPROM_CommandHandler+0x26c>)
 80217ac:	2200      	movs	r2, #0
 80217ae:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) EEPROM3*/

        {
        UINT16 TmpData = SWAPWORD(EEPROMReg);
 80217b0:	8bfb      	ldrh	r3, [r7, #30]
 80217b2:	803b      	strh	r3, [r7, #0]
        HW_EscWriteWord(TmpData,ESC_EEPROM_CONTROL_OFFSET);
 80217b4:	4a02      	ldr	r2, [pc, #8]	; (80217c0 <EEPROM_CommandHandler+0x248>)
 80217b6:	883b      	ldrh	r3, [r7, #0]
 80217b8:	8013      	strh	r3, [r2, #0]
        }
    }
}
 80217ba:	3720      	adds	r7, #32
 80217bc:	46bd      	mov	sp, r7
 80217be:	bd80      	pop	{r7, pc}
 80217c0:	54010502 	.word	0x54010502
 80217c4:	54010504 	.word	0x54010504
 80217c8:	1ffea7cc 	.word	0x1ffea7cc
 80217cc:	1ffea814 	.word	0x1ffea814
 80217d0:	1ffea7f6 	.word	0x1ffea7f6
 80217d4:	1ffea7d0 	.word	0x1ffea7d0
 80217d8:	1ffea828 	.word	0x1ffea828
 80217dc:	1ffea820 	.word	0x1ffea820
 80217e0:	54010508 	.word	0x54010508
 80217e4:	1ffea7f4 	.word	0x1ffea7f4

080217e8 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 80217e8:	b480      	push	{r7}
 80217ea:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 80217ec:	4b04      	ldr	r3, [pc, #16]	; (8021800 <COE_Init+0x18>)
 80217ee:	2200      	movs	r2, #0
 80217f0:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 80217f2:	4b04      	ldr	r3, [pc, #16]	; (8021804 <COE_Init+0x1c>)
 80217f4:	2200      	movs	r2, #0
 80217f6:	801a      	strh	r2, [r3, #0]
}
 80217f8:	46bd      	mov	sp, r7
 80217fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217fe:	4770      	bx	lr
 8021800:	1ffea830 	.word	0x1ffea830
 8021804:	1ffea9e0 	.word	0x1ffea9e0

08021808 <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8021808:	b580      	push	{r7, lr}
 802180a:	b084      	sub	sp, #16
 802180c:	af00      	add	r7, sp, #0
 802180e:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8021810:	2300      	movs	r3, #0
 8021812:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	88db      	ldrh	r3, [r3, #6]
 8021818:	0b1b      	lsrs	r3, r3, #12
 802181a:	b29b      	uxth	r3, r3
 802181c:	3b01      	subs	r3, #1
 802181e:	2b07      	cmp	r3, #7
 8021820:	d821      	bhi.n	8021866 <COE_ServiceInd+0x5e>
 8021822:	a201      	add	r2, pc, #4	; (adr r2, 8021828 <COE_ServiceInd+0x20>)
 8021824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021828:	08021861 	.word	0x08021861
 802182c:	08021849 	.word	0x08021849
 8021830:	08021861 	.word	0x08021861
 8021834:	08021861 	.word	0x08021861
 8021838:	08021861 	.word	0x08021861
 802183c:	08021861 	.word	0x08021861
 8021840:	08021861 	.word	0x08021861
 8021844:	08021855 	.word	0x08021855
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 8021848:	6878      	ldr	r0, [r7, #4]
 802184a:	f004 fcef 	bl	802622c <SDOS_SdoInd>
 802184e:	4603      	mov	r3, r0
 8021850:	73fb      	strb	r3, [r7, #15]
        break;
 8021852:	e00b      	b.n	802186c <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8021854:	6878      	ldr	r0, [r7, #4]
 8021856:	f005 f8c9 	bl	80269ec <SDOS_SdoInfoInd>
 802185a:	4603      	mov	r3, r0
 802185c:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 802185e:	e005      	b.n	802186c <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8021860:	2304      	movs	r3, #4
 8021862:	73fb      	strb	r3, [r7, #15]
        break;
 8021864:	e002      	b.n	802186c <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8021866:	2305      	movs	r3, #5
 8021868:	73fb      	strb	r3, [r7, #15]
        break;
 802186a:	bf00      	nop
    }
    return result;
 802186c:	7bfb      	ldrb	r3, [r7, #15]
}
 802186e:	4618      	mov	r0, r3
 8021870:	3710      	adds	r7, #16
 8021872:	46bd      	mov	sp, r7
 8021874:	bd80      	pop	{r7, pc}
 8021876:	bf00      	nop

08021878 <COE_ContinueInd>:
 \brief    This function is called when a CoE service to be sent is stored and can
 \brief  be put in the send mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8021878:	b580      	push	{r7, lr}
 802187a:	b082      	sub	sp, #8
 802187c:	af00      	add	r7, sp, #0
 802187e:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8021880:	4b12      	ldr	r3, [pc, #72]	; (80218cc <COE_ContinueInd+0x54>)
 8021882:	681b      	ldr	r3, [r3, #0]
 8021884:	2b00      	cmp	r3, #0
 8021886:	d009      	beq.n	802189c <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 8021888:	4b10      	ldr	r3, [pc, #64]	; (80218cc <COE_ContinueInd+0x54>)
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	4618      	mov	r0, r3
 802188e:	2100      	movs	r1, #0
 8021890:	f002 fe20 	bl	80244d4 <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8021894:	4b0d      	ldr	r3, [pc, #52]	; (80218cc <COE_ContinueInd+0x54>)
 8021896:	2200      	movs	r2, #0
 8021898:	601a      	str	r2, [r3, #0]
 802189a:	e011      	b.n	80218c0 <COE_ContinueInd+0x48>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 802189c:	2080      	movs	r0, #128	; 0x80
 802189e:	f009 f99b 	bl	802abd8 <malloc>
 80218a2:	4603      	mov	r3, r0
 80218a4:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
        if (pMbx == NULL)
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d101      	bne.n	80218b0 <COE_ContinueInd+0x38>
        {
            return MBXERR_NOMOREMEMORY;
 80218ac:	2307      	movs	r3, #7
 80218ae:	e008      	b.n	80218c2 <COE_ContinueInd+0x4a>
        }
        else
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 80218b0:	6878      	ldr	r0, [r7, #4]
 80218b2:	4907      	ldr	r1, [pc, #28]	; (80218d0 <COE_ContinueInd+0x58>)
 80218b4:	220e      	movs	r2, #14
 80218b6:	f009 f9af 	bl	802ac18 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 80218ba:	6878      	ldr	r0, [r7, #4]
 80218bc:	f005 f896 	bl	80269ec <SDOS_SdoInfoInd>
        }
    }

    return 0;
 80218c0:	2300      	movs	r3, #0
}
 80218c2:	4618      	mov	r0, r3
 80218c4:	3708      	adds	r7, #8
 80218c6:	46bd      	mov	sp, r7
 80218c8:	bd80      	pop	{r7, pc}
 80218ca:	bf00      	nop
 80218cc:	1ffea830 	.word	0x1ffea830
 80218d0:	1ffea9f4 	.word	0x1ffea9f4

080218d4 <FOE_Init>:

 \brief    This function initialize the FoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void FOE_Init(void)
{
 80218d4:	b480      	push	{r7}
 80218d6:	af00      	add	r7, sp, #0
    /* no file transmission sequence is running */
    u16FileAccessState    = FOE_READY;
 80218d8:	4b06      	ldr	r3, [pc, #24]	; (80218f4 <FOE_Init+0x20>)
 80218da:	2200      	movs	r2, #0
 80218dc:	801a      	strh	r2, [r3, #0]
    /* initialize the expected packet number */
    u32PacketNo = 0;
 80218de:	4b06      	ldr	r3, [pc, #24]	; (80218f8 <FOE_Init+0x24>)
 80218e0:	2200      	movs	r2, #0
 80218e2:	601a      	str	r2, [r3, #0]
    pFoeSendStored = NULL;
 80218e4:	4b05      	ldr	r3, [pc, #20]	; (80218fc <FOE_Init+0x28>)
 80218e6:	2200      	movs	r2, #0
 80218e8:	601a      	str	r2, [r3, #0]
}
 80218ea:	46bd      	mov	sp, r7
 80218ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218f0:	4770      	bx	lr
 80218f2:	bf00      	nop
 80218f4:	1ffea838 	.word	0x1ffea838
 80218f8:	1ffea83c 	.word	0x1ffea83c
 80218fc:	1ffea840 	.word	0x1ffea840

08021900 <FOE_ServiceInd>:
 \brief    This function is called when a FoE (File Access over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 FOE_ServiceInd(TFOEMBX MBXMEM * pFoeInd)
{
 8021900:	b580      	push	{r7, lr}
 8021902:	b08c      	sub	sp, #48	; 0x30
 8021904:	af00      	add	r7, sp, #0
 8021906:	6078      	str	r0, [r7, #4]
    /* initialize the result of the service checking */
    UINT16 nextState = ECAT_FOE_ERRCODE_ILLEGAL;
 8021908:	f248 0304 	movw	r3, #32772	; 0x8004
 802190c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* dataSize contains the size of the file data */
    UINT16 dataSize = SWAPWORD(pFoeInd->MbxHeader.Length) - FOE_HEADER_SIZE;
 802190e:	687b      	ldr	r3, [r7, #4]
 8021910:	881b      	ldrh	r3, [r3, #0]
 8021912:	b29b      	uxth	r3, r3
 8021914:	3b06      	subs	r3, #6
 8021916:	857b      	strh	r3, [r7, #42]	; 0x2a


    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the FoE service */
    if ( SWAPWORD(pFoeInd->MbxHeader.Length) < FOE_HEADER_SIZE )
 8021918:	687b      	ldr	r3, [r7, #4]
 802191a:	881b      	ldrh	r3, [r3, #0]
 802191c:	b29b      	uxth	r3, r3
 802191e:	2b05      	cmp	r3, #5
 8021920:	d801      	bhi.n	8021926 <FOE_ServiceInd+0x26>
    {
        return MBXERR_SIZETOOSHORT;
 8021922:	2306      	movs	r3, #6
 8021924:	e221      	b.n	8021d6a <FOE_ServiceInd+0x46a>
    }

    switch ( SWAPWORD(pFoeInd->FoeHeader.OpCode) )
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	88db      	ldrh	r3, [r3, #6]
 802192a:	b29b      	uxth	r3, r3
 802192c:	3b01      	subs	r3, #1
 802192e:	2b05      	cmp	r3, #5
 8021930:	f200 80f6 	bhi.w	8021b20 <FOE_ServiceInd+0x220>
 8021934:	a201      	add	r2, pc, #4	; (adr r2, 802193c <FOE_ServiceInd+0x3c>)
 8021936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802193a:	bf00      	nop
 802193c:	08021955 	.word	0x08021955
 8021940:	080219cb 	.word	0x080219cb
 8021944:	08021a13 	.word	0x08021a13
 8021948:	08021a6d 	.word	0x08021a6d
 802194c:	08021ac5 	.word	0x08021ac5
 8021950:	08021af1 	.word	0x08021af1
    {
    case ECAT_FOE_OPCODE_RRQ:
        /* file read is requested */
        if ( u16FileAccessState == FOE_READY )
 8021954:	4b98      	ldr	r3, [pc, #608]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021956:	881b      	ldrh	r3, [r3, #0]
 8021958:	2b00      	cmp	r3, #0
 802195a:	d135      	bne.n	80219c8 <FOE_ServiceInd+0xc8>
        {
/*ECATCHANGE_START(V5.12) FOE2*/
            UINT32 u32Password = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_HIGHWORD]) << 16));
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	891b      	ldrh	r3, [r3, #8]
 8021960:	b29b      	uxth	r3, r3
 8021962:	461a      	mov	r2, r3
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	895b      	ldrh	r3, [r3, #10]
 8021968:	b29b      	uxth	r3, r3
 802196a:	041b      	lsls	r3, r3, #16
 802196c:	4313      	orrs	r3, r2
 802196e:	627b      	str	r3, [r7, #36]	; 0x24
/*ECATCHANGE_END(V5.12) FOE2*/
            /* last FoE sequence was finished, call application function */
/* ECATCHANGE_START(V5.12)*/
            nextState = FOE_Read((UINT16 MBXMEM *)pFoeInd->Data, dataSize, (UINT16*)pFoeInd->Data, u32Password);
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	f103 010c 	add.w	r1, r3, #12
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	330c      	adds	r3, #12
 802197a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 802197c:	4608      	mov	r0, r1
 802197e:	4611      	mov	r1, r2
 8021980:	461a      	mov	r2, r3
 8021982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021984:	f002 f978 	bl	8023c78 <FOE_Read>
 8021988:	4603      	mov	r3, r0
 802198a:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.12)*/

            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = 0;
 802198c:	4b8b      	ldr	r3, [pc, #556]	; (8021bbc <FOE_ServiceInd+0x2bc>)
 802198e:	2200      	movs	r2, #0
 8021990:	601a      	str	r2, [r3, #0]

            if (nextState <= FOE_MAXDATA)
 8021992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021994:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021998:	4293      	cmp	r3, r2
 802199a:	d806      	bhi.n	80219aa <FOE_ServiceInd+0xaa>
            {
                /* the first data packet shall be sent */
                u32PacketNo    = 1;
 802199c:	4b88      	ldr	r3, [pc, #544]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 802199e:	2201      	movs	r2, #1
 80219a0:	601a      	str	r2, [r3, #0]
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset = nextState;
 80219a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80219a4:	4a87      	ldr	r2, [pc, #540]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 80219a6:	6013      	str	r3, [r2, #0]
 80219a8:	e00e      	b.n	80219c8 <FOE_ServiceInd+0xc8>
            }
            else if (nextState <= FOE_MAXBUSY)
 80219aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80219ac:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 80219b0:	4293      	cmp	r3, r2
 80219b2:	d809      	bhi.n	80219c8 <FOE_ServiceInd+0xc8>
            {
                u32PacketNo    = 0;
 80219b4:	4b82      	ldr	r3, [pc, #520]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 80219b6:	2200      	movs	r2, #0
 80219b8:	601a      	str	r2, [r3, #0]
                u32FileOffset = 0;
 80219ba:	4b82      	ldr	r3, [pc, #520]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 80219bc:	2200      	movs	r2, #0
 80219be:	601a      	str	r2, [r3, #0]
                u16FileAccessState = FOE_WAIT_FOR_ACK;
 80219c0:	4b7d      	ldr	r3, [pc, #500]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 80219c2:	2201      	movs	r2, #1
 80219c4:	801a      	strh	r2, [r3, #0]
            }
        }
        break;
 80219c6:	e0ab      	b.n	8021b20 <FOE_ServiceInd+0x220>
 80219c8:	e0aa      	b.n	8021b20 <FOE_ServiceInd+0x220>

    case ECAT_FOE_OPCODE_WRQ:
        /* file write is requested */
        if ( u16FileAccessState == FOE_READY )
 80219ca:	4b7b      	ldr	r3, [pc, #492]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 80219cc:	881b      	ldrh	r3, [r3, #0]
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	d11e      	bne.n	8021a10 <FOE_ServiceInd+0x110>
        {
/*ECATCHANGE_START(V5.12) FOE2*/
            UINT32 u32Password = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.Password[FOE_COMMAND_HIGHWORD]) << 16));
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	891b      	ldrh	r3, [r3, #8]
 80219d6:	b29b      	uxth	r3, r3
 80219d8:	461a      	mov	r2, r3
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	895b      	ldrh	r3, [r3, #10]
 80219de:	b29b      	uxth	r3, r3
 80219e0:	041b      	lsls	r3, r3, #16
 80219e2:	4313      	orrs	r3, r2
 80219e4:	623b      	str	r3, [r7, #32]
/*ECATCHANGE_END(V5.12) FOE2*/
            /* last FoE sequence was finished, call application function */
/* ECATCHANGE_START(V5.12)*/
            nextState = FOE_Write((UINT16 MBXMEM *)pFoeInd->Data, dataSize, u32Password);
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	f103 020c 	add.w	r2, r3, #12
 80219ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80219ee:	4610      	mov	r0, r2
 80219f0:	4619      	mov	r1, r3
 80219f2:	6a3a      	ldr	r2, [r7, #32]
 80219f4:	f002 f964 	bl	8023cc0 <FOE_Write>
 80219f8:	4603      	mov	r3, r0
 80219fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.12)*/
            if ( nextState == 0 )
 80219fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d102      	bne.n	8021a08 <FOE_ServiceInd+0x108>
            {
                /* checking was successful, sent a FoE Ack service */
                nextState = FOE_ACK;
 8021a02:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 8021a06:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
            /* initialize the packet number */
            u32PacketNo    = 0;
 8021a08:	4b6d      	ldr	r3, [pc, #436]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	601a      	str	r2, [r3, #0]
        }
        break;
 8021a0e:	e087      	b.n	8021b20 <FOE_ServiceInd+0x220>
 8021a10:	e086      	b.n	8021b20 <FOE_ServiceInd+0x220>

    case ECAT_FOE_OPCODE_DATA:
        /* file data is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_DATA
 8021a12:	4b69      	ldr	r3, [pc, #420]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021a14:	881b      	ldrh	r3, [r3, #0]
 8021a16:	2b02      	cmp	r3, #2
 8021a18:	d003      	beq.n	8021a22 <FOE_ServiceInd+0x122>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_DATA )
 8021a1a:	4b67      	ldr	r3, [pc, #412]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021a1c:	881b      	ldrh	r3, [r3, #0]
 8021a1e:	2b06      	cmp	r3, #6
 8021a20:	d123      	bne.n	8021a6a <FOE_ServiceInd+0x16a>
        {
/*ECATCHANGE_START(V5.12) FOE2*/
            UINT32 u32CmdPacketNo = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD]) << 16));
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	891b      	ldrh	r3, [r3, #8]
 8021a26:	b29b      	uxth	r3, r3
 8021a28:	461a      	mov	r2, r3
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	895b      	ldrh	r3, [r3, #10]
 8021a2e:	b29b      	uxth	r3, r3
 8021a30:	041b      	lsls	r3, r3, #16
 8021a32:	4313      	orrs	r3, r2
 8021a34:	61fb      	str	r3, [r7, #28]
/*ECATCHANGE_END(V5.12) FOE2*/

            /* we are waiting for file data, service is correct */
            if ( u32CmdPacketNo == u32PacketNo )
 8021a36:	4b62      	ldr	r3, [pc, #392]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	69fa      	ldr	r2, [r7, #28]
 8021a3c:	429a      	cmp	r2, r3
 8021a3e:	d110      	bne.n	8021a62 <FOE_ServiceInd+0x162>
            {
                /* the packet number is correct, call application function to store the file data */
/* ECATCHANGE_START(V5.12)*/
                nextState = FOE_Data((UINT16 MBXMEM *)pFoeInd->Data, dataSize);
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	f103 020c 	add.w	r2, r3, #12
 8021a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021a48:	4610      	mov	r0, r2
 8021a4a:	4619      	mov	r1, r3
 8021a4c:	f002 f958 	bl	8023d00 <FOE_Data>
 8021a50:	4603      	mov	r3, r0
 8021a52:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.12)*/
                if ( nextState == 0 )
 8021a54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d107      	bne.n	8021a6a <FOE_ServiceInd+0x16a>
                {
                    /* checking was successful, sent a FoE Ack service */
                    nextState = FOE_ACK;
 8021a5a:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 8021a5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
            else
            {
                nextState = ECAT_FOE_ERRCODE_PACKENO;
            }
        }
        break;
 8021a60:	e05e      	b.n	8021b20 <FOE_ServiceInd+0x220>
                    nextState = FOE_ACK;
                }
            }
            else
            {
                nextState = ECAT_FOE_ERRCODE_PACKENO;
 8021a62:	f248 0305 	movw	r3, #32773	; 0x8005
 8021a66:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
        }
        break;
 8021a68:	e05a      	b.n	8021b20 <FOE_ServiceInd+0x220>
 8021a6a:	e059      	b.n	8021b20 <FOE_ServiceInd+0x220>

    case ECAT_FOE_OPCODE_ACK:
        /* acknowledge is received, next file part can be sent */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK )
 8021a6c:	4b52      	ldr	r3, [pc, #328]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021a6e:	881b      	ldrh	r3, [r3, #0]
 8021a70:	2b01      	cmp	r3, #1
 8021a72:	d11e      	bne.n	8021ab2 <FOE_ServiceInd+0x1b2>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to get the next part of the file */
/* ECATCHANGE_START(V5.12)*/
            nextState = FOE_Ack( u32FileOffset, (UINT16 MBXMEM *)pFoeInd->Data );
 8021a74:	4b53      	ldr	r3, [pc, #332]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 8021a76:	681a      	ldr	r2, [r3, #0]
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	330c      	adds	r3, #12
 8021a7c:	4610      	mov	r0, r2
 8021a7e:	4619      	mov	r1, r3
 8021a80:	f002 f956 	bl	8023d30 <FOE_Ack>
 8021a84:	4603      	mov	r3, r0
 8021a86:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.12)*/
            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = u32FileOffset;
 8021a88:	4b4e      	ldr	r3, [pc, #312]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	4a4b      	ldr	r2, [pc, #300]	; (8021bbc <FOE_ServiceInd+0x2bc>)
 8021a8e:	6013      	str	r3, [r2, #0]

            if (nextState <= FOE_MAXDATA) 
 8021a90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021a92:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021a96:	4293      	cmp	r3, r2
 8021a98:	d813      	bhi.n	8021ac2 <FOE_ServiceInd+0x1c2>
            {
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset += nextState;
 8021a9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8021a9c:	4b49      	ldr	r3, [pc, #292]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	4413      	add	r3, r2
 8021aa2:	4a48      	ldr	r2, [pc, #288]	; (8021bc4 <FOE_ServiceInd+0x2c4>)
 8021aa4:	6013      	str	r3, [r2, #0]
                /* increment the packet number */
                u32PacketNo++;
 8021aa6:	4b46      	ldr	r3, [pc, #280]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	3301      	adds	r3, #1
 8021aac:	4a44      	ldr	r2, [pc, #272]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 8021aae:	6013      	str	r3, [r2, #0]
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
        {
            /* we were waiting for the last acknowledge, now the sequence is finished */
            nextState = FOE_FINISHED_NOACK;
        }
        break;
 8021ab0:	e036      	b.n	8021b20 <FOE_ServiceInd+0x220>
                u32FileOffset += nextState;
                /* increment the packet number */
                u32PacketNo++;
            }
        }
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 8021ab2:	4b41      	ldr	r3, [pc, #260]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021ab4:	881b      	ldrh	r3, [r3, #0]
 8021ab6:	2b04      	cmp	r3, #4
 8021ab8:	d103      	bne.n	8021ac2 <FOE_ServiceInd+0x1c2>
        {
            /* we were waiting for the last acknowledge, now the sequence is finished */
            nextState = FOE_FINISHED_NOACK;
 8021aba:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8021abe:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 8021ac0:	e02e      	b.n	8021b20 <FOE_ServiceInd+0x220>
 8021ac2:	e02d      	b.n	8021b20 <FOE_ServiceInd+0x220>

    case ECAT_FOE_OPCODE_ERR:
        /* a FoE Error service is received */
        if ( u16FileAccessState != FOE_READY )
 8021ac4:	4b3c      	ldr	r3, [pc, #240]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021ac6:	881b      	ldrh	r3, [r3, #0]
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d010      	beq.n	8021aee <FOE_ServiceInd+0x1ee>
        {
/*ECATCHANGE_START(V5.12) FOE2*/
            UINT32 u32CmdErrorCode = SWAPDWORD((((UINT32)pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_LOWWORD]) | ((UINT32)pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_HIGHWORD]) << 16));
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	891b      	ldrh	r3, [r3, #8]
 8021ad0:	b29b      	uxth	r3, r3
 8021ad2:	461a      	mov	r2, r3
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	895b      	ldrh	r3, [r3, #10]
 8021ad8:	b29b      	uxth	r3, r3
 8021ada:	041b      	lsls	r3, r3, #16
 8021adc:	4313      	orrs	r3, r2
 8021ade:	61bb      	str	r3, [r7, #24]
/*ECATCHANGE_END(V5.12) FOE2*/

            /* a file transmission sequence is active, inform the application, that this sequence
               was stopped */
            FOE_Error( u32CmdErrorCode );
 8021ae0:	69b8      	ldr	r0, [r7, #24]
 8021ae2:	f002 f953 	bl	8023d8c <FOE_Error>

            nextState = FOE_FINISHED;
 8021ae6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021aea:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 8021aec:	e018      	b.n	8021b20 <FOE_ServiceInd+0x220>
 8021aee:	e017      	b.n	8021b20 <FOE_ServiceInd+0x220>

    case ECAT_FOE_OPCODE_BUSY:
        /* a FoE Busy service is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK
 8021af0:	4b31      	ldr	r3, [pc, #196]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021af2:	881b      	ldrh	r3, [r3, #0]
 8021af4:	2b01      	cmp	r3, #1
 8021af6:	d003      	beq.n	8021b00 <FOE_ServiceInd+0x200>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 8021af8:	4b2f      	ldr	r3, [pc, #188]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021afa:	881b      	ldrh	r3, [r3, #0]
 8021afc:	2b04      	cmp	r3, #4
 8021afe:	d10e      	bne.n	8021b1e <FOE_ServiceInd+0x21e>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to resend the last part of the file */
/* ECATCHANGE_START(V5.12)*/
            nextState = FOE_Busy( SWAPWORD(pFoeInd->FoeHeader.Cmd.Busy.Done), u32LastFileOffset, (UINT16 MBXMEM *)pFoeInd->Data );
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	891b      	ldrh	r3, [r3, #8]
 8021b04:	b299      	uxth	r1, r3
 8021b06:	4b2d      	ldr	r3, [pc, #180]	; (8021bbc <FOE_ServiceInd+0x2bc>)
 8021b08:	681a      	ldr	r2, [r3, #0]
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	330c      	adds	r3, #12
 8021b0e:	4608      	mov	r0, r1
 8021b10:	4611      	mov	r1, r2
 8021b12:	461a      	mov	r2, r3
 8021b14:	f002 f92a 	bl	8023d6c <FOE_Busy>
 8021b18:	4603      	mov	r3, r0
 8021b1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.12)*/
        }
        break;
 8021b1c:	e7ff      	b.n	8021b1e <FOE_ServiceInd+0x21e>
 8021b1e:	bf00      	nop

    }

    if ( nextState <= FOE_MAXDATA )
 8021b20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021b22:	f647 7295 	movw	r2, #32661	; 0x7f95
 8021b26:	4293      	cmp	r3, r2
 8021b28:	d825      	bhi.n	8021b76 <FOE_ServiceInd+0x276>
    {
        /* we send DATA and wait for ACK */
        UINT32 d = SWAPDWORD(u32PacketNo);
 8021b2a:	4b25      	ldr	r3, [pc, #148]	; (8021bc0 <FOE_ServiceInd+0x2c0>)
 8021b2c:	681b      	ldr	r3, [r3, #0]
 8021b2e:	60bb      	str	r3, [r7, #8]

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode           = SWAPWORD(ECAT_FOE_OPCODE_DATA);
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	2200      	movs	r2, #0
 8021b34:	f042 0203 	orr.w	r2, r2, #3
 8021b38:	719a      	strb	r2, [r3, #6]
 8021b3a:	2200      	movs	r2, #0
 8021b3c:	71da      	strb	r2, [r3, #7]
        /* store the packet number in the mailbox buffer */
/*ECATCHANGE_START(V5.12) FOE2*/
        pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
 8021b3e:	68bb      	ldr	r3, [r7, #8]
 8021b40:	b29a      	uxth	r2, r3
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	811a      	strh	r2, [r3, #8]
        pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
 8021b46:	68bb      	ldr	r3, [r7, #8]
 8021b48:	0c1b      	lsrs	r3, r3, #16
 8021b4a:	b29a      	uxth	r2, r3
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	815a      	strh	r2, [r3, #10]
/*ECATCHANGE_END(V5.12) FOE2*/
     
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length           = FOE_HEADER_SIZE + nextState;
 8021b50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021b52:	3306      	adds	r3, #6
 8021b54:	b29a      	uxth	r2, r3
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	801a      	strh	r2, [r3, #0]

        if ( nextState == u16SendMbxSize - FOE_HEADER_SIZE - MBX_HEADER_SIZE )
 8021b5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8021b5c:	4b1a      	ldr	r3, [pc, #104]	; (8021bc8 <FOE_ServiceInd+0x2c8>)
 8021b5e:	881b      	ldrh	r3, [r3, #0]
 8021b60:	3b0c      	subs	r3, #12
 8021b62:	429a      	cmp	r2, r3
 8021b64:	d103      	bne.n	8021b6e <FOE_ServiceInd+0x26e>
        {
            /* packets still following, we wait for an ACK */
            u16FileAccessState = FOE_WAIT_FOR_ACK;
 8021b66:	4b14      	ldr	r3, [pc, #80]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021b68:	2201      	movs	r2, #1
 8021b6a:	801a      	strh	r2, [r3, #0]
 8021b6c:	e0c8      	b.n	8021d00 <FOE_ServiceInd+0x400>
        }
        else
        {
            /* it was the last Packet, we wait for the last ACK */
            u16FileAccessState = FOE_WAIT_FOR_LAST_ACK;
 8021b6e:	4b12      	ldr	r3, [pc, #72]	; (8021bb8 <FOE_ServiceInd+0x2b8>)
 8021b70:	2204      	movs	r2, #4
 8021b72:	801a      	strh	r2, [r3, #0]
 8021b74:	e0c4      	b.n	8021d00 <FOE_ServiceInd+0x400>
        }
    }
    else if ( nextState <= FOE_MAXBUSY )
 8021b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021b78:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 8021b7c:	4293      	cmp	r3, r2
 8021b7e:	d825      	bhi.n	8021bcc <FOE_ServiceInd+0x2cc>
    {
        /* we are still storing the received file data (in flash for example) and
           send BUSY and wait for the DATA to be sent again */
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_BUSY);
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	2200      	movs	r2, #0
 8021b84:	f042 0206 	orr.w	r2, r2, #6
 8021b88:	719a      	strb	r2, [r3, #6]
 8021b8a:	2200      	movs	r2, #0
 8021b8c:	71da      	strb	r2, [r3, #7]
        /* store the information how much progress we made until we can receive file data again */
        pFoeInd->FoeHeader.Cmd.Busy.Done            = SWAPWORD(nextState-FOE_MAXBUSY_ZERO);
 8021b8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021b90:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8021b94:	3b16      	subs	r3, #22
 8021b96:	b29a      	uxth	r2, r3
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	811a      	strh	r2, [r3, #8]

        pFoeInd->FoeHeader.Cmd.Busy.Entire          = 0;
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	2200      	movs	r2, #0
 8021ba0:	729a      	strb	r2, [r3, #10]
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	72da      	strb	r2, [r3, #11]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	2200      	movs	r2, #0
 8021baa:	f042 0206 	orr.w	r2, r2, #6
 8021bae:	701a      	strb	r2, [r3, #0]
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	705a      	strb	r2, [r3, #1]
 8021bb4:	e0a4      	b.n	8021d00 <FOE_ServiceInd+0x400>
 8021bb6:	bf00      	nop
 8021bb8:	1ffea838 	.word	0x1ffea838
 8021bbc:	1ffea844 	.word	0x1ffea844
 8021bc0:	1ffea83c 	.word	0x1ffea83c
 8021bc4:	1ffea834 	.word	0x1ffea834
 8021bc8:	1ffea914 	.word	0x1ffea914
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
 8021bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021bce:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8021bd2:	4293      	cmp	r3, r2
 8021bd4:	d004      	beq.n	8021be0 <FOE_ServiceInd+0x2e0>
 8021bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021bd8:	f647 72fc 	movw	r2, #32764	; 0x7ffc
 8021bdc:	4293      	cmp	r3, r2
 8021bde:	d12b      	bne.n	8021c38 <FOE_ServiceInd+0x338>
    {
        /* we send ACK and wait for DATA
            the next file data is expected with an incremented packet number, but
            we have to acknowledge the old packet first */
        UINT32 d = SWAPDWORD(u32PacketNo);
 8021be0:	4b64      	ldr	r3, [pc, #400]	; (8021d74 <FOE_ServiceInd+0x474>)
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	60fb      	str	r3, [r7, #12]
        u32PacketNo++;
 8021be6:	4b63      	ldr	r3, [pc, #396]	; (8021d74 <FOE_ServiceInd+0x474>)
 8021be8:	681b      	ldr	r3, [r3, #0]
 8021bea:	3301      	adds	r3, #1
 8021bec:	4a61      	ldr	r2, [pc, #388]	; (8021d74 <FOE_ServiceInd+0x474>)
 8021bee:	6013      	str	r3, [r2, #0]
        
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_ACK);
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	f042 0204 	orr.w	r2, r2, #4
 8021bf8:	719a      	strb	r2, [r3, #6]
 8021bfa:	2200      	movs	r2, #0
 8021bfc:	71da      	strb	r2, [r3, #7]
        /* store the packet number in the mailbox buffer */
/*ECATCHANGE_START(V5.12) FOE2*/
        pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
 8021bfe:	68fb      	ldr	r3, [r7, #12]
 8021c00:	b29a      	uxth	r2, r3
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	811a      	strh	r2, [r3, #8]
        pFoeInd->FoeHeader.Cmd.PacketNo[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
 8021c06:	68fb      	ldr	r3, [r7, #12]
 8021c08:	0c1b      	lsrs	r3, r3, #16
 8021c0a:	b29a      	uxth	r2, r3
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	815a      	strh	r2, [r3, #10]
/*ECATCHANGE_END(V5.12) FOE2*/

        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	2200      	movs	r2, #0
 8021c14:	f042 0206 	orr.w	r2, r2, #6
 8021c18:	701a      	strb	r2, [r3, #0]
 8021c1a:	2200      	movs	r2, #0
 8021c1c:	705a      	strb	r2, [r3, #1]

        /* we wait for the next data part */
        if ( nextState == FOE_ACK )
 8021c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021c20:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8021c24:	4293      	cmp	r3, r2
 8021c26:	d103      	bne.n	8021c30 <FOE_ServiceInd+0x330>
        {
            /* we wait for the next data part */
            u16FileAccessState = FOE_WAIT_FOR_DATA;
 8021c28:	4b53      	ldr	r3, [pc, #332]	; (8021d78 <FOE_ServiceInd+0x478>)
 8021c2a:	2202      	movs	r2, #2
 8021c2c:	801a      	strh	r2, [r3, #0]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
    {
 8021c2e:	e067      	b.n	8021d00 <FOE_ServiceInd+0x400>
            u16FileAccessState = FOE_WAIT_FOR_DATA;
        }
        else
        {
            /* the last data part was received */
            u16FileAccessState = FOE_READY;
 8021c30:	4b51      	ldr	r3, [pc, #324]	; (8021d78 <FOE_ServiceInd+0x478>)
 8021c32:	2200      	movs	r2, #0
 8021c34:	801a      	strh	r2, [r3, #0]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
    {
 8021c36:	e063      	b.n	8021d00 <FOE_ServiceInd+0x400>
        {
            /* the last data part was received */
            u16FileAccessState = FOE_READY;
        }
    }
    else if ( nextState < FOE_ERROR )
 8021c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021c3a:	b21b      	sxth	r3, r3
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	db07      	blt.n	8021c50 <FOE_ServiceInd+0x350>
    {
        /* the file transmission sequence is finished, we have to send nothing */
        u16FileAccessState = FOE_READY;
 8021c40:	4b4d      	ldr	r3, [pc, #308]	; (8021d78 <FOE_ServiceInd+0x478>)
 8021c42:	2200      	movs	r2, #0
 8021c44:	801a      	strh	r2, [r3, #0]
        APPL_FreeMailboxBuffer(pFoeInd);
 8021c46:	6878      	ldr	r0, [r7, #4]
 8021c48:	f008 ffce 	bl	802abe8 <free>
        return 0;
 8021c4c:	2300      	movs	r3, #0
 8021c4e:	e08c      	b.n	8021d6a <FOE_ServiceInd+0x46a>
    }
    else
    {
        UINT32 d = SWAPDWORD(nextState);
 8021c50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021c52:	617b      	str	r3, [r7, #20]
        UINT8 b = 0;
 8021c54:	2300      	movs	r3, #0
 8021c56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                    = SWAPWORD(ECAT_FOE_OPCODE_ERR);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	f042 0205 	orr.w	r2, r2, #5
 8021c62:	719a      	strb	r2, [r3, #6]
 8021c64:	2200      	movs	r2, #0
 8021c66:	71da      	strb	r2, [r3, #7]
        /* store the ErrorCode in the mailbox buffer */
/*ECATCHANGE_START(V5.12) FOE2*/
        pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_LOWWORD] = ((d & 0x0000FFFF));
 8021c68:	697b      	ldr	r3, [r7, #20]
 8021c6a:	b29a      	uxth	r2, r3
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	811a      	strh	r2, [r3, #8]
        pFoeInd->FoeHeader.Cmd.ErrorCode[FOE_COMMAND_HIGHWORD] = ((d & 0xFFFF0000) >> 16);
 8021c70:	697b      	ldr	r3, [r7, #20]
 8021c72:	0c1b      	lsrs	r3, r3, #16
 8021c74:	b29a      	uxth	r2, r3
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	815a      	strh	r2, [r3, #10]
/*ECATCHANGE_END(V5.12) FOE2*/

        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	f042 0206 	orr.w	r2, r2, #6
 8021c82:	701a      	strb	r2, [r3, #0]
 8021c84:	2200      	movs	r2, #0
 8021c86:	705a      	strb	r2, [r3, #1]

        /* Error Text is returned in pFoeInd->Data */
        while (b < 32)
 8021c88:	e023      	b.n	8021cd2 <FOE_ServiceInd+0x3d2>
        {
            UINT16 data = ((UINT16 MBXMEM *) pFoeInd->Data)[(b >> 1)];
 8021c8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021c8e:	085b      	lsrs	r3, r3, #1
 8021c90:	b2db      	uxtb	r3, r3
 8021c92:	687a      	ldr	r2, [r7, #4]
 8021c94:	1d19      	adds	r1, r3, #4
 8021c96:	004b      	lsls	r3, r1, #1
 8021c98:	4413      	add	r3, r2
 8021c9a:	7918      	ldrb	r0, [r3, #4]
 8021c9c:	004b      	lsls	r3, r1, #1
 8021c9e:	4413      	add	r3, r2
 8021ca0:	795b      	ldrb	r3, [r3, #5]
 8021ca2:	021b      	lsls	r3, r3, #8
 8021ca4:	4303      	orrs	r3, r0
 8021ca6:	827b      	strh	r3, [r7, #18]

            if ((data & 0x00FF) == 0)
 8021ca8:	8a7b      	ldrh	r3, [r7, #18]
 8021caa:	b2db      	uxtb	r3, r3
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d100      	bne.n	8021cb2 <FOE_ServiceInd+0x3b2>
            {
                break;
 8021cb0:	e013      	b.n	8021cda <FOE_ServiceInd+0x3da>
            }
            b++;
 8021cb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        
            if ((data & 0xFF00) == 0)
 8021cbc:	8a7b      	ldrh	r3, [r7, #18]
 8021cbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d100      	bne.n	8021cc8 <FOE_ServiceInd+0x3c8>
            {
                break;
 8021cc6:	e008      	b.n	8021cda <FOE_ServiceInd+0x3da>
            }
            b++;
 8021cc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021ccc:	3301      	adds	r3, #1
 8021cce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);

        /* Error Text is returned in pFoeInd->Data */
        while (b < 32)
 8021cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021cd6:	2b1f      	cmp	r3, #31
 8021cd8:	d9d7      	bls.n	8021c8a <FOE_ServiceInd+0x38a>
            {
                break;
            }
            b++;
        }
        if ( b < 32 )
 8021cda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021cde:	2b1f      	cmp	r3, #31
 8021ce0:	d80b      	bhi.n	8021cfa <FOE_ServiceInd+0x3fa>
        {
            pFoeInd->MbxHeader.Length    += b+1;
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	881b      	ldrh	r3, [r3, #0]
 8021ce6:	b29a      	uxth	r2, r3
 8021ce8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021cec:	b29b      	uxth	r3, r3
 8021cee:	4413      	add	r3, r2
 8021cf0:	b29b      	uxth	r3, r3
 8021cf2:	3301      	adds	r3, #1
 8021cf4:	b29a      	uxth	r2, r3
 8021cf6:	687b      	ldr	r3, [r7, #4]
 8021cf8:	801a      	strh	r2, [r3, #0]
        }

        /* the file transmission sequence is finished */
        u16FileAccessState = FOE_READY;
 8021cfa:	4b1f      	ldr	r3, [pc, #124]	; (8021d78 <FOE_ServiceInd+0x478>)
 8021cfc:	2200      	movs	r2, #0
 8021cfe:	801a      	strh	r2, [r3, #0]
    }

    if ( bBootMode )
 8021d00:	4b1e      	ldr	r3, [pc, #120]	; (8021d7c <FOE_ServiceInd+0x47c>)
 8021d02:	781b      	ldrb	r3, [r3, #0]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d025      	beq.n	8021d54 <FOE_ServiceInd+0x454>
    {
        /* in BOOT mode the mailbox buffer is not sent via the mailbox functions
           because only FoE is allowed in BOOT mode, so we have to include the
            mailbox data link layer counter */
        pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	795b      	ldrb	r3, [r3, #5]
 8021d0c:	f003 030f 	and.w	r3, r3, #15
 8021d10:	b2da      	uxtb	r2, r3
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	715a      	strb	r2, [r3, #5]
        if ( (u8MbxReadCounter & 0x07) == 0 )
 8021d16:	4b1a      	ldr	r3, [pc, #104]	; (8021d80 <FOE_ServiceInd+0x480>)
 8021d18:	781b      	ldrb	r3, [r3, #0]
 8021d1a:	f003 0307 	and.w	r3, r3, #7
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d102      	bne.n	8021d28 <FOE_ServiceInd+0x428>
        {
            /* counter 0 is not allowed if mailbox data link layer is supported */
            u8MbxReadCounter = 1;
 8021d22:	4b17      	ldr	r3, [pc, #92]	; (8021d80 <FOE_ServiceInd+0x480>)
 8021d24:	2201      	movs	r2, #1
 8021d26:	701a      	strb	r2, [r3, #0]
        }
        /* store the counter in the mailbox header */
        pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	795b      	ldrb	r3, [r3, #5]
 8021d2c:	b2da      	uxtb	r2, r3
 8021d2e:	4b14      	ldr	r3, [pc, #80]	; (8021d80 <FOE_ServiceInd+0x480>)
 8021d30:	781b      	ldrb	r3, [r3, #0]
 8021d32:	011b      	lsls	r3, r3, #4
 8021d34:	b2db      	uxtb	r3, r3
 8021d36:	4313      	orrs	r3, r2
 8021d38:	b2db      	uxtb	r3, r3
 8021d3a:	b2da      	uxtb	r2, r3
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	715a      	strb	r2, [r3, #5]
        /* increment the counter for the next service */
          u8MbxReadCounter++;
 8021d40:	4b0f      	ldr	r3, [pc, #60]	; (8021d80 <FOE_ServiceInd+0x480>)
 8021d42:	781b      	ldrb	r3, [r3, #0]
 8021d44:	3301      	adds	r3, #1
 8021d46:	b2da      	uxtb	r2, r3
 8021d48:	4b0d      	ldr	r3, [pc, #52]	; (8021d80 <FOE_ServiceInd+0x480>)
 8021d4a:	701a      	strb	r2, [r3, #0]
        /* call the function to send the mailbox service directly,
           in BOOT mode we can be sure that the send mailbox is empty
           because no parallel services are allowed */
        MBX_CopyToSendMailbox((TMBX MBXMEM *) pFoeInd);
 8021d4c:	6878      	ldr	r0, [r7, #4]
 8021d4e:	f002 fccf 	bl	80246f0 <MBX_CopyToSendMailbox>
 8021d52:	e009      	b.n	8021d68 <FOE_ServiceInd+0x468>
    }
    else
    {
        if ( MBX_MailboxSendReq((TMBX MBXMEM *) pFoeInd, FOE_SERVICE) != 0 )
 8021d54:	6878      	ldr	r0, [r7, #4]
 8021d56:	2140      	movs	r1, #64	; 0x40
 8021d58:	f002 fbbc 	bl	80244d4 <MBX_MailboxSendReq>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d002      	beq.n	8021d68 <FOE_ServiceInd+0x468>
        {
            /* if the mailbox service could not be sent (or stored), the response will be
               stored in the variable pFoeSendStored and will be sent automatically
                from the mailbox handler (FOE_ContinueInd) when the send mailbox will be read
                the next time from the master */
            pFoeSendStored = (TMBX MBXMEM *) pFoeInd;
 8021d62:	4a08      	ldr	r2, [pc, #32]	; (8021d84 <FOE_ServiceInd+0x484>)
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	6013      	str	r3, [r2, #0]
        }
    }

    return 0;
 8021d68:	2300      	movs	r3, #0
}
 8021d6a:	4618      	mov	r0, r3
 8021d6c:	3730      	adds	r7, #48	; 0x30
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	bd80      	pop	{r7, pc}
 8021d72:	bf00      	nop
 8021d74:	1ffea83c 	.word	0x1ffea83c
 8021d78:	1ffea838 	.word	0x1ffea838
 8021d7c:	1ffea888 	.word	0x1ffea888
 8021d80:	1ffea89c 	.word	0x1ffea89c
 8021d84:	1ffea840 	.word	0x1ffea840

08021d88 <FOE_ContinueInd>:

 \brief    This function is called when the next mailbox fragment can be sent.
*////////////////////////////////////////////////////////////////////////////////////////

void FOE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8021d88:	b580      	push	{r7, lr}
 8021d8a:	b082      	sub	sp, #8
 8021d8c:	af00      	add	r7, sp, #0
 8021d8e:	6078      	str	r0, [r7, #4]
    if ( pFoeSendStored )
 8021d90:	4b07      	ldr	r3, [pc, #28]	; (8021db0 <FOE_ContinueInd+0x28>)
 8021d92:	681b      	ldr	r3, [r3, #0]
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	d008      	beq.n	8021daa <FOE_ContinueInd+0x22>
    {
        /* send the stored FoE service which could not be sent before */
        MBX_MailboxSendReq(pFoeSendStored, 0);
 8021d98:	4b05      	ldr	r3, [pc, #20]	; (8021db0 <FOE_ContinueInd+0x28>)
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	4618      	mov	r0, r3
 8021d9e:	2100      	movs	r1, #0
 8021da0:	f002 fb98 	bl	80244d4 <MBX_MailboxSendReq>
        pFoeSendStored = 0;
 8021da4:	4b02      	ldr	r3, [pc, #8]	; (8021db0 <FOE_ContinueInd+0x28>)
 8021da6:	2200      	movs	r2, #0
 8021da8:	601a      	str	r2, [r3, #0]
    }
}
 8021daa:	3708      	adds	r7, #8
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	1ffea840 	.word	0x1ffea840

08021db4 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 8021db4:	b480      	push	{r7}
 8021db6:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8021db8:	4b04      	ldr	r3, [pc, #16]	; (8021dcc <XMC_ECAT_GetALEventRegister+0x18>)
 8021dba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8021dbe:	b29b      	uxth	r3, r3
}
 8021dc0:	4618      	mov	r0, r3
 8021dc2:	46bd      	mov	sp, r7
 8021dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc8:	4770      	bx	lr
 8021dca:	bf00      	nop
 8021dcc:	54010000 	.word	0x54010000

08021dd0 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8021dd0:	b580      	push	{r7, lr}
 8021dd2:	b082      	sub	sp, #8
 8021dd4:	af00      	add	r7, sp, #0
 8021dd6:	6078      	str	r0, [r7, #4]
 8021dd8:	460b      	mov	r3, r1
 8021dda:	807b      	strh	r3, [r7, #2]
 8021ddc:	4613      	mov	r3, r2
 8021dde:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8021de0:	887b      	ldrh	r3, [r7, #2]
 8021de2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021de6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021dea:	883a      	ldrh	r2, [r7, #0]
 8021dec:	6878      	ldr	r0, [r7, #4]
 8021dee:	4619      	mov	r1, r3
 8021df0:	f008 ff12 	bl	802ac18 <memcpy>
}
 8021df4:	3708      	adds	r7, #8
 8021df6:	46bd      	mov	sp, r7
 8021df8:	bd80      	pop	{r7, pc}
 8021dfa:	bf00      	nop

08021dfc <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 8021dfc:	b580      	push	{r7, lr}
 8021dfe:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8021e00:	f7ff ffd8 	bl	8021db4 <XMC_ECAT_GetALEventRegister>
 8021e04:	4603      	mov	r3, r0
}
 8021e06:	4618      	mov	r0, r3
 8021e08:	bd80      	pop	{r7, pc}
 8021e0a:	bf00      	nop

08021e0c <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 8021e0c:	b580      	push	{r7, lr}
 8021e0e:	b084      	sub	sp, #16
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	4603      	mov	r3, r0
 8021e14:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021e16:	4b08      	ldr	r3, [pc, #32]	; (8021e38 <ResetALEventMask+0x2c>)
 8021e18:	881b      	ldrh	r3, [r3, #0]
 8021e1a:	81fb      	strh	r3, [r7, #14]
    
    mask &= intMask;
 8021e1c:	89fa      	ldrh	r2, [r7, #14]
 8021e1e:	88fb      	ldrh	r3, [r7, #6]
 8021e20:	4013      	ands	r3, r2
 8021e22:	81fb      	strh	r3, [r7, #14]


    DISABLE_ESC_INT();
 8021e24:	f008 f8f6 	bl	802a014 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021e28:	4a03      	ldr	r2, [pc, #12]	; (8021e38 <ResetALEventMask+0x2c>)
 8021e2a:	89fb      	ldrh	r3, [r7, #14]
 8021e2c:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 8021e2e:	f008 f8e3 	bl	8029ff8 <ENABLE_ESC_INT>
}
 8021e32:	3710      	adds	r7, #16
 8021e34:	46bd      	mov	sp, r7
 8021e36:	bd80      	pop	{r7, pc}
 8021e38:	54010204 	.word	0x54010204

08021e3c <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b084      	sub	sp, #16
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	4603      	mov	r3, r0
 8021e44:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021e46:	4b08      	ldr	r3, [pc, #32]	; (8021e68 <SetALEventMask+0x2c>)
 8021e48:	881b      	ldrh	r3, [r3, #0]
 8021e4a:	81fb      	strh	r3, [r7, #14]
    

    mask |= intMask;
 8021e4c:	89fa      	ldrh	r2, [r7, #14]
 8021e4e:	88fb      	ldrh	r3, [r7, #6]
 8021e50:	4313      	orrs	r3, r2
 8021e52:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8021e54:	f008 f8de 	bl	802a014 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021e58:	4a03      	ldr	r2, [pc, #12]	; (8021e68 <SetALEventMask+0x2c>)
 8021e5a:	89fb      	ldrh	r3, [r7, #14]
 8021e5c:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 8021e5e:	f008 f8cb 	bl	8029ff8 <ENABLE_ESC_INT>
}
 8021e62:	3710      	adds	r7, #16
 8021e64:	46bd      	mov	sp, r7
 8021e66:	bd80      	pop	{r7, pc}
 8021e68:	54010204 	.word	0x54010204

08021e6c <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 8021e6c:	b480      	push	{r7}
 8021e6e:	b083      	sub	sp, #12
 8021e70:	af00      	add	r7, sp, #0
    UINT16 TmpVar = 0;
 8021e72:	2300      	movs	r3, #0
 8021e74:	80fb      	strh	r3, [r7, #6]
    //read EEPROM loaded information
    HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8021e76:	4b0c      	ldr	r3, [pc, #48]	; (8021ea8 <UpdateEEPROMLoadedState+0x3c>)
 8021e78:	881b      	ldrh	r3, [r3, #0]
 8021e7a:	80fb      	strh	r3, [r7, #6]
    TmpVar = SWAPWORD(TmpVar);


    if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8021e7c:	88fb      	ldrh	r3, [r7, #6]
 8021e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	dc04      	bgt.n	8021e90 <UpdateEEPROMLoadedState+0x24>
        || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 8021e86:	88fb      	ldrh	r3, [r7, #6]
 8021e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021e8c:	2b00      	cmp	r3, #0
 8021e8e:	dd03      	ble.n	8021e98 <UpdateEEPROMLoadedState+0x2c>
    {
        EepromLoaded = FALSE;
 8021e90:	4b06      	ldr	r3, [pc, #24]	; (8021eac <UpdateEEPROMLoadedState+0x40>)
 8021e92:	2200      	movs	r2, #0
 8021e94:	701a      	strb	r2, [r3, #0]
 8021e96:	e002      	b.n	8021e9e <UpdateEEPROMLoadedState+0x32>
    }
    else
    {
        EepromLoaded = TRUE;
 8021e98:	4b04      	ldr	r3, [pc, #16]	; (8021eac <UpdateEEPROMLoadedState+0x40>)
 8021e9a:	2201      	movs	r2, #1
 8021e9c:	701a      	strb	r2, [r3, #0]
    }
}
 8021e9e:	370c      	adds	r7, #12
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ea6:	4770      	bx	lr
 8021ea8:	54010502 	.word	0x54010502
 8021eac:	1ffe9582 	.word	0x1ffe9582

08021eb0 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b082      	sub	sp, #8
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	4603      	mov	r3, r0
 8021eb8:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 8021eba:	79fb      	ldrb	r3, [r7, #7]
 8021ebc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021ec0:	b29b      	uxth	r3, r3
 8021ec2:	00db      	lsls	r3, r3, #3
 8021ec4:	b29b      	uxth	r3, r3
 8021ec6:	4805      	ldr	r0, [pc, #20]	; (8021edc <GetSyncMan+0x2c>)
 8021ec8:	4619      	mov	r1, r3
 8021eca:	2208      	movs	r2, #8
 8021ecc:	f7ff ff80 	bl	8021dd0 <HW_EscRead>



    return &SyncManInfo;
 8021ed0:	4b02      	ldr	r3, [pc, #8]	; (8021edc <GetSyncMan+0x2c>)
}
 8021ed2:	4618      	mov	r0, r3
 8021ed4:	3708      	adds	r7, #8
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	bd80      	pop	{r7, pc}
 8021eda:	bf00      	nop
 8021edc:	1ffea870 	.word	0x1ffea870

08021ee0 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8021ee0:	b480      	push	{r7}
 8021ee2:	b085      	sub	sp, #20
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	4603      	mov	r3, r0
 8021ee8:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = SM_SETTING_PDI_DISABLE;
 8021eea:	2301      	movs	r3, #1
 8021eec:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8021eee:	79fb      	ldrb	r3, [r7, #7]
 8021ef0:	b29b      	uxth	r3, r3
 8021ef2:	00db      	lsls	r3, r3, #3
 8021ef4:	b29b      	uxth	r3, r3
 8021ef6:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8021efa:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8021efc:	89fb      	ldrh	r3, [r7, #14]
 8021efe:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021f02:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021f06:	7b7a      	ldrb	r2, [r7, #13]
 8021f08:	b2d2      	uxtb	r2, r2
 8021f0a:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadByte(smStatus, Offset);
 8021f0c:	89fb      	ldrh	r3, [r7, #14]
 8021f0e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021f12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021f16:	781b      	ldrb	r3, [r3, #0]
 8021f18:	b2db      	uxtb	r3, r3
 8021f1a:	737b      	strb	r3, [r7, #13]
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 8021f1c:	7b7b      	ldrb	r3, [r7, #13]
 8021f1e:	b2db      	uxtb	r3, r3
 8021f20:	f003 0301 	and.w	r3, r3, #1
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d0f1      	beq.n	8021f0c <DisableSyncManChannel+0x2c>
}
 8021f28:	3714      	adds	r7, #20
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f30:	4770      	bx	lr
 8021f32:	bf00      	nop

08021f34 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8021f34:	b480      	push	{r7}
 8021f36:	b085      	sub	sp, #20
 8021f38:	af00      	add	r7, sp, #0
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = 0x00;
 8021f3e:	2300      	movs	r3, #0
 8021f40:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8021f42:	79fb      	ldrb	r3, [r7, #7]
 8021f44:	b29b      	uxth	r3, r3
 8021f46:	00db      	lsls	r3, r3, #3
 8021f48:	b29b      	uxth	r3, r3
 8021f4a:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8021f4e:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8021f50:	89fb      	ldrh	r3, [r7, #14]
 8021f52:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021f56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021f5a:	7b7a      	ldrb	r2, [r7, #13]
 8021f5c:	b2d2      	uxtb	r2, r2
 8021f5e:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadByte(smStatus,Offset);
 8021f60:	89fb      	ldrh	r3, [r7, #14]
 8021f62:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021f66:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021f6a:	781b      	ldrb	r3, [r3, #0]
 8021f6c:	b2db      	uxtb	r3, r3
 8021f6e:	737b      	strb	r3, [r7, #13]
    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8021f70:	7b7b      	ldrb	r3, [r7, #13]
 8021f72:	b2db      	uxtb	r3, r3
 8021f74:	f003 0301 	and.w	r3, r3, #1
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d1f1      	bne.n	8021f60 <EnableSyncManChannel+0x2c>
}
 8021f7c:	3714      	adds	r7, #20
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f84:	4770      	bx	lr
 8021f86:	bf00      	nop

08021f88 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8021f88:	b580      	push	{r7, lr}
 8021f8a:	b086      	sub	sp, #24
 8021f8c:	af00      	add	r7, sp, #0
 8021f8e:	4603      	mov	r3, r0
 8021f90:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8021f92:	2300      	movs	r3, #0
 8021f94:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8021f96:	2300      	movs	r3, #0
 8021f98:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	827b      	strh	r3, [r7, #18]


        //Check if max address defines are within the available ESC address range
        if ((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 8021f9e:	4b9f      	ldr	r3, [pc, #636]	; (802221c <CheckSmSettings+0x294>)
 8021fa0:	881b      	ldrh	r3, [r3, #0]
 8021fa2:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021fa6:	4293      	cmp	r3, r2
 8021fa8:	d911      	bls.n	8021fce <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_PD_READ_ADDRESS)
 8021faa:	4b9c      	ldr	r3, [pc, #624]	; (802221c <CheckSmSettings+0x294>)
 8021fac:	881b      	ldrh	r3, [r3, #0]
 8021fae:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021fb2:	4293      	cmp	r3, r2
 8021fb4:	d90b      	bls.n	8021fce <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8021fb6:	4b99      	ldr	r3, [pc, #612]	; (802221c <CheckSmSettings+0x294>)
 8021fb8:	881b      	ldrh	r3, [r3, #0]
 8021fba:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021fbe:	4293      	cmp	r3, r2
 8021fc0:	d905      	bls.n	8021fce <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 8021fc2:	4b96      	ldr	r3, [pc, #600]	; (802221c <CheckSmSettings+0x294>)
 8021fc4:	881b      	ldrh	r3, [r3, #0]
 8021fc6:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8021fca:	4293      	cmp	r3, r2
 8021fcc:	d801      	bhi.n	8021fd2 <CheckSmSettings+0x4a>
        {
            /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
            It may be also required to adapt the SM settings in the ESI file*/


                return ALSTATUSCODE_NOVALIDFIRMWARE;
 8021fce:	2314      	movs	r3, #20
 8021fd0:	e1a5      	b.n	802231e <CheckSmSettings+0x396>
        }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8021fd2:	2000      	movs	r0, #0
 8021fd4:	f7ff ff6c 	bl	8021eb0 <GetSyncMan>
 8021fd8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8021fda:	68fb      	ldr	r3, [r7, #12]
 8021fdc:	789a      	ldrb	r2, [r3, #2]
 8021fde:	78db      	ldrb	r3, [r3, #3]
 8021fe0:	021b      	lsls	r3, r3, #8
 8021fe2:	4313      	orrs	r3, r2
 8021fe4:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021fe6:	68fb      	ldr	r3, [r7, #12]
 8021fe8:	781a      	ldrb	r2, [r3, #0]
 8021fea:	785b      	ldrb	r3, [r3, #1]
 8021fec:	021b      	lsls	r3, r3, #8
 8021fee:	4313      	orrs	r3, r2
 8021ff0:	827b      	strh	r3, [r7, #18]



    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8021ff2:	68fb      	ldr	r3, [r7, #12]
 8021ff4:	799b      	ldrb	r3, [r3, #6]
 8021ff6:	f003 0301 	and.w	r3, r3, #1
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d102      	bne.n	8022004 <CheckSmSettings+0x7c>
    {
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021ffe:	2316      	movs	r3, #22
 8022000:	75bb      	strb	r3, [r7, #22]
 8022002:	e02a      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8022004:	68fb      	ldr	r3, [r7, #12]
 8022006:	791b      	ldrb	r3, [r3, #4]
 8022008:	f003 030c 	and.w	r3, r3, #12
 802200c:	2b04      	cmp	r3, #4
 802200e:	d002      	beq.n	8022016 <CheckSmSettings+0x8e>
    {
        /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8022010:	2316      	movs	r3, #22
 8022012:	75bb      	strb	r3, [r7, #22]
 8022014:	e021      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8022016:	68fb      	ldr	r3, [r7, #12]
 8022018:	791b      	ldrb	r3, [r3, #4]
 802201a:	f003 0302 	and.w	r3, r3, #2
 802201e:	2b00      	cmp	r3, #0
 8022020:	d102      	bne.n	8022028 <CheckSmSettings+0xa0>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8022022:	2316      	movs	r3, #22
 8022024:	75bb      	strb	r3, [r7, #22]
 8022026:	e018      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8022028:	8abb      	ldrh	r3, [r7, #20]
 802202a:	2b23      	cmp	r3, #35	; 0x23
 802202c:	d802      	bhi.n	8022034 <CheckSmSettings+0xac>
    {
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802202e:	2316      	movs	r3, #22
 8022030:	75bb      	strb	r3, [r7, #22]
 8022032:	e012      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8022034:	8abb      	ldrh	r3, [r7, #20]
 8022036:	2b80      	cmp	r3, #128	; 0x80
 8022038:	d902      	bls.n	8022040 <CheckSmSettings+0xb8>
    {
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802203a:	2316      	movs	r3, #22
 802203c:	75bb      	strb	r3, [r7, #22]
 802203e:	e00c      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if (SMAddress < MIN_MBX_WRITE_ADDRESS)
 8022040:	8a7b      	ldrh	r3, [r7, #18]
 8022042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022046:	d202      	bcs.n	802204e <CheckSmSettings+0xc6>
    {
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8022048:	2316      	movs	r3, #22
 802204a:	75bb      	strb	r3, [r7, #22]
 802204c:	e005      	b.n	802205a <CheckSmSettings+0xd2>
    }
    else if (SMAddress > MAX_MBX_WRITE_ADDRESS)
 802204e:	8a7b      	ldrh	r3, [r7, #18]
 8022050:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8022054:	d301      	bcc.n	802205a <CheckSmSettings+0xd2>
    {
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8022056:	2316      	movs	r3, #22
 8022058:	75bb      	strb	r3, [r7, #22]
    }


    if ( result == 0 )
 802205a:	7dbb      	ldrb	r3, [r7, #22]
 802205c:	2b00      	cmp	r3, #0
 802205e:	d143      	bne.n	80220e8 <CheckSmSettings+0x160>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8022060:	2001      	movs	r0, #1
 8022062:	f7ff ff25 	bl	8021eb0 <GetSyncMan>
 8022066:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8022068:	68fb      	ldr	r3, [r7, #12]
 802206a:	789a      	ldrb	r2, [r3, #2]
 802206c:	78db      	ldrb	r3, [r3, #3]
 802206e:	021b      	lsls	r3, r3, #8
 8022070:	4313      	orrs	r3, r2
 8022072:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	781a      	ldrb	r2, [r3, #0]
 8022078:	785b      	ldrb	r3, [r3, #1]
 802207a:	021b      	lsls	r3, r3, #8
 802207c:	4313      	orrs	r3, r2
 802207e:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8022080:	68fb      	ldr	r3, [r7, #12]
 8022082:	799b      	ldrb	r3, [r3, #6]
 8022084:	f003 0301 	and.w	r3, r3, #1
 8022088:	2b00      	cmp	r3, #0
 802208a:	d102      	bne.n	8022092 <CheckSmSettings+0x10a>
    {
        /* send mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802208c:	2316      	movs	r3, #22
 802208e:	75bb      	strb	r3, [r7, #22]
 8022090:	e02a      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8022092:	68fb      	ldr	r3, [r7, #12]
 8022094:	791b      	ldrb	r3, [r3, #4]
 8022096:	f003 030c 	and.w	r3, r3, #12
 802209a:	2b00      	cmp	r3, #0
 802209c:	d002      	beq.n	80220a4 <CheckSmSettings+0x11c>
    {
        /* receive mailbox is not readable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802209e:	2316      	movs	r3, #22
 80220a0:	75bb      	strb	r3, [r7, #22]
 80220a2:	e021      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80220a4:	68fb      	ldr	r3, [r7, #12]
 80220a6:	791b      	ldrb	r3, [r3, #4]
 80220a8:	f003 0302 	and.w	r3, r3, #2
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d102      	bne.n	80220b6 <CheckSmSettings+0x12e>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80220b0:	2316      	movs	r3, #22
 80220b2:	75bb      	strb	r3, [r7, #22]
 80220b4:	e018      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if (SMLength < MIN_MBX_SIZE)
 80220b6:	8abb      	ldrh	r3, [r7, #20]
 80220b8:	2b23      	cmp	r3, #35	; 0x23
 80220ba:	d802      	bhi.n	80220c2 <CheckSmSettings+0x13a>
    {
        /* send mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80220bc:	2316      	movs	r3, #22
 80220be:	75bb      	strb	r3, [r7, #22]
 80220c0:	e012      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if (SMLength > MAX_MBX_SIZE)
 80220c2:	8abb      	ldrh	r3, [r7, #20]
 80220c4:	2b80      	cmp	r3, #128	; 0x80
 80220c6:	d902      	bls.n	80220ce <CheckSmSettings+0x146>
    {
        /* send mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80220c8:	2316      	movs	r3, #22
 80220ca:	75bb      	strb	r3, [r7, #22]
 80220cc:	e00c      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if (SMAddress < MIN_MBX_READ_ADDRESS)
 80220ce:	8a7b      	ldrh	r3, [r7, #18]
 80220d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80220d4:	d202      	bcs.n	80220dc <CheckSmSettings+0x154>
    {
        /* send mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80220d6:	2316      	movs	r3, #22
 80220d8:	75bb      	strb	r3, [r7, #22]
 80220da:	e005      	b.n	80220e8 <CheckSmSettings+0x160>
    }
    else if (SMAddress > MAX_MBX_READ_ADDRESS)
 80220dc:	8a7b      	ldrh	r3, [r7, #18]
 80220de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80220e2:	d301      	bcc.n	80220e8 <CheckSmSettings+0x160>
    {
        /* send mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80220e4:	2316      	movs	r3, #22
 80220e6:	75bb      	strb	r3, [r7, #22]
    }
    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 80220e8:	7dbb      	ldrb	r3, [r7, #22]
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	d171      	bne.n	80221d2 <CheckSmSettings+0x24a>
 80220ee:	79fb      	ldrb	r3, [r7, #7]
 80220f0:	2b03      	cmp	r3, #3
 80220f2:	d96e      	bls.n	80221d2 <CheckSmSettings+0x24a>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 80220f4:	4b4a      	ldr	r3, [pc, #296]	; (8022220 <CheckSmSettings+0x298>)
 80220f6:	2201      	movs	r2, #1
 80220f8:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2 (0 in case if no mailbox is supported)) */
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80220fa:	2003      	movs	r0, #3
 80220fc:	f7ff fed8 	bl	8021eb0 <GetSyncMan>
 8022100:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8022102:	68fb      	ldr	r3, [r7, #12]
 8022104:	789a      	ldrb	r2, [r3, #2]
 8022106:	78db      	ldrb	r3, [r3, #3]
 8022108:	021b      	lsls	r3, r3, #8
 802210a:	4313      	orrs	r3, r2
 802210c:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	781a      	ldrb	r2, [r3, #0]
 8022112:	785b      	ldrb	r3, [r3, #1]
 8022114:	021b      	lsls	r3, r3, #8
 8022116:	4313      	orrs	r3, r2
 8022118:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 802211a:	68fb      	ldr	r3, [r7, #12]
 802211c:	799b      	ldrb	r3, [r3, #6]
 802211e:	f003 0301 	and.w	r3, r3, #1
 8022122:	2b00      	cmp	r3, #0
 8022124:	d005      	beq.n	8022132 <CheckSmSettings+0x1aa>
 8022126:	8abb      	ldrh	r3, [r7, #20]
 8022128:	2b00      	cmp	r3, #0
 802212a:	d102      	bne.n	8022132 <CheckSmSettings+0x1aa>
    {
        /* the SM3 size is 0 and the SM3 is active */
        result = SYNCMANCHSETTINGS + 1;
 802212c:	2304      	movs	r3, #4
 802212e:	75bb      	strb	r3, [r7, #22]
 8022130:	e04a      	b.n	80221c8 <CheckSmSettings+0x240>
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8022132:	68fb      	ldr	r3, [r7, #12]
 8022134:	799b      	ldrb	r3, [r3, #6]
 8022136:	f003 0301 	and.w	r3, r3, #1
 802213a:	2b00      	cmp	r3, #0
 802213c:	d03b      	beq.n	80221b6 <CheckSmSettings+0x22e>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
                if (SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 802213e:	4b39      	ldr	r3, [pc, #228]	; (8022224 <CheckSmSettings+0x29c>)
 8022140:	881b      	ldrh	r3, [r3, #0]
 8022142:	8aba      	ldrh	r2, [r7, #20]
 8022144:	429a      	cmp	r2, r3
 8022146:	d106      	bne.n	8022156 <CheckSmSettings+0x1ce>
 8022148:	4b36      	ldr	r3, [pc, #216]	; (8022224 <CheckSmSettings+0x29c>)
 802214a:	881b      	ldrh	r3, [r3, #0]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d002      	beq.n	8022156 <CheckSmSettings+0x1ce>
 8022150:	8abb      	ldrh	r3, [r7, #20]
 8022152:	2b0c      	cmp	r3, #12
 8022154:	d902      	bls.n	802215c <CheckSmSettings+0x1d4>
                {
                    /* sizes don't match */
                    result = SYNCMANCHSIZE + 1;
 8022156:	2303      	movs	r3, #3
 8022158:	75bb      	strb	r3, [r7, #22]
 802215a:	e035      	b.n	80221c8 <CheckSmSettings+0x240>
                }
                else
                {
                    /* sizes matches */
                    if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE)
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	791b      	ldrb	r3, [r3, #4]
 8022160:	f003 030c 	and.w	r3, r3, #12
 8022164:	2b00      	cmp	r3, #0
 8022166:	d123      	bne.n	80221b0 <CheckSmSettings+0x228>
                    {
                        /* settings match */
                        if (((nAlStatus == STATE_PREOP) && (SMAddress >= MIN_PD_READ_ADDRESS) && (SMAddress <= MAX_PD_READ_ADDRESS))
 8022168:	4b2f      	ldr	r3, [pc, #188]	; (8022228 <CheckSmSettings+0x2a0>)
 802216a:	781b      	ldrb	r3, [r3, #0]
 802216c:	2b02      	cmp	r3, #2
 802216e:	d107      	bne.n	8022180 <CheckSmSettings+0x1f8>
 8022170:	8a7b      	ldrh	r3, [r7, #18]
 8022172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022176:	d303      	bcc.n	8022180 <CheckSmSettings+0x1f8>
 8022178:	8a7b      	ldrh	r3, [r7, #18]
 802217a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802217e:	d308      	bcc.n	8022192 <CheckSmSettings+0x20a>
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
 8022180:	4b29      	ldr	r3, [pc, #164]	; (8022228 <CheckSmSettings+0x2a0>)
 8022182:	781b      	ldrb	r3, [r3, #0]
 8022184:	2b02      	cmp	r3, #2
 8022186:	d00f      	beq.n	80221a8 <CheckSmSettings+0x220>
 8022188:	4b28      	ldr	r3, [pc, #160]	; (802222c <CheckSmSettings+0x2a4>)
 802218a:	881b      	ldrh	r3, [r3, #0]
 802218c:	8a7a      	ldrh	r2, [r7, #18]
 802218e:	429a      	cmp	r2, r3
 8022190:	d10a      	bne.n	80221a8 <CheckSmSettings+0x220>
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8022192:	68fb      	ldr	r3, [r7, #12]
 8022194:	791b      	ldrb	r3, [r3, #4]
 8022196:	f003 0302 	and.w	r3, r3, #2
 802219a:	2b00      	cmp	r3, #0
 802219c:	d003      	beq.n	80221a6 <CheckSmSettings+0x21e>
                                {
                                    /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                    b3BufferMode = FALSE;
 802219e:	4b20      	ldr	r3, [pc, #128]	; (8022220 <CheckSmSettings+0x298>)
 80221a0:	2200      	movs	r2, #0
 80221a2:	701a      	strb	r2, [r3, #0]
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80221a4:	e003      	b.n	80221ae <CheckSmSettings+0x226>
 80221a6:	e002      	b.n	80221ae <CheckSmSettings+0x226>
                                }
                        }
                        else
                        {
                            /* input address is out of the allowed area or has changed in SAFEOP or OP */
                            result = SYNCMANCHADDRESS + 1;
 80221a8:	2302      	movs	r3, #2
 80221aa:	75bb      	strb	r3, [r7, #22]
 80221ac:	e00c      	b.n	80221c8 <CheckSmSettings+0x240>
 80221ae:	e00b      	b.n	80221c8 <CheckSmSettings+0x240>
                        }
                    }
                    else
                    {
                        /* input settings do not match */
                        result = SYNCMANCHSETTINGS + 1;
 80221b0:	2304      	movs	r3, #4
 80221b2:	75bb      	strb	r3, [r7, #22]
 80221b4:	e008      	b.n	80221c8 <CheckSmSettings+0x240>
                    }
                }
        }
        else if (SMLength != 0 || nPdInputSize != 0)
 80221b6:	8abb      	ldrh	r3, [r7, #20]
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d103      	bne.n	80221c4 <CheckSmSettings+0x23c>
 80221bc:	4b19      	ldr	r3, [pc, #100]	; (8022224 <CheckSmSettings+0x29c>)
 80221be:	881b      	ldrh	r3, [r3, #0]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d001      	beq.n	80221c8 <CheckSmSettings+0x240>
        {
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 80221c4:	2303      	movs	r3, #3
 80221c6:	75bb      	strb	r3, [r7, #22]
        }



        if ( result != 0 )
 80221c8:	7dbb      	ldrb	r3, [r7, #22]
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d001      	beq.n	80221d2 <CheckSmSettings+0x24a>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 80221ce:	231e      	movs	r3, #30
 80221d0:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if (result == 0 && maxChannel > PROCESS_DATA_OUT)
 80221d2:	7dbb      	ldrb	r3, [r7, #22]
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	f040 808a 	bne.w	80222ee <CheckSmSettings+0x366>
 80221da:	79fb      	ldrb	r3, [r7, #7]
 80221dc:	2b02      	cmp	r3, #2
 80221de:	f240 8086 	bls.w	80222ee <CheckSmSettings+0x366>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 80221e2:	2002      	movs	r0, #2
 80221e4:	f7ff fe64 	bl	8021eb0 <GetSyncMan>
 80221e8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	789a      	ldrb	r2, [r3, #2]
 80221ee:	78db      	ldrb	r3, [r3, #3]
 80221f0:	021b      	lsls	r3, r3, #8
 80221f2:	4313      	orrs	r3, r2
 80221f4:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	781a      	ldrb	r2, [r3, #0]
 80221fa:	785b      	ldrb	r3, [r3, #1]
 80221fc:	021b      	lsls	r3, r3, #8
 80221fe:	4313      	orrs	r3, r2
 8022200:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8022202:	68fb      	ldr	r3, [r7, #12]
 8022204:	799b      	ldrb	r3, [r3, #6]
 8022206:	f003 0301 	and.w	r3, r3, #1
 802220a:	2b00      	cmp	r3, #0
 802220c:	d010      	beq.n	8022230 <CheckSmSettings+0x2a8>
 802220e:	8abb      	ldrh	r3, [r7, #20]
 8022210:	2b00      	cmp	r3, #0
 8022212:	d10d      	bne.n	8022230 <CheckSmSettings+0x2a8>
    {
        /* the SM2 size is 0 and the SM2 is active */
        result = SYNCMANCHSETTINGS + 1;
 8022214:	2304      	movs	r3, #4
 8022216:	75bb      	strb	r3, [r7, #22]
 8022218:	e064      	b.n	80222e4 <CheckSmSettings+0x35c>
 802221a:	bf00      	nop
 802221c:	1ffea882 	.word	0x1ffea882
 8022220:	1ffea84c 	.word	0x1ffea84c
 8022224:	1ffea87e 	.word	0x1ffea87e
 8022228:	1ffea851 	.word	0x1ffea851
 802222c:	1ffea898 	.word	0x1ffea898
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	799b      	ldrb	r3, [r3, #6]
 8022234:	f003 0301 	and.w	r3, r3, #1
 8022238:	2b00      	cmp	r3, #0
 802223a:	d04a      	beq.n	80222d2 <CheckSmSettings+0x34a>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 802223c:	4b3a      	ldr	r3, [pc, #232]	; (8022328 <CheckSmSettings+0x3a0>)
 802223e:	881b      	ldrh	r3, [r3, #0]
 8022240:	8aba      	ldrh	r2, [r7, #20]
 8022242:	429a      	cmp	r2, r3
 8022244:	d141      	bne.n	80222ca <CheckSmSettings+0x342>
 8022246:	4b38      	ldr	r3, [pc, #224]	; (8022328 <CheckSmSettings+0x3a0>)
 8022248:	881b      	ldrh	r3, [r3, #0]
 802224a:	2b00      	cmp	r3, #0
 802224c:	d03d      	beq.n	80222ca <CheckSmSettings+0x342>
 802224e:	8abb      	ldrh	r3, [r7, #20]
 8022250:	2b0c      	cmp	r3, #12
 8022252:	d83a      	bhi.n	80222ca <CheckSmSettings+0x342>
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8022254:	68fb      	ldr	r3, [r7, #12]
 8022256:	791b      	ldrb	r3, [r3, #4]
 8022258:	f003 030c 	and.w	r3, r3, #12
 802225c:	2b04      	cmp	r3, #4
 802225e:	d130      	bne.n	80222c2 <CheckSmSettings+0x33a>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8022260:	4b32      	ldr	r3, [pc, #200]	; (802232c <CheckSmSettings+0x3a4>)
 8022262:	781b      	ldrb	r3, [r3, #0]
 8022264:	2b02      	cmp	r3, #2
 8022266:	d107      	bne.n	8022278 <CheckSmSettings+0x2f0>
 8022268:	8a7b      	ldrh	r3, [r7, #18]
 802226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802226e:	d303      	bcc.n	8022278 <CheckSmSettings+0x2f0>
 8022270:	8a7b      	ldrh	r3, [r7, #18]
 8022272:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8022276:	d308      	bcc.n	802228a <CheckSmSettings+0x302>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8022278:	4b2c      	ldr	r3, [pc, #176]	; (802232c <CheckSmSettings+0x3a4>)
 802227a:	781b      	ldrb	r3, [r3, #0]
 802227c:	2b02      	cmp	r3, #2
 802227e:	d01c      	beq.n	80222ba <CheckSmSettings+0x332>
 8022280:	4b2b      	ldr	r3, [pc, #172]	; (8022330 <CheckSmSettings+0x3a8>)
 8022282:	881b      	ldrh	r3, [r3, #0]
 8022284:	8a7a      	ldrh	r2, [r7, #18]
 8022286:	429a      	cmp	r2, r3
 8022288:	d117      	bne.n	80222ba <CheckSmSettings+0x332>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 802228a:	68fb      	ldr	r3, [r7, #12]
 802228c:	791b      	ldrb	r3, [r3, #4]
 802228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022292:	2b00      	cmp	r3, #0
 8022294:	d003      	beq.n	802229e <CheckSmSettings+0x316>
                            {
                                bWdTrigger = TRUE;
 8022296:	4b27      	ldr	r3, [pc, #156]	; (8022334 <CheckSmSettings+0x3ac>)
 8022298:	2201      	movs	r2, #1
 802229a:	701a      	strb	r2, [r3, #0]
 802229c:	e002      	b.n	80222a4 <CheckSmSettings+0x31c>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 802229e:	4b25      	ldr	r3, [pc, #148]	; (8022334 <CheckSmSettings+0x3ac>)
 80222a0:	2200      	movs	r2, #0
 80222a2:	701a      	strb	r2, [r3, #0]
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	791b      	ldrb	r3, [r3, #4]
 80222a8:	f003 0302 	and.w	r3, r3, #2
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d003      	beq.n	80222b8 <CheckSmSettings+0x330>
                            {
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 80222b0:	4b21      	ldr	r3, [pc, #132]	; (8022338 <CheckSmSettings+0x3b0>)
 80222b2:	2200      	movs	r2, #0
 80222b4:	701a      	strb	r2, [r3, #0]
                            else
                            {
                                bWdTrigger = FALSE;
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80222b6:	e003      	b.n	80222c0 <CheckSmSettings+0x338>
 80222b8:	e002      	b.n	80222c0 <CheckSmSettings+0x338>
                        }
                    }
                    else
                    {
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS + 1;
 80222ba:	2302      	movs	r3, #2
 80222bc:	75bb      	strb	r3, [r7, #22]
 80222be:	e003      	b.n	80222c8 <CheckSmSettings+0x340>
 80222c0:	e002      	b.n	80222c8 <CheckSmSettings+0x340>
                    }
                }
                else
                {
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS + 1;
 80222c2:	2304      	movs	r3, #4
 80222c4:	75bb      	strb	r3, [r7, #22]
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80222c6:	e003      	b.n	80222d0 <CheckSmSettings+0x348>
 80222c8:	e002      	b.n	80222d0 <CheckSmSettings+0x348>
                }
            }
            else
            {
                /* output sizes don't match */
                result = SYNCMANCHSIZE + 1;
 80222ca:	2303      	movs	r3, #3
 80222cc:	75bb      	strb	r3, [r7, #22]
 80222ce:	e009      	b.n	80222e4 <CheckSmSettings+0x35c>
 80222d0:	e008      	b.n	80222e4 <CheckSmSettings+0x35c>
            }
        }
        else if (SMLength != 0 || nPdOutputSize != 0)
 80222d2:	8abb      	ldrh	r3, [r7, #20]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d103      	bne.n	80222e0 <CheckSmSettings+0x358>
 80222d8:	4b13      	ldr	r3, [pc, #76]	; (8022328 <CheckSmSettings+0x3a0>)
 80222da:	881b      	ldrh	r3, [r3, #0]
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d001      	beq.n	80222e4 <CheckSmSettings+0x35c>
        {
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 80222e0:	2303      	movs	r3, #3
 80222e2:	75bb      	strb	r3, [r7, #22]
        }

        if ( result != 0 )
 80222e4:	7dbb      	ldrb	r3, [r7, #22]
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d001      	beq.n	80222ee <CheckSmSettings+0x366>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 80222ea:	231d      	movs	r3, #29
 80222ec:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 80222ee:	7dbb      	ldrb	r3, [r7, #22]
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d113      	bne.n	802231c <CheckSmSettings+0x394>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 80222f4:	79fb      	ldrb	r3, [r7, #7]
 80222f6:	75fb      	strb	r3, [r7, #23]
 80222f8:	e00b      	b.n	8022312 <CheckSmSettings+0x38a>
        {
            pSyncMan = GetSyncMan(i);
 80222fa:	7dfb      	ldrb	r3, [r7, #23]
 80222fc:	4618      	mov	r0, r3
 80222fe:	f7ff fdd7 	bl	8021eb0 <GetSyncMan>
 8022302:	60f8      	str	r0, [r7, #12]
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	799a      	ldrb	r2, [r3, #6]
 8022308:	4b0c      	ldr	r3, [pc, #48]	; (802233c <CheckSmSettings+0x3b4>)
 802230a:	701a      	strb	r2, [r3, #0]


    if ( result == 0 )
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 802230c:	7dfb      	ldrb	r3, [r7, #23]
 802230e:	3301      	adds	r3, #1
 8022310:	75fb      	strb	r3, [r7, #23]
 8022312:	4b0b      	ldr	r3, [pc, #44]	; (8022340 <CheckSmSettings+0x3b8>)
 8022314:	781b      	ldrb	r3, [r3, #0]
 8022316:	7dfa      	ldrb	r2, [r7, #23]
 8022318:	429a      	cmp	r2, r3
 802231a:	d3ee      	bcc.n	80222fa <CheckSmSettings+0x372>
        {
            pSyncMan = GetSyncMan(i);
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
        }
    }
    return result;
 802231c:	7dbb      	ldrb	r3, [r7, #22]
}
 802231e:	4618      	mov	r0, r3
 8022320:	3718      	adds	r7, #24
 8022322:	46bd      	mov	sp, r7
 8022324:	bd80      	pop	{r7, pc}
 8022326:	bf00      	nop
 8022328:	1ffea852 	.word	0x1ffea852
 802232c:	1ffea851 	.word	0x1ffea851
 8022330:	1ffea85e 	.word	0x1ffea85e
 8022334:	1ffea892 	.word	0x1ffea892
 8022338:	1ffea84c 	.word	0x1ffea84c
 802233c:	1ffe9581 	.word	0x1ffe9581
 8022340:	1ffea896 	.word	0x1ffea896

08022344 <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 8022344:	b580      	push	{r7, lr}
 8022346:	b08e      	sub	sp, #56	; 0x38
 8022348:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT8        dcControl;

    UINT16     wdiv = 0;
 802234a:	2300      	movs	r3, #0
 802234c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16     wd = 0;
 802234e:	2300      	movs	r3, #0
 8022350:	857b      	strh	r3, [r7, #42]	; 0x2a
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 8022352:	2300      	movs	r3, #0
 8022354:	627b      	str	r3, [r7, #36]	; 0x24
    UINT32     shiftTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 8022356:	2300      	movs	r3, #0
 8022358:	623b      	str	r3, [r7, #32]
    BOOL bSubordinatedCycles = FALSE;
 802235a:	2300      	movs	r3, #0
 802235c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    UINT16    nPdInputBuffer = 3;
 8022360:	2303      	movs	r3, #3
 8022362:	86bb      	strh	r3, [r7, #52]	; 0x34

    UINT16    nPdOutputBuffer = 3;
 8022364:	2303      	movs	r3, #3
 8022366:	867b      	strh	r3, [r7, #50]	; 0x32

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8022368:	2300      	movs	r3, #0
 802236a:	863b      	strh	r3, [r7, #48]	; 0x30
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 802236c:	2300      	movs	r3, #0
 802236e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8022370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022374:	83fb      	strh	r3, [r7, #30]

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8022376:	4b9e      	ldr	r3, [pc, #632]	; (80225f0 <StartInputHandler+0x2ac>)
 8022378:	899a      	ldrh	r2, [r3, #12]
 802237a:	8bfb      	ldrh	r3, [r7, #30]
 802237c:	4013      	ands	r3, r2
 802237e:	83fb      	strh	r3, [r7, #30]
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8022380:	4b9c      	ldr	r3, [pc, #624]	; (80225f4 <StartInputHandler+0x2b0>)
 8022382:	899a      	ldrh	r2, [r3, #12]
 8022384:	8bfb      	ldrh	r3, [r7, #30]
 8022386:	4013      	ands	r3, r2
 8022388:	83fb      	strh	r3, [r7, #30]

    u16ALEventMask = 0;
 802238a:	4b9b      	ldr	r3, [pc, #620]	; (80225f8 <StartInputHandler+0x2b4>)
 802238c:	2200      	movs	r2, #0
 802238e:	801a      	strh	r2, [r3, #0]


    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8022390:	4b9a      	ldr	r3, [pc, #616]	; (80225fc <StartInputHandler+0x2b8>)
 8022392:	2200      	movs	r2, #0
 8022394:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8022396:	2002      	movs	r0, #2
 8022398:	f7ff fd8a 	bl	8021eb0 <GetSyncMan>
 802239c:	61b8      	str	r0, [r7, #24]
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 802239e:	69bb      	ldr	r3, [r7, #24]
 80223a0:	881b      	ldrh	r3, [r3, #0]
 80223a2:	b29a      	uxth	r2, r3
 80223a4:	4b96      	ldr	r3, [pc, #600]	; (8022600 <StartInputHandler+0x2bc>)
 80223a6:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80223a8:	69bb      	ldr	r3, [r7, #24]
 80223aa:	791b      	ldrb	r3, [r3, #4]
 80223ac:	f003 0302 	and.w	r3, r3, #2
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d001      	beq.n	80223b8 <StartInputHandler+0x74>
    {
       nPdOutputBuffer = 1;
 80223b4:	2301      	movs	r3, #1
 80223b6:	867b      	strh	r3, [r7, #50]	; 0x32
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80223b8:	2003      	movs	r0, #3
 80223ba:	f7ff fd79 	bl	8021eb0 <GetSyncMan>
 80223be:	61b8      	str	r0, [r7, #24]
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 80223c0:	69bb      	ldr	r3, [r7, #24]
 80223c2:	881b      	ldrh	r3, [r3, #0]
 80223c4:	b29a      	uxth	r2, r3
 80223c6:	4b8f      	ldr	r3, [pc, #572]	; (8022604 <StartInputHandler+0x2c0>)
 80223c8:	801a      	strh	r2, [r3, #0]


    /* get the number of input buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80223ca:	69bb      	ldr	r3, [r7, #24]
 80223cc:	791b      	ldrb	r3, [r3, #4]
 80223ce:	f003 0302 	and.w	r3, r3, #2
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d001      	beq.n	80223da <StartInputHandler+0x96>
    {
        nPdInputBuffer = 1;
 80223d6:	2301      	movs	r3, #1
 80223d8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80223da:	4b8a      	ldr	r3, [pc, #552]	; (8022604 <StartInputHandler+0x2c0>)
 80223dc:	881b      	ldrh	r3, [r3, #0]
 80223de:	461a      	mov	r2, r3
 80223e0:	4b89      	ldr	r3, [pc, #548]	; (8022608 <StartInputHandler+0x2c4>)
 80223e2:	881b      	ldrh	r3, [r3, #0]
 80223e4:	4619      	mov	r1, r3
 80223e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80223e8:	fb03 f301 	mul.w	r3, r3, r1
 80223ec:	4413      	add	r3, r2
 80223ee:	4a87      	ldr	r2, [pc, #540]	; (802260c <StartInputHandler+0x2c8>)
 80223f0:	8812      	ldrh	r2, [r2, #0]
 80223f2:	4293      	cmp	r3, r2
 80223f4:	dd0a      	ble.n	802240c <StartInputHandler+0xc8>
 80223f6:	4b83      	ldr	r3, [pc, #524]	; (8022604 <StartInputHandler+0x2c0>)
 80223f8:	881b      	ldrh	r3, [r3, #0]
 80223fa:	461a      	mov	r2, r3
 80223fc:	4b83      	ldr	r3, [pc, #524]	; (802260c <StartInputHandler+0x2c8>)
 80223fe:	881b      	ldrh	r3, [r3, #0]
 8022400:	4619      	mov	r1, r3
 8022402:	4b83      	ldr	r3, [pc, #524]	; (8022610 <StartInputHandler+0x2cc>)
 8022404:	881b      	ldrh	r3, [r3, #0]
 8022406:	440b      	add	r3, r1
 8022408:	429a      	cmp	r2, r3
 802240a:	db18      	blt.n	802243e <StartInputHandler+0xfa>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 802240c:	4b7d      	ldr	r3, [pc, #500]	; (8022604 <StartInputHandler+0x2c0>)
 802240e:	881b      	ldrh	r3, [r3, #0]
 8022410:	461a      	mov	r2, r3
 8022412:	4b7d      	ldr	r3, [pc, #500]	; (8022608 <StartInputHandler+0x2c4>)
 8022414:	881b      	ldrh	r3, [r3, #0]
 8022416:	4619      	mov	r1, r3
 8022418:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802241a:	fb03 f301 	mul.w	r3, r3, r1
 802241e:	4413      	add	r3, r2
 8022420:	4a7c      	ldr	r2, [pc, #496]	; (8022614 <StartInputHandler+0x2d0>)
 8022422:	8812      	ldrh	r2, [r2, #0]
 8022424:	4293      	cmp	r3, r2
 8022426:	dd0c      	ble.n	8022442 <StartInputHandler+0xfe>
 8022428:	4b76      	ldr	r3, [pc, #472]	; (8022604 <StartInputHandler+0x2c0>)
 802242a:	881b      	ldrh	r3, [r3, #0]
 802242c:	461a      	mov	r2, r3
 802242e:	4b79      	ldr	r3, [pc, #484]	; (8022614 <StartInputHandler+0x2d0>)
 8022430:	881b      	ldrh	r3, [r3, #0]
 8022432:	4619      	mov	r1, r3
 8022434:	4b78      	ldr	r3, [pc, #480]	; (8022618 <StartInputHandler+0x2d4>)
 8022436:	881b      	ldrh	r3, [r3, #0]
 8022438:	440b      	add	r3, r1
 802243a:	429a      	cmp	r2, r3
 802243c:	da01      	bge.n	8022442 <StartInputHandler+0xfe>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 802243e:	231e      	movs	r3, #30
 8022440:	e325      	b.n	8022a8e <StartInputHandler+0x74a>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8022442:	4b6f      	ldr	r3, [pc, #444]	; (8022600 <StartInputHandler+0x2bc>)
 8022444:	881b      	ldrh	r3, [r3, #0]
 8022446:	461a      	mov	r2, r3
 8022448:	4b74      	ldr	r3, [pc, #464]	; (802261c <StartInputHandler+0x2d8>)
 802244a:	881b      	ldrh	r3, [r3, #0]
 802244c:	4619      	mov	r1, r3
 802244e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8022450:	fb03 f301 	mul.w	r3, r3, r1
 8022454:	4413      	add	r3, r2
 8022456:	4a6d      	ldr	r2, [pc, #436]	; (802260c <StartInputHandler+0x2c8>)
 8022458:	8812      	ldrh	r2, [r2, #0]
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
    }

    if (
 802245a:	4293      	cmp	r3, r2
 802245c:	dd0a      	ble.n	8022474 <StartInputHandler+0x130>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 802245e:	4b68      	ldr	r3, [pc, #416]	; (8022600 <StartInputHandler+0x2bc>)
 8022460:	881b      	ldrh	r3, [r3, #0]
 8022462:	461a      	mov	r2, r3
 8022464:	4b69      	ldr	r3, [pc, #420]	; (802260c <StartInputHandler+0x2c8>)
 8022466:	881b      	ldrh	r3, [r3, #0]
 8022468:	4619      	mov	r1, r3
 802246a:	4b69      	ldr	r3, [pc, #420]	; (8022610 <StartInputHandler+0x2cc>)
 802246c:	881b      	ldrh	r3, [r3, #0]
 802246e:	440b      	add	r3, r1
 8022470:	429a      	cmp	r2, r3
 8022472:	db31      	blt.n	80224d8 <StartInputHandler+0x194>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8022474:	4b62      	ldr	r3, [pc, #392]	; (8022600 <StartInputHandler+0x2bc>)
 8022476:	881b      	ldrh	r3, [r3, #0]
 8022478:	461a      	mov	r2, r3
 802247a:	4b68      	ldr	r3, [pc, #416]	; (802261c <StartInputHandler+0x2d8>)
 802247c:	881b      	ldrh	r3, [r3, #0]
 802247e:	4619      	mov	r1, r3
 8022480:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8022482:	fb03 f301 	mul.w	r3, r3, r1
 8022486:	4413      	add	r3, r2
 8022488:	4a62      	ldr	r2, [pc, #392]	; (8022614 <StartInputHandler+0x2d0>)
 802248a:	8812      	ldrh	r2, [r2, #0]
 802248c:	4293      	cmp	r3, r2
 802248e:	dd0a      	ble.n	80224a6 <StartInputHandler+0x162>
 8022490:	4b5b      	ldr	r3, [pc, #364]	; (8022600 <StartInputHandler+0x2bc>)
 8022492:	881b      	ldrh	r3, [r3, #0]
 8022494:	461a      	mov	r2, r3
 8022496:	4b5f      	ldr	r3, [pc, #380]	; (8022614 <StartInputHandler+0x2d0>)
 8022498:	881b      	ldrh	r3, [r3, #0]
 802249a:	4619      	mov	r1, r3
 802249c:	4b5e      	ldr	r3, [pc, #376]	; (8022618 <StartInputHandler+0x2d4>)
 802249e:	881b      	ldrh	r3, [r3, #0]
 80224a0:	440b      	add	r3, r1
 80224a2:	429a      	cmp	r2, r3
 80224a4:	db18      	blt.n	80224d8 <StartInputHandler+0x194>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80224a6:	4b56      	ldr	r3, [pc, #344]	; (8022600 <StartInputHandler+0x2bc>)
 80224a8:	881b      	ldrh	r3, [r3, #0]
 80224aa:	461a      	mov	r2, r3
 80224ac:	4b5b      	ldr	r3, [pc, #364]	; (802261c <StartInputHandler+0x2d8>)
 80224ae:	881b      	ldrh	r3, [r3, #0]
 80224b0:	4619      	mov	r1, r3
 80224b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80224b4:	fb03 f301 	mul.w	r3, r3, r1
 80224b8:	4413      	add	r3, r2
 80224ba:	4a52      	ldr	r2, [pc, #328]	; (8022604 <StartInputHandler+0x2c0>)
 80224bc:	8812      	ldrh	r2, [r2, #0]
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
        ||
 80224be:	4293      	cmp	r3, r2
 80224c0:	dd0c      	ble.n	80224dc <StartInputHandler+0x198>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80224c2:	4b4f      	ldr	r3, [pc, #316]	; (8022600 <StartInputHandler+0x2bc>)
 80224c4:	881b      	ldrh	r3, [r3, #0]
 80224c6:	461a      	mov	r2, r3
 80224c8:	4b4e      	ldr	r3, [pc, #312]	; (8022604 <StartInputHandler+0x2c0>)
 80224ca:	881b      	ldrh	r3, [r3, #0]
 80224cc:	4619      	mov	r1, r3
 80224ce:	4b4e      	ldr	r3, [pc, #312]	; (8022608 <StartInputHandler+0x2c4>)
 80224d0:	881b      	ldrh	r3, [r3, #0]
 80224d2:	440b      	add	r3, r1
 80224d4:	429a      	cmp	r2, r3
 80224d6:	da01      	bge.n	80224dc <StartInputHandler+0x198>
        )
    {

        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 80224d8:	231d      	movs	r3, #29
 80224da:	e2d8      	b.n	8022a8e <StartInputHandler+0x74a>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read register 0x981 (corresponding masks are adapted)*/
    HW_EscReadByte(dcControl, ESC_DC_SYNC_ACTIVATION_OFFSET);
 80224dc:	4b50      	ldr	r3, [pc, #320]	; (8022620 <StartInputHandler+0x2dc>)
 80224de:	781b      	ldrb	r3, [r3, #0]
 80224e0:	75fb      	strb	r3, [r7, #23]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 80224e2:	4b50      	ldr	r3, [pc, #320]	; (8022624 <StartInputHandler+0x2e0>)
 80224e4:	681b      	ldr	r3, [r3, #0]
 80224e6:	627b      	str	r3, [r7, #36]	; 0x24
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);

    // Cycle time for Sync1
        HW_EscReadDWord(shiftTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 80224e8:	4b4f      	ldr	r3, [pc, #316]	; (8022628 <StartInputHandler+0x2e4>)
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	623b      	str	r3, [r7, #32]
        shiftTimeSync1 = SWAPDWORD(shiftTimeSync1);


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 80224ee:	4b40      	ldr	r3, [pc, #256]	; (80225f0 <StartInputHandler+0x2ac>)
 80224f0:	885b      	ldrh	r3, [r3, #2]
 80224f2:	863b      	strh	r3, [r7, #48]	; 0x30
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 80224f4:	4b3f      	ldr	r3, [pc, #252]	; (80225f4 <StartInputHandler+0x2b0>)
 80224f6:	885b      	ldrh	r3, [r3, #2]
 80224f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 80224fa:	7dfb      	ldrb	r3, [r7, #23]
 80224fc:	f003 0309 	and.w	r3, r3, #9
 8022500:	2b00      	cmp	r3, #0
 8022502:	d05c      	beq.n	80225be <StartInputHandler+0x27a>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8022504:	7dfb      	ldrb	r3, [r7, #23]
 8022506:	f003 0306 	and.w	r3, r3, #6
 802250a:	2b00      	cmp	r3, #0
 802250c:	d101      	bne.n	8022512 <StartInputHandler+0x1ce>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 802250e:	2330      	movs	r3, #48	; 0x30
 8022510:	e2bd      	b.n	8022a8e <StartInputHandler+0x74a>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8022512:	7dfb      	ldrb	r3, [r7, #23]
 8022514:	f003 0302 	and.w	r3, r3, #2
 8022518:	2b00      	cmp	r3, #0
 802251a:	d106      	bne.n	802252a <StartInputHandler+0x1e6>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 802251c:	7dfb      	ldrb	r3, [r7, #23]
 802251e:	f003 0304 	and.w	r3, r3, #4
 8022522:	2b00      	cmp	r3, #0
 8022524:	d001      	beq.n	802252a <StartInputHandler+0x1e6>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8022526:	2330      	movs	r3, #48	; 0x30
 8022528:	e2b1      	b.n	8022a8e <StartInputHandler+0x74a>
        }

        if(u16MinSuppSyncType != 0)
 802252a:	8bfb      	ldrh	r3, [r7, #30]
 802252c:	2b00      	cmp	r3, #0
 802252e:	d015      	beq.n	802255c <StartInputHandler+0x218>
        {
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8022530:	8bfb      	ldrh	r3, [r7, #30]
 8022532:	f003 0304 	and.w	r3, r3, #4
 8022536:	2b00      	cmp	r3, #0
 8022538:	d104      	bne.n	8022544 <StartInputHandler+0x200>
 802253a:	7dfb      	ldrb	r3, [r7, #23]
 802253c:	f003 0302 	and.w	r3, r3, #2
 8022540:	2b00      	cmp	r3, #0
 8022542:	d109      	bne.n	8022558 <StartInputHandler+0x214>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8022544:	8bfb      	ldrh	r3, [r7, #30]
 8022546:	f003 0308 	and.w	r3, r3, #8
 802254a:	2b00      	cmp	r3, #0
 802254c:	d106      	bne.n	802255c <StartInputHandler+0x218>
 802254e:	7dfb      	ldrb	r3, [r7, #23]
 8022550:	f003 0304 	and.w	r3, r3, #4
 8022554:	2b00      	cmp	r3, #0
 8022556:	d001      	beq.n	802255c <StartInputHandler+0x218>
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8022558:	2330      	movs	r3, #48	; 0x30
 802255a:	e298      	b.n	8022a8e <StartInputHandler+0x74a>
    }
        }

        {
/*ECATCHANGE_START(V5.12) ECAT1*/
            UINT32 curMinCycleTime = MIN_PD_CYCLE_TIME;
 802255c:	4b33      	ldr	r3, [pc, #204]	; (802262c <StartInputHandler+0x2e8>)
 802255e:	613b      	str	r3, [r7, #16]
            curMinCycleTime = sSyncManOutPar.u32MinCycleTime;
 8022560:	4b23      	ldr	r3, [pc, #140]	; (80225f0 <StartInputHandler+0x2ac>)
 8022562:	691b      	ldr	r3, [r3, #16]
 8022564:	613b      	str	r3, [r7, #16]

            /*Check if Sync0 cycle time is supported*/
            if (cycleTimeSync0 != 0 && (cycleTimeSync0 < curMinCycleTime || cycleTimeSync0 > MAX_PD_CYCLE_TIME))
 8022566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022568:	2b00      	cmp	r3, #0
 802256a:	d009      	beq.n	8022580 <StartInputHandler+0x23c>
 802256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802256e:	693b      	ldr	r3, [r7, #16]
 8022570:	429a      	cmp	r2, r3
 8022572:	d303      	bcc.n	802257c <StartInputHandler+0x238>
 8022574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022576:	4a2e      	ldr	r2, [pc, #184]	; (8022630 <StartInputHandler+0x2ec>)
 8022578:	4293      	cmp	r3, r2
 802257a:	d901      	bls.n	8022580 <StartInputHandler+0x23c>
            {
                    return ALSTATUSCODE_DCSYNC0CYCLETIME;
 802257c:	2336      	movs	r3, #54	; 0x36
 802257e:	e286      	b.n	8022a8e <StartInputHandler+0x74a>
/*ECATCHANGE_END(V5.12) ECAT1*/
        }


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8022580:	7dfb      	ldrb	r3, [r7, #23]
 8022582:	f003 0302 	and.w	r3, r3, #2
 8022586:	2b00      	cmp	r3, #0
 8022588:	d00e      	beq.n	80225a8 <StartInputHandler+0x264>
 802258a:	7dfb      	ldrb	r3, [r7, #23]
 802258c:	f003 0304 	and.w	r3, r3, #4
 8022590:	2b00      	cmp	r3, #0
 8022592:	d009      	beq.n	80225a8 <StartInputHandler+0x264>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
            if((shiftTimeSync1 > 0) && (shiftTimeSync1 >= cycleTimeSync0))
 8022594:	6a3b      	ldr	r3, [r7, #32]
 8022596:	2b00      	cmp	r3, #0
 8022598:	d006      	beq.n	80225a8 <StartInputHandler+0x264>
 802259a:	6a3a      	ldr	r2, [r7, #32]
 802259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802259e:	429a      	cmp	r2, r3
 80225a0:	d302      	bcc.n	80225a8 <StartInputHandler+0x264>
            {
                bSubordinatedCycles = TRUE;
 80225a2:	2301      	movs	r3, #1
 80225a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 80225a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d006      	beq.n	80225be <StartInputHandler+0x27a>
 80225b0:	8bfb      	ldrh	r3, [r7, #30]
 80225b2:	f003 0310 	and.w	r3, r3, #16
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d101      	bne.n	80225be <StartInputHandler+0x27a>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80225ba:	2330      	movs	r3, #48	; 0x30
 80225bc:	e267      	b.n	8022a8e <StartInputHandler+0x74a>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 80225be:	4b1d      	ldr	r3, [pc, #116]	; (8022634 <StartInputHandler+0x2f0>)
 80225c0:	781b      	ldrb	r3, [r3, #0]
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d052      	beq.n	802266c <StartInputHandler+0x328>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 80225c6:	7dfb      	ldrb	r3, [r7, #23]
 80225c8:	f003 0309 	and.w	r3, r3, #9
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d133      	bne.n	8022638 <StartInputHandler+0x2f4>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80225d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80225d2:	2b02      	cmp	r3, #2
 80225d4:	d009      	beq.n	80225ea <StartInputHandler+0x2a6>
 80225d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80225d8:	2b03      	cmp	r3, #3
 80225da:	d006      	beq.n	80225ea <StartInputHandler+0x2a6>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 80225dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225de:	2b02      	cmp	r3, #2
 80225e0:	d003      	beq.n	80225ea <StartInputHandler+0x2a6>
 80225e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225e4:	2b03      	cmp	r3, #3
 80225e6:	f040 8085 	bne.w	80226f4 <StartInputHandler+0x3b0>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80225ea:	2330      	movs	r3, #48	; 0x30
 80225ec:	e24f      	b.n	8022a8e <StartInputHandler+0x74a>
 80225ee:	bf00      	nop
 80225f0:	1ffea974 	.word	0x1ffea974
 80225f4:	1ffea930 	.word	0x1ffea930
 80225f8:	1ffea86a 	.word	0x1ffea86a
 80225fc:	1ffea884 	.word	0x1ffea884
 8022600:	1ffea85e 	.word	0x1ffea85e
 8022604:	1ffea898 	.word	0x1ffea898
 8022608:	1ffea87e 	.word	0x1ffea87e
 802260c:	1ffea91e 	.word	0x1ffea91e
 8022610:	1ffea914 	.word	0x1ffea914
 8022614:	1ffea90c 	.word	0x1ffea90c
 8022618:	1ffea926 	.word	0x1ffea926
 802261c:	1ffea852 	.word	0x1ffea852
 8022620:	54010981 	.word	0x54010981
 8022624:	540109a0 	.word	0x540109a0
 8022628:	540109a4 	.word	0x540109a4
 802262c:	0001e848 	.word	0x0001e848
 8022630:	c3500000 	.word	0xc3500000
 8022634:	1ffea9b8 	.word	0x1ffea9b8
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 8022638:	7dfb      	ldrb	r3, [r7, #23]
 802263a:	f003 0304 	and.w	r3, r3, #4
 802263e:	2b00      	cmp	r3, #0
 8022640:	d107      	bne.n	8022652 <StartInputHandler+0x30e>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8022642:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8022644:	2b03      	cmp	r3, #3
 8022646:	d002      	beq.n	802264e <StartInputHandler+0x30a>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 8022648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802264a:	2b03      	cmp	r3, #3
 802264c:	d101      	bne.n	8022652 <StartInputHandler+0x30e>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 802264e:	2330      	movs	r3, #48	; 0x30
 8022650:	e21d      	b.n	8022a8e <StartInputHandler+0x74a>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8022652:	7dfb      	ldrb	r3, [r7, #23]
 8022654:	f003 0302 	and.w	r3, r3, #2
 8022658:	2b00      	cmp	r3, #0
 802265a:	d14b      	bne.n	80226f4 <StartInputHandler+0x3b0>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 802265c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802265e:	2b02      	cmp	r3, #2
 8022660:	d002      	beq.n	8022668 <StartInputHandler+0x324>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8022662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022664:	2b02      	cmp	r3, #2
 8022666:	d145      	bne.n	80226f4 <StartInputHandler+0x3b0>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8022668:	2330      	movs	r3, #48	; 0x30
 802266a:	e210      	b.n	8022a8e <StartInputHandler+0x74a>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 802266c:	7dfb      	ldrb	r3, [r7, #23]
 802266e:	f003 0309 	and.w	r3, r3, #9
 8022672:	2b00      	cmp	r3, #0
 8022674:	d11d      	bne.n	80226b2 <StartInputHandler+0x36e>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8022676:	4b95      	ldr	r3, [pc, #596]	; (80228cc <StartInputHandler+0x588>)
 8022678:	881b      	ldrh	r3, [r3, #0]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d00b      	beq.n	8022696 <StartInputHandler+0x352>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 802267e:	2301      	movs	r3, #1
 8022680:	863b      	strh	r3, [r7, #48]	; 0x30
                
                if (nPdInputSize > 0)
 8022682:	4b93      	ldr	r3, [pc, #588]	; (80228d0 <StartInputHandler+0x58c>)
 8022684:	881b      	ldrh	r3, [r3, #0]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d002      	beq.n	8022690 <StartInputHandler+0x34c>
                {
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 802268a:	2322      	movs	r3, #34	; 0x22
 802268c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 802268e:	e031      	b.n	80226f4 <StartInputHandler+0x3b0>
                }
                else
                {
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8022690:	2300      	movs	r3, #0
 8022692:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8022694:	e02e      	b.n	80226f4 <StartInputHandler+0x3b0>
                }
            }
            else if (nPdInputSize > 0)
 8022696:	4b8e      	ldr	r3, [pc, #568]	; (80228d0 <StartInputHandler+0x58c>)
 8022698:	881b      	ldrh	r3, [r3, #0]
 802269a:	2b00      	cmp	r3, #0
 802269c:	d004      	beq.n	80226a8 <StartInputHandler+0x364>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 802269e:	2300      	movs	r3, #0
 80226a0:	863b      	strh	r3, [r7, #48]	; 0x30
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 80226a2:	2301      	movs	r3, #1
 80226a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80226a6:	e025      	b.n	80226f4 <StartInputHandler+0x3b0>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 80226a8:	2300      	movs	r3, #0
 80226aa:	863b      	strh	r3, [r7, #48]	; 0x30
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80226ac:	2300      	movs	r3, #0
 80226ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80226b0:	e020      	b.n	80226f4 <StartInputHandler+0x3b0>
            }

        }
        else
        {
            if (nPdOutputSize > 0)
 80226b2:	4b86      	ldr	r3, [pc, #536]	; (80228cc <StartInputHandler+0x588>)
 80226b4:	881b      	ldrh	r3, [r3, #0]
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	d009      	beq.n	80226ce <StartInputHandler+0x38a>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 80226ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d002      	beq.n	80226c8 <StartInputHandler+0x384>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 80226c2:	2303      	movs	r3, #3
 80226c4:	863b      	strh	r3, [r7, #48]	; 0x30
 80226c6:	e004      	b.n	80226d2 <StartInputHandler+0x38e>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 80226c8:	2302      	movs	r3, #2
 80226ca:	863b      	strh	r3, [r7, #48]	; 0x30
 80226cc:	e001      	b.n	80226d2 <StartInputHandler+0x38e>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 80226ce:	2300      	movs	r3, #0
 80226d0:	863b      	strh	r3, [r7, #48]	; 0x30
            }


            if (nPdInputSize > 0)
 80226d2:	4b7f      	ldr	r3, [pc, #508]	; (80228d0 <StartInputHandler+0x58c>)
 80226d4:	881b      	ldrh	r3, [r3, #0]
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	d00a      	beq.n	80226f0 <StartInputHandler+0x3ac>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 80226da:	7dfb      	ldrb	r3, [r7, #23]
 80226dc:	f003 0304 	and.w	r3, r3, #4
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d002      	beq.n	80226ea <StartInputHandler+0x3a6>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 80226e4:	2303      	movs	r3, #3
 80226e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80226e8:	e004      	b.n	80226f4 <StartInputHandler+0x3b0>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 80226ea:	2302      	movs	r3, #2
 80226ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80226ee:	e001      	b.n	80226f4 <StartInputHandler+0x3b0>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80226f0:	2300      	movs	r3, #0
 80226f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80226f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80226f6:	2b03      	cmp	r3, #3
 80226f8:	d10c      	bne.n	8022714 <StartInputHandler+0x3d0>
    {
/*ECATCHANGE_START(V5.12) ECAT1*/
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80226fa:	4a76      	ldr	r2, [pc, #472]	; (80228d4 <StartInputHandler+0x590>)
 80226fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226fe:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8022700:	4a74      	ldr	r2, [pc, #464]	; (80228d4 <StartInputHandler+0x590>)
 8022702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022704:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8022706:	4a74      	ldr	r2, [pc, #464]	; (80228d8 <StartInputHandler+0x594>)
 8022708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802270a:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 802270c:	4a72      	ldr	r2, [pc, #456]	; (80228d8 <StartInputHandler+0x594>)
 802270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022710:	6053      	str	r3, [r2, #4]
 8022712:	e00e      	b.n	8022732 <StartInputHandler+0x3ee>
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8022714:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8022716:	2b02      	cmp	r3, #2
 8022718:	d10b      	bne.n	8022732 <StartInputHandler+0x3ee>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 802271a:	4a6e      	ldr	r2, [pc, #440]	; (80228d4 <StartInputHandler+0x590>)
 802271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802271e:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8022720:	4a6c      	ldr	r2, [pc, #432]	; (80228d4 <StartInputHandler+0x590>)
 8022722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022724:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8022726:	4a6c      	ldr	r2, [pc, #432]	; (80228d8 <StartInputHandler+0x594>)
 8022728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802272a:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 802272c:	4a6a      	ldr	r2, [pc, #424]	; (80228d8 <StartInputHandler+0x594>)
 802272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022730:	6053      	str	r3, [r2, #4]
/*ECATCHANGE_END(V5.12) ECAT1*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8022732:	4b6a      	ldr	r3, [pc, #424]	; (80228dc <StartInputHandler+0x598>)
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	f083 0301 	eor.w	r3, r3, #1
 802273a:	b2db      	uxtb	r3, r3
 802273c:	2b00      	cmp	r3, #0
 802273e:	d007      	beq.n	8022750 <StartInputHandler+0x40c>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8022740:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8022742:	2b00      	cmp	r3, #0
 8022744:	d002      	beq.n	802274c <StartInputHandler+0x408>
 8022746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022748:	2b00      	cmp	r3, #0
 802274a:	d101      	bne.n	8022750 <StartInputHandler+0x40c>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 802274c:	2329      	movs	r3, #41	; 0x29
 802274e:	e19e      	b.n	8022a8e <StartInputHandler+0x74a>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8022750:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8022752:	2b00      	cmp	r3, #0
 8022754:	d102      	bne.n	802275c <StartInputHandler+0x418>
 8022756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022758:	2b00      	cmp	r3, #0
 802275a:	d002      	beq.n	8022762 <StartInputHandler+0x41e>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 802275c:	4b60      	ldr	r3, [pc, #384]	; (80228e0 <StartInputHandler+0x59c>)
 802275e:	2201      	movs	r2, #1
 8022760:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8022762:	4b5f      	ldr	r3, [pc, #380]	; (80228e0 <StartInputHandler+0x59c>)
 8022764:	781b      	ldrb	r3, [r3, #0]
 8022766:	2b00      	cmp	r3, #0
 8022768:	d010      	beq.n	802278c <StartInputHandler+0x448>
        {
            if(nPdOutputSize > 0)
 802276a:	4b58      	ldr	r3, [pc, #352]	; (80228cc <StartInputHandler+0x588>)
 802276c:	881b      	ldrh	r3, [r3, #0]
 802276e:	2b00      	cmp	r3, #0
 8022770:	d004      	beq.n	802277c <StartInputHandler+0x438>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8022772:	4b5c      	ldr	r3, [pc, #368]	; (80228e4 <StartInputHandler+0x5a0>)
 8022774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022778:	801a      	strh	r2, [r3, #0]
 802277a:	e007      	b.n	802278c <StartInputHandler+0x448>
            }
            else if(nPdInputSize > 0)
 802277c:	4b54      	ldr	r3, [pc, #336]	; (80228d0 <StartInputHandler+0x58c>)
 802277e:	881b      	ldrh	r3, [r3, #0]
 8022780:	2b00      	cmp	r3, #0
 8022782:	d003      	beq.n	802278c <StartInputHandler+0x448>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8022784:	4b57      	ldr	r3, [pc, #348]	; (80228e4 <StartInputHandler+0x5a0>)
 8022786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802278a:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 802278c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802278e:	2b02      	cmp	r3, #2
 8022790:	d008      	beq.n	80227a4 <StartInputHandler+0x460>
 8022792:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8022794:	2b03      	cmp	r3, #3
 8022796:	d005      	beq.n	80227a4 <StartInputHandler+0x460>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8022798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802279a:	2b02      	cmp	r3, #2
 802279c:	d002      	beq.n	80227a4 <StartInputHandler+0x460>
 802279e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80227a0:	2b03      	cmp	r3, #3
 80227a2:	d109      	bne.n	80227b8 <StartInputHandler+0x474>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 80227a4:	4b50      	ldr	r3, [pc, #320]	; (80228e8 <StartInputHandler+0x5a4>)
 80227a6:	2201      	movs	r2, #1
 80227a8:	701a      	strb	r2, [r3, #0]

            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 80227aa:	4b48      	ldr	r3, [pc, #288]	; (80228cc <StartInputHandler+0x588>)
 80227ac:	881b      	ldrh	r3, [r3, #0]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d102      	bne.n	80227b8 <StartInputHandler+0x474>
            {
               u16ALEventMask = 0;
 80227b2:	4b4c      	ldr	r3, [pc, #304]	; (80228e4 <StartInputHandler+0x5a0>)
 80227b4:	2200      	movs	r2, #0
 80227b6:	801a      	strh	r2, [r3, #0]
            }
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 80227b8:	4a46      	ldr	r2, [pc, #280]	; (80228d4 <StartInputHandler+0x590>)
 80227ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80227bc:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 80227be:	4a46      	ldr	r2, [pc, #280]	; (80228d8 <StartInputHandler+0x594>)
 80227c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80227c2:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 80227c4:	4b49      	ldr	r3, [pc, #292]	; (80228ec <StartInputHandler+0x5a8>)
 80227c6:	2200      	movs	r2, #0
 80227c8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 80227ca:	4b49      	ldr	r3, [pc, #292]	; (80228f0 <StartInputHandler+0x5ac>)
 80227cc:	2200      	movs	r2, #0
 80227ce:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 80227d0:	4b48      	ldr	r3, [pc, #288]	; (80228f4 <StartInputHandler+0x5b0>)
 80227d2:	2200      	movs	r2, #0
 80227d4:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 80227d6:	4b48      	ldr	r3, [pc, #288]	; (80228f8 <StartInputHandler+0x5b4>)
 80227d8:	2200      	movs	r2, #0
 80227da:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 80227dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d03b      	beq.n	802285c <StartInputHandler+0x518>
    {
/*ECATCHANGE_START(V5.12) ECAT4*/
        UINT32 cycleTimeSync1 = (shiftTimeSync1 + cycleTimeSync0);
 80227e4:	6a3a      	ldr	r2, [r7, #32]
 80227e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227e8:	4413      	add	r3, r2
 80227ea:	60fb      	str	r3, [r7, #12]
/*ECATCHANGE_END(V5.12) ECAT4*/

        /* get the number of Sync0 event within on SM cycle */
        if(shiftTimeSync1 >= cycleTimeSync0)
 80227ec:	6a3a      	ldr	r2, [r7, #32]
 80227ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227f0:	429a      	cmp	r2, r3
 80227f2:	d317      	bcc.n	8022824 <StartInputHandler+0x4e0>
        {

            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 80227f4:	68fa      	ldr	r2, [r7, #12]
 80227f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80227fc:	b29a      	uxth	r2, r3
 80227fe:	4b3d      	ldr	r3, [pc, #244]	; (80228f4 <StartInputHandler+0x5b0>)
 8022800:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 8022802:	68fb      	ldr	r3, [r7, #12]
 8022804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022806:	fbb3 f2f2 	udiv	r2, r3, r2
 802280a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802280c:	fb01 f202 	mul.w	r2, r1, r2
 8022810:	1a9b      	subs	r3, r3, r2
 8022812:	2b00      	cmp	r3, #0
 8022814:	d109      	bne.n	802282a <StartInputHandler+0x4e6>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 8022816:	4b37      	ldr	r3, [pc, #220]	; (80228f4 <StartInputHandler+0x5b0>)
 8022818:	881b      	ldrh	r3, [r3, #0]
 802281a:	3301      	adds	r3, #1
 802281c:	b29a      	uxth	r2, r3
 802281e:	4b35      	ldr	r3, [pc, #212]	; (80228f4 <StartInputHandler+0x5b0>)
 8022820:	801a      	strh	r2, [r3, #0]
 8022822:	e002      	b.n	802282a <StartInputHandler+0x4e6>
            }
        }
        else
        {
            u16SmSync0Value = 1;
 8022824:	4b33      	ldr	r3, [pc, #204]	; (80228f4 <StartInputHandler+0x5b0>)
 8022826:	2201      	movs	r2, #1
 8022828:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 802282a:	68fa      	ldr	r2, [r7, #12]
 802282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8022832:	b29a      	uxth	r2, r3
 8022834:	4b2d      	ldr	r3, [pc, #180]	; (80228ec <StartInputHandler+0x5a8>)
 8022836:	801a      	strh	r2, [r3, #0]

        if ((cycleTimeSync1 % cycleTimeSync0) > 0)
 8022838:	68fb      	ldr	r3, [r7, #12]
 802283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802283c:	fbb3 f2f2 	udiv	r2, r3, r2
 8022840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022842:	fb01 f202 	mul.w	r2, r1, r2
 8022846:	1a9b      	subs	r3, r3, r2
 8022848:	2b00      	cmp	r3, #0
 802284a:	d006      	beq.n	802285a <StartInputHandler+0x516>
        {
            LatchInputSync0Value++;
 802284c:	4b27      	ldr	r3, [pc, #156]	; (80228ec <StartInputHandler+0x5a8>)
 802284e:	881b      	ldrh	r3, [r3, #0]
 8022850:	3301      	adds	r3, #1
 8022852:	b29a      	uxth	r2, r3
 8022854:	4b25      	ldr	r3, [pc, #148]	; (80228ec <StartInputHandler+0x5a8>)
 8022856:	801a      	strh	r2, [r3, #0]
 8022858:	e00c      	b.n	8022874 <StartInputHandler+0x530>
 802285a:	e00b      	b.n	8022874 <StartInputHandler+0x530>
        }

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 802285c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802285e:	2b02      	cmp	r3, #2
 8022860:	d102      	bne.n	8022868 <StartInputHandler+0x524>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8022862:	4b24      	ldr	r3, [pc, #144]	; (80228f4 <StartInputHandler+0x5b0>)
 8022864:	2201      	movs	r2, #1
 8022866:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8022868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802286a:	2b03      	cmp	r3, #3
 802286c:	d002      	beq.n	8022874 <StartInputHandler+0x530>
        {
            LatchInputSync0Value = 1;
 802286e:	4b1f      	ldr	r3, [pc, #124]	; (80228ec <StartInputHandler+0x5a8>)
 8022870:	2201      	movs	r2, #1
 8022872:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8022874:	4b21      	ldr	r3, [pc, #132]	; (80228fc <StartInputHandler+0x5b8>)
 8022876:	2200      	movs	r2, #0
 8022878:	801a      	strh	r2, [r3, #0]
    /*
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 802287a:	4b21      	ldr	r3, [pc, #132]	; (8022900 <StartInputHandler+0x5bc>)
 802287c:	881b      	ldrh	r3, [r3, #0]
 802287e:	857b      	strh	r3, [r7, #42]	; 0x2a
    wd = SWAPWORD(wd);

    if (nPdOutputSize > 0 &&  wd != 0 )
 8022880:	4b12      	ldr	r3, [pc, #72]	; (80228cc <StartInputHandler+0x588>)
 8022882:	881b      	ldrh	r3, [r3, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	d049      	beq.n	802291c <StartInputHandler+0x5d8>
 8022888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802288a:	2b00      	cmp	r3, #0
 802288c:	d046      	beq.n	802291c <StartInputHandler+0x5d8>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 802288e:	4b1d      	ldr	r3, [pc, #116]	; (8022904 <StartInputHandler+0x5c0>)
 8022890:	881b      	ldrh	r3, [r3, #0]
 8022892:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 8022894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8022896:	2b00      	cmp	r3, #0
 8022898:	d03a      	beq.n	8022910 <StartInputHandler+0x5cc>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 802289a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802289c:	3302      	adds	r3, #2
 802289e:	60bb      	str	r3, [r7, #8]


            d *= wd;
 80228a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80228a2:	68bb      	ldr	r3, [r7, #8]
 80228a4:	fb02 f303 	mul.w	r3, r2, r3
 80228a8:	60bb      	str	r3, [r7, #8]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 80228aa:	68bb      	ldr	r3, [r7, #8]
 80228ac:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80228b0:	3327      	adds	r3, #39	; 0x27
 80228b2:	60bb      	str	r3, [r7, #8]
            d /= 25000;
 80228b4:	68bb      	ldr	r3, [r7, #8]
 80228b6:	08db      	lsrs	r3, r3, #3
 80228b8:	4a13      	ldr	r2, [pc, #76]	; (8022908 <StartInputHandler+0x5c4>)
 80228ba:	fba2 2303 	umull	r2, r3, r2, r3
 80228be:	0a1b      	lsrs	r3, r3, #8
 80228c0:	60bb      	str	r3, [r7, #8]
            EcatWdValue = (UINT16) d;
 80228c2:	68bb      	ldr	r3, [r7, #8]
 80228c4:	b29a      	uxth	r2, r3
 80228c6:	4b11      	ldr	r3, [pc, #68]	; (802290c <StartInputHandler+0x5c8>)
 80228c8:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 80228ca:	e02c      	b.n	8022926 <StartInputHandler+0x5e2>
 80228cc:	1ffea852 	.word	0x1ffea852
 80228d0:	1ffea87e 	.word	0x1ffea87e
 80228d4:	1ffea974 	.word	0x1ffea974
 80228d8:	1ffea930 	.word	0x1ffea930
 80228dc:	1ffea84c 	.word	0x1ffea84c
 80228e0:	1ffea891 	.word	0x1ffea891
 80228e4:	1ffea86a 	.word	0x1ffea86a
 80228e8:	1ffea889 	.word	0x1ffea889
 80228ec:	1ffea87a 	.word	0x1ffea87a
 80228f0:	1ffea85a 	.word	0x1ffea85a
 80228f4:	1ffea880 	.word	0x1ffea880
 80228f8:	1ffea894 	.word	0x1ffea894
 80228fc:	1ffea9bc 	.word	0x1ffea9bc
 8022900:	54010420 	.word	0x54010420
 8022904:	54010400 	.word	0x54010400
 8022908:	14f8b589 	.word	0x14f8b589
 802290c:	1ffea88e 	.word	0x1ffea88e
            d /= 25000;
            EcatWdValue = (UINT16) d;
        }
        else
        {
            wd = 0;
 8022910:	2300      	movs	r3, #0
 8022912:	857b      	strh	r3, [r7, #42]	; 0x2a
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8022914:	4b60      	ldr	r3, [pc, #384]	; (8022a98 <StartInputHandler+0x754>)
 8022916:	2200      	movs	r2, #0
 8022918:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 802291a:	e004      	b.n	8022926 <StartInputHandler+0x5e2>
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 802291c:	2300      	movs	r3, #0
 802291e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        EcatWdValue = 0;
 8022920:	4b5d      	ldr	r3, [pc, #372]	; (8022a98 <StartInputHandler+0x754>)
 8022922:	2200      	movs	r2, #0
 8022924:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8022926:	4b5c      	ldr	r3, [pc, #368]	; (8022a98 <StartInputHandler+0x754>)
 8022928:	881b      	ldrh	r3, [r3, #0]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d103      	bne.n	8022936 <StartInputHandler+0x5f2>
 802292e:	4b5b      	ldr	r3, [pc, #364]	; (8022a9c <StartInputHandler+0x758>)
 8022930:	781b      	ldrb	r3, [r3, #0]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d10a      	bne.n	802294c <StartInputHandler+0x608>
 8022936:	4b58      	ldr	r3, [pc, #352]	; (8022a98 <StartInputHandler+0x754>)
 8022938:	881b      	ldrh	r3, [r3, #0]
 802293a:	2b00      	cmp	r3, #0
 802293c:	d008      	beq.n	8022950 <StartInputHandler+0x60c>
 802293e:	4b57      	ldr	r3, [pc, #348]	; (8022a9c <StartInputHandler+0x758>)
 8022940:	781b      	ldrb	r3, [r3, #0]
 8022942:	f083 0301 	eor.w	r3, r3, #1
 8022946:	b2db      	uxtb	r3, r3
 8022948:	2b00      	cmp	r3, #0
 802294a:	d001      	beq.n	8022950 <StartInputHandler+0x60c>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 802294c:	231f      	movs	r3, #31
 802294e:	e09e      	b.n	8022a8e <StartInputHandler+0x74a>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8022950:	4b53      	ldr	r3, [pc, #332]	; (8022aa0 <StartInputHandler+0x75c>)
 8022952:	781b      	ldrb	r3, [r3, #0]
 8022954:	2b00      	cmp	r3, #0
 8022956:	d00a      	beq.n	802296e <StartInputHandler+0x62a>
 8022958:	4b52      	ldr	r3, [pc, #328]	; (8022aa4 <StartInputHandler+0x760>)
 802295a:	881b      	ldrh	r3, [r3, #0]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d006      	beq.n	802296e <StartInputHandler+0x62a>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8022960:	4b51      	ldr	r3, [pc, #324]	; (8022aa8 <StartInputHandler+0x764>)
 8022962:	881b      	ldrh	r3, [r3, #0]
 8022964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022968:	b29a      	uxth	r2, r3
 802296a:	4b4f      	ldr	r3, [pc, #316]	; (8022aa8 <StartInputHandler+0x764>)
 802296c:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 802296e:	4b4f      	ldr	r3, [pc, #316]	; (8022aac <StartInputHandler+0x768>)
 8022970:	2200      	movs	r2, #0
 8022972:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8022974:	4b4e      	ldr	r3, [pc, #312]	; (8022ab0 <StartInputHandler+0x76c>)
 8022976:	2200      	movs	r2, #0
 8022978:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 802297a:	4b4e      	ldr	r3, [pc, #312]	; (8022ab4 <StartInputHandler+0x770>)
 802297c:	2200      	movs	r2, #0
 802297e:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8022980:	4b4d      	ldr	r3, [pc, #308]	; (8022ab8 <StartInputHandler+0x774>)
 8022982:	2200      	movs	r2, #0
 8022984:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8022986:	4b4d      	ldr	r3, [pc, #308]	; (8022abc <StartInputHandler+0x778>)
 8022988:	2200      	movs	r2, #0
 802298a:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 802298c:	4b4c      	ldr	r3, [pc, #304]	; (8022ac0 <StartInputHandler+0x77c>)
 802298e:	2200      	movs	r2, #0
 8022990:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8022992:	4b4c      	ldr	r3, [pc, #304]	; (8022ac4 <StartInputHandler+0x780>)
 8022994:	2200      	movs	r2, #0
 8022996:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ECAT5*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8022998:	4b4b      	ldr	r3, [pc, #300]	; (8022ac8 <StartInputHandler+0x784>)
 802299a:	2200      	movs	r2, #0
 802299c:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 802299e:	4b4a      	ldr	r3, [pc, #296]	; (8022ac8 <StartInputHandler+0x784>)
 80229a0:	2200      	movs	r2, #0
 80229a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManInPar.u8SyncError = 0;
 80229a4:	4b48      	ldr	r3, [pc, #288]	; (8022ac8 <StartInputHandler+0x784>)
 80229a6:	2200      	movs	r2, #0
 80229a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 80229ac:	4b47      	ldr	r3, [pc, #284]	; (8022acc <StartInputHandler+0x788>)
 80229ae:	2200      	movs	r2, #0
 80229b0:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 80229b2:	4b46      	ldr	r3, [pc, #280]	; (8022acc <StartInputHandler+0x788>)
 80229b4:	2200      	movs	r2, #0
 80229b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManOutPar.u8SyncError = 0;
 80229b8:	4b44      	ldr	r3, [pc, #272]	; (8022acc <StartInputHandler+0x788>)
 80229ba:	2200      	movs	r2, #0
 80229bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.12) ECAT5*/

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 80229c0:	7dfb      	ldrb	r3, [r7, #23]
 80229c2:	f003 0302 	and.w	r3, r3, #2
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d050      	beq.n	8022a6c <StartInputHandler+0x728>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 80229ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d103      	bne.n	80229d8 <StartInputHandler+0x694>
        {
            Sync0WdValue = 0;
 80229d0:	4b36      	ldr	r3, [pc, #216]	; (8022aac <StartInputHandler+0x768>)
 80229d2:	2200      	movs	r2, #0
 80229d4:	801a      	strh	r2, [r3, #0]
 80229d6:	e018      	b.n	8022a0a <StartInputHandler+0x6c6>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 80229d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229da:	095b      	lsrs	r3, r3, #5
 80229dc:	4a3c      	ldr	r2, [pc, #240]	; (8022ad0 <StartInputHandler+0x78c>)
 80229de:	fba2 2303 	umull	r2, r3, r2, r3
 80229e2:	09db      	lsrs	r3, r3, #7
 80229e4:	607b      	str	r3, [r7, #4]

            if(Sync0Cycle < 5)
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	2b04      	cmp	r3, #4
 80229ea:	d803      	bhi.n	80229f4 <StartInputHandler+0x6b0>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 80229ec:	4b2f      	ldr	r3, [pc, #188]	; (8022aac <StartInputHandler+0x768>)
 80229ee:	2201      	movs	r2, #1
 80229f0:	801a      	strh	r2, [r3, #0]
 80229f2:	e00a      	b.n	8022a0a <StartInputHandler+0x6c6>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	b29b      	uxth	r3, r3
 80229f8:	005b      	lsls	r3, r3, #1
 80229fa:	b29b      	uxth	r3, r3
 80229fc:	4a35      	ldr	r2, [pc, #212]	; (8022ad4 <StartInputHandler+0x790>)
 80229fe:	fba2 2303 	umull	r2, r3, r2, r3
 8022a02:	08db      	lsrs	r3, r3, #3
 8022a04:	b29a      	uxth	r2, r3
 8022a06:	4b29      	ldr	r3, [pc, #164]	; (8022aac <StartInputHandler+0x768>)
 8022a08:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 8022a0a:	7dfb      	ldrb	r3, [r7, #23]
 8022a0c:	f003 0304 	and.w	r3, r3, #4
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d02b      	beq.n	8022a6c <StartInputHandler+0x728>
        {
            if(shiftTimeSync1 < cycleTimeSync0)
 8022a14:	6a3a      	ldr	r2, [r7, #32]
 8022a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a18:	429a      	cmp	r2, r3
 8022a1a:	d204      	bcs.n	8022a26 <StartInputHandler+0x6e2>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (shiftTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 8022a1c:	4b23      	ldr	r3, [pc, #140]	; (8022aac <StartInputHandler+0x768>)
 8022a1e:	881a      	ldrh	r2, [r3, #0]
 8022a20:	4b25      	ldr	r3, [pc, #148]	; (8022ab8 <StartInputHandler+0x774>)
 8022a22:	801a      	strh	r2, [r3, #0]
 8022a24:	e022      	b.n	8022a6c <StartInputHandler+0x728>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
/*ECATCHANGE_START(V5.12) ECAT4*/
                UINT32 Sync1Cycle = (shiftTimeSync1  + cycleTimeSync0 )/100000;
 8022a26:	6a3a      	ldr	r2, [r7, #32]
 8022a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a2a:	4413      	add	r3, r2
 8022a2c:	095b      	lsrs	r3, r3, #5
 8022a2e:	4a28      	ldr	r2, [pc, #160]	; (8022ad0 <StartInputHandler+0x78c>)
 8022a30:	fba2 2303 	umull	r2, r3, r2, r3
 8022a34:	09db      	lsrs	r3, r3, #7
 8022a36:	603b      	str	r3, [r7, #0]
/*ECATCHANGE_END(V5.12) ECAT4*/
                if(Sync1Cycle < 5)
 8022a38:	683b      	ldr	r3, [r7, #0]
 8022a3a:	2b04      	cmp	r3, #4
 8022a3c:	d803      	bhi.n	8022a46 <StartInputHandler+0x702>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 8022a3e:	4b1e      	ldr	r3, [pc, #120]	; (8022ab8 <StartInputHandler+0x774>)
 8022a40:	2201      	movs	r2, #1
 8022a42:	801a      	strh	r2, [r3, #0]
 8022a44:	e008      	b.n	8022a58 <StartInputHandler+0x714>
                }
                else
                {
                    /*ECATCHANGE_START(V5.12)*/
                    Sync1WdValue = (UINT16)((Sync1Cycle*2)/10);
 8022a46:	683b      	ldr	r3, [r7, #0]
 8022a48:	005b      	lsls	r3, r3, #1
 8022a4a:	4a22      	ldr	r2, [pc, #136]	; (8022ad4 <StartInputHandler+0x790>)
 8022a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8022a50:	08db      	lsrs	r3, r3, #3
 8022a52:	b29a      	uxth	r2, r3
 8022a54:	4b18      	ldr	r3, [pc, #96]	; (8022ab8 <StartInputHandler+0x774>)
 8022a56:	801a      	strh	r2, [r3, #0]
                    /*ECATCHANGE_END(V5.12)*/
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 8022a58:	4b14      	ldr	r3, [pc, #80]	; (8022aac <StartInputHandler+0x768>)
 8022a5a:	881b      	ldrh	r3, [r3, #0]
 8022a5c:	085b      	lsrs	r3, r3, #1
 8022a5e:	b29a      	uxth	r2, r3
 8022a60:	4b15      	ldr	r3, [pc, #84]	; (8022ab8 <StartInputHandler+0x774>)
 8022a62:	881b      	ldrh	r3, [r3, #0]
 8022a64:	4413      	add	r3, r2
 8022a66:	b29a      	uxth	r2, r3
 8022a68:	4b13      	ldr	r3, [pc, #76]	; (8022ab8 <StartInputHandler+0x774>)
 8022a6a:	801a      	strh	r2, [r3, #0]
            }
    }
    }

    if(nPdOutputSize > 0)
 8022a6c:	4b0d      	ldr	r3, [pc, #52]	; (8022aa4 <StartInputHandler+0x760>)
 8022a6e:	881b      	ldrh	r3, [r3, #0]
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	d002      	beq.n	8022a7a <StartInputHandler+0x736>
    {
        EnableSyncManChannel(PROCESS_DATA_OUT);
 8022a74:	2002      	movs	r0, #2
 8022a76:	f7ff fa5d 	bl	8021f34 <EnableSyncManChannel>
    }

    if(nPdInputSize > 0)
 8022a7a:	4b17      	ldr	r3, [pc, #92]	; (8022ad8 <StartInputHandler+0x794>)
 8022a7c:	881b      	ldrh	r3, [r3, #0]
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d002      	beq.n	8022a88 <StartInputHandler+0x744>
    {
        EnableSyncManChannel(PROCESS_DATA_IN);
 8022a82:	2003      	movs	r0, #3
 8022a84:	f7ff fa56 	bl	8021f34 <EnableSyncManChannel>
    }

    /*write initial input data*/
    PDO_InputMapping();
 8022a88:	f7fe f926 	bl	8020cd8 <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 8022a8c:	2300      	movs	r3, #0
}
 8022a8e:	4618      	mov	r0, r3
 8022a90:	3738      	adds	r7, #56	; 0x38
 8022a92:	46bd      	mov	sp, r7
 8022a94:	bd80      	pop	{r7, pc}
 8022a96:	bf00      	nop
 8022a98:	1ffea88e 	.word	0x1ffea88e
 8022a9c:	1ffea892 	.word	0x1ffea892
 8022aa0:	1ffea891 	.word	0x1ffea891
 8022aa4:	1ffea852 	.word	0x1ffea852
 8022aa8:	1ffea86a 	.word	0x1ffea86a
 8022aac:	1ffea860 	.word	0x1ffea860
 8022ab0:	1ffea856 	.word	0x1ffea856
 8022ab4:	1ffea88c 	.word	0x1ffea88c
 8022ab8:	1ffea866 	.word	0x1ffea866
 8022abc:	1ffea86c 	.word	0x1ffea86c
 8022ac0:	1ffea885 	.word	0x1ffea885
 8022ac4:	1ffea864 	.word	0x1ffea864
 8022ac8:	1ffea930 	.word	0x1ffea930
 8022acc:	1ffea974 	.word	0x1ffea974
 8022ad0:	0a7c5ac5 	.word	0x0a7c5ac5
 8022ad4:	cccccccd 	.word	0xcccccccd
 8022ad8:	1ffea87e 	.word	0x1ffea87e

08022adc <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 8022adc:	b480      	push	{r7}
 8022ade:	b083      	sub	sp, #12
 8022ae0:	af00      	add	r7, sp, #0
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8022ae2:	23ff      	movs	r3, #255	; 0xff
 8022ae4:	80fb      	strh	r3, [r7, #6]
    if(bLocalErrorFlag)
 8022ae6:	4b13      	ldr	r3, [pc, #76]	; (8022b34 <StartOutputHandler+0x58>)
 8022ae8:	781b      	ldrb	r3, [r3, #0]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d002      	beq.n	8022af4 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8022aee:	4b12      	ldr	r3, [pc, #72]	; (8022b38 <StartOutputHandler+0x5c>)
 8022af0:	881b      	ldrh	r3, [r3, #0]
 8022af2:	e018      	b.n	8022b26 <StartOutputHandler+0x4a>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8022af4:	4b11      	ldr	r3, [pc, #68]	; (8022b3c <StartOutputHandler+0x60>)
 8022af6:	781b      	ldrb	r3, [r3, #0]
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	d005      	beq.n	8022b08 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 8022afc:	4b10      	ldr	r3, [pc, #64]	; (8022b40 <StartOutputHandler+0x64>)
 8022afe:	22c8      	movs	r2, #200	; 0xc8
 8022b00:	801a      	strh	r2, [r3, #0]

        i16WaitForPllRunningCnt = 0;
 8022b02:	4b10      	ldr	r3, [pc, #64]	; (8022b44 <StartOutputHandler+0x68>)
 8022b04:	2200      	movs	r2, #0
 8022b06:	801a      	strh	r2, [r3, #0]
    }


/*ECATCHANGE_START(V5.12) ECAT5*/

    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8022b08:	4b0f      	ldr	r3, [pc, #60]	; (8022b48 <StartOutputHandler+0x6c>)
 8022b0a:	2200      	movs	r2, #0
 8022b0c:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u8SyncError = 0;
 8022b0e:	4b0e      	ldr	r3, [pc, #56]	; (8022b48 <StartOutputHandler+0x6c>)
 8022b10:	2200      	movs	r2, #0
 8022b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 8022b16:	4b0d      	ldr	r3, [pc, #52]	; (8022b4c <StartOutputHandler+0x70>)
 8022b18:	2200      	movs	r2, #0
 8022b1a:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u8SyncError = 0;
 8022b1c:	4b0b      	ldr	r3, [pc, #44]	; (8022b4c <StartOutputHandler+0x70>)
 8022b1e:	2200      	movs	r2, #0
 8022b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_END(V5.12) ECAT5*/

    return result;
 8022b24:	88fb      	ldrh	r3, [r7, #6]
}
 8022b26:	4618      	mov	r0, r3
 8022b28:	370c      	adds	r7, #12
 8022b2a:	46bd      	mov	sp, r7
 8022b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b30:	4770      	bx	lr
 8022b32:	bf00      	nop
 8022b34:	1ffea858 	.word	0x1ffea858
 8022b38:	1ffea854 	.word	0x1ffea854
 8022b3c:	1ffea889 	.word	0x1ffea889
 8022b40:	1ffea864 	.word	0x1ffea864
 8022b44:	1ffea85c 	.word	0x1ffea85c
 8022b48:	1ffea974 	.word	0x1ffea974
 8022b4c:	1ffea930 	.word	0x1ffea930

08022b50 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8022b50:	b480      	push	{r7}
 8022b52:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8022b54:	4b04      	ldr	r3, [pc, #16]	; (8022b68 <StopOutputHandler+0x18>)
 8022b56:	2200      	movs	r2, #0
 8022b58:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 8022b5a:	4b04      	ldr	r3, [pc, #16]	; (8022b6c <StopOutputHandler+0x1c>)
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	701a      	strb	r2, [r3, #0]
}
 8022b60:	46bd      	mov	sp, r7
 8022b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b66:	4770      	bx	lr
 8022b68:	1ffea884 	.word	0x1ffea884
 8022b6c:	1ffea88a 	.word	0x1ffea88a

08022b70 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 8022b70:	b580      	push	{r7, lr}
 8022b72:	b082      	sub	sp, #8
 8022b74:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 8022b76:	4b34      	ldr	r3, [pc, #208]	; (8022c48 <StopInputHandler+0xd8>)
 8022b78:	881b      	ldrh	r3, [r3, #0]
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	d002      	beq.n	8022b84 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
        DisableSyncManChannel(PROCESS_DATA_OUT);
 8022b7e:	2002      	movs	r0, #2
 8022b80:	f7ff f9ae 	bl	8021ee0 <DisableSyncManChannel>
    }

    if(nPdInputSize > 0)
 8022b84:	4b31      	ldr	r3, [pc, #196]	; (8022c4c <StopInputHandler+0xdc>)
 8022b86:	881b      	ldrh	r3, [r3, #0]
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d002      	beq.n	8022b92 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 8022b8c:	2003      	movs	r0, #3
 8022b8e:	f7ff f9a7 	bl	8021ee0 <DisableSyncManChannel>
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 8022b92:	230c      	movs	r3, #12
 8022b94:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 8022b96:	88fb      	ldrh	r3, [r7, #6]
 8022b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022b9c:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 8022b9e:	88fb      	ldrh	r3, [r7, #6]
 8022ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022ba4:	80fb      	strh	r3, [r7, #6]

    ResetALEventMask( ~(ResetMask) );
 8022ba6:	88fb      	ldrh	r3, [r7, #6]
 8022ba8:	43db      	mvns	r3, r3
 8022baa:	b29b      	uxth	r3, r3
 8022bac:	4618      	mov	r0, r3
 8022bae:	f7ff f92d 	bl	8021e0c <ResetALEventMask>
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 8022bb2:	4b27      	ldr	r3, [pc, #156]	; (8022c50 <StopInputHandler+0xe0>)
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 8022bb8:	4b26      	ldr	r3, [pc, #152]	; (8022c54 <StopInputHandler+0xe4>)
 8022bba:	2200      	movs	r2, #0
 8022bbc:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 8022bbe:	4b26      	ldr	r3, [pc, #152]	; (8022c58 <StopInputHandler+0xe8>)
 8022bc0:	2200      	movs	r2, #0
 8022bc2:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8022bc4:	4b25      	ldr	r3, [pc, #148]	; (8022c5c <StopInputHandler+0xec>)
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8022bca:	4b25      	ldr	r3, [pc, #148]	; (8022c60 <StopInputHandler+0xf0>)
 8022bcc:	2200      	movs	r2, #0
 8022bce:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8022bd0:	4b24      	ldr	r3, [pc, #144]	; (8022c64 <StopInputHandler+0xf4>)
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8022bd6:	4b24      	ldr	r3, [pc, #144]	; (8022c68 <StopInputHandler+0xf8>)
 8022bd8:	2200      	movs	r2, #0
 8022bda:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 8022bdc:	4b23      	ldr	r3, [pc, #140]	; (8022c6c <StopInputHandler+0xfc>)
 8022bde:	2200      	movs	r2, #0
 8022be0:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8022be2:	4b23      	ldr	r3, [pc, #140]	; (8022c70 <StopInputHandler+0x100>)
 8022be4:	2200      	movs	r2, #0
 8022be6:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8022be8:	4b22      	ldr	r3, [pc, #136]	; (8022c74 <StopInputHandler+0x104>)
 8022bea:	2200      	movs	r2, #0
 8022bec:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8022bee:	4b22      	ldr	r3, [pc, #136]	; (8022c78 <StopInputHandler+0x108>)
 8022bf0:	2200      	movs	r2, #0
 8022bf2:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8022bf4:	4b21      	ldr	r3, [pc, #132]	; (8022c7c <StopInputHandler+0x10c>)
 8022bf6:	2200      	movs	r2, #0
 8022bf8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8022bfa:	4b21      	ldr	r3, [pc, #132]	; (8022c80 <StopInputHandler+0x110>)
 8022bfc:	2200      	movs	r2, #0
 8022bfe:	801a      	strh	r2, [r3, #0]

    /*ECATCHANGE_START(V5.12) ECAT5*/

    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8022c00:	4b20      	ldr	r3, [pc, #128]	; (8022c84 <StopInputHandler+0x114>)
 8022c02:	2200      	movs	r2, #0
 8022c04:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8022c06:	4b1f      	ldr	r3, [pc, #124]	; (8022c84 <StopInputHandler+0x114>)
 8022c08:	2200      	movs	r2, #0
 8022c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManOutPar.u8SyncError = 0;
 8022c0c:	4b1d      	ldr	r3, [pc, #116]	; (8022c84 <StopInputHandler+0x114>)
 8022c0e:	2200      	movs	r2, #0
 8022c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 8022c14:	4b1c      	ldr	r3, [pc, #112]	; (8022c88 <StopInputHandler+0x118>)
 8022c16:	2200      	movs	r2, #0
 8022c18:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 8022c1a:	4b1b      	ldr	r3, [pc, #108]	; (8022c88 <StopInputHandler+0x118>)
 8022c1c:	2200      	movs	r2, #0
 8022c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManInPar.u8SyncError = 0;
 8022c20:	4b19      	ldr	r3, [pc, #100]	; (8022c88 <StopInputHandler+0x118>)
 8022c22:	2200      	movs	r2, #0
 8022c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.12) ECAT5*/

    i16WaitForPllRunningTimeout = 0;
 8022c28:	4b18      	ldr	r3, [pc, #96]	; (8022c8c <StopInputHandler+0x11c>)
 8022c2a:	2200      	movs	r2, #0
 8022c2c:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 8022c2e:	4b18      	ldr	r3, [pc, #96]	; (8022c90 <StopInputHandler+0x120>)
 8022c30:	2200      	movs	r2, #0
 8022c32:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8022c34:	4b17      	ldr	r3, [pc, #92]	; (8022c94 <StopInputHandler+0x124>)
 8022c36:	2200      	movs	r2, #0
 8022c38:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8022c3a:	4b17      	ldr	r3, [pc, #92]	; (8022c98 <StopInputHandler+0x128>)
 8022c3c:	2200      	movs	r2, #0
 8022c3e:	701a      	strb	r2, [r3, #0]
}
 8022c40:	3708      	adds	r7, #8
 8022c42:	46bd      	mov	sp, r7
 8022c44:	bd80      	pop	{r7, pc}
 8022c46:	bf00      	nop
 8022c48:	1ffea852 	.word	0x1ffea852
 8022c4c:	1ffea87e 	.word	0x1ffea87e
 8022c50:	1ffea884 	.word	0x1ffea884
 8022c54:	1ffea891 	.word	0x1ffea891
 8022c58:	1ffea889 	.word	0x1ffea889
 8022c5c:	1ffea86c 	.word	0x1ffea86c
 8022c60:	1ffea885 	.word	0x1ffea885
 8022c64:	1ffea880 	.word	0x1ffea880
 8022c68:	1ffea894 	.word	0x1ffea894
 8022c6c:	1ffea860 	.word	0x1ffea860
 8022c70:	1ffea856 	.word	0x1ffea856
 8022c74:	1ffea88c 	.word	0x1ffea88c
 8022c78:	1ffea866 	.word	0x1ffea866
 8022c7c:	1ffea87a 	.word	0x1ffea87a
 8022c80:	1ffea85a 	.word	0x1ffea85a
 8022c84:	1ffea974 	.word	0x1ffea974
 8022c88:	1ffea930 	.word	0x1ffea930
 8022c8c:	1ffea864 	.word	0x1ffea864
 8022c90:	1ffea892 	.word	0x1ffea892
 8022c94:	1ffea890 	.word	0x1ffea890
 8022c98:	1ffea9b8 	.word	0x1ffea9b8

08022c9c <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 8022c9c:	b480      	push	{r7}
 8022c9e:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 8022ca0:	4b03      	ldr	r3, [pc, #12]	; (8022cb0 <BackToInitTransition+0x14>)
 8022ca2:	2200      	movs	r2, #0
 8022ca4:	701a      	strb	r2, [r3, #0]
}
 8022ca6:	46bd      	mov	sp, r7
 8022ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cac:	4770      	bx	lr
 8022cae:	bf00      	nop
 8022cb0:	1ffea9b8 	.word	0x1ffea9b8

08022cb4 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8022cb4:	b480      	push	{r7}
 8022cb6:	b085      	sub	sp, #20
 8022cb8:	af00      	add	r7, sp, #0
 8022cba:	4603      	mov	r3, r0
 8022cbc:	460a      	mov	r2, r1
 8022cbe:	71fb      	strb	r3, [r7, #7]
 8022cc0:	4613      	mov	r3, r2
 8022cc2:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8022cc4:	88bb      	ldrh	r3, [r7, #4]
 8022cc6:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8022cc8:	4b26      	ldr	r3, [pc, #152]	; (8022d64 <SetALStatus+0xb0>)
 8022cca:	781b      	ldrb	r3, [r3, #0]
 8022ccc:	79fa      	ldrb	r2, [r7, #7]
 8022cce:	429a      	cmp	r2, r3
 8022cd0:	d002      	beq.n	8022cd8 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 8022cd2:	4a24      	ldr	r2, [pc, #144]	; (8022d64 <SetALStatus+0xb0>)
 8022cd4:	79fb      	ldrb	r3, [r7, #7]
 8022cd6:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8022cd8:	88bb      	ldrh	r3, [r7, #4]
 8022cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d002      	beq.n	8022ce8 <SetALStatus+0x34>
    {
        Value = SWAPWORD(Value);

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8022ce2:	4a21      	ldr	r2, [pc, #132]	; (8022d68 <SetALStatus+0xb4>)
 8022ce4:	89fb      	ldrh	r3, [r7, #14]
 8022ce6:	8013      	strh	r3, [r2, #0]
    }

    Value = nAlStatus;
 8022ce8:	4b1e      	ldr	r3, [pc, #120]	; (8022d64 <SetALStatus+0xb0>)
 8022cea:	781b      	ldrb	r3, [r3, #0]
 8022cec:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 8022cee:	4a1f      	ldr	r2, [pc, #124]	; (8022d6c <SetALStatus+0xb8>)
 8022cf0:	89fb      	ldrh	r3, [r7, #14]
 8022cf2:	8013      	strh	r3, [r2, #0]

    /*The Run LED state is set in Set LED Indication, only the Error LED blink code is set here*/

    /*set Error blink code*/
    if(alStatusCode == 0x00 || !(alStatus & STATE_CHANGE))
 8022cf4:	88bb      	ldrh	r3, [r7, #4]
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	d004      	beq.n	8022d04 <SetALStatus+0x50>
 8022cfa:	79fb      	ldrb	r3, [r7, #7]
 8022cfc:	f003 0310 	and.w	r3, r3, #16
 8022d00:	2b00      	cmp	r3, #0
 8022d02:	d103      	bne.n	8022d0c <SetALStatus+0x58>
    {
        u8EcatErrorLed = LED_OFF;
 8022d04:	4b1a      	ldr	r3, [pc, #104]	; (8022d70 <SetALStatus+0xbc>)
 8022d06:	2200      	movs	r2, #0
 8022d08:	701a      	strb	r2, [r3, #0]
 8022d0a:	e01a      	b.n	8022d42 <SetALStatus+0x8e>
    }
    else if((alStatusCode == ALSTATUSCODE_NOSYNCERROR) ||
 8022d0c:	88bb      	ldrh	r3, [r7, #4]
 8022d0e:	2b2d      	cmp	r3, #45	; 0x2d
 8022d10:	d009      	beq.n	8022d26 <SetALStatus+0x72>
 8022d12:	88bb      	ldrh	r3, [r7, #4]
 8022d14:	2b1a      	cmp	r3, #26
 8022d16:	d006      	beq.n	8022d26 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_SYNCERROR) ||
 8022d18:	88bb      	ldrh	r3, [r7, #4]
 8022d1a:	2b32      	cmp	r3, #50	; 0x32
 8022d1c:	d003      	beq.n	8022d26 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_DCPLLSYNCERROR)
/*ECATCHANGE_START(V5.12) ECAT7*/
        || (bLocalErrorFlag == TRUE))
 8022d1e:	4b15      	ldr	r3, [pc, #84]	; (8022d74 <SetALStatus+0xc0>)
 8022d20:	781b      	ldrb	r3, [r3, #0]
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d003      	beq.n	8022d2e <SetALStatus+0x7a>
/*ECATCHANGE_END(V5.12) ECAT7*/
    {
        u8EcatErrorLed = LED_SINGLEFLASH;
 8022d26:	4b12      	ldr	r3, [pc, #72]	; (8022d70 <SetALStatus+0xbc>)
 8022d28:	2201      	movs	r2, #1
 8022d2a:	701a      	strb	r2, [r3, #0]
 8022d2c:	e009      	b.n	8022d42 <SetALStatus+0x8e>
    }
    else if((alStatusCode == ALSTATUSCODE_SMWATCHDOG))
 8022d2e:	88bb      	ldrh	r3, [r7, #4]
 8022d30:	2b1b      	cmp	r3, #27
 8022d32:	d103      	bne.n	8022d3c <SetALStatus+0x88>
    {
        u8EcatErrorLed = LED_DOUBLEFLASH;
 8022d34:	4b0e      	ldr	r3, [pc, #56]	; (8022d70 <SetALStatus+0xbc>)
 8022d36:	2202      	movs	r2, #2
 8022d38:	701a      	strb	r2, [r3, #0]
 8022d3a:	e002      	b.n	8022d42 <SetALStatus+0x8e>
    }
    else
    {
        u8EcatErrorLed = LED_BLINKING;
 8022d3c:	4b0c      	ldr	r3, [pc, #48]	; (8022d70 <SetALStatus+0xbc>)
 8022d3e:	220d      	movs	r2, #13
 8022d40:	701a      	strb	r2, [r3, #0]
    }
    u8EcatErrorLed |= LED_OVERRIDE;
 8022d42:	4b0b      	ldr	r3, [pc, #44]	; (8022d70 <SetALStatus+0xbc>)
 8022d44:	781b      	ldrb	r3, [r3, #0]
 8022d46:	f043 0310 	orr.w	r3, r3, #16
 8022d4a:	b2da      	uxtb	r2, r3
 8022d4c:	4b08      	ldr	r3, [pc, #32]	; (8022d70 <SetALStatus+0xbc>)
 8022d4e:	701a      	strb	r2, [r3, #0]

    HW_EscWriteByte(u8EcatErrorLed,ESC_ERROR_LED_OVERRIDE);
 8022d50:	4b09      	ldr	r3, [pc, #36]	; (8022d78 <SetALStatus+0xc4>)
 8022d52:	4a07      	ldr	r2, [pc, #28]	; (8022d70 <SetALStatus+0xbc>)
 8022d54:	7812      	ldrb	r2, [r2, #0]
 8022d56:	701a      	strb	r2, [r3, #0]
}
 8022d58:	3714      	adds	r7, #20
 8022d5a:	46bd      	mov	sp, r7
 8022d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d60:	4770      	bx	lr
 8022d62:	bf00      	nop
 8022d64:	1ffea851 	.word	0x1ffea851
 8022d68:	54010134 	.word	0x54010134
 8022d6c:	54010130 	.word	0x54010130
 8022d70:	1ffea897 	.word	0x1ffea897
 8022d74:	1ffea858 	.word	0x1ffea858
 8022d78:	54010139 	.word	0x54010139

08022d7c <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 8022d7c:	b580      	push	{r7, lr}
 8022d7e:	b084      	sub	sp, #16
 8022d80:	af00      	add	r7, sp, #0
 8022d82:	4603      	mov	r3, r0
 8022d84:	460a      	mov	r2, r1
 8022d86:	71fb      	strb	r3, [r7, #7]
 8022d88:	4613      	mov	r3, r2
 8022d8a:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 8022d8c:	2300      	movs	r3, #0
 8022d8e:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8022d90:	2300      	movs	r3, #0
 8022d92:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8022d94:	4bbd      	ldr	r3, [pc, #756]	; (802308c <AL_ControlInd+0x310>)
 8022d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022d9a:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 8022d9c:	4bbc      	ldr	r3, [pc, #752]	; (8023090 <AL_ControlInd+0x314>)
 8022d9e:	2201      	movs	r2, #1
 8022da0:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8022da2:	79fb      	ldrb	r3, [r7, #7]
 8022da4:	f003 0310 	and.w	r3, r3, #16
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	d009      	beq.n	8022dc0 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 8022dac:	2301      	movs	r3, #1
 8022dae:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 8022db0:	4bb8      	ldr	r3, [pc, #736]	; (8023094 <AL_ControlInd+0x318>)
 8022db2:	781b      	ldrb	r3, [r3, #0]
 8022db4:	f023 0310 	bic.w	r3, r3, #16
 8022db8:	b2da      	uxtb	r2, r3
 8022dba:	4bb6      	ldr	r3, [pc, #728]	; (8023094 <AL_ControlInd+0x318>)
 8022dbc:	701a      	strb	r2, [r3, #0]
 8022dbe:	e012      	b.n	8022de6 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ((nAlStatus & STATE_CHANGE)
 8022dc0:	4bb4      	ldr	r3, [pc, #720]	; (8023094 <AL_ControlInd+0x318>)
 8022dc2:	781b      	ldrb	r3, [r3, #0]
 8022dc4:	f003 0310 	and.w	r3, r3, #16
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d005      	beq.n	8022dd8 <AL_ControlInd+0x5c>
        // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
        //               (the error was acknowledged with the same state before independent of the acknowledge flag)
        /*Error Acknowledge with 0xX1 is allowed*/
        && (alControl & STATE_MASK) != STATE_INIT)
 8022dcc:	79fb      	ldrb	r3, [r7, #7]
 8022dce:	f003 030f 	and.w	r3, r3, #15
 8022dd2:	2b01      	cmp	r3, #1
 8022dd4:	d000      	beq.n	8022dd8 <AL_ControlInd+0x5c>
    {
        /* the error flag (Bit 4) is set in the AL-Status and the ErrAck bit (Bit 4)
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
 8022dd6:	e37a      	b.n	80234ce <AL_ControlInd+0x752>
    }
    else
    {
        nAlStatus &= STATE_MASK;
 8022dd8:	4bae      	ldr	r3, [pc, #696]	; (8023094 <AL_ControlInd+0x318>)
 8022dda:	781b      	ldrb	r3, [r3, #0]
 8022ddc:	f003 030f 	and.w	r3, r3, #15
 8022de0:	b2da      	uxtb	r2, r3
 8022de2:	4bac      	ldr	r3, [pc, #688]	; (8023094 <AL_ControlInd+0x318>)
 8022de4:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8022de6:	79fb      	ldrb	r3, [r7, #7]
 8022de8:	f003 030f 	and.w	r3, r3, #15
 8022dec:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 8022dee:	4ba9      	ldr	r3, [pc, #676]	; (8023094 <AL_ControlInd+0x318>)
 8022df0:	781b      	ldrb	r3, [r3, #0]
 8022df2:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8022df4:	7b3b      	ldrb	r3, [r7, #12]
 8022df6:	011b      	lsls	r3, r3, #4
 8022df8:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 8022dfa:	7b3a      	ldrb	r2, [r7, #12]
 8022dfc:	79fb      	ldrb	r3, [r7, #7]
 8022dfe:	4413      	add	r3, r2
 8022e00:	733b      	strb	r3, [r7, #12]

    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8022e02:	7b3b      	ldrb	r3, [r7, #12]
 8022e04:	2b44      	cmp	r3, #68	; 0x44
 8022e06:	d029      	beq.n	8022e5c <AL_ControlInd+0xe0>
 8022e08:	2b44      	cmp	r3, #68	; 0x44
 8022e0a:	dc0b      	bgt.n	8022e24 <AL_ControlInd+0xa8>
 8022e0c:	2b22      	cmp	r3, #34	; 0x22
 8022e0e:	d015      	beq.n	8022e3c <AL_ControlInd+0xc0>
 8022e10:	2b22      	cmp	r3, #34	; 0x22
 8022e12:	dc02      	bgt.n	8022e1a <AL_ControlInd+0x9e>
 8022e14:	2b12      	cmp	r3, #18
 8022e16:	d011      	beq.n	8022e3c <AL_ControlInd+0xc0>
 8022e18:	e028      	b.n	8022e6c <AL_ControlInd+0xf0>
 8022e1a:	2b24      	cmp	r3, #36	; 0x24
 8022e1c:	d014      	beq.n	8022e48 <AL_ControlInd+0xcc>
 8022e1e:	2b42      	cmp	r3, #66	; 0x42
 8022e20:	d00c      	beq.n	8022e3c <AL_ControlInd+0xc0>
 8022e22:	e023      	b.n	8022e6c <AL_ControlInd+0xf0>
 8022e24:	2b82      	cmp	r3, #130	; 0x82
 8022e26:	d009      	beq.n	8022e3c <AL_ControlInd+0xc0>
 8022e28:	2b82      	cmp	r3, #130	; 0x82
 8022e2a:	dc02      	bgt.n	8022e32 <AL_ControlInd+0xb6>
 8022e2c:	2b48      	cmp	r3, #72	; 0x48
 8022e2e:	d015      	beq.n	8022e5c <AL_ControlInd+0xe0>
 8022e30:	e01c      	b.n	8022e6c <AL_ControlInd+0xf0>
 8022e32:	2b84      	cmp	r3, #132	; 0x84
 8022e34:	d012      	beq.n	8022e5c <AL_ControlInd+0xe0>
 8022e36:	2b88      	cmp	r3, #136	; 0x88
 8022e38:	d010      	beq.n	8022e5c <AL_ControlInd+0xe0>
 8022e3a:	e017      	b.n	8022e6c <AL_ControlInd+0xf0>
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 8022e3c:	2002      	movs	r0, #2
 8022e3e:	f7ff f8a3 	bl	8021f88 <CheckSmSettings>
 8022e42:	4603      	mov	r3, r0
 8022e44:	81fb      	strh	r3, [r7, #14]
        break;
 8022e46:	e011      	b.n	8022e6c <AL_ControlInd+0xf0>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8022e48:	4893      	ldr	r0, [pc, #588]	; (8023098 <AL_ControlInd+0x31c>)
 8022e4a:	4994      	ldr	r1, [pc, #592]	; (802309c <AL_ControlInd+0x320>)
 8022e4c:	f7fd fade 	bl	802040c <APPL_GenerateMapping>
 8022e50:	4603      	mov	r3, r0
 8022e52:	81fb      	strh	r3, [r7, #14]

            if (result != 0)
 8022e54:	89fb      	ldrh	r3, [r7, #14]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d000      	beq.n	8022e5c <AL_ControlInd+0xe0>
            {
                break;
 8022e5a:	e007      	b.n	8022e6c <AL_ControlInd+0xf0>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 8022e5c:	4b90      	ldr	r3, [pc, #576]	; (80230a0 <AL_ControlInd+0x324>)
 8022e5e:	781b      	ldrb	r3, [r3, #0]
 8022e60:	4618      	mov	r0, r3
 8022e62:	f7ff f891 	bl	8021f88 <CheckSmSettings>
 8022e66:	4603      	mov	r3, r0
 8022e68:	81fb      	strh	r3, [r7, #14]
        break;
 8022e6a:	bf00      	nop

    }

    if ( result == 0 )
 8022e6c:	89fb      	ldrh	r3, [r7, #14]
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	f040 825c 	bne.w	802332c <AL_ControlInd+0x5b0>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 8022e74:	4b8b      	ldr	r3, [pc, #556]	; (80230a4 <AL_ControlInd+0x328>)
 8022e76:	2200      	movs	r2, #0
 8022e78:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8022e7a:	7b3b      	ldrb	r3, [r7, #12]
 8022e7c:	3b11      	subs	r3, #17
 8022e7e:	2b77      	cmp	r3, #119	; 0x77
 8022e80:	f200 8250 	bhi.w	8023324 <AL_ControlInd+0x5a8>
 8022e84:	a201      	add	r2, pc, #4	; (adr r2, 8022e8c <AL_ControlInd+0x110>)
 8022e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e8a:	bf00      	nop
 8022e8c:	080232db 	.word	0x080232db
 8022e90:	0802313d 	.word	0x0802313d
 8022e94:	0802306d 	.word	0x0802306d
 8022e98:	0802331f 	.word	0x0802331f
 8022e9c:	08023325 	.word	0x08023325
 8022ea0:	08023325 	.word	0x08023325
 8022ea4:	08023325 	.word	0x08023325
 8022ea8:	0802331f 	.word	0x0802331f
 8022eac:	08023325 	.word	0x08023325
 8022eb0:	08023325 	.word	0x08023325
 8022eb4:	08023325 	.word	0x08023325
 8022eb8:	08023325 	.word	0x08023325
 8022ebc:	08023325 	.word	0x08023325
 8022ec0:	08023325 	.word	0x08023325
 8022ec4:	08023325 	.word	0x08023325
 8022ec8:	08023325 	.word	0x08023325
 8022ecc:	080232c9 	.word	0x080232c9
 8022ed0:	080232df 	.word	0x080232df
 8022ed4:	0802331f 	.word	0x0802331f
 8022ed8:	080231a7 	.word	0x080231a7
 8022edc:	08023325 	.word	0x08023325
 8022ee0:	08023325 	.word	0x08023325
 8022ee4:	08023325 	.word	0x08023325
 8022ee8:	0802331f 	.word	0x0802331f
 8022eec:	08023325 	.word	0x08023325
 8022ef0:	08023325 	.word	0x08023325
 8022ef4:	08023325 	.word	0x08023325
 8022ef8:	08023325 	.word	0x08023325
 8022efc:	08023325 	.word	0x08023325
 8022f00:	08023325 	.word	0x08023325
 8022f04:	08023325 	.word	0x08023325
 8022f08:	08023325 	.word	0x08023325
 8022f0c:	08023113 	.word	0x08023113
 8022f10:	0802331f 	.word	0x0802331f
 8022f14:	08023325 	.word	0x08023325
 8022f18:	0802331f 	.word	0x0802331f
 8022f1c:	08023325 	.word	0x08023325
 8022f20:	08023325 	.word	0x08023325
 8022f24:	08023325 	.word	0x08023325
 8022f28:	0802331f 	.word	0x0802331f
 8022f2c:	08023325 	.word	0x08023325
 8022f30:	08023325 	.word	0x08023325
 8022f34:	08023325 	.word	0x08023325
 8022f38:	08023325 	.word	0x08023325
 8022f3c:	08023325 	.word	0x08023325
 8022f40:	08023325 	.word	0x08023325
 8022f44:	08023325 	.word	0x08023325
 8022f48:	08023325 	.word	0x08023325
 8022f4c:	080232ab 	.word	0x080232ab
 8022f50:	0802327d 	.word	0x0802327d
 8022f54:	0802331f 	.word	0x0802331f
 8022f58:	080232df 	.word	0x080232df
 8022f5c:	08023325 	.word	0x08023325
 8022f60:	08023325 	.word	0x08023325
 8022f64:	08023325 	.word	0x08023325
 8022f68:	08023201 	.word	0x08023201
 8022f6c:	08023325 	.word	0x08023325
 8022f70:	08023325 	.word	0x08023325
 8022f74:	08023325 	.word	0x08023325
 8022f78:	08023325 	.word	0x08023325
 8022f7c:	08023325 	.word	0x08023325
 8022f80:	08023325 	.word	0x08023325
 8022f84:	08023325 	.word	0x08023325
 8022f88:	08023325 	.word	0x08023325
 8022f8c:	08023325 	.word	0x08023325
 8022f90:	08023325 	.word	0x08023325
 8022f94:	08023325 	.word	0x08023325
 8022f98:	08023325 	.word	0x08023325
 8022f9c:	08023325 	.word	0x08023325
 8022fa0:	08023325 	.word	0x08023325
 8022fa4:	08023325 	.word	0x08023325
 8022fa8:	08023325 	.word	0x08023325
 8022fac:	08023325 	.word	0x08023325
 8022fb0:	08023325 	.word	0x08023325
 8022fb4:	08023325 	.word	0x08023325
 8022fb8:	08023325 	.word	0x08023325
 8022fbc:	08023325 	.word	0x08023325
 8022fc0:	08023325 	.word	0x08023325
 8022fc4:	08023325 	.word	0x08023325
 8022fc8:	08023325 	.word	0x08023325
 8022fcc:	08023325 	.word	0x08023325
 8022fd0:	08023325 	.word	0x08023325
 8022fd4:	08023325 	.word	0x08023325
 8022fd8:	08023325 	.word	0x08023325
 8022fdc:	08023325 	.word	0x08023325
 8022fe0:	08023325 	.word	0x08023325
 8022fe4:	08023325 	.word	0x08023325
 8022fe8:	08023325 	.word	0x08023325
 8022fec:	08023325 	.word	0x08023325
 8022ff0:	08023325 	.word	0x08023325
 8022ff4:	08023325 	.word	0x08023325
 8022ff8:	08023325 	.word	0x08023325
 8022ffc:	08023325 	.word	0x08023325
 8023000:	08023325 	.word	0x08023325
 8023004:	08023325 	.word	0x08023325
 8023008:	08023325 	.word	0x08023325
 802300c:	08023325 	.word	0x08023325
 8023010:	08023325 	.word	0x08023325
 8023014:	08023325 	.word	0x08023325
 8023018:	08023325 	.word	0x08023325
 802301c:	08023325 	.word	0x08023325
 8023020:	08023325 	.word	0x08023325
 8023024:	08023325 	.word	0x08023325
 8023028:	08023325 	.word	0x08023325
 802302c:	08023325 	.word	0x08023325
 8023030:	08023325 	.word	0x08023325
 8023034:	08023325 	.word	0x08023325
 8023038:	08023325 	.word	0x08023325
 802303c:	08023325 	.word	0x08023325
 8023040:	08023325 	.word	0x08023325
 8023044:	08023325 	.word	0x08023325
 8023048:	08023325 	.word	0x08023325
 802304c:	0802328d 	.word	0x0802328d
 8023050:	0802325f 	.word	0x0802325f
 8023054:	0802331f 	.word	0x0802331f
 8023058:	0802324f 	.word	0x0802324f
 802305c:	08023325 	.word	0x08023325
 8023060:	08023325 	.word	0x08023325
 8023064:	08023325 	.word	0x08023325
 8023068:	080232df 	.word	0x080232df
        {
        case INIT_2_BOOT    :
            /* if the application has to execute code when going to BOOT this shall be done at this place */
            bBootMode = TRUE;
 802306c:	4b0e      	ldr	r3, [pc, #56]	; (80230a8 <AL_ControlInd+0x32c>)
 802306e:	2201      	movs	r2, #1
 8023070:	701a      	strb	r2, [r3, #0]

            if ( CheckSmSettings(MAILBOX_READ+1) != 0 )
 8023072:	2002      	movs	r0, #2
 8023074:	f7fe ff88 	bl	8021f88 <CheckSmSettings>
 8023078:	4603      	mov	r3, r0
 802307a:	2b00      	cmp	r3, #0
 802307c:	d016      	beq.n	80230ac <AL_ControlInd+0x330>
            {
                bBootMode = FALSE;
 802307e:	4b0a      	ldr	r3, [pc, #40]	; (80230a8 <AL_ControlInd+0x32c>)
 8023080:	2200      	movs	r2, #0
 8023082:	701a      	strb	r2, [r3, #0]
                result = ALSTATUSCODE_INVALIDMBXCFGINBOOT;
 8023084:	2315      	movs	r3, #21
 8023086:	81fb      	strh	r3, [r7, #14]
                break;
 8023088:	e14f      	b.n	802332a <AL_ControlInd+0x5ae>
 802308a:	bf00      	nop
 802308c:	1ffea886 	.word	0x1ffea886
 8023090:	1ffea850 	.word	0x1ffea850
 8023094:	1ffea851 	.word	0x1ffea851
 8023098:	1ffea87e 	.word	0x1ffea87e
 802309c:	1ffea852 	.word	0x1ffea852
 80230a0:	1ffea896 	.word	0x1ffea896
 80230a4:	1ffea84e 	.word	0x1ffea84e
 80230a8:	1ffea888 	.word	0x1ffea888
            }
            /* disable all events in BOOT state */
            ResetALEventMask(0);
 80230ac:	2000      	movs	r0, #0
 80230ae:	f7fe fead 	bl	8021e0c <ResetALEventMask>

            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SM0 and SM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 80230b2:	f000 ff9f 	bl	8023ff4 <MBX_StartMailboxHandler>
 80230b6:	4603      	mov	r3, r0
 80230b8:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 80230ba:	89fb      	ldrh	r3, [r7, #14]
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d10c      	bne.n	80230da <AL_ControlInd+0x35e>
            {
                bApplEsmPending = FALSE;
 80230c0:	4bab      	ldr	r3, [pc, #684]	; (8023370 <AL_ControlInd+0x5f4>)
 80230c2:	2200      	movs	r2, #0
 80230c4:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                    if the state transition from INIT to BOOT should be done
                    if result is NOERROR_INWORK, the slave will stay in INIT until timeout 
                    or transition is complete by AL_ControlRes*/
            
                result = APPL_StartMailboxHandler();
 80230c6:	f7fd f96d 	bl	80203a4 <APPL_StartMailboxHandler>
 80230ca:	4603      	mov	r3, r0
 80230cc:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 80230ce:	89fb      	ldrh	r3, [r7, #14]
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d102      	bne.n	80230da <AL_ControlInd+0x35e>
                {
                    /*transition successful*/
                    bMbxRunning = TRUE;
 80230d4:	4ba7      	ldr	r3, [pc, #668]	; (8023374 <AL_ControlInd+0x5f8>)
 80230d6:	2201      	movs	r2, #1
 80230d8:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 80230da:	89fb      	ldrh	r3, [r7, #14]
 80230dc:	2b00      	cmp	r3, #0
 80230de:	d00d      	beq.n	80230fc <AL_ControlInd+0x380>
 80230e0:	89fb      	ldrh	r3, [r7, #14]
 80230e2:	2bff      	cmp	r3, #255	; 0xff
 80230e4:	d00a      	beq.n	80230fc <AL_ControlInd+0x380>
            {
                /*Stop APPL Mbx handler if the APPL start handler was called before*/
                    if (!bApplEsmPending)
 80230e6:	4ba2      	ldr	r3, [pc, #648]	; (8023370 <AL_ControlInd+0x5f4>)
 80230e8:	781b      	ldrb	r3, [r3, #0]
 80230ea:	f083 0301 	eor.w	r3, r3, #1
 80230ee:	b2db      	uxtb	r3, r3
 80230f0:	2b00      	cmp	r3, #0
 80230f2:	d001      	beq.n	80230f8 <AL_ControlInd+0x37c>
                    {
                        APPL_StopMailboxHandler();
 80230f4:	f7fd f95e 	bl	80203b4 <APPL_StopMailboxHandler>
                    }

                 MBX_StopMailboxHandler();
 80230f8:	f001 f804 	bl	8024104 <MBX_StopMailboxHandler>
            }

            BL_Start( STATE_BOOT );
 80230fc:	2003      	movs	r0, #3
 80230fe:	f7fd fa67 	bl	80205d0 <BL_Start>

            if (result != 0)
 8023102:	89fb      	ldrh	r3, [r7, #14]
 8023104:	2b00      	cmp	r3, #0
 8023106:	d003      	beq.n	8023110 <AL_ControlInd+0x394>
            {
                bBootMode = FALSE;
 8023108:	4b9b      	ldr	r3, [pc, #620]	; (8023378 <AL_ControlInd+0x5fc>)
 802310a:	2200      	movs	r2, #0
 802310c:	701a      	strb	r2, [r3, #0]
            }



            break;
 802310e:	e10c      	b.n	802332a <AL_ControlInd+0x5ae>
 8023110:	e10b      	b.n	802332a <AL_ControlInd+0x5ae>

        case BOOT_2_INIT    :
            if(bBootMode)
 8023112:	4b99      	ldr	r3, [pc, #612]	; (8023378 <AL_ControlInd+0x5fc>)
 8023114:	781b      	ldrb	r3, [r3, #0]
 8023116:	2b00      	cmp	r3, #0
 8023118:	d00b      	beq.n	8023132 <AL_ControlInd+0x3b6>
            {
                bBootMode = FALSE;
 802311a:	4b97      	ldr	r3, [pc, #604]	; (8023378 <AL_ControlInd+0x5fc>)
 802311c:	2200      	movs	r2, #0
 802311e:	701a      	strb	r2, [r3, #0]
                /* disable all events in BOOT state */
                ResetALEventMask(0);
 8023120:	2000      	movs	r0, #0
 8023122:	f7fe fe73 	bl	8021e0c <ResetALEventMask>
                MBX_StopMailboxHandler();
 8023126:	f000 ffed 	bl	8024104 <MBX_StopMailboxHandler>
                result = APPL_StopMailboxHandler();
 802312a:	f7fd f943 	bl	80203b4 <APPL_StopMailboxHandler>
 802312e:	4603      	mov	r3, r0
 8023130:	81fb      	strh	r3, [r7, #14]
            }

            BL_Stop();
 8023132:	f7fd fa57 	bl	80205e4 <BL_Stop>

            BackToInitTransition();
 8023136:	f7ff fdb1 	bl	8022c9c <BackToInitTransition>



            break;
 802313a:	e0f6      	b.n	802332a <AL_ControlInd+0x5ae>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 802313c:	f7fe fe96 	bl	8021e6c <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8023140:	4b8e      	ldr	r3, [pc, #568]	; (802337c <AL_ControlInd+0x600>)
 8023142:	781b      	ldrb	r3, [r3, #0]
 8023144:	f083 0301 	eor.w	r3, r3, #1
 8023148:	b2db      	uxtb	r3, r3
 802314a:	2b00      	cmp	r3, #0
 802314c:	d001      	beq.n	8023152 <AL_ControlInd+0x3d6>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 802314e:	2351      	movs	r3, #81	; 0x51
 8023150:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8023152:	89fb      	ldrh	r3, [r7, #14]
 8023154:	2b00      	cmp	r3, #0
 8023156:	d125      	bne.n	80231a4 <AL_ControlInd+0x428>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8023158:	f000 ff4c 	bl	8023ff4 <MBX_StartMailboxHandler>
 802315c:	4603      	mov	r3, r0
 802315e:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8023160:	89fb      	ldrh	r3, [r7, #14]
 8023162:	2b00      	cmp	r3, #0
 8023164:	d10c      	bne.n	8023180 <AL_ControlInd+0x404>
            {
                bApplEsmPending = FALSE;
 8023166:	4b82      	ldr	r3, [pc, #520]	; (8023370 <AL_ControlInd+0x5f4>)
 8023168:	2200      	movs	r2, #0
 802316a:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 802316c:	f7fd f91a 	bl	80203a4 <APPL_StartMailboxHandler>
 8023170:	4603      	mov	r3, r0
 8023172:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8023174:	89fb      	ldrh	r3, [r7, #14]
 8023176:	2b00      	cmp	r3, #0
 8023178:	d102      	bne.n	8023180 <AL_ControlInd+0x404>
                {
                    bMbxRunning = TRUE;
 802317a:	4b7e      	ldr	r3, [pc, #504]	; (8023374 <AL_ControlInd+0x5f8>)
 802317c:	2201      	movs	r2, #1
 802317e:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8023180:	89fb      	ldrh	r3, [r7, #14]
 8023182:	2b00      	cmp	r3, #0
 8023184:	d00e      	beq.n	80231a4 <AL_ControlInd+0x428>
 8023186:	89fb      	ldrh	r3, [r7, #14]
 8023188:	2bff      	cmp	r3, #255	; 0xff
 802318a:	d00b      	beq.n	80231a4 <AL_ControlInd+0x428>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                    if (!bApplEsmPending)
 802318c:	4b78      	ldr	r3, [pc, #480]	; (8023370 <AL_ControlInd+0x5f4>)
 802318e:	781b      	ldrb	r3, [r3, #0]
 8023190:	f083 0301 	eor.w	r3, r3, #1
 8023194:	b2db      	uxtb	r3, r3
 8023196:	2b00      	cmp	r3, #0
 8023198:	d001      	beq.n	802319e <AL_ControlInd+0x422>
                    {
                        APPL_StopMailboxHandler();
 802319a:	f7fd f90b 	bl	80203b4 <APPL_StopMailboxHandler>
                    }

                 MBX_StopMailboxHandler();
 802319e:	f000 ffb1 	bl	8024104 <MBX_StopMailboxHandler>
            }

            }
            break;
 80231a2:	e0c2      	b.n	802332a <AL_ControlInd+0x5ae>
 80231a4:	e0c1      	b.n	802332a <AL_ControlInd+0x5ae>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 80231a6:	f7ff f8cd 	bl	8022344 <StartInputHandler>
 80231aa:	4603      	mov	r3, r0
 80231ac:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 80231ae:	89fb      	ldrh	r3, [r7, #14]
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d112      	bne.n	80231da <AL_ControlInd+0x45e>
            {
                bApplEsmPending = FALSE;
 80231b4:	4b6e      	ldr	r3, [pc, #440]	; (8023370 <AL_ControlInd+0x5f4>)
 80231b6:	2200      	movs	r2, #0
 80231b8:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 80231ba:	4871      	ldr	r0, [pc, #452]	; (8023380 <AL_ControlInd+0x604>)
 80231bc:	f7fd f902 	bl	80203c4 <APPL_StartInputHandler>
 80231c0:	4603      	mov	r3, r0
 80231c2:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80231c4:	89fb      	ldrh	r3, [r7, #14]
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d107      	bne.n	80231da <AL_ControlInd+0x45e>
                {
                    /* initialize the AL Event Mask register (0x204) */
                    SetALEventMask( u16ALEventMask );
 80231ca:	4b6d      	ldr	r3, [pc, #436]	; (8023380 <AL_ControlInd+0x604>)
 80231cc:	881b      	ldrh	r3, [r3, #0]
 80231ce:	4618      	mov	r0, r3
 80231d0:	f7fe fe34 	bl	8021e3c <SetALEventMask>

                    bEcatInputUpdateRunning = TRUE;
 80231d4:	4b6b      	ldr	r3, [pc, #428]	; (8023384 <AL_ControlInd+0x608>)
 80231d6:	2201      	movs	r2, #1
 80231d8:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 80231da:	89fb      	ldrh	r3, [r7, #14]
 80231dc:	2b00      	cmp	r3, #0
 80231de:	d00e      	beq.n	80231fe <AL_ControlInd+0x482>
 80231e0:	89fb      	ldrh	r3, [r7, #14]
 80231e2:	2bff      	cmp	r3, #255	; 0xff
 80231e4:	d00b      	beq.n	80231fe <AL_ControlInd+0x482>
            {
                if(!bApplEsmPending)
 80231e6:	4b62      	ldr	r3, [pc, #392]	; (8023370 <AL_ControlInd+0x5f4>)
 80231e8:	781b      	ldrb	r3, [r3, #0]
 80231ea:	f083 0301 	eor.w	r3, r3, #1
 80231ee:	b2db      	uxtb	r3, r3
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d001      	beq.n	80231f8 <AL_ControlInd+0x47c>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 80231f4:	f7fd f8f2 	bl	80203dc <APPL_StopInputHandler>
                }

                StopInputHandler();
 80231f8:	f7ff fcba 	bl	8022b70 <StopInputHandler>
            }
            break;
 80231fc:	e095      	b.n	802332a <AL_ControlInd+0x5ae>
 80231fe:	e094      	b.n	802332a <AL_ControlInd+0x5ae>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8023200:	f7ff fc6c 	bl	8022adc <StartOutputHandler>
 8023204:	4603      	mov	r3, r0
 8023206:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8023208:	89fb      	ldrh	r3, [r7, #14]
 802320a:	2b00      	cmp	r3, #0
 802320c:	d10c      	bne.n	8023228 <AL_ControlInd+0x4ac>
            {
                bApplEsmPending = FALSE;
 802320e:	4b58      	ldr	r3, [pc, #352]	; (8023370 <AL_ControlInd+0x5f4>)
 8023210:	2200      	movs	r2, #0
 8023212:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 8023214:	f7fd f8ea 	bl	80203ec <APPL_StartOutputHandler>
 8023218:	4603      	mov	r3, r0
 802321a:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 802321c:	89fb      	ldrh	r3, [r7, #14]
 802321e:	2b00      	cmp	r3, #0
 8023220:	d102      	bne.n	8023228 <AL_ControlInd+0x4ac>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 8023222:	4b59      	ldr	r3, [pc, #356]	; (8023388 <AL_ControlInd+0x60c>)
 8023224:	2201      	movs	r2, #1
 8023226:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8023228:	89fb      	ldrh	r3, [r7, #14]
 802322a:	2b00      	cmp	r3, #0
 802322c:	d00e      	beq.n	802324c <AL_ControlInd+0x4d0>
 802322e:	89fb      	ldrh	r3, [r7, #14]
 8023230:	2bff      	cmp	r3, #255	; 0xff
 8023232:	d00b      	beq.n	802324c <AL_ControlInd+0x4d0>
            {
                    if (!bApplEsmPending)
 8023234:	4b4e      	ldr	r3, [pc, #312]	; (8023370 <AL_ControlInd+0x5f4>)
 8023236:	781b      	ldrb	r3, [r3, #0]
 8023238:	f083 0301 	eor.w	r3, r3, #1
 802323c:	b2db      	uxtb	r3, r3
 802323e:	2b00      	cmp	r3, #0
 8023240:	d001      	beq.n	8023246 <AL_ControlInd+0x4ca>
                    {
                        APPL_StopOutputHandler();
 8023242:	f7fd f8db 	bl	80203fc <APPL_StopOutputHandler>
                    }

                StopOutputHandler();
 8023246:	f7ff fc83 	bl	8022b50 <StopOutputHandler>
            }

            break;
 802324a:	e06e      	b.n	802332a <AL_ControlInd+0x5ae>
 802324c:	e06d      	b.n	802332a <AL_ControlInd+0x5ae>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 802324e:	f7fd f8d5 	bl	80203fc <APPL_StopOutputHandler>

            StopOutputHandler();
 8023252:	f7ff fc7d 	bl	8022b50 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8023256:	4b46      	ldr	r3, [pc, #280]	; (8023370 <AL_ControlInd+0x5f4>)
 8023258:	2200      	movs	r2, #0
 802325a:	701a      	strb	r2, [r3, #0]

            break;
 802325c:	e065      	b.n	802332a <AL_ControlInd+0x5ae>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 802325e:	f7fd f8cd 	bl	80203fc <APPL_StopOutputHandler>
 8023262:	4603      	mov	r3, r0
 8023264:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8023266:	f7ff fc73 	bl	8022b50 <StopOutputHandler>

            bApplEsmPending = FALSE;
 802326a:	4b41      	ldr	r3, [pc, #260]	; (8023370 <AL_ControlInd+0x5f4>)
 802326c:	2200      	movs	r2, #0
 802326e:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8023270:	89fb      	ldrh	r3, [r7, #14]
 8023272:	2b00      	cmp	r3, #0
 8023274:	d000      	beq.n	8023278 <AL_ControlInd+0x4fc>
            {
                break;
 8023276:	e058      	b.n	802332a <AL_ControlInd+0x5ae>
            }

            stateTrans = SAFEOP_2_PREOP;
 8023278:	2342      	movs	r3, #66	; 0x42
 802327a:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 802327c:	f7fd f8ae 	bl	80203dc <APPL_StopInputHandler>
           
            StopInputHandler();
 8023280:	f7ff fc76 	bl	8022b70 <StopInputHandler>

            bApplEsmPending = FALSE;
 8023284:	4b3a      	ldr	r3, [pc, #232]	; (8023370 <AL_ControlInd+0x5f4>)
 8023286:	2200      	movs	r2, #0
 8023288:	701a      	strb	r2, [r3, #0]

            break;
 802328a:	e04e      	b.n	802332a <AL_ControlInd+0x5ae>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 802328c:	f7fd f8b6 	bl	80203fc <APPL_StopOutputHandler>
 8023290:	4603      	mov	r3, r0
 8023292:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8023294:	f7ff fc5c 	bl	8022b50 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8023298:	4b35      	ldr	r3, [pc, #212]	; (8023370 <AL_ControlInd+0x5f4>)
 802329a:	2200      	movs	r2, #0
 802329c:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 802329e:	89fb      	ldrh	r3, [r7, #14]
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d000      	beq.n	80232a6 <AL_ControlInd+0x52a>
            {
                break;
 80232a4:	e041      	b.n	802332a <AL_ControlInd+0x5ae>
            }
            
            stateTrans = SAFEOP_2_INIT;
 80232a6:	2341      	movs	r3, #65	; 0x41
 80232a8:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 80232aa:	f7fd f897 	bl	80203dc <APPL_StopInputHandler>
 80232ae:	4603      	mov	r3, r0
 80232b0:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 80232b2:	f7ff fc5d 	bl	8022b70 <StopInputHandler>

            bApplEsmPending = FALSE;
 80232b6:	4b2e      	ldr	r3, [pc, #184]	; (8023370 <AL_ControlInd+0x5f4>)
 80232b8:	2200      	movs	r2, #0
 80232ba:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80232bc:	89fb      	ldrh	r3, [r7, #14]
 80232be:	2b00      	cmp	r3, #0
 80232c0:	d000      	beq.n	80232c4 <AL_ControlInd+0x548>
            {
                break;
 80232c2:	e032      	b.n	802332a <AL_ControlInd+0x5ae>
            }
            stateTrans = PREOP_2_INIT;
 80232c4:	2321      	movs	r3, #33	; 0x21
 80232c6:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 80232c8:	f000 ff1c 	bl	8024104 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 80232cc:	f7fd f872 	bl	80203b4 <APPL_StopMailboxHandler>
 80232d0:	4603      	mov	r3, r0
 80232d2:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 80232d4:	f7ff fce2 	bl	8022c9c <BackToInitTransition>
            break;
 80232d8:	e027      	b.n	802332a <AL_ControlInd+0x5ae>

        case INIT_2_INIT:
            BackToInitTransition();
 80232da:	f7ff fcdf 	bl	8022c9c <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 80232de:	7b7b      	ldrb	r3, [r7, #13]
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	d004      	beq.n	80232ee <AL_ControlInd+0x572>
            {
                APPL_AckErrorInd(stateTrans);
 80232e4:	7b3b      	ldrb	r3, [r7, #12]
 80232e6:	b29b      	uxth	r3, r3
 80232e8:	4618      	mov	r0, r3
 80232ea:	f7fd f851 	bl	8020390 <APPL_AckErrorInd>
            }

/*ECATCHANGE_START(V5.12) ESM2*/

                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 80232ee:	4b27      	ldr	r3, [pc, #156]	; (802338c <AL_ControlInd+0x610>)
 80232f0:	781b      	ldrb	r3, [r3, #0]
 80232f2:	f003 030c 	and.w	r3, r3, #12
 80232f6:	2b00      	cmp	r3, #0
 80232f8:	d00e      	beq.n	8023318 <AL_ControlInd+0x59c>
                {
                    if(nPdOutputSize > 0)
 80232fa:	4b25      	ldr	r3, [pc, #148]	; (8023390 <AL_ControlInd+0x614>)
 80232fc:	881b      	ldrh	r3, [r3, #0]
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d003      	beq.n	802330a <AL_ControlInd+0x58e>
                    {
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 8023302:	2002      	movs	r0, #2
 8023304:	f7fe fe16 	bl	8021f34 <EnableSyncManChannel>
 8023308:	e006      	b.n	8023318 <AL_ControlInd+0x59c>
                    }
                    else 
                    if(nPdInputSize > 0)
 802330a:	4b22      	ldr	r3, [pc, #136]	; (8023394 <AL_ControlInd+0x618>)
 802330c:	881b      	ldrh	r3, [r3, #0]
 802330e:	2b00      	cmp	r3, #0
 8023310:	d002      	beq.n	8023318 <AL_ControlInd+0x59c>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8023312:	2003      	movs	r0, #3
 8023314:	f7fe fe0e 	bl	8021f34 <EnableSyncManChannel>
                    }
                }
/*ECATCHANGE_END(V5.12) ESM2*/
            
            result = NOERROR_NOSTATECHANGE;
 8023318:	23fe      	movs	r3, #254	; 0xfe
 802331a:	81fb      	strh	r3, [r7, #14]
            break;
 802331c:	e005      	b.n	802332a <AL_ControlInd+0x5ae>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 802331e:	2311      	movs	r3, #17
 8023320:	81fb      	strh	r3, [r7, #14]
            break;
 8023322:	e002      	b.n	802332a <AL_ControlInd+0x5ae>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 8023324:	2312      	movs	r3, #18
 8023326:	81fb      	strh	r3, [r7, #14]
            break;
 8023328:	bf00      	nop
 802332a:	e038      	b.n	802339e <AL_ControlInd+0x622>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 802332c:	4b17      	ldr	r3, [pc, #92]	; (802338c <AL_ControlInd+0x610>)
 802332e:	781b      	ldrb	r3, [r3, #0]
 8023330:	2b04      	cmp	r3, #4
 8023332:	d008      	beq.n	8023346 <AL_ControlInd+0x5ca>
 8023334:	2b08      	cmp	r3, #8
 8023336:	d002      	beq.n	802333e <AL_ControlInd+0x5c2>
 8023338:	2b02      	cmp	r3, #2
 802333a:	d008      	beq.n	802334e <AL_ControlInd+0x5d2>
 802333c:	e02f      	b.n	802339e <AL_ControlInd+0x622>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 802333e:	f7fd f85d 	bl	80203fc <APPL_StopOutputHandler>
            StopOutputHandler();
 8023342:	f7ff fc05 	bl	8022b50 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8023346:	f7fd f849 	bl	80203dc <APPL_StopInputHandler>

            StopInputHandler();
 802334a:	f7ff fc11 	bl	8022b70 <StopInputHandler>
        case STATE_PREOP:
            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 802334e:	89fb      	ldrh	r3, [r7, #14]
 8023350:	2b16      	cmp	r3, #22
 8023352:	d121      	bne.n	8023398 <AL_ControlInd+0x61c>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 8023354:	f000 fed6 	bl	8024104 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8023358:	f7fd f82c 	bl	80203b4 <APPL_StopMailboxHandler>

                /*Disable SM0 (MBX Out)*/
                DisableSyncManChannel(MAILBOX_WRITE);
 802335c:	2000      	movs	r0, #0
 802335e:	f7fe fdbf 	bl	8021ee0 <DisableSyncManChannel>

                /*Disable SM1 (MBX In)*/
                DisableSyncManChannel(MAILBOX_READ);
 8023362:	2001      	movs	r0, #1
 8023364:	f7fe fdbc 	bl	8021ee0 <DisableSyncManChannel>

                nAlStatus = STATE_INIT;
 8023368:	4b08      	ldr	r3, [pc, #32]	; (802338c <AL_ControlInd+0x610>)
 802336a:	2201      	movs	r2, #1
 802336c:	701a      	strb	r2, [r3, #0]
 802336e:	e016      	b.n	802339e <AL_ControlInd+0x622>
 8023370:	1ffea850 	.word	0x1ffea850
 8023374:	1ffea90a 	.word	0x1ffea90a
 8023378:	1ffea888 	.word	0x1ffea888
 802337c:	1ffe9582 	.word	0x1ffe9582
 8023380:	1ffea86a 	.word	0x1ffea86a
 8023384:	1ffea890 	.word	0x1ffea890
 8023388:	1ffea88a 	.word	0x1ffea88a
 802338c:	1ffea851 	.word	0x1ffea851
 8023390:	1ffea852 	.word	0x1ffea852
 8023394:	1ffea87e 	.word	0x1ffea87e
            }
            else
            {
                nAlStatus = STATE_PREOP;
 8023398:	4b4e      	ldr	r3, [pc, #312]	; (80234d4 <AL_ControlInd+0x758>)
 802339a:	2202      	movs	r2, #2
 802339c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if ( result == NOERROR_INWORK )
 802339e:	89fb      	ldrh	r3, [r7, #14]
 80233a0:	2bff      	cmp	r3, #255	; 0xff
 80233a2:	d135      	bne.n	8023410 <AL_ControlInd+0x694>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 80233a4:	4b4c      	ldr	r3, [pc, #304]	; (80234d8 <AL_ControlInd+0x75c>)
 80233a6:	2201      	movs	r2, #1
 80233a8:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 80233aa:	7b3b      	ldrb	r3, [r7, #12]
 80233ac:	b29a      	uxth	r2, r3
 80233ae:	4b4b      	ldr	r3, [pc, #300]	; (80234dc <AL_ControlInd+0x760>)
 80233b0:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 80233b2:	4b4a      	ldr	r3, [pc, #296]	; (80234dc <AL_ControlInd+0x760>)
 80233b4:	881b      	ldrh	r3, [r3, #0]
 80233b6:	2b24      	cmp	r3, #36	; 0x24
 80233b8:	d00d      	beq.n	80233d6 <AL_ControlInd+0x65a>
 80233ba:	2b24      	cmp	r3, #36	; 0x24
 80233bc:	dc03      	bgt.n	80233c6 <AL_ControlInd+0x64a>
 80233be:	3b12      	subs	r3, #18
 80233c0:	2b01      	cmp	r3, #1
 80233c2:	d80d      	bhi.n	80233e0 <AL_ControlInd+0x664>
 80233c4:	e002      	b.n	80233cc <AL_ControlInd+0x650>
 80233c6:	2b48      	cmp	r3, #72	; 0x48
 80233c8:	d005      	beq.n	80233d6 <AL_ControlInd+0x65a>
 80233ca:	e009      	b.n	80233e0 <AL_ControlInd+0x664>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 80233cc:	4b44      	ldr	r3, [pc, #272]	; (80234e0 <AL_ControlInd+0x764>)
 80233ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80233d2:	801a      	strh	r2, [r3, #0]
            break;
 80233d4:	e008      	b.n	80233e8 <AL_ControlInd+0x66c>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 80233d6:	4b42      	ldr	r3, [pc, #264]	; (80234e0 <AL_ControlInd+0x764>)
 80233d8:	f242 3228 	movw	r2, #9000	; 0x2328
 80233dc:	801a      	strh	r2, [r3, #0]
                break;
 80233de:	e003      	b.n	80233e8 <AL_ControlInd+0x66c>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 80233e0:	4b3f      	ldr	r3, [pc, #252]	; (80234e0 <AL_ControlInd+0x764>)
 80233e2:	22c8      	movs	r2, #200	; 0xc8
 80233e4:	801a      	strh	r2, [r3, #0]
                break;
 80233e6:	bf00      	nop
        }
        /*ECATCHANGE_START(V5.12) ESM3*/
        EsmTimeoutCounter -= (INT16) (EsmTimeoutCounter / 10); //subtract 10% from the timeout to react before the master runs into a timeout.
 80233e8:	4b3d      	ldr	r3, [pc, #244]	; (80234e0 <AL_ControlInd+0x764>)
 80233ea:	881b      	ldrh	r3, [r3, #0]
 80233ec:	b29a      	uxth	r2, r3
 80233ee:	4b3c      	ldr	r3, [pc, #240]	; (80234e0 <AL_ControlInd+0x764>)
 80233f0:	881b      	ldrh	r3, [r3, #0]
 80233f2:	b21b      	sxth	r3, r3
 80233f4:	493b      	ldr	r1, [pc, #236]	; (80234e4 <AL_ControlInd+0x768>)
 80233f6:	fb81 0103 	smull	r0, r1, r1, r3
 80233fa:	1089      	asrs	r1, r1, #2
 80233fc:	17db      	asrs	r3, r3, #31
 80233fe:	1acb      	subs	r3, r1, r3
 8023400:	b29b      	uxth	r3, r3
 8023402:	b29b      	uxth	r3, r3
 8023404:	1ad3      	subs	r3, r2, r3
 8023406:	b29b      	uxth	r3, r3
 8023408:	b29a      	uxth	r2, r3
 802340a:	4b35      	ldr	r3, [pc, #212]	; (80234e0 <AL_ControlInd+0x764>)
 802340c:	801a      	strh	r2, [r3, #0]
 802340e:	e05e      	b.n	80234ce <AL_ControlInd+0x752>
        /*ECATCHANGE_END(V5.12) ESM3*/

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8023410:	79fa      	ldrb	r2, [r7, #7]
 8023412:	4b30      	ldr	r3, [pc, #192]	; (80234d4 <AL_ControlInd+0x758>)
 8023414:	781b      	ldrb	r3, [r3, #0]
 8023416:	f003 030f 	and.w	r3, r3, #15
 802341a:	429a      	cmp	r2, r3
 802341c:	d04e      	beq.n	80234bc <AL_ControlInd+0x740>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 802341e:	89fb      	ldrh	r3, [r7, #14]
 8023420:	2b00      	cmp	r3, #0
 8023422:	d102      	bne.n	802342a <AL_ControlInd+0x6ae>
 8023424:	88bb      	ldrh	r3, [r7, #4]
 8023426:	2b00      	cmp	r3, #0
 8023428:	d01f      	beq.n	802346a <AL_ControlInd+0x6ee>
 802342a:	4b2a      	ldr	r3, [pc, #168]	; (80234d4 <AL_ControlInd+0x758>)
 802342c:	781a      	ldrb	r2, [r3, #0]
 802342e:	79fb      	ldrb	r3, [r7, #7]
 8023430:	4313      	orrs	r3, r2
 8023432:	b2db      	uxtb	r3, r3
 8023434:	f003 0308 	and.w	r3, r3, #8
 8023438:	2b00      	cmp	r3, #0
 802343a:	d016      	beq.n	802346a <AL_ControlInd+0x6ee>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 802343c:	4b2a      	ldr	r3, [pc, #168]	; (80234e8 <AL_ControlInd+0x76c>)
 802343e:	781b      	ldrb	r3, [r3, #0]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d003      	beq.n	802344c <AL_ControlInd+0x6d0>
            {
                APPL_StopOutputHandler();
 8023444:	f7fc ffda 	bl	80203fc <APPL_StopOutputHandler>

                StopOutputHandler();
 8023448:	f7ff fb82 	bl	8022b50 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 802344c:	4b27      	ldr	r3, [pc, #156]	; (80234ec <AL_ControlInd+0x770>)
 802344e:	881b      	ldrh	r3, [r3, #0]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d003      	beq.n	802345c <AL_ControlInd+0x6e0>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8023454:	2002      	movs	r0, #2
 8023456:	f7fe fd43 	bl	8021ee0 <DisableSyncManChannel>
 802345a:	e006      	b.n	802346a <AL_ControlInd+0x6ee>
            }
            else
                if(nPdInputSize > 0)
 802345c:	4b24      	ldr	r3, [pc, #144]	; (80234f0 <AL_ControlInd+0x774>)
 802345e:	881b      	ldrh	r3, [r3, #0]
 8023460:	2b00      	cmp	r3, #0
 8023462:	d002      	beq.n	802346a <AL_ControlInd+0x6ee>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8023464:	2003      	movs	r0, #3
 8023466:	f7fe fd3b 	bl	8021ee0 <DisableSyncManChannel>
            }

        }
        if ( result != 0 )
 802346a:	89fb      	ldrh	r3, [r7, #14]
 802346c:	2b00      	cmp	r3, #0
 802346e:	d00e      	beq.n	802348e <AL_ControlInd+0x712>
        {
                if (nAlStatus == STATE_OP)
 8023470:	4b18      	ldr	r3, [pc, #96]	; (80234d4 <AL_ControlInd+0x758>)
 8023472:	781b      	ldrb	r3, [r3, #0]
 8023474:	2b08      	cmp	r3, #8
 8023476:	d102      	bne.n	802347e <AL_ControlInd+0x702>
                {
                    nAlStatus = STATE_SAFEOP;
 8023478:	4b16      	ldr	r3, [pc, #88]	; (80234d4 <AL_ControlInd+0x758>)
 802347a:	2204      	movs	r2, #4
 802347c:	701a      	strb	r2, [r3, #0]
                }
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 802347e:	4b15      	ldr	r3, [pc, #84]	; (80234d4 <AL_ControlInd+0x758>)
 8023480:	781b      	ldrb	r3, [r3, #0]
 8023482:	f043 0310 	orr.w	r3, r3, #16
 8023486:	b2da      	uxtb	r2, r3
 8023488:	4b12      	ldr	r3, [pc, #72]	; (80234d4 <AL_ControlInd+0x758>)
 802348a:	701a      	strb	r2, [r3, #0]
 802348c:	e00b      	b.n	80234a6 <AL_ControlInd+0x72a>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 802348e:	88bb      	ldrh	r3, [r7, #4]
 8023490:	2b00      	cmp	r3, #0
 8023492:	d005      	beq.n	80234a0 <AL_ControlInd+0x724>
            {
                /* state change request from the user */
                result = alStatusCode;
 8023494:	88bb      	ldrh	r3, [r7, #4]
 8023496:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 8023498:	79fb      	ldrb	r3, [r7, #7]
 802349a:	f043 0310 	orr.w	r3, r3, #16
 802349e:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 80234a0:	4a0c      	ldr	r2, [pc, #48]	; (80234d4 <AL_ControlInd+0x758>)
 80234a2:	79fb      	ldrb	r3, [r7, #7]
 80234a4:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 80234a6:	4b0c      	ldr	r3, [pc, #48]	; (80234d8 <AL_ControlInd+0x75c>)
 80234a8:	2200      	movs	r2, #0
 80234aa:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 80234ac:	4b09      	ldr	r3, [pc, #36]	; (80234d4 <AL_ControlInd+0x758>)
 80234ae:	781a      	ldrb	r2, [r3, #0]
 80234b0:	89fb      	ldrh	r3, [r7, #14]
 80234b2:	4610      	mov	r0, r2
 80234b4:	4619      	mov	r1, r3
 80234b6:	f7ff fbfd 	bl	8022cb4 <SetALStatus>
 80234ba:	e008      	b.n	80234ce <AL_ControlInd+0x752>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 80234bc:	4b06      	ldr	r3, [pc, #24]	; (80234d8 <AL_ControlInd+0x75c>)
 80234be:	2200      	movs	r2, #0
 80234c0:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 80234c2:	4b04      	ldr	r3, [pc, #16]	; (80234d4 <AL_ControlInd+0x758>)
 80234c4:	781b      	ldrb	r3, [r3, #0]
 80234c6:	4618      	mov	r0, r3
 80234c8:	2100      	movs	r1, #0
 80234ca:	f7ff fbf3 	bl	8022cb4 <SetALStatus>
    }

}
 80234ce:	3710      	adds	r7, #16
 80234d0:	46bd      	mov	sp, r7
 80234d2:	bd80      	pop	{r7, pc}
 80234d4:	1ffea851 	.word	0x1ffea851
 80234d8:	1ffea87c 	.word	0x1ffea87c
 80234dc:	1ffea84e 	.word	0x1ffea84e
 80234e0:	1ffea886 	.word	0x1ffea886
 80234e4:	66666667 	.word	0x66666667
 80234e8:	1ffea88a 	.word	0x1ffea88a
 80234ec:	1ffea852 	.word	0x1ffea852
 80234f0:	1ffea87e 	.word	0x1ffea87e

080234f4 <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 80234f4:	b580      	push	{r7, lr}
 80234f6:	b082      	sub	sp, #8
 80234f8:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 80234fa:	4ba1      	ldr	r3, [pc, #644]	; (8023780 <AL_ControlRes+0x28c>)
 80234fc:	781b      	ldrb	r3, [r3, #0]
 80234fe:	2b00      	cmp	r3, #0
 8023500:	f000 813b 	beq.w	802377a <AL_ControlRes+0x286>
    {
        UINT16 result = 0;
 8023504:	2300      	movs	r3, #0
 8023506:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8023508:	2300      	movs	r3, #0
 802350a:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 802350c:	2300      	movs	r3, #0
 802350e:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8023510:	4b9c      	ldr	r3, [pc, #624]	; (8023784 <AL_ControlRes+0x290>)
 8023512:	881b      	ldrh	r3, [r3, #0]
 8023514:	2b00      	cmp	r3, #0
 8023516:	d17c      	bne.n	8023612 <AL_ControlRes+0x11e>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8023518:	4b9b      	ldr	r3, [pc, #620]	; (8023788 <AL_ControlRes+0x294>)
 802351a:	881b      	ldrh	r3, [r3, #0]
 802351c:	091b      	lsrs	r3, r3, #4
 802351e:	b29b      	uxth	r3, r3
 8023520:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 8023522:	4b99      	ldr	r3, [pc, #612]	; (8023788 <AL_ControlRes+0x294>)
 8023524:	881b      	ldrh	r3, [r3, #0]
 8023526:	2b24      	cmp	r3, #36	; 0x24
 8023528:	d01f      	beq.n	802356a <AL_ControlRes+0x76>
 802352a:	2b24      	cmp	r3, #36	; 0x24
 802352c:	dc04      	bgt.n	8023538 <AL_ControlRes+0x44>
 802352e:	3b12      	subs	r3, #18
 8023530:	2b01      	cmp	r3, #1
 8023532:	f200 810f 	bhi.w	8023754 <AL_ControlRes+0x260>
 8023536:	e002      	b.n	802353e <AL_ControlRes+0x4a>
 8023538:	2b48      	cmp	r3, #72	; 0x48
 802353a:	d02c      	beq.n	8023596 <AL_ControlRes+0xa2>
 802353c:	e10a      	b.n	8023754 <AL_ControlRes+0x260>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                        if (!bApplEsmPending)
 802353e:	4b93      	ldr	r3, [pc, #588]	; (802378c <AL_ControlRes+0x298>)
 8023540:	781b      	ldrb	r3, [r3, #0]
 8023542:	f083 0301 	eor.w	r3, r3, #1
 8023546:	b2db      	uxtb	r3, r3
 8023548:	2b00      	cmp	r3, #0
 802354a:	d001      	beq.n	8023550 <AL_ControlRes+0x5c>
                        {
                            APPL_StopMailboxHandler();
 802354c:	f7fc ff32 	bl	80203b4 <APPL_StopMailboxHandler>
                        }

                    MBX_StopMailboxHandler();
 8023550:	f000 fdd8 	bl	8024104 <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 8023554:	4b8e      	ldr	r3, [pc, #568]	; (8023790 <AL_ControlRes+0x29c>)
 8023556:	781b      	ldrb	r3, [r3, #0]
 8023558:	2b00      	cmp	r3, #0
 802355a:	d003      	beq.n	8023564 <AL_ControlRes+0x70>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 802355c:	4b8d      	ldr	r3, [pc, #564]	; (8023794 <AL_ControlRes+0x2a0>)
 802355e:	881b      	ldrh	r3, [r3, #0]
 8023560:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8023562:	e055      	b.n	8023610 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8023564:	2301      	movs	r3, #1
 8023566:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8023568:	e052      	b.n	8023610 <AL_ControlRes+0x11c>
                case PREOP_2_SAFEOP:

                        if (!bApplEsmPending)
 802356a:	4b88      	ldr	r3, [pc, #544]	; (802378c <AL_ControlRes+0x298>)
 802356c:	781b      	ldrb	r3, [r3, #0]
 802356e:	f083 0301 	eor.w	r3, r3, #1
 8023572:	b2db      	uxtb	r3, r3
 8023574:	2b00      	cmp	r3, #0
 8023576:	d001      	beq.n	802357c <AL_ControlRes+0x88>
                        {
                            APPL_StopInputHandler();
 8023578:	f7fc ff30 	bl	80203dc <APPL_StopInputHandler>
                        }

                    StopInputHandler();
 802357c:	f7ff faf8 	bl	8022b70 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 8023580:	4b83      	ldr	r3, [pc, #524]	; (8023790 <AL_ControlRes+0x29c>)
 8023582:	781b      	ldrb	r3, [r3, #0]
 8023584:	2b00      	cmp	r3, #0
 8023586:	d003      	beq.n	8023590 <AL_ControlRes+0x9c>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8023588:	4b82      	ldr	r3, [pc, #520]	; (8023794 <AL_ControlRes+0x2a0>)
 802358a:	881b      	ldrh	r3, [r3, #0]
 802358c:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 802358e:	e03f      	b.n	8023610 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8023590:	2301      	movs	r3, #1
 8023592:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8023594:	e03c      	b.n	8023610 <AL_ControlRes+0x11c>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 8023596:	4b80      	ldr	r3, [pc, #512]	; (8023798 <AL_ControlRes+0x2a4>)
 8023598:	781b      	ldrb	r3, [r3, #0]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d01a      	beq.n	80235d4 <AL_ControlRes+0xe0>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 802359e:	4b7f      	ldr	r3, [pc, #508]	; (802379c <AL_ControlRes+0x2a8>)
 80235a0:	781b      	ldrb	r3, [r3, #0]
 80235a2:	f083 0301 	eor.w	r3, r3, #1
 80235a6:	b2db      	uxtb	r3, r3
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	d002      	beq.n	80235b2 <AL_ControlRes+0xbe>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 80235ac:	232d      	movs	r3, #45	; 0x2d
 80235ae:	80bb      	strh	r3, [r7, #4]
 80235b0:	e01e      	b.n	80235f0 <AL_ControlRes+0xfc>
                        }
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 80235b2:	4b7b      	ldr	r3, [pc, #492]	; (80237a0 <AL_ControlRes+0x2ac>)
 80235b4:	781b      	ldrb	r3, [r3, #0]
 80235b6:	f083 0301 	eor.w	r3, r3, #1
 80235ba:	b2db      	uxtb	r3, r3
 80235bc:	2b00      	cmp	r3, #0
 80235be:	d006      	beq.n	80235ce <AL_ControlRes+0xda>
 80235c0:	4b78      	ldr	r3, [pc, #480]	; (80237a4 <AL_ControlRes+0x2b0>)
 80235c2:	881b      	ldrh	r3, [r3, #0]
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	d002      	beq.n	80235ce <AL_ControlRes+0xda>
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 80235c8:	231b      	movs	r3, #27
 80235ca:	80bb      	strh	r3, [r7, #4]
 80235cc:	e010      	b.n	80235f0 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 80235ce:	231a      	movs	r3, #26
 80235d0:	80bb      	strh	r3, [r7, #4]
 80235d2:	e00d      	b.n	80235f0 <AL_ControlRes+0xfc>
                        }
                    }
                    else
                    {
                        if (nPdOutputSize > 0)
 80235d4:	4b73      	ldr	r3, [pc, #460]	; (80237a4 <AL_ControlRes+0x2b0>)
 80235d6:	881b      	ldrh	r3, [r3, #0]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d002      	beq.n	80235e2 <AL_ControlRes+0xee>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 80235dc:	231b      	movs	r3, #27
 80235de:	80bb      	strh	r3, [r7, #4]
 80235e0:	e006      	b.n	80235f0 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 80235e2:	2308      	movs	r3, #8
 80235e4:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 80235e6:	2300      	movs	r3, #0
 80235e8:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 80235ea:	4b6f      	ldr	r3, [pc, #444]	; (80237a8 <AL_ControlRes+0x2b4>)
 80235ec:	2201      	movs	r2, #1
 80235ee:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 80235f0:	88bb      	ldrh	r3, [r7, #4]
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d00b      	beq.n	802360e <AL_ControlRes+0x11a>
                    {
                            if (!bApplEsmPending)
 80235f6:	4b65      	ldr	r3, [pc, #404]	; (802378c <AL_ControlRes+0x298>)
 80235f8:	781b      	ldrb	r3, [r3, #0]
 80235fa:	f083 0301 	eor.w	r3, r3, #1
 80235fe:	b2db      	uxtb	r3, r3
 8023600:	2b00      	cmp	r3, #0
 8023602:	d001      	beq.n	8023608 <AL_ControlRes+0x114>
                            {
                                APPL_StopOutputHandler();
 8023604:	f7fc fefa 	bl	80203fc <APPL_StopOutputHandler>
                            }

                        StopOutputHandler();
 8023608:	f7ff faa2 	bl	8022b50 <StopOutputHandler>
                    }
                break;
 802360c:	e7ff      	b.n	802360e <AL_ControlRes+0x11a>
 802360e:	bf00      	nop
 8023610:	e0a0      	b.n	8023754 <AL_ControlRes+0x260>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8023612:	4b5d      	ldr	r3, [pc, #372]	; (8023788 <AL_ControlRes+0x294>)
 8023614:	881b      	ldrh	r3, [r3, #0]
 8023616:	2b24      	cmp	r3, #36	; 0x24
 8023618:	d02a      	beq.n	8023670 <AL_ControlRes+0x17c>
 802361a:	2b24      	cmp	r3, #36	; 0x24
 802361c:	dc04      	bgt.n	8023628 <AL_ControlRes+0x134>
 802361e:	3b12      	subs	r3, #18
 8023620:	2b01      	cmp	r3, #1
 8023622:	f200 8097 	bhi.w	8023754 <AL_ControlRes+0x260>
 8023626:	e002      	b.n	802362e <AL_ControlRes+0x13a>
 8023628:	2b48      	cmp	r3, #72	; 0x48
 802362a:	d03f      	beq.n	80236ac <AL_ControlRes+0x1b8>
 802362c:	e092      	b.n	8023754 <AL_ControlRes+0x260>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 802362e:	4b57      	ldr	r3, [pc, #348]	; (802378c <AL_ControlRes+0x298>)
 8023630:	781b      	ldrb	r3, [r3, #0]
 8023632:	2b00      	cmp	r3, #0
 8023634:	d01b      	beq.n	802366e <AL_ControlRes+0x17a>
                    {
                        bApplEsmPending = FALSE;
 8023636:	4b55      	ldr	r3, [pc, #340]	; (802378c <AL_ControlRes+0x298>)
 8023638:	2200      	movs	r2, #0
 802363a:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 802363c:	f7fc feb2 	bl	80203a4 <APPL_StartMailboxHandler>
 8023640:	4603      	mov	r3, r0
 8023642:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8023644:	887b      	ldrh	r3, [r7, #2]
 8023646:	2b00      	cmp	r3, #0
 8023648:	d109      	bne.n	802365e <AL_ControlRes+0x16a>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 802364a:	4b58      	ldr	r3, [pc, #352]	; (80237ac <AL_ControlRes+0x2b8>)
 802364c:	2201      	movs	r2, #1
 802364e:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8023650:	4b4d      	ldr	r3, [pc, #308]	; (8023788 <AL_ControlRes+0x294>)
 8023652:	881b      	ldrh	r3, [r3, #0]
 8023654:	b2db      	uxtb	r3, r3
 8023656:	f003 030f 	and.w	r3, r3, #15
 802365a:	71fb      	strb	r3, [r7, #7]
 802365c:	e007      	b.n	802366e <AL_ControlRes+0x17a>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 802365e:	887b      	ldrh	r3, [r7, #2]
 8023660:	2bff      	cmp	r3, #255	; 0xff
 8023662:	d004      	beq.n	802366e <AL_ControlRes+0x17a>
                            {
                                APPL_StopMailboxHandler();
 8023664:	f7fc fea6 	bl	80203b4 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8023668:	f000 fd4c 	bl	8024104 <MBX_StopMailboxHandler>
                            }
                        }
                    }
                break;
 802366c:	e072      	b.n	8023754 <AL_ControlRes+0x260>
 802366e:	e071      	b.n	8023754 <AL_ControlRes+0x260>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8023670:	4b46      	ldr	r3, [pc, #280]	; (802378c <AL_ControlRes+0x298>)
 8023672:	781b      	ldrb	r3, [r3, #0]
 8023674:	2b00      	cmp	r3, #0
 8023676:	d018      	beq.n	80236aa <AL_ControlRes+0x1b6>
                    {
                        bApplEsmPending = FALSE;
 8023678:	4b44      	ldr	r3, [pc, #272]	; (802378c <AL_ControlRes+0x298>)
 802367a:	2200      	movs	r2, #0
 802367c:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 802367e:	484c      	ldr	r0, [pc, #304]	; (80237b0 <AL_ControlRes+0x2bc>)
 8023680:	f7fc fea0 	bl	80203c4 <APPL_StartInputHandler>
 8023684:	4603      	mov	r3, r0
 8023686:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8023688:	887b      	ldrh	r3, [r7, #2]
 802368a:	2b00      	cmp	r3, #0
 802368c:	d105      	bne.n	802369a <AL_ControlRes+0x1a6>
                        {
                            bEcatInputUpdateRunning = TRUE;
 802368e:	4b49      	ldr	r3, [pc, #292]	; (80237b4 <AL_ControlRes+0x2c0>)
 8023690:	2201      	movs	r2, #1
 8023692:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8023694:	2304      	movs	r3, #4
 8023696:	71fb      	strb	r3, [r7, #7]
 8023698:	e007      	b.n	80236aa <AL_ControlRes+0x1b6>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 802369a:	887b      	ldrh	r3, [r7, #2]
 802369c:	2bff      	cmp	r3, #255	; 0xff
 802369e:	d004      	beq.n	80236aa <AL_ControlRes+0x1b6>
                            {
                                APPL_StopInputHandler();
 80236a0:	f7fc fe9c 	bl	80203dc <APPL_StopInputHandler>
                                StopInputHandler();
 80236a4:	f7ff fa64 	bl	8022b70 <StopInputHandler>
                            }
                        }
                    }
                break;
 80236a8:	e054      	b.n	8023754 <AL_ControlRes+0x260>
 80236aa:	e053      	b.n	8023754 <AL_ControlRes+0x260>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 80236ac:	4b37      	ldr	r3, [pc, #220]	; (802378c <AL_ControlRes+0x298>)
 80236ae:	781b      	ldrb	r3, [r3, #0]
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	d04e      	beq.n	8023752 <AL_ControlRes+0x25e>
                    {
                        if(bDcSyncActive)
 80236b4:	4b38      	ldr	r3, [pc, #224]	; (8023798 <AL_ControlRes+0x2a4>)
 80236b6:	781b      	ldrb	r3, [r3, #0]
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	d02a      	beq.n	8023712 <AL_ControlRes+0x21e>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 80236bc:	4b3e      	ldr	r3, [pc, #248]	; (80237b8 <AL_ControlRes+0x2c4>)
 80236be:	881b      	ldrh	r3, [r3, #0]
 80236c0:	b21b      	sxth	r3, r3
 80236c2:	2b00      	cmp	r3, #0
 80236c4:	dd45      	ble.n	8023752 <AL_ControlRes+0x25e>
 80236c6:	4b3c      	ldr	r3, [pc, #240]	; (80237b8 <AL_ControlRes+0x2c4>)
 80236c8:	881a      	ldrh	r2, [r3, #0]
 80236ca:	4b3c      	ldr	r3, [pc, #240]	; (80237bc <AL_ControlRes+0x2c8>)
 80236cc:	881b      	ldrh	r3, [r3, #0]
 80236ce:	b212      	sxth	r2, r2
 80236d0:	b21b      	sxth	r3, r3
 80236d2:	429a      	cmp	r2, r3
 80236d4:	dc3d      	bgt.n	8023752 <AL_ControlRes+0x25e>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 80236d6:	4b38      	ldr	r3, [pc, #224]	; (80237b8 <AL_ControlRes+0x2c4>)
 80236d8:	2200      	movs	r2, #0
 80236da:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 80236dc:	4b37      	ldr	r3, [pc, #220]	; (80237bc <AL_ControlRes+0x2c8>)
 80236de:	2200      	movs	r2, #0
 80236e0:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ESM4*/
                                bApplEsmPending = FALSE;
 80236e2:	4b2a      	ldr	r3, [pc, #168]	; (802378c <AL_ControlRes+0x298>)
 80236e4:	2200      	movs	r2, #0
 80236e6:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ESM4*/
                                result = APPL_StartOutputHandler();
 80236e8:	f7fc fe80 	bl	80203ec <APPL_StartOutputHandler>
 80236ec:	4603      	mov	r3, r0
 80236ee:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 80236f0:	887b      	ldrh	r3, [r7, #2]
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d105      	bne.n	8023702 <AL_ControlRes+0x20e>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 80236f6:	4b2c      	ldr	r3, [pc, #176]	; (80237a8 <AL_ControlRes+0x2b4>)
 80236f8:	2201      	movs	r2, #1
 80236fa:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 80236fc:	2308      	movs	r3, #8
 80236fe:	71fb      	strb	r3, [r7, #7]
 8023700:	e027      	b.n	8023752 <AL_ControlRes+0x25e>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8023702:	887b      	ldrh	r3, [r7, #2]
 8023704:	2bff      	cmp	r3, #255	; 0xff
 8023706:	d024      	beq.n	8023752 <AL_ControlRes+0x25e>
                                    {
                                        APPL_StopOutputHandler();
 8023708:	f7fc fe78 	bl	80203fc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 802370c:	f7ff fa20 	bl	8022b50 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8023710:	e01f      	b.n	8023752 <AL_ControlRes+0x25e>
                                }
                            }
                        }
                        else
                        {
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8023712:	4b24      	ldr	r3, [pc, #144]	; (80237a4 <AL_ControlRes+0x2b0>)
 8023714:	881b      	ldrh	r3, [r3, #0]
 8023716:	2b00      	cmp	r3, #0
 8023718:	d003      	beq.n	8023722 <AL_ControlRes+0x22e>
 802371a:	4b21      	ldr	r3, [pc, #132]	; (80237a0 <AL_ControlRes+0x2ac>)
 802371c:	781b      	ldrb	r3, [r3, #0]
 802371e:	2b00      	cmp	r3, #0
 8023720:	d017      	beq.n	8023752 <AL_ControlRes+0x25e>
                            {
/*ECATCHANGE_START(V5.12) ESM4*/
                                bApplEsmPending = FALSE;  
 8023722:	4b1a      	ldr	r3, [pc, #104]	; (802378c <AL_ControlRes+0x298>)
 8023724:	2200      	movs	r2, #0
 8023726:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ESM4*/
                                result = APPL_StartOutputHandler();
 8023728:	f7fc fe60 	bl	80203ec <APPL_StartOutputHandler>
 802372c:	4603      	mov	r3, r0
 802372e:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8023730:	887b      	ldrh	r3, [r7, #2]
 8023732:	2b00      	cmp	r3, #0
 8023734:	d105      	bne.n	8023742 <AL_ControlRes+0x24e>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8023736:	4b1c      	ldr	r3, [pc, #112]	; (80237a8 <AL_ControlRes+0x2b4>)
 8023738:	2201      	movs	r2, #1
 802373a:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 802373c:	2308      	movs	r3, #8
 802373e:	71fb      	strb	r3, [r7, #7]
 8023740:	e007      	b.n	8023752 <AL_ControlRes+0x25e>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8023742:	887b      	ldrh	r3, [r7, #2]
 8023744:	2bff      	cmp	r3, #255	; 0xff
 8023746:	d004      	beq.n	8023752 <AL_ControlRes+0x25e>
                                    {
                                        APPL_StopOutputHandler();
 8023748:	f7fc fe58 	bl	80203fc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 802374c:	f7ff fa00 	bl	8022b50 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8023750:	e7ff      	b.n	8023752 <AL_ControlRes+0x25e>
 8023752:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8023754:	79fb      	ldrb	r3, [r7, #7]
 8023756:	2b00      	cmp	r3, #0
 8023758:	d00f      	beq.n	802377a <AL_ControlRes+0x286>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 802375a:	4b09      	ldr	r3, [pc, #36]	; (8023780 <AL_ControlRes+0x28c>)
 802375c:	2200      	movs	r2, #0
 802375e:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8023760:	88bb      	ldrh	r3, [r7, #4]
 8023762:	2b00      	cmp	r3, #0
 8023764:	d003      	beq.n	802376e <AL_ControlRes+0x27a>
            {
                Status |= STATE_CHANGE;
 8023766:	79fb      	ldrb	r3, [r7, #7]
 8023768:	f043 0310 	orr.w	r3, r3, #16
 802376c:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 802376e:	79fa      	ldrb	r2, [r7, #7]
 8023770:	88bb      	ldrh	r3, [r7, #4]
 8023772:	4610      	mov	r0, r2
 8023774:	4619      	mov	r1, r3
 8023776:	f7ff fa9d 	bl	8022cb4 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 802377a:	3708      	adds	r7, #8
 802377c:	46bd      	mov	sp, r7
 802377e:	bd80      	pop	{r7, pc}
 8023780:	1ffea87c 	.word	0x1ffea87c
 8023784:	1ffea886 	.word	0x1ffea886
 8023788:	1ffea84e 	.word	0x1ffea84e
 802378c:	1ffea850 	.word	0x1ffea850
 8023790:	1ffea858 	.word	0x1ffea858
 8023794:	1ffea854 	.word	0x1ffea854
 8023798:	1ffea889 	.word	0x1ffea889
 802379c:	1ffea86c 	.word	0x1ffea86c
 80237a0:	1ffea884 	.word	0x1ffea884
 80237a4:	1ffea852 	.word	0x1ffea852
 80237a8:	1ffea88a 	.word	0x1ffea88a
 80237ac:	1ffea90a 	.word	0x1ffea90a
 80237b0:	1ffea86a 	.word	0x1ffea86a
 80237b4:	1ffea890 	.word	0x1ffea890
 80237b8:	1ffea864 	.word	0x1ffea864
 80237bc:	1ffea85c 	.word	0x1ffea85c

080237c0 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 80237c0:	b480      	push	{r7}
 80237c2:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.12) ECAT5*/
/*ECATCHANGE_END(V5.12) ECAT5*/

    if(bDcSyncActive && bEcatInputUpdateRunning)
 80237c4:	4b39      	ldr	r3, [pc, #228]	; (80238ac <DC_CheckWatchdog+0xec>)
 80237c6:	781b      	ldrb	r3, [r3, #0]
 80237c8:	2b00      	cmp	r3, #0
 80237ca:	d06b      	beq.n	80238a4 <DC_CheckWatchdog+0xe4>
 80237cc:	4b38      	ldr	r3, [pc, #224]	; (80238b0 <DC_CheckWatchdog+0xf0>)
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d067      	beq.n	80238a4 <DC_CheckWatchdog+0xe4>
    {
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 80237d4:	4b37      	ldr	r3, [pc, #220]	; (80238b4 <DC_CheckWatchdog+0xf4>)
 80237d6:	881b      	ldrh	r3, [r3, #0]
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d009      	beq.n	80237f0 <DC_CheckWatchdog+0x30>
 80237dc:	4b36      	ldr	r3, [pc, #216]	; (80238b8 <DC_CheckWatchdog+0xf8>)
 80237de:	881a      	ldrh	r2, [r3, #0]
 80237e0:	4b34      	ldr	r3, [pc, #208]	; (80238b4 <DC_CheckWatchdog+0xf4>)
 80237e2:	881b      	ldrh	r3, [r3, #0]
 80237e4:	429a      	cmp	r2, r3
 80237e6:	d303      	bcc.n	80237f0 <DC_CheckWatchdog+0x30>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 80237e8:	4b34      	ldr	r3, [pc, #208]	; (80238bc <DC_CheckWatchdog+0xfc>)
 80237ea:	2200      	movs	r2, #0
 80237ec:	701a      	strb	r2, [r3, #0]
 80237ee:	e00e      	b.n	802380e <DC_CheckWatchdog+0x4e>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 80237f0:	4b31      	ldr	r3, [pc, #196]	; (80238b8 <DC_CheckWatchdog+0xf8>)
 80237f2:	881a      	ldrh	r2, [r3, #0]
 80237f4:	4b2f      	ldr	r3, [pc, #188]	; (80238b4 <DC_CheckWatchdog+0xf4>)
 80237f6:	881b      	ldrh	r3, [r3, #0]
 80237f8:	429a      	cmp	r2, r3
 80237fa:	d205      	bcs.n	8023808 <DC_CheckWatchdog+0x48>
            {
                Sync0WdCounter ++;
 80237fc:	4b2e      	ldr	r3, [pc, #184]	; (80238b8 <DC_CheckWatchdog+0xf8>)
 80237fe:	881b      	ldrh	r3, [r3, #0]
 8023800:	3301      	adds	r3, #1
 8023802:	b29a      	uxth	r2, r3
 8023804:	4b2c      	ldr	r3, [pc, #176]	; (80238b8 <DC_CheckWatchdog+0xf8>)
 8023806:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8023808:	4b2c      	ldr	r3, [pc, #176]	; (80238bc <DC_CheckWatchdog+0xfc>)
 802380a:	2201      	movs	r2, #1
 802380c:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 802380e:	4b2b      	ldr	r3, [pc, #172]	; (80238bc <DC_CheckWatchdog+0xfc>)
 8023810:	781b      	ldrb	r3, [r3, #0]
 8023812:	2b00      	cmp	r3, #0
 8023814:	d013      	beq.n	802383e <DC_CheckWatchdog+0x7e>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8023816:	4b2a      	ldr	r3, [pc, #168]	; (80238c0 <DC_CheckWatchdog+0x100>)
 8023818:	881b      	ldrh	r3, [r3, #0]
 802381a:	2b00      	cmp	r3, #0
 802381c:	d00f      	beq.n	802383e <DC_CheckWatchdog+0x7e>
            {
                if(Sync1WdCounter < Sync1WdValue)
 802381e:	4b29      	ldr	r3, [pc, #164]	; (80238c4 <DC_CheckWatchdog+0x104>)
 8023820:	881a      	ldrh	r2, [r3, #0]
 8023822:	4b27      	ldr	r3, [pc, #156]	; (80238c0 <DC_CheckWatchdog+0x100>)
 8023824:	881b      	ldrh	r3, [r3, #0]
 8023826:	429a      	cmp	r2, r3
 8023828:	d206      	bcs.n	8023838 <DC_CheckWatchdog+0x78>
                {
                    Sync1WdCounter ++;
 802382a:	4b26      	ldr	r3, [pc, #152]	; (80238c4 <DC_CheckWatchdog+0x104>)
 802382c:	881b      	ldrh	r3, [r3, #0]
 802382e:	3301      	adds	r3, #1
 8023830:	b29a      	uxth	r2, r3
 8023832:	4b24      	ldr	r3, [pc, #144]	; (80238c4 <DC_CheckWatchdog+0x104>)
 8023834:	801a      	strh	r2, [r3, #0]
 8023836:	e002      	b.n	802383e <DC_CheckWatchdog+0x7e>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8023838:	4b20      	ldr	r3, [pc, #128]	; (80238bc <DC_CheckWatchdog+0xfc>)
 802383a:	2200      	movs	r2, #0
 802383c:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        if(bDcRunning)
 802383e:	4b1f      	ldr	r3, [pc, #124]	; (80238bc <DC_CheckWatchdog+0xfc>)
 8023840:	781b      	ldrb	r3, [r3, #0]
 8023842:	2b00      	cmp	r3, #0
 8023844:	d027      	beq.n	8023896 <DC_CheckWatchdog+0xd6>
        {
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8023846:	4b20      	ldr	r3, [pc, #128]	; (80238c8 <DC_CheckWatchdog+0x108>)
 8023848:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802384a:	4b20      	ldr	r3, [pc, #128]	; (80238cc <DC_CheckWatchdog+0x10c>)
 802384c:	891b      	ldrh	r3, [r3, #8]
 802384e:	429a      	cmp	r2, r3
 8023850:	d211      	bcs.n	8023876 <DC_CheckWatchdog+0xb6>
            {
                bSmSyncSequenceValid = TRUE;
 8023852:	4b1f      	ldr	r3, [pc, #124]	; (80238d0 <DC_CheckWatchdog+0x110>)
 8023854:	2201      	movs	r2, #1
 8023856:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 8023858:	4b1e      	ldr	r3, [pc, #120]	; (80238d4 <DC_CheckWatchdog+0x114>)
 802385a:	881b      	ldrh	r3, [r3, #0]
 802385c:	b21b      	sxth	r3, r3
 802385e:	2b00      	cmp	r3, #0
 8023860:	dd20      	ble.n	80238a4 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt++;
 8023862:	4b1d      	ldr	r3, [pc, #116]	; (80238d8 <DC_CheckWatchdog+0x118>)
 8023864:	881b      	ldrh	r3, [r3, #0]
 8023866:	b29b      	uxth	r3, r3
 8023868:	b29b      	uxth	r3, r3
 802386a:	3301      	adds	r3, #1
 802386c:	b29b      	uxth	r3, r3
 802386e:	b29a      	uxth	r2, r3
 8023870:	4b19      	ldr	r3, [pc, #100]	; (80238d8 <DC_CheckWatchdog+0x118>)
 8023872:	801a      	strh	r2, [r3, #0]
 8023874:	e016      	b.n	80238a4 <DC_CheckWatchdog+0xe4>
                }
            }
            else if (bSmSyncSequenceValid)
 8023876:	4b16      	ldr	r3, [pc, #88]	; (80238d0 <DC_CheckWatchdog+0x110>)
 8023878:	781b      	ldrb	r3, [r3, #0]
 802387a:	2b00      	cmp	r3, #0
 802387c:	d012      	beq.n	80238a4 <DC_CheckWatchdog+0xe4>
            {
                    bSmSyncSequenceValid = FALSE;
 802387e:	4b14      	ldr	r3, [pc, #80]	; (80238d0 <DC_CheckWatchdog+0x110>)
 8023880:	2200      	movs	r2, #0
 8023882:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active reset the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 8023884:	4b13      	ldr	r3, [pc, #76]	; (80238d4 <DC_CheckWatchdog+0x114>)
 8023886:	881b      	ldrh	r3, [r3, #0]
 8023888:	b21b      	sxth	r3, r3
 802388a:	2b00      	cmp	r3, #0
 802388c:	dd0a      	ble.n	80238a4 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt = 0;
 802388e:	4b12      	ldr	r3, [pc, #72]	; (80238d8 <DC_CheckWatchdog+0x118>)
 8023890:	2200      	movs	r2, #0
 8023892:	801a      	strh	r2, [r3, #0]
 8023894:	e006      	b.n	80238a4 <DC_CheckWatchdog+0xe4>
                }
            }
        }
        else if(bSmSyncSequenceValid)
 8023896:	4b0e      	ldr	r3, [pc, #56]	; (80238d0 <DC_CheckWatchdog+0x110>)
 8023898:	781b      	ldrb	r3, [r3, #0]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d002      	beq.n	80238a4 <DC_CheckWatchdog+0xe4>
        {
           bSmSyncSequenceValid = FALSE;
 802389e:	4b0c      	ldr	r3, [pc, #48]	; (80238d0 <DC_CheckWatchdog+0x110>)
 80238a0:	2200      	movs	r2, #0
 80238a2:	701a      	strb	r2, [r3, #0]
        }
    }
    /*ECATCHANGE_START(V5.12) ECAT5*/
    /*ECATCHANGE_END(V5.12) ECAT5*/
}
 80238a4:	46bd      	mov	sp, r7
 80238a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238aa:	4770      	bx	lr
 80238ac:	1ffea889 	.word	0x1ffea889
 80238b0:	1ffea890 	.word	0x1ffea890
 80238b4:	1ffea860 	.word	0x1ffea860
 80238b8:	1ffea856 	.word	0x1ffea856
 80238bc:	1ffea86c 	.word	0x1ffea86c
 80238c0:	1ffea866 	.word	0x1ffea866
 80238c4:	1ffea88c 	.word	0x1ffea88c
 80238c8:	1ffea974 	.word	0x1ffea974
 80238cc:	1ffe93e4 	.word	0x1ffe93e4
 80238d0:	1ffea885 	.word	0x1ffea885
 80238d4:	1ffea864 	.word	0x1ffea864
 80238d8:	1ffea85c 	.word	0x1ffea85c

080238dc <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 80238dc:	b580      	push	{r7, lr}
 80238de:	b082      	sub	sp, #8
 80238e0:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 80238e2:	4b20      	ldr	r3, [pc, #128]	; (8023964 <CheckIfEcatError+0x88>)
 80238e4:	881b      	ldrh	r3, [r3, #0]
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	d019      	beq.n	802391e <CheckIfEcatError+0x42>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 80238ea:	2300      	movs	r3, #0
 80238ec:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 80238ee:	4b1e      	ldr	r3, [pc, #120]	; (8023968 <CheckIfEcatError+0x8c>)
 80238f0:	881b      	ldrh	r3, [r3, #0]
 80238f2:	80fb      	strh	r3, [r7, #6]
      WdStatusOK = SWAPWORD(WdStatusOK);

      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 80238f4:	88fb      	ldrh	r3, [r7, #6]
 80238f6:	f003 0301 	and.w	r3, r3, #1
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d10f      	bne.n	802391e <CheckIfEcatError+0x42>
 80238fe:	4b1b      	ldr	r3, [pc, #108]	; (802396c <CheckIfEcatError+0x90>)
 8023900:	881b      	ldrh	r3, [r3, #0]
 8023902:	2b00      	cmp	r3, #0
 8023904:	d00b      	beq.n	802391e <CheckIfEcatError+0x42>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 8023906:	4b1a      	ldr	r3, [pc, #104]	; (8023970 <CheckIfEcatError+0x94>)
 8023908:	781b      	ldrb	r3, [r3, #0]
 802390a:	2b00      	cmp	r3, #0
 802390c:	d004      	beq.n	8023918 <CheckIfEcatError+0x3c>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 802390e:	2004      	movs	r0, #4
 8023910:	211b      	movs	r1, #27
 8023912:	f7ff fa33 	bl	8022d7c <AL_ControlInd>
            return;
 8023916:	e022      	b.n	802395e <CheckIfEcatError+0x82>
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 8023918:	4b16      	ldr	r3, [pc, #88]	; (8023974 <CheckIfEcatError+0x98>)
 802391a:	2200      	movs	r2, #0
 802391c:	701a      	strb	r2, [r3, #0]
         }
      }
   }

   if(bDcSyncActive)
 802391e:	4b16      	ldr	r3, [pc, #88]	; (8023978 <CheckIfEcatError+0x9c>)
 8023920:	781b      	ldrb	r3, [r3, #0]
 8023922:	2b00      	cmp	r3, #0
 8023924:	d01b      	beq.n	802395e <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 8023926:	4b12      	ldr	r3, [pc, #72]	; (8023970 <CheckIfEcatError+0x94>)
 8023928:	781b      	ldrb	r3, [r3, #0]
 802392a:	2b00      	cmp	r3, #0
 802392c:	d017      	beq.n	802395e <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 802392e:	4b13      	ldr	r3, [pc, #76]	; (802397c <CheckIfEcatError+0xa0>)
 8023930:	781b      	ldrb	r3, [r3, #0]
 8023932:	f083 0301 	eor.w	r3, r3, #1
 8023936:	b2db      	uxtb	r3, r3
 8023938:	2b00      	cmp	r3, #0
 802393a:	d004      	beq.n	8023946 <CheckIfEcatError+0x6a>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 802393c:	2004      	movs	r0, #4
 802393e:	212c      	movs	r1, #44	; 0x2c
 8023940:	f7ff fa1c 	bl	8022d7c <AL_ControlInd>
               return;
 8023944:	e00b      	b.n	802395e <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 8023946:	4b0e      	ldr	r3, [pc, #56]	; (8023980 <CheckIfEcatError+0xa4>)
 8023948:	781b      	ldrb	r3, [r3, #0]
 802394a:	f083 0301 	eor.w	r3, r3, #1
 802394e:	b2db      	uxtb	r3, r3
 8023950:	2b00      	cmp	r3, #0
 8023952:	d004      	beq.n	802395e <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8023954:	2004      	movs	r0, #4
 8023956:	211a      	movs	r1, #26
 8023958:	f7ff fa10 	bl	8022d7c <AL_ControlInd>
               return;
 802395c:	bf00      	nop
           }
        
       }
   }
}
 802395e:	3708      	adds	r7, #8
 8023960:	46bd      	mov	sp, r7
 8023962:	bd80      	pop	{r7, pc}
 8023964:	1ffea88e 	.word	0x1ffea88e
 8023968:	54010440 	.word	0x54010440
 802396c:	1ffea852 	.word	0x1ffea852
 8023970:	1ffea88a 	.word	0x1ffea88a
 8023974:	1ffea884 	.word	0x1ffea884
 8023978:	1ffea889 	.word	0x1ffea889
 802397c:	1ffea86c 	.word	0x1ffea86c
 8023980:	1ffea885 	.word	0x1ffea885

08023984 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8023984:	b580      	push	{r7, lr}
 8023986:	b082      	sub	sp, #8
 8023988:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    HW_EscReadByte(nMaxSyncMan, ESC_SM_CHANNELS_OFFSET);
 802398a:	4b3b      	ldr	r3, [pc, #236]	; (8023a78 <ECAT_Init+0xf4>)
 802398c:	781b      	ldrb	r3, [r3, #0]
 802398e:	b2da      	uxtb	r2, r3
 8023990:	4b3a      	ldr	r3, [pc, #232]	; (8023a7c <ECAT_Init+0xf8>)
 8023992:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(nMaxEscAddress, ESC_DPRAM_SIZE_OFFSET);
 8023994:	4b3a      	ldr	r3, [pc, #232]	; (8023a80 <ECAT_Init+0xfc>)
 8023996:	881b      	ldrh	r3, [r3, #0]
 8023998:	b29a      	uxth	r2, r3
 802399a:	4b3a      	ldr	r3, [pc, #232]	; (8023a84 <ECAT_Init+0x100>)
 802399c:	801a      	strh	r2, [r3, #0]
    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    nMaxEscAddress = (nMaxEscAddress << 10) + 0xFFF;
 802399e:	4b39      	ldr	r3, [pc, #228]	; (8023a84 <ECAT_Init+0x100>)
 80239a0:	881b      	ldrh	r3, [r3, #0]
 80239a2:	029b      	lsls	r3, r3, #10
 80239a4:	b29b      	uxth	r3, r3
 80239a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80239aa:	b29a      	uxth	r2, r3
 80239ac:	4b35      	ldr	r3, [pc, #212]	; (8023a84 <ECAT_Init+0x100>)
 80239ae:	801a      	strh	r2, [r3, #0]

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 80239b0:	f7fe fa5c 	bl	8021e6c <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 80239b4:	2300      	movs	r3, #0
 80239b6:	71fb      	strb	r3, [r7, #7]
 80239b8:	e006      	b.n	80239c8 <ECAT_Init+0x44>
    {
        DisableSyncManChannel(i);
 80239ba:	79fb      	ldrb	r3, [r7, #7]
 80239bc:	4618      	mov	r0, r3
 80239be:	f7fe fa8f 	bl	8021ee0 <DisableSyncManChannel>

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 80239c2:	79fb      	ldrb	r3, [r7, #7]
 80239c4:	3301      	adds	r3, #1
 80239c6:	71fb      	strb	r3, [r7, #7]
 80239c8:	4b2c      	ldr	r3, [pc, #176]	; (8023a7c <ECAT_Init+0xf8>)
 80239ca:	781b      	ldrb	r3, [r3, #0]
 80239cc:	79fa      	ldrb	r2, [r7, #7]
 80239ce:	429a      	cmp	r2, r3
 80239d0:	d3f3      	bcc.n	80239ba <ECAT_Init+0x36>
    {
        DisableSyncManChannel(i);
    }

    /* initialize the mailbox handler */
    MBX_Init();
 80239d2:	f000 fa95 	bl	8023f00 <MBX_Init>

    /* initialize variables */
    bBootMode = FALSE;
 80239d6:	4b2c      	ldr	r3, [pc, #176]	; (8023a88 <ECAT_Init+0x104>)
 80239d8:	2200      	movs	r2, #0
 80239da:	701a      	strb	r2, [r3, #0]
    bApplEsmPending = FALSE;
 80239dc:	4b2b      	ldr	r3, [pc, #172]	; (8023a8c <ECAT_Init+0x108>)
 80239de:	2200      	movs	r2, #0
 80239e0:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 80239e2:	4b2b      	ldr	r3, [pc, #172]	; (8023a90 <ECAT_Init+0x10c>)
 80239e4:	2200      	movs	r2, #0
 80239e6:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 80239e8:	4b2a      	ldr	r3, [pc, #168]	; (8023a94 <ECAT_Init+0x110>)
 80239ea:	2200      	movs	r2, #0
 80239ec:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 80239ee:	4b2a      	ldr	r3, [pc, #168]	; (8023a98 <ECAT_Init+0x114>)
 80239f0:	2200      	movs	r2, #0
 80239f2:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 80239f4:	4b29      	ldr	r3, [pc, #164]	; (8023a9c <ECAT_Init+0x118>)
 80239f6:	2200      	movs	r2, #0
 80239f8:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 80239fa:	4b29      	ldr	r3, [pc, #164]	; (8023aa0 <ECAT_Init+0x11c>)
 80239fc:	2200      	movs	r2, #0
 80239fe:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8023a00:	4b28      	ldr	r3, [pc, #160]	; (8023aa4 <ECAT_Init+0x120>)
 8023a02:	2200      	movs	r2, #0
 8023a04:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8023a06:	4b28      	ldr	r3, [pc, #160]	; (8023aa8 <ECAT_Init+0x124>)
 8023a08:	2200      	movs	r2, #0
 8023a0a:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 8023a0c:	4b27      	ldr	r3, [pc, #156]	; (8023aac <ECAT_Init+0x128>)
 8023a0e:	2200      	movs	r2, #0
 8023a10:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8023a12:	4b27      	ldr	r3, [pc, #156]	; (8023ab0 <ECAT_Init+0x12c>)
 8023a14:	2200      	movs	r2, #0
 8023a16:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8023a18:	4b26      	ldr	r3, [pc, #152]	; (8023ab4 <ECAT_Init+0x130>)
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 8023a1e:	4b26      	ldr	r3, [pc, #152]	; (8023ab8 <ECAT_Init+0x134>)
 8023a20:	2200      	movs	r2, #0
 8023a22:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8023a24:	4b25      	ldr	r3, [pc, #148]	; (8023abc <ECAT_Init+0x138>)
 8023a26:	2200      	movs	r2, #0
 8023a28:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8023a2a:	4b25      	ldr	r3, [pc, #148]	; (8023ac0 <ECAT_Init+0x13c>)
 8023a2c:	2200      	movs	r2, #0
 8023a2e:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 8023a30:	4b24      	ldr	r3, [pc, #144]	; (8023ac4 <ECAT_Init+0x140>)
 8023a32:	2200      	movs	r2, #0
 8023a34:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8023a36:	4b24      	ldr	r3, [pc, #144]	; (8023ac8 <ECAT_Init+0x144>)
 8023a38:	2200      	movs	r2, #0
 8023a3a:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 8023a3c:	4b23      	ldr	r3, [pc, #140]	; (8023acc <ECAT_Init+0x148>)
 8023a3e:	2200      	movs	r2, #0
 8023a40:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8023a42:	4b23      	ldr	r3, [pc, #140]	; (8023ad0 <ECAT_Init+0x14c>)
 8023a44:	2201      	movs	r2, #1
 8023a46:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8023a48:	4b21      	ldr	r3, [pc, #132]	; (8023ad0 <ECAT_Init+0x14c>)
 8023a4a:	781b      	ldrb	r3, [r3, #0]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	2100      	movs	r1, #0
 8023a50:	f7ff f930 	bl	8022cb4 <SetALStatus>
    nEcatStateTrans = 0;
 8023a54:	4b1f      	ldr	r3, [pc, #124]	; (8023ad4 <ECAT_Init+0x150>)
 8023a56:	2200      	movs	r2, #0
 8023a58:	801a      	strh	r2, [r3, #0]
    u8EcatErrorLed = LED_OFF;
 8023a5a:	4b1f      	ldr	r3, [pc, #124]	; (8023ad8 <ECAT_Init+0x154>)
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	701a      	strb	r2, [r3, #0]

    bEscIntEnabled = FALSE;
 8023a60:	4b1e      	ldr	r3, [pc, #120]	; (8023adc <ECAT_Init+0x158>)
 8023a62:	2200      	movs	r2, #0
 8023a64:	701a      	strb	r2, [r3, #0]

    /* initialize the COE part */
    COE_Init();
 8023a66:	f7fd febf 	bl	80217e8 <COE_Init>

    /*reset AL event mask*/
    ResetALEventMask(0);
 8023a6a:	2000      	movs	r0, #0
 8023a6c:	f7fe f9ce 	bl	8021e0c <ResetALEventMask>
}
 8023a70:	3708      	adds	r7, #8
 8023a72:	46bd      	mov	sp, r7
 8023a74:	bd80      	pop	{r7, pc}
 8023a76:	bf00      	nop
 8023a78:	54010005 	.word	0x54010005
 8023a7c:	1ffea896 	.word	0x1ffea896
 8023a80:	54010006 	.word	0x54010006
 8023a84:	1ffea882 	.word	0x1ffea882
 8023a88:	1ffea888 	.word	0x1ffea888
 8023a8c:	1ffea850 	.word	0x1ffea850
 8023a90:	1ffea87c 	.word	0x1ffea87c
 8023a94:	1ffea884 	.word	0x1ffea884
 8023a98:	1ffea88a 	.word	0x1ffea88a
 8023a9c:	1ffea890 	.word	0x1ffea890
 8023aa0:	1ffea892 	.word	0x1ffea892
 8023aa4:	1ffea88e 	.word	0x1ffea88e
 8023aa8:	1ffea856 	.word	0x1ffea856
 8023aac:	1ffea860 	.word	0x1ffea860
 8023ab0:	1ffea88c 	.word	0x1ffea88c
 8023ab4:	1ffea866 	.word	0x1ffea866
 8023ab8:	1ffea889 	.word	0x1ffea889
 8023abc:	1ffea858 	.word	0x1ffea858
 8023ac0:	1ffea854 	.word	0x1ffea854
 8023ac4:	1ffea86a 	.word	0x1ffea86a
 8023ac8:	1ffea852 	.word	0x1ffea852
 8023acc:	1ffea87e 	.word	0x1ffea87e
 8023ad0:	1ffea851 	.word	0x1ffea851
 8023ad4:	1ffea84e 	.word	0x1ffea84e
 8023ad8:	1ffea897 	.word	0x1ffea897
 8023adc:	1ffea891 	.word	0x1ffea891

08023ae0 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8023ae0:	b580      	push	{r7, lr}
 8023ae2:	b082      	sub	sp, #8
 8023ae4:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 8023ae6:	2300      	movs	r3, #0
 8023ae8:	807b      	strh	r3, [r7, #2]
    UINT8 sm1Activate = SM_SETTING_ENABLE_VALUE;
 8023aea:	2301      	movs	r3, #1
 8023aec:	717b      	strb	r3, [r7, #5]


    /* check if services are stored in the mailbox */
    MBX_Main();
 8023aee:	f000 fe69 	bl	80247c4 <MBX_Main>


    if ( bMbxRunning )
 8023af2:	4b58      	ldr	r3, [pc, #352]	; (8023c54 <ECAT_Main+0x174>)
 8023af4:	781b      	ldrb	r3, [r3, #0]
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d002      	beq.n	8023b00 <ECAT_Main+0x20>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadByte(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8023afa:	4b57      	ldr	r3, [pc, #348]	; (8023c58 <ECAT_Main+0x178>)
 8023afc:	781b      	ldrb	r3, [r3, #0]
 8023afe:	717b      	strb	r3, [r7, #5]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8023b00:	f7fe f97c 	bl	8021dfc <HW_GetALEventRegister>
 8023b04:	4603      	mov	r3, r0
 8023b06:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);

    if ((ALEventReg & EEPROM_CMD_PENDING)) 
 8023b08:	88fb      	ldrh	r3, [r7, #6]
 8023b0a:	f003 0320 	and.w	r3, r3, #32
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d001      	beq.n	8023b16 <ECAT_Main+0x36>
    {
        EEPROM_CommandHandler();
 8023b12:	f7fd fd31 	bl	8021578 <EEPROM_CommandHandler>
    }

    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 8023b16:	88fb      	ldrh	r3, [r7, #6]
 8023b18:	f003 0301 	and.w	r3, r3, #1
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d014      	beq.n	8023b4a <ECAT_Main+0x6a>
 8023b20:	4b4e      	ldr	r3, [pc, #312]	; (8023c5c <ECAT_Main+0x17c>)
 8023b22:	781b      	ldrb	r3, [r3, #0]
 8023b24:	f083 0301 	eor.w	r3, r3, #1
 8023b28:	b2db      	uxtb	r3, r3
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d00d      	beq.n	8023b4a <ECAT_Main+0x6a>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadByte( EscAlControl, ESC_AL_CONTROL_OFFSET);
 8023b2e:	4b4c      	ldr	r3, [pc, #304]	; (8023c60 <ECAT_Main+0x180>)
 8023b30:	781b      	ldrb	r3, [r3, #0]
 8023b32:	b2db      	uxtb	r3, r3
 8023b34:	807b      	strh	r3, [r7, #2]
        EscAlControl = SWAPWORD(EscAlControl);


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 8023b36:	88fb      	ldrh	r3, [r7, #6]
 8023b38:	f023 0311 	bic.w	r3, r3, #17
 8023b3c:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 8023b3e:	887b      	ldrh	r3, [r7, #2]
 8023b40:	b2db      	uxtb	r3, r3
 8023b42:	4618      	mov	r0, r3
 8023b44:	2100      	movs	r1, #0
 8023b46:	f7ff f919 	bl	8022d7c <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8023b4a:	88fb      	ldrh	r3, [r7, #6]
 8023b4c:	f003 0310 	and.w	r3, r3, #16
 8023b50:	2b00      	cmp	r3, #0
 8023b52:	d01f      	beq.n	8023b94 <ECAT_Main+0xb4>
 8023b54:	4b41      	ldr	r3, [pc, #260]	; (8023c5c <ECAT_Main+0x17c>)
 8023b56:	781b      	ldrb	r3, [r3, #0]
 8023b58:	f083 0301 	eor.w	r3, r3, #1
 8023b5c:	b2db      	uxtb	r3, r3
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	d018      	beq.n	8023b94 <ECAT_Main+0xb4>
 8023b62:	4b40      	ldr	r3, [pc, #256]	; (8023c64 <ECAT_Main+0x184>)
 8023b64:	781b      	ldrb	r3, [r3, #0]
 8023b66:	f003 0310 	and.w	r3, r3, #16
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	d112      	bne.n	8023b94 <ECAT_Main+0xb4>
 8023b6e:	4b3d      	ldr	r3, [pc, #244]	; (8023c64 <ECAT_Main+0x184>)
 8023b70:	781b      	ldrb	r3, [r3, #0]
 8023b72:	f023 0310 	bic.w	r3, r3, #16
 8023b76:	2b01      	cmp	r3, #1
 8023b78:	d00c      	beq.n	8023b94 <ECAT_Main+0xb4>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8023b7a:	88fb      	ldrh	r3, [r7, #6]
 8023b7c:	f023 0310 	bic.w	r3, r3, #16
 8023b80:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8023b82:	4b38      	ldr	r3, [pc, #224]	; (8023c64 <ECAT_Main+0x184>)
 8023b84:	781b      	ldrb	r3, [r3, #0]
 8023b86:	f003 030f 	and.w	r3, r3, #15
 8023b8a:	b2db      	uxtb	r3, r3
 8023b8c:	4618      	mov	r0, r3
 8023b8e:	2100      	movs	r1, #0
 8023b90:	f7ff f8f4 	bl	8022d7c <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8023b94:	4b31      	ldr	r3, [pc, #196]	; (8023c5c <ECAT_Main+0x17c>)
 8023b96:	781b      	ldrb	r3, [r3, #0]
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	d001      	beq.n	8023ba0 <ECAT_Main+0xc0>
    {
        AL_ControlRes();
 8023b9c:	f7ff fcaa 	bl	80234f4 <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8023ba0:	4b2c      	ldr	r3, [pc, #176]	; (8023c54 <ECAT_Main+0x174>)
 8023ba2:	781b      	ldrb	r3, [r3, #0]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d052      	beq.n	8023c4e <ECAT_Main+0x16e>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
            if (!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8023ba8:	797b      	ldrb	r3, [r7, #5]
 8023baa:	f003 0301 	and.w	r3, r3, #1
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d108      	bne.n	8023bc4 <ECAT_Main+0xe4>
            {
                AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8023bb2:	4b2c      	ldr	r3, [pc, #176]	; (8023c64 <ECAT_Main+0x184>)
 8023bb4:	781b      	ldrb	r3, [r3, #0]
 8023bb6:	f003 030f 	and.w	r3, r3, #15
 8023bba:	b2db      	uxtb	r3, r3
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	2100      	movs	r1, #0
 8023bc0:	f7ff f8dc 	bl	8022d7c <AL_ControlInd>
            }

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 8023bc4:	88fb      	ldrh	r3, [r7, #6]
 8023bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d012      	beq.n	8023bf4 <ECAT_Main+0x114>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u8dummy = 0;
 8023bce:	4b26      	ldr	r3, [pc, #152]	; (8023c68 <ECAT_Main+0x188>)
 8023bd0:	2200      	movs	r2, #0
 8023bd2:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,u16EscAddrSendMbx);
 8023bd4:	4b25      	ldr	r3, [pc, #148]	; (8023c6c <ECAT_Main+0x18c>)
 8023bd6:	881b      	ldrh	r3, [r3, #0]
 8023bd8:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023bdc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023be0:	4a21      	ldr	r2, [pc, #132]	; (8023c68 <ECAT_Main+0x188>)
 8023be2:	7812      	ldrb	r2, [r2, #0]
 8023be4:	b2d2      	uxtb	r2, r2
 8023be6:	701a      	strb	r2, [r3, #0]

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8023be8:	88fb      	ldrh	r3, [r7, #6]
 8023bea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023bee:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 8023bf0:	f000 fbb4 	bl	802435c <MBX_MailboxReadInd>
        }

        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 8023bf4:	797b      	ldrb	r3, [r7, #5]
 8023bf6:	f003 0302 	and.w	r3, r3, #2
 8023bfa:	2b00      	cmp	r3, #0
 8023bfc:	d006      	beq.n	8023c0c <ECAT_Main+0x12c>
 8023bfe:	4b1c      	ldr	r3, [pc, #112]	; (8023c70 <ECAT_Main+0x190>)
 8023c00:	781b      	ldrb	r3, [r3, #0]
 8023c02:	f083 0301 	eor.w	r3, r3, #1
 8023c06:	b2db      	uxtb	r3, r3
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	d108      	bne.n	8023c1e <ECAT_Main+0x13e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8023c0c:	797b      	ldrb	r3, [r7, #5]
 8023c0e:	f003 0302 	and.w	r3, r3, #2
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d10c      	bne.n	8023c30 <ECAT_Main+0x150>
 8023c16:	4b16      	ldr	r3, [pc, #88]	; (8023c70 <ECAT_Main+0x190>)
 8023c18:	781b      	ldrb	r3, [r3, #0]
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	d008      	beq.n	8023c30 <ECAT_Main+0x150>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8023c1e:	f000 fc17 	bl	8024450 <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            sm1Activate &= SM_SETTING_REPEAT_ACK;
 8023c22:	797b      	ldrb	r3, [r7, #5]
 8023c24:	f003 0302 	and.w	r3, r3, #2
 8023c28:	717b      	strb	r3, [r7, #5]
            HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023c2a:	4a12      	ldr	r2, [pc, #72]	; (8023c74 <ECAT_Main+0x194>)
 8023c2c:	797b      	ldrb	r3, [r7, #5]
 8023c2e:	7013      	strb	r3, [r2, #0]
        }

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8023c30:	f7fe f8e4 	bl	8021dfc <HW_GetALEventRegister>
 8023c34:	4603      	mov	r3, r0
 8023c36:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 8023c38:	88fb      	ldrh	r3, [r7, #6]
 8023c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d005      	beq.n	8023c4e <ECAT_Main+0x16e>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8023c42:	88fb      	ldrh	r3, [r7, #6]
 8023c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023c48:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8023c4a:	f000 fcad 	bl	80245a8 <MBX_CheckAndCopyMailbox>

        }
    }
}
 8023c4e:	3708      	adds	r7, #8
 8023c50:	46bd      	mov	sp, r7
 8023c52:	bd80      	pop	{r7, pc}
 8023c54:	1ffea90a 	.word	0x1ffea90a
 8023c58:	5401080e 	.word	0x5401080e
 8023c5c:	1ffea87c 	.word	0x1ffea87c
 8023c60:	54010120 	.word	0x54010120
 8023c64:	1ffea851 	.word	0x1ffea851
 8023c68:	1ffea868 	.word	0x1ffea868
 8023c6c:	1ffea91e 	.word	0x1ffea91e
 8023c70:	1ffea928 	.word	0x1ffea928
 8023c74:	5401080f 	.word	0x5401080f

08023c78 <FOE_Read>:
 \brief    The function starts a file reading

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Read(UINT16 MBXMEM * pName, UINT16 nameSize, UINT16 MBXMEM * pData, UINT32 password)
{
 8023c78:	b5b0      	push	{r4, r5, r7, lr}
 8023c7a:	b086      	sub	sp, #24
 8023c7c:	af02      	add	r7, sp, #8
 8023c7e:	60f8      	str	r0, [r7, #12]
 8023c80:	607a      	str	r2, [r7, #4]
 8023c82:	603b      	str	r3, [r7, #0]
 8023c84:	460b      	mov	r3, r1
 8023c86:	817b      	strh	r3, [r7, #10]
    
/*ECATCHANGE_START(V5.12) FOE1*/
    if (pAPPL_FoeRead != NULL)
 8023c88:	4b0b      	ldr	r3, [pc, #44]	; (8023cb8 <FOE_Read+0x40>)
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	d00d      	beq.n	8023cac <FOE_Read+0x34>
    {
        return  pAPPL_FoeRead(pName, nameSize, password, u16FoeMaxSendBlockSize, pData);
 8023c90:	4b09      	ldr	r3, [pc, #36]	; (8023cb8 <FOE_Read+0x40>)
 8023c92:	681c      	ldr	r4, [r3, #0]
 8023c94:	4b09      	ldr	r3, [pc, #36]	; (8023cbc <FOE_Read+0x44>)
 8023c96:	881d      	ldrh	r5, [r3, #0]
 8023c98:	897a      	ldrh	r2, [r7, #10]
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	9300      	str	r3, [sp, #0]
 8023c9e:	68f8      	ldr	r0, [r7, #12]
 8023ca0:	4611      	mov	r1, r2
 8023ca2:	683a      	ldr	r2, [r7, #0]
 8023ca4:	462b      	mov	r3, r5
 8023ca6:	47a0      	blx	r4
 8023ca8:	4603      	mov	r3, r0
 8023caa:	e001      	b.n	8023cb0 <FOE_Read+0x38>
    }


    return ECAT_FOE_ERRCODE_NOTDEFINED;
 8023cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
/*ECATCHANGE_END(V5.12) FOE1*/
}
 8023cb0:	4618      	mov	r0, r3
 8023cb2:	3710      	adds	r7, #16
 8023cb4:	46bd      	mov	sp, r7
 8023cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8023cb8:	1ffea824 	.word	0x1ffea824
 8023cbc:	1ffea848 	.word	0x1ffea848

08023cc0 <FOE_Write>:
 \brief    The function starts a file writing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Write(UINT16 MBXMEM * pName, UINT16 nameSize, UINT32 password)
{
 8023cc0:	b580      	push	{r7, lr}
 8023cc2:	b084      	sub	sp, #16
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	60f8      	str	r0, [r7, #12]
 8023cc8:	460b      	mov	r3, r1
 8023cca:	607a      	str	r2, [r7, #4]
 8023ccc:	817b      	strh	r3, [r7, #10]
/*ECATCHANGE_START(V5.12) FOE1*/
	if(bBootMode)
 8023cce:	4b0a      	ldr	r3, [pc, #40]	; (8023cf8 <FOE_Write+0x38>)
 8023cd0:	781b      	ldrb	r3, [r3, #0]
 8023cd2:	2b00      	cmp	r3, #0
 8023cd4:	d00a      	beq.n	8023cec <FOE_Write+0x2c>
	{
		if(password == 0xBEEFBEEF)
 8023cd6:	687b      	ldr	r3, [r7, #4]
 8023cd8:	4a08      	ldr	r2, [pc, #32]	; (8023cfc <FOE_Write+0x3c>)
 8023cda:	4293      	cmp	r3, r2
 8023cdc:	d103      	bne.n	8023ce6 <FOE_Write+0x26>
		{
			FWUPDATE_StartDownload();
 8023cde:	f006 faed 	bl	802a2bc <FWUPDATE_StartDownload>
			return 0;
 8023ce2:	2300      	movs	r3, #0
 8023ce4:	e004      	b.n	8023cf0 <FOE_Write+0x30>
		}else
		{
			return ECAT_FOE_ERRCODE_ILLEGAL;
 8023ce6:	f248 0304 	movw	r3, #32772	; 0x8004
 8023cea:	e001      	b.n	8023cf0 <FOE_Write+0x30>
		}
	}else
	{
		return ECAT_FOE_ERRCODE_DISKFULL;
 8023cec:	f248 0303 	movw	r3, #32771	; 0x8003
	}
/*ECATCHANGE_END(V5.12) FOE1*/
}
 8023cf0:	4618      	mov	r0, r3
 8023cf2:	3710      	adds	r7, #16
 8023cf4:	46bd      	mov	sp, r7
 8023cf6:	bd80      	pop	{r7, pc}
 8023cf8:	1ffea888 	.word	0x1ffea888
 8023cfc:	beefbeef 	.word	0xbeefbeef

08023d00 <FOE_Data>:
 \brief    The function is called to write the next part of a file

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Data(UINT16 MBXMEM * pData, UINT16 Size)
{
 8023d00:	b580      	push	{r7, lr}
 8023d02:	b082      	sub	sp, #8
 8023d04:	af00      	add	r7, sp, #0
 8023d06:	6078      	str	r0, [r7, #4]
 8023d08:	460b      	mov	r3, r1
 8023d0a:	807b      	strh	r3, [r7, #2]
/*ECATCHANGE_START(V5.12) FOE1*/
	if(bBootMode)
 8023d0c:	4b07      	ldr	r3, [pc, #28]	; (8023d2c <FOE_Data+0x2c>)
 8023d0e:	781b      	ldrb	r3, [r3, #0]
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	d005      	beq.n	8023d20 <FOE_Data+0x20>
	{
		FWUPDATE_Data(pData, Size);
 8023d14:	887b      	ldrh	r3, [r7, #2]
 8023d16:	6878      	ldr	r0, [r7, #4]
 8023d18:	4619      	mov	r1, r3
 8023d1a:	f006 fb03 	bl	802a324 <FWUPDATE_Data>
 8023d1e:	e001      	b.n	8023d24 <FOE_Data+0x24>
	}else
	{
		return ECAT_FOE_ERRCODE_DISKFULL;
 8023d20:	f248 0303 	movw	r3, #32771	; 0x8003
	}
/*ECATCHANGE_END(V5.12) FOE1*/
}
 8023d24:	4618      	mov	r0, r3
 8023d26:	3708      	adds	r7, #8
 8023d28:	46bd      	mov	sp, r7
 8023d2a:	bd80      	pop	{r7, pc}
 8023d2c:	1ffea888 	.word	0x1ffea888

08023d30 <FOE_Ack>:
 \brief    The function is called when the reading of a part of a file is acknowledged

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Ack(UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 8023d30:	b580      	push	{r7, lr}
 8023d32:	b082      	sub	sp, #8
 8023d34:	af00      	add	r7, sp, #0
 8023d36:	6078      	str	r0, [r7, #4]
 8023d38:	6039      	str	r1, [r7, #0]
    /*ECATCHANGE_START(V5.12) FOE1*/

    if (pAPPL_FoeReadData != NULL)
 8023d3a:	4b0a      	ldr	r3, [pc, #40]	; (8023d64 <FOE_Ack+0x34>)
 8023d3c:	681b      	ldr	r3, [r3, #0]
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d009      	beq.n	8023d56 <FOE_Ack+0x26>
    {
        return pAPPL_FoeReadData(fileOffset, u16FoeMaxSendBlockSize, pData);
 8023d42:	4b08      	ldr	r3, [pc, #32]	; (8023d64 <FOE_Ack+0x34>)
 8023d44:	681b      	ldr	r3, [r3, #0]
 8023d46:	4a08      	ldr	r2, [pc, #32]	; (8023d68 <FOE_Ack+0x38>)
 8023d48:	8812      	ldrh	r2, [r2, #0]
 8023d4a:	6878      	ldr	r0, [r7, #4]
 8023d4c:	4611      	mov	r1, r2
 8023d4e:	683a      	ldr	r2, [r7, #0]
 8023d50:	4798      	blx	r3
 8023d52:	4603      	mov	r3, r0
 8023d54:	e001      	b.n	8023d5a <FOE_Ack+0x2a>
    }

    return ECAT_FOE_ERRCODE_NOTDEFINED;
 8023d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    /*ECATCHANGE_END(V5.12) FOE1*/
}
 8023d5a:	4618      	mov	r0, r3
 8023d5c:	3708      	adds	r7, #8
 8023d5e:	46bd      	mov	sp, r7
 8023d60:	bd80      	pop	{r7, pc}
 8023d62:	bf00      	nop
 8023d64:	1ffea7f8 	.word	0x1ffea7f8
 8023d68:	1ffea848 	.word	0x1ffea848

08023d6c <FOE_Busy>:
 \brief    The function is called when the reading of a part of a file should be repeated

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Busy(UINT16 done, UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 8023d6c:	b580      	push	{r7, lr}
 8023d6e:	b084      	sub	sp, #16
 8023d70:	af00      	add	r7, sp, #0
 8023d72:	4603      	mov	r3, r0
 8023d74:	60b9      	str	r1, [r7, #8]
 8023d76:	607a      	str	r2, [r7, #4]
 8023d78:	81fb      	strh	r3, [r7, #14]
    /* send last part again */
    return FOE_Ack(fileOffset, pData);
 8023d7a:	68b8      	ldr	r0, [r7, #8]
 8023d7c:	6879      	ldr	r1, [r7, #4]
 8023d7e:	f7ff ffd7 	bl	8023d30 <FOE_Ack>
 8023d82:	4603      	mov	r3, r0
}
 8023d84:	4618      	mov	r0, r3
 8023d86:	3710      	adds	r7, #16
 8023d88:	46bd      	mov	sp, r7
 8023d8a:	bd80      	pop	{r7, pc}

08023d8c <FOE_Error>:
 \brief    The function is called when a file transfer is aborted from the other station

*////////////////////////////////////////////////////////////////////////////////////////

void FOE_Error(UINT32 errorCode)
{
 8023d8c:	b580      	push	{r7, lr}
 8023d8e:	b082      	sub	sp, #8
 8023d90:	af00      	add	r7, sp, #0
 8023d92:	6078      	str	r0, [r7, #4]
    if (pAPPL_FoeError != NULL)
 8023d94:	4b05      	ldr	r3, [pc, #20]	; (8023dac <FOE_Error+0x20>)
 8023d96:	681b      	ldr	r3, [r3, #0]
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d003      	beq.n	8023da4 <FOE_Error+0x18>
    {
        pAPPL_FoeError(errorCode);
 8023d9c:	4b03      	ldr	r3, [pc, #12]	; (8023dac <FOE_Error+0x20>)
 8023d9e:	681b      	ldr	r3, [r3, #0]
 8023da0:	6878      	ldr	r0, [r7, #4]
 8023da2:	4798      	blx	r3
    }
}
 8023da4:	3708      	adds	r7, #8
 8023da6:	46bd      	mov	sp, r7
 8023da8:	bd80      	pop	{r7, pc}
 8023daa:	bf00      	nop
 8023dac:	1ffea7f0 	.word	0x1ffea7f0

08023db0 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8023db0:	b580      	push	{r7, lr}
 8023db2:	b082      	sub	sp, #8
 8023db4:	af00      	add	r7, sp, #0
 8023db6:	6078      	str	r0, [r7, #4]
 8023db8:	460b      	mov	r3, r1
 8023dba:	807b      	strh	r3, [r7, #2]
 8023dbc:	4613      	mov	r3, r2
 8023dbe:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8023dc0:	887b      	ldrh	r3, [r7, #2]
 8023dc2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023dc6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023dca:	883a      	ldrh	r2, [r7, #0]
 8023dcc:	6878      	ldr	r0, [r7, #4]
 8023dce:	4619      	mov	r1, r3
 8023dd0:	f006 ff22 	bl	802ac18 <memcpy>
}
 8023dd4:	3708      	adds	r7, #8
 8023dd6:	46bd      	mov	sp, r7
 8023dd8:	bd80      	pop	{r7, pc}
 8023dda:	bf00      	nop

08023ddc <HW_EscReadMbxMem>:
 * Reads data from the ESC and copies to slave mailbox memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscRead.
 *
 */
__STATIC_INLINE void HW_EscReadMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8023ddc:	b580      	push	{r7, lr}
 8023dde:	b082      	sub	sp, #8
 8023de0:	af00      	add	r7, sp, #0
 8023de2:	6078      	str	r0, [r7, #4]
 8023de4:	460b      	mov	r3, r1
 8023de6:	807b      	strh	r3, [r7, #2]
 8023de8:	4613      	mov	r3, r2
 8023dea:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8023dec:	887a      	ldrh	r2, [r7, #2]
 8023dee:	883b      	ldrh	r3, [r7, #0]
 8023df0:	6878      	ldr	r0, [r7, #4]
 8023df2:	4611      	mov	r1, r2
 8023df4:	461a      	mov	r2, r3
 8023df6:	f7ff ffdb 	bl	8023db0 <HW_EscRead>
}
 8023dfa:	3708      	adds	r7, #8
 8023dfc:	46bd      	mov	sp, r7
 8023dfe:	bd80      	pop	{r7, pc}

08023e00 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8023e00:	b580      	push	{r7, lr}
 8023e02:	b082      	sub	sp, #8
 8023e04:	af00      	add	r7, sp, #0
 8023e06:	6078      	str	r0, [r7, #4]
 8023e08:	460b      	mov	r3, r1
 8023e0a:	807b      	strh	r3, [r7, #2]
 8023e0c:	4613      	mov	r3, r2
 8023e0e:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8023e10:	887b      	ldrh	r3, [r7, #2]
 8023e12:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023e16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023e1a:	883a      	ldrh	r2, [r7, #0]
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	6879      	ldr	r1, [r7, #4]
 8023e20:	f006 fefa 	bl	802ac18 <memcpy>
}
 8023e24:	3708      	adds	r7, #8
 8023e26:	46bd      	mov	sp, r7
 8023e28:	bd80      	pop	{r7, pc}
 8023e2a:	bf00      	nop

08023e2c <HW_EscWriteMbxMem>:
 * Writes data from the slave mailbox memory to ESC memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscWrite.
 *
 */
__STATIC_INLINE void HW_EscWriteMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8023e2c:	b580      	push	{r7, lr}
 8023e2e:	b082      	sub	sp, #8
 8023e30:	af00      	add	r7, sp, #0
 8023e32:	6078      	str	r0, [r7, #4]
 8023e34:	460b      	mov	r3, r1
 8023e36:	807b      	strh	r3, [r7, #2]
 8023e38:	4613      	mov	r3, r2
 8023e3a:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 8023e3c:	887a      	ldrh	r2, [r7, #2]
 8023e3e:	883b      	ldrh	r3, [r7, #0]
 8023e40:	6878      	ldr	r0, [r7, #4]
 8023e42:	4611      	mov	r1, r2
 8023e44:	461a      	mov	r2, r3
 8023e46:	f7ff ffdb 	bl	8023e00 <HW_EscWrite>
}
 8023e4a:	3708      	adds	r7, #8
 8023e4c:	46bd      	mov	sp, r7
 8023e4e:	bd80      	pop	{r7, pc}

08023e50 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8023e50:	b480      	push	{r7}
 8023e52:	b085      	sub	sp, #20
 8023e54:	af00      	add	r7, sp, #0
 8023e56:	6078      	str	r0, [r7, #4]
 8023e58:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8023e5a:	683b      	ldr	r3, [r7, #0]
 8023e5c:	885b      	ldrh	r3, [r3, #2]
 8023e5e:	3301      	adds	r3, #1
 8023e60:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 8023e62:	683b      	ldr	r3, [r7, #0]
 8023e64:	889b      	ldrh	r3, [r3, #4]
 8023e66:	89fa      	ldrh	r2, [r7, #14]
 8023e68:	429a      	cmp	r2, r3
 8023e6a:	d101      	bne.n	8023e70 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8023e6c:	2300      	movs	r3, #0
 8023e6e:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 8023e70:	683b      	ldr	r3, [r7, #0]
 8023e72:	881b      	ldrh	r3, [r3, #0]
 8023e74:	89fa      	ldrh	r2, [r7, #14]
 8023e76:	429a      	cmp	r2, r3
 8023e78:	d101      	bne.n	8023e7e <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8023e7a:	2307      	movs	r3, #7
 8023e7c:	e00b      	b.n	8023e96 <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 8023e7e:	683b      	ldr	r3, [r7, #0]
 8023e80:	885b      	ldrh	r3, [r3, #2]
 8023e82:	461a      	mov	r2, r3
 8023e84:	683b      	ldr	r3, [r7, #0]
 8023e86:	3202      	adds	r2, #2
 8023e88:	6879      	ldr	r1, [r7, #4]
 8023e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 8023e8e:	683b      	ldr	r3, [r7, #0]
 8023e90:	89fa      	ldrh	r2, [r7, #14]
 8023e92:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8023e94:	2300      	movs	r3, #0
}
 8023e96:	4618      	mov	r0, r3
 8023e98:	3714      	adds	r7, #20
 8023e9a:	46bd      	mov	sp, r7
 8023e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ea0:	4770      	bx	lr
 8023ea2:	bf00      	nop

08023ea4 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8023ea4:	b480      	push	{r7}
 8023ea6:	b085      	sub	sp, #20
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	881a      	ldrh	r2, [r3, #0]
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	885b      	ldrh	r3, [r3, #2]
 8023eb4:	429a      	cmp	r2, r3
 8023eb6:	d019      	beq.n	8023eec <GetOutOfMbxQueue+0x48>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	881b      	ldrh	r3, [r3, #0]
 8023ebc:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8023ebe:	897a      	ldrh	r2, [r7, #10]
 8023ec0:	687b      	ldr	r3, [r7, #4]
 8023ec2:	3202      	adds	r2, #2
 8023ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ec8:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 8023eca:	897b      	ldrh	r3, [r7, #10]
 8023ecc:	3301      	adds	r3, #1
 8023ece:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	897a      	ldrh	r2, [r7, #10]
 8023ed4:	801a      	strh	r2, [r3, #0]
        
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	881a      	ldrh	r2, [r3, #0]
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	889b      	ldrh	r3, [r3, #4]
 8023ede:	429a      	cmp	r2, r3
 8023ee0:	d103      	bne.n	8023eea <GetOutOfMbxQueue+0x46>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	2200      	movs	r2, #0
 8023ee6:	801a      	strh	r2, [r3, #0]
 8023ee8:	e002      	b.n	8023ef0 <GetOutOfMbxQueue+0x4c>
 8023eea:	e001      	b.n	8023ef0 <GetOutOfMbxQueue+0x4c>
        }
    }
    else
    {
        pMbx = 0;
 8023eec:	2300      	movs	r3, #0
 8023eee:	60fb      	str	r3, [r7, #12]
    }


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8023ef0:	68fb      	ldr	r3, [r7, #12]
}
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	3714      	adds	r7, #20
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023efc:	4770      	bx	lr
 8023efe:	bf00      	nop

08023f00 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8023f00:	b480      	push	{r7}
 8023f02:	b083      	sub	sp, #12
 8023f04:	af00      	add	r7, sp, #0
    
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8023f06:	4b29      	ldr	r3, [pc, #164]	; (8023fac <MBX_Init+0xac>)
 8023f08:	2224      	movs	r2, #36	; 0x24
 8023f0a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 8023f0c:	4b28      	ldr	r3, [pc, #160]	; (8023fb0 <MBX_Init+0xb0>)
 8023f0e:	2280      	movs	r2, #128	; 0x80
 8023f10:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8023f12:	4b28      	ldr	r3, [pc, #160]	; (8023fb4 <MBX_Init+0xb4>)
 8023f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023f18:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 8023f1a:	4b27      	ldr	r3, [pc, #156]	; (8023fb8 <MBX_Init+0xb8>)
 8023f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023f20:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8023f22:	4b26      	ldr	r3, [pc, #152]	; (8023fbc <MBX_Init+0xbc>)
 8023f24:	2200      	movs	r2, #0
 8023f26:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8023f28:	4b24      	ldr	r3, [pc, #144]	; (8023fbc <MBX_Init+0xbc>)
 8023f2a:	2200      	movs	r2, #0
 8023f2c:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8023f2e:	4b23      	ldr	r3, [pc, #140]	; (8023fbc <MBX_Init+0xbc>)
 8023f30:	220a      	movs	r2, #10
 8023f32:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8023f34:	4b22      	ldr	r3, [pc, #136]	; (8023fc0 <MBX_Init+0xc0>)
 8023f36:	2200      	movs	r2, #0
 8023f38:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8023f3a:	4b21      	ldr	r3, [pc, #132]	; (8023fc0 <MBX_Init+0xc0>)
 8023f3c:	2200      	movs	r2, #0
 8023f3e:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8023f40:	4b1f      	ldr	r3, [pc, #124]	; (8023fc0 <MBX_Init+0xc0>)
 8023f42:	220a      	movs	r2, #10
 8023f44:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8023f46:	4b1f      	ldr	r3, [pc, #124]	; (8023fc4 <MBX_Init+0xc4>)
 8023f48:	2200      	movs	r2, #0
 8023f4a:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 8023f4c:	4b1e      	ldr	r3, [pc, #120]	; (8023fc8 <MBX_Init+0xc8>)
 8023f4e:	2200      	movs	r2, #0
 8023f50:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8023f52:	4b1e      	ldr	r3, [pc, #120]	; (8023fcc <MBX_Init+0xcc>)
 8023f54:	2200      	movs	r2, #0
 8023f56:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8023f58:	4b1d      	ldr	r3, [pc, #116]	; (8023fd0 <MBX_Init+0xd0>)
 8023f5a:	2200      	movs	r2, #0
 8023f5c:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8023f5e:	4b1d      	ldr	r3, [pc, #116]	; (8023fd4 <MBX_Init+0xd4>)
 8023f60:	2200      	movs	r2, #0
 8023f62:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 8023f64:	2300      	movs	r3, #0
 8023f66:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023f68:	4b1b      	ldr	r3, [pc, #108]	; (8023fd8 <MBX_Init+0xd8>)
 8023f6a:	781b      	ldrb	r3, [r3, #0]
 8023f6c:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 8023f6e:	79fb      	ldrb	r3, [r7, #7]
 8023f70:	f023 0302 	bic.w	r3, r3, #2
 8023f74:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023f76:	4a18      	ldr	r2, [pc, #96]	; (8023fd8 <MBX_Init+0xd8>)
 8023f78:	79fb      	ldrb	r3, [r7, #7]
 8023f7a:	7013      	strb	r3, [r2, #0]
    }
    bMbxRunning = FALSE;
 8023f7c:	4b17      	ldr	r3, [pc, #92]	; (8023fdc <MBX_Init+0xdc>)
 8023f7e:	2200      	movs	r2, #0
 8023f80:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8023f82:	4b17      	ldr	r3, [pc, #92]	; (8023fe0 <MBX_Init+0xe0>)
 8023f84:	2200      	movs	r2, #0
 8023f86:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8023f88:	4b16      	ldr	r3, [pc, #88]	; (8023fe4 <MBX_Init+0xe4>)
 8023f8a:	2200      	movs	r2, #0
 8023f8c:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8023f8e:	4b16      	ldr	r3, [pc, #88]	; (8023fe8 <MBX_Init+0xe8>)
 8023f90:	2200      	movs	r2, #0
 8023f92:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8023f94:	4b15      	ldr	r3, [pc, #84]	; (8023fec <MBX_Init+0xec>)
 8023f96:	2200      	movs	r2, #0
 8023f98:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8023f9a:	4b15      	ldr	r3, [pc, #84]	; (8023ff0 <MBX_Init+0xf0>)
 8023f9c:	2200      	movs	r2, #0
 8023f9e:	701a      	strb	r2, [r3, #0]
}
 8023fa0:	370c      	adds	r7, #12
 8023fa2:	46bd      	mov	sp, r7
 8023fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa8:	4770      	bx	lr
 8023faa:	bf00      	nop
 8023fac:	1ffea926 	.word	0x1ffea926
 8023fb0:	1ffea914 	.word	0x1ffea914
 8023fb4:	1ffea90c 	.word	0x1ffea90c
 8023fb8:	1ffea91e 	.word	0x1ffea91e
 8023fbc:	1ffea8d4 	.word	0x1ffea8d4
 8023fc0:	1ffea8a0 	.word	0x1ffea8a0
 8023fc4:	1ffea920 	.word	0x1ffea920
 8023fc8:	1ffea92c 	.word	0x1ffea92c
 8023fcc:	1ffea918 	.word	0x1ffea918
 8023fd0:	1ffea910 	.word	0x1ffea910
 8023fd4:	1ffea928 	.word	0x1ffea928
 8023fd8:	5401080f 	.word	0x5401080f
 8023fdc:	1ffea90a 	.word	0x1ffea90a
 8023fe0:	1ffea909 	.word	0x1ffea909
 8023fe4:	1ffea91c 	.word	0x1ffea91c
 8023fe8:	1ffea925 	.word	0x1ffea925
 8023fec:	1ffea924 	.word	0x1ffea924
 8023ff0:	1ffea89c 	.word	0x1ffea89c

08023ff4 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8023ff4:	b580      	push	{r7, lr}
 8023ff6:	b082      	sub	sp, #8
 8023ff8:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	80fb      	strh	r3, [r7, #6]
    
    /* get address of the receive mailbox sync manager (SM0) */
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8023ffe:	2000      	movs	r0, #0
 8024000:	f7fd ff56 	bl	8021eb0 <GetSyncMan>
 8024004:	6038      	str	r0, [r7, #0]

    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8024006:	683b      	ldr	r3, [r7, #0]
 8024008:	885b      	ldrh	r3, [r3, #2]
 802400a:	b29a      	uxth	r2, r3
 802400c:	4b36      	ldr	r3, [pc, #216]	; (80240e8 <MBX_StartMailboxHandler+0xf4>)
 802400e:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8024010:	683b      	ldr	r3, [r7, #0]
 8024012:	881b      	ldrh	r3, [r3, #0]
 8024014:	b29a      	uxth	r2, r3
 8024016:	4b35      	ldr	r3, [pc, #212]	; (80240ec <MBX_StartMailboxHandler+0xf8>)
 8024018:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 802401a:	2001      	movs	r0, #1
 802401c:	f7fd ff48 	bl	8021eb0 <GetSyncMan>
 8024020:	6038      	str	r0, [r7, #0]

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8024022:	683b      	ldr	r3, [r7, #0]
 8024024:	885b      	ldrh	r3, [r3, #2]
 8024026:	b29a      	uxth	r2, r3
 8024028:	4b31      	ldr	r3, [pc, #196]	; (80240f0 <MBX_StartMailboxHandler+0xfc>)
 802402a:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 802402c:	683b      	ldr	r3, [r7, #0]
 802402e:	881b      	ldrh	r3, [r3, #0]
 8024030:	b29a      	uxth	r2, r3
 8024032:	4b30      	ldr	r3, [pc, #192]	; (80240f4 <MBX_StartMailboxHandler+0x100>)
 8024034:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8024036:	4b2d      	ldr	r3, [pc, #180]	; (80240ec <MBX_StartMailboxHandler+0xf8>)
 8024038:	881b      	ldrh	r3, [r3, #0]
 802403a:	461a      	mov	r2, r3
 802403c:	4b2a      	ldr	r3, [pc, #168]	; (80240e8 <MBX_StartMailboxHandler+0xf4>)
 802403e:	881b      	ldrh	r3, [r3, #0]
 8024040:	4413      	add	r3, r2
 8024042:	4a2c      	ldr	r2, [pc, #176]	; (80240f4 <MBX_StartMailboxHandler+0x100>)
 8024044:	8812      	ldrh	r2, [r2, #0]
 8024046:	4293      	cmp	r3, r2
 8024048:	dd0c      	ble.n	8024064 <MBX_StartMailboxHandler+0x70>
 802404a:	4b28      	ldr	r3, [pc, #160]	; (80240ec <MBX_StartMailboxHandler+0xf8>)
 802404c:	881b      	ldrh	r3, [r3, #0]
 802404e:	461a      	mov	r2, r3
 8024050:	4b28      	ldr	r3, [pc, #160]	; (80240f4 <MBX_StartMailboxHandler+0x100>)
 8024052:	881b      	ldrh	r3, [r3, #0]
 8024054:	4619      	mov	r1, r3
 8024056:	4b26      	ldr	r3, [pc, #152]	; (80240f0 <MBX_StartMailboxHandler+0xfc>)
 8024058:	881b      	ldrh	r3, [r3, #0]
 802405a:	440b      	add	r3, r1
 802405c:	429a      	cmp	r2, r3
 802405e:	da01      	bge.n	8024064 <MBX_StartMailboxHandler+0x70>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8024060:	2316      	movs	r3, #22
 8024062:	e03d      	b.n	80240e0 <MBX_StartMailboxHandler+0xec>
    }

    u16FoeMaxSendBlockSize = (u16SendMbxSize - SIZEOF(TFOEHEADER) - MBX_HEADER_SIZE);
 8024064:	4b22      	ldr	r3, [pc, #136]	; (80240f0 <MBX_StartMailboxHandler+0xfc>)
 8024066:	881b      	ldrh	r3, [r3, #0]
 8024068:	3b0c      	subs	r3, #12
 802406a:	b29a      	uxth	r2, r3
 802406c:	4b22      	ldr	r3, [pc, #136]	; (80240f8 <MBX_StartMailboxHandler+0x104>)
 802406e:	801a      	strh	r2, [r3, #0]

    /* enable the receive mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_WRITE);
 8024070:	2000      	movs	r0, #0
 8024072:	f7fd ff5f 	bl	8021f34 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8024076:	2001      	movs	r0, #1
 8024078:	f7fd ff5c 	bl	8021f34 <EnableSyncManChannel>

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 802407c:	4b1a      	ldr	r3, [pc, #104]	; (80240e8 <MBX_StartMailboxHandler+0xf4>)
 802407e:	881b      	ldrh	r3, [r3, #0]
 8024080:	4618      	mov	r0, r3
 8024082:	f006 fda9 	bl	802abd8 <malloc>
 8024086:	4603      	mov	r3, r0
 8024088:	461a      	mov	r2, r3
 802408a:	4b1c      	ldr	r3, [pc, #112]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 802408c:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 802408e:	4b1b      	ldr	r3, [pc, #108]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	2b00      	cmp	r3, #0
 8024094:	d118      	bne.n	80240c8 <MBX_StartMailboxHandler+0xd4>
        {
            bNoMbxMemoryAvailable = TRUE;
 8024096:	4b1a      	ldr	r3, [pc, #104]	; (8024100 <MBX_StartMailboxHandler+0x10c>)
 8024098:	2201      	movs	r2, #1
 802409a:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 802409c:	200a      	movs	r0, #10
 802409e:	f006 fd9b 	bl	802abd8 <malloc>
 80240a2:	4603      	mov	r3, r0
 80240a4:	461a      	mov	r2, r3
 80240a6:	4b15      	ldr	r3, [pc, #84]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240a8:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 80240aa:	4b14      	ldr	r3, [pc, #80]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d101      	bne.n	80240b6 <MBX_StartMailboxHandler+0xc2>
            {
                result = ALSTATUSCODE_NOMEMORY;
 80240b2:	2302      	movs	r3, #2
 80240b4:	80fb      	strh	r3, [r7, #6]
            }

            APPL_FreeMailboxBuffer(psWriteMbx);
 80240b6:	4b11      	ldr	r3, [pc, #68]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240b8:	681b      	ldr	r3, [r3, #0]
 80240ba:	4618      	mov	r0, r3
 80240bc:	f006 fd94 	bl	802abe8 <free>
            psWriteMbx = NULL;
 80240c0:	4b0e      	ldr	r3, [pc, #56]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240c2:	2200      	movs	r2, #0
 80240c4:	601a      	str	r2, [r3, #0]
 80240c6:	e00a      	b.n	80240de <MBX_StartMailboxHandler+0xea>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 80240c8:	4b0d      	ldr	r3, [pc, #52]	; (8024100 <MBX_StartMailboxHandler+0x10c>)
 80240ca:	2200      	movs	r2, #0
 80240cc:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 80240ce:	4b0b      	ldr	r3, [pc, #44]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240d0:	681b      	ldr	r3, [r3, #0]
 80240d2:	4618      	mov	r0, r3
 80240d4:	f006 fd88 	bl	802abe8 <free>
            psWriteMbx = NULL;
 80240d8:	4b08      	ldr	r3, [pc, #32]	; (80240fc <MBX_StartMailboxHandler+0x108>)
 80240da:	2200      	movs	r2, #0
 80240dc:	601a      	str	r2, [r3, #0]
        }

    return result;
 80240de:	88fb      	ldrh	r3, [r7, #6]
}
 80240e0:	4618      	mov	r0, r3
 80240e2:	3708      	adds	r7, #8
 80240e4:	46bd      	mov	sp, r7
 80240e6:	bd80      	pop	{r7, pc}
 80240e8:	1ffea926 	.word	0x1ffea926
 80240ec:	1ffea90c 	.word	0x1ffea90c
 80240f0:	1ffea914 	.word	0x1ffea914
 80240f4:	1ffea91e 	.word	0x1ffea91e
 80240f8:	1ffea848 	.word	0x1ffea848
 80240fc:	1ffea920 	.word	0x1ffea920
 8024100:	1ffea908 	.word	0x1ffea908

08024104 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8024104:	b580      	push	{r7, lr}
 8024106:	b082      	sub	sp, #8
 8024108:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 802410a:	4b40      	ldr	r3, [pc, #256]	; (802420c <MBX_StopMailboxHandler+0x108>)
 802410c:	2200      	movs	r2, #0
 802410e:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_WRITE);
 8024110:	2000      	movs	r0, #0
 8024112:	f7fd fee5 	bl	8021ee0 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8024116:	2001      	movs	r0, #1
 8024118:	f7fd fee2 	bl	8021ee0 <DisableSyncManChannel>
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 802411c:	4b3c      	ldr	r3, [pc, #240]	; (8024210 <MBX_StopMailboxHandler+0x10c>)
 802411e:	681b      	ldr	r3, [r3, #0]
 8024120:	2b00      	cmp	r3, #0
 8024122:	d004      	beq.n	802412e <MBX_StopMailboxHandler+0x2a>
    {
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8024124:	4b3a      	ldr	r3, [pc, #232]	; (8024210 <MBX_StopMailboxHandler+0x10c>)
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	4618      	mov	r0, r3
 802412a:	f006 fd5d 	bl	802abe8 <free>
    }

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 802412e:	4b39      	ldr	r3, [pc, #228]	; (8024214 <MBX_StopMailboxHandler+0x110>)
 8024130:	681b      	ldr	r3, [r3, #0]
 8024132:	2b00      	cmp	r3, #0
 8024134:	d00a      	beq.n	802414c <MBX_StopMailboxHandler+0x48>
 8024136:	4b37      	ldr	r3, [pc, #220]	; (8024214 <MBX_StopMailboxHandler+0x110>)
 8024138:	681a      	ldr	r2, [r3, #0]
 802413a:	4b35      	ldr	r3, [pc, #212]	; (8024210 <MBX_StopMailboxHandler+0x10c>)
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	429a      	cmp	r2, r3
 8024140:	d004      	beq.n	802414c <MBX_StopMailboxHandler+0x48>
    {
        APPL_FreeMailboxBuffer(psStoreMbx);
 8024142:	4b34      	ldr	r3, [pc, #208]	; (8024214 <MBX_StopMailboxHandler+0x110>)
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	4618      	mov	r0, r3
 8024148:	f006 fd4e 	bl	802abe8 <free>
    }

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 802414c:	4b32      	ldr	r3, [pc, #200]	; (8024218 <MBX_StopMailboxHandler+0x114>)
 802414e:	681b      	ldr	r3, [r3, #0]
 8024150:	2b00      	cmp	r3, #0
 8024152:	d010      	beq.n	8024176 <MBX_StopMailboxHandler+0x72>
 8024154:	4b30      	ldr	r3, [pc, #192]	; (8024218 <MBX_StopMailboxHandler+0x114>)
 8024156:	681a      	ldr	r2, [r3, #0]
 8024158:	4b2d      	ldr	r3, [pc, #180]	; (8024210 <MBX_StopMailboxHandler+0x10c>)
 802415a:	681b      	ldr	r3, [r3, #0]
 802415c:	429a      	cmp	r2, r3
 802415e:	d00a      	beq.n	8024176 <MBX_StopMailboxHandler+0x72>
 8024160:	4b2d      	ldr	r3, [pc, #180]	; (8024218 <MBX_StopMailboxHandler+0x114>)
 8024162:	681a      	ldr	r2, [r3, #0]
 8024164:	4b2b      	ldr	r3, [pc, #172]	; (8024214 <MBX_StopMailboxHandler+0x110>)
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	429a      	cmp	r2, r3
 802416a:	d004      	beq.n	8024176 <MBX_StopMailboxHandler+0x72>
    {
        APPL_FreeMailboxBuffer(psReadMbx);
 802416c:	4b2a      	ldr	r3, [pc, #168]	; (8024218 <MBX_StopMailboxHandler+0x114>)
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	4618      	mov	r0, r3
 8024172:	f006 fd39 	bl	802abe8 <free>
    }


    SODS_ClearPendingResponse();
 8024176:	f002 fbd3 	bl	8026920 <SODS_ClearPendingResponse>


    FOE_Init();
 802417a:	f7fd fbab 	bl	80218d4 <FOE_Init>

    psWriteMbx = NULL;
 802417e:	4b27      	ldr	r3, [pc, #156]	; (802421c <MBX_StopMailboxHandler+0x118>)
 8024180:	2200      	movs	r2, #0
 8024182:	601a      	str	r2, [r3, #0]
    psRepeatMbx = NULL;
 8024184:	4b22      	ldr	r3, [pc, #136]	; (8024210 <MBX_StopMailboxHandler+0x10c>)
 8024186:	2200      	movs	r2, #0
 8024188:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 802418a:	4b23      	ldr	r3, [pc, #140]	; (8024218 <MBX_StopMailboxHandler+0x114>)
 802418c:	2200      	movs	r2, #0
 802418e:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 8024190:	4b20      	ldr	r3, [pc, #128]	; (8024214 <MBX_StopMailboxHandler+0x110>)
 8024192:	2200      	movs	r2, #0
 8024194:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8024196:	4b22      	ldr	r3, [pc, #136]	; (8024220 <MBX_StopMailboxHandler+0x11c>)
 8024198:	2200      	movs	r2, #0
 802419a:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 802419c:	2300      	movs	r3, #0
 802419e:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80241a0:	4b20      	ldr	r3, [pc, #128]	; (8024224 <MBX_StopMailboxHandler+0x120>)
 80241a2:	781b      	ldrb	r3, [r3, #0]
 80241a4:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 80241a6:	79fb      	ldrb	r3, [r7, #7]
 80241a8:	f023 0302 	bic.w	r3, r3, #2
 80241ac:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80241ae:	4a1d      	ldr	r2, [pc, #116]	; (8024224 <MBX_StopMailboxHandler+0x120>)
 80241b0:	79fb      	ldrb	r3, [r7, #7]
 80241b2:	7013      	strb	r3, [r2, #0]
    }
    bSendMbxIsFull         = FALSE;
 80241b4:	4b1c      	ldr	r3, [pc, #112]	; (8024228 <MBX_StopMailboxHandler+0x124>)
 80241b6:	2200      	movs	r2, #0
 80241b8:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 80241ba:	4b1c      	ldr	r3, [pc, #112]	; (802422c <MBX_StopMailboxHandler+0x128>)
 80241bc:	2200      	movs	r2, #0
 80241be:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 80241c0:	4b1b      	ldr	r3, [pc, #108]	; (8024230 <MBX_StopMailboxHandler+0x12c>)
 80241c2:	2200      	movs	r2, #0
 80241c4:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 80241c6:	4b1b      	ldr	r3, [pc, #108]	; (8024234 <MBX_StopMailboxHandler+0x130>)
 80241c8:	2200      	movs	r2, #0
 80241ca:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 80241cc:	4b1a      	ldr	r3, [pc, #104]	; (8024238 <MBX_StopMailboxHandler+0x134>)
 80241ce:	2200      	movs	r2, #0
 80241d0:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80241d2:	481a      	ldr	r0, [pc, #104]	; (802423c <MBX_StopMailboxHandler+0x138>)
 80241d4:	f7ff fe66 	bl	8023ea4 <GetOutOfMbxQueue>
 80241d8:	6038      	str	r0, [r7, #0]
        if (pMbx)
 80241da:	683b      	ldr	r3, [r7, #0]
 80241dc:	2b00      	cmp	r3, #0
 80241de:	d002      	beq.n	80241e6 <MBX_StopMailboxHandler+0xe2>
        {
            APPL_FreeMailboxBuffer(pMbx);
 80241e0:	6838      	ldr	r0, [r7, #0]
 80241e2:	f006 fd01 	bl	802abe8 <free>
/*ECATCHANGE_START(V5.12) MBX1*/
/*ECATCHANGE_END(V5.12) MBX1*/
        }
    } while (pMbx != NULL);
 80241e6:	683b      	ldr	r3, [r7, #0]
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d1f2      	bne.n	80241d2 <MBX_StopMailboxHandler+0xce>
    
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80241ec:	4814      	ldr	r0, [pc, #80]	; (8024240 <MBX_StopMailboxHandler+0x13c>)
 80241ee:	f7ff fe59 	bl	8023ea4 <GetOutOfMbxQueue>
 80241f2:	6038      	str	r0, [r7, #0]
        if (pMbx)
 80241f4:	683b      	ldr	r3, [r7, #0]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d002      	beq.n	8024200 <MBX_StopMailboxHandler+0xfc>
        {
            APPL_FreeMailboxBuffer(pMbx);
 80241fa:	6838      	ldr	r0, [r7, #0]
 80241fc:	f006 fcf4 	bl	802abe8 <free>
/*ECATCHANGE_START(V5.12) MBX1*/
/*ECATCHANGE_END(V5.12) MBX1*/
        }
    } while (pMbx != NULL);
 8024200:	683b      	ldr	r3, [r7, #0]
 8024202:	2b00      	cmp	r3, #0
 8024204:	d1f2      	bne.n	80241ec <MBX_StopMailboxHandler+0xe8>

}
 8024206:	3708      	adds	r7, #8
 8024208:	46bd      	mov	sp, r7
 802420a:	bd80      	pop	{r7, pc}
 802420c:	1ffea90a 	.word	0x1ffea90a
 8024210:	1ffea92c 	.word	0x1ffea92c
 8024214:	1ffea910 	.word	0x1ffea910
 8024218:	1ffea918 	.word	0x1ffea918
 802421c:	1ffea920 	.word	0x1ffea920
 8024220:	1ffea928 	.word	0x1ffea928
 8024224:	5401080f 	.word	0x5401080f
 8024228:	1ffea909 	.word	0x1ffea909
 802422c:	1ffea91c 	.word	0x1ffea91c
 8024230:	1ffea925 	.word	0x1ffea925
 8024234:	1ffea924 	.word	0x1ffea924
 8024238:	1ffea89c 	.word	0x1ffea89c
 802423c:	1ffea8d4 	.word	0x1ffea8d4
 8024240:	1ffea8a0 	.word	0x1ffea8a0

08024244 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8024244:	b580      	push	{r7, lr}
 8024246:	b084      	sub	sp, #16
 8024248:	af00      	add	r7, sp, #0
 802424a:	6078      	str	r0, [r7, #4]
    UINT8 result;

    /*only FoE is allowed in Boot mode*/
    if(bBootMode == TRUE && (MBX_TYPE_FOE != ((pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )))
 802424c:	4b14      	ldr	r3, [pc, #80]	; (80242a0 <MailboxServiceInd+0x5c>)
 802424e:	781b      	ldrb	r3, [r3, #0]
 8024250:	2b00      	cmp	r3, #0
 8024252:	d007      	beq.n	8024264 <MailboxServiceInd+0x20>
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	795b      	ldrb	r3, [r3, #5]
 8024258:	f003 030f 	and.w	r3, r3, #15
 802425c:	2b04      	cmp	r3, #4
 802425e:	d001      	beq.n	8024264 <MailboxServiceInd+0x20>
    {
        return MBXERR_UNSUPPORTEDPROTOCOL;
 8024260:	2302      	movs	r3, #2
 8024262:	e018      	b.n	8024296 <MailboxServiceInd+0x52>
    }

    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	795b      	ldrb	r3, [r3, #5]
 8024268:	f003 030f 	and.w	r3, r3, #15
 802426c:	2b03      	cmp	r3, #3
 802426e:	d002      	beq.n	8024276 <MailboxServiceInd+0x32>
 8024270:	2b04      	cmp	r3, #4
 8024272:	d006      	beq.n	8024282 <MailboxServiceInd+0x3e>
 8024274:	e00b      	b.n	802428e <MailboxServiceInd+0x4a>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8024276:	6878      	ldr	r0, [r7, #4]
 8024278:	f7fd fac6 	bl	8021808 <COE_ServiceInd>
 802427c:	4603      	mov	r3, r0
 802427e:	73fb      	strb	r3, [r7, #15]
        break;
 8024280:	e008      	b.n	8024294 <MailboxServiceInd+0x50>

    case MBX_TYPE_FOE:
        /* FoE datagram received */
        result = FOE_ServiceInd((TFOEMBX MBXMEM *) pMbx);
 8024282:	6878      	ldr	r0, [r7, #4]
 8024284:	f7fd fb3c 	bl	8021900 <FOE_ServiceInd>
 8024288:	4603      	mov	r3, r0
 802428a:	73fb      	strb	r3, [r7, #15]
        break;
 802428c:	e002      	b.n	8024294 <MailboxServiceInd+0x50>

    default:
        result = MBXERR_UNSUPPORTEDPROTOCOL;
 802428e:	2302      	movs	r3, #2
 8024290:	73fb      	strb	r3, [r7, #15]
        break;
 8024292:	bf00      	nop
    }

    return result;
 8024294:	7bfb      	ldrb	r3, [r7, #15]
}
 8024296:	4618      	mov	r0, r3
 8024298:	3710      	adds	r7, #16
 802429a:	46bd      	mov	sp, r7
 802429c:	bd80      	pop	{r7, pc}
 802429e:	bf00      	nop
 80242a0:	1ffea888 	.word	0x1ffea888

080242a4 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 80242a4:	b580      	push	{r7, lr}
 80242a6:	b084      	sub	sp, #16
 80242a8:	af00      	add	r7, sp, #0
 80242aa:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80242ac:	2300      	movs	r3, #0
 80242ae:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	795b      	ldrb	r3, [r3, #5]
 80242b4:	091b      	lsrs	r3, r3, #4
 80242b6:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	881b      	ldrh	r3, [r3, #0]
 80242bc:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 80242be:	89bb      	ldrh	r3, [r7, #12]
 80242c0:	2b80      	cmp	r3, #128	; 0x80
 80242c2:	d914      	bls.n	80242ee <MBX_MailboxWriteInd+0x4a>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	2204      	movs	r2, #4
 80242c8:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	795b      	ldrb	r3, [r3, #5]
 80242ce:	f023 030f 	bic.w	r3, r3, #15
 80242d2:	b2da      	uxtb	r2, r3
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	715a      	strb	r2, [r3, #5]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	2201      	movs	r2, #1
 80242dc:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	2208      	movs	r2, #8
 80242e2:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 80242e4:	6878      	ldr	r0, [r7, #4]
 80242e6:	2100      	movs	r1, #0
 80242e8:	f000 f8f4 	bl	80244d4 <MBX_MailboxSendReq>
 80242ec:	e02f      	b.n	802434e <MBX_MailboxWriteInd+0xaa>
    else
    /* if the mailbox datagram counter (Bit 4-6 of Byte 5 of the mailbox header) is unequal zero,
       the master supports the mailbox data link layer,
        in that case a repeated mailbox write request will be detected, if the counter is unequal zero
        and unchanged */
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 80242ee:	7bbb      	ldrb	r3, [r7, #14]
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d004      	beq.n	80242fe <MBX_MailboxWriteInd+0x5a>
 80242f4:	4b17      	ldr	r3, [pc, #92]	; (8024354 <MBX_MailboxWriteInd+0xb0>)
 80242f6:	781b      	ldrb	r3, [r3, #0]
 80242f8:	7bba      	ldrb	r2, [r7, #14]
 80242fa:	429a      	cmp	r2, r3
 80242fc:	d022      	beq.n	8024344 <MBX_MailboxWriteInd+0xa0>
    {
        /* new mailbox service received */
        /* mbxCounter = 0: old EtherCAT master */
        /* new MBX service received, store the new mailbox counter */
        u8MbxWriteCounter = mbxCounter;
 80242fe:	4a15      	ldr	r2, [pc, #84]	; (8024354 <MBX_MailboxWriteInd+0xb0>)
 8024300:	7bbb      	ldrb	r3, [r7, #14]
 8024302:	7013      	strb	r3, [r2, #0]

        {
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8024304:	6878      	ldr	r0, [r7, #4]
 8024306:	4914      	ldr	r1, [pc, #80]	; (8024358 <MBX_MailboxWriteInd+0xb4>)
 8024308:	f7ff fda2 	bl	8023e50 <PutInMbxQueue>
 802430c:	4603      	mov	r3, r0
 802430e:	73fb      	strb	r3, [r7, #15]
        }

        if ( result != 0 )
 8024310:	7bfb      	ldrb	r3, [r7, #15]
 8024312:	2b00      	cmp	r3, #0
 8024314:	d015      	beq.n	8024342 <MBX_MailboxWriteInd+0x9e>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8024316:	687b      	ldr	r3, [r7, #4]
 8024318:	2204      	movs	r2, #4
 802431a:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	795b      	ldrb	r3, [r3, #5]
 8024320:	f023 030f 	bic.w	r3, r3, #15
 8024324:	b2da      	uxtb	r2, r3
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	2201      	movs	r2, #1
 802432e:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8024330:	7bfb      	ldrb	r3, [r7, #15]
 8024332:	b29a      	uxth	r2, r3
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8024338:	6878      	ldr	r0, [r7, #4]
 802433a:	2100      	movs	r1, #0
 802433c:	f000 f8ca 	bl	80244d4 <MBX_MailboxSendReq>
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
        }

        if ( result != 0 )
 8024340:	e005      	b.n	802434e <MBX_MailboxWriteInd+0xaa>
 8024342:	e004      	b.n	802434e <MBX_MailboxWriteInd+0xaa>
        }
    }
    else
    {
        // the mailbox buffer has to be freed here
        APPL_FreeMailboxBuffer(pMbx);
 8024344:	6878      	ldr	r0, [r7, #4]
 8024346:	f006 fc4f 	bl	802abe8 <free>
        pMbx = NULL;
 802434a:	2300      	movs	r3, #0
 802434c:	607b      	str	r3, [r7, #4]

    }
}
 802434e:	3710      	adds	r7, #16
 8024350:	46bd      	mov	sp, r7
 8024352:	bd80      	pop	{r7, pc}
 8024354:	1ffea924 	.word	0x1ffea924
 8024358:	1ffea8d4 	.word	0x1ffea8d4

0802435c <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 802435c:	b580      	push	{r7, lr}
 802435e:	b082      	sub	sp, #8
 8024360:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 8024362:	4b34      	ldr	r3, [pc, #208]	; (8024434 <MBX_MailboxReadInd+0xd8>)
 8024364:	2200      	movs	r2, #0
 8024366:	701a      	strb	r2, [r3, #0]

    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8024368:	4b33      	ldr	r3, [pc, #204]	; (8024438 <MBX_MailboxReadInd+0xdc>)
 802436a:	681b      	ldr	r3, [r3, #0]
 802436c:	2b00      	cmp	r3, #0
 802436e:	d00b      	beq.n	8024388 <MBX_MailboxReadInd+0x2c>
 8024370:	4b32      	ldr	r3, [pc, #200]	; (802443c <MBX_MailboxReadInd+0xe0>)
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	2b00      	cmp	r3, #0
 8024376:	d107      	bne.n	8024388 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8024378:	4b2f      	ldr	r3, [pc, #188]	; (8024438 <MBX_MailboxReadInd+0xdc>)
 802437a:	681b      	ldr	r3, [r3, #0]
 802437c:	4618      	mov	r0, r3
 802437e:	f006 fc33 	bl	802abe8 <free>
        psRepeatMbx = NULL;
 8024382:	4b2d      	ldr	r3, [pc, #180]	; (8024438 <MBX_MailboxReadInd+0xdc>)
 8024384:	2200      	movs	r2, #0
 8024386:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8024388:	4b2d      	ldr	r3, [pc, #180]	; (8024440 <MBX_MailboxReadInd+0xe4>)
 802438a:	681b      	ldr	r3, [r3, #0]
 802438c:	4a2a      	ldr	r2, [pc, #168]	; (8024438 <MBX_MailboxReadInd+0xdc>)
 802438e:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 8024390:	4b2a      	ldr	r3, [pc, #168]	; (802443c <MBX_MailboxReadInd+0xe0>)
 8024392:	681b      	ldr	r3, [r3, #0]
 8024394:	2b00      	cmp	r3, #0
 8024396:	d008      	beq.n	80243aa <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8024398:	4b28      	ldr	r3, [pc, #160]	; (802443c <MBX_MailboxReadInd+0xe0>)
 802439a:	681b      	ldr	r3, [r3, #0]
 802439c:	4618      	mov	r0, r3
 802439e:	f000 f9a7 	bl	80246f0 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 80243a2:	4b26      	ldr	r3, [pc, #152]	; (802443c <MBX_MailboxReadInd+0xe0>)
 80243a4:	2200      	movs	r2, #0
 80243a6:	601a      	str	r2, [r3, #0]
 80243a8:	e009      	b.n	80243be <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80243aa:	4826      	ldr	r0, [pc, #152]	; (8024444 <MBX_MailboxReadInd+0xe8>)
 80243ac:	f7ff fd7a 	bl	8023ea4 <GetOutOfMbxQueue>
 80243b0:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	d002      	beq.n	80243be <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 80243b8:	6878      	ldr	r0, [r7, #4]
 80243ba:	f000 f999 	bl	80246f0 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 80243be:	4b22      	ldr	r3, [pc, #136]	; (8024448 <MBX_MailboxReadInd+0xec>)
 80243c0:	781b      	ldrb	r3, [r3, #0]
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	d033      	beq.n	802442e <MBX_MailboxReadInd+0xd2>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80243c6:	4b20      	ldr	r3, [pc, #128]	; (8024448 <MBX_MailboxReadInd+0xec>)
 80243c8:	781b      	ldrb	r3, [r3, #0]
 80243ca:	f003 0302 	and.w	r3, r3, #2
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	d01b      	beq.n	802440a <MBX_MailboxReadInd+0xae>
        {
           UINT8 result = 0;
 80243d2:	2300      	movs	r3, #0
 80243d4:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 80243d6:	4b1c      	ldr	r3, [pc, #112]	; (8024448 <MBX_MailboxReadInd+0xec>)
 80243d8:	781b      	ldrb	r3, [r3, #0]
 80243da:	f023 0302 	bic.w	r3, r3, #2
 80243de:	b2da      	uxtb	r2, r3
 80243e0:	4b19      	ldr	r3, [pc, #100]	; (8024448 <MBX_MailboxReadInd+0xec>)
 80243e2:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 80243e4:	4b19      	ldr	r3, [pc, #100]	; (802444c <MBX_MailboxReadInd+0xf0>)
 80243e6:	681b      	ldr	r3, [r3, #0]
 80243e8:	4618      	mov	r0, r3
 80243ea:	f7fd fa45 	bl	8021878 <COE_ContinueInd>
 80243ee:	4603      	mov	r3, r0
 80243f0:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 80243f2:	78fb      	ldrb	r3, [r7, #3]
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	d007      	beq.n	8024408 <MBX_MailboxReadInd+0xac>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 80243f8:	4b13      	ldr	r3, [pc, #76]	; (8024448 <MBX_MailboxReadInd+0xec>)
 80243fa:	781b      	ldrb	r3, [r3, #0]
 80243fc:	f043 0302 	orr.w	r3, r3, #2
 8024400:	b2da      	uxtb	r2, r3
 8024402:	4b11      	ldr	r3, [pc, #68]	; (8024448 <MBX_MailboxReadInd+0xec>)
 8024404:	701a      	strb	r2, [r3, #0]
 8024406:	e012      	b.n	802442e <MBX_MailboxReadInd+0xd2>
 8024408:	e011      	b.n	802442e <MBX_MailboxReadInd+0xd2>
            }
        }
        else
        if ( u8MailboxSendReqStored & FOE_SERVICE )
 802440a:	4b0f      	ldr	r3, [pc, #60]	; (8024448 <MBX_MailboxReadInd+0xec>)
 802440c:	781b      	ldrb	r3, [r3, #0]
 802440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024412:	2b00      	cmp	r3, #0
 8024414:	d00b      	beq.n	802442e <MBX_MailboxReadInd+0xd2>
        {
            /* reset the flag indicating that FoE service to be sent was stored */
            u8MailboxSendReqStored &= ~FOE_SERVICE;
 8024416:	4b0c      	ldr	r3, [pc, #48]	; (8024448 <MBX_MailboxReadInd+0xec>)
 8024418:	781b      	ldrb	r3, [r3, #0]
 802441a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802441e:	b2da      	uxtb	r2, r3
 8024420:	4b09      	ldr	r3, [pc, #36]	; (8024448 <MBX_MailboxReadInd+0xec>)
 8024422:	701a      	strb	r2, [r3, #0]
            /* call FoE function that will send the stored FoE service */
            FOE_ContinueInd(psWriteMbx);
 8024424:	4b09      	ldr	r3, [pc, #36]	; (802444c <MBX_MailboxReadInd+0xf0>)
 8024426:	681b      	ldr	r3, [r3, #0]
 8024428:	4618      	mov	r0, r3
 802442a:	f7fd fcad 	bl	8021d88 <FOE_ContinueInd>
        }
        else
        {
        }
    }
}
 802442e:	3708      	adds	r7, #8
 8024430:	46bd      	mov	sp, r7
 8024432:	bd80      	pop	{r7, pc}
 8024434:	1ffea909 	.word	0x1ffea909
 8024438:	1ffea92c 	.word	0x1ffea92c
 802443c:	1ffea910 	.word	0x1ffea910
 8024440:	1ffea918 	.word	0x1ffea918
 8024444:	1ffea8a0 	.word	0x1ffea8a0
 8024448:	1ffea925 	.word	0x1ffea925
 802444c:	1ffea920 	.word	0x1ffea920

08024450 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8024450:	b580      	push	{r7, lr}
 8024452:	b082      	sub	sp, #8
 8024454:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 8024456:	4b1a      	ldr	r3, [pc, #104]	; (80244c0 <MBX_MailboxRepeatReq+0x70>)
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	2b00      	cmp	r3, #0
 802445c:	d01d      	beq.n	802449a <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 802445e:	4b18      	ldr	r3, [pc, #96]	; (80244c0 <MBX_MailboxRepeatReq+0x70>)
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 8024464:	4b17      	ldr	r3, [pc, #92]	; (80244c4 <MBX_MailboxRepeatReq+0x74>)
 8024466:	781b      	ldrb	r3, [r3, #0]
 8024468:	2b00      	cmp	r3, #0
 802446a:	d010      	beq.n	802448e <MBX_MailboxRepeatReq+0x3e>
 802446c:	4b16      	ldr	r3, [pc, #88]	; (80244c8 <MBX_MailboxRepeatReq+0x78>)
 802446e:	681b      	ldr	r3, [r3, #0]
 8024470:	2b00      	cmp	r3, #0
 8024472:	d10c      	bne.n	802448e <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
            DisableSyncManChannel(MAILBOX_READ);
 8024474:	2001      	movs	r0, #1
 8024476:	f7fd fd33 	bl	8021ee0 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 802447a:	4b14      	ldr	r3, [pc, #80]	; (80244cc <MBX_MailboxRepeatReq+0x7c>)
 802447c:	681b      	ldr	r3, [r3, #0]
 802447e:	4a12      	ldr	r2, [pc, #72]	; (80244c8 <MBX_MailboxRepeatReq+0x78>)
 8024480:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 8024482:	2001      	movs	r0, #1
 8024484:	f7fd fd56 	bl	8021f34 <EnableSyncManChannel>

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8024488:	4b0e      	ldr	r3, [pc, #56]	; (80244c4 <MBX_MailboxRepeatReq+0x74>)
 802448a:	2200      	movs	r2, #0
 802448c:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 802448e:	6878      	ldr	r0, [r7, #4]
 8024490:	f000 f92e 	bl	80246f0 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 8024494:	4b0a      	ldr	r3, [pc, #40]	; (80244c0 <MBX_MailboxRepeatReq+0x70>)
 8024496:	2200      	movs	r2, #0
 8024498:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 802449a:	4b0d      	ldr	r3, [pc, #52]	; (80244d0 <MBX_MailboxRepeatReq+0x80>)
 802449c:	781b      	ldrb	r3, [r3, #0]
 802449e:	2b00      	cmp	r3, #0
 80244a0:	bf14      	ite	ne
 80244a2:	2301      	movne	r3, #1
 80244a4:	2300      	moveq	r3, #0
 80244a6:	b2db      	uxtb	r3, r3
 80244a8:	f083 0301 	eor.w	r3, r3, #1
 80244ac:	b2db      	uxtb	r3, r3
 80244ae:	f003 0301 	and.w	r3, r3, #1
 80244b2:	b2da      	uxtb	r2, r3
 80244b4:	4b06      	ldr	r3, [pc, #24]	; (80244d0 <MBX_MailboxRepeatReq+0x80>)
 80244b6:	701a      	strb	r2, [r3, #0]
}
 80244b8:	3708      	adds	r7, #8
 80244ba:	46bd      	mov	sp, r7
 80244bc:	bd80      	pop	{r7, pc}
 80244be:	bf00      	nop
 80244c0:	1ffea92c 	.word	0x1ffea92c
 80244c4:	1ffea909 	.word	0x1ffea909
 80244c8:	1ffea910 	.word	0x1ffea910
 80244cc:	1ffea918 	.word	0x1ffea918
 80244d0:	1ffea928 	.word	0x1ffea928

080244d4 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 80244d4:	b580      	push	{r7, lr}
 80244d6:	b084      	sub	sp, #16
 80244d8:	af00      	add	r7, sp, #0
 80244da:	6078      	str	r0, [r7, #4]
 80244dc:	460b      	mov	r3, r1
 80244de:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 80244e0:	2300      	movs	r3, #0
 80244e2:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 80244e4:	4b2c      	ldr	r3, [pc, #176]	; (8024598 <MBX_MailboxSendReq+0xc4>)
 80244e6:	781b      	ldrb	r3, [r3, #0]
 80244e8:	f003 030f 	and.w	r3, r3, #15
 80244ec:	2b01      	cmp	r3, #1
 80244ee:	d101      	bne.n	80244f4 <MBX_MailboxSendReq+0x20>
    {
        return ERROR_INVALIDSTATE;
 80244f0:	23f0      	movs	r3, #240	; 0xf0
 80244f2:	e04d      	b.n	8024590 <MBX_MailboxSendReq+0xbc>

    ENTER_MBX_CRITICAL;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 80244f4:	687b      	ldr	r3, [r7, #4]
 80244f6:	795b      	ldrb	r3, [r3, #5]
 80244f8:	f003 030f 	and.w	r3, r3, #15
 80244fc:	b2da      	uxtb	r2, r3
 80244fe:	687b      	ldr	r3, [r7, #4]
 8024500:	715a      	strb	r2, [r3, #5]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 8024502:	4b26      	ldr	r3, [pc, #152]	; (802459c <MBX_MailboxSendReq+0xc8>)
 8024504:	781b      	ldrb	r3, [r3, #0]
 8024506:	f003 0307 	and.w	r3, r3, #7
 802450a:	2b00      	cmp	r3, #0
 802450c:	d102      	bne.n	8024514 <MBX_MailboxSendReq+0x40>
    {
        u8MbxReadCounter = 1;
 802450e:	4b23      	ldr	r3, [pc, #140]	; (802459c <MBX_MailboxSendReq+0xc8>)
 8024510:	2201      	movs	r2, #1
 8024512:	701a      	strb	r2, [r3, #0]
    }

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	795b      	ldrb	r3, [r3, #5]
 8024518:	b2da      	uxtb	r2, r3
 802451a:	4b20      	ldr	r3, [pc, #128]	; (802459c <MBX_MailboxSendReq+0xc8>)
 802451c:	781b      	ldrb	r3, [r3, #0]
 802451e:	011b      	lsls	r3, r3, #4
 8024520:	b2db      	uxtb	r3, r3
 8024522:	4313      	orrs	r3, r2
 8024524:	b2db      	uxtb	r3, r3
 8024526:	b2da      	uxtb	r2, r3
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	715a      	strb	r2, [r3, #5]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 802452c:	6878      	ldr	r0, [r7, #4]
 802452e:	f000 f8df 	bl	80246f0 <MBX_CopyToSendMailbox>
 8024532:	4603      	mov	r3, r0
 8024534:	2b00      	cmp	r3, #0
 8024536:	d014      	beq.n	8024562 <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8024538:	6878      	ldr	r0, [r7, #4]
 802453a:	4919      	ldr	r1, [pc, #100]	; (80245a0 <MBX_MailboxSendReq+0xcc>)
 802453c:	f7ff fc88 	bl	8023e50 <PutInMbxQueue>
 8024540:	4603      	mov	r3, r0
 8024542:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8024544:	7bfb      	ldrb	r3, [r7, #15]
 8024546:	2b00      	cmp	r3, #0
 8024548:	d004      	beq.n	8024554 <MBX_MailboxSendReq+0x80>
        {
            flags |= FRAGMENTS_FOLLOW;
 802454a:	78fb      	ldrb	r3, [r7, #3]
 802454c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8024550:	70fb      	strb	r3, [r7, #3]
 8024552:	e00c      	b.n	802456e <MBX_MailboxSendReq+0x9a>
        }
        else
        {
            u8MbxReadCounter++;
 8024554:	4b11      	ldr	r3, [pc, #68]	; (802459c <MBX_MailboxSendReq+0xc8>)
 8024556:	781b      	ldrb	r3, [r3, #0]
 8024558:	3301      	adds	r3, #1
 802455a:	b2da      	uxtb	r2, r3
 802455c:	4b0f      	ldr	r3, [pc, #60]	; (802459c <MBX_MailboxSendReq+0xc8>)
 802455e:	701a      	strb	r2, [r3, #0]
 8024560:	e005      	b.n	802456e <MBX_MailboxSendReq+0x9a>
        }
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8024562:	4b0e      	ldr	r3, [pc, #56]	; (802459c <MBX_MailboxSendReq+0xc8>)
 8024564:	781b      	ldrb	r3, [r3, #0]
 8024566:	3301      	adds	r3, #1
 8024568:	b2da      	uxtb	r2, r3
 802456a:	4b0c      	ldr	r3, [pc, #48]	; (802459c <MBX_MailboxSendReq+0xc8>)
 802456c:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 802456e:	78fb      	ldrb	r3, [r7, #3]
 8024570:	b25b      	sxtb	r3, r3
 8024572:	2b00      	cmp	r3, #0
 8024574:	da0b      	bge.n	802458e <MBX_MailboxSendReq+0xba>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8024576:	78fb      	ldrb	r3, [r7, #3]
 8024578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802457c:	b2da      	uxtb	r2, r3
 802457e:	4b09      	ldr	r3, [pc, #36]	; (80245a4 <MBX_MailboxSendReq+0xd0>)
 8024580:	781b      	ldrb	r3, [r3, #0]
 8024582:	b2db      	uxtb	r3, r3
 8024584:	4313      	orrs	r3, r2
 8024586:	b2db      	uxtb	r3, r3
 8024588:	b2da      	uxtb	r2, r3
 802458a:	4b06      	ldr	r3, [pc, #24]	; (80245a4 <MBX_MailboxSendReq+0xd0>)
 802458c:	701a      	strb	r2, [r3, #0]
    }

    LEAVE_MBX_CRITICAL;

    return result;
 802458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024590:	4618      	mov	r0, r3
 8024592:	3710      	adds	r7, #16
 8024594:	46bd      	mov	sp, r7
 8024596:	bd80      	pop	{r7, pc}
 8024598:	1ffea851 	.word	0x1ffea851
 802459c:	1ffea89c 	.word	0x1ffea89c
 80245a0:	1ffea8a0 	.word	0x1ffea8a0
 80245a4:	1ffea925 	.word	0x1ffea925

080245a8 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 80245a8:	b580      	push	{r7, lr}
 80245aa:	b084      	sub	sp, #16
 80245ac:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 80245ae:	4b46      	ldr	r3, [pc, #280]	; (80246c8 <MBX_CheckAndCopyMailbox+0x120>)
 80245b0:	881b      	ldrh	r3, [r3, #0]
 80245b2:	085b      	lsrs	r3, r3, #1
 80245b4:	b29b      	uxth	r3, r3
 80245b6:	005b      	lsls	r3, r3, #1
 80245b8:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80245bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80245c0:	881b      	ldrh	r3, [r3, #0]
 80245c2:	81fb      	strh	r3, [r7, #14]
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);

    if(bNoMbxMemoryAvailable == TRUE)
 80245c4:	4b41      	ldr	r3, [pc, #260]	; (80246cc <MBX_CheckAndCopyMailbox+0x124>)
 80245c6:	781b      	ldrb	r3, [r3, #0]
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	d023      	beq.n	8024614 <MBX_CheckAndCopyMailbox+0x6c>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 80245cc:	200a      	movs	r0, #10
 80245ce:	f006 fb03 	bl	802abd8 <malloc>
 80245d2:	4603      	mov	r3, r0
 80245d4:	60bb      	str	r3, [r7, #8]

        if(pMbx != NULL)
 80245d6:	68bb      	ldr	r3, [r7, #8]
 80245d8:	2b00      	cmp	r3, #0
 80245da:	d01b      	beq.n	8024614 <MBX_CheckAndCopyMailbox+0x6c>
        {
            HMEMSET(pMbx,0x00,10);
 80245dc:	68b8      	ldr	r0, [r7, #8]
 80245de:	2100      	movs	r1, #0
 80245e0:	220a      	movs	r2, #10
 80245e2:	f006 fb24 	bl	802ac2e <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80245e6:	68bb      	ldr	r3, [r7, #8]
 80245e8:	2204      	movs	r2, #4
 80245ea:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80245ec:	68bb      	ldr	r3, [r7, #8]
 80245ee:	795b      	ldrb	r3, [r3, #5]
 80245f0:	f023 030f 	bic.w	r3, r3, #15
 80245f4:	b2da      	uxtb	r2, r3
 80245f6:	68bb      	ldr	r3, [r7, #8]
 80245f8:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80245fa:	68bb      	ldr	r3, [r7, #8]
 80245fc:	2201      	movs	r2, #1
 80245fe:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 8024600:	68bb      	ldr	r3, [r7, #8]
 8024602:	2207      	movs	r2, #7
 8024604:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8024606:	68b8      	ldr	r0, [r7, #8]
 8024608:	2100      	movs	r1, #0
 802460a:	f7ff ff63 	bl	80244d4 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 802460e:	68b8      	ldr	r0, [r7, #8]
 8024610:	f006 faea 	bl	802abe8 <free>
        }
    }
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 8024614:	89fb      	ldrh	r3, [r7, #14]
 8024616:	3306      	adds	r3, #6
 8024618:	81fb      	strh	r3, [r7, #14]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 802461a:	4b2d      	ldr	r3, [pc, #180]	; (80246d0 <MBX_CheckAndCopyMailbox+0x128>)
 802461c:	781b      	ldrb	r3, [r3, #0]
 802461e:	2b00      	cmp	r3, #0
 8024620:	d103      	bne.n	802462a <MBX_CheckAndCopyMailbox+0x82>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 8024622:	4b2c      	ldr	r3, [pc, #176]	; (80246d4 <MBX_CheckAndCopyMailbox+0x12c>)
 8024624:	781b      	ldrb	r3, [r3, #0]
 8024626:	2b00      	cmp	r3, #0
 8024628:	d003      	beq.n	8024632 <MBX_CheckAndCopyMailbox+0x8a>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 802462a:	4b2b      	ldr	r3, [pc, #172]	; (80246d8 <MBX_CheckAndCopyMailbox+0x130>)
 802462c:	2201      	movs	r2, #1
 802462e:	701a      	strb	r2, [r3, #0]
 8024630:	e046      	b.n	80246c0 <MBX_CheckAndCopyMailbox+0x118>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 8024632:	4b29      	ldr	r3, [pc, #164]	; (80246d8 <MBX_CheckAndCopyMailbox+0x130>)
 8024634:	2200      	movs	r2, #0
 8024636:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 8024638:	4b28      	ldr	r3, [pc, #160]	; (80246dc <MBX_CheckAndCopyMailbox+0x134>)
 802463a:	881b      	ldrh	r3, [r3, #0]
 802463c:	89fa      	ldrh	r2, [r7, #14]
 802463e:	429a      	cmp	r2, r3
 8024640:	d902      	bls.n	8024648 <MBX_CheckAndCopyMailbox+0xa0>
        {
            mbxLen = u16ReceiveMbxSize;
 8024642:	4b26      	ldr	r3, [pc, #152]	; (80246dc <MBX_CheckAndCopyMailbox+0x134>)
 8024644:	881b      	ldrh	r3, [r3, #0]
 8024646:	81fb      	strh	r3, [r7, #14]
        }

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8024648:	4b24      	ldr	r3, [pc, #144]	; (80246dc <MBX_CheckAndCopyMailbox+0x134>)
 802464a:	881b      	ldrh	r3, [r3, #0]
 802464c:	4618      	mov	r0, r3
 802464e:	f006 fac3 	bl	802abd8 <malloc>
 8024652:	4603      	mov	r3, r0
 8024654:	461a      	mov	r2, r3
 8024656:	4b22      	ldr	r3, [pc, #136]	; (80246e0 <MBX_CheckAndCopyMailbox+0x138>)
 8024658:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 802465a:	4b21      	ldr	r3, [pc, #132]	; (80246e0 <MBX_CheckAndCopyMailbox+0x138>)
 802465c:	681b      	ldr	r3, [r3, #0]
 802465e:	2b00      	cmp	r3, #0
 8024660:	d103      	bne.n	802466a <MBX_CheckAndCopyMailbox+0xc2>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 8024662:	4b1d      	ldr	r3, [pc, #116]	; (80246d8 <MBX_CheckAndCopyMailbox+0x130>)
 8024664:	2201      	movs	r2, #1
 8024666:	701a      	strb	r2, [r3, #0]
            return;
 8024668:	e02a      	b.n	80246c0 <MBX_CheckAndCopyMailbox+0x118>
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 802466a:	4b1d      	ldr	r3, [pc, #116]	; (80246e0 <MBX_CheckAndCopyMailbox+0x138>)
 802466c:	6819      	ldr	r1, [r3, #0]
 802466e:	4b16      	ldr	r3, [pc, #88]	; (80246c8 <MBX_CheckAndCopyMailbox+0x120>)
 8024670:	881a      	ldrh	r2, [r3, #0]
 8024672:	89fb      	ldrh	r3, [r7, #14]
 8024674:	4608      	mov	r0, r1
 8024676:	4611      	mov	r1, r2
 8024678:	461a      	mov	r2, r3
 802467a:	f7ff fbaf 	bl	8023ddc <HW_EscReadMbxMem>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT8 smstate = 0x00;
 802467e:	2300      	movs	r3, #0
 8024680:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 8024682:	4b18      	ldr	r3, [pc, #96]	; (80246e4 <MBX_CheckAndCopyMailbox+0x13c>)
 8024684:	781b      	ldrb	r3, [r3, #0]
 8024686:	b2db      	uxtb	r3, r3
 8024688:	71fb      	strb	r3, [r7, #7]

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 802468a:	79fb      	ldrb	r3, [r7, #7]
 802468c:	b2db      	uxtb	r3, r3
 802468e:	f003 0308 	and.w	r3, r3, #8
 8024692:	2b00      	cmp	r3, #0
 8024694:	d00f      	beq.n	80246b6 <MBX_CheckAndCopyMailbox+0x10e>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u8dummy = 0;
 8024696:	4b14      	ldr	r3, [pc, #80]	; (80246e8 <MBX_CheckAndCopyMailbox+0x140>)
 8024698:	2200      	movs	r2, #0
 802469a:	701a      	strb	r2, [r3, #0]
            HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 802469c:	4b0a      	ldr	r3, [pc, #40]	; (80246c8 <MBX_CheckAndCopyMailbox+0x120>)
 802469e:	881b      	ldrh	r3, [r3, #0]
 80246a0:	461a      	mov	r2, r3
 80246a2:	4b0e      	ldr	r3, [pc, #56]	; (80246dc <MBX_CheckAndCopyMailbox+0x134>)
 80246a4:	881b      	ldrh	r3, [r3, #0]
 80246a6:	4413      	add	r3, r2
 80246a8:	461a      	mov	r2, r3
 80246aa:	4b10      	ldr	r3, [pc, #64]	; (80246ec <MBX_CheckAndCopyMailbox+0x144>)
 80246ac:	4413      	add	r3, r2
 80246ae:	781b      	ldrb	r3, [r3, #0]
 80246b0:	b2da      	uxtb	r2, r3
 80246b2:	4b0d      	ldr	r3, [pc, #52]	; (80246e8 <MBX_CheckAndCopyMailbox+0x140>)
 80246b4:	701a      	strb	r2, [r3, #0]
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 80246b6:	4b0a      	ldr	r3, [pc, #40]	; (80246e0 <MBX_CheckAndCopyMailbox+0x138>)
 80246b8:	681b      	ldr	r3, [r3, #0]
 80246ba:	4618      	mov	r0, r3
 80246bc:	f7ff fdf2 	bl	80242a4 <MBX_MailboxWriteInd>

    }
}
 80246c0:	3710      	adds	r7, #16
 80246c2:	46bd      	mov	sp, r7
 80246c4:	bd80      	pop	{r7, pc}
 80246c6:	bf00      	nop
 80246c8:	1ffea90c 	.word	0x1ffea90c
 80246cc:	1ffea908 	.word	0x1ffea908
 80246d0:	1ffea909 	.word	0x1ffea909
 80246d4:	1ffea925 	.word	0x1ffea925
 80246d8:	1ffea91c 	.word	0x1ffea91c
 80246dc:	1ffea926 	.word	0x1ffea926
 80246e0:	1ffea920 	.word	0x1ffea920
 80246e4:	54010805 	.word	0x54010805
 80246e8:	1ffea868 	.word	0x1ffea868
 80246ec:	5400ffff 	.word	0x5400ffff

080246f0 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 80246f0:	b580      	push	{r7, lr}
 80246f2:	b084      	sub	sp, #16
 80246f4:	af00      	add	r7, sp, #0
 80246f6:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 80246f8:	4b28      	ldr	r3, [pc, #160]	; (802479c <MBX_CopyToSendMailbox+0xac>)
 80246fa:	781b      	ldrb	r3, [r3, #0]
 80246fc:	f003 030f 	and.w	r3, r3, #15
 8024700:	2b01      	cmp	r3, #1
 8024702:	d101      	bne.n	8024708 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8024704:	23f0      	movs	r3, #240	; 0xf0
 8024706:	e045      	b.n	8024794 <MBX_CopyToSendMailbox+0xa4>
    }


    if ( !bMbxRunning )
 8024708:	4b25      	ldr	r3, [pc, #148]	; (80247a0 <MBX_CopyToSendMailbox+0xb0>)
 802470a:	781b      	ldrb	r3, [r3, #0]
 802470c:	f083 0301 	eor.w	r3, r3, #1
 8024710:	b2db      	uxtb	r3, r3
 8024712:	2b00      	cmp	r3, #0
 8024714:	d001      	beq.n	802471a <MBX_CopyToSendMailbox+0x2a>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8024716:	23f0      	movs	r3, #240	; 0xf0
 8024718:	e03c      	b.n	8024794 <MBX_CopyToSendMailbox+0xa4>
    }

    if ( bSendMbxIsFull )
 802471a:	4b22      	ldr	r3, [pc, #136]	; (80247a4 <MBX_CopyToSendMailbox+0xb4>)
 802471c:	781b      	ldrb	r3, [r3, #0]
 802471e:	2b00      	cmp	r3, #0
 8024720:	d001      	beq.n	8024726 <MBX_CopyToSendMailbox+0x36>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 8024722:	2307      	movs	r3, #7
 8024724:	e036      	b.n	8024794 <MBX_CopyToSendMailbox+0xa4>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	881b      	ldrh	r3, [r3, #0]
 802472a:	81fb      	strh	r3, [r7, #14]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 802472c:	4b1e      	ldr	r3, [pc, #120]	; (80247a8 <MBX_CopyToSendMailbox+0xb8>)
 802472e:	881a      	ldrh	r2, [r3, #0]
 8024730:	89fb      	ldrh	r3, [r7, #14]
 8024732:	3306      	adds	r3, #6
 8024734:	b29b      	uxth	r3, r3
 8024736:	6878      	ldr	r0, [r7, #4]
 8024738:	4611      	mov	r1, r2
 802473a:	461a      	mov	r2, r3
 802473c:	f7ff fb76 	bl	8023e2c <HW_EscWriteMbxMem>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT8 smstate = 0x00;
 8024740:	2300      	movs	r3, #0
 8024742:	737b      	strb	r3, [r7, #13]
        HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 8024744:	4b19      	ldr	r3, [pc, #100]	; (80247ac <MBX_CopyToSendMailbox+0xbc>)
 8024746:	781b      	ldrb	r3, [r3, #0]
 8024748:	b2db      	uxtb	r3, r3
 802474a:	737b      	strb	r3, [r7, #13]

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 802474c:	7b7b      	ldrb	r3, [r7, #13]
 802474e:	b2db      	uxtb	r3, r3
 8024750:	f003 0308 	and.w	r3, r3, #8
 8024754:	2b00      	cmp	r3, #0
 8024756:	d10f      	bne.n	8024778 <MBX_CopyToSendMailbox+0x88>
        {

            /*Write last Byte to trigger mailbox full flag*/
            u8dummy = 0;
 8024758:	4b15      	ldr	r3, [pc, #84]	; (80247b0 <MBX_CopyToSendMailbox+0xc0>)
 802475a:	2200      	movs	r2, #0
 802475c:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,(u16EscAddrSendMbx + u16SendMbxSize - 1));
 802475e:	4b12      	ldr	r3, [pc, #72]	; (80247a8 <MBX_CopyToSendMailbox+0xb8>)
 8024760:	881b      	ldrh	r3, [r3, #0]
 8024762:	461a      	mov	r2, r3
 8024764:	4b13      	ldr	r3, [pc, #76]	; (80247b4 <MBX_CopyToSendMailbox+0xc4>)
 8024766:	881b      	ldrh	r3, [r3, #0]
 8024768:	4413      	add	r3, r2
 802476a:	461a      	mov	r2, r3
 802476c:	4b12      	ldr	r3, [pc, #72]	; (80247b8 <MBX_CopyToSendMailbox+0xc8>)
 802476e:	4413      	add	r3, r2
 8024770:	4a0f      	ldr	r2, [pc, #60]	; (80247b0 <MBX_CopyToSendMailbox+0xc0>)
 8024772:	7812      	ldrb	r2, [r2, #0]
 8024774:	b2d2      	uxtb	r2, r2
 8024776:	701a      	strb	r2, [r3, #0]
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 8024778:	4b10      	ldr	r3, [pc, #64]	; (80247bc <MBX_CopyToSendMailbox+0xcc>)
 802477a:	681b      	ldr	r3, [r3, #0]
 802477c:	2b00      	cmp	r3, #0
 802477e:	d002      	beq.n	8024786 <MBX_CopyToSendMailbox+0x96>
        {
            psWriteMbx = NULL;
 8024780:	4b0f      	ldr	r3, [pc, #60]	; (80247c0 <MBX_CopyToSendMailbox+0xd0>)
 8024782:	2200      	movs	r2, #0
 8024784:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 8024786:	4a0d      	ldr	r2, [pc, #52]	; (80247bc <MBX_CopyToSendMailbox+0xcc>)
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 802478c:	4b05      	ldr	r3, [pc, #20]	; (80247a4 <MBX_CopyToSendMailbox+0xb4>)
 802478e:	2201      	movs	r2, #1
 8024790:	701a      	strb	r2, [r3, #0]


        return 0;
 8024792:	2300      	movs	r3, #0
    }
}
 8024794:	4618      	mov	r0, r3
 8024796:	3710      	adds	r7, #16
 8024798:	46bd      	mov	sp, r7
 802479a:	bd80      	pop	{r7, pc}
 802479c:	1ffea851 	.word	0x1ffea851
 80247a0:	1ffea90a 	.word	0x1ffea90a
 80247a4:	1ffea909 	.word	0x1ffea909
 80247a8:	1ffea91e 	.word	0x1ffea91e
 80247ac:	5401080d 	.word	0x5401080d
 80247b0:	1ffea868 	.word	0x1ffea868
 80247b4:	1ffea914 	.word	0x1ffea914
 80247b8:	5400ffff 	.word	0x5400ffff
 80247bc:	1ffea918 	.word	0x1ffea918
 80247c0:	1ffea920 	.word	0x1ffea920

080247c4 <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b082      	sub	sp, #8
 80247c8:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 80247ca:	2300      	movs	r3, #0
 80247cc:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 80247ce:	2300      	movs	r3, #0
 80247d0:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80247d2:	4818      	ldr	r0, [pc, #96]	; (8024834 <MBX_Main+0x70>)
 80247d4:	f7ff fb66 	bl	8023ea4 <GetOutOfMbxQueue>
 80247d8:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 80247da:	683b      	ldr	r3, [r7, #0]
 80247dc:	2b00      	cmp	r3, #0
 80247de:	d004      	beq.n	80247ea <MBX_Main+0x26>
        {
            result = MailboxServiceInd(pMbx);
 80247e0:	6838      	ldr	r0, [r7, #0]
 80247e2:	f7ff fd2f 	bl	8024244 <MailboxServiceInd>
 80247e6:	4603      	mov	r3, r0
 80247e8:	71fb      	strb	r3, [r7, #7]
        }

        if ( result != 0 )
 80247ea:	79fb      	ldrb	r3, [r7, #7]
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	d014      	beq.n	802481a <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80247f0:	683b      	ldr	r3, [r7, #0]
 80247f2:	2204      	movs	r2, #4
 80247f4:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80247f6:	683b      	ldr	r3, [r7, #0]
 80247f8:	795b      	ldrb	r3, [r3, #5]
 80247fa:	f023 030f 	bic.w	r3, r3, #15
 80247fe:	b2da      	uxtb	r2, r3
 8024800:	683b      	ldr	r3, [r7, #0]
 8024802:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8024804:	683b      	ldr	r3, [r7, #0]
 8024806:	2201      	movs	r2, #1
 8024808:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 802480a:	79fb      	ldrb	r3, [r7, #7]
 802480c:	b29a      	uxth	r2, r3
 802480e:	683b      	ldr	r3, [r7, #0]
 8024810:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8024812:	6838      	ldr	r0, [r7, #0]
 8024814:	2100      	movs	r1, #0
 8024816:	f7ff fe5d 	bl	80244d4 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 802481a:	683b      	ldr	r3, [r7, #0]
 802481c:	2b00      	cmp	r3, #0
 802481e:	d1d6      	bne.n	80247ce <MBX_Main+0xa>


      if ( bReceiveMbxIsLocked )
 8024820:	4b05      	ldr	r3, [pc, #20]	; (8024838 <MBX_Main+0x74>)
 8024822:	781b      	ldrb	r3, [r3, #0]
 8024824:	2b00      	cmp	r3, #0
 8024826:	d001      	beq.n	802482c <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 8024828:	f7ff febe 	bl	80245a8 <MBX_CheckAndCopyMailbox>
      }
}
 802482c:	3708      	adds	r7, #8
 802482e:	46bd      	mov	sp, r7
 8024830:	bd80      	pop	{r7, pc}
 8024832:	bf00      	nop
 8024834:	1ffea8d4 	.word	0x1ffea8d4
 8024838:	1ffea91c 	.word	0x1ffea91c

0802483c <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 802483c:	b580      	push	{r7, lr}
 802483e:	b084      	sub	sp, #16
 8024840:	af00      	add	r7, sp, #0
 8024842:	4603      	mov	r3, r0
 8024844:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8024846:	f7fb ff65 	bl	8020714 <COE_GetObjectDictionary>
 802484a:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 802484c:	e009      	b.n	8024862 <OBJ_GetObjectHandle+0x26>
    {
        
        if (pObjEntry->Index == index)
 802484e:	68fb      	ldr	r3, [r7, #12]
 8024850:	891b      	ldrh	r3, [r3, #8]
 8024852:	88fa      	ldrh	r2, [r7, #6]
 8024854:	429a      	cmp	r2, r3
 8024856:	d101      	bne.n	802485c <OBJ_GetObjectHandle+0x20>
        {
            return pObjEntry;
 8024858:	68fb      	ldr	r3, [r7, #12]
 802485a:	e006      	b.n	802486a <OBJ_GetObjectHandle+0x2e>
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 802485c:	68fb      	ldr	r3, [r7, #12]
 802485e:	685b      	ldr	r3, [r3, #4]
 8024860:	60fb      	str	r3, [r7, #12]

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();

    while (pObjEntry!= NULL)
 8024862:	68fb      	ldr	r3, [r7, #12]
 8024864:	2b00      	cmp	r3, #0
 8024866:	d1f2      	bne.n	802484e <OBJ_GetObjectHandle+0x12>
        {
            return pObjEntry;
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }
    return 0;
 8024868:	2300      	movs	r3, #0
}
 802486a:	4618      	mov	r0, r3
 802486c:	3710      	adds	r7, #16
 802486e:	46bd      	mov	sp, r7
 8024870:	bd80      	pop	{r7, pc}
 8024872:	bf00      	nop

08024874 <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 8024874:	b480      	push	{r7}
 8024876:	b085      	sub	sp, #20
 8024878:	af00      	add	r7, sp, #0
 802487a:	603a      	str	r2, [r7, #0]
 802487c:	461a      	mov	r2, r3
 802487e:	4603      	mov	r3, r0
 8024880:	80fb      	strh	r3, [r7, #6]
 8024882:	460b      	mov	r3, r1
 8024884:	717b      	strb	r3, [r7, #5]
 8024886:	4613      	mov	r3, r2
 8024888:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 802488a:	683b      	ldr	r3, [r7, #0]
 802488c:	899b      	ldrh	r3, [r3, #12]
 802488e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024892:	121b      	asrs	r3, r3, #8
 8024894:	72bb      	strb	r3, [r7, #10]
    
/*ECATCHANGE_START(V5.12) COE6*/
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024896:	683b      	ldr	r3, [r7, #0]
 8024898:	899b      	ldrh	r3, [r3, #12]
 802489a:	727b      	strb	r3, [r7, #9]
/*ECATCHANGE_END(V5.12) COE6*/
    UINT32 size = 0;
 802489c:	2300      	movs	r3, #0
 802489e:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 80248a0:	793b      	ldrb	r3, [r7, #4]
 80248a2:	2b00      	cmp	r3, #0
 80248a4:	d043      	beq.n	802492e <OBJ_GetObjectLength+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 80248a6:	7abb      	ldrb	r3, [r7, #10]
 80248a8:	2b07      	cmp	r3, #7
 80248aa:	d101      	bne.n	80248b0 <OBJ_GetObjectLength+0x3c>
        {
            return 0;
 80248ac:	2300      	movs	r3, #0
 80248ae:	e067      	b.n	8024980 <OBJ_GetObjectLength+0x10c>
        }
        else if ((objCode == OBJCODE_ARR)
 80248b0:	7abb      	ldrb	r3, [r7, #10]
 80248b2:	2b08      	cmp	r3, #8
 80248b4:	d118      	bne.n	80248e8 <OBJ_GetObjectLength+0x74>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80248b6:	683b      	ldr	r3, [r7, #0]
 80248b8:	699b      	ldr	r3, [r3, #24]
 80248ba:	881b      	ldrh	r3, [r3, #0]
 80248bc:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 80248be:	683b      	ldr	r3, [r7, #0]
 80248c0:	691b      	ldr	r3, [r3, #16]
 80248c2:	3306      	adds	r3, #6
 80248c4:	885b      	ldrh	r3, [r3, #2]
 80248c6:	461a      	mov	r2, r3
 80248c8:	7a7b      	ldrb	r3, [r7, #9]
 80248ca:	fb03 f302 	mul.w	r3, r3, r2
 80248ce:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80248d0:	68fb      	ldr	r3, [r7, #12]
 80248d2:	3307      	adds	r3, #7
 80248d4:	08db      	lsrs	r3, r3, #3
 80248d6:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 80248d8:	797b      	ldrb	r3, [r7, #5]
 80248da:	2b00      	cmp	r3, #0
 80248dc:	d102      	bne.n	80248e4 <OBJ_GetObjectLength+0x70>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	3302      	adds	r3, #2
 80248e2:	60fb      	str	r3, [r7, #12]
            }
            return size;
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	e04b      	b.n	8024980 <OBJ_GetObjectLength+0x10c>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 80248e8:	2301      	movs	r3, #1
 80248ea:	72fb      	strb	r3, [r7, #11]
 80248ec:	e00f      	b.n	802490e <OBJ_GetObjectLength+0x9a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 80248ee:	683b      	ldr	r3, [r7, #0]
 80248f0:	6919      	ldr	r1, [r3, #16]
 80248f2:	7afa      	ldrb	r2, [r7, #11]
 80248f4:	4613      	mov	r3, r2
 80248f6:	005b      	lsls	r3, r3, #1
 80248f8:	4413      	add	r3, r2
 80248fa:	005b      	lsls	r3, r3, #1
 80248fc:	440b      	add	r3, r1
 80248fe:	885b      	ldrh	r3, [r3, #2]
 8024900:	461a      	mov	r2, r3
 8024902:	68fb      	ldr	r3, [r7, #12]
 8024904:	4413      	add	r3, r2
 8024906:	60fb      	str	r3, [r7, #12]
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8024908:	7afb      	ldrb	r3, [r7, #11]
 802490a:	3301      	adds	r3, #1
 802490c:	72fb      	strb	r3, [r7, #11]
 802490e:	7afa      	ldrb	r2, [r7, #11]
 8024910:	7a7b      	ldrb	r3, [r7, #9]
 8024912:	429a      	cmp	r2, r3
 8024914:	d9eb      	bls.n	80248ee <OBJ_GetObjectLength+0x7a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	3307      	adds	r3, #7
 802491a:	08db      	lsrs	r3, r3, #3
 802491c:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 802491e:	797b      	ldrb	r3, [r7, #5]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d102      	bne.n	802492a <OBJ_GetObjectLength+0xb6>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8024924:	68fb      	ldr	r3, [r7, #12]
 8024926:	3302      	adds	r3, #2
 8024928:	60fb      	str	r3, [r7, #12]
            }
            return size;
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	e028      	b.n	8024980 <OBJ_GetObjectLength+0x10c>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 802492e:	7abb      	ldrb	r3, [r7, #10]
 8024930:	2b07      	cmp	r3, #7
 8024932:	d105      	bne.n	8024940 <OBJ_GetObjectLength+0xcc>
        {

            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8024934:	683b      	ldr	r3, [r7, #0]
 8024936:	691b      	ldr	r3, [r3, #16]
 8024938:	885b      	ldrh	r3, [r3, #2]
 802493a:	3307      	adds	r3, #7
 802493c:	10db      	asrs	r3, r3, #3
 802493e:	e01f      	b.n	8024980 <OBJ_GetObjectLength+0x10c>

        }
        else if ( subindex == 0 )
 8024940:	797b      	ldrb	r3, [r7, #5]
 8024942:	2b00      	cmp	r3, #0
 8024944:	d101      	bne.n	802494a <OBJ_GetObjectLength+0xd6>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8024946:	2301      	movs	r3, #1
 8024948:	e01a      	b.n	8024980 <OBJ_GetObjectLength+0x10c>
        }
        else if((objCode == OBJCODE_ARR)
 802494a:	7abb      	ldrb	r3, [r7, #10]
 802494c:	2b08      	cmp	r3, #8
 802494e:	d106      	bne.n	802495e <OBJ_GetObjectLength+0xea>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8024950:	683b      	ldr	r3, [r7, #0]
 8024952:	691b      	ldr	r3, [r3, #16]
 8024954:	3306      	adds	r3, #6
 8024956:	885b      	ldrh	r3, [r3, #2]
 8024958:	3307      	adds	r3, #7
 802495a:	10db      	asrs	r3, r3, #3
 802495c:	e010      	b.n	8024980 <OBJ_GetObjectLength+0x10c>
        }
        else
        {
            {
/*ECATCHANGE_START(V5.12) COE6*/
                if (maxSubindex < subindex)
 802495e:	7a7a      	ldrb	r2, [r7, #9]
 8024960:	797b      	ldrb	r3, [r7, #5]
 8024962:	429a      	cmp	r2, r3
 8024964:	d201      	bcs.n	802496a <OBJ_GetObjectLength+0xf6>
                {
                    return 0;
 8024966:	2300      	movs	r3, #0
 8024968:	e00a      	b.n	8024980 <OBJ_GetObjectLength+0x10c>

                }
                else
                {
                    return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 802496a:	683b      	ldr	r3, [r7, #0]
 802496c:	6919      	ldr	r1, [r3, #16]
 802496e:	797a      	ldrb	r2, [r7, #5]
 8024970:	4613      	mov	r3, r2
 8024972:	005b      	lsls	r3, r3, #1
 8024974:	4413      	add	r3, r2
 8024976:	005b      	lsls	r3, r3, #1
 8024978:	440b      	add	r3, r1
 802497a:	885b      	ldrh	r3, [r3, #2]
 802497c:	3307      	adds	r3, #7
 802497e:	10db      	asrs	r3, r3, #3
                }
/*ECATCHANGE_END(V5.12) COE6*/
            }
        }
    }
}
 8024980:	4618      	mov	r0, r3
 8024982:	3714      	adds	r7, #20
 8024984:	46bd      	mov	sp, r7
 8024986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802498a:	4770      	bx	lr

0802498c <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 802498c:	b490      	push	{r4, r7}
 802498e:	b084      	sub	sp, #16
 8024990:	af00      	add	r7, sp, #0
 8024992:	6078      	str	r0, [r7, #4]
 8024994:	460b      	mov	r3, r1
 8024996:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 8024998:	687b      	ldr	r3, [r7, #4]
 802499a:	3302      	adds	r3, #2
 802499c:	2230      	movs	r2, #48	; 0x30
 802499e:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	781a      	ldrb	r2, [r3, #0]
 80249a4:	78fb      	ldrb	r3, [r7, #3]
 80249a6:	491c      	ldr	r1, [pc, #112]	; (8024a18 <OBJ_CopyNumberToString+0x8c>)
 80249a8:	fba1 1303 	umull	r1, r3, r1, r3
 80249ac:	095b      	lsrs	r3, r3, #5
 80249ae:	b2db      	uxtb	r3, r3
 80249b0:	4413      	add	r3, r2
 80249b2:	b2da      	uxtb	r2, r3
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 80249b8:	78fb      	ldrb	r3, [r7, #3]
 80249ba:	4a17      	ldr	r2, [pc, #92]	; (8024a18 <OBJ_CopyNumberToString+0x8c>)
 80249bc:	fba2 1203 	umull	r1, r2, r2, r3
 80249c0:	0952      	lsrs	r2, r2, #5
 80249c2:	2164      	movs	r1, #100	; 0x64
 80249c4:	fb01 f202 	mul.w	r2, r1, r2
 80249c8:	1a9b      	subs	r3, r3, r2
 80249ca:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	3301      	adds	r3, #1
 80249d0:	687a      	ldr	r2, [r7, #4]
 80249d2:	3201      	adds	r2, #1
 80249d4:	7811      	ldrb	r1, [r2, #0]
 80249d6:	7bfa      	ldrb	r2, [r7, #15]
 80249d8:	4810      	ldr	r0, [pc, #64]	; (8024a1c <OBJ_CopyNumberToString+0x90>)
 80249da:	fba0 0202 	umull	r0, r2, r0, r2
 80249de:	08d2      	lsrs	r2, r2, #3
 80249e0:	b2d2      	uxtb	r2, r2
 80249e2:	440a      	add	r2, r1
 80249e4:	b2d2      	uxtb	r2, r2
 80249e6:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	1c98      	adds	r0, r3, #2
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	3302      	adds	r3, #2
 80249f0:	781c      	ldrb	r4, [r3, #0]
 80249f2:	7bfa      	ldrb	r2, [r7, #15]
 80249f4:	4b09      	ldr	r3, [pc, #36]	; (8024a1c <OBJ_CopyNumberToString+0x90>)
 80249f6:	fba3 1302 	umull	r1, r3, r3, r2
 80249fa:	08d9      	lsrs	r1, r3, #3
 80249fc:	460b      	mov	r3, r1
 80249fe:	009b      	lsls	r3, r3, #2
 8024a00:	440b      	add	r3, r1
 8024a02:	005b      	lsls	r3, r3, #1
 8024a04:	1ad3      	subs	r3, r2, r3
 8024a06:	b2db      	uxtb	r3, r3
 8024a08:	4423      	add	r3, r4
 8024a0a:	b2db      	uxtb	r3, r3
 8024a0c:	7003      	strb	r3, [r0, #0]
}
 8024a0e:	3710      	adds	r7, #16
 8024a10:	46bd      	mov	sp, r7
 8024a12:	bc90      	pop	{r4, r7}
 8024a14:	4770      	bx	lr
 8024a16:	bf00      	nop
 8024a18:	51eb851f 	.word	0x51eb851f
 8024a1c:	cccccccd 	.word	0xcccccccd

08024a20 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8024a20:	b580      	push	{r7, lr}
 8024a22:	b086      	sub	sp, #24
 8024a24:	af00      	add	r7, sp, #0
 8024a26:	4603      	mov	r3, r0
 8024a28:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8024a2a:	79fb      	ldrb	r3, [r7, #7]
 8024a2c:	2220      	movs	r2, #32
 8024a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8024a32:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8024a34:	f7fb fe6e 	bl	8020714 <COE_GetObjectDictionary>
 8024a38:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8024a3a:	2300      	movs	r3, #0
 8024a3c:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8024a3e:	e032      	b.n	8024aa6 <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8024a40:	697b      	ldr	r3, [r7, #20]
 8024a42:	891b      	ldrh	r3, [r3, #8]
 8024a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024a48:	d32a      	bcc.n	8024aa0 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8024a4a:	79fb      	ldrb	r3, [r7, #7]
 8024a4c:	747b      	strb	r3, [r7, #17]
            if ( t )
 8024a4e:	7c7b      	ldrb	r3, [r7, #17]
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	d01f      	beq.n	8024a94 <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024a54:	697b      	ldr	r3, [r7, #20]
 8024a56:	899b      	ldrh	r3, [r3, #12]
 8024a58:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8024a5a:	2300      	movs	r3, #0
 8024a5c:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8024a5e:	e011      	b.n	8024a84 <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8024a60:	89fb      	ldrh	r3, [r7, #14]
 8024a62:	b2db      	uxtb	r3, r3
 8024a64:	6978      	ldr	r0, [r7, #20]
 8024a66:	4619      	mov	r1, r3
 8024a68:	f000 f932 	bl	8024cd0 <OBJ_GetEntryDesc>
 8024a6c:	4603      	mov	r3, r0
 8024a6e:	889a      	ldrh	r2, [r3, #4]
 8024a70:	89bb      	ldrh	r3, [r7, #12]
 8024a72:	4013      	ands	r3, r2
 8024a74:	b29b      	uxth	r3, r3
 8024a76:	2b00      	cmp	r3, #0
 8024a78:	d001      	beq.n	8024a7e <OBJ_GetNoOfObjects+0x5e>
                    {
                        t = 0;
 8024a7a:	2300      	movs	r3, #0
 8024a7c:	747b      	strb	r3, [r7, #17]
                    }
                    i++;
 8024a7e:	89fb      	ldrh	r3, [r7, #14]
 8024a80:	3301      	adds	r3, #1
 8024a82:	81fb      	strh	r3, [r7, #14]
            if ( t )
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                UINT16 i = 0;

                while ( t && i <= maxSubindex )
 8024a84:	7c7b      	ldrb	r3, [r7, #17]
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	d004      	beq.n	8024a94 <OBJ_GetNoOfObjects+0x74>
 8024a8a:	7afb      	ldrb	r3, [r7, #11]
 8024a8c:	b29b      	uxth	r3, r3
 8024a8e:	89fa      	ldrh	r2, [r7, #14]
 8024a90:	429a      	cmp	r2, r3
 8024a92:	d9e5      	bls.n	8024a60 <OBJ_GetNoOfObjects+0x40>
                        t = 0;
                    }
                    i++;
                }
            }
            if ( !t )
 8024a94:	7c7b      	ldrb	r3, [r7, #17]
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	d102      	bne.n	8024aa0 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8024a9a:	8a7b      	ldrh	r3, [r7, #18]
 8024a9c:	3301      	adds	r3, #1
 8024a9e:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8024aa0:	697b      	ldr	r3, [r7, #20]
 8024aa2:	685b      	ldr	r3, [r3, #4]
 8024aa4:	617b      	str	r3, [r7, #20]
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
    UINT16 n = 0;


    while (pObjEntry != NULL)
 8024aa6:	697b      	ldr	r3, [r7, #20]
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	d1c9      	bne.n	8024a40 <OBJ_GetNoOfObjects+0x20>
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }

    return n;
 8024aac:	8a7b      	ldrh	r3, [r7, #18]
}
 8024aae:	4618      	mov	r0, r3
 8024ab0:	3718      	adds	r7, #24
 8024ab2:	46bd      	mov	sp, r7
 8024ab4:	bd80      	pop	{r7, pc}
 8024ab6:	bf00      	nop

08024ab8 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 8024ab8:	b580      	push	{r7, lr}
 8024aba:	b088      	sub	sp, #32
 8024abc:	af00      	add	r7, sp, #0
 8024abe:	60b9      	str	r1, [r7, #8]
 8024ac0:	607b      	str	r3, [r7, #4]
 8024ac2:	4603      	mov	r3, r0
 8024ac4:	81fb      	strh	r3, [r7, #14]
 8024ac6:	4613      	mov	r3, r2
 8024ac8:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 8024aca:	89fb      	ldrh	r3, [r7, #14]
 8024acc:	2220      	movs	r2, #32
 8024ace:	fa02 f303 	lsl.w	r3, r2, r3
 8024ad2:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 8024ad4:	68bb      	ldr	r3, [r7, #8]
 8024ad6:	881b      	ldrh	r3, [r3, #0]
 8024ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024adc:	d10c      	bne.n	8024af8 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8024ade:	f7fb fe19 	bl	8020714 <COE_GetObjectDictionary>
 8024ae2:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 8024ae4:	69fb      	ldr	r3, [r7, #28]
 8024ae6:	2b00      	cmp	r3, #0
 8024ae8:	d109      	bne.n	8024afe <OBJ_GetObjectList+0x46>
 8024aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	d006      	beq.n	8024afe <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 8024af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024af2:	221b      	movs	r2, #27
 8024af4:	701a      	strb	r2, [r3, #0]
 8024af6:	e002      	b.n	8024afe <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 8024af8:	4b2c      	ldr	r3, [pc, #176]	; (8024bac <OBJ_GetObjectList+0xf4>)
 8024afa:	681b      	ldr	r3, [r3, #0]
 8024afc:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 8024afe:	69fb      	ldr	r3, [r7, #28]
 8024b00:	2b00      	cmp	r3, #0
 8024b02:	d03e      	beq.n	8024b82 <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 8024b04:	e037      	b.n	8024b76 <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 8024b06:	69fb      	ldr	r3, [r7, #28]
 8024b08:	891b      	ldrh	r3, [r3, #8]
 8024b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024b0e:	d32f      	bcc.n	8024b70 <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 8024b10:	89fb      	ldrh	r3, [r7, #14]
 8024b12:	837b      	strh	r3, [r7, #26]
                if ( t )
 8024b14:	8b7b      	ldrh	r3, [r7, #26]
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d01d      	beq.n	8024b56 <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024b1a:	69fb      	ldr	r3, [r7, #28]
 8024b1c:	899b      	ldrh	r3, [r3, #12]
 8024b1e:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 8024b20:	2300      	movs	r3, #0
 8024b22:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 8024b24:	e010      	b.n	8024b48 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 8024b26:	7e7b      	ldrb	r3, [r7, #25]
 8024b28:	69f8      	ldr	r0, [r7, #28]
 8024b2a:	4619      	mov	r1, r3
 8024b2c:	f000 f8d0 	bl	8024cd0 <OBJ_GetEntryDesc>
 8024b30:	4603      	mov	r3, r0
 8024b32:	889a      	ldrh	r2, [r3, #4]
 8024b34:	8afb      	ldrh	r3, [r7, #22]
 8024b36:	4013      	ands	r3, r2
 8024b38:	b29b      	uxth	r3, r3
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	d001      	beq.n	8024b42 <OBJ_GetObjectList+0x8a>
                        {
                            t = 0;
 8024b3e:	2300      	movs	r3, #0
 8024b40:	837b      	strh	r3, [r7, #26]
                        }
                        i++;
 8024b42:	7e7b      	ldrb	r3, [r7, #25]
 8024b44:	3301      	adds	r3, #1
 8024b46:	767b      	strb	r3, [r7, #25]
                if ( t )
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                    UINT8 i = 0;

                    while ( t && i <= maxSubindex )
 8024b48:	8b7b      	ldrh	r3, [r7, #26]
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d003      	beq.n	8024b56 <OBJ_GetObjectList+0x9e>
 8024b4e:	7e7a      	ldrb	r2, [r7, #25]
 8024b50:	7d7b      	ldrb	r3, [r7, #21]
 8024b52:	429a      	cmp	r2, r3
 8024b54:	d9e7      	bls.n	8024b26 <OBJ_GetObjectList+0x6e>
                            t = 0;
                        }
                        i++;
                    }
                }
                if ( !t )
 8024b56:	8b7b      	ldrh	r3, [r7, #26]
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	d109      	bne.n	8024b70 <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8024b5c:	69fb      	ldr	r3, [r7, #28]
 8024b5e:	891a      	ldrh	r2, [r3, #8]
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	801a      	strh	r2, [r3, #0]
                    pData++;
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	3302      	adds	r3, #2
 8024b68:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8024b6a:	89bb      	ldrh	r3, [r7, #12]
 8024b6c:	3b02      	subs	r3, #2
 8024b6e:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8024b70:	69fb      	ldr	r3, [r7, #28]
 8024b72:	685b      	ldr	r3, [r3, #4]
 8024b74:	61fb      	str	r3, [r7, #28]
        pObjEntry = pSdoInfoObjEntry;
    }

    if ( pObjEntry != NULL )
    {
        while (pObjEntry != NULL && size > 1 )
 8024b76:	69fb      	ldr	r3, [r7, #28]
 8024b78:	2b00      	cmp	r3, #0
 8024b7a:	d002      	beq.n	8024b82 <OBJ_GetObjectList+0xca>
 8024b7c:	89bb      	ldrh	r3, [r7, #12]
 8024b7e:	2b01      	cmp	r3, #1
 8024b80:	d8c1      	bhi.n	8024b06 <OBJ_GetObjectList+0x4e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 8024b82:	69fb      	ldr	r3, [r7, #28]
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	d004      	beq.n	8024b92 <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8024b88:	69fb      	ldr	r3, [r7, #28]
 8024b8a:	891a      	ldrh	r2, [r3, #8]
 8024b8c:	68bb      	ldr	r3, [r7, #8]
 8024b8e:	801a      	strh	r2, [r3, #0]
 8024b90:	e003      	b.n	8024b9a <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 8024b92:	68bb      	ldr	r3, [r7, #8]
 8024b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024b98:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8024b9a:	4a04      	ldr	r2, [pc, #16]	; (8024bac <OBJ_GetObjectList+0xf4>)
 8024b9c:	69fb      	ldr	r3, [r7, #28]
 8024b9e:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 8024ba0:	89bb      	ldrh	r3, [r7, #12]
}
 8024ba2:	4618      	mov	r0, r3
 8024ba4:	3720      	adds	r7, #32
 8024ba6:	46bd      	mov	sp, r7
 8024ba8:	bd80      	pop	{r7, pc}
 8024baa:	bf00      	nop
 8024bac:	1ffea9dc 	.word	0x1ffea9dc

08024bb0 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 8024bb0:	b590      	push	{r4, r7, lr}
 8024bb2:	b08d      	sub	sp, #52	; 0x34
 8024bb4:	af00      	add	r7, sp, #0
 8024bb6:	60ba      	str	r2, [r7, #8]
 8024bb8:	607b      	str	r3, [r7, #4]
 8024bba:	4603      	mov	r3, r0
 8024bbc:	81fb      	strh	r3, [r7, #14]
 8024bbe:	460b      	mov	r3, r1
 8024bc0:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 8024bc2:	2300      	movs	r3, #0
 8024bc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 8024bc6:	68bb      	ldr	r3, [r7, #8]
 8024bc8:	695b      	ldr	r3, [r3, #20]
 8024bca:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024bcc:	68bb      	ldr	r3, [r7, #8]
 8024bce:	899b      	ldrh	r3, [r3, #12]
 8024bd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024bd4:	121b      	asrs	r3, r3, #8
 8024bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23



    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8024bda:	7b7b      	ldrb	r3, [r7, #13]
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d003      	beq.n	8024be8 <OBJ_GetDesc+0x38>
 8024be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024be4:	2b07      	cmp	r3, #7
 8024be6:	d10f      	bne.n	8024c08 <OBJ_GetDesc+0x58>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);
 8024be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024bea:	f006 f8d3 	bl	802ad94 <strlen>
 8024bee:	4603      	mov	r3, r0
 8024bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d006      	beq.n	8024c06 <OBJ_GetDesc+0x56>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 8024bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024bfa:	6878      	ldr	r0, [r7, #4]
 8024bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024bfe:	461a      	mov	r2, r3
 8024c00:	f006 f80a 	bl	802ac18 <memcpy>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);

        // If there is a pointer given, copy data:
        if ( pData )
 8024c04:	e05d      	b.n	8024cc2 <OBJ_GetDesc+0x112>
 8024c06:	e05c      	b.n	8024cc2 <OBJ_GetDesc+0x112>
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 8024c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024c0c:	2b09      	cmp	r3, #9
 8024c0e:	d13a      	bne.n	8024c86 <OBJ_GetDesc+0xd6>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 8024c10:	2301      	movs	r3, #1
 8024c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 8024c14:	7b7b      	ldrb	r3, [r7, #13]
 8024c16:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8024c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024c1a:	f006 f8bb 	bl	802ad94 <strlen>
 8024c1e:	4603      	mov	r3, r0
 8024c20:	3301      	adds	r3, #1
 8024c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024c24:	4413      	add	r3, r2
 8024c26:	62bb      	str	r3, [r7, #40]	; 0x28
/* ECATCHANGE_START(V5.12) COE10*/
            while (( i <= tmpSubindex )
 8024c28:	e021      	b.n	8024c6e <OBJ_GetDesc+0xbe>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE && pSubDesc[0] != 0xFFFF))
/* ECATCHANGE_END(V5.12) COE10*/
            {
                if ( i == tmpSubindex )
 8024c2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8024c2c:	8c3b      	ldrh	r3, [r7, #32]
 8024c2e:	429a      	cmp	r2, r3
 8024c30:	d112      	bne.n	8024c58 <OBJ_GetDesc+0xa8>
                {
                   strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pSubDesc);
 8024c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024c34:	f006 f8ae 	bl	802ad94 <strlen>
 8024c38:	4603      	mov	r3, r0
 8024c3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 8024c3c:	687b      	ldr	r3, [r7, #4]
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	d009      	beq.n	8024c56 <OBJ_GetDesc+0xa6>
 8024c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d006      	beq.n	8024c56 <OBJ_GetDesc+0xa6>
                    {
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8024c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024c4a:	6878      	ldr	r0, [r7, #4]
 8024c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024c4e:	461a      	mov	r2, r3
 8024c50:	f005 ffe2 	bl	802ac18 <memcpy>
                    }
                    break;
 8024c54:	e017      	b.n	8024c86 <OBJ_GetDesc+0xd6>
 8024c56:	e016      	b.n	8024c86 <OBJ_GetDesc+0xd6>
                }
                else
                {
                    i++;
 8024c58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024c5a:	3301      	adds	r3, #1
 8024c5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8024c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024c60:	f006 f898 	bl	802ad94 <strlen>
 8024c64:	4603      	mov	r3, r0
 8024c66:	3301      	adds	r3, #1
 8024c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c6a:	4413      	add	r3, r2
 8024c6c:	62bb      	str	r3, [r7, #40]	; 0x28

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
/* ECATCHANGE_START(V5.12) COE10*/
            while (( i <= tmpSubindex )
 8024c6e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8024c70:	8c3b      	ldrh	r3, [r7, #32]
 8024c72:	429a      	cmp	r2, r3
 8024c74:	d807      	bhi.n	8024c86 <OBJ_GetDesc+0xd6>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE && pSubDesc[0] != 0xFFFF))
 8024c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c78:	781b      	ldrb	r3, [r3, #0]
 8024c7a:	2bff      	cmp	r3, #255	; 0xff
 8024c7c:	d003      	beq.n	8024c86 <OBJ_GetDesc+0xd6>
 8024c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c80:	781b      	ldrb	r3, [r3, #0]
 8024c82:	2bfe      	cmp	r3, #254	; 0xfe
 8024c84:	d1d1      	bne.n	8024c2a <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 8024c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024c88:	2b00      	cmp	r3, #0
 8024c8a:	d11a      	bne.n	8024cc2 <OBJ_GetDesc+0x112>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 8024c8c:	230c      	movs	r3, #12
 8024c8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	d015      	beq.n	8024cc2 <OBJ_GetDesc+0x112>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 8024c96:	4b0d      	ldr	r3, [pc, #52]	; (8024ccc <OBJ_GetDesc+0x11c>)
 8024c98:	f107 0410 	add.w	r4, r7, #16
 8024c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024c9e:	c407      	stmia	r4!, {r0, r1, r2}
 8024ca0:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8024ca2:	f107 0310 	add.w	r3, r7, #16
 8024ca6:	f103 0209 	add.w	r2, r3, #9
 8024caa:	7b7b      	ldrb	r3, [r7, #13]
 8024cac:	4610      	mov	r0, r2
 8024cae:	4619      	mov	r1, r3
 8024cb0:	f7ff fe6c 	bl	802498c <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 8024cb4:	f107 0310 	add.w	r3, r7, #16
 8024cb8:	6878      	ldr	r0, [r7, #4]
 8024cba:	4619      	mov	r1, r3
 8024cbc:	220d      	movs	r2, #13
 8024cbe:	f005 ffab 	bl	802ac18 <memcpy>
            }
        }
    }

    return strSize;
 8024cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	3734      	adds	r7, #52	; 0x34
 8024cc8:	46bd      	mov	sp, r7
 8024cca:	bd90      	pop	{r4, r7, pc}
 8024ccc:	1ffe93f0 	.word	0x1ffe93f0

08024cd0 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8024cd0:	b480      	push	{r7}
 8024cd2:	b085      	sub	sp, #20
 8024cd4:	af00      	add	r7, sp, #0
 8024cd6:	6078      	str	r0, [r7, #4]
 8024cd8:	460b      	mov	r3, r1
 8024cda:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	899b      	ldrh	r3, [r3, #12]
 8024ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024ce4:	121b      	asrs	r3, r3, #8
 8024ce6:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8024ce8:	7afb      	ldrb	r3, [r7, #11]
 8024cea:	2b08      	cmp	r3, #8
 8024cec:	d10b      	bne.n	8024d06 <OBJ_GetEntryDesc+0x36>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 8024cee:	78fb      	ldrb	r3, [r7, #3]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	d103      	bne.n	8024cfc <OBJ_GetEntryDesc+0x2c>
        {
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	691b      	ldr	r3, [r3, #16]
 8024cf8:	60fb      	str	r3, [r7, #12]
 8024cfa:	e00d      	b.n	8024d18 <OBJ_GetEntryDesc+0x48>
        }
        else
        {
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 8024cfc:	687b      	ldr	r3, [r7, #4]
 8024cfe:	691b      	ldr	r3, [r3, #16]
 8024d00:	3306      	adds	r3, #6
 8024d02:	60fb      	str	r3, [r7, #12]
 8024d04:	e008      	b.n	8024d18 <OBJ_GetEntryDesc+0x48>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	6919      	ldr	r1, [r3, #16]
 8024d0a:	78fa      	ldrb	r2, [r7, #3]
 8024d0c:	4613      	mov	r3, r2
 8024d0e:	005b      	lsls	r3, r3, #1
 8024d10:	4413      	add	r3, r2
 8024d12:	005b      	lsls	r3, r3, #1
 8024d14:	440b      	add	r3, r1
 8024d16:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 8024d18:	68fb      	ldr	r3, [r7, #12]
}
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	3714      	adds	r7, #20
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d24:	4770      	bx	lr
 8024d26:	bf00      	nop

08024d28 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8024d28:	b480      	push	{r7}
 8024d2a:	b083      	sub	sp, #12
 8024d2c:	af00      	add	r7, sp, #0
 8024d2e:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	330a      	adds	r3, #10
}
 8024d34:	4618      	mov	r0, r3
 8024d36:	370c      	adds	r7, #12
 8024d38:	46bd      	mov	sp, r7
 8024d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d3e:	4770      	bx	lr

08024d40 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8024d40:	b480      	push	{r7}
 8024d42:	b087      	sub	sp, #28
 8024d44:	af00      	add	r7, sp, #0
 8024d46:	4603      	mov	r3, r0
 8024d48:	6039      	str	r1, [r7, #0]
 8024d4a:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
    UINT16 bitOffset = 0;
 8024d4c:	2300      	movs	r3, #0
 8024d4e:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024d50:	683b      	ldr	r3, [r7, #0]
 8024d52:	899b      	ldrh	r3, [r3, #12]
 8024d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024d58:	121b      	asrs	r3, r3, #8
 8024d5a:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    
    if(subindex > 0)
 8024d5c:	79fb      	ldrb	r3, [r7, #7]
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d002      	beq.n	8024d68 <OBJ_GetEntryOffset+0x28>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8024d62:	8abb      	ldrh	r3, [r7, #20]
 8024d64:	3310      	adds	r3, #16
 8024d66:	82bb      	strh	r3, [r7, #20]
    }

    if (objCode == OBJCODE_VAR)
 8024d68:	7bfb      	ldrb	r3, [r7, #15]
 8024d6a:	2b07      	cmp	r3, #7
 8024d6c:	d101      	bne.n	8024d72 <OBJ_GetEntryOffset+0x32>
    {
        return 0;
 8024d6e:	2300      	movs	r3, #0
 8024d70:	e091      	b.n	8024e96 <OBJ_GetEntryOffset+0x156>
    }

    for (i = 1; i <= subindex; i++)
 8024d72:	2301      	movs	r3, #1
 8024d74:	82fb      	strh	r3, [r7, #22]
 8024d76:	e087      	b.n	8024e88 <OBJ_GetEntryOffset+0x148>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8024d78:	7bfb      	ldrb	r3, [r7, #15]
 8024d7a:	2b08      	cmp	r3, #8
 8024d7c:	d104      	bne.n	8024d88 <OBJ_GetEntryOffset+0x48>
           )
           {
            pEntry = &pObjEntry->pEntryDesc[1];
 8024d7e:	683b      	ldr	r3, [r7, #0]
 8024d80:	691b      	ldr	r3, [r3, #16]
 8024d82:	3306      	adds	r3, #6
 8024d84:	613b      	str	r3, [r7, #16]
 8024d86:	e008      	b.n	8024d9a <OBJ_GetEntryOffset+0x5a>
           }
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8024d88:	683b      	ldr	r3, [r7, #0]
 8024d8a:	6919      	ldr	r1, [r3, #16]
 8024d8c:	8afa      	ldrh	r2, [r7, #22]
 8024d8e:	4613      	mov	r3, r2
 8024d90:	005b      	lsls	r3, r3, #1
 8024d92:	4413      	add	r3, r2
 8024d94:	005b      	lsls	r3, r3, #1
 8024d96:	440b      	add	r3, r1
 8024d98:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8024d9a:	693b      	ldr	r3, [r7, #16]
 8024d9c:	881b      	ldrh	r3, [r3, #0]
 8024d9e:	2b1f      	cmp	r3, #31
 8024da0:	d023      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024da2:	2b1f      	cmp	r3, #31
 8024da4:	dc0d      	bgt.n	8024dc2 <OBJ_GetEntryOffset+0x82>
 8024da6:	2b06      	cmp	r3, #6
 8024da8:	d01f      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024daa:	2b06      	cmp	r3, #6
 8024dac:	dc04      	bgt.n	8024db8 <OBJ_GetEntryOffset+0x78>
 8024dae:	2b03      	cmp	r3, #3
 8024db0:	d01b      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024db2:	2b04      	cmp	r3, #4
 8024db4:	d037      	beq.n	8024e26 <OBJ_GetEntryOffset+0xe6>
 8024db6:	e058      	b.n	8024e6a <OBJ_GetEntryOffset+0x12a>
 8024db8:	2b08      	cmp	r3, #8
 8024dba:	dd34      	ble.n	8024e26 <OBJ_GetEntryOffset+0xe6>
 8024dbc:	2b0b      	cmp	r3, #11
 8024dbe:	d014      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024dc0:	e053      	b.n	8024e6a <OBJ_GetEntryOffset+0x12a>
 8024dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8024dc4:	d02f      	beq.n	8024e26 <OBJ_GetEntryOffset+0xe6>
 8024dc6:	2b2f      	cmp	r3, #47	; 0x2f
 8024dc8:	dc04      	bgt.n	8024dd4 <OBJ_GetEntryOffset+0x94>
 8024dca:	2b20      	cmp	r3, #32
 8024dcc:	d02b      	beq.n	8024e26 <OBJ_GetEntryOffset+0xe6>
 8024dce:	2b2e      	cmp	r3, #46	; 0x2e
 8024dd0:	d00b      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024dd2:	e04a      	b.n	8024e6a <OBJ_GetEntryOffset+0x12a>
 8024dd4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8024dd8:	d007      	beq.n	8024dea <OBJ_GetEntryOffset+0xaa>
 8024dda:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8024dde:	db44      	blt.n	8024e6a <OBJ_GetEntryOffset+0x12a>
 8024de0:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 8024de4:	2b01      	cmp	r3, #1
 8024de6:	d840      	bhi.n	8024e6a <OBJ_GetEntryOffset+0x12a>
 8024de8:	e01d      	b.n	8024e26 <OBJ_GetEntryOffset+0xe6>
        case    DEFTYPE_ARRAY_OF_INT :

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8024dea:	8abb      	ldrh	r3, [r7, #20]
 8024dec:	330f      	adds	r3, #15
 8024dee:	b29b      	uxth	r3, r3
 8024df0:	f023 030f 	bic.w	r3, r3, #15
 8024df4:	82bb      	strh	r3, [r7, #20]
#endif


            if (i < subindex)
 8024df6:	79fb      	ldrb	r3, [r7, #7]
 8024df8:	b29b      	uxth	r3, r3
 8024dfa:	8afa      	ldrh	r2, [r7, #22]
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	d211      	bcs.n	8024e24 <OBJ_GetEntryOffset+0xe4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 8024e00:	693b      	ldr	r3, [r7, #16]
 8024e02:	881b      	ldrh	r3, [r3, #0]
 8024e04:	2b0b      	cmp	r3, #11
 8024e06:	d004      	beq.n	8024e12 <OBJ_GetEntryOffset+0xd2>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 8024e08:	693b      	ldr	r3, [r7, #16]
 8024e0a:	881b      	ldrh	r3, [r3, #0]
 8024e0c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8024e10:	d104      	bne.n	8024e1c <OBJ_GetEntryOffset+0xdc>
                {
                    bitOffset += pEntry->BitLength;
 8024e12:	693b      	ldr	r3, [r7, #16]
 8024e14:	885a      	ldrh	r2, [r3, #2]
 8024e16:	8abb      	ldrh	r3, [r7, #20]
 8024e18:	4413      	add	r3, r2
 8024e1a:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 8024e1c:	8abb      	ldrh	r3, [r7, #20]
 8024e1e:	3310      	adds	r3, #16
 8024e20:	82bb      	strh	r3, [r7, #20]
            }
            break;
 8024e22:	e02e      	b.n	8024e82 <OBJ_GetEntryOffset+0x142>
 8024e24:	e02d      	b.n	8024e82 <OBJ_GetEntryOffset+0x142>
        case    DEFTYPE_ARRAY_OF_DINT :
        case    DEFTYPE_ARRAY_OF_UDINT:
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 8024e26:	8abb      	ldrh	r3, [r7, #20]
 8024e28:	331f      	adds	r3, #31
 8024e2a:	b29b      	uxth	r3, r3
 8024e2c:	f023 031f 	bic.w	r3, r3, #31
 8024e30:	82bb      	strh	r3, [r7, #20]
            /* the 32-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

            if (i < subindex)
 8024e32:	79fb      	ldrb	r3, [r7, #7]
 8024e34:	b29b      	uxth	r3, r3
 8024e36:	8afa      	ldrh	r2, [r7, #22]
 8024e38:	429a      	cmp	r2, r3
 8024e3a:	d215      	bcs.n	8024e68 <OBJ_GetEntryOffset+0x128>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8024e3c:	693b      	ldr	r3, [r7, #16]
 8024e3e:	881b      	ldrh	r3, [r3, #0]
 8024e40:	f240 2262 	movw	r2, #610	; 0x262
 8024e44:	4293      	cmp	r3, r2
 8024e46:	d005      	beq.n	8024e54 <OBJ_GetEntryOffset+0x114>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8024e48:	693b      	ldr	r3, [r7, #16]
 8024e4a:	881b      	ldrh	r3, [r3, #0]
 8024e4c:	f240 2263 	movw	r2, #611	; 0x263
 8024e50:	4293      	cmp	r3, r2
 8024e52:	d105      	bne.n	8024e60 <OBJ_GetEntryOffset+0x120>
                {
                    bitOffset += pEntry->BitLength;
 8024e54:	693b      	ldr	r3, [r7, #16]
 8024e56:	885a      	ldrh	r2, [r3, #2]
 8024e58:	8abb      	ldrh	r3, [r7, #20]
 8024e5a:	4413      	add	r3, r2
 8024e5c:	82bb      	strh	r3, [r7, #20]
 8024e5e:	e003      	b.n	8024e68 <OBJ_GetEntryOffset+0x128>
                }
                else
                {
                   bitOffset += 32;
 8024e60:	8abb      	ldrh	r3, [r7, #20]
 8024e62:	3320      	adds	r3, #32
 8024e64:	82bb      	strh	r3, [r7, #20]
                }
            }
            break;
 8024e66:	e00c      	b.n	8024e82 <OBJ_GetEntryOffset+0x142>
 8024e68:	e00b      	b.n	8024e82 <OBJ_GetEntryOffset+0x142>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 8024e6a:	79fb      	ldrb	r3, [r7, #7]
 8024e6c:	b29b      	uxth	r3, r3
 8024e6e:	8afa      	ldrh	r2, [r7, #22]
 8024e70:	429a      	cmp	r2, r3
 8024e72:	d205      	bcs.n	8024e80 <OBJ_GetEntryOffset+0x140>
            {
                bitOffset += pEntry->BitLength;
 8024e74:	693b      	ldr	r3, [r7, #16]
 8024e76:	885a      	ldrh	r2, [r3, #2]
 8024e78:	8abb      	ldrh	r3, [r7, #20]
 8024e7a:	4413      	add	r3, r2
 8024e7c:	82bb      	strh	r3, [r7, #20]
            }
            break;
 8024e7e:	e7ff      	b.n	8024e80 <OBJ_GetEntryOffset+0x140>
 8024e80:	bf00      	nop
    if (objCode == OBJCODE_VAR)
    {
        return 0;
    }

    for (i = 1; i <= subindex; i++)
 8024e82:	8afb      	ldrh	r3, [r7, #22]
 8024e84:	3301      	adds	r3, #1
 8024e86:	82fb      	strh	r3, [r7, #22]
 8024e88:	79fb      	ldrb	r3, [r7, #7]
 8024e8a:	b29b      	uxth	r3, r3
 8024e8c:	8afa      	ldrh	r2, [r7, #22]
 8024e8e:	429a      	cmp	r2, r3
 8024e90:	f67f af72 	bls.w	8024d78 <OBJ_GetEntryOffset+0x38>
            }
            break;
        }
    }

    return bitOffset;
 8024e94:	8abb      	ldrh	r3, [r7, #20]
}
 8024e96:	4618      	mov	r0, r3
 8024e98:	371c      	adds	r7, #28
 8024e9a:	46bd      	mov	sp, r7
 8024e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ea0:	4770      	bx	lr
 8024ea2:	bf00      	nop

08024ea4 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8024ea4:	b480      	push	{r7}
 8024ea6:	b083      	sub	sp, #12
 8024ea8:	af00      	add	r7, sp, #0
 8024eaa:	4603      	mov	r3, r0
 8024eac:	460a      	mov	r2, r1
 8024eae:	80fb      	strh	r3, [r7, #6]
 8024eb0:	4613      	mov	r3, r2
 8024eb2:	80bb      	strh	r3, [r7, #4]
    switch (NewSyncType)
 8024eb4:	88bb      	ldrh	r3, [r7, #4]
 8024eb6:	2b22      	cmp	r3, #34	; 0x22
 8024eb8:	f200 80bb 	bhi.w	8025032 <CheckSyncTypeValue+0x18e>
 8024ebc:	a201      	add	r2, pc, #4	; (adr r2, 8024ec4 <CheckSyncTypeValue+0x20>)
 8024ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ec2:	bf00      	nop
 8024ec4:	08024f51 	.word	0x08024f51
 8024ec8:	08024f55 	.word	0x08024f55
 8024ecc:	08024fc7 	.word	0x08024fc7
 8024ed0:	08024ffd 	.word	0x08024ffd
 8024ed4:	08025033 	.word	0x08025033
 8024ed8:	08025033 	.word	0x08025033
 8024edc:	08025033 	.word	0x08025033
 8024ee0:	08025033 	.word	0x08025033
 8024ee4:	08025033 	.word	0x08025033
 8024ee8:	08025033 	.word	0x08025033
 8024eec:	08025033 	.word	0x08025033
 8024ef0:	08025033 	.word	0x08025033
 8024ef4:	08025033 	.word	0x08025033
 8024ef8:	08025033 	.word	0x08025033
 8024efc:	08025033 	.word	0x08025033
 8024f00:	08025033 	.word	0x08025033
 8024f04:	08025033 	.word	0x08025033
 8024f08:	08025033 	.word	0x08025033
 8024f0c:	08025033 	.word	0x08025033
 8024f10:	08025033 	.word	0x08025033
 8024f14:	08025033 	.word	0x08025033
 8024f18:	08025033 	.word	0x08025033
 8024f1c:	08025033 	.word	0x08025033
 8024f20:	08025033 	.word	0x08025033
 8024f24:	08025033 	.word	0x08025033
 8024f28:	08025033 	.word	0x08025033
 8024f2c:	08025033 	.word	0x08025033
 8024f30:	08025033 	.word	0x08025033
 8024f34:	08025033 	.word	0x08025033
 8024f38:	08025033 	.word	0x08025033
 8024f3c:	08025033 	.word	0x08025033
 8024f40:	08025033 	.word	0x08025033
 8024f44:	08025033 	.word	0x08025033
 8024f48:	08025033 	.word	0x08025033
 8024f4c:	08024fa3 	.word	0x08024fa3
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8024f50:	2300      	movs	r3, #0
 8024f52:	e06f      	b.n	8025034 <CheckSyncTypeValue+0x190>

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8024f54:	88fb      	ldrh	r3, [r7, #6]
 8024f56:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024f5a:	4293      	cmp	r3, r2
 8024f5c:	d10b      	bne.n	8024f76 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8024f5e:	4b38      	ldr	r3, [pc, #224]	; (8025040 <CheckSyncTypeValue+0x19c>)
 8024f60:	881b      	ldrh	r3, [r3, #0]
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	d007      	beq.n	8024f76 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8024f66:	4b37      	ldr	r3, [pc, #220]	; (8025044 <CheckSyncTypeValue+0x1a0>)
 8024f68:	899b      	ldrh	r3, [r3, #12]
 8024f6a:	f003 0302 	and.w	r3, r3, #2
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	dd01      	ble.n	8024f76 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8024f72:	2300      	movs	r3, #0
 8024f74:	e05e      	b.n	8025034 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) 
 8024f76:	88fb      	ldrh	r3, [r7, #6]
 8024f78:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024f7c:	4293      	cmp	r3, r2
 8024f7e:	d10f      	bne.n	8024fa0 <CheckSyncTypeValue+0xfc>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024f80:	4b31      	ldr	r3, [pc, #196]	; (8025048 <CheckSyncTypeValue+0x1a4>)
 8024f82:	899b      	ldrh	r3, [r3, #12]
 8024f84:	f003 0302 	and.w	r3, r3, #2
 8024f88:	2b00      	cmp	r3, #0
 8024f8a:	dd09      	ble.n	8024fa0 <CheckSyncTypeValue+0xfc>
            && (nPdOutputSize == 0) 
 8024f8c:	4b2c      	ldr	r3, [pc, #176]	; (8025040 <CheckSyncTypeValue+0x19c>)
 8024f8e:	881b      	ldrh	r3, [r3, #0]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	d105      	bne.n	8024fa0 <CheckSyncTypeValue+0xfc>
            && (nPdInputSize > 0))
 8024f94:	4b2d      	ldr	r3, [pc, #180]	; (802504c <CheckSyncTypeValue+0x1a8>)
 8024f96:	881b      	ldrh	r3, [r3, #0]
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	d001      	beq.n	8024fa0 <CheckSyncTypeValue+0xfc>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8024f9c:	2300      	movs	r3, #0
 8024f9e:	e049      	b.n	8025034 <CheckSyncTypeValue+0x190>
            }
        break;
 8024fa0:	e047      	b.n	8025032 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 8024fa2:	88fb      	ldrh	r3, [r7, #6]
 8024fa4:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024fa8:	4293      	cmp	r3, r2
 8024faa:	d10b      	bne.n	8024fc4 <CheckSyncTypeValue+0x120>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024fac:	4b26      	ldr	r3, [pc, #152]	; (8025048 <CheckSyncTypeValue+0x1a4>)
 8024fae:	899b      	ldrh	r3, [r3, #12]
 8024fb0:	f003 0302 	and.w	r3, r3, #2
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	dd05      	ble.n	8024fc4 <CheckSyncTypeValue+0x120>
            && (nPdOutputSize > 0))
 8024fb8:	4b21      	ldr	r3, [pc, #132]	; (8025040 <CheckSyncTypeValue+0x19c>)
 8024fba:	881b      	ldrh	r3, [r3, #0]
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d001      	beq.n	8024fc4 <CheckSyncTypeValue+0x120>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8024fc0:	2300      	movs	r3, #0
 8024fc2:	e037      	b.n	8025034 <CheckSyncTypeValue+0x190>
            }
        break;
 8024fc4:	e035      	b.n	8025032 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8024fc6:	88fb      	ldrh	r3, [r7, #6]
 8024fc8:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024fcc:	4293      	cmp	r3, r2
 8024fce:	d107      	bne.n	8024fe0 <CheckSyncTypeValue+0x13c>
 8024fd0:	4b1c      	ldr	r3, [pc, #112]	; (8025044 <CheckSyncTypeValue+0x1a0>)
 8024fd2:	899b      	ldrh	r3, [r3, #12]
 8024fd4:	f003 0304 	and.w	r3, r3, #4
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	dd01      	ble.n	8024fe0 <CheckSyncTypeValue+0x13c>
        {
            return 0;
 8024fdc:	2300      	movs	r3, #0
 8024fde:	e029      	b.n	8025034 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8024fe0:	88fb      	ldrh	r3, [r7, #6]
 8024fe2:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024fe6:	4293      	cmp	r3, r2
 8024fe8:	d107      	bne.n	8024ffa <CheckSyncTypeValue+0x156>
 8024fea:	4b17      	ldr	r3, [pc, #92]	; (8025048 <CheckSyncTypeValue+0x1a4>)
 8024fec:	899b      	ldrh	r3, [r3, #12]
 8024fee:	f003 0304 	and.w	r3, r3, #4
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	dd01      	ble.n	8024ffa <CheckSyncTypeValue+0x156>
        {
            return 0;
 8024ff6:	2300      	movs	r3, #0
 8024ff8:	e01c      	b.n	8025034 <CheckSyncTypeValue+0x190>
        }
        break;
 8024ffa:	e01a      	b.n	8025032 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8024ffc:	88fb      	ldrh	r3, [r7, #6]
 8024ffe:	f641 4232 	movw	r2, #7218	; 0x1c32
 8025002:	4293      	cmp	r3, r2
 8025004:	d107      	bne.n	8025016 <CheckSyncTypeValue+0x172>
 8025006:	4b0f      	ldr	r3, [pc, #60]	; (8025044 <CheckSyncTypeValue+0x1a0>)
 8025008:	899b      	ldrh	r3, [r3, #12]
 802500a:	f003 0308 	and.w	r3, r3, #8
 802500e:	2b00      	cmp	r3, #0
 8025010:	dd01      	ble.n	8025016 <CheckSyncTypeValue+0x172>
        {
            return 0;
 8025012:	2300      	movs	r3, #0
 8025014:	e00e      	b.n	8025034 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8025016:	88fb      	ldrh	r3, [r7, #6]
 8025018:	f641 4233 	movw	r2, #7219	; 0x1c33
 802501c:	4293      	cmp	r3, r2
 802501e:	d107      	bne.n	8025030 <CheckSyncTypeValue+0x18c>
 8025020:	4b09      	ldr	r3, [pc, #36]	; (8025048 <CheckSyncTypeValue+0x1a4>)
 8025022:	899b      	ldrh	r3, [r3, #12]
 8025024:	f003 0308 	and.w	r3, r3, #8
 8025028:	2b00      	cmp	r3, #0
 802502a:	dd01      	ble.n	8025030 <CheckSyncTypeValue+0x18c>
        {
            return 0;
 802502c:	2300      	movs	r3, #0
 802502e:	e001      	b.n	8025034 <CheckSyncTypeValue+0x190>
        }
        break;
 8025030:	bf00      	nop
    } //switch 
    return ABORTIDX_VALUE_EXCEEDED;
 8025032:	2312      	movs	r3, #18

}
 8025034:	4618      	mov	r0, r3
 8025036:	370c      	adds	r7, #12
 8025038:	46bd      	mov	sp, r7
 802503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802503e:	4770      	bx	lr
 8025040:	1ffea852 	.word	0x1ffea852
 8025044:	1ffea974 	.word	0x1ffea974
 8025048:	1ffea930 	.word	0x1ffea930
 802504c:	1ffea87e 	.word	0x1ffea87e

08025050 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8025050:	b590      	push	{r4, r7, lr}
 8025052:	b091      	sub	sp, #68	; 0x44
 8025054:	af02      	add	r7, sp, #8
 8025056:	60ba      	str	r2, [r7, #8]
 8025058:	607b      	str	r3, [r7, #4]
 802505a:	4603      	mov	r3, r0
 802505c:	81fb      	strh	r3, [r7, #14]
 802505e:	460b      	mov	r3, r1
 8025060:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8025062:	7b7b      	ldrb	r3, [r7, #13]
 8025064:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	899b      	ldrh	r3, [r3, #12]
 802506a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 802506e:	121b      	asrs	r3, r3, #8
 8025070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	899b      	ldrh	r3, [r3, #12]
 8025078:	b2db      	uxtb	r3, r3
 802507a:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 802507c:	7b7b      	ldrb	r3, [r7, #13]
 802507e:	867b      	strh	r3, [r7, #50]	; 0x32

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8025080:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025084:	2b07      	cmp	r3, #7
 8025086:	d008      	beq.n	802509a <OBJ_Read+0x4a>
 8025088:	89fb      	ldrh	r3, [r7, #14]
 802508a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802508e:	d304      	bcc.n	802509a <OBJ_Read+0x4a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	699b      	ldr	r3, [r3, #24]
 8025094:	881b      	ldrh	r3, [r3, #0]
 8025096:	b2db      	uxtb	r3, r3
 8025098:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 802509a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d00c      	beq.n	80250bc <OBJ_Read+0x6c>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 80250a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80250a6:	2b07      	cmp	r3, #7
 80250a8:	d003      	beq.n	80250b2 <OBJ_Read+0x62>
 80250aa:	89fb      	ldrh	r3, [r7, #14]
 80250ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80250b0:	d201      	bcs.n	80250b6 <OBJ_Read+0x66>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 80250b2:	2305      	movs	r3, #5
 80250b4:	e29e      	b.n	80255f4 <OBJ_Read+0x5a4>
        }


        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 80250b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80250b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80250ba:	e02d      	b.n	8025118 <OBJ_Read+0xc8>
    }
    else
        if ( subindex > maxSubindex )
 80250bc:	7b7b      	ldrb	r3, [r7, #13]
 80250be:	b29b      	uxth	r3, r3
 80250c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80250c2:	429a      	cmp	r2, r3
 80250c4:	d201      	bcs.n	80250ca <OBJ_Read+0x7a>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80250c6:	2311      	movs	r3, #17
 80250c8:	e294      	b.n	80255f4 <OBJ_Read+0x5a4>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80250ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80250cc:	b2db      	uxtb	r3, r3
 80250ce:	6878      	ldr	r0, [r7, #4]
 80250d0:	4619      	mov	r1, r3
 80250d2:	f7ff fdfd 	bl	8024cd0 <OBJ_GetEntryDesc>
 80250d6:	6278      	str	r0, [r7, #36]	; 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 80250d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250da:	889b      	ldrh	r3, [r3, #4]
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d019      	beq.n	8025114 <OBJ_Read+0xc4>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
                if (0 == (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)))
 80250e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250e2:	889b      	ldrh	r3, [r3, #4]
 80250e4:	b2db      	uxtb	r3, r3
 80250e6:	f003 0307 	and.w	r3, r3, #7
 80250ea:	b2db      	uxtb	r3, r3
 80250ec:	005b      	lsls	r3, r3, #1
 80250ee:	b2db      	uxtb	r3, r3
 80250f0:	461a      	mov	r2, r3
 80250f2:	4ba0      	ldr	r3, [pc, #640]	; (8025374 <OBJ_Read+0x324>)
 80250f4:	781b      	ldrb	r3, [r3, #0]
 80250f6:	f003 030f 	and.w	r3, r3, #15
 80250fa:	4013      	ands	r3, r2
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d10b      	bne.n	8025118 <OBJ_Read+0xc8>
/*ECATCHANGE_END(V5.12) COE3*/
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8025100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025102:	889b      	ldrh	r3, [r3, #4]
 8025104:	f003 0307 	and.w	r3, r3, #7
 8025108:	2b00      	cmp	r3, #0
 802510a:	d101      	bne.n	8025110 <OBJ_Read+0xc0>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 802510c:	2306      	movs	r3, #6
 802510e:	e271      	b.n	80255f4 <OBJ_Read+0x5a4>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8025110:	231a      	movs	r3, #26
 8025112:	e26f      	b.n	80255f4 <OBJ_Read+0x5a4>
                }
            }
/* ECATCHANGE_START(V5.12) COE7*/
            else
            {
                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025114:	2305      	movs	r3, #5
 8025116:	e26d      	b.n	80255f4 <OBJ_Read+0x5a4>
            }
/* ECATCHANGE_END(V5.12) COE7*/
        }
        if ( pObjEntry->Read != NULL )
 8025118:	687b      	ldr	r3, [r7, #4]
 802511a:	69db      	ldr	r3, [r3, #28]
 802511c:	2b00      	cmp	r3, #0
 802511e:	d00d      	beq.n	802513c <OBJ_Read+0xec>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 8025120:	687b      	ldr	r3, [r7, #4]
 8025122:	69dc      	ldr	r4, [r3, #28]
 8025124:	89f9      	ldrh	r1, [r7, #14]
 8025126:	7b7a      	ldrb	r2, [r7, #13]
 8025128:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802512c:	9300      	str	r3, [sp, #0]
 802512e:	4608      	mov	r0, r1
 8025130:	4611      	mov	r1, r2
 8025132:	68ba      	ldr	r2, [r7, #8]
 8025134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025136:	47a0      	blx	r4
 8025138:	4603      	mov	r3, r0
 802513a:	e25b      	b.n	80255f4 <OBJ_Read+0x5a4>
        }
        else if ( index < 0x1000 && subindex != 0 )
 802513c:	89fb      	ldrh	r3, [r7, #14]
 802513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8025142:	d232      	bcs.n	80251aa <OBJ_Read+0x15a>
 8025144:	7b7b      	ldrb	r3, [r7, #13]
 8025146:	2b00      	cmp	r3, #0
 8025148:	d02f      	beq.n	80251aa <OBJ_Read+0x15a>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	699b      	ldr	r3, [r3, #24]
 802514e:	623b      	str	r3, [r7, #32]
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8025150:	7b7b      	ldrb	r3, [r7, #13]
 8025152:	6878      	ldr	r0, [r7, #4]
 8025154:	4619      	mov	r1, r3
 8025156:	f7ff fdbb 	bl	8024cd0 <OBJ_GetEntryDesc>
 802515a:	6278      	str	r0, [r7, #36]	; 0x24
            size = BIT2BYTE(pEntry->BitLength);
 802515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802515e:	885b      	ldrh	r3, [r3, #2]
 8025160:	3307      	adds	r3, #7
 8025162:	10db      	asrs	r3, r3, #3
 8025164:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 8025166:	6a3b      	ldr	r3, [r7, #32]
 8025168:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 802516a:	7b7b      	ldrb	r3, [r7, #13]
 802516c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025170:	3b01      	subs	r3, #1
 8025172:	009b      	lsls	r3, r3, #2
 8025174:	69ba      	ldr	r2, [r7, #24]
 8025176:	4413      	add	r3, r2
 8025178:	681b      	ldr	r3, [r3, #0]
 802517a:	623b      	str	r3, [r7, #32]

            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 802517c:	6a3b      	ldr	r3, [r7, #32]
 802517e:	881a      	ldrh	r2, [r3, #0]
 8025180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025182:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 8025184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025186:	3302      	adds	r3, #2
 8025188:	6a3a      	ldr	r2, [r7, #32]
 802518a:	8852      	ldrh	r2, [r2, #2]
 802518c:	801a      	strh	r2, [r3, #0]
            pData += 2;
 802518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025190:	3304      	adds	r3, #4
 8025192:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 8025194:	6a3b      	ldr	r3, [r7, #32]
 8025196:	3304      	adds	r3, #4
 8025198:	623b      	str	r3, [r7, #32]

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 802519a:	8bfb      	ldrh	r3, [r7, #30]
 802519c:	3b04      	subs	r3, #4
 802519e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80251a0:	6a39      	ldr	r1, [r7, #32]
 80251a2:	461a      	mov	r2, r3
 80251a4:	f005 fd38 	bl	802ac18 <memcpy>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
        }
        else if ( index < 0x1000 && subindex != 0 )
        {
 80251a8:	e223      	b.n	80255f2 <OBJ_Read+0x5a2>
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 80251aa:	2300      	movs	r3, #0
 80251ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            UINT8 result = 0;
 80251b0:	2300      	movs	r3, #0
 80251b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 80251b6:	7b7b      	ldrb	r3, [r7, #13]
 80251b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80251ba:	e20e      	b.n	80255da <OBJ_Read+0x58a>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	699b      	ldr	r3, [r3, #24]
 80251c0:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 80251c2:	2300      	movs	r3, #0
 80251c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

                
                if (i == 0)
 80251c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80251c8:	2b00      	cmp	r3, #0
 80251ca:	d00b      	beq.n	80251e4 <OBJ_Read+0x194>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 80251cc:	89fb      	ldrh	r3, [r7, #14]
 80251ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80251d2:	d307      	bcc.n	80251e4 <OBJ_Read+0x194>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80251d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80251d6:	b2db      	uxtb	r3, r3
 80251d8:	4618      	mov	r0, r3
 80251da:	6879      	ldr	r1, [r7, #4]
 80251dc:	f7ff fdb0 	bl	8024d40 <OBJ_GetEntryOffset>
 80251e0:	4603      	mov	r3, r0
 80251e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 80251e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80251e6:	091b      	lsrs	r3, r3, #4
 80251e8:	b29b      	uxth	r3, r3
 80251ea:	005b      	lsls	r3, r3, #1
 80251ec:	697a      	ldr	r2, [r7, #20]
 80251ee:	4413      	add	r3, r2
 80251f0:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80251f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80251f4:	b2db      	uxtb	r3, r3
 80251f6:	6878      	ldr	r0, [r7, #4]
 80251f8:	4619      	mov	r1, r3
 80251fa:	f7ff fd69 	bl	8024cd0 <OBJ_GetEntryDesc>
 80251fe:	6278      	str	r0, [r7, #36]	; 0x24
/*ECATCHANGE_START(V5.12) COE3*/
                if (0 != (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)) )
 8025200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025202:	889b      	ldrh	r3, [r3, #4]
 8025204:	b2db      	uxtb	r3, r3
 8025206:	f003 0307 	and.w	r3, r3, #7
 802520a:	b2db      	uxtb	r3, r3
 802520c:	005b      	lsls	r3, r3, #1
 802520e:	b2db      	uxtb	r3, r3
 8025210:	461a      	mov	r2, r3
 8025212:	4b58      	ldr	r3, [pc, #352]	; (8025374 <OBJ_Read+0x324>)
 8025214:	781b      	ldrb	r3, [r3, #0]
 8025216:	f003 030f 	and.w	r3, r3, #15
 802521a:	4013      	ands	r3, r2
 802521c:	2b00      	cmp	r3, #0
 802521e:	f000 8195 	beq.w	802554c <OBJ_Read+0x4fc>
/*ECATCHANGE_END(V5.12) COE3*/
                {
                    if ( i == subindex                                     /* requested entry */
 8025222:	7b7b      	ldrb	r3, [r7, #13]
 8025224:	b29b      	uxth	r3, r3
 8025226:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025228:	429a      	cmp	r2, r3
 802522a:	d00a      	beq.n	8025242 <OBJ_Read+0x1f2>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 802522c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025230:	2b00      	cmp	r3, #0
 8025232:	f000 818a 	beq.w	802554a <OBJ_Read+0x4fa>
 8025236:	7b7b      	ldrb	r3, [r7, #13]
 8025238:	b29b      	uxth	r3, r3
 802523a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802523c:	429a      	cmp	r2, r3
 802523e:	f0c0 8184 	bcc.w	802554a <OBJ_Read+0x4fa>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 8025242:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025244:	2b00      	cmp	r3, #0
 8025246:	d10a      	bne.n	802525e <OBJ_Read+0x20e>
 8025248:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802524c:	2b07      	cmp	r3, #7
 802524e:	d006      	beq.n	802525e <OBJ_Read+0x20e>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8025250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025252:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8025254:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 8025256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025258:	3302      	adds	r3, #2
 802525a:	64bb      	str	r3, [r7, #72]	; 0x48
 802525c:	e175      	b.n	802554a <OBJ_Read+0x4fa>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 802525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025260:	881b      	ldrh	r3, [r3, #0]
 8025262:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            
                            if (pEntry->DataType >= 0x700)
 8025264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025266:	881b      	ldrh	r3, [r3, #0]
 8025268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802526c:	d315      	bcc.n	802529a <OBJ_Read+0x24a>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 802526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025270:	885b      	ldrh	r3, [r3, #2]
 8025272:	2b08      	cmp	r3, #8
 8025274:	d804      	bhi.n	8025280 <OBJ_Read+0x230>
                                {
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8025276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025278:	885b      	ldrh	r3, [r3, #2]
 802527a:	332f      	adds	r3, #47	; 0x2f
 802527c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802527e:	e00c      	b.n	802529a <OBJ_Read+0x24a>
                                }
                                else if ( pEntry->BitLength == 16 )
 8025280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025282:	885b      	ldrh	r3, [r3, #2]
 8025284:	2b10      	cmp	r3, #16
 8025286:	d102      	bne.n	802528e <OBJ_Read+0x23e>
                                {
                                    dataType = DEFTYPE_UNSIGNED16;
 8025288:	2306      	movs	r3, #6
 802528a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802528c:	e005      	b.n	802529a <OBJ_Read+0x24a>
                                }
                                else if ( pEntry->BitLength == 32 )
 802528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025290:	885b      	ldrh	r3, [r3, #2]
 8025292:	2b20      	cmp	r3, #32
 8025294:	d101      	bne.n	802529a <OBJ_Read+0x24a>
                                {
                                    dataType = DEFTYPE_UNSIGNED32;
 8025296:	2307      	movs	r3, #7
 8025298:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                }
                            }

                            switch (dataType)
 802529a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802529c:	2b11      	cmp	r3, #17
 802529e:	f000 80e0 	beq.w	8025462 <OBJ_Read+0x412>
 80252a2:	2b11      	cmp	r3, #17
 80252a4:	dc1e      	bgt.n	80252e4 <OBJ_Read+0x294>
 80252a6:	2b05      	cmp	r3, #5
 80252a8:	d066      	beq.n	8025378 <OBJ_Read+0x328>
 80252aa:	2b05      	cmp	r3, #5
 80252ac:	dc0d      	bgt.n	80252ca <OBJ_Read+0x27a>
 80252ae:	2b02      	cmp	r3, #2
 80252b0:	dc04      	bgt.n	80252bc <OBJ_Read+0x26c>
 80252b2:	2b01      	cmp	r3, #1
 80252b4:	da60      	bge.n	8025378 <OBJ_Read+0x328>
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	d03a      	beq.n	8025330 <OBJ_Read+0x2e0>
 80252ba:	e140      	b.n	802553e <OBJ_Read+0x4ee>
 80252bc:	2b03      	cmp	r3, #3
 80252be:	f000 80ad 	beq.w	802541c <OBJ_Read+0x3cc>
 80252c2:	2b04      	cmp	r3, #4
 80252c4:	f000 80b9 	beq.w	802543a <OBJ_Read+0x3ea>
 80252c8:	e139      	b.n	802553e <OBJ_Read+0x4ee>
 80252ca:	2b08      	cmp	r3, #8
 80252cc:	dc03      	bgt.n	80252d6 <OBJ_Read+0x286>
 80252ce:	2b07      	cmp	r3, #7
 80252d0:	f280 80b3 	bge.w	802543a <OBJ_Read+0x3ea>
 80252d4:	e0a2      	b.n	802541c <OBJ_Read+0x3cc>
 80252d6:	2b09      	cmp	r3, #9
 80252d8:	f000 8109 	beq.w	80254ee <OBJ_Read+0x49e>
 80252dc:	2b0b      	cmp	r3, #11
 80252de:	f300 812e 	bgt.w	802553e <OBJ_Read+0x4ee>
 80252e2:	e0dc      	b.n	802549e <OBJ_Read+0x44e>
 80252e4:	2b2d      	cmp	r3, #45	; 0x2d
 80252e6:	d047      	beq.n	8025378 <OBJ_Read+0x328>
 80252e8:	2b2d      	cmp	r3, #45	; 0x2d
 80252ea:	dc11      	bgt.n	8025310 <OBJ_Read+0x2c0>
 80252ec:	2b1e      	cmp	r3, #30
 80252ee:	d043      	beq.n	8025378 <OBJ_Read+0x328>
 80252f0:	2b1e      	cmp	r3, #30
 80252f2:	dc06      	bgt.n	8025302 <OBJ_Read+0x2b2>
 80252f4:	2b15      	cmp	r3, #21
 80252f6:	f000 80b4 	beq.w	8025462 <OBJ_Read+0x412>
 80252fa:	2b1b      	cmp	r3, #27
 80252fc:	f000 80b1 	beq.w	8025462 <OBJ_Read+0x412>
 8025300:	e11d      	b.n	802553e <OBJ_Read+0x4ee>
 8025302:	2b1f      	cmp	r3, #31
 8025304:	f000 808a 	beq.w	802541c <OBJ_Read+0x3cc>
 8025308:	2b20      	cmp	r3, #32
 802530a:	f000 8096 	beq.w	802543a <OBJ_Read+0x3ea>
 802530e:	e116      	b.n	802553e <OBJ_Read+0x4ee>
 8025310:	2b37      	cmp	r3, #55	; 0x37
 8025312:	dc07      	bgt.n	8025324 <OBJ_Read+0x2d4>
 8025314:	2b30      	cmp	r3, #48	; 0x30
 8025316:	da2f      	bge.n	8025378 <OBJ_Read+0x328>
 8025318:	2b2e      	cmp	r3, #46	; 0x2e
 802531a:	d07f      	beq.n	802541c <OBJ_Read+0x3cc>
 802531c:	2b2f      	cmp	r3, #47	; 0x2f
 802531e:	f000 808c 	beq.w	802543a <OBJ_Read+0x3ea>
 8025322:	e10c      	b.n	802553e <OBJ_Read+0x4ee>
 8025324:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025328:	2b03      	cmp	r3, #3
 802532a:	f200 8108 	bhi.w	802553e <OBJ_Read+0x4ee>
 802532e:	e0b6      	b.n	802549e <OBJ_Read+0x44e>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8025330:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025334:	2b00      	cmp	r3, #0
 8025336:	d01a      	beq.n	802536e <OBJ_Read+0x31e>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8025338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802533a:	885b      	ldrh	r3, [r3, #2]
 802533c:	f003 030f 	and.w	r3, r3, #15
 8025340:	2b00      	cmp	r3, #0
 8025342:	dd0a      	ble.n	802535a <OBJ_Read+0x30a>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025344:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025348:	8852      	ldrh	r2, [r2, #2]
 802534a:	4413      	add	r3, r2
 802534c:	f003 030f 	and.w	r3, r3, #15
 8025350:	2b00      	cmp	r3, #0
 8025352:	d102      	bne.n	802535a <OBJ_Read+0x30a>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8025354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025356:	3302      	adds	r3, #2
 8025358:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 802535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802535c:	885b      	ldrh	r3, [r3, #2]
 802535e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025362:	111b      	asrs	r3, r3, #4
 8025364:	005b      	lsls	r3, r3, #1
 8025366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025368:	4413      	add	r3, r2
 802536a:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 802536c:	e0e9      	b.n	8025542 <OBJ_Read+0x4f2>
                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 802536e:	2318      	movs	r3, #24
 8025370:	e140      	b.n	80255f4 <OBJ_Read+0x5a4>
 8025372:	bf00      	nop
 8025374:	1ffea851 	.word	0x1ffea851
                            case    DEFTYPE_INTEGER8:
                            case    DEFTYPE_UNSIGNED8:
                            case    DEFTYPE_BYTE :
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8025378:	2300      	movs	r3, #0
 802537a:	827b      	strh	r3, [r7, #18]

                                    
                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 802537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802537e:	885b      	ldrh	r3, [r3, #2]
 8025380:	461a      	mov	r2, r3
 8025382:	4b9e      	ldr	r3, [pc, #632]	; (80255fc <OBJ_Read+0x5ac>)
 8025384:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8025388:	461a      	mov	r2, r3
 802538a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802538c:	f003 030f 	and.w	r3, r3, #15
 8025390:	fa02 f303 	lsl.w	r3, r2, r3
 8025394:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 8025396:	697b      	ldr	r3, [r7, #20]
 8025398:	881b      	ldrh	r3, [r3, #0]
 802539a:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 802539c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802539e:	f003 030f 	and.w	r3, r3, #15
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d102      	bne.n	80253ac <OBJ_Read+0x35c>
                                    {
                                        pData[0] = 0;
 80253a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253a8:	2200      	movs	r2, #0
 80253aa:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80253ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253ae:	881a      	ldrh	r2, [r3, #0]
 80253b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253b2:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 80253b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80253b8:	2b00      	cmp	r3, #0
 80253ba:	d00a      	beq.n	80253d2 <OBJ_Read+0x382>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 80253bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253be:	881a      	ldrh	r2, [r3, #0]
 80253c0:	8a79      	ldrh	r1, [r7, #18]
 80253c2:	8a3b      	ldrh	r3, [r7, #16]
 80253c4:	400b      	ands	r3, r1
 80253c6:	b29b      	uxth	r3, r3
 80253c8:	4313      	orrs	r3, r2
 80253ca:	b29a      	uxth	r2, r3
 80253cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253ce:	801a      	strh	r2, [r3, #0]
 80253d0:	e013      	b.n	80253fa <OBJ_Read+0x3aa>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 80253d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253d4:	881b      	ldrh	r3, [r3, #0]
 80253d6:	b299      	uxth	r1, r3
 80253d8:	8a7a      	ldrh	r2, [r7, #18]
 80253da:	8a3b      	ldrh	r3, [r7, #16]
 80253dc:	4013      	ands	r3, r2
 80253de:	b29b      	uxth	r3, r3
 80253e0:	461a      	mov	r2, r3
 80253e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80253e4:	f003 030f 	and.w	r3, r3, #15
 80253e8:	fa42 f303 	asr.w	r3, r2, r3
 80253ec:	b29b      	uxth	r3, r3
 80253ee:	460a      	mov	r2, r1
 80253f0:	4313      	orrs	r3, r2
 80253f2:	b29b      	uxth	r3, r3
 80253f4:	b29a      	uxth	r2, r3
 80253f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253f8:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80253fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80253fc:	881a      	ldrh	r2, [r3, #0]
 80253fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025400:	801a      	strh	r2, [r3, #0]
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 8025402:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025406:	8852      	ldrh	r2, [r2, #2]
 8025408:	4413      	add	r3, r2
 802540a:	f003 030f 	and.w	r3, r3, #15
 802540e:	2b00      	cmp	r3, #0
 8025410:	d103      	bne.n	802541a <OBJ_Read+0x3ca>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8025412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025414:	3302      	adds	r3, #2
 8025416:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 8025418:	e093      	b.n	8025542 <OBJ_Read+0x4f2>
 802541a:	e092      	b.n	8025542 <OBJ_Read+0x4f2>
                            case    DEFTYPE_INTEGER16:
                            case    DEFTYPE_UNSIGNED16:
                            case    DEFTYPE_BITARR16:
                            case    DEFTYPE_WORD:

                                if(bitOffset & 0xF)
 802541c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802541e:	f003 030f 	and.w	r3, r3, #15
 8025422:	2b00      	cmp	r3, #0
 8025424:	d001      	beq.n	802542a <OBJ_Read+0x3da>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8025426:	2305      	movs	r3, #5
 8025428:	e0e4      	b.n	80255f4 <OBJ_Read+0x5a4>
                                }
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 802542a:	697b      	ldr	r3, [r7, #20]
 802542c:	881a      	ldrh	r2, [r3, #0]
 802542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025430:	801a      	strh	r2, [r3, #0]
                                pData++;
 8025432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025434:	3302      	adds	r3, #2
 8025436:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8025438:	e083      	b.n	8025542 <OBJ_Read+0x4f2>
                            case    DEFTYPE_UNSIGNED32:
                            case    DEFTYPE_INTEGER32:
                            case    DEFTYPE_REAL32:
                            case    DEFTYPE_BITARR32:
                            case    DEFTYPE_DWORD:
                                if(bitOffset & 0xF)
 802543a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802543c:	f003 030f 	and.w	r3, r3, #15
 8025440:	2b00      	cmp	r3, #0
 8025442:	d001      	beq.n	8025448 <OBJ_Read+0x3f8>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8025444:	2305      	movs	r3, #5
 8025446:	e0d5      	b.n	80255f4 <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8025448:	697b      	ldr	r3, [r7, #20]
 802544a:	881a      	ldrh	r2, [r3, #0]
 802544c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802544e:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8025450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025452:	3302      	adds	r3, #2
 8025454:	697a      	ldr	r2, [r7, #20]
 8025456:	8852      	ldrh	r2, [r2, #2]
 8025458:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 802545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802545c:	3304      	adds	r3, #4
 802545e:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8025460:	e06f      	b.n	8025542 <OBJ_Read+0x4f2>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
                                if(bitOffset & 0xF)
 8025462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025464:	f003 030f 	and.w	r3, r3, #15
 8025468:	2b00      	cmp	r3, #0
 802546a:	d001      	beq.n	8025470 <OBJ_Read+0x420>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 802546c:	2305      	movs	r3, #5
 802546e:	e0c1      	b.n	80255f4 <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8025470:	697b      	ldr	r3, [r7, #20]
 8025472:	881a      	ldrh	r2, [r3, #0]
 8025474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025476:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8025478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802547a:	3302      	adds	r3, #2
 802547c:	697a      	ldr	r2, [r7, #20]
 802547e:	8852      	ldrh	r2, [r2, #2]
 8025480:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 8025482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025484:	3304      	adds	r3, #4
 8025486:	697a      	ldr	r2, [r7, #20]
 8025488:	8892      	ldrh	r2, [r2, #4]
 802548a:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 802548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802548e:	3306      	adds	r3, #6
 8025490:	697a      	ldr	r2, [r7, #20]
 8025492:	88d2      	ldrh	r2, [r2, #6]
 8025494:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 8025496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025498:	3308      	adds	r3, #8
 802549a:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 802549c:	e051      	b.n	8025542 <OBJ_Read+0x4f2>
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:

                                if(bitOffset & 0xF)
 802549e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80254a0:	f003 030f 	and.w	r3, r3, #15
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d001      	beq.n	80254ac <OBJ_Read+0x45c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80254a8:	2305      	movs	r3, #5
 80254aa:	e0a3      	b.n	80255f4 <OBJ_Read+0x5a4>
                                }

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80254ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254ae:	885b      	ldrh	r3, [r3, #2]
 80254b0:	3307      	adds	r3, #7
 80254b2:	10db      	asrs	r3, r3, #3
 80254b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80254b6:	6979      	ldr	r1, [r7, #20]
 80254b8:	461a      	mov	r2, r3
 80254ba:	f005 fbad 	bl	802ac18 <memcpy>

                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80254be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254c0:	885b      	ldrh	r3, [r3, #2]
 80254c2:	f023 030f 	bic.w	r3, r3, #15
 80254c6:	330f      	adds	r3, #15
 80254c8:	111b      	asrs	r3, r3, #4
 80254ca:	005b      	lsls	r3, r3, #1
 80254cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80254ce:	4413      	add	r3, r2
 80254d0:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 80254d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254d4:	885b      	ldrh	r3, [r3, #2]
 80254d6:	f003 030f 	and.w	r3, r3, #15
 80254da:	2b00      	cmp	r3, #0
 80254dc:	d006      	beq.n	80254ec <OBJ_Read+0x49c>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80254de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80254e0:	881b      	ldrh	r3, [r3, #0]
 80254e2:	b2db      	uxtb	r3, r3
 80254e4:	b29a      	uxth	r2, r3
 80254e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80254e8:	801a      	strh	r2, [r3, #0]
                                }

                                break;
 80254ea:	e02a      	b.n	8025542 <OBJ_Read+0x4f2>
 80254ec:	e029      	b.n	8025542 <OBJ_Read+0x4f2>
                            case    DEFTYPE_VISIBLESTRING:
                                if(bitOffset & 0xF)
 80254ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80254f0:	f003 030f 	and.w	r3, r3, #15
 80254f4:	2b00      	cmp	r3, #0
 80254f6:	d001      	beq.n	80254fc <OBJ_Read+0x4ac>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80254f8:	2305      	movs	r3, #5
 80254fa:	e07b      	b.n	80255f4 <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80254fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254fe:	885b      	ldrh	r3, [r3, #2]
 8025500:	3307      	adds	r3, #7
 8025502:	10db      	asrs	r3, r3, #3
 8025504:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8025506:	6979      	ldr	r1, [r7, #20]
 8025508:	461a      	mov	r2, r3
 802550a:	f005 fb85 	bl	802ac18 <memcpy>
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 802550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025510:	885b      	ldrh	r3, [r3, #2]
 8025512:	f023 030f 	bic.w	r3, r3, #15
 8025516:	330f      	adds	r3, #15
 8025518:	111b      	asrs	r3, r3, #4
 802551a:	005b      	lsls	r3, r3, #1
 802551c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802551e:	4413      	add	r3, r2
 8025520:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 8025522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025524:	885b      	ldrh	r3, [r3, #2]
 8025526:	f003 030f 	and.w	r3, r3, #15
 802552a:	2b00      	cmp	r3, #0
 802552c:	d006      	beq.n	802553c <OBJ_Read+0x4ec>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 802552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025530:	881b      	ldrh	r3, [r3, #0]
 8025532:	b2db      	uxtb	r3, r3
 8025534:	b29a      	uxth	r2, r3
 8025536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025538:	801a      	strh	r2, [r3, #0]
                                }
                                
                                break;
 802553a:	e002      	b.n	8025542 <OBJ_Read+0x4f2>
 802553c:	e001      	b.n	8025542 <OBJ_Read+0x4f2>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 802553e:	2318      	movs	r3, #24
 8025540:	e058      	b.n	80255f4 <OBJ_Read+0x5a4>
                            } //switch (deftype)

                            bRead = 1;
 8025542:	2301      	movs	r3, #1
 8025544:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8025548:	e044      	b.n	80255d4 <OBJ_Read+0x584>
 802554a:	e043      	b.n	80255d4 <OBJ_Read+0x584>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 802554c:	2300      	movs	r3, #0
 802554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 8025552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025554:	f003 030f 	and.w	r3, r3, #15
 8025558:	2b00      	cmp	r3, #0
 802555a:	d102      	bne.n	8025562 <OBJ_Read+0x512>
                    {
                        *pData = 0;
 802555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802555e:	2200      	movs	r2, #0
 8025560:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8025562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025564:	885b      	ldrh	r3, [r3, #2]
 8025566:	f003 030f 	and.w	r3, r3, #15
 802556a:	2b00      	cmp	r3, #0
 802556c:	dd0d      	ble.n	802558a <OBJ_Read+0x53a>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 802556e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025572:	8852      	ldrh	r2, [r2, #2]
 8025574:	4413      	add	r3, r2
 8025576:	f003 030f 	and.w	r3, r3, #15
 802557a:	2b00      	cmp	r3, #0
 802557c:	d105      	bne.n	802558a <OBJ_Read+0x53a>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 802557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025580:	3302      	adds	r3, #2
 8025582:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 8025584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025586:	2200      	movs	r2, #0
 8025588:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 802558a:	2300      	movs	r3, #0
 802558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8025590:	e00a      	b.n	80255a8 <OBJ_Read+0x558>
                    {
                        
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 8025592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025594:	3302      	adds	r3, #2
 8025596:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 8025598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802559a:	2200      	movs	r2, #0
 802559c:	801a      	strh	r2, [r3, #0]
                        /*Clear new buffer*/
                        *pData = 0;
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 802559e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80255a2:	3301      	adds	r3, #1
 80255a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80255a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80255ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255ae:	885b      	ldrh	r3, [r3, #2]
 80255b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80255b4:	111b      	asrs	r3, r3, #4
 80255b6:	429a      	cmp	r2, r3
 80255b8:	dbeb      	blt.n	8025592 <OBJ_Read+0x542>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80255ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255bc:	889b      	ldrh	r3, [r3, #4]
 80255be:	f003 0307 	and.w	r3, r3, #7
 80255c2:	2b00      	cmp	r3, #0
 80255c4:	d103      	bne.n	80255ce <OBJ_Read+0x57e>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 80255c6:	2306      	movs	r3, #6
 80255c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80255cc:	e002      	b.n	80255d4 <OBJ_Read+0x584>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80255ce:	231a      	movs	r3, #26
 80255d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            UINT8 bRead = 0x0;
            UINT8 result = 0;


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 80255d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80255d6:	3301      	adds	r3, #1
 80255d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80255da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80255dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80255de:	429a      	cmp	r2, r3
 80255e0:	f67f adec 	bls.w	80251bc <OBJ_Read+0x16c>
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
                    }
                }
            }

            if(bRead == 0)
 80255e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80255e8:	2b00      	cmp	r3, #0
 80255ea:	d102      	bne.n	80255f2 <OBJ_Read+0x5a2>
            {
                return result;
 80255ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80255f0:	e000      	b.n	80255f4 <OBJ_Read+0x5a4>
            }
        }

    return 0;
 80255f2:	2300      	movs	r3, #0
}
 80255f4:	4618      	mov	r0, r3
 80255f6:	373c      	adds	r7, #60	; 0x3c
 80255f8:	46bd      	mov	sp, r7
 80255fa:	bd90      	pop	{r4, r7, pc}
 80255fc:	0802b684 	.word	0x0802b684

08025600 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8025600:	b590      	push	{r4, r7, lr}
 8025602:	b091      	sub	sp, #68	; 0x44
 8025604:	af02      	add	r7, sp, #8
 8025606:	60ba      	str	r2, [r7, #8]
 8025608:	607b      	str	r3, [r7, #4]
 802560a:	4603      	mov	r3, r0
 802560c:	81fb      	strh	r3, [r7, #14]
 802560e:	460b      	mov	r3, r1
 8025610:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8025612:	7b7b      	ldrb	r3, [r7, #13]
 8025614:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	899b      	ldrh	r3, [r3, #12]
 802561a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 802561e:	121b      	asrs	r3, r3, #8
 8025620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 8025624:	2300      	movs	r3, #0
 8025626:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	899b      	ldrh	r3, [r3, #12]
 802562c:	b2db      	uxtb	r3, r3
 802562e:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 8025630:	2300      	movs	r3, #0
 8025632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8025636:	7b7b      	ldrb	r3, [r7, #13]
 8025638:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 802563a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802563e:	2b07      	cmp	r3, #7
 8025640:	d028      	beq.n	8025694 <OBJ_Write+0x94>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	699b      	ldr	r3, [r3, #24]
 8025646:	881b      	ldrh	r3, [r3, #0]
 8025648:	b2db      	uxtb	r3, r3
 802564a:	86bb      	strh	r3, [r7, #52]	; 0x34

/*ECATCHANGE_START(V5.12) COE9*/
        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index) || (index == 0xF030)))
 802564c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802564e:	2b00      	cmp	r3, #0
 8025650:	d120      	bne.n	8025694 <OBJ_Write+0x94>
 8025652:	89fb      	ldrh	r3, [r7, #14]
 8025654:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8025658:	4293      	cmp	r3, r2
 802565a:	d904      	bls.n	8025666 <OBJ_Write+0x66>
 802565c:	89fb      	ldrh	r3, [r7, #14]
 802565e:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8025662:	4293      	cmp	r3, r2
 8025664:	d914      	bls.n	8025690 <OBJ_Write+0x90>
 8025666:	89fb      	ldrh	r3, [r7, #14]
 8025668:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 802566c:	d303      	bcc.n	8025676 <OBJ_Write+0x76>
 802566e:	89fb      	ldrh	r3, [r7, #14]
 8025670:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8025674:	d30c      	bcc.n	8025690 <OBJ_Write+0x90>
 8025676:	89fb      	ldrh	r3, [r7, #14]
 8025678:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 802567c:	d303      	bcc.n	8025686 <OBJ_Write+0x86>
 802567e:	89fb      	ldrh	r3, [r7, #14]
 8025680:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8025684:	d304      	bcc.n	8025690 <OBJ_Write+0x90>
 8025686:	89fb      	ldrh	r3, [r7, #14]
 8025688:	f24f 0230 	movw	r2, #61488	; 0xf030
 802568c:	4293      	cmp	r3, r2
 802568e:	d101      	bne.n	8025694 <OBJ_Write+0x94>
/*ECATCHANGE_END(V5.12) COE9*/
        {
            maxSubindex = maxConfiguredSubindex;
 8025690:	8c3b      	ldrh	r3, [r7, #32]
 8025692:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8025694:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025698:	2b00      	cmp	r3, #0
 802569a:	d012      	beq.n	80256c2 <OBJ_Write+0xc2>
    {
        if ( objCode == OBJCODE_VAR )
 802569c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80256a0:	2b07      	cmp	r3, #7
 80256a2:	d101      	bne.n	80256a8 <OBJ_Write+0xa8>
        {
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 80256a4:	2305      	movs	r3, #5
 80256a6:	e30f      	b.n	8025cc8 <OBJ_Write+0x6c8>
        }

        if ((subindex == 0) && (dataSize > 0))
 80256a8:	7b7b      	ldrb	r3, [r7, #13]
 80256aa:	2b00      	cmp	r3, #0
 80256ac:	d106      	bne.n	80256bc <OBJ_Write+0xbc>
 80256ae:	68bb      	ldr	r3, [r7, #8]
 80256b0:	2b00      	cmp	r3, #0
 80256b2:	d003      	beq.n	80256bc <OBJ_Write+0xbc>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 80256b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80256b6:	881b      	ldrh	r3, [r3, #0]
 80256b8:	b2db      	uxtb	r3, r3
 80256ba:	86bb      	strh	r3, [r7, #52]	; 0x34
        }


        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 80256bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80256be:	863b      	strh	r3, [r7, #48]	; 0x30
 80256c0:	e02a      	b.n	8025718 <OBJ_Write+0x118>
    }
    else
    if (subindex > maxSubindex)
 80256c2:	7b7b      	ldrb	r3, [r7, #13]
 80256c4:	b29b      	uxth	r3, r3
 80256c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80256c8:	429a      	cmp	r2, r3
 80256ca:	d201      	bcs.n	80256d0 <OBJ_Write+0xd0>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80256cc:	2311      	movs	r3, #17
 80256ce:	e2fb      	b.n	8025cc8 <OBJ_Write+0x6c8>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 80256d0:	7b7b      	ldrb	r3, [r7, #13]
 80256d2:	6878      	ldr	r0, [r7, #4]
 80256d4:	4619      	mov	r1, r3
 80256d6:	f7ff fafb 	bl	8024cd0 <OBJ_GetEntryDesc>
 80256da:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
        if (0 == (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 80256dc:	69fb      	ldr	r3, [r7, #28]
 80256de:	889b      	ldrh	r3, [r3, #4]
 80256e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80256e4:	109b      	asrs	r3, r3, #2
 80256e6:	b2db      	uxtb	r3, r3
 80256e8:	461a      	mov	r2, r3
 80256ea:	4ba2      	ldr	r3, [pc, #648]	; (8025974 <OBJ_Write+0x374>)
 80256ec:	781b      	ldrb	r3, [r3, #0]
 80256ee:	f003 030f 	and.w	r3, r3, #15
 80256f2:	4013      	ands	r3, r2
 80256f4:	2b00      	cmp	r3, #0
 80256f6:	d10f      	bne.n	8025718 <OBJ_Write+0x118>
/*ECATCHANGE_END(V5.12) COE3*/
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 80256f8:	69fb      	ldr	r3, [r7, #28]
 80256fa:	889b      	ldrh	r3, [r3, #4]
 80256fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025700:	2b00      	cmp	r3, #0
 8025702:	d107      	bne.n	8025714 <OBJ_Write+0x114>
            {
/* ECATCHANGE_START(V5.12) COE7*/
                if (pEntry->ObjAccess == 0)
 8025704:	69fb      	ldr	r3, [r7, #28]
 8025706:	889b      	ldrh	r3, [r3, #4]
 8025708:	2b00      	cmp	r3, #0
 802570a:	d101      	bne.n	8025710 <OBJ_Write+0x110>
                {
                        return ABORTIDX_UNSUPPORTED_ACCESS;
 802570c:	2305      	movs	r3, #5
 802570e:	e2db      	b.n	8025cc8 <OBJ_Write+0x6c8>
                }
/* ECATCHANGE_END(V5.12) COE7*/
                else
                {
                        /* it is a read only entry */
                        return ABORTIDX_READ_ONLY_ENTRY;
 8025710:	2307      	movs	r3, #7
 8025712:	e2d9      	b.n	8025cc8 <OBJ_Write+0x6c8>
                }
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8025714:	231a      	movs	r3, #26
 8025716:	e2d7      	b.n	8025cc8 <OBJ_Write+0x6c8>
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
/*ECATCHANGE_START(V5.12) COE9*/
    if((subindex > 0) &&
 8025718:	7b7b      	ldrb	r3, [r7, #13]
 802571a:	2b00      	cmp	r3, #0
 802571c:	d029      	beq.n	8025772 <OBJ_Write+0x172>
 802571e:	89fb      	ldrh	r3, [r7, #14]
 8025720:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8025724:	4293      	cmp	r3, r2
 8025726:	d904      	bls.n	8025732 <OBJ_Write+0x132>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index) || (index == 0xF030))
 8025728:	89fb      	ldrh	r3, [r7, #14]
 802572a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 802572e:	4293      	cmp	r3, r2
 8025730:	d914      	bls.n	802575c <OBJ_Write+0x15c>
 8025732:	89fb      	ldrh	r3, [r7, #14]
 8025734:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8025738:	d303      	bcc.n	8025742 <OBJ_Write+0x142>
 802573a:	89fb      	ldrh	r3, [r7, #14]
 802573c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8025740:	d30c      	bcc.n	802575c <OBJ_Write+0x15c>
 8025742:	89fb      	ldrh	r3, [r7, #14]
 8025744:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8025748:	d303      	bcc.n	8025752 <OBJ_Write+0x152>
 802574a:	89fb      	ldrh	r3, [r7, #14]
 802574c:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8025750:	d304      	bcc.n	802575c <OBJ_Write+0x15c>
 8025752:	89fb      	ldrh	r3, [r7, #14]
 8025754:	f24f 0230 	movw	r2, #61488	; 0xf030
 8025758:	4293      	cmp	r3, r2
 802575a:	d10a      	bne.n	8025772 <OBJ_Write+0x172>
/*ECATCHANGE_END(V5.12) COE9*/
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	699b      	ldr	r3, [r3, #24]
 8025760:	881b      	ldrh	r3, [r3, #0]
 8025762:	b2db      	uxtb	r3, r3
 8025764:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 8025766:	8b7b      	ldrh	r3, [r7, #26]
 8025768:	2b00      	cmp	r3, #0
 802576a:	d002      	beq.n	8025772 <OBJ_Write+0x172>
        {
            bClearSubindex0Required = TRUE;
 802576c:	2301      	movs	r3, #1
 802576e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    }

    if ( pObjEntry->Write != NULL )
 8025772:	687b      	ldr	r3, [r7, #4]
 8025774:	6a1b      	ldr	r3, [r3, #32]
 8025776:	2b00      	cmp	r3, #0
 8025778:	d00d      	beq.n	8025796 <OBJ_Write+0x196>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 802577a:	687b      	ldr	r3, [r7, #4]
 802577c:	6a1c      	ldr	r4, [r3, #32]
 802577e:	89f9      	ldrh	r1, [r7, #14]
 8025780:	7b7a      	ldrb	r2, [r7, #13]
 8025782:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025786:	9300      	str	r3, [sp, #0]
 8025788:	4608      	mov	r0, r1
 802578a:	4611      	mov	r1, r2
 802578c:	68ba      	ldr	r2, [r7, #8]
 802578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025790:	47a0      	blx	r4
 8025792:	4603      	mov	r3, r0
 8025794:	e298      	b.n	8025cc8 <OBJ_Write+0x6c8>
    }
    else
    {
        UINT8 bWritten = 0;
 8025796:	2300      	movs	r3, #0
 8025798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 802579c:	2307      	movs	r3, #7
 802579e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if (dataSize == 0)
 80257a2:	68bb      	ldr	r3, [r7, #8]
 80257a4:	2b00      	cmp	r3, #0
 80257a6:	d101      	bne.n	80257ac <OBJ_Write+0x1ac>
        {
           return 0; //no error
 80257a8:	2300      	movs	r3, #0
 80257aa:	e28d      	b.n	8025cc8 <OBJ_Write+0x6c8>
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 80257ac:	7b7b      	ldrb	r3, [r7, #13]
 80257ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80257b0:	e27d      	b.n	8025cae <OBJ_Write+0x6ae>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	699b      	ldr	r3, [r3, #24]
 80257b6:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 80257b8:	2300      	movs	r3, #0
 80257ba:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 80257bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80257be:	b2db      	uxtb	r3, r3
 80257c0:	6878      	ldr	r0, [r7, #4]
 80257c2:	4619      	mov	r1, r3
 80257c4:	f7ff fa84 	bl	8024cd0 <OBJ_GetEntryDesc>
 80257c8:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80257ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80257cc:	b2db      	uxtb	r3, r3
 80257ce:	4618      	mov	r0, r3
 80257d0:	6879      	ldr	r1, [r7, #4]
 80257d2:	f7ff fab5 	bl	8024d40 <OBJ_GetEntryOffset>
 80257d6:	4603      	mov	r3, r0
 80257d8:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
            if (0 != (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 80257da:	69fb      	ldr	r3, [r7, #28]
 80257dc:	889b      	ldrh	r3, [r3, #4]
 80257de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80257e2:	109b      	asrs	r3, r3, #2
 80257e4:	b2db      	uxtb	r3, r3
 80257e6:	461a      	mov	r2, r3
 80257e8:	4b62      	ldr	r3, [pc, #392]	; (8025974 <OBJ_Write+0x374>)
 80257ea:	781b      	ldrb	r3, [r3, #0]
 80257ec:	f003 030f 	and.w	r3, r3, #15
 80257f0:	4013      	ands	r3, r2
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	f000 8235 	beq.w	8025c62 <OBJ_Write+0x662>
/*ECATCHANGE_END(V5.12) COE3*/
            {
                /* we have write access for this entry */
                if (i != 0)
 80257f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	d006      	beq.n	802580c <OBJ_Write+0x20c>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 80257fe:	8b3b      	ldrh	r3, [r7, #24]
 8025800:	091b      	lsrs	r3, r3, #4
 8025802:	b29b      	uxth	r3, r3
 8025804:	005b      	lsls	r3, r3, #1
 8025806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025808:	4413      	add	r3, r2
 802580a:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 802580c:	7b7b      	ldrb	r3, [r7, #13]
 802580e:	b29b      	uxth	r3, r3
 8025810:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025812:	429a      	cmp	r2, r3
 8025814:	d00a      	beq.n	802582c <OBJ_Write+0x22c>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8025816:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802581a:	2b00      	cmp	r3, #0
 802581c:	f000 8244 	beq.w	8025ca8 <OBJ_Write+0x6a8>
 8025820:	7b7b      	ldrb	r3, [r7, #13]
 8025822:	b29b      	uxth	r3, r3
 8025824:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025826:	429a      	cmp	r2, r3
 8025828:	f0c0 823e 	bcc.w	8025ca8 <OBJ_Write+0x6a8>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 802582c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802582e:	2b00      	cmp	r3, #0
 8025830:	d115      	bne.n	802585e <OBJ_Write+0x25e>
 8025832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025836:	2b07      	cmp	r3, #7
 8025838:	d011      	beq.n	802585e <OBJ_Write+0x25e>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 802583a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802583c:	881b      	ldrh	r3, [r3, #0]
 802583e:	74fb      	strb	r3, [r7, #19]
                        
                        if(maxConfiguredSubindex < NewSubindex0)
 8025840:	7cfb      	ldrb	r3, [r7, #19]
 8025842:	b29b      	uxth	r3, r3
 8025844:	8c3a      	ldrh	r2, [r7, #32]
 8025846:	429a      	cmp	r2, r3
 8025848:	d201      	bcs.n	802584e <OBJ_Write+0x24e>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 802584a:	2313      	movs	r3, #19
 802584c:	e23c      	b.n	8025cc8 <OBJ_Write+0x6c8>
                        }

                        /* subindex 0 of an array or record shall be written */
                        pVarPtr[0] = SWAPWORD(pData[0]);
 802584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025850:	881a      	ldrh	r2, [r3, #0]
 8025852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025854:	801a      	strh	r2, [r3, #0]
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 8025856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025858:	3302      	adds	r3, #2
 802585a:	64bb      	str	r3, [r7, #72]	; 0x48
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
                    {
 802585c:	e1fd      	b.n	8025c5a <OBJ_Write+0x65a>
                           transmitted as UINT16 for a complete access */
                        pData++;
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 802585e:	69fb      	ldr	r3, [r7, #28]
 8025860:	881b      	ldrh	r3, [r3, #0]
 8025862:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 8025864:	69fb      	ldr	r3, [r7, #28]
 8025866:	881b      	ldrh	r3, [r3, #0]
 8025868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802586c:	d315      	bcc.n	802589a <OBJ_Write+0x29a>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 802586e:	69fb      	ldr	r3, [r7, #28]
 8025870:	885b      	ldrh	r3, [r3, #2]
 8025872:	2b08      	cmp	r3, #8
 8025874:	d804      	bhi.n	8025880 <OBJ_Write+0x280>
                            {
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8025876:	69fb      	ldr	r3, [r7, #28]
 8025878:	885b      	ldrh	r3, [r3, #2]
 802587a:	332f      	adds	r3, #47	; 0x2f
 802587c:	84fb      	strh	r3, [r7, #38]	; 0x26
 802587e:	e00c      	b.n	802589a <OBJ_Write+0x29a>
                            }
                            else if ( pEntry->BitLength == 16 )
 8025880:	69fb      	ldr	r3, [r7, #28]
 8025882:	885b      	ldrh	r3, [r3, #2]
 8025884:	2b10      	cmp	r3, #16
 8025886:	d102      	bne.n	802588e <OBJ_Write+0x28e>
                            {
                                dataType = DEFTYPE_UNSIGNED16;
 8025888:	2306      	movs	r3, #6
 802588a:	84fb      	strh	r3, [r7, #38]	; 0x26
 802588c:	e005      	b.n	802589a <OBJ_Write+0x29a>
                            }
                            else if ( pEntry->BitLength == 32 )
 802588e:	69fb      	ldr	r3, [r7, #28]
 8025890:	885b      	ldrh	r3, [r3, #2]
 8025892:	2b20      	cmp	r3, #32
 8025894:	d101      	bne.n	802589a <OBJ_Write+0x29a>
                            {
                                dataType = DEFTYPE_UNSIGNED32;
 8025896:	2307      	movs	r3, #7
 8025898:	84fb      	strh	r3, [r7, #38]	; 0x26
                            }
                        }

                        switch (dataType)
 802589a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802589c:	2b11      	cmp	r3, #17
 802589e:	f000 817b 	beq.w	8025b98 <OBJ_Write+0x598>
 80258a2:	2b11      	cmp	r3, #17
 80258a4:	dc1e      	bgt.n	80258e4 <OBJ_Write+0x2e4>
 80258a6:	2b05      	cmp	r3, #5
 80258a8:	d066      	beq.n	8025978 <OBJ_Write+0x378>
 80258aa:	2b05      	cmp	r3, #5
 80258ac:	dc0d      	bgt.n	80258ca <OBJ_Write+0x2ca>
 80258ae:	2b02      	cmp	r3, #2
 80258b0:	dc04      	bgt.n	80258bc <OBJ_Write+0x2bc>
 80258b2:	2b01      	cmp	r3, #1
 80258b4:	da60      	bge.n	8025978 <OBJ_Write+0x378>
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d03b      	beq.n	8025932 <OBJ_Write+0x332>
 80258ba:	e1cc      	b.n	8025c56 <OBJ_Write+0x656>
 80258bc:	2b03      	cmp	r3, #3
 80258be:	f000 80b5 	beq.w	8025a2c <OBJ_Write+0x42c>
 80258c2:	2b04      	cmp	r3, #4
 80258c4:	f000 8140 	beq.w	8025b48 <OBJ_Write+0x548>
 80258c8:	e1c5      	b.n	8025c56 <OBJ_Write+0x656>
 80258ca:	2b08      	cmp	r3, #8
 80258cc:	dc03      	bgt.n	80258d6 <OBJ_Write+0x2d6>
 80258ce:	2b07      	cmp	r3, #7
 80258d0:	f280 813a 	bge.w	8025b48 <OBJ_Write+0x548>
 80258d4:	e0aa      	b.n	8025a2c <OBJ_Write+0x42c>
 80258d6:	2b09      	cmp	r3, #9
 80258d8:	f000 817c 	beq.w	8025bd4 <OBJ_Write+0x5d4>
 80258dc:	2b0b      	cmp	r3, #11
 80258de:	f300 81ba 	bgt.w	8025c56 <OBJ_Write+0x656>
 80258e2:	e19d      	b.n	8025c20 <OBJ_Write+0x620>
 80258e4:	2b2d      	cmp	r3, #45	; 0x2d
 80258e6:	d047      	beq.n	8025978 <OBJ_Write+0x378>
 80258e8:	2b2d      	cmp	r3, #45	; 0x2d
 80258ea:	dc11      	bgt.n	8025910 <OBJ_Write+0x310>
 80258ec:	2b1e      	cmp	r3, #30
 80258ee:	d043      	beq.n	8025978 <OBJ_Write+0x378>
 80258f0:	2b1e      	cmp	r3, #30
 80258f2:	dc06      	bgt.n	8025902 <OBJ_Write+0x302>
 80258f4:	2b15      	cmp	r3, #21
 80258f6:	f000 814f 	beq.w	8025b98 <OBJ_Write+0x598>
 80258fa:	2b1b      	cmp	r3, #27
 80258fc:	f000 814c 	beq.w	8025b98 <OBJ_Write+0x598>
 8025900:	e1a9      	b.n	8025c56 <OBJ_Write+0x656>
 8025902:	2b1f      	cmp	r3, #31
 8025904:	f000 8092 	beq.w	8025a2c <OBJ_Write+0x42c>
 8025908:	2b20      	cmp	r3, #32
 802590a:	f000 811d 	beq.w	8025b48 <OBJ_Write+0x548>
 802590e:	e1a2      	b.n	8025c56 <OBJ_Write+0x656>
 8025910:	2b37      	cmp	r3, #55	; 0x37
 8025912:	dc08      	bgt.n	8025926 <OBJ_Write+0x326>
 8025914:	2b30      	cmp	r3, #48	; 0x30
 8025916:	da2f      	bge.n	8025978 <OBJ_Write+0x378>
 8025918:	2b2e      	cmp	r3, #46	; 0x2e
 802591a:	f000 8087 	beq.w	8025a2c <OBJ_Write+0x42c>
 802591e:	2b2f      	cmp	r3, #47	; 0x2f
 8025920:	f000 8112 	beq.w	8025b48 <OBJ_Write+0x548>
 8025924:	e197      	b.n	8025c56 <OBJ_Write+0x656>
 8025926:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 802592a:	2b03      	cmp	r3, #3
 802592c:	f200 8193 	bhi.w	8025c56 <OBJ_Write+0x656>
 8025930:	e176      	b.n	8025c20 <OBJ_Write+0x620>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 8025932:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8025936:	2b00      	cmp	r3, #0
 8025938:	d01a      	beq.n	8025970 <OBJ_Write+0x370>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 802593a:	69fb      	ldr	r3, [r7, #28]
 802593c:	885b      	ldrh	r3, [r3, #2]
 802593e:	f003 030f 	and.w	r3, r3, #15
 8025942:	2b00      	cmp	r3, #0
 8025944:	dd0a      	ble.n	802595c <OBJ_Write+0x35c>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025946:	8b3b      	ldrh	r3, [r7, #24]
 8025948:	69fa      	ldr	r2, [r7, #28]
 802594a:	8852      	ldrh	r2, [r2, #2]
 802594c:	4413      	add	r3, r2
 802594e:	f003 030f 	and.w	r3, r3, #15
 8025952:	2b00      	cmp	r3, #0
 8025954:	d102      	bne.n	802595c <OBJ_Write+0x35c>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8025956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025958:	3302      	adds	r3, #2
 802595a:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 802595c:	69fb      	ldr	r3, [r7, #28]
 802595e:	885b      	ldrh	r3, [r3, #2]
 8025960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025964:	111b      	asrs	r3, r3, #4
 8025966:	005b      	lsls	r3, r3, #1
 8025968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802596a:	4413      	add	r3, r2
 802596c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 802596e:	e174      	b.n	8025c5a <OBJ_Write+0x65a>
                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8025970:	2318      	movs	r3, #24
 8025972:	e1a9      	b.n	8025cc8 <OBJ_Write+0x6c8>
 8025974:	1ffea851 	.word	0x1ffea851
                        case    DEFTYPE_INTEGER8:
                        case    DEFTYPE_UNSIGNED8:
                        case    DEFTYPE_BYTE :
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8025978:	2300      	movs	r3, #0
 802597a:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 802597c:	69fb      	ldr	r3, [r7, #28]
 802597e:	885b      	ldrh	r3, [r3, #2]
 8025980:	461a      	mov	r2, r3
 8025982:	4ba2      	ldr	r3, [pc, #648]	; (8025c0c <OBJ_Write+0x60c>)
 8025984:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8025988:	461a      	mov	r2, r3
 802598a:	8b3b      	ldrh	r3, [r7, #24]
 802598c:	f003 030f 	and.w	r3, r3, #15
 8025990:	fa02 f303 	lsl.w	r3, r2, r3
 8025994:	82fb      	strh	r3, [r7, #22]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8025996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025998:	881b      	ldrh	r3, [r3, #0]
 802599a:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 802599c:	8afb      	ldrh	r3, [r7, #22]
 802599e:	43db      	mvns	r3, r3
 80259a0:	b29a      	uxth	r2, r3
 80259a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80259a4:	4013      	ands	r3, r2
 80259a6:	b29b      	uxth	r3, r3
 80259a8:	84bb      	strh	r3, [r7, #36]	; 0x24

                            if (bCompleteAccess) 
 80259aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80259ae:	2b00      	cmp	r3, #0
 80259b0:	d008      	beq.n	80259c4 <OBJ_Write+0x3c4>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 80259b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80259b4:	881a      	ldrh	r2, [r3, #0]
 80259b6:	8afb      	ldrh	r3, [r7, #22]
 80259b8:	4013      	ands	r3, r2
 80259ba:	b29a      	uxth	r2, r3
 80259bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80259be:	4313      	orrs	r3, r2
 80259c0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80259c2:	e023      	b.n	8025a0c <OBJ_Write+0x40c>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 80259c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80259c6:	881b      	ldrh	r3, [r3, #0]
 80259c8:	461a      	mov	r2, r3
 80259ca:	69fb      	ldr	r3, [r7, #28]
 80259cc:	885b      	ldrh	r3, [r3, #2]
 80259ce:	4619      	mov	r1, r3
 80259d0:	4b8e      	ldr	r3, [pc, #568]	; (8025c0c <OBJ_Write+0x60c>)
 80259d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80259d6:	43db      	mvns	r3, r3
 80259d8:	4013      	ands	r3, r2
 80259da:	2b00      	cmp	r3, #0
 80259dc:	d001      	beq.n	80259e2 <OBJ_Write+0x3e2>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 80259de:	2312      	movs	r3, #18
 80259e0:	e172      	b.n	8025cc8 <OBJ_Write+0x6c8>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 80259e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80259e4:	881a      	ldrh	r2, [r3, #0]
 80259e6:	69fb      	ldr	r3, [r7, #28]
 80259e8:	885b      	ldrh	r3, [r3, #2]
 80259ea:	4619      	mov	r1, r3
 80259ec:	4b87      	ldr	r3, [pc, #540]	; (8025c0c <OBJ_Write+0x60c>)
 80259ee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80259f2:	4013      	ands	r3, r2
 80259f4:	b29b      	uxth	r3, r3
 80259f6:	461a      	mov	r2, r3
 80259f8:	8b3b      	ldrh	r3, [r7, #24]
 80259fa:	f003 030f 	and.w	r3, r3, #15
 80259fe:	fa02 f303 	lsl.w	r3, r2, r3
 8025a02:	b29a      	uxth	r2, r3
 8025a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025a06:	4313      	orrs	r3, r2
 8025a08:	b29b      	uxth	r3, r3
 8025a0a:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8025a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025a10:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8025a12:	8b3b      	ldrh	r3, [r7, #24]
 8025a14:	69fa      	ldr	r2, [r7, #28]
 8025a16:	8852      	ldrh	r2, [r2, #2]
 8025a18:	4413      	add	r3, r2
 8025a1a:	f003 030f 	and.w	r3, r3, #15
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d103      	bne.n	8025a2a <OBJ_Write+0x42a>
                            {
                                /* we have reached the UINT16 border */
                                pData++;
 8025a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a24:	3302      	adds	r3, #2
 8025a26:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                        }
                            break;
 8025a28:	e117      	b.n	8025c5a <OBJ_Write+0x65a>
 8025a2a:	e116      	b.n	8025c5a <OBJ_Write+0x65a>
                        case    DEFTYPE_INTEGER16:
                        case    DEFTYPE_UNSIGNED16:
                        case    DEFTYPE_BITARR16:
                        case    DEFTYPE_WORD:
                            if(bitOffset & 0xF)
 8025a2c:	8b3b      	ldrh	r3, [r7, #24]
 8025a2e:	f003 030f 	and.w	r3, r3, #15
 8025a32:	2b00      	cmp	r3, #0
 8025a34:	d001      	beq.n	8025a3a <OBJ_Write+0x43a>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025a36:	2305      	movs	r3, #5
 8025a38:	e146      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8025a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a3c:	881b      	ldrh	r3, [r3, #0]
 8025a3e:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8025a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025a44:	2b00      	cmp	r3, #0
 8025a46:	d006      	beq.n	8025a56 <OBJ_Write+0x456>
 8025a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a4a:	881b      	ldrh	r3, [r3, #0]
 8025a4c:	8aba      	ldrh	r2, [r7, #20]
 8025a4e:	429a      	cmp	r2, r3
 8025a50:	d001      	beq.n	8025a56 <OBJ_Write+0x456>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8025a52:	231c      	movs	r3, #28
 8025a54:	e138      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 8025a56:	89fb      	ldrh	r3, [r7, #14]
 8025a58:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8025a5c:	4293      	cmp	r3, r2
 8025a5e:	d919      	bls.n	8025a94 <OBJ_Write+0x494>
 8025a60:	89fb      	ldrh	r3, [r7, #14]
 8025a62:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8025a66:	4293      	cmp	r3, r2
 8025a68:	d814      	bhi.n	8025a94 <OBJ_Write+0x494>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8025a6a:	8abb      	ldrh	r3, [r7, #20]
 8025a6c:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8025a70:	d303      	bcc.n	8025a7a <OBJ_Write+0x47a>
 8025a72:	8abb      	ldrh	r3, [r7, #20]
 8025a74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8025a78:	d30c      	bcc.n	8025a94 <OBJ_Write+0x494>
 8025a7a:	8abb      	ldrh	r3, [r7, #20]
 8025a7c:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8025a80:	d303      	bcc.n	8025a8a <OBJ_Write+0x48a>
 8025a82:	8abb      	ldrh	r3, [r7, #20]
 8025a84:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8025a88:	d304      	bcc.n	8025a94 <OBJ_Write+0x494>
 8025a8a:	8abb      	ldrh	r3, [r7, #20]
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	d001      	beq.n	8025a94 <OBJ_Write+0x494>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8025a90:	2312      	movs	r3, #18
 8025a92:	e119      	b.n	8025cc8 <OBJ_Write+0x6c8>
                                }
                            }

                            if(index == 0x1C32 || index == 0x1C33)
 8025a94:	89fb      	ldrh	r3, [r7, #14]
 8025a96:	f641 4232 	movw	r2, #7218	; 0x1c32
 8025a9a:	4293      	cmp	r3, r2
 8025a9c:	d004      	beq.n	8025aa8 <OBJ_Write+0x4a8>
 8025a9e:	89fb      	ldrh	r3, [r7, #14]
 8025aa0:	f641 4233 	movw	r2, #7219	; 0x1c33
 8025aa4:	4293      	cmp	r3, r2
 8025aa6:	d148      	bne.n	8025b3a <OBJ_Write+0x53a>
                            {
                               if (i == 1) /* "Synchronisation type" written */
 8025aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025aaa:	2b01      	cmp	r3, #1
 8025aac:	d117      	bne.n	8025ade <OBJ_Write+0x4de>
                               {
                                  /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                  if (pVarPtr[0] != u16NewData)
 8025aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ab0:	881b      	ldrh	r3, [r3, #0]
 8025ab2:	8aba      	ldrh	r2, [r7, #20]
 8025ab4:	429a      	cmp	r2, r3
 8025ab6:	d00f      	beq.n	8025ad8 <OBJ_Write+0x4d8>
                                  {
                                     result = CheckSyncTypeValue(index, u16NewData);
 8025ab8:	89fa      	ldrh	r2, [r7, #14]
 8025aba:	8abb      	ldrh	r3, [r7, #20]
 8025abc:	4610      	mov	r0, r2
 8025abe:	4619      	mov	r1, r3
 8025ac0:	f7ff f9f0 	bl	8024ea4 <CheckSyncTypeValue>
 8025ac4:	4603      	mov	r3, r0
 8025ac6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                     if (result != 0)
 8025aca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025ace:	2b00      	cmp	r3, #0
 8025ad0:	d002      	beq.n	8025ad8 <OBJ_Write+0x4d8>
                                     {
                                        return result;
 8025ad2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025ad6:	e0f7      	b.n	8025cc8 <OBJ_Write+0x6c8>
                                     }
                                  }

                                  /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                  bSyncSetByUser = TRUE;
 8025ad8:	4b4d      	ldr	r3, [pc, #308]	; (8025c10 <OBJ_Write+0x610>)
 8025ada:	2201      	movs	r2, #1
 8025adc:	701a      	strb	r2, [r3, #0]
                               }

/*ECATCHANGE_START(V5.12) ECAT1*/
                               if (i == 8) /* "Get Cycle Time" written*/
 8025ade:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025ae0:	2b08      	cmp	r3, #8
 8025ae2:	d12a      	bne.n	8025b3a <OBJ_Write+0x53a>
                               {

                                   sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8025ae4:	4b4b      	ldr	r3, [pc, #300]	; (8025c14 <OBJ_Write+0x614>)
 8025ae6:	2200      	movs	r2, #0
 8025ae8:	615a      	str	r2, [r3, #20]
                                   sSyncManOutPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 8025aea:	4b4a      	ldr	r3, [pc, #296]	; (8025c14 <OBJ_Write+0x614>)
 8025aec:	4a4a      	ldr	r2, [pc, #296]	; (8025c18 <OBJ_Write+0x618>)
 8025aee:	611a      	str	r2, [r3, #16]
                                   sSyncManOutPar.u32CycleTime = 0;
 8025af0:	4b48      	ldr	r3, [pc, #288]	; (8025c14 <OBJ_Write+0x614>)
 8025af2:	2200      	movs	r2, #0
 8025af4:	605a      	str	r2, [r3, #4]

                                   sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8025af6:	4b49      	ldr	r3, [pc, #292]	; (8025c1c <OBJ_Write+0x61c>)
 8025af8:	2200      	movs	r2, #0
 8025afa:	615a      	str	r2, [r3, #20]
                                   sSyncManInPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 8025afc:	4b47      	ldr	r3, [pc, #284]	; (8025c1c <OBJ_Write+0x61c>)
 8025afe:	4a46      	ldr	r2, [pc, #280]	; (8025c18 <OBJ_Write+0x618>)
 8025b00:	611a      	str	r2, [r3, #16]
                                   sSyncManInPar.u32CycleTime = 0;
 8025b02:	4b46      	ldr	r3, [pc, #280]	; (8025c1c <OBJ_Write+0x61c>)
 8025b04:	2200      	movs	r2, #0
 8025b06:	605a      	str	r2, [r3, #4]


                                  if ((u16NewData & 0x2) == 0x2)
 8025b08:	8abb      	ldrh	r3, [r7, #20]
 8025b0a:	f003 0302 	and.w	r3, r3, #2
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	d013      	beq.n	8025b3a <OBJ_Write+0x53a>
                                  {
                                     /* reset the error counters*/
                                     sSyncManOutPar.u16CycleExceededCounter = 0;
 8025b12:	4b40      	ldr	r3, [pc, #256]	; (8025c14 <OBJ_Write+0x614>)
 8025b14:	2200      	movs	r2, #0
 8025b16:	855a      	strh	r2, [r3, #42]	; 0x2a
                                     sSyncManOutPar.u16SmEventMissedCounter = 0;
 8025b18:	4b3e      	ldr	r3, [pc, #248]	; (8025c14 <OBJ_Write+0x614>)
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	851a      	strh	r2, [r3, #40]	; 0x28
                                     sSyncManOutPar.u8SyncError = 0;
 8025b1e:	4b3d      	ldr	r3, [pc, #244]	; (8025c14 <OBJ_Write+0x614>)
 8025b20:	2200      	movs	r2, #0
 8025b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                                     sSyncManInPar.u16CycleExceededCounter = 0;
 8025b26:	4b3d      	ldr	r3, [pc, #244]	; (8025c1c <OBJ_Write+0x61c>)
 8025b28:	2200      	movs	r2, #0
 8025b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
                                     sSyncManInPar.u16SmEventMissedCounter = 0;
 8025b2c:	4b3b      	ldr	r3, [pc, #236]	; (8025c1c <OBJ_Write+0x61c>)
 8025b2e:	2200      	movs	r2, #0
 8025b30:	851a      	strh	r2, [r3, #40]	; 0x28
                                     sSyncManInPar.u8SyncError = 0;
 8025b32:	4b3a      	ldr	r3, [pc, #232]	; (8025c1c <OBJ_Write+0x61c>)
 8025b34:	2200      	movs	r2, #0
 8025b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                  }
                               } /* Subindex 8 written*/
/*ECATCHANGE_END(V5.12) ECAT1*/
                            }

                            pVarPtr[0] = u16NewData;
 8025b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b3c:	8aba      	ldrh	r2, [r7, #20]
 8025b3e:	801a      	strh	r2, [r3, #0]
                            pData++;
 8025b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b42:	3302      	adds	r3, #2
 8025b44:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8025b46:	e088      	b.n	8025c5a <OBJ_Write+0x65a>
                        case    DEFTYPE_UNSIGNED32:
                        case    DEFTYPE_INTEGER32:
                        case    DEFTYPE_REAL32:
                        case    DEFTYPE_BITARR32:
                        case    DEFTYPE_DWORD:
                            if(bitOffset & 0xF)
 8025b48:	8b3b      	ldrh	r3, [r7, #24]
 8025b4a:	f003 030f 	and.w	r3, r3, #15
 8025b4e:	2b00      	cmp	r3, #0
 8025b50:	d001      	beq.n	8025b56 <OBJ_Write+0x556>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025b52:	2305      	movs	r3, #5
 8025b54:	e0b8      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8025b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025b5a:	2b00      	cmp	r3, #0
 8025b5c:	d00f      	beq.n	8025b7e <OBJ_Write+0x57e>
                                ((pVarPtr[0] != pData[0])
 8025b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b60:	881a      	ldrh	r2, [r3, #0]
 8025b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b64:	881b      	ldrh	r3, [r3, #0]
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8025b66:	429a      	cmp	r2, r3
 8025b68:	d107      	bne.n	8025b7a <OBJ_Write+0x57a>
                                ((pVarPtr[0] != pData[0])
                                || (pVarPtr[1] != pData[1])))
 8025b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b6c:	3302      	adds	r3, #2
 8025b6e:	881a      	ldrh	r2, [r3, #0]
 8025b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b72:	3302      	adds	r3, #2
 8025b74:	881b      	ldrh	r3, [r3, #0]
 8025b76:	429a      	cmp	r2, r3
 8025b78:	d001      	beq.n	8025b7e <OBJ_Write+0x57e>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8025b7a:	231c      	movs	r3, #28
 8025b7c:	e0a4      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }

                            pVarPtr[0] = pData[0];
 8025b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b80:	881a      	ldrh	r2, [r3, #0]
 8025b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b84:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8025b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b88:	3302      	adds	r3, #2
 8025b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025b8c:	8852      	ldrh	r2, [r2, #2]
 8025b8e:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8025b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b92:	3304      	adds	r3, #4
 8025b94:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8025b96:	e060      	b.n	8025c5a <OBJ_Write+0x65a>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
                            if(bitOffset & 0xF)
 8025b98:	8b3b      	ldrh	r3, [r7, #24]
 8025b9a:	f003 030f 	and.w	r3, r3, #15
 8025b9e:	2b00      	cmp	r3, #0
 8025ba0:	d001      	beq.n	8025ba6 <OBJ_Write+0x5a6>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025ba2:	2305      	movs	r3, #5
 8025ba4:	e090      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8025ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025ba8:	881a      	ldrh	r2, [r3, #0]
 8025baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bac:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8025bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bb0:	3302      	adds	r3, #2
 8025bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025bb4:	8852      	ldrh	r2, [r2, #2]
 8025bb6:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8025bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bba:	3304      	adds	r3, #4
 8025bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025bbe:	8892      	ldrh	r2, [r2, #4]
 8025bc0:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8025bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bc4:	3306      	adds	r3, #6
 8025bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025bc8:	88d2      	ldrh	r2, [r2, #6]
 8025bca:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 8025bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025bce:	3308      	adds	r3, #8
 8025bd0:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 8025bd2:	e042      	b.n	8025c5a <OBJ_Write+0x65a>
                        case    DEFTYPE_VISIBLESTRING:
                            if(bitOffset & 0xF)
 8025bd4:	8b3b      	ldrh	r3, [r7, #24]
 8025bd6:	f003 030f 	and.w	r3, r3, #15
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	d001      	beq.n	8025be2 <OBJ_Write+0x5e2>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025bde:	2305      	movs	r3, #5
 8025be0:	e072      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8025be2:	69fb      	ldr	r3, [r7, #28]
 8025be4:	885b      	ldrh	r3, [r3, #2]
 8025be6:	3307      	adds	r3, #7
 8025be8:	10db      	asrs	r3, r3, #3
 8025bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025bec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025bee:	461a      	mov	r2, r3
 8025bf0:	f005 f812 	bl	802ac18 <memcpy>

                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 8025bf4:	69fb      	ldr	r3, [r7, #28]
 8025bf6:	885b      	ldrh	r3, [r3, #2]
 8025bf8:	f023 030f 	bic.w	r3, r3, #15
 8025bfc:	330f      	adds	r3, #15
 8025bfe:	111b      	asrs	r3, r3, #4
 8025c00:	005b      	lsls	r3, r3, #1
 8025c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c04:	4413      	add	r3, r2
 8025c06:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 8025c08:	e027      	b.n	8025c5a <OBJ_Write+0x65a>
 8025c0a:	bf00      	nop
 8025c0c:	0802b684 	.word	0x0802b684
 8025c10:	1ffea9b8 	.word	0x1ffea9b8
 8025c14:	1ffea974 	.word	0x1ffea974
 8025c18:	0001e848 	.word	0x0001e848
 8025c1c:	1ffea930 	.word	0x1ffea930
                        case    DEFTYPE_UNICODE_STRING:
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
                            if(bitOffset & 0xF)
 8025c20:	8b3b      	ldrh	r3, [r7, #24]
 8025c22:	f003 030f 	and.w	r3, r3, #15
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d001      	beq.n	8025c2e <OBJ_Write+0x62e>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025c2a:	2305      	movs	r3, #5
 8025c2c:	e04c      	b.n	8025cc8 <OBJ_Write+0x6c8>
                            }

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8025c2e:	69fb      	ldr	r3, [r7, #28]
 8025c30:	885b      	ldrh	r3, [r3, #2]
 8025c32:	3307      	adds	r3, #7
 8025c34:	10db      	asrs	r3, r3, #3
 8025c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025c38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025c3a:	461a      	mov	r2, r3
 8025c3c:	f004 ffec 	bl	802ac18 <memcpy>
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8025c40:	69fb      	ldr	r3, [r7, #28]
 8025c42:	885b      	ldrh	r3, [r3, #2]
 8025c44:	f023 030f 	bic.w	r3, r3, #15
 8025c48:	330f      	adds	r3, #15
 8025c4a:	111b      	asrs	r3, r3, #4
 8025c4c:	005b      	lsls	r3, r3, #1
 8025c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c50:	4413      	add	r3, r2
 8025c52:	64bb      	str	r3, [r7, #72]	; 0x48

                            break;
 8025c54:	e001      	b.n	8025c5a <OBJ_Write+0x65a>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8025c56:	2318      	movs	r3, #24
 8025c58:	e036      	b.n	8025cc8 <OBJ_Write+0x6c8>
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8025c5a:	2301      	movs	r3, #1
 8025c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8025c60:	e022      	b.n	8025ca8 <OBJ_Write+0x6a8>

                }
            }
            else
            {
                if(i == 0)
 8025c62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	d103      	bne.n	8025c70 <OBJ_Write+0x670>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8025c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025c6a:	3302      	adds	r3, #2
 8025c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8025c6e:	e018      	b.n	8025ca2 <OBJ_Write+0x6a2>
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8025c70:	69fb      	ldr	r3, [r7, #28]
 8025c72:	885b      	ldrh	r3, [r3, #2]
 8025c74:	f003 030f 	and.w	r3, r3, #15
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	dd0a      	ble.n	8025c92 <OBJ_Write+0x692>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025c7c:	8b3b      	ldrh	r3, [r7, #24]
 8025c7e:	69fa      	ldr	r2, [r7, #28]
 8025c80:	8852      	ldrh	r2, [r2, #2]
 8025c82:	4413      	add	r3, r2
 8025c84:	f003 030f 	and.w	r3, r3, #15
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d102      	bne.n	8025c92 <OBJ_Write+0x692>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8025c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025c8e:	3302      	adds	r3, #2
 8025c90:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8025c92:	69fb      	ldr	r3, [r7, #28]
 8025c94:	885b      	ldrh	r3, [r3, #2]
 8025c96:	091b      	lsrs	r3, r3, #4
 8025c98:	b29b      	uxth	r3, r3
 8025c9a:	005b      	lsls	r3, r3, #1
 8025c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c9e:	4413      	add	r3, r2
 8025ca0:	64bb      	str	r3, [r7, #72]	; 0x48
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8025ca2:	2318      	movs	r3, #24
 8025ca4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        {
           return 0; //no error
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8025ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025caa:	3301      	adds	r3, #1
 8025cac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8025cae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025cb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8025cb2:	429a      	cmp	r2, r3
 8025cb4:	f67f ad7d 	bls.w	80257b2 <OBJ_Write+0x1b2>
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
            }
        }

        if (bWritten == 0)
 8025cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d102      	bne.n	8025cc6 <OBJ_Write+0x6c6>
        {
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8025cc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025cc4:	e000      	b.n	8025cc8 <OBJ_Write+0x6c8>
        }
    }

    return 0;
 8025cc6:	2300      	movs	r3, #0
}
 8025cc8:	4618      	mov	r0, r3
 8025cca:	373c      	adds	r7, #60	; 0x3c
 8025ccc:	46bd      	mov	sp, r7
 8025cce:	bd90      	pop	{r4, r7, pc}

08025cd0 <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8025cd0:	b5b0      	push	{r4, r5, r7, lr}
 8025cd2:	b088      	sub	sp, #32
 8025cd4:	af02      	add	r7, sp, #8
 8025cd6:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025cd8:	2300      	movs	r3, #0
 8025cda:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 8025cdc:	2300      	movs	r3, #0
 8025cde:	613b      	str	r3, [r7, #16]

/* ECATCHANGE_START(V5.12) ECAT2*/
    if ( SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8025ce0:	687b      	ldr	r3, [r7, #4]
 8025ce2:	7a1b      	ldrb	r3, [r3, #8]
 8025ce4:	f003 0310 	and.w	r3, r3, #16
 8025ce8:	4a86      	ldr	r2, [pc, #536]	; (8025f04 <SdoDownloadSegmentInd+0x234>)
 8025cea:	7812      	ldrb	r2, [r2, #0]
 8025cec:	4293      	cmp	r3, r2
 8025cee:	d102      	bne.n	8025cf6 <SdoDownloadSegmentInd+0x26>
/* ECATCHANGE_END(V5.12) ECAT2*/
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8025cf0:	2301      	movs	r3, #1
 8025cf2:	75fb      	strb	r3, [r7, #23]
 8025cf4:	e0bb      	b.n	8025e6e <SdoDownloadSegmentInd+0x19e>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8025cf6:	4b84      	ldr	r3, [pc, #528]	; (8025f08 <SdoDownloadSegmentInd+0x238>)
 8025cf8:	881b      	ldrh	r3, [r3, #0]
 8025cfa:	3b09      	subs	r3, #9
 8025cfc:	81fb      	strh	r3, [r7, #14]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        /* ECATCHANGE_START(V5.12) ECAT2*/
        bSdoSegLastToggle = SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE);
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	7a1b      	ldrb	r3, [r3, #8]
 8025d02:	f003 0310 	and.w	r3, r3, #16
 8025d06:	b2da      	uxtb	r2, r3
 8025d08:	4b7e      	ldr	r3, [pc, #504]	; (8025f04 <SdoDownloadSegmentInd+0x234>)
 8025d0a:	701a      	strb	r2, [r3, #0]
        /* ECATCHANGE_END(V5.12) ECAT2*/

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 8025d0c:	4b7f      	ldr	r3, [pc, #508]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025d0e:	681b      	ldr	r3, [r3, #0]
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	f000 80aa 	beq.w	8025e6a <SdoDownloadSegmentInd+0x19a>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8025d16:	4b7e      	ldr	r3, [pc, #504]	; (8025f10 <SdoDownloadSegmentInd+0x240>)
 8025d18:	681a      	ldr	r2, [r3, #0]
 8025d1a:	4b7e      	ldr	r3, [pc, #504]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025d1c:	681b      	ldr	r3, [r3, #0]
 8025d1e:	1ad3      	subs	r3, r2, r3
 8025d20:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	7a1b      	ldrb	r3, [r3, #8]
 8025d26:	f003 0301 	and.w	r3, r3, #1
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d02c      	beq.n	8025d88 <SdoDownloadSegmentInd+0xb8>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 8025d2e:	89fa      	ldrh	r2, [r7, #14]
 8025d30:	693b      	ldr	r3, [r7, #16]
 8025d32:	429a      	cmp	r2, r3
 8025d34:	d325      	bcc.n	8025d82 <SdoDownloadSegmentInd+0xb2>
                {
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	881b      	ldrh	r3, [r3, #0]
 8025d3a:	81bb      	strh	r3, [r7, #12]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025d3c:	89bb      	ldrh	r3, [r7, #12]
 8025d3e:	3b03      	subs	r3, #3
 8025d40:	461a      	mov	r2, r3
 8025d42:	693b      	ldr	r3, [r7, #16]
 8025d44:	429a      	cmp	r2, r3
 8025d46:	d30c      	bcc.n	8025d62 <SdoDownloadSegmentInd+0x92>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 8025d48:	687b      	ldr	r3, [r7, #4]
 8025d4a:	7a1b      	ldrb	r3, [r3, #8]
 8025d4c:	f003 030e 	and.w	r3, r3, #14
 8025d50:	105b      	asrs	r3, r3, #1
 8025d52:	b29b      	uxth	r3, r3
 8025d54:	f1c3 0307 	rsb	r3, r3, #7
 8025d58:	b29b      	uxth	r3, r3
 8025d5a:	461a      	mov	r2, r3
 8025d5c:	693b      	ldr	r3, [r7, #16]
 8025d5e:	429a      	cmp	r2, r3
 8025d60:	d008      	beq.n	8025d74 <SdoDownloadSegmentInd+0xa4>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 8025d62:	693b      	ldr	r3, [r7, #16]
 8025d64:	2b07      	cmp	r3, #7
 8025d66:	d909      	bls.n	8025d7c <SdoDownloadSegmentInd+0xac>
                        && (bytesToSave == (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025d68:	89bb      	ldrh	r3, [r7, #12]
 8025d6a:	3b03      	subs	r3, #3
 8025d6c:	461a      	mov	r2, r3
 8025d6e:	693b      	ldr	r3, [r7, #16]
 8025d70:	429a      	cmp	r2, r3
 8025d72:	d103      	bne.n	8025d7c <SdoDownloadSegmentInd+0xac>
                        ) )
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 8025d74:	4b68      	ldr	r3, [pc, #416]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025d76:	2200      	movs	r2, #0
 8025d78:	701a      	strb	r2, [r3, #0]
 8025d7a:	e011      	b.n	8025da0 <SdoDownloadSegmentInd+0xd0>
                    }
                    else
                    {
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8025d7c:	230e      	movs	r3, #14
 8025d7e:	75fb      	strb	r3, [r7, #23]
 8025d80:	e00e      	b.n	8025da0 <SdoDownloadSegmentInd+0xd0>
                    }
                }
                else
                {
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8025d82:	230e      	movs	r3, #14
 8025d84:	75fb      	strb	r3, [r7, #23]
 8025d86:	e00b      	b.n	8025da0 <SdoDownloadSegmentInd+0xd0>
                }
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 8025d88:	4b63      	ldr	r3, [pc, #396]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025d8a:	2201      	movs	r2, #1
 8025d8c:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 8025d8e:	89fa      	ldrh	r2, [r7, #14]
 8025d90:	693b      	ldr	r3, [r7, #16]
 8025d92:	429a      	cmp	r2, r3
 8025d94:	d302      	bcc.n	8025d9c <SdoDownloadSegmentInd+0xcc>
                {
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8025d96:	230e      	movs	r3, #14
 8025d98:	75fb      	strb	r3, [r7, #23]
 8025d9a:	e001      	b.n	8025da0 <SdoDownloadSegmentInd+0xd0>
                }
                else
                {
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 8025d9c:	89fb      	ldrh	r3, [r7, #14]
 8025d9e:	613b      	str	r3, [r7, #16]
                }
            }

            if ( abort == 0 )
 8025da0:	7dfb      	ldrb	r3, [r7, #23]
 8025da2:	2b00      	cmp	r3, #0
 8025da4:	d163      	bne.n	8025e6e <SdoDownloadSegmentInd+0x19e>
            {
                /* the received data is copied in the buffer */
                MBXMEMCPY( ((UINT8*)pSdoSegData) + (nSdoSegBytesToHandle), pSdoInd->SdoHeader.Data, bytesToSave ); 
 8025da6:	4b59      	ldr	r3, [pc, #356]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025da8:	681a      	ldr	r2, [r3, #0]
 8025daa:	4b5a      	ldr	r3, [pc, #360]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025dac:	681b      	ldr	r3, [r3, #0]
 8025dae:	441a      	add	r2, r3
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	3309      	adds	r3, #9
 8025db4:	4610      	mov	r0, r2
 8025db6:	4619      	mov	r1, r3
 8025db8:	693a      	ldr	r2, [r7, #16]
 8025dba:	f004 ff2d 	bl	802ac18 <memcpy>

                if ( bSdoSegFollows == FALSE    )
 8025dbe:	4b56      	ldr	r3, [pc, #344]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025dc0:	781b      	ldrb	r3, [r3, #0]
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	d153      	bne.n	8025e6e <SdoDownloadSegmentInd+0x19e>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 8025dc6:	4b55      	ldr	r3, [pc, #340]	; (8025f1c <SdoDownloadSegmentInd+0x24c>)
 8025dc8:	8818      	ldrh	r0, [r3, #0]
 8025dca:	4b55      	ldr	r3, [pc, #340]	; (8025f20 <SdoDownloadSegmentInd+0x250>)
 8025dcc:	7819      	ldrb	r1, [r3, #0]
 8025dce:	4b50      	ldr	r3, [pc, #320]	; (8025f10 <SdoDownloadSegmentInd+0x240>)
 8025dd0:	681d      	ldr	r5, [r3, #0]
 8025dd2:	4b54      	ldr	r3, [pc, #336]	; (8025f24 <SdoDownloadSegmentInd+0x254>)
 8025dd4:	681c      	ldr	r4, [r3, #0]
 8025dd6:	4b4d      	ldr	r3, [pc, #308]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025dd8:	681a      	ldr	r2, [r3, #0]
 8025dda:	4b53      	ldr	r3, [pc, #332]	; (8025f28 <SdoDownloadSegmentInd+0x258>)
 8025ddc:	781b      	ldrb	r3, [r3, #0]
 8025dde:	9200      	str	r2, [sp, #0]
 8025de0:	9301      	str	r3, [sp, #4]
 8025de2:	462a      	mov	r2, r5
 8025de4:	4623      	mov	r3, r4
 8025de6:	f7ff fc0b 	bl	8025600 <OBJ_Write>
 8025dea:	4603      	mov	r3, r0
 8025dec:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 8025dee:	7dfb      	ldrb	r3, [r7, #23]
 8025df0:	2bff      	cmp	r3, #255	; 0xff
 8025df2:	d131      	bne.n	8025e58 <SdoDownloadSegmentInd+0x188>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8025df4:	4b4d      	ldr	r3, [pc, #308]	; (8025f2c <SdoDownloadSegmentInd+0x25c>)
 8025df6:	2202      	movs	r2, #2
 8025df8:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 8025dfa:	4b4b      	ldr	r3, [pc, #300]	; (8025f28 <SdoDownloadSegmentInd+0x258>)
 8025dfc:	781b      	ldrb	r3, [r3, #0]
 8025dfe:	2b00      	cmp	r3, #0
 8025e00:	bf14      	ite	ne
 8025e02:	2301      	movne	r3, #1
 8025e04:	2300      	moveq	r3, #0
 8025e06:	b2da      	uxtb	r2, r3
 8025e08:	4b49      	ldr	r3, [pc, #292]	; (8025f30 <SdoDownloadSegmentInd+0x260>)
 8025e0a:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 8025e0c:	4b44      	ldr	r3, [pc, #272]	; (8025f20 <SdoDownloadSegmentInd+0x250>)
 8025e0e:	781a      	ldrb	r2, [r3, #0]
 8025e10:	4b48      	ldr	r3, [pc, #288]	; (8025f34 <SdoDownloadSegmentInd+0x264>)
 8025e12:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 8025e14:	4b41      	ldr	r3, [pc, #260]	; (8025f1c <SdoDownloadSegmentInd+0x24c>)
 8025e16:	881a      	ldrh	r2, [r3, #0]
 8025e18:	4b47      	ldr	r3, [pc, #284]	; (8025f38 <SdoDownloadSegmentInd+0x268>)
 8025e1a:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 8025e1c:	4b3c      	ldr	r3, [pc, #240]	; (8025f10 <SdoDownloadSegmentInd+0x240>)
 8025e1e:	681b      	ldr	r3, [r3, #0]
 8025e20:	4a46      	ldr	r2, [pc, #280]	; (8025f3c <SdoDownloadSegmentInd+0x26c>)
 8025e22:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 8025e24:	4b39      	ldr	r3, [pc, #228]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	4a45      	ldr	r2, [pc, #276]	; (8025f40 <SdoDownloadSegmentInd+0x270>)
 8025e2a:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 8025e2c:	4b3d      	ldr	r3, [pc, #244]	; (8025f24 <SdoDownloadSegmentInd+0x254>)
 8025e2e:	681b      	ldr	r3, [r3, #0]
 8025e30:	6a1b      	ldr	r3, [r3, #32]
 8025e32:	4a44      	ldr	r2, [pc, #272]	; (8025f44 <SdoDownloadSegmentInd+0x274>)
 8025e34:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 8025e36:	4b44      	ldr	r3, [pc, #272]	; (8025f48 <SdoDownloadSegmentInd+0x278>)
 8025e38:	2201      	movs	r2, #1
 8025e3a:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8025e3c:	4a43      	ldr	r2, [pc, #268]	; (8025f4c <SdoDownloadSegmentInd+0x27c>)
 8025e3e:	687b      	ldr	r3, [r7, #4]
 8025e40:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 8025e42:	4b35      	ldr	r3, [pc, #212]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025e44:	2200      	movs	r2, #0
 8025e46:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 8025e48:	4b41      	ldr	r3, [pc, #260]	; (8025f50 <SdoDownloadSegmentInd+0x280>)
 8025e4a:	2200      	movs	r2, #0
 8025e4c:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 8025e4e:	4b31      	ldr	r3, [pc, #196]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025e50:	2200      	movs	r2, #0
 8025e52:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 8025e54:	23ff      	movs	r3, #255	; 0xff
 8025e56:	e051      	b.n	8025efc <SdoDownloadSegmentInd+0x22c>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025e58:	4b2c      	ldr	r3, [pc, #176]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	4618      	mov	r0, r3
 8025e5e:	f004 fec3 	bl	802abe8 <free>
                        pSdoSegData = NULL;
 8025e62:	4b2a      	ldr	r3, [pc, #168]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025e64:	2200      	movs	r2, #0
 8025e66:	601a      	str	r2, [r3, #0]
 8025e68:	e001      	b.n	8025e6e <SdoDownloadSegmentInd+0x19e>
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025e6a:	2303      	movs	r3, #3
 8025e6c:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 8025e6e:	7dfb      	ldrb	r3, [r7, #23]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d12d      	bne.n	8025ed0 <SdoDownloadSegmentInd+0x200>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8025e74:	687b      	ldr	r3, [r7, #4]
 8025e76:	220a      	movs	r2, #10
 8025e78:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	88db      	ldrh	r3, [r3, #6]
 8025e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025e82:	b29a      	uxth	r2, r3
 8025e84:	687b      	ldr	r3, [r7, #4]
 8025e86:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025e88:	687b      	ldr	r3, [r7, #4]
 8025e8a:	88db      	ldrh	r3, [r3, #6]
 8025e8c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025e90:	b29a      	uxth	r2, r3
 8025e92:	687b      	ldr	r3, [r7, #4]
 8025e94:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
/* ECATCHANGE_START(V5.12) ECAT2*/
        if ( bSdoSegLastToggle )
 8025e96:	4b1b      	ldr	r3, [pc, #108]	; (8025f04 <SdoDownloadSegmentInd+0x234>)
 8025e98:	781b      	ldrb	r3, [r3, #0]
 8025e9a:	2b00      	cmp	r3, #0
 8025e9c:	d003      	beq.n	8025ea6 <SdoDownloadSegmentInd+0x1d6>
        {
           pSdoInd->SdoHeader.SegHeader        = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE);
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	2230      	movs	r2, #48	; 0x30
 8025ea2:	721a      	strb	r2, [r3, #8]
 8025ea4:	e002      	b.n	8025eac <SdoDownloadSegmentInd+0x1dc>
        }
        else
        {
           pSdoInd->SdoHeader.SegHeader        = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	2220      	movs	r2, #32
 8025eaa:	721a      	strb	r2, [r3, #8]
        }
/* ECATCHANGE_END(V5.12) ECAT2*/
        
        if ( bSdoSegFollows == TRUE )
 8025eac:	4b1a      	ldr	r3, [pc, #104]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025eae:	781b      	ldrb	r3, [r3, #0]
 8025eb0:	2b01      	cmp	r3, #1
 8025eb2:	d106      	bne.n	8025ec2 <SdoDownloadSegmentInd+0x1f2>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 8025eb4:	4b17      	ldr	r3, [pc, #92]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025eb6:	681a      	ldr	r2, [r3, #0]
 8025eb8:	693b      	ldr	r3, [r7, #16]
 8025eba:	4413      	add	r3, r2
 8025ebc:	4a15      	ldr	r2, [pc, #84]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025ebe:	6013      	str	r3, [r2, #0]
 8025ec0:	e01b      	b.n	8025efa <SdoDownloadSegmentInd+0x22a>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 8025ec2:	4b14      	ldr	r3, [pc, #80]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025ec4:	2200      	movs	r2, #0
 8025ec6:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 8025ec8:	4b21      	ldr	r3, [pc, #132]	; (8025f50 <SdoDownloadSegmentInd+0x280>)
 8025eca:	2200      	movs	r2, #0
 8025ecc:	701a      	strb	r2, [r3, #0]
 8025ece:	e014      	b.n	8025efa <SdoDownloadSegmentInd+0x22a>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 8025ed0:	4b11      	ldr	r3, [pc, #68]	; (8025f18 <SdoDownloadSegmentInd+0x248>)
 8025ed2:	2200      	movs	r2, #0
 8025ed4:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 8025ed6:	4b1e      	ldr	r3, [pc, #120]	; (8025f50 <SdoDownloadSegmentInd+0x280>)
 8025ed8:	2200      	movs	r2, #0
 8025eda:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 8025edc:	4b0b      	ldr	r3, [pc, #44]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	d007      	beq.n	8025ef4 <SdoDownloadSegmentInd+0x224>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025ee4:	4b09      	ldr	r3, [pc, #36]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	4618      	mov	r0, r3
 8025eea:	f004 fe7d 	bl	802abe8 <free>
            pSdoSegData = NULL;
 8025eee:	4b07      	ldr	r3, [pc, #28]	; (8025f0c <SdoDownloadSegmentInd+0x23c>)
 8025ef0:	2200      	movs	r2, #0
 8025ef2:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 8025ef4:	4b07      	ldr	r3, [pc, #28]	; (8025f14 <SdoDownloadSegmentInd+0x244>)
 8025ef6:	2200      	movs	r2, #0
 8025ef8:	601a      	str	r2, [r3, #0]
    }

    return abort;
 8025efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8025efc:	4618      	mov	r0, r3
 8025efe:	3718      	adds	r7, #24
 8025f00:	46bd      	mov	sp, r7
 8025f02:	bdb0      	pop	{r4, r5, r7, pc}
 8025f04:	1ffea9da 	.word	0x1ffea9da
 8025f08:	1ffea926 	.word	0x1ffea926
 8025f0c:	1ffea9ec 	.word	0x1ffea9ec
 8025f10:	1ffea9d0 	.word	0x1ffea9d0
 8025f14:	1ffea9c8 	.word	0x1ffea9c8
 8025f18:	1ffea9cd 	.word	0x1ffea9cd
 8025f1c:	1ffea9f0 	.word	0x1ffea9f0
 8025f20:	1ffeaa08 	.word	0x1ffeaa08
 8025f24:	1ffeaa04 	.word	0x1ffeaa04
 8025f28:	1ffea9cc 	.word	0x1ffea9cc
 8025f2c:	1ffea9d8 	.word	0x1ffea9d8
 8025f30:	1ffea9d9 	.word	0x1ffea9d9
 8025f34:	1ffeaa0c 	.word	0x1ffeaa0c
 8025f38:	1ffeaa0a 	.word	0x1ffeaa0a
 8025f3c:	1ffea9e8 	.word	0x1ffea9e8
 8025f40:	1ffea9c4 	.word	0x1ffea9c4
 8025f44:	1ffea9d4 	.word	0x1ffea9d4
 8025f48:	1ffe9583 	.word	0x1ffe9583
 8025f4c:	1ffea9e4 	.word	0x1ffea9e4
 8025f50:	1ffea9db 	.word	0x1ffea9db

08025f54 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8025f54:	b580      	push	{r7, lr}
 8025f56:	b086      	sub	sp, #24
 8025f58:	af00      	add	r7, sp, #0
 8025f5a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025f5c:	2300      	movs	r3, #0
 8025f5e:	75fb      	strb	r3, [r7, #23]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 8025f60:	687b      	ldr	r3, [r7, #4]
 8025f62:	60fb      	str	r3, [r7, #12]

/* ECATCHANGE_START(V5.12) ECAT2*/
   if ( SWAPWORD(pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8025f64:	687b      	ldr	r3, [r7, #4]
 8025f66:	7a1b      	ldrb	r3, [r3, #8]
 8025f68:	f003 0310 	and.w	r3, r3, #16
 8025f6c:	4a4c      	ldr	r2, [pc, #304]	; (80260a0 <SdoUploadSegmentInd+0x14c>)
 8025f6e:	7812      	ldrb	r2, [r2, #0]
 8025f70:	4293      	cmp	r3, r2
 8025f72:	d102      	bne.n	8025f7a <SdoUploadSegmentInd+0x26>
/* ECATCHANGE_END(V5.12) ECAT2*/
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8025f74:	2301      	movs	r3, #1
 8025f76:	75fb      	strb	r3, [r7, #23]
 8025f78:	e08c      	b.n	8026094 <SdoUploadSegmentInd+0x140>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 8025f7a:	2300      	movs	r3, #0
 8025f7c:	613b      	str	r3, [r7, #16]
        UINT16 maxData;
        
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8025f7e:	4b49      	ldr	r3, [pc, #292]	; (80260a4 <SdoUploadSegmentInd+0x150>)
 8025f80:	881b      	ldrh	r3, [r3, #0]
 8025f82:	3b09      	subs	r3, #9
 8025f84:	817b      	strh	r3, [r7, #10]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	7a1b      	ldrb	r3, [r3, #8]
 8025f8a:	f003 0310 	and.w	r3, r3, #16
 8025f8e:	b2da      	uxtb	r2, r3
 8025f90:	4b43      	ldr	r3, [pc, #268]	; (80260a0 <SdoUploadSegmentInd+0x14c>)
 8025f92:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 8025f94:	897a      	ldrh	r2, [r7, #10]
 8025f96:	4b44      	ldr	r3, [pc, #272]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	441a      	add	r2, r3
 8025f9c:	4b43      	ldr	r3, [pc, #268]	; (80260ac <SdoUploadSegmentInd+0x158>)
 8025f9e:	681b      	ldr	r3, [r3, #0]
 8025fa0:	429a      	cmp	r2, r3
 8025fa2:	d909      	bls.n	8025fb8 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8025fa4:	4b41      	ldr	r3, [pc, #260]	; (80260ac <SdoUploadSegmentInd+0x158>)
 8025fa6:	681a      	ldr	r2, [r3, #0]
 8025fa8:	4b3f      	ldr	r3, [pc, #252]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	1ad3      	subs	r3, r2, r3
 8025fae:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = FALSE;
 8025fb0:	4b3f      	ldr	r3, [pc, #252]	; (80260b0 <SdoUploadSegmentInd+0x15c>)
 8025fb2:	2200      	movs	r2, #0
 8025fb4:	701a      	strb	r2, [r3, #0]
 8025fb6:	e004      	b.n	8025fc2 <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 8025fb8:	897b      	ldrh	r3, [r7, #10]
 8025fba:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = TRUE;
 8025fbc:	4b3c      	ldr	r3, [pc, #240]	; (80260b0 <SdoUploadSegmentInd+0x15c>)
 8025fbe:	2201      	movs	r2, #1
 8025fc0:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &(((UINT8*)pSdoSegData)[nSdoSegBytesToHandle]), size );
 8025fc2:	68fb      	ldr	r3, [r7, #12]
 8025fc4:	f103 0109 	add.w	r1, r3, #9
 8025fc8:	4b3a      	ldr	r3, [pc, #232]	; (80260b4 <SdoUploadSegmentInd+0x160>)
 8025fca:	681a      	ldr	r2, [r3, #0]
 8025fcc:	4b36      	ldr	r3, [pc, #216]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 8025fce:	681b      	ldr	r3, [r3, #0]
 8025fd0:	4413      	add	r3, r2
 8025fd2:	4608      	mov	r0, r1
 8025fd4:	4619      	mov	r1, r3
 8025fd6:	693a      	ldr	r2, [r7, #16]
 8025fd8:	f004 fe1e 	bl	802ac18 <memcpy>
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025fdc:	68fb      	ldr	r3, [r7, #12]
 8025fde:	88db      	ldrh	r3, [r3, #6]
 8025fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025fe4:	b29a      	uxth	r2, r3
 8025fe6:	68fb      	ldr	r3, [r7, #12]
 8025fe8:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025fea:	68fb      	ldr	r3, [r7, #12]
 8025fec:	88db      	ldrh	r3, [r3, #6]
 8025fee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025ff2:	b29a      	uxth	r2, r3
 8025ff4:	68fb      	ldr	r3, [r7, #12]
 8025ff6:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 8025ff8:	68fb      	ldr	r3, [r7, #12]
 8025ffa:	2200      	movs	r2, #0
 8025ffc:	721a      	strb	r2, [r3, #8]
/* ECATCHANGE_START(V5.12) ECAT2*/
        if (bSdoSegFollows)
 8025ffe:	4b2c      	ldr	r3, [pc, #176]	; (80260b0 <SdoUploadSegmentInd+0x15c>)
 8026000:	781b      	ldrb	r3, [r3, #0]
 8026002:	2b00      	cmp	r3, #0
 8026004:	d008      	beq.n	8026018 <SdoUploadSegmentInd+0xc4>
        {
            pSdoSegRes->SdoHeader.SegHeader        |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle);
 8026006:	68fb      	ldr	r3, [r7, #12]
 8026008:	7a1a      	ldrb	r2, [r3, #8]
 802600a:	4b25      	ldr	r3, [pc, #148]	; (80260a0 <SdoUploadSegmentInd+0x14c>)
 802600c:	781b      	ldrb	r3, [r3, #0]
 802600e:	4313      	orrs	r3, r2
 8026010:	b2da      	uxtb	r2, r3
 8026012:	68fb      	ldr	r3, [r7, #12]
 8026014:	721a      	strb	r2, [r3, #8]
 8026016:	e00a      	b.n	802602e <SdoUploadSegmentInd+0xda>
        }
        else
        {
            pSdoSegRes->SdoHeader.SegHeader        |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS);
 8026018:	68fb      	ldr	r3, [r7, #12]
 802601a:	7a1a      	ldrb	r2, [r3, #8]
 802601c:	4b20      	ldr	r3, [pc, #128]	; (80260a0 <SdoUploadSegmentInd+0x14c>)
 802601e:	781b      	ldrb	r3, [r3, #0]
 8026020:	4313      	orrs	r3, r2
 8026022:	b2db      	uxtb	r3, r3
 8026024:	f043 0301 	orr.w	r3, r3, #1
 8026028:	b2da      	uxtb	r2, r3
 802602a:	68fb      	ldr	r3, [r7, #12]
 802602c:	721a      	strb	r2, [r3, #8]
        }
/* ECATCHANGE_END(V5.12) ECAT2*/

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 802602e:	693b      	ldr	r3, [r7, #16]
 8026030:	2b06      	cmp	r3, #6
 8026032:	d810      	bhi.n	8026056 <SdoUploadSegmentInd+0x102>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8026034:	68fb      	ldr	r3, [r7, #12]
 8026036:	220a      	movs	r2, #10
 8026038:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 802603a:	68fb      	ldr	r3, [r7, #12]
 802603c:	7a1a      	ldrb	r2, [r3, #8]
 802603e:	693b      	ldr	r3, [r7, #16]
 8026040:	b2db      	uxtb	r3, r3
 8026042:	f1c3 0307 	rsb	r3, r3, #7
 8026046:	b2db      	uxtb	r3, r3
 8026048:	005b      	lsls	r3, r3, #1
 802604a:	b2db      	uxtb	r3, r3
 802604c:	4313      	orrs	r3, r2
 802604e:	b2da      	uxtb	r2, r3
 8026050:	68fb      	ldr	r3, [r7, #12]
 8026052:	721a      	strb	r2, [r3, #8]
 8026054:	e005      	b.n	8026062 <SdoUploadSegmentInd+0x10e>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 8026056:	693b      	ldr	r3, [r7, #16]
 8026058:	b29b      	uxth	r3, r3
 802605a:	3303      	adds	r3, #3
 802605c:	b29a      	uxth	r2, r3
 802605e:	68fb      	ldr	r3, [r7, #12]
 8026060:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 8026062:	4b13      	ldr	r3, [pc, #76]	; (80260b0 <SdoUploadSegmentInd+0x15c>)
 8026064:	781b      	ldrb	r3, [r3, #0]
 8026066:	2b01      	cmp	r3, #1
 8026068:	d106      	bne.n	8026078 <SdoUploadSegmentInd+0x124>
        {
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 802606a:	4b0f      	ldr	r3, [pc, #60]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 802606c:	681a      	ldr	r2, [r3, #0]
 802606e:	693b      	ldr	r3, [r7, #16]
 8026070:	4413      	add	r3, r2
 8026072:	4a0d      	ldr	r2, [pc, #52]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 8026074:	6013      	str	r3, [r2, #0]
 8026076:	e00d      	b.n	8026094 <SdoUploadSegmentInd+0x140>
        }
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8026078:	4b0e      	ldr	r3, [pc, #56]	; (80260b4 <SdoUploadSegmentInd+0x160>)
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	4618      	mov	r0, r3
 802607e:	f004 fdb3 	bl	802abe8 <free>
            pSdoSegData = NULL;
 8026082:	4b0c      	ldr	r3, [pc, #48]	; (80260b4 <SdoUploadSegmentInd+0x160>)
 8026084:	2200      	movs	r2, #0
 8026086:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 8026088:	4b07      	ldr	r3, [pc, #28]	; (80260a8 <SdoUploadSegmentInd+0x154>)
 802608a:	2200      	movs	r2, #0
 802608c:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 802608e:	4b0a      	ldr	r3, [pc, #40]	; (80260b8 <SdoUploadSegmentInd+0x164>)
 8026090:	2200      	movs	r2, #0
 8026092:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 8026094:	7dfb      	ldrb	r3, [r7, #23]
}
 8026096:	4618      	mov	r0, r3
 8026098:	3718      	adds	r7, #24
 802609a:	46bd      	mov	sp, r7
 802609c:	bd80      	pop	{r7, pc}
 802609e:	bf00      	nop
 80260a0:	1ffea9da 	.word	0x1ffea9da
 80260a4:	1ffea914 	.word	0x1ffea914
 80260a8:	1ffea9c8 	.word	0x1ffea9c8
 80260ac:	1ffea9d0 	.word	0x1ffea9d0
 80260b0:	1ffea9cd 	.word	0x1ffea9cd
 80260b4:	1ffea9ec 	.word	0x1ffea9ec
 80260b8:	1ffea9db 	.word	0x1ffea9db

080260bc <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 80260bc:	b590      	push	{r4, r7, lr}
 80260be:	b083      	sub	sp, #12
 80260c0:	af00      	add	r7, sp, #0
 80260c2:	4604      	mov	r4, r0
 80260c4:	4608      	mov	r0, r1
 80260c6:	4611      	mov	r1, r2
 80260c8:	461a      	mov	r2, r3
 80260ca:	4623      	mov	r3, r4
 80260cc:	71fb      	strb	r3, [r7, #7]
 80260ce:	4603      	mov	r3, r0
 80260d0:	71bb      	strb	r3, [r7, #6]
 80260d2:	460b      	mov	r3, r1
 80260d4:	717b      	strb	r3, [r7, #5]
 80260d6:	4613      	mov	r3, r2
 80260d8:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 80260da:	79bb      	ldrb	r3, [r7, #6]
 80260dc:	2b60      	cmp	r3, #96	; 0x60
 80260de:	d005      	beq.n	80260ec <SdoRes+0x30>
 80260e0:	79bb      	ldrb	r3, [r7, #6]
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	d002      	beq.n	80260ec <SdoRes+0x30>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] = 0;
 80260e6:	69fb      	ldr	r3, [r7, #28]
 80260e8:	2200      	movs	r2, #0
 80260ea:	721a      	strb	r2, [r3, #8]
    }
    if ( abort == 0 )
 80260ec:	79fb      	ldrb	r3, [r7, #7]
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	d16c      	bne.n	80261cc <SdoRes+0x110>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80260f2:	69fb      	ldr	r3, [r7, #28]
 80260f4:	88db      	ldrh	r3, [r3, #6]
 80260f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80260fa:	b29a      	uxth	r2, r3
 80260fc:	69fb      	ldr	r3, [r7, #28]
 80260fe:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8026100:	69fb      	ldr	r3, [r7, #28]
 8026102:	88db      	ldrh	r3, [r3, #6]
 8026104:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8026108:	b29a      	uxth	r2, r3
 802610a:	69fb      	ldr	r3, [r7, #28]
 802610c:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 802610e:	79bb      	ldrb	r3, [r7, #6]
 8026110:	2b40      	cmp	r3, #64	; 0x40
 8026112:	d13f      	bne.n	8026194 <SdoRes+0xd8>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 8026114:	69bb      	ldr	r3, [r7, #24]
 8026116:	2b04      	cmp	r3, #4
 8026118:	d818      	bhi.n	802614c <SdoRes+0x90>
 802611a:	69bb      	ldr	r3, [r7, #24]
 802611c:	2b00      	cmp	r3, #0
 802611e:	d015      	beq.n	802614c <SdoRes+0x90>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 8026120:	69fb      	ldr	r3, [r7, #28]
 8026122:	220a      	movs	r2, #10
 8026124:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 8026126:	69fb      	ldr	r3, [r7, #28]
 8026128:	7a1a      	ldrb	r2, [r3, #8]
                                                                            SDOHEADER_TRANSFERTYPE |
                                                                            completeAccess |
                                                                            ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 802612a:	69bb      	ldr	r3, [r7, #24]
 802612c:	b2db      	uxtb	r3, r3
 802612e:	f1c3 0304 	rsb	r3, r3, #4
 8026132:	009b      	lsls	r3, r3, #2
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 8026134:	b2d9      	uxtb	r1, r3
 8026136:	797b      	ldrb	r3, [r7, #5]
 8026138:	430b      	orrs	r3, r1
 802613a:	b2db      	uxtb	r3, r3
 802613c:	4313      	orrs	r3, r2
 802613e:	b2db      	uxtb	r3, r3
 8026140:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 8026144:	b2da      	uxtb	r2, r3
 8026146:	69fb      	ldr	r3, [r7, #28]
 8026148:	721a      	strb	r2, [r3, #8]
 802614a:	e05d      	b.n	8026208 <SdoRes+0x14c>
                                                                            SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 802614c:	887a      	ldrh	r2, [r7, #2]
 802614e:	69bb      	ldr	r3, [r7, #24]
 8026150:	429a      	cmp	r2, r3
 8026152:	d205      	bcs.n	8026160 <SdoRes+0xa4>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 8026154:	887b      	ldrh	r3, [r7, #2]
 8026156:	330a      	adds	r3, #10
 8026158:	b29a      	uxth	r2, r3
 802615a:	69fb      	ldr	r3, [r7, #28]
 802615c:	801a      	strh	r2, [r3, #0]
 802615e:	e005      	b.n	802616c <SdoRes+0xb0>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 8026160:	69bb      	ldr	r3, [r7, #24]
 8026162:	b29b      	uxth	r3, r3
 8026164:	330a      	adds	r3, #10
 8026166:	b29a      	uxth	r2, r3
 8026168:	69fb      	ldr	r3, [r7, #28]
 802616a:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 802616c:	69bb      	ldr	r3, [r7, #24]
 802616e:	b29a      	uxth	r2, r3
 8026170:	69fb      	ldr	r3, [r7, #28]
 8026172:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 8026174:	69bb      	ldr	r3, [r7, #24]
 8026176:	0c1b      	lsrs	r3, r3, #16
 8026178:	b29a      	uxth	r2, r3
 802617a:	69fb      	ldr	r3, [r7, #28]
 802617c:	81da      	strh	r2, [r3, #14]
                   pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 802617e:	69fb      	ldr	r3, [r7, #28]
 8026180:	7a1a      	ldrb	r2, [r3, #8]
 8026182:	797b      	ldrb	r3, [r7, #5]
 8026184:	4313      	orrs	r3, r2
 8026186:	b2db      	uxtb	r3, r3
 8026188:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 802618c:	b2da      	uxtb	r2, r3
 802618e:	69fb      	ldr	r3, [r7, #28]
 8026190:	721a      	strb	r2, [r3, #8]
 8026192:	e039      	b.n	8026208 <SdoRes+0x14c>
                                                                           SDOSERVICE_INITIATEUPLOADRES;

            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8026194:	79bb      	ldrb	r3, [r7, #6]
 8026196:	2b00      	cmp	r3, #0
 8026198:	d10a      	bne.n	80261b0 <SdoRes+0xf4>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 802619a:	69fb      	ldr	r3, [r7, #28]
 802619c:	220a      	movs	r2, #10
 802619e:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_DOWNLOADSEGMENTRES;
 80261a0:	69fb      	ldr	r3, [r7, #28]
 80261a2:	7a1b      	ldrb	r3, [r3, #8]
 80261a4:	f043 0320 	orr.w	r3, r3, #32
 80261a8:	b2da      	uxtb	r2, r3
 80261aa:	69fb      	ldr	r3, [r7, #28]
 80261ac:	721a      	strb	r2, [r3, #8]
 80261ae:	e02b      	b.n	8026208 <SdoRes+0x14c>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 80261b0:	79bb      	ldrb	r3, [r7, #6]
 80261b2:	2b60      	cmp	r3, #96	; 0x60
 80261b4:	d028      	beq.n	8026208 <SdoRes+0x14c>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 80261b6:	69fb      	ldr	r3, [r7, #28]
 80261b8:	220a      	movs	r2, #10
 80261ba:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_INITIATEDOWNLOADRES;
 80261bc:	69fb      	ldr	r3, [r7, #28]
 80261be:	7a1b      	ldrb	r3, [r3, #8]
 80261c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80261c4:	b2da      	uxtb	r2, r3
 80261c6:	69fb      	ldr	r3, [r7, #28]
 80261c8:	721a      	strb	r2, [r3, #8]
 80261ca:	e01d      	b.n	8026208 <SdoRes+0x14c>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 80261cc:	69fb      	ldr	r3, [r7, #28]
 80261ce:	220a      	movs	r2, #10
 80261d0:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80261d2:	69fb      	ldr	r3, [r7, #28]
 80261d4:	88db      	ldrh	r3, [r3, #6]
 80261d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80261da:	b29a      	uxth	r2, r3
 80261dc:	69fb      	ldr	r3, [r7, #28]
 80261de:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 80261e0:	69fb      	ldr	r3, [r7, #28]
 80261e2:	88db      	ldrh	r3, [r3, #6]
 80261e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80261e8:	b29a      	uxth	r2, r3
 80261ea:	69fb      	ldr	r3, [r7, #28]
 80261ec:	80da      	strh	r2, [r3, #6]
        /* ECATCHANGE_START(V5.12) COE2*/
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_ABORTTRANSFER;
 80261ee:	69fb      	ldr	r3, [r7, #28]
 80261f0:	7a1b      	ldrb	r3, [r3, #8]
 80261f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80261f6:	b2da      	uxtb	r2, r3
 80261f8:	69fb      	ldr	r3, [r7, #28]
 80261fa:	721a      	strb	r2, [r3, #8]
        /* ECATCHANGE_END(V5.12) COE2*/

        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 80261fc:	79fb      	ldrb	r3, [r7, #7]
 80261fe:	4a09      	ldr	r2, [pc, #36]	; (8026224 <SdoRes+0x168>)
 8026200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8026204:	69fb      	ldr	r3, [r7, #28]
 8026206:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 8026208:	69f8      	ldr	r0, [r7, #28]
 802620a:	2102      	movs	r1, #2
 802620c:	f7fe f962 	bl	80244d4 <MBX_MailboxSendReq>
 8026210:	4603      	mov	r3, r0
 8026212:	2b00      	cmp	r3, #0
 8026214:	d002      	beq.n	802621c <SdoRes+0x160>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 8026216:	4a04      	ldr	r2, [pc, #16]	; (8026228 <SdoRes+0x16c>)
 8026218:	69fb      	ldr	r3, [r7, #28]
 802621a:	6013      	str	r3, [r2, #0]
    }
}
 802621c:	370c      	adds	r7, #12
 802621e:	46bd      	mov	sp, r7
 8026220:	bd90      	pop	{r4, r7, pc}
 8026222:	bf00      	nop
 8026224:	0802b6a4 	.word	0x0802b6a4
 8026228:	1ffea830 	.word	0x1ffea830

0802622c <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 802622c:	b590      	push	{r4, r7, lr}
 802622e:	b091      	sub	sp, #68	; 0x44
 8026230:	af02      	add	r7, sp, #8
 8026232:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8026234:	2300      	movs	r3, #0
 8026236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT8 sdoHeader = (pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK);
 802623a:	687b      	ldr	r3, [r7, #4]
 802623c:	7a1b      	ldrb	r3, [r3, #8]
 802623e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 8026242:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026246:	f023 031f 	bic.w	r3, r3, #31
 802624a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 802624e:	687b      	ldr	r3, [r7, #4]
 8026250:	881b      	ldrh	r3, [r3, #0]
 8026252:	83fb      	strh	r3, [r7, #30]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 8026254:	2300      	movs	r3, #0
 8026256:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT32 objLength = 0;
 802625a:	2300      	movs	r3, #0
 802625c:	633b      	str	r3, [r7, #48]	; 0x30
    UINT32 dataSize = 0;
 802625e:	2300      	movs	r3, #0
 8026260:	62fb      	str	r3, [r7, #44]	; 0x2c

    if ( bSdoInWork )
 8026262:	4bac      	ldr	r3, [pc, #688]	; (8026514 <SDOS_SdoInd+0x2e8>)
 8026264:	781b      	ldrb	r3, [r3, #0]
 8026266:	2b00      	cmp	r3, #0
 8026268:	d001      	beq.n	802626e <SDOS_SdoInd+0x42>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 802626a:	2309      	movs	r3, #9
 802626c:	e2a3      	b.n	80267b6 <SDOS_SdoInd+0x58a>
    }


    switch (command)
 802626e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026272:	2b20      	cmp	r3, #32
 8026274:	d00b      	beq.n	802628e <SDOS_SdoInd+0x62>
 8026276:	2b20      	cmp	r3, #32
 8026278:	dc03      	bgt.n	8026282 <SDOS_SdoInd+0x56>
 802627a:	2b00      	cmp	r3, #0
 802627c:	f000 8264 	beq.w	8026748 <SDOS_SdoInd+0x51c>
 8026280:	e27e      	b.n	8026780 <SDOS_SdoInd+0x554>
 8026282:	2b40      	cmp	r3, #64	; 0x40
 8026284:	d003      	beq.n	802628e <SDOS_SdoInd+0x62>
 8026286:	2b60      	cmp	r3, #96	; 0x60
 8026288:	f000 825e 	beq.w	8026748 <SDOS_SdoInd+0x51c>
 802628c:	e278      	b.n	8026780 <SDOS_SdoInd+0x554>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
/*ECATCHANGE_START(V5.12) COE5*/
        index = ((UINT16)(pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK));
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	7a9b      	ldrb	r3, [r3, #10]
 8026292:	83bb      	strh	r3, [r7, #28]
/*ECATCHANGE_END(V5.12) COE5*/
/* ECATCHANGE_START(V5.12) ECAT2*/
        index <<= 8;
 8026294:	8bbb      	ldrh	r3, [r7, #28]
 8026296:	021b      	lsls	r3, r3, #8
 8026298:	83bb      	strh	r3, [r7, #28]
/*ECATCHANGE_START(V5.12) COE5*/
        index += (pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET]);
 802629a:	687b      	ldr	r3, [r7, #4]
 802629c:	7a5b      	ldrb	r3, [r3, #9]
 802629e:	b29a      	uxth	r2, r3
 80262a0:	8bbb      	ldrh	r3, [r7, #28]
 80262a2:	4413      	add	r3, r2
 80262a4:	83bb      	strh	r3, [r7, #28]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET];
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	7adb      	ldrb	r3, [r3, #11]
 80262aa:	76fb      	strb	r3, [r7, #27]




        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 80262ac:	8bbb      	ldrh	r3, [r7, #28]
 80262ae:	4618      	mov	r0, r3
 80262b0:	f7fe fac4 	bl	802483c <OBJ_GetObjectHandle>
 80262b4:	6178      	str	r0, [r7, #20]

        if ( pObjEntry )
 80262b6:	697b      	ldr	r3, [r7, #20]
 80262b8:	2b00      	cmp	r3, #0
 80262ba:	f000 8240 	beq.w	802673e <SDOS_SdoInd+0x512>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 80262be:	2300      	movs	r3, #0
 80262c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 80262c4:	2300      	movs	r3, #0
 80262c6:	627b      	str	r3, [r7, #36]	; 0x24
            UINT8 segTransfer = 0;
 80262c8:	2300      	movs	r3, #0
 80262ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            {
/*ECATCHANGE_START(V5.12) COE6*/
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80262ce:	697b      	ldr	r3, [r7, #20]
 80262d0:	899b      	ldrh	r3, [r3, #12]
 80262d2:	74fb      	strb	r3, [r7, #19]

                if (subindex > maxSubindex)
 80262d4:	7efa      	ldrb	r2, [r7, #27]
 80262d6:	7cfb      	ldrb	r3, [r7, #19]
 80262d8:	429a      	cmp	r2, r3
 80262da:	d903      	bls.n	80262e4 <SDOS_SdoInd+0xb8>
                {
                    abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 80262dc:	2311      	movs	r3, #17
 80262de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80262e2:	e00e      	b.n	8026302 <SDOS_SdoInd+0xd6>
                }
                else
                {
                    dataSize = objLength = OBJ_GetObjectLength(index, subindex, pObjEntry, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS));
 80262e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80262e8:	f003 0310 	and.w	r3, r3, #16
 80262ec:	b2db      	uxtb	r3, r3
 80262ee:	8bb9      	ldrh	r1, [r7, #28]
 80262f0:	7efa      	ldrb	r2, [r7, #27]
 80262f2:	4608      	mov	r0, r1
 80262f4:	4611      	mov	r1, r2
 80262f6:	697a      	ldr	r2, [r7, #20]
 80262f8:	f7fe fabc 	bl	8024874 <OBJ_GetObjectLength>
 80262fc:	6338      	str	r0, [r7, #48]	; 0x30
 80262fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026300:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

                if( abort == 0)
 8026302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026306:	2b00      	cmp	r3, #0
 8026308:	d132      	bne.n	8026370 <SDOS_SdoInd+0x144>
/*ECATCHANGE_END(V5.12) COE6*/
                {
                    if (command == SDOSERVICE_INITIATEUPLOADREQ)
 802630a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802630e:	2b40      	cmp	r3, #64	; 0x40
 8026310:	d128      	bne.n	8026364 <SDOS_SdoInd+0x138>
                    {
                            /* SDO Upload */
                            if (mbxSize != EXPEDITED_FRAME_SIZE)
 8026312:	8bfb      	ldrh	r3, [r7, #30]
 8026314:	2b0a      	cmp	r3, #10
 8026316:	d001      	beq.n	802631c <SDOS_SdoInd+0xf0>
                            {
                                    /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                                    return MBXERR_INVALIDSIZE;
 8026318:	2308      	movs	r3, #8
 802631a:	e24c      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                            }
                        /* distinguish between expedited and normal upload response within the length of the response data */
                        if ((objLength <= MAX_EXPEDITED_DATA) && objLength != 0)
 802631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802631e:	2b04      	cmp	r3, #4
 8026320:	d810      	bhi.n	8026344 <SDOS_SdoInd+0x118>
 8026322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026324:	2b00      	cmp	r3, #0
 8026326:	d00d      	beq.n	8026344 <SDOS_SdoInd+0x118>
                        {
                                /* Expedited Upload */
                                bTransferType = 1;
 8026328:	2301      	movs	r3, #1
 802632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                            /* pData is the pointer where the object data has to be copied for the response */
    /* ECATCHANGE_START(V5.12)*/
                            pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 802632e:	687b      	ldr	r3, [r7, #4]
 8026330:	330c      	adds	r3, #12
 8026332:	627b      	str	r3, [r7, #36]	; 0x24
    /* ECATCHANGE_END(V5.12)*/
                                                    /* initialize the 4 data bytes of the SDO upload response because the requested object data
                                                       could be less than 4 */
                            pData[0] = 0;
 8026334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026336:	2200      	movs	r2, #0
 8026338:	801a      	strh	r2, [r3, #0]
                            pData[1] = 0;
 802633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802633c:	3302      	adds	r3, #2
 802633e:	2200      	movs	r2, #0
 8026340:	801a      	strh	r2, [r3, #0]
 8026342:	e015      	b.n	8026370 <SDOS_SdoInd+0x144>
                        }
                        else
                        {
                                /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                                dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8026344:	4b74      	ldr	r3, [pc, #464]	; (8026518 <SDOS_SdoInd+0x2ec>)
 8026346:	881b      	ldrh	r3, [r3, #0]
 8026348:	3b10      	subs	r3, #16
 802634a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            if (dataSize < objLength)
 802634c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026350:	429a      	cmp	r2, r3
 8026352:	d203      	bcs.n	802635c <SDOS_SdoInd+0x130>
                            {
                                    /* Segmented Upload */
                                    segTransfer = 1;
 8026354:	2301      	movs	r3, #1
 8026356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802635a:	e009      	b.n	8026370 <SDOS_SdoInd+0x144>
                            }
                            else
                            {
                                    /* Normal Upload */
        /* ECATCHANGE_START(V5.12)*/
                                    pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	3310      	adds	r3, #16
 8026360:	627b      	str	r3, [r7, #36]	; 0x24
 8026362:	e005      	b.n	8026370 <SDOS_SdoInd+0x144>
                                }
                        }
                    else
                    {
                        /* SDO-Download: store if the request is a expedited or normal request  */
                        bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 8026364:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026368:	f003 0302 	and.w	r3, r3, #2
 802636c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                 }
            }

/*ECATCHANGE_START(V5.12) COE6*/
            if ((abort == 0 ) && (command == SDOSERVICE_INITIATEDOWNLOADREQ ))
 8026370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026374:	2b00      	cmp	r3, #0
 8026376:	d142      	bne.n	80263fe <SDOS_SdoInd+0x1d2>
 8026378:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802637c:	2b20      	cmp	r3, #32
 802637e:	d13e      	bne.n	80263fe <SDOS_SdoInd+0x1d2>
/*ECATCHANGE_END(V5.12) COE6*/
            {
                /* SDO Download */
                if ( bTransferType )
 8026380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026384:	2b00      	cmp	r3, #0
 8026386:	d010      	beq.n	80263aa <SDOS_SdoInd+0x17e>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 8026388:	8bfb      	ldrh	r3, [r7, #30]
 802638a:	2b0a      	cmp	r3, #10
 802638c:	d001      	beq.n	8026392 <SDOS_SdoInd+0x166>
                    {
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 802638e:	2308      	movs	r3, #8
 8026390:	e211      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                    }
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 8026392:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026396:	f003 030c 	and.w	r3, r3, #12
 802639a:	109b      	asrs	r3, r3, #2
 802639c:	f1c3 0304 	rsb	r3, r3, #4
 80263a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 80263a2:	687b      	ldr	r3, [r7, #4]
 80263a4:	330c      	adds	r3, #12
 80263a6:	627b      	str	r3, [r7, #36]	; 0x24
 80263a8:	e029      	b.n	80263fe <SDOS_SdoInd+0x1d2>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 80263aa:	687b      	ldr	r3, [r7, #4]
 80263ac:	89db      	ldrh	r3, [r3, #14]
 80263ae:	041b      	lsls	r3, r3, #16
 80263b0:	687a      	ldr	r2, [r7, #4]
 80263b2:	8992      	ldrh	r2, [r2, #12]
 80263b4:	4413      	add	r3, r2
 80263b6:	60fb      	str	r3, [r7, #12]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	3310      	adds	r3, #16
 80263bc:	4a57      	ldr	r2, [pc, #348]	; (802651c <SDOS_SdoInd+0x2f0>)
 80263be:	8812      	ldrh	r2, [r2, #0]
 80263c0:	4293      	cmp	r3, r2
 80263c2:	d907      	bls.n	80263d4 <SDOS_SdoInd+0x1a8>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 80263c4:	8bfa      	ldrh	r2, [r7, #30]
 80263c6:	4b55      	ldr	r3, [pc, #340]	; (802651c <SDOS_SdoInd+0x2f0>)
 80263c8:	881b      	ldrh	r3, [r3, #0]
 80263ca:	3b06      	subs	r3, #6
 80263cc:	429a      	cmp	r2, r3
 80263ce:	d008      	beq.n	80263e2 <SDOS_SdoInd+0x1b6>
                        {
                            return MBXERR_INVALIDSIZE;
 80263d0:	2308      	movs	r3, #8
 80263d2:	e1f0      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                        }
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 80263d4:	8bfa      	ldrh	r2, [r7, #30]
 80263d6:	68fb      	ldr	r3, [r7, #12]
 80263d8:	330a      	adds	r3, #10
 80263da:	429a      	cmp	r2, r3
 80263dc:	d001      	beq.n	80263e2 <SDOS_SdoInd+0x1b6>
                        {
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 80263de:	2308      	movs	r3, #8
 80263e0:	e1e9      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                        }
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	3310      	adds	r3, #16
 80263e6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 80263ec:	8bfb      	ldrh	r3, [r7, #30]
 80263ee:	3b0a      	subs	r3, #10
 80263f0:	461a      	mov	r2, r3
 80263f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80263f4:	429a      	cmp	r2, r3
 80263f6:	d202      	bcs.n	80263fe <SDOS_SdoInd+0x1d2>
                    {
                        /* Segmented Download */
                        segTransfer = 1;
 80263f8:	2301      	movs	r3, #1
 80263fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    }
                }
            }

/*ECATCHANGE_START(V5.12) COE6*/
            if ((abort == 0) && (sdoHeader & SDOHEADER_COMPLETEACCESS ))
 80263fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026402:	2b00      	cmp	r3, #0
 8026404:	d10e      	bne.n	8026424 <SDOS_SdoInd+0x1f8>
 8026406:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802640a:	f003 0310 	and.w	r3, r3, #16
 802640e:	2b00      	cmp	r3, #0
 8026410:	d008      	beq.n	8026424 <SDOS_SdoInd+0x1f8>
/*ECATCHANGE_END(V5.12) COE6*/
            {
                bCompleteAccess = 1;
 8026412:	2301      	movs	r3, #1
 8026414:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 8026418:	7efb      	ldrb	r3, [r7, #27]
 802641a:	2b01      	cmp	r3, #1
 802641c:	d902      	bls.n	8026424 <SDOS_SdoInd+0x1f8>
                {
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 802641e:	2305      	movs	r3, #5
 8026420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
            }

            if ( abort == 0 )
 8026424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026428:	2b00      	cmp	r3, #0
 802642a:	f040 8187 	bne.w	802673c <SDOS_SdoInd+0x510>
            {
                if ( segTransfer )
 802642e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026432:	2b00      	cmp	r3, #0
 8026434:	f000 80db 	beq.w	80265ee <SDOS_SdoInd+0x3c2>
                {
                    bSdoSegFollows         = TRUE;
 8026438:	4b39      	ldr	r3, [pc, #228]	; (8026520 <SDOS_SdoInd+0x2f4>)
 802643a:	2201      	movs	r2, #1
 802643c:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 802643e:	4b39      	ldr	r3, [pc, #228]	; (8026524 <SDOS_SdoInd+0x2f8>)
 8026440:	2201      	movs	r2, #1
 8026442:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 8026444:	4a38      	ldr	r2, [pc, #224]	; (8026528 <SDOS_SdoInd+0x2fc>)
 8026446:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802644a:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 802644c:	4a37      	ldr	r2, [pc, #220]	; (802652c <SDOS_SdoInd+0x300>)
 802644e:	8bbb      	ldrh	r3, [r7, #28]
 8026450:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 8026452:	4a37      	ldr	r2, [pc, #220]	; (8026530 <SDOS_SdoInd+0x304>)
 8026454:	7efb      	ldrb	r3, [r7, #27]
 8026456:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 8026458:	4a36      	ldr	r2, [pc, #216]	; (8026534 <SDOS_SdoInd+0x308>)
 802645a:	697b      	ldr	r3, [r7, #20]
 802645c:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 802645e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026462:	2b40      	cmp	r3, #64	; 0x40
 8026464:	d103      	bne.n	802646e <SDOS_SdoInd+0x242>
                    {
                        nSdoSegCompleteSize    = objLength;
 8026466:	4a34      	ldr	r2, [pc, #208]	; (8026538 <SDOS_SdoInd+0x30c>)
 8026468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802646a:	6013      	str	r3, [r2, #0]
 802646c:	e002      	b.n	8026474 <SDOS_SdoInd+0x248>
                    }
                    else
                    {
                        nSdoSegCompleteSize    = dataSize;
 802646e:	4a32      	ldr	r2, [pc, #200]	; (8026538 <SDOS_SdoInd+0x30c>)
 8026470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026472:	6013      	str	r3, [r2, #0]
                    }

                    if (pSdoSegData != NULL)
 8026474:	4b31      	ldr	r3, [pc, #196]	; (802653c <SDOS_SdoInd+0x310>)
 8026476:	681b      	ldr	r3, [r3, #0]
 8026478:	2b00      	cmp	r3, #0
 802647a:	d007      	beq.n	802648c <SDOS_SdoInd+0x260>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 802647c:	4b2f      	ldr	r3, [pc, #188]	; (802653c <SDOS_SdoInd+0x310>)
 802647e:	681b      	ldr	r3, [r3, #0]
 8026480:	4618      	mov	r0, r3
 8026482:	f004 fbb1 	bl	802abe8 <free>
                        pSdoSegData = NULL;
 8026486:	4b2d      	ldr	r3, [pc, #180]	; (802653c <SDOS_SdoInd+0x310>)
 8026488:	2200      	movs	r2, #0
 802648a:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 802648c:	4b2a      	ldr	r3, [pc, #168]	; (8026538 <SDOS_SdoInd+0x30c>)
 802648e:	681b      	ldr	r3, [r3, #0]
 8026490:	3301      	adds	r3, #1
 8026492:	f023 0301 	bic.w	r3, r3, #1
 8026496:	4618      	mov	r0, r3
 8026498:	f004 fb9e 	bl	802abd8 <malloc>
 802649c:	4603      	mov	r3, r0
 802649e:	461a      	mov	r2, r3
 80264a0:	4b26      	ldr	r3, [pc, #152]	; (802653c <SDOS_SdoInd+0x310>)
 80264a2:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 80264a4:	4b25      	ldr	r3, [pc, #148]	; (802653c <SDOS_SdoInd+0x310>)
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	2b00      	cmp	r3, #0
 80264aa:	d10b      	bne.n	80264c4 <SDOS_SdoInd+0x298>
                    {
                        if(bCompleteAccess)
 80264ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80264b0:	2b00      	cmp	r3, #0
 80264b2:	d003      	beq.n	80264bc <SDOS_SdoInd+0x290>
                        {
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80264b4:	2305      	movs	r3, #5
 80264b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80264ba:	e13f      	b.n	802673c <SDOS_SdoInd+0x510>
                        }
                        else
                        {
                            abort = ABORTIDX_OUT_OF_MEMORY;
 80264bc:	2304      	movs	r3, #4
 80264be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80264c2:	e13b      	b.n	802673c <SDOS_SdoInd+0x510>
                        }
                    }
                    else
                    {
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80264c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80264c8:	2b40      	cmp	r3, #64	; 0x40
 80264ca:	d17a      	bne.n	80265c2 <SDOS_SdoInd+0x396>
                        {
                            /* Segmented Upload */
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 80264cc:	4b1b      	ldr	r3, [pc, #108]	; (802653c <SDOS_SdoInd+0x310>)
 80264ce:	681b      	ldr	r3, [r3, #0]
 80264d0:	8bb9      	ldrh	r1, [r7, #28]
 80264d2:	7efa      	ldrb	r2, [r7, #27]
 80264d4:	9300      	str	r3, [sp, #0]
 80264d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80264da:	9301      	str	r3, [sp, #4]
 80264dc:	4608      	mov	r0, r1
 80264de:	4611      	mov	r1, r2
 80264e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80264e2:	697b      	ldr	r3, [r7, #20]
 80264e4:	f7fe fdb4 	bl	8025050 <OBJ_Read>
 80264e8:	4603      	mov	r3, r0
 80264ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                            if ( abort == 0 )
 80264ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d126      	bne.n	8026544 <SDOS_SdoInd+0x318>
                            {
/* ECATCHANGE_START(V5.12)*/
                                MBXMEMCPY((UINT16 *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 80264f6:	687b      	ldr	r3, [r7, #4]
 80264f8:	f103 0210 	add.w	r2, r3, #16
 80264fc:	4b0f      	ldr	r3, [pc, #60]	; (802653c <SDOS_SdoInd+0x310>)
 80264fe:	681b      	ldr	r3, [r3, #0]
 8026500:	4610      	mov	r0, r2
 8026502:	4619      	mov	r1, r3
 8026504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026506:	f004 fb87 	bl	802ac18 <memcpy>
/* ECATCHANGE_END(V5.12)*/
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 802650a:	4b0d      	ldr	r3, [pc, #52]	; (8026540 <SDOS_SdoInd+0x314>)
 802650c:	2260      	movs	r2, #96	; 0x60
 802650e:	701a      	strb	r2, [r3, #0]
 8026510:	e069      	b.n	80265e6 <SDOS_SdoInd+0x3ba>
 8026512:	bf00      	nop
 8026514:	1ffe9583 	.word	0x1ffe9583
 8026518:	1ffea914 	.word	0x1ffea914
 802651c:	1ffea926 	.word	0x1ffea926
 8026520:	1ffea9cd 	.word	0x1ffea9cd
 8026524:	1ffea9da 	.word	0x1ffea9da
 8026528:	1ffea9cc 	.word	0x1ffea9cc
 802652c:	1ffea9f0 	.word	0x1ffea9f0
 8026530:	1ffeaa08 	.word	0x1ffeaa08
 8026534:	1ffeaa04 	.word	0x1ffeaa04
 8026538:	1ffea9d0 	.word	0x1ffea9d0
 802653c:	1ffea9ec 	.word	0x1ffea9ec
 8026540:	1ffea9db 	.word	0x1ffea9db
                            }
                            else if ( abort == ABORTIDX_WORKING )
 8026544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026548:	2bff      	cmp	r3, #255	; 0xff
 802654a:	d14c      	bne.n	80265e6 <SDOS_SdoInd+0x3ba>
                            {
                                /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 802654c:	4b9c      	ldr	r3, [pc, #624]	; (80267c0 <SDOS_SdoInd+0x594>)
 802654e:	2204      	movs	r2, #4
 8026550:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 8026552:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8026556:	2b00      	cmp	r3, #0
 8026558:	bf14      	ite	ne
 802655a:	2301      	movne	r3, #1
 802655c:	2300      	moveq	r3, #0
 802655e:	b2da      	uxtb	r2, r3
 8026560:	4b98      	ldr	r3, [pc, #608]	; (80267c4 <SDOS_SdoInd+0x598>)
 8026562:	701a      	strb	r2, [r3, #0]
                                u8StoreSubindex = subindex;
 8026564:	4a98      	ldr	r2, [pc, #608]	; (80267c8 <SDOS_SdoInd+0x59c>)
 8026566:	7efb      	ldrb	r3, [r7, #27]
 8026568:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 802656a:	4a98      	ldr	r2, [pc, #608]	; (80267cc <SDOS_SdoInd+0x5a0>)
 802656c:	8bbb      	ldrh	r3, [r7, #28]
 802656e:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 8026570:	4a97      	ldr	r2, [pc, #604]	; (80267d0 <SDOS_SdoInd+0x5a4>)
 8026572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026574:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 8026576:	4b97      	ldr	r3, [pc, #604]	; (80267d4 <SDOS_SdoInd+0x5a8>)
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	4a97      	ldr	r2, [pc, #604]	; (80267d8 <SDOS_SdoInd+0x5ac>)
 802657c:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 802657e:	697b      	ldr	r3, [r7, #20]
 8026580:	69db      	ldr	r3, [r3, #28]
 8026582:	4a96      	ldr	r2, [pc, #600]	; (80267dc <SDOS_SdoInd+0x5b0>)
 8026584:	6013      	str	r3, [r2, #0]

                                bSdoInWork = TRUE;
 8026586:	4b96      	ldr	r3, [pc, #600]	; (80267e0 <SDOS_SdoInd+0x5b4>)
 8026588:	2201      	movs	r2, #1
 802658a:	701a      	strb	r2, [r3, #0]
                                /* we have to store the buffer and the response header */
                                pSdoResStored = pSdoInd;
 802658c:	4a95      	ldr	r2, [pc, #596]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802658e:	687b      	ldr	r3, [r7, #4]
 8026590:	6013      	str	r3, [r2, #0]

                                /*update command field*/
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 8026592:	4b94      	ldr	r3, [pc, #592]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 8026594:	681b      	ldr	r3, [r3, #0]
 8026596:	2200      	movs	r2, #0
 8026598:	721a      	strb	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 802659a:	4b92      	ldr	r3, [pc, #584]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	4a91      	ldr	r2, [pc, #580]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 80265a0:	6812      	ldr	r2, [r2, #0]
 80265a2:	7a12      	ldrb	r2, [r2, #8]
 80265a4:	b2d1      	uxtb	r1, r2
 80265a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80265aa:	f022 020f 	bic.w	r2, r2, #15
 80265ae:	b2d2      	uxtb	r2, r2
 80265b0:	430a      	orrs	r2, r1
 80265b2:	b2d2      	uxtb	r2, r2
 80265b4:	b2d2      	uxtb	r2, r2
 80265b6:	721a      	strb	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 80265b8:	4b8b      	ldr	r3, [pc, #556]	; (80267e8 <SDOS_SdoInd+0x5bc>)
 80265ba:	2260      	movs	r2, #96	; 0x60
 80265bc:	701a      	strb	r2, [r3, #0]
                                return 0;
 80265be:	2300      	movs	r3, #0
 80265c0:	e0f9      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                        }
                        else
                        {
                            /* Segmented Download */
/* ECATCHANGE_START(V5.12)*/
                            MBXMEMCPY( pSdoSegData, (UINT16 *)((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 80265c2:	4b84      	ldr	r3, [pc, #528]	; (80267d4 <SDOS_SdoInd+0x5a8>)
 80265c4:	6819      	ldr	r1, [r3, #0]
 80265c6:	687b      	ldr	r3, [r7, #4]
 80265c8:	f103 0210 	add.w	r2, r3, #16
 80265cc:	8bfb      	ldrh	r3, [r7, #30]
 80265ce:	3b0a      	subs	r3, #10
 80265d0:	4608      	mov	r0, r1
 80265d2:	4611      	mov	r1, r2
 80265d4:	461a      	mov	r2, r3
 80265d6:	f004 fb1f 	bl	802ac18 <memcpy>
/* ECATCHANGE_END(V5.12)*/
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 80265da:	4b83      	ldr	r3, [pc, #524]	; (80267e8 <SDOS_SdoInd+0x5bc>)
 80265dc:	2200      	movs	r2, #0
 80265de:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 80265e0:	8bfb      	ldrh	r3, [r7, #30]
 80265e2:	3b0a      	subs	r3, #10
 80265e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                        }

                        nSdoSegBytesToHandle = dataSize;
 80265e6:	4a81      	ldr	r2, [pc, #516]	; (80267ec <SDOS_SdoInd+0x5c0>)
 80265e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265ea:	6013      	str	r3, [r2, #0]
 80265ec:	e0ab      	b.n	8026746 <SDOS_SdoInd+0x51a>
                    }
                }
                else
                {
                    if ( objLength == 0 )
 80265ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80265f0:	2b00      	cmp	r3, #0
 80265f2:	d108      	bne.n	8026606 <SDOS_SdoInd+0x3da>
                    {
                        /* the objLength is not known, therefore the variables for a possible segmented transfer
                            should be initialized */
                        nSdoSegIndex             = index;
 80265f4:	4a7e      	ldr	r2, [pc, #504]	; (80267f0 <SDOS_SdoInd+0x5c4>)
 80265f6:	8bbb      	ldrh	r3, [r7, #28]
 80265f8:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 80265fa:	4a7e      	ldr	r2, [pc, #504]	; (80267f4 <SDOS_SdoInd+0x5c8>)
 80265fc:	7efb      	ldrb	r3, [r7, #27]
 80265fe:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 8026600:	4a7d      	ldr	r2, [pc, #500]	; (80267f8 <SDOS_SdoInd+0x5cc>)
 8026602:	697b      	ldr	r3, [r7, #20]
 8026604:	6013      	str	r3, [r2, #0]
                    }
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8026606:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802660a:	2b40      	cmp	r3, #64	; 0x40
 802660c:	d14b      	bne.n	80266a6 <SDOS_SdoInd+0x47a>
                    {
                        /* Expedited or Normal Upload */
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 802660e:	8bb9      	ldrh	r1, [r7, #28]
 8026610:	7efa      	ldrb	r2, [r7, #27]
 8026612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026614:	9300      	str	r3, [sp, #0]
 8026616:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802661a:	9301      	str	r3, [sp, #4]
 802661c:	4608      	mov	r0, r1
 802661e:	4611      	mov	r1, r2
 8026620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026622:	697b      	ldr	r3, [r7, #20]
 8026624:	f7fe fd14 	bl	8025050 <OBJ_Read>
 8026628:	4603      	mov	r3, r0
 802662a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        if ( abort == ABORTIDX_WORKING )
 802662e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8026632:	2bff      	cmp	r3, #255	; 0xff
 8026634:	f040 8082 	bne.w	802673c <SDOS_SdoInd+0x510>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_READ;
 8026638:	4b61      	ldr	r3, [pc, #388]	; (80267c0 <SDOS_SdoInd+0x594>)
 802663a:	2203      	movs	r2, #3
 802663c:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 802663e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8026642:	2b00      	cmp	r3, #0
 8026644:	bf14      	ite	ne
 8026646:	2301      	movne	r3, #1
 8026648:	2300      	moveq	r3, #0
 802664a:	b2da      	uxtb	r2, r3
 802664c:	4b5d      	ldr	r3, [pc, #372]	; (80267c4 <SDOS_SdoInd+0x598>)
 802664e:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 8026650:	4a5d      	ldr	r2, [pc, #372]	; (80267c8 <SDOS_SdoInd+0x59c>)
 8026652:	7efb      	ldrb	r3, [r7, #27]
 8026654:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8026656:	4a5d      	ldr	r2, [pc, #372]	; (80267cc <SDOS_SdoInd+0x5a0>)
 8026658:	8bbb      	ldrh	r3, [r7, #28]
 802665a:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 802665c:	4a5c      	ldr	r2, [pc, #368]	; (80267d0 <SDOS_SdoInd+0x5a4>)
 802665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026660:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8026662:	4a5d      	ldr	r2, [pc, #372]	; (80267d8 <SDOS_SdoInd+0x5ac>)
 8026664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026666:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 8026668:	697b      	ldr	r3, [r7, #20]
 802666a:	69db      	ldr	r3, [r3, #28]
 802666c:	4a5b      	ldr	r2, [pc, #364]	; (80267dc <SDOS_SdoInd+0x5b0>)
 802666e:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 8026670:	4b5b      	ldr	r3, [pc, #364]	; (80267e0 <SDOS_SdoInd+0x5b4>)
 8026672:	2201      	movs	r2, #1
 8026674:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8026676:	4a5b      	ldr	r2, [pc, #364]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 8026678:	687b      	ldr	r3, [r7, #4]
 802667a:	6013      	str	r3, [r2, #0]
                            
                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 802667c:	4b59      	ldr	r3, [pc, #356]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802667e:	681b      	ldr	r3, [r3, #0]
 8026680:	2200      	movs	r2, #0
 8026682:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8026684:	4b57      	ldr	r3, [pc, #348]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 8026686:	681b      	ldr	r3, [r3, #0]
 8026688:	4a56      	ldr	r2, [pc, #344]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802668a:	6812      	ldr	r2, [r2, #0]
 802668c:	7a12      	ldrb	r2, [r2, #8]
 802668e:	b2d1      	uxtb	r1, r2
 8026690:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8026694:	f022 020f 	bic.w	r2, r2, #15
 8026698:	b2d2      	uxtb	r2, r2
 802669a:	430a      	orrs	r2, r1
 802669c:	b2d2      	uxtb	r2, r2
 802669e:	b2d2      	uxtb	r2, r2
 80266a0:	721a      	strb	r2, [r3, #8]
                            return 0;
 80266a2:	2300      	movs	r3, #0
 80266a4:	e087      	b.n	80267b6 <SDOS_SdoInd+0x58a>
                        }
                    }
                    else
                    {
                        /* Expedited or Normal Download */
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 80266a6:	8bb9      	ldrh	r1, [r7, #28]
 80266a8:	7efa      	ldrb	r2, [r7, #27]
 80266aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266ac:	9300      	str	r3, [sp, #0]
 80266ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80266b2:	9301      	str	r3, [sp, #4]
 80266b4:	4608      	mov	r0, r1
 80266b6:	4611      	mov	r1, r2
 80266b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80266ba:	697b      	ldr	r3, [r7, #20]
 80266bc:	f7fe ffa0 	bl	8025600 <OBJ_Write>
 80266c0:	4603      	mov	r3, r0
 80266c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        if ( abort == ABORTIDX_WORKING )
 80266c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80266ca:	2bff      	cmp	r3, #255	; 0xff
 80266cc:	d136      	bne.n	802673c <SDOS_SdoInd+0x510>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_WRITE;
 80266ce:	4b3c      	ldr	r3, [pc, #240]	; (80267c0 <SDOS_SdoInd+0x594>)
 80266d0:	2201      	movs	r2, #1
 80266d2:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 80266d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80266d8:	2b00      	cmp	r3, #0
 80266da:	bf14      	ite	ne
 80266dc:	2301      	movne	r3, #1
 80266de:	2300      	moveq	r3, #0
 80266e0:	b2da      	uxtb	r2, r3
 80266e2:	4b38      	ldr	r3, [pc, #224]	; (80267c4 <SDOS_SdoInd+0x598>)
 80266e4:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 80266e6:	4a38      	ldr	r2, [pc, #224]	; (80267c8 <SDOS_SdoInd+0x59c>)
 80266e8:	7efb      	ldrb	r3, [r7, #27]
 80266ea:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 80266ec:	4a37      	ldr	r2, [pc, #220]	; (80267cc <SDOS_SdoInd+0x5a0>)
 80266ee:	8bbb      	ldrh	r3, [r7, #28]
 80266f0:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 80266f2:	4a37      	ldr	r2, [pc, #220]	; (80267d0 <SDOS_SdoInd+0x5a4>)
 80266f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266f6:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 80266f8:	4a37      	ldr	r2, [pc, #220]	; (80267d8 <SDOS_SdoInd+0x5ac>)
 80266fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266fc:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 80266fe:	697b      	ldr	r3, [r7, #20]
 8026700:	6a1b      	ldr	r3, [r3, #32]
 8026702:	4a36      	ldr	r2, [pc, #216]	; (80267dc <SDOS_SdoInd+0x5b0>)
 8026704:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 8026706:	4b36      	ldr	r3, [pc, #216]	; (80267e0 <SDOS_SdoInd+0x5b4>)
 8026708:	2201      	movs	r2, #1
 802670a:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 802670c:	4a35      	ldr	r2, [pc, #212]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	6013      	str	r3, [r2, #0]

                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8026712:	4b34      	ldr	r3, [pc, #208]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	2200      	movs	r2, #0
 8026718:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 802671a:	4b32      	ldr	r3, [pc, #200]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 802671c:	681b      	ldr	r3, [r3, #0]
 802671e:	4a31      	ldr	r2, [pc, #196]	; (80267e4 <SDOS_SdoInd+0x5b8>)
 8026720:	6812      	ldr	r2, [r2, #0]
 8026722:	7a12      	ldrb	r2, [r2, #8]
 8026724:	b2d1      	uxtb	r1, r2
 8026726:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802672a:	f022 020f 	bic.w	r2, r2, #15
 802672e:	b2d2      	uxtb	r2, r2
 8026730:	430a      	orrs	r2, r1
 8026732:	b2d2      	uxtb	r2, r2
 8026734:	b2d2      	uxtb	r2, r2
 8026736:	721a      	strb	r2, [r3, #8]
                            return 0;
 8026738:	2300      	movs	r3, #0
 802673a:	e03c      	b.n	80267b6 <SDOS_SdoInd+0x58a>
 802673c:	e003      	b.n	8026746 <SDOS_SdoInd+0x51a>
            } /* if ( abort == 0 ) */

        } //if(pObjEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 802673e:	2308      	movs	r3, #8
 8026740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        break;
 8026744:	e020      	b.n	8026788 <SDOS_SdoInd+0x55c>
 8026746:	e01f      	b.n	8026788 <SDOS_SdoInd+0x55c>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 8026748:	4b27      	ldr	r3, [pc, #156]	; (80267e8 <SDOS_SdoInd+0x5bc>)
 802674a:	781b      	ldrb	r3, [r3, #0]
 802674c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8026750:	429a      	cmp	r2, r3
 8026752:	d111      	bne.n	8026778 <SDOS_SdoInd+0x54c>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8026754:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026758:	2b00      	cmp	r3, #0
 802675a:	d106      	bne.n	802676a <SDOS_SdoInd+0x53e>
            {
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 802675c:	6878      	ldr	r0, [r7, #4]
 802675e:	f7ff fab7 	bl	8025cd0 <SdoDownloadSegmentInd>
 8026762:	4603      	mov	r3, r0
 8026764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        }
        break;
 8026768:	e00e      	b.n	8026788 <SDOS_SdoInd+0x55c>
            {
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            }
            else
            {
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 802676a:	6878      	ldr	r0, [r7, #4]
 802676c:	f7ff fbf2 	bl	8025f54 <SdoUploadSegmentInd>
 8026770:	4603      	mov	r3, r0
 8026772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        }
        break;
 8026776:	e007      	b.n	8026788 <SDOS_SdoInd+0x55c>
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8026778:	2303      	movs	r3, #3
 802677a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        break;
 802677e:	e003      	b.n	8026788 <SDOS_SdoInd+0x55c>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8026780:	2303      	movs	r3, #3
 8026782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        break;
 8026786:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 8026788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802678c:	2bff      	cmp	r3, #255	; 0xff
 802678e:	d011      	beq.n	80267b4 <SDOS_SdoInd+0x588>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 8026790:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026794:	f003 0310 	and.w	r3, r3, #16
 8026798:	b2da      	uxtb	r2, r3
 802679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802679c:	b29c      	uxth	r4, r3
 802679e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80267a2:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80267a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267a8:	9300      	str	r3, [sp, #0]
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	9301      	str	r3, [sp, #4]
 80267ae:	4623      	mov	r3, r4
 80267b0:	f7ff fc84 	bl	80260bc <SdoRes>
    }

    return 0;
 80267b4:	2300      	movs	r3, #0
}
 80267b6:	4618      	mov	r0, r3
 80267b8:	373c      	adds	r7, #60	; 0x3c
 80267ba:	46bd      	mov	sp, r7
 80267bc:	bd90      	pop	{r4, r7, pc}
 80267be:	bf00      	nop
 80267c0:	1ffea9d8 	.word	0x1ffea9d8
 80267c4:	1ffea9d9 	.word	0x1ffea9d9
 80267c8:	1ffeaa0c 	.word	0x1ffeaa0c
 80267cc:	1ffeaa0a 	.word	0x1ffeaa0a
 80267d0:	1ffea9e8 	.word	0x1ffea9e8
 80267d4:	1ffea9ec 	.word	0x1ffea9ec
 80267d8:	1ffea9c4 	.word	0x1ffea9c4
 80267dc:	1ffea9d4 	.word	0x1ffea9d4
 80267e0:	1ffe9583 	.word	0x1ffe9583
 80267e4:	1ffea9e4 	.word	0x1ffea9e4
 80267e8:	1ffea9db 	.word	0x1ffea9db
 80267ec:	1ffea9c8 	.word	0x1ffea9c8
 80267f0:	1ffea9f0 	.word	0x1ffea9f0
 80267f4:	1ffeaa08 	.word	0x1ffeaa08
 80267f8:	1ffeaa04 	.word	0x1ffeaa04

080267fc <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 80267fc:	b5b0      	push	{r4, r5, r7, lr}
 80267fe:	b088      	sub	sp, #32
 8026800:	af02      	add	r7, sp, #8
 8026802:	4603      	mov	r3, r0
 8026804:	60b9      	str	r1, [r7, #8]
 8026806:	607a      	str	r2, [r7, #4]
 8026808:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 802680a:	2300      	movs	r3, #0
 802680c:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 802680e:	4b3a      	ldr	r3, [pc, #232]	; (80268f8 <SDOS_SdoRes+0xfc>)
 8026810:	781b      	ldrb	r3, [r3, #0]
 8026812:	2b00      	cmp	r3, #0
 8026814:	d06c      	beq.n	80268f0 <SDOS_SdoRes+0xf4>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 8026816:	4b39      	ldr	r3, [pc, #228]	; (80268fc <SDOS_SdoRes+0x100>)
 8026818:	681b      	ldr	r3, [r3, #0]
 802681a:	7a1b      	ldrb	r3, [r3, #8]
 802681c:	f023 031f 	bic.w	r3, r3, #31
 8026820:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 8026822:	4b36      	ldr	r3, [pc, #216]	; (80268fc <SDOS_SdoRes+0x100>)
 8026824:	681b      	ldr	r3, [r3, #0]
 8026826:	7a1b      	ldrb	r3, [r3, #8]
 8026828:	f003 0310 	and.w	r3, r3, #16
 802682c:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 802682e:	7d7b      	ldrb	r3, [r7, #21]
 8026830:	2b40      	cmp	r3, #64	; 0x40
 8026832:	d14d      	bne.n	80268d0 <SDOS_SdoRes+0xd4>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8026834:	4b32      	ldr	r3, [pc, #200]	; (8026900 <SDOS_SdoRes+0x104>)
 8026836:	881b      	ldrh	r3, [r3, #0]
 8026838:	3b10      	subs	r3, #16
 802683a:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 802683c:	8afa      	ldrh	r2, [r7, #22]
 802683e:	68bb      	ldr	r3, [r7, #8]
 8026840:	429a      	cmp	r2, r3
 8026842:	d21f      	bcs.n	8026884 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 8026844:	4b2f      	ldr	r3, [pc, #188]	; (8026904 <SDOS_SdoRes+0x108>)
 8026846:	2201      	movs	r2, #1
 8026848:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 802684a:	4b2f      	ldr	r3, [pc, #188]	; (8026908 <SDOS_SdoRes+0x10c>)
 802684c:	2201      	movs	r2, #1
 802684e:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 8026850:	4a2e      	ldr	r2, [pc, #184]	; (802690c <SDOS_SdoRes+0x110>)
 8026852:	7d3b      	ldrb	r3, [r7, #20]
 8026854:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 8026856:	4a2e      	ldr	r2, [pc, #184]	; (8026910 <SDOS_SdoRes+0x114>)
 8026858:	68bb      	ldr	r3, [r7, #8]
 802685a:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 802685c:	4b2d      	ldr	r3, [pc, #180]	; (8026914 <SDOS_SdoRes+0x118>)
 802685e:	2260      	movs	r2, #96	; 0x60
 8026860:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 8026862:	4a2d      	ldr	r2, [pc, #180]	; (8026918 <SDOS_SdoRes+0x11c>)
 8026864:	687b      	ldr	r3, [r7, #4]
 8026866:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
/* ECATCHANGE_START(V5.12)*/
                MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8026868:	4b24      	ldr	r3, [pc, #144]	; (80268fc <SDOS_SdoRes+0x100>)
 802686a:	681b      	ldr	r3, [r3, #0]
 802686c:	f103 0210 	add.w	r2, r3, #16
 8026870:	8afb      	ldrh	r3, [r7, #22]
 8026872:	4610      	mov	r0, r2
 8026874:	6879      	ldr	r1, [r7, #4]
 8026876:	461a      	mov	r2, r3
 8026878:	f004 f9ce 	bl	802ac18 <memcpy>
/* ECATCHANGE_END(V5.12)*/
                nSdoSegBytesToHandle = dataSize;
 802687c:	8afb      	ldrh	r3, [r7, #22]
 802687e:	4a27      	ldr	r2, [pc, #156]	; (802691c <SDOS_SdoRes+0x120>)
 8026880:	6013      	str	r3, [r2, #0]
 8026882:	e025      	b.n	80268d0 <SDOS_SdoRes+0xd4>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 8026884:	68bb      	ldr	r3, [r7, #8]
 8026886:	2b04      	cmp	r3, #4
 8026888:	d813      	bhi.n	80268b2 <SDOS_SdoRes+0xb6>
 802688a:	68bb      	ldr	r3, [r7, #8]
 802688c:	2b00      	cmp	r3, #0
 802688e:	d010      	beq.n	80268b2 <SDOS_SdoRes+0xb6>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8026890:	4b1a      	ldr	r3, [pc, #104]	; (80268fc <SDOS_SdoRes+0x100>)
 8026892:	681b      	ldr	r3, [r3, #0]
 8026894:	f103 020c 	add.w	r2, r3, #12
 8026898:	687b      	ldr	r3, [r7, #4]
 802689a:	429a      	cmp	r2, r3
 802689c:	d008      	beq.n	80268b0 <SDOS_SdoRes+0xb4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
/* ECATCHANGE_START(V5.12)*/
                    MBXMEMCPY((UINT16 *)((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 802689e:	4b17      	ldr	r3, [pc, #92]	; (80268fc <SDOS_SdoRes+0x100>)
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	330c      	adds	r3, #12
 80268a4:	4618      	mov	r0, r3
 80268a6:	6879      	ldr	r1, [r7, #4]
 80268a8:	68ba      	ldr	r2, [r7, #8]
 80268aa:	f004 f9b5 	bl	802ac18 <memcpy>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 80268ae:	e00f      	b.n	80268d0 <SDOS_SdoRes+0xd4>
 80268b0:	e00e      	b.n	80268d0 <SDOS_SdoRes+0xd4>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 80268b2:	4b12      	ldr	r3, [pc, #72]	; (80268fc <SDOS_SdoRes+0x100>)
 80268b4:	681b      	ldr	r3, [r3, #0]
 80268b6:	f103 0210 	add.w	r2, r3, #16
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	429a      	cmp	r2, r3
 80268be:	d007      	beq.n	80268d0 <SDOS_SdoRes+0xd4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
/* ECATCHANGE_START(V5.12)*/
                    MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 80268c0:	4b0e      	ldr	r3, [pc, #56]	; (80268fc <SDOS_SdoRes+0x100>)
 80268c2:	681b      	ldr	r3, [r3, #0]
 80268c4:	3310      	adds	r3, #16
 80268c6:	4618      	mov	r0, r3
 80268c8:	6879      	ldr	r1, [r7, #4]
 80268ca:	68ba      	ldr	r2, [r7, #8]
 80268cc:	f004 f9a4 	bl	802ac18 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 80268d0:	4b09      	ldr	r3, [pc, #36]	; (80268f8 <SDOS_SdoRes+0xfc>)
 80268d2:	2200      	movs	r2, #0
 80268d4:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 80268d6:	4b09      	ldr	r3, [pc, #36]	; (80268fc <SDOS_SdoRes+0x100>)
 80268d8:	681b      	ldr	r3, [r3, #0]
 80268da:	7bf8      	ldrb	r0, [r7, #15]
 80268dc:	7d79      	ldrb	r1, [r7, #21]
 80268de:	7d3d      	ldrb	r5, [r7, #20]
 80268e0:	8afc      	ldrh	r4, [r7, #22]
 80268e2:	68ba      	ldr	r2, [r7, #8]
 80268e4:	9200      	str	r2, [sp, #0]
 80268e6:	9301      	str	r3, [sp, #4]
 80268e8:	462a      	mov	r2, r5
 80268ea:	4623      	mov	r3, r4
 80268ec:	f7ff fbe6 	bl	80260bc <SdoRes>
    }
}
 80268f0:	3718      	adds	r7, #24
 80268f2:	46bd      	mov	sp, r7
 80268f4:	bdb0      	pop	{r4, r5, r7, pc}
 80268f6:	bf00      	nop
 80268f8:	1ffe9583 	.word	0x1ffe9583
 80268fc:	1ffea9e4 	.word	0x1ffea9e4
 8026900:	1ffea914 	.word	0x1ffea914
 8026904:	1ffea9cd 	.word	0x1ffea9cd
 8026908:	1ffea9da 	.word	0x1ffea9da
 802690c:	1ffea9cc 	.word	0x1ffea9cc
 8026910:	1ffea9d0 	.word	0x1ffea9d0
 8026914:	1ffea9db 	.word	0x1ffea9db
 8026918:	1ffea9ec 	.word	0x1ffea9ec
 802691c:	1ffea9c8 	.word	0x1ffea9c8

08026920 <SODS_ClearPendingResponse>:
\brief    Clear the variables handling a pending SDO Response
           This function shall be called before the other mailbox data pointer are set to NULL
*////////////////////////////////////////////////////////////////////////////////////////

void  SODS_ClearPendingResponse()
{
 8026920:	b580      	push	{r7, lr}
 8026922:	af00      	add	r7, sp, #0
    if ((bSdoInWork == TRUE) && (pSdoResStored != NULL) && (((TMBX MBXMEM *)pSdoResStored) != psRepeatMbx) && (((TMBX MBXMEM *)pSdoResStored) != psStoreMbx))
 8026924:	4b23      	ldr	r3, [pc, #140]	; (80269b4 <SODS_ClearPendingResponse+0x94>)
 8026926:	781b      	ldrb	r3, [r3, #0]
 8026928:	2b00      	cmp	r3, #0
 802692a:	d017      	beq.n	802695c <SODS_ClearPendingResponse+0x3c>
 802692c:	4b22      	ldr	r3, [pc, #136]	; (80269b8 <SODS_ClearPendingResponse+0x98>)
 802692e:	681b      	ldr	r3, [r3, #0]
 8026930:	2b00      	cmp	r3, #0
 8026932:	d013      	beq.n	802695c <SODS_ClearPendingResponse+0x3c>
 8026934:	4b20      	ldr	r3, [pc, #128]	; (80269b8 <SODS_ClearPendingResponse+0x98>)
 8026936:	681a      	ldr	r2, [r3, #0]
 8026938:	4b20      	ldr	r3, [pc, #128]	; (80269bc <SODS_ClearPendingResponse+0x9c>)
 802693a:	681b      	ldr	r3, [r3, #0]
 802693c:	429a      	cmp	r2, r3
 802693e:	d00d      	beq.n	802695c <SODS_ClearPendingResponse+0x3c>
 8026940:	4b1d      	ldr	r3, [pc, #116]	; (80269b8 <SODS_ClearPendingResponse+0x98>)
 8026942:	681a      	ldr	r2, [r3, #0]
 8026944:	4b1e      	ldr	r3, [pc, #120]	; (80269c0 <SODS_ClearPendingResponse+0xa0>)
 8026946:	681b      	ldr	r3, [r3, #0]
 8026948:	429a      	cmp	r2, r3
 802694a:	d007      	beq.n	802695c <SODS_ClearPendingResponse+0x3c>
    {
        APPL_FreeMailboxBuffer(pSdoResStored);
 802694c:	4b1a      	ldr	r3, [pc, #104]	; (80269b8 <SODS_ClearPendingResponse+0x98>)
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	4618      	mov	r0, r3
 8026952:	f004 f949 	bl	802abe8 <free>
        pSdoResStored = NULL;
 8026956:	4b18      	ldr	r3, [pc, #96]	; (80269b8 <SODS_ClearPendingResponse+0x98>)
 8026958:	2200      	movs	r2, #0
 802695a:	601a      	str	r2, [r3, #0]
    }

    u8PendingSdo = 0;
 802695c:	4b19      	ldr	r3, [pc, #100]	; (80269c4 <SODS_ClearPendingResponse+0xa4>)
 802695e:	2200      	movs	r2, #0
 8026960:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8026962:	4b19      	ldr	r3, [pc, #100]	; (80269c8 <SODS_ClearPendingResponse+0xa8>)
 8026964:	2200      	movs	r2, #0
 8026966:	701a      	strb	r2, [r3, #0]
    u16StoreIndex = 0;
 8026968:	4b18      	ldr	r3, [pc, #96]	; (80269cc <SODS_ClearPendingResponse+0xac>)
 802696a:	2200      	movs	r2, #0
 802696c:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 802696e:	4b18      	ldr	r3, [pc, #96]	; (80269d0 <SODS_ClearPendingResponse+0xb0>)
 8026970:	2200      	movs	r2, #0
 8026972:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8026974:	4b17      	ldr	r3, [pc, #92]	; (80269d4 <SODS_ClearPendingResponse+0xb4>)
 8026976:	2200      	movs	r2, #0
 8026978:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 802697a:	4b17      	ldr	r3, [pc, #92]	; (80269d8 <SODS_ClearPendingResponse+0xb8>)
 802697c:	2200      	movs	r2, #0
 802697e:	601a      	str	r2, [r3, #0]
    pSdoPendFunc = NULL;
 8026980:	4b16      	ldr	r3, [pc, #88]	; (80269dc <SODS_ClearPendingResponse+0xbc>)
 8026982:	2200      	movs	r2, #0
 8026984:	601a      	str	r2, [r3, #0]
    bSdoInWork = FALSE;
 8026986:	4b0b      	ldr	r3, [pc, #44]	; (80269b4 <SODS_ClearPendingResponse+0x94>)
 8026988:	2200      	movs	r2, #0
 802698a:	701a      	strb	r2, [r3, #0]

    if (pSdoSegData != NULL)
 802698c:	4b14      	ldr	r3, [pc, #80]	; (80269e0 <SODS_ClearPendingResponse+0xc0>)
 802698e:	681b      	ldr	r3, [r3, #0]
 8026990:	2b00      	cmp	r3, #0
 8026992:	d007      	beq.n	80269a4 <SODS_ClearPendingResponse+0x84>
    {
        FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8026994:	4b12      	ldr	r3, [pc, #72]	; (80269e0 <SODS_ClearPendingResponse+0xc0>)
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	4618      	mov	r0, r3
 802699a:	f004 f925 	bl	802abe8 <free>
        pSdoSegData = NULL;
 802699e:	4b10      	ldr	r3, [pc, #64]	; (80269e0 <SODS_ClearPendingResponse+0xc0>)
 80269a0:	2200      	movs	r2, #0
 80269a2:	601a      	str	r2, [r3, #0]
    }
    
    nSdoSegBytesToHandle = 0;
 80269a4:	4b0f      	ldr	r3, [pc, #60]	; (80269e4 <SODS_ClearPendingResponse+0xc4>)
 80269a6:	2200      	movs	r2, #0
 80269a8:	601a      	str	r2, [r3, #0]
    nSdoSegService = 0;
 80269aa:	4b0f      	ldr	r3, [pc, #60]	; (80269e8 <SODS_ClearPendingResponse+0xc8>)
 80269ac:	2200      	movs	r2, #0
 80269ae:	701a      	strb	r2, [r3, #0]
    
}
 80269b0:	bd80      	pop	{r7, pc}
 80269b2:	bf00      	nop
 80269b4:	1ffe9583 	.word	0x1ffe9583
 80269b8:	1ffea9e4 	.word	0x1ffea9e4
 80269bc:	1ffea92c 	.word	0x1ffea92c
 80269c0:	1ffea910 	.word	0x1ffea910
 80269c4:	1ffea9d8 	.word	0x1ffea9d8
 80269c8:	1ffea9d9 	.word	0x1ffea9d9
 80269cc:	1ffeaa0a 	.word	0x1ffeaa0a
 80269d0:	1ffeaa0c 	.word	0x1ffeaa0c
 80269d4:	1ffea9e8 	.word	0x1ffea9e8
 80269d8:	1ffea9c4 	.word	0x1ffea9c4
 80269dc:	1ffea9d4 	.word	0x1ffea9d4
 80269e0:	1ffea9ec 	.word	0x1ffea9ec
 80269e4:	1ffea9c8 	.word	0x1ffea9c8
 80269e8:	1ffea9db 	.word	0x1ffea9db

080269ec <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 80269ec:	b590      	push	{r4, r7, lr}
 80269ee:	b08f      	sub	sp, #60	; 0x3c
 80269f0:	af02      	add	r7, sp, #8
 80269f2:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80269f4:	2300      	movs	r3, #0
 80269f6:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	891b      	ldrh	r3, [r3, #8]
 80269fc:	b2db      	uxtb	r3, r3
 80269fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8026a02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 8026a06:	2302      	movs	r3, #2
 8026a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 8026a0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026a10:	2b05      	cmp	r3, #5
 8026a12:	d105      	bne.n	8026a20 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 8026a14:	687b      	ldr	r3, [r7, #4]
 8026a16:	881b      	ldrh	r3, [r3, #0]
 8026a18:	2b09      	cmp	r3, #9
 8026a1a:	d807      	bhi.n	8026a2c <SDOS_SdoInfoInd+0x40>
        {
            return MBXERR_SIZETOOSHORT;
 8026a1c:	2306      	movs	r3, #6
 8026a1e:	e1d9      	b.n	8026dd4 <SDOS_SdoInfoInd+0x3e8>
        }
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 8026a20:	687b      	ldr	r3, [r7, #4]
 8026a22:	881b      	ldrh	r3, [r3, #0]
 8026a24:	2b07      	cmp	r3, #7
 8026a26:	d801      	bhi.n	8026a2c <SDOS_SdoInfoInd+0x40>
        {
            return MBXERR_SIZETOOSHORT;
 8026a28:	2306      	movs	r3, #6
 8026a2a:	e1d3      	b.n	8026dd4 <SDOS_SdoInfoInd+0x3e8>
        }
    }

    switch (opCode)
 8026a2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026a30:	2b03      	cmp	r3, #3
 8026a32:	f000 80ca 	beq.w	8026bca <SDOS_SdoInfoInd+0x1de>
 8026a36:	2b05      	cmp	r3, #5
 8026a38:	f000 80c7 	beq.w	8026bca <SDOS_SdoInfoInd+0x1de>
 8026a3c:	2b01      	cmp	r3, #1
 8026a3e:	f040 8199 	bne.w	8026d74 <SDOS_SdoInfoInd+0x388>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if (SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX)
 8026a42:	687b      	ldr	r3, [r7, #4]
 8026a44:	899b      	ldrh	r3, [r3, #12]
 8026a46:	2b05      	cmp	r3, #5
 8026a48:	f200 80be 	bhi.w	8026bc8 <SDOS_SdoInfoInd+0x1dc>
        {
            UINT16 size = 0;
 8026a4c:	2300      	movs	r3, #0
 8026a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8)SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	899b      	ldrh	r3, [r3, #12]
 8026a54:	f887 3020 	strb.w	r3, [r7, #32]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 8026a58:	48a8      	ldr	r0, [pc, #672]	; (8026cfc <SDOS_SdoInfoInd+0x310>)
 8026a5a:	6879      	ldr	r1, [r7, #4]
 8026a5c:	220e      	movs	r2, #14
 8026a5e:	f004 f8db 	bl	802ac18 <memcpy>
            if (listType-- == 0)
 8026a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026a66:	1e5a      	subs	r2, r3, #1
 8026a68:	f887 2020 	strb.w	r2, [r7, #32]
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	d122      	bne.n	8026ab6 <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 8026a70:	4ba3      	ldr	r3, [pc, #652]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026a72:	2200      	movs	r2, #0
 8026a74:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8026a76:	2300      	movs	r3, #0
 8026a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8026a7c:	e014      	b.n	8026aa8 <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 8026a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026a82:	4618      	mov	r0, r3
 8026a84:	f7fd ffcc 	bl	8024a20 <OBJ_GetNoOfObjects>
 8026a88:	4603      	mov	r3, r0
 8026a8a:	83fb      	strh	r3, [r7, #30]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	1d9a      	adds	r2, r3, #6
 8026a90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026a94:	3304      	adds	r3, #4
 8026a96:	005b      	lsls	r3, r3, #1
 8026a98:	4413      	add	r3, r2
 8026a9a:	8bfa      	ldrh	r2, [r7, #30]
 8026a9c:	801a      	strh	r2, [r3, #0]
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8026a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026aa2:	3301      	adds	r3, #1
 8026aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8026aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026aac:	2b04      	cmp	r3, #4
 8026aae:	d9e6      	bls.n	8026a7e <SDOS_SdoInfoInd+0x92>
                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8026ab0:	2312      	movs	r3, #18
 8026ab2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8026ab4:	e05a      	b.n	8026b6c <SDOS_SdoInfoInd+0x180>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 8026ab6:	2300      	movs	r3, #0
 8026ab8:	83bb      	strh	r3, [r7, #28]

                if (nSdoInfoFragmentsLeft)
 8026aba:	4b91      	ldr	r3, [pc, #580]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026abc:	881b      	ldrh	r3, [r3, #0]
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d011      	beq.n	8026ae6 <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 8026ac2:	4b90      	ldr	r3, [pc, #576]	; (8026d04 <SDOS_SdoInfoInd+0x318>)
 8026ac4:	881b      	ldrh	r3, [r3, #0]
 8026ac6:	3b0c      	subs	r3, #12
 8026ac8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO >> 1];
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	3306      	adds	r3, #6
 8026ace:	3306      	adds	r3, #6
 8026ad0:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 8026ad2:	4b8d      	ldr	r3, [pc, #564]	; (8026d08 <SDOS_SdoInfoInd+0x31c>)
 8026ad4:	881b      	ldrh	r3, [r3, #0]
 8026ad6:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 8026ad8:	4b89      	ldr	r3, [pc, #548]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026ada:	881b      	ldrh	r3, [r3, #0]
 8026adc:	3b01      	subs	r3, #1
 8026ade:	b29a      	uxth	r2, r3
 8026ae0:	4b87      	ldr	r3, [pc, #540]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026ae2:	801a      	strh	r2, [r3, #0]
 8026ae4:	e02a      	b.n	8026b3c <SDOS_SdoInfoInd+0x150>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 8026ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026aea:	4618      	mov	r0, r3
 8026aec:	f7fd ff98 	bl	8024a20 <OBJ_GetNoOfObjects>
 8026af0:	4603      	mov	r3, r0
 8026af2:	83bb      	strh	r3, [r7, #28]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 8026af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8026af8:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 8026afa:	4b82      	ldr	r3, [pc, #520]	; (8026d04 <SDOS_SdoInfoInd+0x318>)
 8026afc:	881b      	ldrh	r3, [r3, #0]
 8026afe:	3b0e      	subs	r3, #14
 8026b00:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT >> 1];
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	3306      	adds	r3, #6
 8026b06:	3308      	adds	r3, #8
 8026b08:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if ((n << 1) > size)
 8026b0a:	8bbb      	ldrh	r3, [r7, #28]
 8026b0c:	005a      	lsls	r2, r3, #1
 8026b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026b10:	429a      	cmp	r2, r3
 8026b12:	dd10      	ble.n	8026b36 <SDOS_SdoInfoInd+0x14a>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments
                        */
                        UINT16 Fragsize = size + 2;
 8026b14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026b16:	3302      	adds	r3, #2
 8026b18:	837b      	strh	r3, [r7, #26]
                        
                        nSdoInfoFragmentsLeft = (((n << 1) - size + (Fragsize - 1)) / Fragsize);
 8026b1a:	8bbb      	ldrh	r3, [r7, #28]
 8026b1c:	005a      	lsls	r2, r3, #1
 8026b1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026b20:	1ad2      	subs	r2, r2, r3
 8026b22:	8b7b      	ldrh	r3, [r7, #26]
 8026b24:	3b01      	subs	r3, #1
 8026b26:	441a      	add	r2, r3
 8026b28:	8b7b      	ldrh	r3, [r7, #26]
 8026b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b2e:	b29a      	uxth	r2, r3
 8026b30:	4b73      	ldr	r3, [pc, #460]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026b32:	801a      	strh	r2, [r3, #0]
 8026b34:	e002      	b.n	8026b3c <SDOS_SdoInfoInd+0x150>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 8026b36:	4b72      	ldr	r3, [pc, #456]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026b38:	2200      	movs	r2, #0
 8026b3a:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData, &abort);
 8026b3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026b40:	b298      	uxth	r0, r3
 8026b42:	f107 010c 	add.w	r1, r7, #12
 8026b46:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8026b48:	f107 030f 	add.w	r3, r7, #15
 8026b4c:	9300      	str	r3, [sp, #0]
 8026b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b50:	f7fd ffb2 	bl	8024ab8 <OBJ_GetObjectList>
 8026b54:	4603      	mov	r3, r0
 8026b56:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 8026b58:	89ba      	ldrh	r2, [r7, #12]
 8026b5a:	4b6b      	ldr	r3, [pc, #428]	; (8026d08 <SDOS_SdoInfoInd+0x31c>)
 8026b5c:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8026b5e:	4b69      	ldr	r3, [pc, #420]	; (8026d04 <SDOS_SdoInfoInd+0x318>)
 8026b60:	881a      	ldrh	r2, [r3, #0]
 8026b62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8026b64:	1ad3      	subs	r3, r2, r3
 8026b66:	b29b      	uxth	r3, r3
 8026b68:	3b06      	subs	r3, #6
 8026b6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length = size;
 8026b6c:	687b      	ldr	r3, [r7, #4]
 8026b6e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8026b70:	801a      	strh	r2, [r3, #0]

            if (abort == 0)
 8026b72:	7bfb      	ldrb	r3, [r7, #15]
 8026b74:	2b00      	cmp	r3, #0
 8026b76:	d127      	bne.n	8026bc8 <SDOS_SdoInfoInd+0x1dc>
            {
                pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	891b      	ldrh	r3, [r3, #8]
 8026b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026b80:	b29a      	uxth	r2, r3
 8026b82:	687b      	ldr	r3, [r7, #4]
 8026b84:	811a      	strh	r2, [r3, #8]
                pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 8026b86:	687b      	ldr	r3, [r7, #4]
 8026b88:	891b      	ldrh	r3, [r3, #8]
 8026b8a:	f043 0302 	orr.w	r3, r3, #2
 8026b8e:	b29a      	uxth	r2, r3
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft = SWAPWORD(nSdoInfoFragmentsLeft);
 8026b94:	4b5a      	ldr	r3, [pc, #360]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026b96:	881a      	ldrh	r2, [r3, #0]
 8026b98:	687b      	ldr	r3, [r7, #4]
 8026b9a:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 8026b9c:	4b58      	ldr	r3, [pc, #352]	; (8026d00 <SDOS_SdoInfoInd+0x314>)
 8026b9e:	881b      	ldrh	r3, [r3, #0]
 8026ba0:	2b00      	cmp	r3, #0
 8026ba2:	d011      	beq.n	8026bc8 <SDOS_SdoInfoInd+0x1dc>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEADER_INCOMPLETE_MASK;
 8026ba4:	687b      	ldr	r3, [r7, #4]
 8026ba6:	891b      	ldrh	r3, [r3, #8]
 8026ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026bac:	b29a      	uxth	r2, r3
 8026bae:	687b      	ldr	r3, [r7, #4]
 8026bb0:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	891b      	ldrh	r3, [r3, #8]
 8026bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026bba:	b29a      	uxth	r2, r3
 8026bbc:	687b      	ldr	r3, [r7, #4]
 8026bbe:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 8026bc0:	2382      	movs	r3, #130	; 0x82
 8026bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 8026bc6:	e0d7      	b.n	8026d78 <SDOS_SdoInfoInd+0x38c>
 8026bc8:	e0d6      	b.n	8026d78 <SDOS_SdoInfoInd+0x38c>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	899b      	ldrh	r3, [r3, #12]
 8026bce:	81bb      	strh	r3, [r7, #12]



        if(index < 0x1000)
 8026bd0:	89bb      	ldrh	r3, [r7, #12]
 8026bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026bd6:	d202      	bcs.n	8026bde <SDOS_SdoInfoInd+0x1f2>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8026bd8:	2305      	movs	r3, #5
 8026bda:	73fb      	strb	r3, [r7, #15]
 8026bdc:	e0c9      	b.n	8026d72 <SDOS_SdoInfoInd+0x386>
        }
        else
        {
            /* get the object handle of the requested index */
            pObjEntry = OBJ_GetObjectHandle( index );
 8026bde:	89bb      	ldrh	r3, [r7, #12]
 8026be0:	4618      	mov	r0, r3
 8026be2:	f7fd fe2b 	bl	802483c <OBJ_GetObjectHandle>
 8026be6:	6178      	str	r0, [r7, #20]

            if ( pObjEntry )
 8026be8:	697b      	ldr	r3, [r7, #20]
 8026bea:	2b00      	cmp	r3, #0
 8026bec:	f000 80be 	beq.w	8026d6c <SDOS_SdoInfoInd+0x380>
            {
                /* object exists */
                UINT16 size = 0;
 8026bf0:	2300      	movs	r3, #0
 8026bf2:	847b      	strh	r3, [r7, #34]	; 0x22
                
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 8026bf4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026bf8:	2b03      	cmp	r3, #3
 8026bfa:	d12b      	bne.n	8026c54 <SDOS_SdoInfoInd+0x268>
                {
                    /* object description is requested */
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 8026bfc:	687b      	ldr	r3, [r7, #4]
 8026bfe:	f103 040e 	add.w	r4, r3, #14
 8026c02:	6978      	ldr	r0, [r7, #20]
 8026c04:	f7fe f890 	bl	8024d28 <OBJ_GetObjDesc>
 8026c08:	4603      	mov	r3, r0
 8026c0a:	4620      	mov	r0, r4
 8026c0c:	4619      	mov	r1, r3
 8026c0e:	2204      	movs	r2, #4
 8026c10:	f004 f802 	bl	802ac18 <memcpy>


                    /* the mailbox should be big enough that the maximum object description
                    fits in the mailbox (the fragmentation is not done in the sample code),
                    so it will be checked only if the object description fits */
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 8026c14:	89bb      	ldrh	r3, [r7, #12]
 8026c16:	4618      	mov	r0, r3
 8026c18:	2100      	movs	r1, #0
 8026c1a:	697a      	ldr	r2, [r7, #20]
 8026c1c:	2300      	movs	r3, #0
 8026c1e:	f7fd ffc7 	bl	8024bb0 <OBJ_GetDesc>
 8026c22:	4603      	mov	r3, r0
 8026c24:	330c      	adds	r3, #12
 8026c26:	847b      	strh	r3, [r7, #34]	; 0x22

                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 8026c28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8026c2a:	4b36      	ldr	r3, [pc, #216]	; (8026d04 <SDOS_SdoInfoInd+0x318>)
 8026c2c:	881b      	ldrh	r3, [r3, #0]
 8026c2e:	3b06      	subs	r3, #6
 8026c30:	429a      	cmp	r2, r3
 8026c32:	dd02      	ble.n	8026c3a <SDOS_SdoInfoInd+0x24e>
                    {
                        /* size of the object description does not fit in the mailbox,
                        the object description will be sent without the name */
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 8026c34:	230c      	movs	r3, #12
 8026c36:	847b      	strh	r3, [r7, #34]	; 0x22
 8026c38:	e07b      	b.n	8026d32 <SDOS_SdoInfoInd+0x346>
                    }
                    else
                    {
                        /* object description fits in the mailbox, get the name of the object */
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 8026c3a:	89ba      	ldrh	r2, [r7, #12]
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	330e      	adds	r3, #14
 8026c40:	3304      	adds	r3, #4
 8026c42:	4610      	mov	r0, r2
 8026c44:	2100      	movs	r1, #0
 8026c46:	697a      	ldr	r2, [r7, #20]
 8026c48:	f7fd ffb2 	bl	8024bb0 <OBJ_GetDesc>
 8026c4c:	4603      	mov	r3, r0
 8026c4e:	330c      	adds	r3, #12
 8026c50:	847b      	strh	r3, [r7, #34]	; 0x22
 8026c52:	e06e      	b.n	8026d32 <SDOS_SdoInfoInd+0x346>
                }
                else
                {
                    /* entry description is requested,
                    get the requested subindex */
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 8026c54:	687b      	ldr	r3, [r7, #4]
 8026c56:	89db      	ldrh	r3, [r3, #14]
 8026c58:	74fb      	strb	r3, [r7, #19]

                    /* get the maximum subindex */
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8026c5a:	6978      	ldr	r0, [r7, #20]
 8026c5c:	f7fe f864 	bl	8024d28 <OBJ_GetObjDesc>
 8026c60:	4603      	mov	r3, r0
 8026c62:	885b      	ldrh	r3, [r3, #2]
 8026c64:	74bb      	strb	r3, [r7, #18]

                    if ( subindex <= maxSubindex )
 8026c66:	7cfa      	ldrb	r2, [r7, #19]
 8026c68:	7cbb      	ldrb	r3, [r7, #18]
 8026c6a:	429a      	cmp	r2, r3
 8026c6c:	d85f      	bhi.n	8026d2e <SDOS_SdoInfoInd+0x342>
                    {
                        UINT16 ObjectFlags;
                        /* requested subindex is not too great */
                        /* get the entry description of the requested entry */
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8026c6e:	687b      	ldr	r3, [r7, #4]
 8026c70:	f103 0410 	add.w	r4, r3, #16
 8026c74:	7cfb      	ldrb	r3, [r7, #19]
 8026c76:	6978      	ldr	r0, [r7, #20]
 8026c78:	4619      	mov	r1, r3
 8026c7a:	f7fe f829 	bl	8024cd0 <OBJ_GetEntryDesc>
 8026c7e:	4603      	mov	r3, r0
 8026c80:	4620      	mov	r0, r4
 8026c82:	4619      	mov	r1, r3
 8026c84:	2206      	movs	r2, #6
 8026c86:	f003 ffc7 	bl	802ac18 <memcpy>

                        /* the transmission of the value info is not supported yet of the sample code */
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 8026c8a:	687b      	ldr	r3, [r7, #4]
 8026c8c:	89db      	ldrh	r3, [r3, #14]
 8026c8e:	b2db      	uxtb	r3, r3
 8026c90:	b29a      	uxth	r2, r3
 8026c92:	687b      	ldr	r3, [r7, #4]
 8026c94:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 8026c96:	6978      	ldr	r0, [r7, #20]
 8026c98:	f7fe f846 	bl	8024d28 <OBJ_GetObjDesc>
 8026c9c:	4603      	mov	r3, r0
 8026c9e:	885b      	ldrh	r3, [r3, #2]
 8026ca0:	823b      	strh	r3, [r7, #16]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8026ca2:	8a3b      	ldrh	r3, [r7, #16]
 8026ca4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8026ca8:	121b      	asrs	r3, r3, #8
 8026caa:	823b      	strh	r3, [r7, #16]

                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 8026cac:	8a3b      	ldrh	r3, [r7, #16]
 8026cae:	2b08      	cmp	r3, #8
 8026cb0:	d002      	beq.n	8026cb8 <SDOS_SdoInfoInd+0x2cc>
 8026cb2:	8a3b      	ldrh	r3, [r7, #16]
 8026cb4:	2b09      	cmp	r3, #9
 8026cb6:	d10d      	bne.n	8026cd4 <SDOS_SdoInfoInd+0x2e8>
 8026cb8:	7cfb      	ldrb	r3, [r7, #19]
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	d10a      	bne.n	8026cd4 <SDOS_SdoInfoInd+0x2e8>
                        {
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	3310      	adds	r3, #16
 8026cc2:	3306      	adds	r3, #6
 8026cc4:	4618      	mov	r0, r3
 8026cc6:	4911      	ldr	r1, [pc, #68]	; (8026d0c <SDOS_SdoInfoInd+0x320>)
 8026cc8:	220d      	movs	r2, #13
 8026cca:	f003 ffa5 	bl	802ac18 <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 8026cce:	231c      	movs	r3, #28
 8026cd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8026cd2:	e02b      	b.n	8026d2c <SDOS_SdoInfoInd+0x340>
                        else
                        {
                            /* the mailbox should be big enough that the maximum entry description
                            fits in the mailbox (the fragmentation is not done in the sample code),
                            so it will be checked only if the entry description fits */
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8026cd4:	89ba      	ldrh	r2, [r7, #12]
 8026cd6:	7cfb      	ldrb	r3, [r7, #19]
 8026cd8:	4610      	mov	r0, r2
 8026cda:	4619      	mov	r1, r3
 8026cdc:	697a      	ldr	r2, [r7, #20]
 8026cde:	2300      	movs	r3, #0
 8026ce0:	f7fd ff66 	bl	8024bb0 <OBJ_GetDesc>
 8026ce4:	4603      	mov	r3, r0
 8026ce6:	3310      	adds	r3, #16
 8026ce8:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 8026cea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8026cec:	4b05      	ldr	r3, [pc, #20]	; (8026d04 <SDOS_SdoInfoInd+0x318>)
 8026cee:	881b      	ldrh	r3, [r3, #0]
 8026cf0:	3b06      	subs	r3, #6
 8026cf2:	429a      	cmp	r2, r3
 8026cf4:	dd0c      	ble.n	8026d10 <SDOS_SdoInfoInd+0x324>
                            {
                                /* size of the object description does not fit in the mailbox,
                                the object description will be sent without the name */
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8026cf6:	2310      	movs	r3, #16
 8026cf8:	847b      	strh	r3, [r7, #34]	; 0x22
 8026cfa:	e017      	b.n	8026d2c <SDOS_SdoInfoInd+0x340>
 8026cfc:	1ffea9f4 	.word	0x1ffea9f4
 8026d00:	1ffea9e0 	.word	0x1ffea9e0
 8026d04:	1ffea914 	.word	0x1ffea914
 8026d08:	1ffea9c0 	.word	0x1ffea9c0
 8026d0c:	1ffe93f0 	.word	0x1ffe93f0
                            }
                            else
                            {
                                /* object description fits in the mailbox, get the name of the entry */
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8026d10:	89b9      	ldrh	r1, [r7, #12]
 8026d12:	687b      	ldr	r3, [r7, #4]
 8026d14:	3310      	adds	r3, #16
 8026d16:	3306      	adds	r3, #6
 8026d18:	7cfa      	ldrb	r2, [r7, #19]
 8026d1a:	4608      	mov	r0, r1
 8026d1c:	4611      	mov	r1, r2
 8026d1e:	697a      	ldr	r2, [r7, #20]
 8026d20:	f7fd ff46 	bl	8024bb0 <OBJ_GetDesc>
 8026d24:	4603      	mov	r3, r0
 8026d26:	3310      	adds	r3, #16
 8026d28:	847b      	strh	r3, [r7, #34]	; 0x22
 8026d2a:	e002      	b.n	8026d32 <SDOS_SdoInfoInd+0x346>
 8026d2c:	e001      	b.n	8026d32 <SDOS_SdoInfoInd+0x346>
                            }
                        }
                    }
                    else
                    {
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8026d2e:	2311      	movs	r3, #17
 8026d30:	73fb      	strb	r3, [r7, #15]
                    }
                }

                if ( abort == 0 )
 8026d32:	7bfb      	ldrb	r3, [r7, #15]
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	d118      	bne.n	8026d6a <SDOS_SdoInfoInd+0x37e>
                {
                    {
                        /* for the object and entry description the sample code does not support the fragmentation,
                        the mailbox has to be big enough */
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8026d38:	687b      	ldr	r3, [r7, #4]
 8026d3a:	2200      	movs	r2, #0
 8026d3c:	815a      	strh	r2, [r3, #10]
                        /* store the size of the mailbox data in the mailbox buffer */
                        pSdoInfoInd->MbxHeader.Length = size;
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8026d42:	801a      	strh	r2, [r3, #0]
                        /* set the opCode of the SDO Information response */
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026d44:	687b      	ldr	r3, [r7, #4]
 8026d46:	891b      	ldrh	r3, [r3, #8]
 8026d48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026d4c:	b29a      	uxth	r2, r3
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 8026d52:	687b      	ldr	r3, [r7, #4]
 8026d54:	891a      	ldrh	r2, [r3, #8]
 8026d56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026d5a:	b29b      	uxth	r3, r3
 8026d5c:	3301      	adds	r3, #1
 8026d5e:	b29b      	uxth	r3, r3
 8026d60:	4313      	orrs	r3, r2
 8026d62:	b29a      	uxth	r2, r3
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	811a      	strh	r2, [r3, #8]
 8026d68:	e003      	b.n	8026d72 <SDOS_SdoInfoInd+0x386>
 8026d6a:	e002      	b.n	8026d72 <SDOS_SdoInfoInd+0x386>
                    }
                }
            }
            else
            {
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8026d6c:	2308      	movs	r3, #8
 8026d6e:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 8026d70:	e002      	b.n	8026d78 <SDOS_SdoInfoInd+0x38c>
 8026d72:	e001      	b.n	8026d78 <SDOS_SdoInfoInd+0x38c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8026d74:	2303      	movs	r3, #3
 8026d76:	73fb      	strb	r3, [r7, #15]
    }

    if ( abort )
 8026d78:	7bfb      	ldrb	r3, [r7, #15]
 8026d7a:	2b00      	cmp	r3, #0
 8026d7c:	d01d      	beq.n	8026dba <SDOS_SdoInfoInd+0x3ce>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8026d7e:	687b      	ldr	r3, [r7, #4]
 8026d80:	220a      	movs	r2, #10
 8026d82:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	891b      	ldrh	r3, [r3, #8]
 8026d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026d8c:	b29a      	uxth	r2, r3
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	891b      	ldrh	r3, [r3, #8]
 8026d96:	f043 0307 	orr.w	r3, r3, #7
 8026d9a:	b29a      	uxth	r2, r3
 8026d9c:	687b      	ldr	r3, [r7, #4]
 8026d9e:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8026da0:	687b      	ldr	r3, [r7, #4]
 8026da2:	2200      	movs	r2, #0
 8026da4:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 8026da6:	7bfb      	ldrb	r3, [r7, #15]
 8026da8:	461a      	mov	r2, r3
 8026daa:	4b0c      	ldr	r3, [pc, #48]	; (8026ddc <SDOS_SdoInfoInd+0x3f0>)
 8026dac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 8026db4:	4b0a      	ldr	r3, [pc, #40]	; (8026de0 <SDOS_SdoInfoInd+0x3f4>)
 8026db6:	2200      	movs	r2, #0
 8026db8:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 8026dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026dbe:	6878      	ldr	r0, [r7, #4]
 8026dc0:	4619      	mov	r1, r3
 8026dc2:	f7fd fb87 	bl	80244d4 <MBX_MailboxSendReq>
 8026dc6:	4603      	mov	r3, r0
 8026dc8:	2b00      	cmp	r3, #0
 8026dca:	d002      	beq.n	8026dd2 <SDOS_SdoInfoInd+0x3e6>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 8026dcc:	4a05      	ldr	r2, [pc, #20]	; (8026de4 <SDOS_SdoInfoInd+0x3f8>)
 8026dce:	687b      	ldr	r3, [r7, #4]
 8026dd0:	6013      	str	r3, [r2, #0]
    }

    return 0;
 8026dd2:	2300      	movs	r3, #0
}
 8026dd4:	4618      	mov	r0, r3
 8026dd6:	3734      	adds	r7, #52	; 0x34
 8026dd8:	46bd      	mov	sp, r7
 8026dda:	bd90      	pop	{r4, r7, pc}
 8026ddc:	0802b6a4 	.word	0x0802b6a4
 8026de0:	1ffea9e0 	.word	0x1ffea9e0
 8026de4:	1ffea830 	.word	0x1ffea830

08026de8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8026de8:	b580      	push	{r7, lr}
 8026dea:	b082      	sub	sp, #8
 8026dec:	af00      	add	r7, sp, #0
 8026dee:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8026df0:	687b      	ldr	r3, [r7, #4]
 8026df2:	4a07      	ldr	r2, [pc, #28]	; (8026e10 <XMC_ERU_Enable+0x28>)
 8026df4:	4293      	cmp	r3, r2
 8026df6:	d107      	bne.n	8026e08 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 8026df8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8026dfc:	f000 fc28 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8026e00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8026e04:	f000 fa9c 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8026e08:	3708      	adds	r7, #8
 8026e0a:	46bd      	mov	sp, r7
 8026e0c:	bd80      	pop	{r7, pc}
 8026e0e:	bf00      	nop
 8026e10:	40044000 	.word	0x40044000

08026e14 <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 8026e14:	b480      	push	{r7}
 8026e16:	b083      	sub	sp, #12
 8026e18:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026e1a:	4b05      	ldr	r3, [pc, #20]	; (8026e30 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8026e1c:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 8026e1e:	687b      	ldr	r3, [r7, #4]
 8026e20:	2250      	movs	r2, #80	; 0x50
 8026e22:	601a      	str	r2, [r3, #0]
}
 8026e24:	370c      	adds	r7, #12
 8026e26:	46bd      	mov	sp, r7
 8026e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e2c:	4770      	bx	lr
 8026e2e:	bf00      	nop
 8026e30:	0c005554 	.word	0x0c005554

08026e34 <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 8026e34:	b480      	push	{r7}
 8026e36:	b085      	sub	sp, #20
 8026e38:	af00      	add	r7, sp, #0
 8026e3a:	6078      	str	r0, [r7, #4]
 8026e3c:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8026e3e:	4b07      	ldr	r3, [pc, #28]	; (8026e5c <XMC_FLASH_lLoadPageCommand+0x28>)
 8026e40:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 8026e42:	68fb      	ldr	r3, [r7, #12]
 8026e44:	687a      	ldr	r2, [r7, #4]
 8026e46:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8026e48:	4b05      	ldr	r3, [pc, #20]	; (8026e60 <XMC_FLASH_lLoadPageCommand+0x2c>)
 8026e4a:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8026e4c:	68fb      	ldr	r3, [r7, #12]
 8026e4e:	683a      	ldr	r2, [r7, #0]
 8026e50:	601a      	str	r2, [r3, #0]
}
 8026e52:	3714      	adds	r7, #20
 8026e54:	46bd      	mov	sp, r7
 8026e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e5a:	4770      	bx	lr
 8026e5c:	0c0055f0 	.word	0x0c0055f0
 8026e60:	0c0055f4 	.word	0x0c0055f4

08026e64 <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 8026e64:	b480      	push	{r7}
 8026e66:	b085      	sub	sp, #20
 8026e68:	af00      	add	r7, sp, #0
 8026e6a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026e6c:	4b0c      	ldr	r3, [pc, #48]	; (8026ea0 <XMC_FLASH_lWritePageCommand+0x3c>)
 8026e6e:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026e70:	68fb      	ldr	r3, [r7, #12]
 8026e72:	22aa      	movs	r2, #170	; 0xaa
 8026e74:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8026e76:	4b0b      	ldr	r3, [pc, #44]	; (8026ea4 <XMC_FLASH_lWritePageCommand+0x40>)
 8026e78:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026e7a:	68fb      	ldr	r3, [r7, #12]
 8026e7c:	2255      	movs	r2, #85	; 0x55
 8026e7e:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026e80:	4b07      	ldr	r3, [pc, #28]	; (8026ea0 <XMC_FLASH_lWritePageCommand+0x3c>)
 8026e82:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 8026e84:	68fb      	ldr	r3, [r7, #12]
 8026e86:	22a0      	movs	r2, #160	; 0xa0
 8026e88:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026e8e:	68fb      	ldr	r3, [r7, #12]
 8026e90:	22aa      	movs	r2, #170	; 0xaa
 8026e92:	601a      	str	r2, [r3, #0]
}
 8026e94:	3714      	adds	r7, #20
 8026e96:	46bd      	mov	sp, r7
 8026e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e9c:	4770      	bx	lr
 8026e9e:	bf00      	nop
 8026ea0:	0c005554 	.word	0x0c005554
 8026ea4:	0c00aaa8 	.word	0x0c00aaa8

08026ea8 <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 8026ea8:	b480      	push	{r7}
 8026eaa:	b085      	sub	sp, #20
 8026eac:	af00      	add	r7, sp, #0
 8026eae:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026eb0:	4b11      	ldr	r3, [pc, #68]	; (8026ef8 <XMC_FLASH_lEraseSectorCommand+0x50>)
 8026eb2:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026eb4:	68fb      	ldr	r3, [r7, #12]
 8026eb6:	22aa      	movs	r2, #170	; 0xaa
 8026eb8:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8026eba:	4b10      	ldr	r3, [pc, #64]	; (8026efc <XMC_FLASH_lEraseSectorCommand+0x54>)
 8026ebc:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026ebe:	68fb      	ldr	r3, [r7, #12]
 8026ec0:	2255      	movs	r2, #85	; 0x55
 8026ec2:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026ec4:	4b0c      	ldr	r3, [pc, #48]	; (8026ef8 <XMC_FLASH_lEraseSectorCommand+0x50>)
 8026ec6:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 8026ec8:	68fb      	ldr	r3, [r7, #12]
 8026eca:	2280      	movs	r2, #128	; 0x80
 8026ecc:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026ece:	4b0a      	ldr	r3, [pc, #40]	; (8026ef8 <XMC_FLASH_lEraseSectorCommand+0x50>)
 8026ed0:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026ed2:	68fb      	ldr	r3, [r7, #12]
 8026ed4:	22aa      	movs	r2, #170	; 0xaa
 8026ed6:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8026ed8:	4b08      	ldr	r3, [pc, #32]	; (8026efc <XMC_FLASH_lEraseSectorCommand+0x54>)
 8026eda:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026edc:	68fb      	ldr	r3, [r7, #12]
 8026ede:	2255      	movs	r2, #85	; 0x55
 8026ee0:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 8026ee2:	687b      	ldr	r3, [r7, #4]
 8026ee4:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 8026ee6:	68fb      	ldr	r3, [r7, #12]
 8026ee8:	2230      	movs	r2, #48	; 0x30
 8026eea:	601a      	str	r2, [r3, #0]
}
 8026eec:	3714      	adds	r7, #20
 8026eee:	46bd      	mov	sp, r7
 8026ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ef4:	4770      	bx	lr
 8026ef6:	bf00      	nop
 8026ef8:	0c005554 	.word	0x0c005554
 8026efc:	0c00aaa8 	.word	0x0c00aaa8

08026f00 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 8026f00:	b480      	push	{r7}
 8026f02:	b083      	sub	sp, #12
 8026f04:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026f06:	4b05      	ldr	r3, [pc, #20]	; (8026f1c <XMC_FLASH_lClearStatusCommand+0x1c>)
 8026f08:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 8026f0a:	687b      	ldr	r3, [r7, #4]
 8026f0c:	22f5      	movs	r2, #245	; 0xf5
 8026f0e:	601a      	str	r2, [r3, #0]
}
 8026f10:	370c      	adds	r7, #12
 8026f12:	46bd      	mov	sp, r7
 8026f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f18:	4770      	bx	lr
 8026f1a:	bf00      	nop
 8026f1c:	0c005554 	.word	0x0c005554

08026f20 <XMC_FLASH_ClearStatus>:

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 8026f20:	b580      	push	{r7, lr}
 8026f22:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 8026f24:	f7ff ffec 	bl	8026f00 <XMC_FLASH_lClearStatusCommand>
}
 8026f28:	bd80      	pop	{r7, pc}
 8026f2a:	bf00      	nop

08026f2c <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8026f2c:	b480      	push	{r7}
 8026f2e:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 8026f30:	4b04      	ldr	r3, [pc, #16]	; (8026f44 <XMC_FLASH_GetStatus+0x18>)
 8026f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8026f36:	3310      	adds	r3, #16
 8026f38:	681b      	ldr	r3, [r3, #0]
}
 8026f3a:	4618      	mov	r0, r3
 8026f3c:	46bd      	mov	sp, r7
 8026f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f42:	4770      	bx	lr
 8026f44:	58001000 	.word	0x58001000

08026f48 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8026f48:	b580      	push	{r7, lr}
 8026f4a:	b084      	sub	sp, #16
 8026f4c:	af00      	add	r7, sp, #0
 8026f4e:	6078      	str	r0, [r7, #4]
 8026f50:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 8026f52:	f7ff ffd5 	bl	8026f00 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 8026f56:	f7ff ff5d 	bl	8026e14 <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8026f5a:	2300      	movs	r3, #0
 8026f5c:	60fb      	str	r3, [r7, #12]
 8026f5e:	e011      	b.n	8026f84 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 8026f60:	68fb      	ldr	r3, [r7, #12]
 8026f62:	009b      	lsls	r3, r3, #2
 8026f64:	683a      	ldr	r2, [r7, #0]
 8026f66:	4413      	add	r3, r2
 8026f68:	6819      	ldr	r1, [r3, #0]
 8026f6a:	68fb      	ldr	r3, [r7, #12]
 8026f6c:	3301      	adds	r3, #1
 8026f6e:	009b      	lsls	r3, r3, #2
 8026f70:	683a      	ldr	r2, [r7, #0]
 8026f72:	4413      	add	r3, r2
 8026f74:	681b      	ldr	r3, [r3, #0]
 8026f76:	4608      	mov	r0, r1
 8026f78:	4619      	mov	r1, r3
 8026f7a:	f7ff ff5b 	bl	8026e34 <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8026f7e:	68fb      	ldr	r3, [r7, #12]
 8026f80:	3302      	adds	r3, #2
 8026f82:	60fb      	str	r3, [r7, #12]
 8026f84:	68fb      	ldr	r3, [r7, #12]
 8026f86:	2b3f      	cmp	r3, #63	; 0x3f
 8026f88:	d9ea      	bls.n	8026f60 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8026f8a:	6878      	ldr	r0, [r7, #4]
 8026f8c:	f7ff ff6a 	bl	8026e64 <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8026f90:	bf00      	nop
 8026f92:	4b06      	ldr	r3, [pc, #24]	; (8026fac <XMC_FLASH_ProgramPage+0x64>)
 8026f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8026f98:	3310      	adds	r3, #16
 8026f9a:	681b      	ldr	r3, [r3, #0]
 8026f9c:	f003 0301 	and.w	r3, r3, #1
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	d1f6      	bne.n	8026f92 <XMC_FLASH_ProgramPage+0x4a>
}
 8026fa4:	3710      	adds	r7, #16
 8026fa6:	46bd      	mov	sp, r7
 8026fa8:	bd80      	pop	{r7, pc}
 8026faa:	bf00      	nop
 8026fac:	58001000 	.word	0x58001000

08026fb0 <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 8026fb0:	b580      	push	{r7, lr}
 8026fb2:	b082      	sub	sp, #8
 8026fb4:	af00      	add	r7, sp, #0
 8026fb6:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8026fb8:	f7ff ffa2 	bl	8026f00 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 8026fbc:	6878      	ldr	r0, [r7, #4]
 8026fbe:	f7ff ff73 	bl	8026ea8 <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8026fc2:	bf00      	nop
 8026fc4:	4b05      	ldr	r3, [pc, #20]	; (8026fdc <XMC_FLASH_EraseSector+0x2c>)
 8026fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8026fca:	3310      	adds	r3, #16
 8026fcc:	681b      	ldr	r3, [r3, #0]
 8026fce:	f003 0301 	and.w	r3, r3, #1
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	d1f6      	bne.n	8026fc4 <XMC_FLASH_EraseSector+0x14>
}
 8026fd6:	3708      	adds	r7, #8
 8026fd8:	46bd      	mov	sp, r7
 8026fda:	bd80      	pop	{r7, pc}
 8026fdc:	58001000 	.word	0x58001000

08026fe0 <XMC_FLASH_lErasePhysicalSectorCommand>:

/*
 * Command to erase physical sector which is starting with the specified address
 */
void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address)
{
 8026fe0:	b480      	push	{r7}
 8026fe2:	b085      	sub	sp, #20
 8026fe4:	af00      	add	r7, sp, #0
 8026fe6:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026fe8:	4b11      	ldr	r3, [pc, #68]	; (8027030 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8026fea:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026fec:	68fb      	ldr	r3, [r7, #12]
 8026fee:	22aa      	movs	r2, #170	; 0xaa
 8026ff0:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8026ff2:	4b10      	ldr	r3, [pc, #64]	; (8027034 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 8026ff4:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026ff6:	68fb      	ldr	r3, [r7, #12]
 8026ff8:	2255      	movs	r2, #85	; 0x55
 8026ffa:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026ffc:	4b0c      	ldr	r3, [pc, #48]	; (8027030 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8026ffe:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 8027000:	68fb      	ldr	r3, [r7, #12]
 8027002:	2280      	movs	r2, #128	; 0x80
 8027004:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8027006:	4b0a      	ldr	r3, [pc, #40]	; (8027030 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 8027008:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	22aa      	movs	r2, #170	; 0xaa
 802700e:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8027010:	4b08      	ldr	r3, [pc, #32]	; (8027034 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 8027012:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8027014:	68fb      	ldr	r3, [r7, #12]
 8027016:	2255      	movs	r2, #85	; 0x55
 8027018:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 802701a:	687b      	ldr	r3, [r7, #4]
 802701c:	60fb      	str	r3, [r7, #12]
  *address = 0x40U;
 802701e:	68fb      	ldr	r3, [r7, #12]
 8027020:	2240      	movs	r2, #64	; 0x40
 8027022:	601a      	str	r2, [r3, #0]
}
 8027024:	3714      	adds	r7, #20
 8027026:	46bd      	mov	sp, r7
 8027028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802702c:	4770      	bx	lr
 802702e:	bf00      	nop
 8027030:	0c005554 	.word	0x0c005554
 8027034:	0c00aaa8 	.word	0x0c00aaa8

08027038 <XMC_FLASH_ErasePhysicalSector>:

 /* 
  * This API erase the physical sector
  */
void XMC_FLASH_ErasePhysicalSector(uint32_t *address)
{
 8027038:	b580      	push	{r7, lr}
 802703a:	b082      	sub	sp, #8
 802703c:	af00      	add	r7, sp, #0
 802703e:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8027040:	f7ff ff5e 	bl	8026f00 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lErasePhysicalSectorCommand(address);
 8027044:	6878      	ldr	r0, [r7, #4]
 8027046:	f7ff ffcb 	bl	8026fe0 <XMC_FLASH_lErasePhysicalSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 802704a:	bf00      	nop
 802704c:	4b05      	ldr	r3, [pc, #20]	; (8027064 <XMC_FLASH_ErasePhysicalSector+0x2c>)
 802704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027052:	3310      	adds	r3, #16
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	f003 0301 	and.w	r3, r3, #1
 802705a:	2b00      	cmp	r3, #0
 802705c:	d1f6      	bne.n	802704c <XMC_FLASH_ErasePhysicalSector+0x14>
}
 802705e:	3708      	adds	r7, #8
 8027060:	46bd      	mov	sp, r7
 8027062:	bd80      	pop	{r7, pc}
 8027064:	58001000 	.word	0x58001000

08027068 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8027068:	b480      	push	{r7}
 802706a:	b085      	sub	sp, #20
 802706c:	af00      	add	r7, sp, #0
 802706e:	60f8      	str	r0, [r7, #12]
 8027070:	460b      	mov	r3, r1
 8027072:	607a      	str	r2, [r7, #4]
 8027074:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8027076:	7afb      	ldrb	r3, [r7, #11]
 8027078:	089b      	lsrs	r3, r3, #2
 802707a:	b2db      	uxtb	r3, r3
 802707c:	4618      	mov	r0, r3
 802707e:	7afb      	ldrb	r3, [r7, #11]
 8027080:	089b      	lsrs	r3, r3, #2
 8027082:	b2db      	uxtb	r3, r3
 8027084:	461a      	mov	r2, r3
 8027086:	68fb      	ldr	r3, [r7, #12]
 8027088:	3204      	adds	r2, #4
 802708a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802708e:	7afb      	ldrb	r3, [r7, #11]
 8027090:	f003 0303 	and.w	r3, r3, #3
 8027094:	00db      	lsls	r3, r3, #3
 8027096:	4619      	mov	r1, r3
 8027098:	23f8      	movs	r3, #248	; 0xf8
 802709a:	408b      	lsls	r3, r1
 802709c:	43db      	mvns	r3, r3
 802709e:	ea02 0103 	and.w	r1, r2, r3
 80270a2:	68fb      	ldr	r3, [r7, #12]
 80270a4:	1d02      	adds	r2, r0, #4
 80270a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80270aa:	68fb      	ldr	r3, [r7, #12]
 80270ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80270ae:	7afb      	ldrb	r3, [r7, #11]
 80270b0:	005b      	lsls	r3, r3, #1
 80270b2:	4619      	mov	r1, r3
 80270b4:	2303      	movs	r3, #3
 80270b6:	408b      	lsls	r3, r1
 80270b8:	43db      	mvns	r3, r3
 80270ba:	401a      	ands	r2, r3
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80270c0:	68fb      	ldr	r3, [r7, #12]
 80270c2:	4a3a      	ldr	r2, [pc, #232]	; (80271ac <XMC_GPIO_Init+0x144>)
 80270c4:	4293      	cmp	r3, r2
 80270c6:	d003      	beq.n	80270d0 <XMC_GPIO_Init+0x68>
 80270c8:	68fb      	ldr	r3, [r7, #12]
 80270ca:	4a39      	ldr	r2, [pc, #228]	; (80271b0 <XMC_GPIO_Init+0x148>)
 80270cc:	4293      	cmp	r3, r2
 80270ce:	d10a      	bne.n	80270e6 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80270d0:	68fb      	ldr	r3, [r7, #12]
 80270d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80270d4:	7afb      	ldrb	r3, [r7, #11]
 80270d6:	2101      	movs	r1, #1
 80270d8:	fa01 f303 	lsl.w	r3, r1, r3
 80270dc:	43db      	mvns	r3, r3
 80270de:	401a      	ands	r2, r3
 80270e0:	68fb      	ldr	r3, [r7, #12]
 80270e2:	661a      	str	r2, [r3, #96]	; 0x60
 80270e4:	e042      	b.n	802716c <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	781b      	ldrb	r3, [r3, #0]
 80270ea:	b2db      	uxtb	r3, r3
 80270ec:	b25b      	sxtb	r3, r3
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	da3c      	bge.n	802716c <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80270f2:	687b      	ldr	r3, [r7, #4]
 80270f4:	685a      	ldr	r2, [r3, #4]
 80270f6:	7afb      	ldrb	r3, [r7, #11]
 80270f8:	409a      	lsls	r2, r3
 80270fa:	68fb      	ldr	r3, [r7, #12]
 80270fc:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80270fe:	7afb      	ldrb	r3, [r7, #11]
 8027100:	08db      	lsrs	r3, r3, #3
 8027102:	b2db      	uxtb	r3, r3
 8027104:	4618      	mov	r0, r3
 8027106:	7afb      	ldrb	r3, [r7, #11]
 8027108:	08db      	lsrs	r3, r3, #3
 802710a:	b2db      	uxtb	r3, r3
 802710c:	461a      	mov	r2, r3
 802710e:	68fb      	ldr	r3, [r7, #12]
 8027110:	3210      	adds	r2, #16
 8027112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027116:	7afb      	ldrb	r3, [r7, #11]
 8027118:	f003 0307 	and.w	r3, r3, #7
 802711c:	009b      	lsls	r3, r3, #2
 802711e:	4619      	mov	r1, r3
 8027120:	2307      	movs	r3, #7
 8027122:	408b      	lsls	r3, r1
 8027124:	43db      	mvns	r3, r3
 8027126:	ea02 0103 	and.w	r1, r2, r3
 802712a:	68fb      	ldr	r3, [r7, #12]
 802712c:	f100 0210 	add.w	r2, r0, #16
 8027130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8027134:	7afb      	ldrb	r3, [r7, #11]
 8027136:	08db      	lsrs	r3, r3, #3
 8027138:	b2db      	uxtb	r3, r3
 802713a:	4618      	mov	r0, r3
 802713c:	7afb      	ldrb	r3, [r7, #11]
 802713e:	08db      	lsrs	r3, r3, #3
 8027140:	b2db      	uxtb	r3, r3
 8027142:	461a      	mov	r2, r3
 8027144:	68fb      	ldr	r3, [r7, #12]
 8027146:	3210      	adds	r2, #16
 8027148:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	7a1b      	ldrb	r3, [r3, #8]
 8027150:	4619      	mov	r1, r3
 8027152:	7afb      	ldrb	r3, [r7, #11]
 8027154:	f003 0307 	and.w	r3, r3, #7
 8027158:	009b      	lsls	r3, r3, #2
 802715a:	fa01 f303 	lsl.w	r3, r1, r3
 802715e:	ea42 0103 	orr.w	r1, r2, r3
 8027162:	68fb      	ldr	r3, [r7, #12]
 8027164:	f100 0210 	add.w	r2, r0, #16
 8027168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 802716c:	7afb      	ldrb	r3, [r7, #11]
 802716e:	089b      	lsrs	r3, r3, #2
 8027170:	b2db      	uxtb	r3, r3
 8027172:	4618      	mov	r0, r3
 8027174:	7afb      	ldrb	r3, [r7, #11]
 8027176:	089b      	lsrs	r3, r3, #2
 8027178:	b2db      	uxtb	r3, r3
 802717a:	461a      	mov	r2, r3
 802717c:	68fb      	ldr	r3, [r7, #12]
 802717e:	3204      	adds	r2, #4
 8027180:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	781b      	ldrb	r3, [r3, #0]
 8027188:	4619      	mov	r1, r3
 802718a:	7afb      	ldrb	r3, [r7, #11]
 802718c:	f003 0303 	and.w	r3, r3, #3
 8027190:	00db      	lsls	r3, r3, #3
 8027192:	fa01 f303 	lsl.w	r3, r1, r3
 8027196:	ea42 0103 	orr.w	r1, r2, r3
 802719a:	68fb      	ldr	r3, [r7, #12]
 802719c:	1d02      	adds	r2, r0, #4
 802719e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80271a2:	3714      	adds	r7, #20
 80271a4:	46bd      	mov	sp, r7
 80271a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271aa:	4770      	bx	lr
 80271ac:	48028e00 	.word	0x48028e00
 80271b0:	48028f00 	.word	0x48028f00

080271b4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80271b4:	b480      	push	{r7}
 80271b6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80271b8:	4b03      	ldr	r3, [pc, #12]	; (80271c8 <XMC_SCU_GetMirrorStatus+0x14>)
 80271ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80271be:	4618      	mov	r0, r3
 80271c0:	46bd      	mov	sp, r7
 80271c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271c6:	4770      	bx	lr
 80271c8:	50004000 	.word	0x50004000

080271cc <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80271cc:	b580      	push	{r7, lr}
 80271ce:	b084      	sub	sp, #16
 80271d0:	af00      	add	r7, sp, #0
 80271d2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80271d4:	f7f9 f872 	bl	80202bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80271d8:	4b0b      	ldr	r3, [pc, #44]	; (8027208 <XMC_SCU_lDelay+0x3c>)
 80271da:	681b      	ldr	r3, [r3, #0]
 80271dc:	4a0b      	ldr	r2, [pc, #44]	; (802720c <XMC_SCU_lDelay+0x40>)
 80271de:	fba2 2303 	umull	r2, r3, r2, r3
 80271e2:	0c9a      	lsrs	r2, r3, #18
 80271e4:	687b      	ldr	r3, [r7, #4]
 80271e6:	fb02 f303 	mul.w	r3, r2, r3
 80271ea:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80271ec:	2300      	movs	r3, #0
 80271ee:	60fb      	str	r3, [r7, #12]
 80271f0:	e003      	b.n	80271fa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80271f2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80271f4:	68fb      	ldr	r3, [r7, #12]
 80271f6:	3301      	adds	r3, #1
 80271f8:	60fb      	str	r3, [r7, #12]
 80271fa:	68fa      	ldr	r2, [r7, #12]
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	429a      	cmp	r2, r3
 8027200:	d3f7      	bcc.n	80271f2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8027202:	3710      	adds	r7, #16
 8027204:	46bd      	mov	sp, r7
 8027206:	bd80      	pop	{r7, pc}
 8027208:	2003ffc0 	.word	0x2003ffc0
 802720c:	431bde83 	.word	0x431bde83

08027210 <XMC_SCU_SetBootMode>:
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
}

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8027210:	b480      	push	{r7}
 8027212:	b083      	sub	sp, #12
 8027214:	af00      	add	r7, sp, #0
 8027216:	4603      	mov	r3, r0
 8027218:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 802721a:	4a04      	ldr	r2, [pc, #16]	; (802722c <XMC_SCU_SetBootMode+0x1c>)
 802721c:	88fb      	ldrh	r3, [r7, #6]
 802721e:	6113      	str	r3, [r2, #16]
}
 8027220:	370c      	adds	r7, #12
 8027222:	46bd      	mov	sp, r7
 8027224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027228:	4770      	bx	lr
 802722a:	bf00      	nop
 802722c:	50004000 	.word	0x50004000

08027230 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8027230:	b5b0      	push	{r4, r5, r7, lr}
 8027232:	b084      	sub	sp, #16
 8027234:	af02      	add	r7, sp, #8
 8027236:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8027238:	2000      	movs	r0, #0
 802723a:	f000 f8c1 	bl	80273c0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 802723e:	f000 fa83 	bl	8027748 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8027242:	687b      	ldr	r3, [r7, #4]
 8027244:	79db      	ldrb	r3, [r3, #7]
 8027246:	2b00      	cmp	r3, #0
 8027248:	d00a      	beq.n	8027260 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 802724a:	f000 fabb 	bl	80277c4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 802724e:	bf00      	nop
 8027250:	f000 faa6 	bl	80277a0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8027254:	4603      	mov	r3, r0
 8027256:	f083 0301 	eor.w	r3, r3, #1
 802725a:	b2db      	uxtb	r3, r3
 802725c:	2b00      	cmp	r3, #0
 802725e:	d1f7      	bne.n	8027250 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8027260:	687b      	ldr	r3, [r7, #4]
 8027262:	7a5b      	ldrb	r3, [r3, #9]
 8027264:	4618      	mov	r0, r3
 8027266:	f000 f925 	bl	80274b4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 802726a:	bf00      	nop
 802726c:	f7ff ffa2 	bl	80271b4 <XMC_SCU_GetMirrorStatus>
 8027270:	4603      	mov	r3, r0
 8027272:	2b00      	cmp	r3, #0
 8027274:	d1fa      	bne.n	802726c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	7a1b      	ldrb	r3, [r3, #8]
 802727a:	4618      	mov	r0, r3
 802727c:	f000 fa3e 	bl	80276fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	7c1b      	ldrb	r3, [r3, #16]
 8027284:	4618      	mov	r0, r3
 8027286:	f000 f933 	bl	80274f0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 802728a:	687b      	ldr	r3, [r7, #4]
 802728c:	7c5b      	ldrb	r3, [r3, #17]
 802728e:	4618      	mov	r0, r3
 8027290:	f000 f956 	bl	8027540 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	7c9b      	ldrb	r3, [r3, #18]
 8027298:	4618      	mov	r0, r3
 802729a:	f000 f93d 	bl	8027518 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	7cdb      	ldrb	r3, [r3, #19]
 80272a2:	4618      	mov	r0, r3
 80272a4:	f000 f960 	bl	8027568 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80272a8:	687b      	ldr	r3, [r7, #4]
 80272aa:	799b      	ldrb	r3, [r3, #6]
 80272ac:	2b00      	cmp	r3, #0
 80272ae:	d00a      	beq.n	80272c6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80272b0:	f000 fabc 	bl	802782c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80272b4:	bf00      	nop
 80272b6:	f000 fae1 	bl	802787c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80272ba:	4603      	mov	r3, r0
 80272bc:	f083 0301 	eor.w	r3, r3, #1
 80272c0:	b2db      	uxtb	r3, r3
 80272c2:	2b00      	cmp	r3, #0
 80272c4:	d1f7      	bne.n	80272b6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80272c6:	687b      	ldr	r3, [r7, #4]
 80272c8:	78db      	ldrb	r3, [r3, #3]
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	d102      	bne.n	80272d4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80272ce:	f000 faf9 	bl	80278c4 <XMC_SCU_CLOCK_DisableSystemPll>
 80272d2:	e014      	b.n	80272fe <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80272d4:	f000 fae6 	bl	80278a4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	8899      	ldrh	r1, [r3, #4]
 80272dc:	687b      	ldr	r3, [r7, #4]
 80272de:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80272e0:	687b      	ldr	r3, [r7, #4]
 80272e2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80272e4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80272e6:	687b      	ldr	r3, [r7, #4]
 80272e8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80272ea:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80272ec:	687b      	ldr	r3, [r7, #4]
 80272ee:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80272f0:	9300      	str	r3, [sp, #0]
 80272f2:	4608      	mov	r0, r1
 80272f4:	4611      	mov	r1, r2
 80272f6:	462a      	mov	r2, r5
 80272f8:	4623      	mov	r3, r4
 80272fa:	f000 faf3 	bl	80278e4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	68db      	ldr	r3, [r3, #12]
 8027302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027306:	d103      	bne.n	8027310 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8027308:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 802730c:	f000 f858 	bl	80273c0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8027310:	f7f8 ffd4 	bl	80202bc <SystemCoreClockUpdate>
}
 8027314:	3708      	adds	r7, #8
 8027316:	46bd      	mov	sp, r7
 8027318:	bdb0      	pop	{r4, r5, r7, pc}
 802731a:	bf00      	nop

0802731c <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 802731c:	b480      	push	{r7}
 802731e:	b083      	sub	sp, #12
 8027320:	af00      	add	r7, sp, #0
 8027322:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8027324:	4905      	ldr	r1, [pc, #20]	; (802733c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8027326:	4b05      	ldr	r3, [pc, #20]	; (802733c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8027328:	695a      	ldr	r2, [r3, #20]
 802732a:	687b      	ldr	r3, [r7, #4]
 802732c:	4313      	orrs	r3, r2
 802732e:	614b      	str	r3, [r1, #20]
}
 8027330:	370c      	adds	r7, #12
 8027332:	46bd      	mov	sp, r7
 8027334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027338:	4770      	bx	lr
 802733a:	bf00      	nop
 802733c:	50004074 	.word	0x50004074

08027340 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8027340:	b480      	push	{r7}
 8027342:	b085      	sub	sp, #20
 8027344:	af00      	add	r7, sp, #0
 8027346:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	0f1b      	lsrs	r3, r3, #28
 802734c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8027354:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8027356:	68fa      	ldr	r2, [r7, #12]
 8027358:	4613      	mov	r3, r2
 802735a:	005b      	lsls	r3, r3, #1
 802735c:	4413      	add	r3, r2
 802735e:	009b      	lsls	r3, r3, #2
 8027360:	461a      	mov	r2, r3
 8027362:	4b04      	ldr	r3, [pc, #16]	; (8027374 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8027364:	4413      	add	r3, r2
 8027366:	68ba      	ldr	r2, [r7, #8]
 8027368:	601a      	str	r2, [r3, #0]
}
 802736a:	3714      	adds	r7, #20
 802736c:	46bd      	mov	sp, r7
 802736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027372:	4770      	bx	lr
 8027374:	50004414 	.word	0x50004414

08027378 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8027378:	b480      	push	{r7}
 802737a:	b085      	sub	sp, #20
 802737c:	af00      	add	r7, sp, #0
 802737e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8027380:	687b      	ldr	r3, [r7, #4]
 8027382:	0f1b      	lsrs	r3, r3, #28
 8027384:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802738c:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 802738e:	68fa      	ldr	r2, [r7, #12]
 8027390:	4613      	mov	r3, r2
 8027392:	005b      	lsls	r3, r3, #1
 8027394:	4413      	add	r3, r2
 8027396:	009b      	lsls	r3, r3, #2
 8027398:	461a      	mov	r2, r3
 802739a:	4b08      	ldr	r3, [pc, #32]	; (80273bc <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 802739c:	4413      	add	r3, r2
 802739e:	681a      	ldr	r2, [r3, #0]
 80273a0:	68bb      	ldr	r3, [r7, #8]
 80273a2:	4013      	ands	r3, r2
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	bf14      	ite	ne
 80273a8:	2301      	movne	r3, #1
 80273aa:	2300      	moveq	r3, #0
 80273ac:	b2db      	uxtb	r3, r3
}
 80273ae:	4618      	mov	r0, r3
 80273b0:	3714      	adds	r7, #20
 80273b2:	46bd      	mov	sp, r7
 80273b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b8:	4770      	bx	lr
 80273ba:	bf00      	nop
 80273bc:	5000440c 	.word	0x5000440c

080273c0 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80273c0:	b480      	push	{r7}
 80273c2:	b083      	sub	sp, #12
 80273c4:	af00      	add	r7, sp, #0
 80273c6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80273c8:	4906      	ldr	r1, [pc, #24]	; (80273e4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80273ca:	4b06      	ldr	r3, [pc, #24]	; (80273e4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80273cc:	68db      	ldr	r3, [r3, #12]
 80273ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80273d2:	687b      	ldr	r3, [r7, #4]
 80273d4:	4313      	orrs	r3, r2
 80273d6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80273d8:	370c      	adds	r7, #12
 80273da:	46bd      	mov	sp, r7
 80273dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273e0:	4770      	bx	lr
 80273e2:	bf00      	nop
 80273e4:	50004600 	.word	0x50004600

080273e8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80273e8:	b480      	push	{r7}
 80273ea:	b083      	sub	sp, #12
 80273ec:	af00      	add	r7, sp, #0
 80273ee:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80273f0:	4906      	ldr	r1, [pc, #24]	; (802740c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80273f2:	4b06      	ldr	r3, [pc, #24]	; (802740c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80273f4:	699b      	ldr	r3, [r3, #24]
 80273f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80273fa:	687b      	ldr	r3, [r7, #4]
 80273fc:	4313      	orrs	r3, r2
 80273fe:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8027400:	370c      	adds	r7, #12
 8027402:	46bd      	mov	sp, r7
 8027404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027408:	4770      	bx	lr
 802740a:	bf00      	nop
 802740c:	50004600 	.word	0x50004600

08027410 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8027410:	b480      	push	{r7}
 8027412:	b083      	sub	sp, #12
 8027414:	af00      	add	r7, sp, #0
 8027416:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8027418:	4906      	ldr	r1, [pc, #24]	; (8027434 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 802741a:	4b06      	ldr	r3, [pc, #24]	; (8027434 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 802741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802741e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	4313      	orrs	r3, r2
 8027426:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8027428:	370c      	adds	r7, #12
 802742a:	46bd      	mov	sp, r7
 802742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027430:	4770      	bx	lr
 8027432:	bf00      	nop
 8027434:	50004600 	.word	0x50004600

08027438 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8027438:	b480      	push	{r7}
 802743a:	b083      	sub	sp, #12
 802743c:	af00      	add	r7, sp, #0
 802743e:	4603      	mov	r3, r0
 8027440:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8027442:	88fb      	ldrh	r3, [r7, #6]
 8027444:	2b00      	cmp	r3, #0
 8027446:	d108      	bne.n	802745a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8027448:	4a0a      	ldr	r2, [pc, #40]	; (8027474 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 802744a:	4b0a      	ldr	r3, [pc, #40]	; (8027474 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 802744c:	68db      	ldr	r3, [r3, #12]
 802744e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027452:	f023 0301 	bic.w	r3, r3, #1
 8027456:	60d3      	str	r3, [r2, #12]
 8027458:	e007      	b.n	802746a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 802745a:	4a06      	ldr	r2, [pc, #24]	; (8027474 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 802745c:	4b05      	ldr	r3, [pc, #20]	; (8027474 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 802745e:	68db      	ldr	r3, [r3, #12]
 8027460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027464:	f043 0301 	orr.w	r3, r3, #1
 8027468:	60d3      	str	r3, [r2, #12]
  }
}
 802746a:	370c      	adds	r7, #12
 802746c:	46bd      	mov	sp, r7
 802746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027472:	4770      	bx	lr
 8027474:	50004710 	.word	0x50004710

08027478 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8027478:	b480      	push	{r7}
 802747a:	b083      	sub	sp, #12
 802747c:	af00      	add	r7, sp, #0
 802747e:	4603      	mov	r3, r0
 8027480:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8027482:	bf00      	nop
 8027484:	4b09      	ldr	r3, [pc, #36]	; (80274ac <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8027486:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 802748a:	f003 0308 	and.w	r3, r3, #8
 802748e:	2b00      	cmp	r3, #0
 8027490:	d1f8      	bne.n	8027484 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8027492:	4907      	ldr	r1, [pc, #28]	; (80274b0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8027494:	4b06      	ldr	r3, [pc, #24]	; (80274b0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8027496:	68db      	ldr	r3, [r3, #12]
 8027498:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 802749c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 802749e:	4313      	orrs	r3, r2
 80274a0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80274a2:	370c      	adds	r7, #12
 80274a4:	46bd      	mov	sp, r7
 80274a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274aa:	4770      	bx	lr
 80274ac:	50004000 	.word	0x50004000
 80274b0:	50004300 	.word	0x50004300

080274b4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80274b4:	b480      	push	{r7}
 80274b6:	b083      	sub	sp, #12
 80274b8:	af00      	add	r7, sp, #0
 80274ba:	4603      	mov	r3, r0
 80274bc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80274be:	bf00      	nop
 80274c0:	4b09      	ldr	r3, [pc, #36]	; (80274e8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80274c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80274c6:	f003 0308 	and.w	r3, r3, #8
 80274ca:	2b00      	cmp	r3, #0
 80274cc:	d1f8      	bne.n	80274c0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80274ce:	4907      	ldr	r1, [pc, #28]	; (80274ec <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80274d0:	4b06      	ldr	r3, [pc, #24]	; (80274ec <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80274d2:	68db      	ldr	r3, [r3, #12]
 80274d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80274d8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80274da:	4313      	orrs	r3, r2
 80274dc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80274de:	370c      	adds	r7, #12
 80274e0:	46bd      	mov	sp, r7
 80274e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274e6:	4770      	bx	lr
 80274e8:	50004000 	.word	0x50004000
 80274ec:	50004300 	.word	0x50004300

080274f0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80274f0:	b480      	push	{r7}
 80274f2:	b083      	sub	sp, #12
 80274f4:	af00      	add	r7, sp, #0
 80274f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80274f8:	4906      	ldr	r1, [pc, #24]	; (8027514 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80274fa:	4b06      	ldr	r3, [pc, #24]	; (8027514 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80274fc:	68db      	ldr	r3, [r3, #12]
 80274fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8027506:	4313      	orrs	r3, r2
 8027508:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 802750a:	370c      	adds	r7, #12
 802750c:	46bd      	mov	sp, r7
 802750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027512:	4770      	bx	lr
 8027514:	50004600 	.word	0x50004600

08027518 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8027518:	b480      	push	{r7}
 802751a:	b083      	sub	sp, #12
 802751c:	af00      	add	r7, sp, #0
 802751e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8027520:	4906      	ldr	r1, [pc, #24]	; (802753c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8027522:	4b06      	ldr	r3, [pc, #24]	; (802753c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8027524:	6a1b      	ldr	r3, [r3, #32]
 8027526:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 802752a:	687b      	ldr	r3, [r7, #4]
 802752c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 802752e:	4313      	orrs	r3, r2
 8027530:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8027532:	370c      	adds	r7, #12
 8027534:	46bd      	mov	sp, r7
 8027536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802753a:	4770      	bx	lr
 802753c:	50004600 	.word	0x50004600

08027540 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8027540:	b480      	push	{r7}
 8027542:	b083      	sub	sp, #12
 8027544:	af00      	add	r7, sp, #0
 8027546:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8027548:	4906      	ldr	r1, [pc, #24]	; (8027564 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 802754a:	4b06      	ldr	r3, [pc, #24]	; (8027564 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 802754c:	691b      	ldr	r3, [r3, #16]
 802754e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8027552:	687b      	ldr	r3, [r7, #4]
 8027554:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8027556:	4313      	orrs	r3, r2
 8027558:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 802755a:	370c      	adds	r7, #12
 802755c:	46bd      	mov	sp, r7
 802755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027562:	4770      	bx	lr
 8027564:	50004600 	.word	0x50004600

08027568 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8027568:	b480      	push	{r7}
 802756a:	b083      	sub	sp, #12
 802756c:	af00      	add	r7, sp, #0
 802756e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8027570:	4906      	ldr	r1, [pc, #24]	; (802758c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8027572:	4b06      	ldr	r3, [pc, #24]	; (802758c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8027574:	695b      	ldr	r3, [r3, #20]
 8027576:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 802757e:	4313      	orrs	r3, r2
 8027580:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8027582:	370c      	adds	r7, #12
 8027584:	46bd      	mov	sp, r7
 8027586:	f85d 7b04 	ldr.w	r7, [sp], #4
 802758a:	4770      	bx	lr
 802758c:	50004600 	.word	0x50004600

08027590 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8027590:	b480      	push	{r7}
 8027592:	b083      	sub	sp, #12
 8027594:	af00      	add	r7, sp, #0
 8027596:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8027598:	4906      	ldr	r1, [pc, #24]	; (80275b4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 802759a:	4b06      	ldr	r3, [pc, #24]	; (80275b4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 802759c:	699b      	ldr	r3, [r3, #24]
 802759e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80275a2:	687b      	ldr	r3, [r7, #4]
 80275a4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80275a6:	4313      	orrs	r3, r2
 80275a8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80275aa:	370c      	adds	r7, #12
 80275ac:	46bd      	mov	sp, r7
 80275ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275b2:	4770      	bx	lr
 80275b4:	50004600 	.word	0x50004600

080275b8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80275b8:	b480      	push	{r7}
 80275ba:	b083      	sub	sp, #12
 80275bc:	af00      	add	r7, sp, #0
 80275be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80275c0:	4906      	ldr	r1, [pc, #24]	; (80275dc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80275c2:	4b06      	ldr	r3, [pc, #24]	; (80275dc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80275c4:	69db      	ldr	r3, [r3, #28]
 80275c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80275ca:	687b      	ldr	r3, [r7, #4]
 80275cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80275ce:	4313      	orrs	r3, r2
 80275d0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80275d2:	370c      	adds	r7, #12
 80275d4:	46bd      	mov	sp, r7
 80275d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275da:	4770      	bx	lr
 80275dc:	50004600 	.word	0x50004600

080275e0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80275e0:	b480      	push	{r7}
 80275e2:	b083      	sub	sp, #12
 80275e4:	af00      	add	r7, sp, #0
 80275e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80275e8:	4906      	ldr	r1, [pc, #24]	; (8027604 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80275ea:	4b06      	ldr	r3, [pc, #24]	; (8027604 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80275ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80275f2:	687b      	ldr	r3, [r7, #4]
 80275f4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80275f6:	4313      	orrs	r3, r2
 80275f8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80275fa:	370c      	adds	r7, #12
 80275fc:	46bd      	mov	sp, r7
 80275fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027602:	4770      	bx	lr
 8027604:	50004600 	.word	0x50004600

08027608 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8027608:	b480      	push	{r7}
 802760a:	b083      	sub	sp, #12
 802760c:	af00      	add	r7, sp, #0
 802760e:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8027610:	4906      	ldr	r1, [pc, #24]	; (802762c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8027612:	4b06      	ldr	r3, [pc, #24]	; (802762c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8027614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027616:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 802761a:	687b      	ldr	r3, [r7, #4]
 802761c:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 802761e:	4313      	orrs	r3, r2
 8027620:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8027622:	370c      	adds	r7, #12
 8027624:	46bd      	mov	sp, r7
 8027626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802762a:	4770      	bx	lr
 802762c:	50004600 	.word	0x50004600

08027630 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8027630:	b480      	push	{r7}
 8027632:	b083      	sub	sp, #12
 8027634:	af00      	add	r7, sp, #0
 8027636:	4603      	mov	r3, r0
 8027638:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 802763a:	4a04      	ldr	r2, [pc, #16]	; (802764c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 802763c:	79fb      	ldrb	r3, [r7, #7]
 802763e:	6053      	str	r3, [r2, #4]
}
 8027640:	370c      	adds	r7, #12
 8027642:	46bd      	mov	sp, r7
 8027644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027648:	4770      	bx	lr
 802764a:	bf00      	nop
 802764c:	50004600 	.word	0x50004600

08027650 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8027650:	b480      	push	{r7}
 8027652:	b085      	sub	sp, #20
 8027654:	af00      	add	r7, sp, #0
 8027656:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8027658:	687b      	ldr	r3, [r7, #4]
 802765a:	0f1b      	lsrs	r3, r3, #28
 802765c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 802765e:	687b      	ldr	r3, [r7, #4]
 8027660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8027664:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8027666:	68fa      	ldr	r2, [r7, #12]
 8027668:	4613      	mov	r3, r2
 802766a:	005b      	lsls	r3, r3, #1
 802766c:	4413      	add	r3, r2
 802766e:	009b      	lsls	r3, r3, #2
 8027670:	461a      	mov	r2, r3
 8027672:	4b04      	ldr	r3, [pc, #16]	; (8027684 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8027674:	4413      	add	r3, r2
 8027676:	68ba      	ldr	r2, [r7, #8]
 8027678:	601a      	str	r2, [r3, #0]
}
 802767a:	3714      	adds	r7, #20
 802767c:	46bd      	mov	sp, r7
 802767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027682:	4770      	bx	lr
 8027684:	50004648 	.word	0x50004648

08027688 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8027688:	b480      	push	{r7}
 802768a:	b083      	sub	sp, #12
 802768c:	af00      	add	r7, sp, #0
 802768e:	6078      	str	r0, [r7, #4]
 8027690:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8027692:	4a19      	ldr	r2, [pc, #100]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8027694:	4b18      	ldr	r3, [pc, #96]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8027696:	695b      	ldr	r3, [r3, #20]
 8027698:	f043 0301 	orr.w	r3, r3, #1
 802769c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 802769e:	4a16      	ldr	r2, [pc, #88]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276a0:	4b15      	ldr	r3, [pc, #84]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276a2:	695b      	ldr	r3, [r3, #20]
 80276a4:	f043 0310 	orr.w	r3, r3, #16
 80276a8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80276aa:	4913      	ldr	r1, [pc, #76]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276ac:	683b      	ldr	r3, [r7, #0]
 80276ae:	3b01      	subs	r3, #1
 80276b0:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80276b2:	687b      	ldr	r3, [r7, #4]
 80276b4:	3b01      	subs	r3, #1
 80276b6:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80276b8:	4313      	orrs	r3, r2
 80276ba:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80276bc:	4a0e      	ldr	r2, [pc, #56]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276be:	4b0e      	ldr	r3, [pc, #56]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276c0:	695b      	ldr	r3, [r3, #20]
 80276c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80276c6:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80276c8:	4a0b      	ldr	r2, [pc, #44]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276ca:	4b0b      	ldr	r3, [pc, #44]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276cc:	695b      	ldr	r3, [r3, #20]
 80276ce:	f023 0310 	bic.w	r3, r3, #16
 80276d2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80276d4:	4a08      	ldr	r2, [pc, #32]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276d6:	4b08      	ldr	r3, [pc, #32]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276d8:	695b      	ldr	r3, [r3, #20]
 80276da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80276de:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80276e0:	bf00      	nop
 80276e2:	4b05      	ldr	r3, [pc, #20]	; (80276f8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80276e4:	691b      	ldr	r3, [r3, #16]
 80276e6:	f003 0304 	and.w	r3, r3, #4
 80276ea:	2b00      	cmp	r3, #0
 80276ec:	d0f9      	beq.n	80276e2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80276ee:	370c      	adds	r7, #12
 80276f0:	46bd      	mov	sp, r7
 80276f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276f6:	4770      	bx	lr
 80276f8:	50004710 	.word	0x50004710

080276fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80276fc:	b580      	push	{r7, lr}
 80276fe:	b082      	sub	sp, #8
 8027700:	af00      	add	r7, sp, #0
 8027702:	4603      	mov	r3, r0
 8027704:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8027706:	4a0f      	ldr	r2, [pc, #60]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8027708:	4b0e      	ldr	r3, [pc, #56]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802770a:	685b      	ldr	r3, [r3, #4]
 802770c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027710:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8027712:	79fb      	ldrb	r3, [r7, #7]
 8027714:	2b01      	cmp	r3, #1
 8027716:	d10e      	bne.n	8027736 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8027718:	4a0a      	ldr	r2, [pc, #40]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802771a:	4b0a      	ldr	r3, [pc, #40]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802771c:	685b      	ldr	r3, [r3, #4]
 802771e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8027722:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8027724:	2064      	movs	r0, #100	; 0x64
 8027726:	f7ff fd51 	bl	80271cc <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 802772a:	4a06      	ldr	r2, [pc, #24]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802772c:	4b05      	ldr	r3, [pc, #20]	; (8027744 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802772e:	685b      	ldr	r3, [r3, #4]
 8027730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8027734:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8027736:	2064      	movs	r0, #100	; 0x64
 8027738:	f7ff fd48 	bl	80271cc <XMC_SCU_lDelay>
}
 802773c:	3708      	adds	r7, #8
 802773e:	46bd      	mov	sp, r7
 8027740:	bd80      	pop	{r7, pc}
 8027742:	bf00      	nop
 8027744:	50004710 	.word	0x50004710

08027748 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8027748:	b480      	push	{r7}
 802774a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 802774c:	4b12      	ldr	r3, [pc, #72]	; (8027798 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 802774e:	681b      	ldr	r3, [r3, #0]
 8027750:	f003 0301 	and.w	r3, r3, #1
 8027754:	2b00      	cmp	r3, #0
 8027756:	d109      	bne.n	802776c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8027758:	4b0f      	ldr	r3, [pc, #60]	; (8027798 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 802775a:	2201      	movs	r2, #1
 802775c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 802775e:	bf00      	nop
 8027760:	4b0d      	ldr	r3, [pc, #52]	; (8027798 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8027762:	681b      	ldr	r3, [r3, #0]
 8027764:	f003 0301 	and.w	r3, r3, #1
 8027768:	2b00      	cmp	r3, #0
 802776a:	d0f9      	beq.n	8027760 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 802776c:	4b0b      	ldr	r3, [pc, #44]	; (802779c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 802776e:	681b      	ldr	r3, [r3, #0]
 8027770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027774:	2b00      	cmp	r3, #0
 8027776:	d00a      	beq.n	802778e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8027778:	4b08      	ldr	r3, [pc, #32]	; (802779c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 802777a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802777e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8027780:	bf00      	nop
 8027782:	4b06      	ldr	r3, [pc, #24]	; (802779c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8027784:	681b      	ldr	r3, [r3, #0]
 8027786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802778a:	2b00      	cmp	r3, #0
 802778c:	d1f9      	bne.n	8027782 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 802778e:	46bd      	mov	sp, r7
 8027790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027794:	4770      	bx	lr
 8027796:	bf00      	nop
 8027798:	50004200 	.word	0x50004200
 802779c:	50004400 	.word	0x50004400

080277a0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80277a0:	b480      	push	{r7}
 80277a2:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80277a4:	4b06      	ldr	r3, [pc, #24]	; (80277c0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80277a6:	681b      	ldr	r3, [r3, #0]
 80277a8:	f003 0308 	and.w	r3, r3, #8
 80277ac:	2b00      	cmp	r3, #0
 80277ae:	bf0c      	ite	eq
 80277b0:	2301      	moveq	r3, #1
 80277b2:	2300      	movne	r3, #0
 80277b4:	b2db      	uxtb	r3, r3
}
 80277b6:	4618      	mov	r0, r3
 80277b8:	46bd      	mov	sp, r7
 80277ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277be:	4770      	bx	lr
 80277c0:	50004300 	.word	0x50004300

080277c4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80277c4:	b580      	push	{r7, lr}
 80277c6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80277c8:	bf00      	nop
 80277ca:	4b16      	ldr	r3, [pc, #88]	; (8027824 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80277cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80277d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	d1f8      	bne.n	80277ca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80277d8:	4a13      	ldr	r2, [pc, #76]	; (8027828 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80277da:	4b13      	ldr	r3, [pc, #76]	; (8027828 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80277dc:	69db      	ldr	r3, [r3, #28]
 80277de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80277e2:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80277e4:	bf00      	nop
 80277e6:	4b0f      	ldr	r3, [pc, #60]	; (8027824 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 80277e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80277ec:	f003 0308 	and.w	r3, r3, #8
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	d1f8      	bne.n	80277e6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80277f4:	4a0c      	ldr	r2, [pc, #48]	; (8027828 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80277f6:	4b0c      	ldr	r3, [pc, #48]	; (8027828 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80277f8:	68db      	ldr	r3, [r3, #12]
 80277fa:	f043 0308 	orr.w	r3, r3, #8
 80277fe:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8027800:	bf00      	nop
 8027802:	4b08      	ldr	r3, [pc, #32]	; (8027824 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8027804:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8027808:	f003 0304 	and.w	r3, r3, #4
 802780c:	2b00      	cmp	r3, #0
 802780e:	d1f8      	bne.n	8027802 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8027810:	4b05      	ldr	r3, [pc, #20]	; (8027828 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8027812:	2208      	movs	r2, #8
 8027814:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8027816:	bf00      	nop
 8027818:	f7ff fccc 	bl	80271b4 <XMC_SCU_GetMirrorStatus>
 802781c:	4603      	mov	r3, r0
 802781e:	2b00      	cmp	r3, #0
 8027820:	d1fa      	bne.n	8027818 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8027822:	bd80      	pop	{r7, pc}
 8027824:	50004000 	.word	0x50004000
 8027828:	50004300 	.word	0x50004300

0802782c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 802782c:	b5b0      	push	{r4, r5, r7, lr}
 802782e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8027830:	4a0f      	ldr	r2, [pc, #60]	; (8027870 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027832:	4b0f      	ldr	r3, [pc, #60]	; (8027870 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027834:	685b      	ldr	r3, [r3, #4]
 8027836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802783a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 802783c:	4d0d      	ldr	r5, [pc, #52]	; (8027874 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 802783e:	4b0d      	ldr	r3, [pc, #52]	; (8027874 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8027840:	685b      	ldr	r3, [r3, #4]
 8027842:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8027846:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 802784a:	f002 fc87 	bl	802a15c <OSCHP_GetFrequency>
 802784e:	4602      	mov	r2, r0
 8027850:	4b09      	ldr	r3, [pc, #36]	; (8027878 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8027852:	fba3 2302 	umull	r2, r3, r3, r2
 8027856:	0d1b      	lsrs	r3, r3, #20
 8027858:	3b01      	subs	r3, #1
 802785a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 802785c:	4323      	orrs	r3, r4
 802785e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8027860:	4a03      	ldr	r2, [pc, #12]	; (8027870 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027862:	4b03      	ldr	r3, [pc, #12]	; (8027870 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8027864:	685b      	ldr	r3, [r3, #4]
 8027866:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802786a:	6053      	str	r3, [r2, #4]
}
 802786c:	bdb0      	pop	{r4, r5, r7, pc}
 802786e:	bf00      	nop
 8027870:	50004710 	.word	0x50004710
 8027874:	50004700 	.word	0x50004700
 8027878:	6b5fca6b 	.word	0x6b5fca6b

0802787c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 802787c:	b480      	push	{r7}
 802787e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8027880:	4b07      	ldr	r3, [pc, #28]	; (80278a0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8027882:	681b      	ldr	r3, [r3, #0]
 8027884:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8027888:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 802788c:	bf0c      	ite	eq
 802788e:	2301      	moveq	r3, #1
 8027890:	2300      	movne	r3, #0
 8027892:	b2db      	uxtb	r3, r3
}
 8027894:	4618      	mov	r0, r3
 8027896:	46bd      	mov	sp, r7
 8027898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802789c:	4770      	bx	lr
 802789e:	bf00      	nop
 80278a0:	50004710 	.word	0x50004710

080278a4 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80278a4:	b480      	push	{r7}
 80278a6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80278a8:	4a05      	ldr	r2, [pc, #20]	; (80278c0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80278aa:	4b05      	ldr	r3, [pc, #20]	; (80278c0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80278ac:	685b      	ldr	r3, [r3, #4]
 80278ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80278b2:	f023 0302 	bic.w	r3, r3, #2
 80278b6:	6053      	str	r3, [r2, #4]
}
 80278b8:	46bd      	mov	sp, r7
 80278ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278be:	4770      	bx	lr
 80278c0:	50004710 	.word	0x50004710

080278c4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80278c4:	b480      	push	{r7}
 80278c6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80278c8:	4a05      	ldr	r2, [pc, #20]	; (80278e0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80278ca:	4b05      	ldr	r3, [pc, #20]	; (80278e0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80278cc:	685b      	ldr	r3, [r3, #4]
 80278ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80278d2:	f043 0302 	orr.w	r3, r3, #2
 80278d6:	6053      	str	r3, [r2, #4]
}
 80278d8:	46bd      	mov	sp, r7
 80278da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278de:	4770      	bx	lr
 80278e0:	50004710 	.word	0x50004710

080278e4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80278e4:	b580      	push	{r7, lr}
 80278e6:	b086      	sub	sp, #24
 80278e8:	af00      	add	r7, sp, #0
 80278ea:	60ba      	str	r2, [r7, #8]
 80278ec:	607b      	str	r3, [r7, #4]
 80278ee:	4603      	mov	r3, r0
 80278f0:	81fb      	strh	r3, [r7, #14]
 80278f2:	460b      	mov	r3, r1
 80278f4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80278f6:	89fb      	ldrh	r3, [r7, #14]
 80278f8:	4618      	mov	r0, r3
 80278fa:	f7ff fd9d 	bl	8027438 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80278fe:	7b7b      	ldrb	r3, [r7, #13]
 8027900:	2b01      	cmp	r3, #1
 8027902:	f040 8084 	bne.w	8027a0e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8027906:	89fb      	ldrh	r3, [r7, #14]
 8027908:	2b00      	cmp	r3, #0
 802790a:	d109      	bne.n	8027920 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 802790c:	f002 fc26 	bl	802a15c <OSCHP_GetFrequency>
 8027910:	4602      	mov	r2, r0
 8027912:	4b4b      	ldr	r3, [pc, #300]	; (8027a40 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8027914:	fba3 2302 	umull	r2, r3, r3, r2
 8027918:	0c9b      	lsrs	r3, r3, #18
 802791a:	059b      	lsls	r3, r3, #22
 802791c:	617b      	str	r3, [r7, #20]
 802791e:	e002      	b.n	8027926 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8027920:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8027924:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8027926:	697b      	ldr	r3, [r7, #20]
 8027928:	687a      	ldr	r2, [r7, #4]
 802792a:	fb02 f203 	mul.w	r2, r2, r3
 802792e:	68bb      	ldr	r3, [r7, #8]
 8027930:	fbb2 f3f3 	udiv	r3, r2, r3
 8027934:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8027936:	697b      	ldr	r3, [r7, #20]
 8027938:	4a42      	ldr	r2, [pc, #264]	; (8027a44 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 802793a:	fba2 2303 	umull	r2, r3, r2, r3
 802793e:	091b      	lsrs	r3, r3, #4
 8027940:	0d9b      	lsrs	r3, r3, #22
 8027942:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8027944:	4a40      	ldr	r2, [pc, #256]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027946:	4b40      	ldr	r3, [pc, #256]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027948:	685b      	ldr	r3, [r3, #4]
 802794a:	f043 0301 	orr.w	r3, r3, #1
 802794e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8027950:	4a3d      	ldr	r2, [pc, #244]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027952:	4b3d      	ldr	r3, [pc, #244]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027954:	685b      	ldr	r3, [r3, #4]
 8027956:	f043 0310 	orr.w	r3, r3, #16
 802795a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 802795c:	493a      	ldr	r1, [pc, #232]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802795e:	4b3a      	ldr	r3, [pc, #232]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027960:	689a      	ldr	r2, [r3, #8]
 8027962:	4b3a      	ldr	r3, [pc, #232]	; (8027a4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8027964:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8027966:	687a      	ldr	r2, [r7, #4]
 8027968:	3a01      	subs	r2, #1
 802796a:	0212      	lsls	r2, r2, #8
 802796c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 802796e:	693b      	ldr	r3, [r7, #16]
 8027970:	3b01      	subs	r3, #1
 8027972:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8027974:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8027976:	68bb      	ldr	r3, [r7, #8]
 8027978:	3b01      	subs	r3, #1
 802797a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 802797c:	4313      	orrs	r3, r2
 802797e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8027980:	4a31      	ldr	r2, [pc, #196]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027982:	4b31      	ldr	r3, [pc, #196]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027984:	685b      	ldr	r3, [r3, #4]
 8027986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802798a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 802798c:	4a2e      	ldr	r2, [pc, #184]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802798e:	4b2e      	ldr	r3, [pc, #184]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027990:	685b      	ldr	r3, [r3, #4]
 8027992:	f023 0310 	bic.w	r3, r3, #16
 8027996:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8027998:	4a2b      	ldr	r2, [pc, #172]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802799a:	4b2b      	ldr	r3, [pc, #172]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 802799c:	685b      	ldr	r3, [r3, #4]
 802799e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80279a2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80279a4:	bf00      	nop
 80279a6:	4b28      	ldr	r3, [pc, #160]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80279a8:	681b      	ldr	r3, [r3, #0]
 80279aa:	f003 0304 	and.w	r3, r3, #4
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d0f9      	beq.n	80279a6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80279b2:	4a25      	ldr	r2, [pc, #148]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80279b4:	4b24      	ldr	r3, [pc, #144]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80279b6:	685b      	ldr	r3, [r3, #4]
 80279b8:	f023 0301 	bic.w	r3, r3, #1
 80279bc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80279be:	bf00      	nop
 80279c0:	4b21      	ldr	r3, [pc, #132]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80279c2:	681b      	ldr	r3, [r3, #0]
 80279c4:	f003 0301 	and.w	r3, r3, #1
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	d1f9      	bne.n	80279c0 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80279cc:	697b      	ldr	r3, [r7, #20]
 80279ce:	4a20      	ldr	r2, [pc, #128]	; (8027a50 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80279d0:	fba2 2303 	umull	r2, r3, r2, r3
 80279d4:	095b      	lsrs	r3, r3, #5
 80279d6:	0d9b      	lsrs	r3, r3, #22
 80279d8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80279da:	6a3a      	ldr	r2, [r7, #32]
 80279dc:	693b      	ldr	r3, [r7, #16]
 80279de:	429a      	cmp	r2, r3
 80279e0:	d202      	bcs.n	80279e8 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80279e2:	6938      	ldr	r0, [r7, #16]
 80279e4:	f000 f838 	bl	8027a58 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80279e8:	697b      	ldr	r3, [r7, #20]
 80279ea:	085b      	lsrs	r3, r3, #1
 80279ec:	4a19      	ldr	r2, [pc, #100]	; (8027a54 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 80279ee:	fba2 2303 	umull	r2, r3, r2, r3
 80279f2:	095b      	lsrs	r3, r3, #5
 80279f4:	0d9b      	lsrs	r3, r3, #22
 80279f6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80279f8:	6a3a      	ldr	r2, [r7, #32]
 80279fa:	693b      	ldr	r3, [r7, #16]
 80279fc:	429a      	cmp	r2, r3
 80279fe:	d202      	bcs.n	8027a06 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8027a00:	6938      	ldr	r0, [r7, #16]
 8027a02:	f000 f829 	bl	8027a58 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8027a06:	6a38      	ldr	r0, [r7, #32]
 8027a08:	f000 f826 	bl	8027a58 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8027a0c:	e015      	b.n	8027a3a <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8027a0e:	490e      	ldr	r1, [pc, #56]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027a10:	4b0d      	ldr	r3, [pc, #52]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027a12:	689b      	ldr	r3, [r3, #8]
 8027a14:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8027a18:	6a3b      	ldr	r3, [r7, #32]
 8027a1a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8027a1c:	4313      	orrs	r3, r2
 8027a1e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8027a20:	4a09      	ldr	r2, [pc, #36]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027a22:	4b09      	ldr	r3, [pc, #36]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027a24:	685b      	ldr	r3, [r3, #4]
 8027a26:	f043 0301 	orr.w	r3, r3, #1
 8027a2a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8027a2c:	bf00      	nop
 8027a2e:	4b06      	ldr	r3, [pc, #24]	; (8027a48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8027a30:	681b      	ldr	r3, [r3, #0]
 8027a32:	f003 0301 	and.w	r3, r3, #1
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d0f9      	beq.n	8027a2e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8027a3a:	3718      	adds	r7, #24
 8027a3c:	46bd      	mov	sp, r7
 8027a3e:	bd80      	pop	{r7, pc}
 8027a40:	431bde83 	.word	0x431bde83
 8027a44:	aaaaaaab 	.word	0xaaaaaaab
 8027a48:	50004710 	.word	0x50004710
 8027a4c:	f08080ff 	.word	0xf08080ff
 8027a50:	88888889 	.word	0x88888889
 8027a54:	b60b60b7 	.word	0xb60b60b7

08027a58 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8027a58:	b580      	push	{r7, lr}
 8027a5a:	b082      	sub	sp, #8
 8027a5c:	af00      	add	r7, sp, #0
 8027a5e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8027a60:	4907      	ldr	r1, [pc, #28]	; (8027a80 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8027a62:	4b07      	ldr	r3, [pc, #28]	; (8027a80 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8027a64:	689b      	ldr	r3, [r3, #8]
 8027a66:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8027a6a:	687b      	ldr	r3, [r7, #4]
 8027a6c:	3b01      	subs	r3, #1
 8027a6e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8027a70:	4313      	orrs	r3, r2
 8027a72:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8027a74:	2032      	movs	r0, #50	; 0x32
 8027a76:	f7ff fba9 	bl	80271cc <XMC_SCU_lDelay>
}
 8027a7a:	3708      	adds	r7, #8
 8027a7c:	46bd      	mov	sp, r7
 8027a7e:	bd80      	pop	{r7, pc}
 8027a80:	50004710 	.word	0x50004710

08027a84 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8027a84:	b480      	push	{r7}
 8027a86:	b083      	sub	sp, #12
 8027a88:	af00      	add	r7, sp, #0
 8027a8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8027a8c:	687b      	ldr	r3, [r7, #4]
 8027a8e:	68db      	ldr	r3, [r3, #12]
 8027a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8027a94:	687b      	ldr	r3, [r7, #4]
 8027a96:	60da      	str	r2, [r3, #12]
}
 8027a98:	370c      	adds	r7, #12
 8027a9a:	46bd      	mov	sp, r7
 8027a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aa0:	4770      	bx	lr
 8027aa2:	bf00      	nop

08027aa4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8027aa4:	b580      	push	{r7, lr}
 8027aa6:	b082      	sub	sp, #8
 8027aa8:	af00      	add	r7, sp, #0
 8027aaa:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	4a10      	ldr	r2, [pc, #64]	; (8027af0 <XMC_CCU4_lDeassertReset+0x4c>)
 8027ab0:	4293      	cmp	r3, r2
 8027ab2:	d103      	bne.n	8027abc <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8027ab4:	2004      	movs	r0, #4
 8027ab6:	f7ff fc43 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
 8027aba:	e016      	b.n	8027aea <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8027abc:	687b      	ldr	r3, [r7, #4]
 8027abe:	4a0d      	ldr	r2, [pc, #52]	; (8027af4 <XMC_CCU4_lDeassertReset+0x50>)
 8027ac0:	4293      	cmp	r3, r2
 8027ac2:	d103      	bne.n	8027acc <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8027ac4:	2008      	movs	r0, #8
 8027ac6:	f7ff fc3b 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
 8027aca:	e00e      	b.n	8027aea <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8027acc:	687b      	ldr	r3, [r7, #4]
 8027ace:	4a0a      	ldr	r2, [pc, #40]	; (8027af8 <XMC_CCU4_lDeassertReset+0x54>)
 8027ad0:	4293      	cmp	r3, r2
 8027ad2:	d103      	bne.n	8027adc <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8027ad4:	2010      	movs	r0, #16
 8027ad6:	f7ff fc33 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
 8027ada:	e006      	b.n	8027aea <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8027adc:	687b      	ldr	r3, [r7, #4]
 8027ade:	4a07      	ldr	r2, [pc, #28]	; (8027afc <XMC_CCU4_lDeassertReset+0x58>)
 8027ae0:	4293      	cmp	r3, r2
 8027ae2:	d102      	bne.n	8027aea <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8027ae4:	4806      	ldr	r0, [pc, #24]	; (8027b00 <XMC_CCU4_lDeassertReset+0x5c>)
 8027ae6:	f7ff fc2b 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8027aea:	3708      	adds	r7, #8
 8027aec:	46bd      	mov	sp, r7
 8027aee:	bd80      	pop	{r7, pc}
 8027af0:	4000c000 	.word	0x4000c000
 8027af4:	40010000 	.word	0x40010000
 8027af8:	40014000 	.word	0x40014000
 8027afc:	48004000 	.word	0x48004000
 8027b00:	10000001 	.word	0x10000001

08027b04 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8027b04:	b580      	push	{r7, lr}
 8027b06:	b082      	sub	sp, #8
 8027b08:	af00      	add	r7, sp, #0
 8027b0a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	4a10      	ldr	r2, [pc, #64]	; (8027b50 <XMC_CCU4_lUngateClock+0x4c>)
 8027b10:	4293      	cmp	r3, r2
 8027b12:	d103      	bne.n	8027b1c <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8027b14:	2004      	movs	r0, #4
 8027b16:	f7ff fd9b 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8027b1a:	e016      	b.n	8027b4a <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8027b1c:	687b      	ldr	r3, [r7, #4]
 8027b1e:	4a0d      	ldr	r2, [pc, #52]	; (8027b54 <XMC_CCU4_lUngateClock+0x50>)
 8027b20:	4293      	cmp	r3, r2
 8027b22:	d103      	bne.n	8027b2c <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8027b24:	2008      	movs	r0, #8
 8027b26:	f7ff fd93 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8027b2a:	e00e      	b.n	8027b4a <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8027b2c:	687b      	ldr	r3, [r7, #4]
 8027b2e:	4a0a      	ldr	r2, [pc, #40]	; (8027b58 <XMC_CCU4_lUngateClock+0x54>)
 8027b30:	4293      	cmp	r3, r2
 8027b32:	d103      	bne.n	8027b3c <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8027b34:	2010      	movs	r0, #16
 8027b36:	f7ff fd8b 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8027b3a:	e006      	b.n	8027b4a <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	4a07      	ldr	r2, [pc, #28]	; (8027b5c <XMC_CCU4_lUngateClock+0x58>)
 8027b40:	4293      	cmp	r3, r2
 8027b42:	d102      	bne.n	8027b4a <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8027b44:	4806      	ldr	r0, [pc, #24]	; (8027b60 <XMC_CCU4_lUngateClock+0x5c>)
 8027b46:	f7ff fd83 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8027b4a:	3708      	adds	r7, #8
 8027b4c:	46bd      	mov	sp, r7
 8027b4e:	bd80      	pop	{r7, pc}
 8027b50:	4000c000 	.word	0x4000c000
 8027b54:	40010000 	.word	0x40010000
 8027b58:	40014000 	.word	0x40014000
 8027b5c:	48004000 	.word	0x48004000
 8027b60:	10000001 	.word	0x10000001

08027b64 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8027b64:	b580      	push	{r7, lr}
 8027b66:	b082      	sub	sp, #8
 8027b68:	af00      	add	r7, sp, #0
 8027b6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8027b6c:	2010      	movs	r0, #16
 8027b6e:	f7ff fd5f 	bl	8027630 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8027b72:	6878      	ldr	r0, [r7, #4]
 8027b74:	f7ff ffc6 	bl	8027b04 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8027b78:	6878      	ldr	r0, [r7, #4]
 8027b7a:	f7ff ff93 	bl	8027aa4 <XMC_CCU4_lDeassertReset>
#endif
}
 8027b7e:	3708      	adds	r7, #8
 8027b80:	46bd      	mov	sp, r7
 8027b82:	bd80      	pop	{r7, pc}

08027b84 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8027b84:	b580      	push	{r7, lr}
 8027b86:	b084      	sub	sp, #16
 8027b88:	af00      	add	r7, sp, #0
 8027b8a:	6078      	str	r0, [r7, #4]
 8027b8c:	460b      	mov	r3, r1
 8027b8e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8027b90:	6878      	ldr	r0, [r7, #4]
 8027b92:	f7ff ffe7 	bl	8027b64 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8027b96:	6878      	ldr	r0, [r7, #4]
 8027b98:	f7ff ff74 	bl	8027a84 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8027b9c:	687b      	ldr	r3, [r7, #4]
 8027b9e:	681b      	ldr	r3, [r3, #0]
 8027ba0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8027ba2:	68fb      	ldr	r3, [r7, #12]
 8027ba4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027ba8:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8027baa:	78fb      	ldrb	r3, [r7, #3]
 8027bac:	039b      	lsls	r3, r3, #14
 8027bae:	68fa      	ldr	r2, [r7, #12]
 8027bb0:	4313      	orrs	r3, r2
 8027bb2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8027bb4:	687b      	ldr	r3, [r7, #4]
 8027bb6:	68fa      	ldr	r2, [r7, #12]
 8027bb8:	601a      	str	r2, [r3, #0]
}
 8027bba:	3710      	adds	r7, #16
 8027bbc:	46bd      	mov	sp, r7
 8027bbe:	bd80      	pop	{r7, pc}

08027bc0 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8027bc0:	b480      	push	{r7}
 8027bc2:	b083      	sub	sp, #12
 8027bc4:	af00      	add	r7, sp, #0
 8027bc6:	6078      	str	r0, [r7, #4]
 8027bc8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8027bca:	683b      	ldr	r3, [r7, #0]
 8027bcc:	681a      	ldr	r2, [r3, #0]
 8027bce:	687b      	ldr	r3, [r7, #4]
 8027bd0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8027bd2:	683b      	ldr	r3, [r7, #0]
 8027bd4:	795b      	ldrb	r3, [r3, #5]
 8027bd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8027bda:	b2db      	uxtb	r3, r3
 8027bdc:	051a      	lsls	r2, r3, #20
 8027bde:	687b      	ldr	r3, [r7, #4]
 8027be0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8027be2:	683b      	ldr	r3, [r7, #0]
 8027be4:	791b      	ldrb	r3, [r3, #4]
 8027be6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8027bea:	b2db      	uxtb	r3, r3
 8027bec:	461a      	mov	r2, r3
 8027bee:	687b      	ldr	r3, [r7, #4]
 8027bf0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8027bf2:	683b      	ldr	r3, [r7, #0]
 8027bf4:	795b      	ldrb	r3, [r3, #5]
 8027bf6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8027bfa:	b2db      	uxtb	r3, r3
 8027bfc:	461a      	mov	r2, r3
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8027c02:	683b      	ldr	r3, [r7, #0]
 8027c04:	795b      	ldrb	r3, [r3, #5]
 8027c06:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8027c0a:	b2db      	uxtb	r3, r3
 8027c0c:	461a      	mov	r2, r3
 8027c0e:	687b      	ldr	r3, [r7, #4]
 8027c10:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8027c12:	683b      	ldr	r3, [r7, #0]
 8027c14:	791b      	ldrb	r3, [r3, #4]
 8027c16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8027c1a:	b2db      	uxtb	r3, r3
 8027c1c:	461a      	mov	r2, r3
 8027c1e:	687b      	ldr	r3, [r7, #4]
 8027c20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8027c22:	370c      	adds	r7, #12
 8027c24:	46bd      	mov	sp, r7
 8027c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c2a:	4770      	bx	lr

08027c2c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8027c2c:	b480      	push	{r7}
 8027c2e:	b087      	sub	sp, #28
 8027c30:	af00      	add	r7, sp, #0
 8027c32:	6078      	str	r0, [r7, #4]
 8027c34:	460b      	mov	r3, r1
 8027c36:	70fb      	strb	r3, [r7, #3]
 8027c38:	4613      	mov	r3, r2
 8027c3a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8027c3c:	687b      	ldr	r3, [r7, #4]
 8027c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8027c42:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8027c44:	78fb      	ldrb	r3, [r7, #3]
 8027c46:	2b09      	cmp	r3, #9
 8027c48:	d82c      	bhi.n	8027ca4 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8027c4a:	a201      	add	r2, pc, #4	; (adr r2, 8027c50 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8027c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027c50:	08027c79 	.word	0x08027c79
 8027c54:	08027c79 	.word	0x08027c79
 8027c58:	08027c83 	.word	0x08027c83
 8027c5c:	08027c83 	.word	0x08027c83
 8027c60:	08027ca5 	.word	0x08027ca5
 8027c64:	08027ca5 	.word	0x08027ca5
 8027c68:	08027ca5 	.word	0x08027ca5
 8027c6c:	08027ca5 	.word	0x08027ca5
 8027c70:	08027c8d 	.word	0x08027c8d
 8027c74:	08027c99 	.word	0x08027c99
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8027c78:	2303      	movs	r3, #3
 8027c7a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8027c7c:	2300      	movs	r3, #0
 8027c7e:	617b      	str	r3, [r7, #20]
      break;
 8027c80:	e016      	b.n	8027cb0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8027c82:	230c      	movs	r3, #12
 8027c84:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8027c86:	2302      	movs	r3, #2
 8027c88:	617b      	str	r3, [r7, #20]
      break;
 8027c8a:	e011      	b.n	8027cb0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8027c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027c90:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8027c92:	2308      	movs	r3, #8
 8027c94:	617b      	str	r3, [r7, #20]
      break;
 8027c96:	e00b      	b.n	8027cb0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8027c98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8027c9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8027c9e:	230a      	movs	r3, #10
 8027ca0:	617b      	str	r3, [r7, #20]
      break;
 8027ca2:	e005      	b.n	8027cb0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8027ca4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8027ca8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8027caa:	230c      	movs	r3, #12
 8027cac:	617b      	str	r3, [r7, #20]
      break;
 8027cae:	bf00      	nop
  }
  
  srs &= ~mask; 
 8027cb0:	693b      	ldr	r3, [r7, #16]
 8027cb2:	43db      	mvns	r3, r3
 8027cb4:	68fa      	ldr	r2, [r7, #12]
 8027cb6:	4013      	ands	r3, r2
 8027cb8:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8027cba:	78ba      	ldrb	r2, [r7, #2]
 8027cbc:	697b      	ldr	r3, [r7, #20]
 8027cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8027cc2:	68fa      	ldr	r2, [r7, #12]
 8027cc4:	4313      	orrs	r3, r2
 8027cc6:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8027cc8:	687b      	ldr	r3, [r7, #4]
 8027cca:	68fa      	ldr	r2, [r7, #12]
 8027ccc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8027cd0:	371c      	adds	r7, #28
 8027cd2:	46bd      	mov	sp, r7
 8027cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cd8:	4770      	bx	lr
 8027cda:	bf00      	nop

08027cdc <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8027cdc:	b480      	push	{r7}
 8027cde:	b083      	sub	sp, #12
 8027ce0:	af00      	add	r7, sp, #0
 8027ce2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	68db      	ldr	r3, [r3, #12]
 8027ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	60da      	str	r2, [r3, #12]
}
 8027cf0:	370c      	adds	r7, #12
 8027cf2:	46bd      	mov	sp, r7
 8027cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cf8:	4770      	bx	lr
 8027cfa:	bf00      	nop

08027cfc <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8027cfc:	b480      	push	{r7}
 8027cfe:	b083      	sub	sp, #12
 8027d00:	af00      	add	r7, sp, #0
 8027d02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	2201      	movs	r2, #1
 8027d08:	611a      	str	r2, [r3, #16]
}
 8027d0a:	370c      	adds	r7, #12
 8027d0c:	46bd      	mov	sp, r7
 8027d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d12:	4770      	bx	lr

08027d14 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8027d14:	b580      	push	{r7, lr}
 8027d16:	b082      	sub	sp, #8
 8027d18:	af00      	add	r7, sp, #0
 8027d1a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8027d1c:	687b      	ldr	r3, [r7, #4]
 8027d1e:	4a09      	ldr	r2, [pc, #36]	; (8027d44 <XMC_CCU8_lDeassertReset+0x30>)
 8027d20:	4293      	cmp	r3, r2
 8027d22:	d103      	bne.n	8027d2c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8027d24:	2080      	movs	r0, #128	; 0x80
 8027d26:	f7ff fb0b 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
 8027d2a:	e007      	b.n	8027d3c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8027d2c:	687b      	ldr	r3, [r7, #4]
 8027d2e:	4a06      	ldr	r2, [pc, #24]	; (8027d48 <XMC_CCU8_lDeassertReset+0x34>)
 8027d30:	4293      	cmp	r3, r2
 8027d32:	d103      	bne.n	8027d3c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8027d34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8027d38:	f7ff fb02 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8027d3c:	3708      	adds	r7, #8
 8027d3e:	46bd      	mov	sp, r7
 8027d40:	bd80      	pop	{r7, pc}
 8027d42:	bf00      	nop
 8027d44:	40020000 	.word	0x40020000
 8027d48:	40024000 	.word	0x40024000

08027d4c <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8027d4c:	b580      	push	{r7, lr}
 8027d4e:	b082      	sub	sp, #8
 8027d50:	af00      	add	r7, sp, #0
 8027d52:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8027d54:	687b      	ldr	r3, [r7, #4]
 8027d56:	4a09      	ldr	r2, [pc, #36]	; (8027d7c <XMC_CCU8_lUngateClock+0x30>)
 8027d58:	4293      	cmp	r3, r2
 8027d5a:	d103      	bne.n	8027d64 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8027d5c:	2080      	movs	r0, #128	; 0x80
 8027d5e:	f7ff fc77 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8027d62:	e007      	b.n	8027d74 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8027d64:	687b      	ldr	r3, [r7, #4]
 8027d66:	4a06      	ldr	r2, [pc, #24]	; (8027d80 <XMC_CCU8_lUngateClock+0x34>)
 8027d68:	4293      	cmp	r3, r2
 8027d6a:	d103      	bne.n	8027d74 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8027d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8027d70:	f7ff fc6e 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8027d74:	3708      	adds	r7, #8
 8027d76:	46bd      	mov	sp, r7
 8027d78:	bd80      	pop	{r7, pc}
 8027d7a:	bf00      	nop
 8027d7c:	40020000 	.word	0x40020000
 8027d80:	40024000 	.word	0x40024000

08027d84 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8027d84:	b580      	push	{r7, lr}
 8027d86:	b082      	sub	sp, #8
 8027d88:	af00      	add	r7, sp, #0
 8027d8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8027d8c:	2010      	movs	r0, #16
 8027d8e:	f7ff fc4f 	bl	8027630 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8027d92:	6878      	ldr	r0, [r7, #4]
 8027d94:	f7ff ffda 	bl	8027d4c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8027d98:	6878      	ldr	r0, [r7, #4]
 8027d9a:	f7ff ffbb 	bl	8027d14 <XMC_CCU8_lDeassertReset>
#endif
}
 8027d9e:	3708      	adds	r7, #8
 8027da0:	46bd      	mov	sp, r7
 8027da2:	bd80      	pop	{r7, pc}

08027da4 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8027da4:	b580      	push	{r7, lr}
 8027da6:	b084      	sub	sp, #16
 8027da8:	af00      	add	r7, sp, #0
 8027daa:	6078      	str	r0, [r7, #4]
 8027dac:	460b      	mov	r3, r1
 8027dae:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8027db0:	6878      	ldr	r0, [r7, #4]
 8027db2:	f7ff ffe7 	bl	8027d84 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8027db6:	6878      	ldr	r0, [r7, #4]
 8027db8:	f7ff ff90 	bl	8027cdc <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8027dbc:	687b      	ldr	r3, [r7, #4]
 8027dbe:	681b      	ldr	r3, [r3, #0]
 8027dc0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8027dc2:	68fb      	ldr	r3, [r7, #12]
 8027dc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027dc8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8027dca:	78fb      	ldrb	r3, [r7, #3]
 8027dcc:	039b      	lsls	r3, r3, #14
 8027dce:	68fa      	ldr	r2, [r7, #12]
 8027dd0:	4313      	orrs	r3, r2
 8027dd2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	68fa      	ldr	r2, [r7, #12]
 8027dd8:	601a      	str	r2, [r3, #0]
}
 8027dda:	3710      	adds	r7, #16
 8027ddc:	46bd      	mov	sp, r7
 8027dde:	bd80      	pop	{r7, pc}

08027de0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8027de0:	b580      	push	{r7, lr}
 8027de2:	b082      	sub	sp, #8
 8027de4:	af00      	add	r7, sp, #0
 8027de6:	6078      	str	r0, [r7, #4]
 8027de8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8027dea:	6878      	ldr	r0, [r7, #4]
 8027dec:	f7ff ff86 	bl	8027cfc <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8027df0:	683b      	ldr	r3, [r7, #0]
 8027df2:	681a      	ldr	r2, [r3, #0]
 8027df4:	687b      	ldr	r3, [r7, #4]
 8027df6:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8027df8:	683b      	ldr	r3, [r7, #0]
 8027dfa:	7b5b      	ldrb	r3, [r3, #13]
 8027dfc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8027e00:	b2db      	uxtb	r3, r3
 8027e02:	051a      	lsls	r2, r3, #20
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8027e08:	683b      	ldr	r3, [r7, #0]
 8027e0a:	7b1b      	ldrb	r3, [r3, #12]
 8027e0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8027e10:	b2db      	uxtb	r3, r3
 8027e12:	461a      	mov	r2, r3
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8027e18:	683b      	ldr	r3, [r7, #0]
 8027e1a:	7b1b      	ldrb	r3, [r3, #12]
 8027e1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8027e20:	b2db      	uxtb	r3, r3
 8027e22:	461a      	mov	r2, r3
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8027e28:	683b      	ldr	r3, [r7, #0]
 8027e2a:	7b5b      	ldrb	r3, [r3, #13]
 8027e2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8027e30:	b2db      	uxtb	r3, r3
 8027e32:	461a      	mov	r2, r3
 8027e34:	687b      	ldr	r3, [r7, #4]
 8027e36:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8027e38:	683b      	ldr	r3, [r7, #0]
 8027e3a:	685a      	ldr	r2, [r3, #4]
 8027e3c:	687b      	ldr	r3, [r7, #4]
 8027e3e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8027e40:	683b      	ldr	r3, [r7, #0]
 8027e42:	689b      	ldr	r3, [r3, #8]
 8027e44:	f083 0214 	eor.w	r2, r3, #20
 8027e48:	687b      	ldr	r3, [r7, #4]
 8027e4a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8027e4c:	3708      	adds	r7, #8
 8027e4e:	46bd      	mov	sp, r7
 8027e50:	bd80      	pop	{r7, pc}
 8027e52:	bf00      	nop

08027e54 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8027e54:	b480      	push	{r7}
 8027e56:	b085      	sub	sp, #20
 8027e58:	af00      	add	r7, sp, #0
 8027e5a:	6078      	str	r0, [r7, #4]
 8027e5c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8027e5e:	687b      	ldr	r3, [r7, #4]
 8027e60:	681b      	ldr	r3, [r3, #0]
 8027e62:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8027e64:	683b      	ldr	r3, [r7, #0]
 8027e66:	0c1b      	lsrs	r3, r3, #16
 8027e68:	43db      	mvns	r3, r3
 8027e6a:	68fa      	ldr	r2, [r7, #12]
 8027e6c:	4013      	ands	r3, r2
 8027e6e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8027e70:	683b      	ldr	r3, [r7, #0]
 8027e72:	b29b      	uxth	r3, r3
 8027e74:	68fa      	ldr	r2, [r7, #12]
 8027e76:	4313      	orrs	r3, r2
 8027e78:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8027e7a:	687b      	ldr	r3, [r7, #4]
 8027e7c:	68fa      	ldr	r2, [r7, #12]
 8027e7e:	601a      	str	r2, [r3, #0]
}
 8027e80:	3714      	adds	r7, #20
 8027e82:	46bd      	mov	sp, r7
 8027e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e88:	4770      	bx	lr
 8027e8a:	bf00      	nop

08027e8c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8027e8c:	b480      	push	{r7}
 8027e8e:	b085      	sub	sp, #20
 8027e90:	af00      	add	r7, sp, #0
 8027e92:	6078      	str	r0, [r7, #4]
 8027e94:	460b      	mov	r3, r1
 8027e96:	70fb      	strb	r3, [r7, #3]
 8027e98:	4613      	mov	r3, r2
 8027e9a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8027e9c:	687b      	ldr	r3, [r7, #4]
 8027e9e:	685b      	ldr	r3, [r3, #4]
 8027ea0:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8027ea2:	68bb      	ldr	r3, [r7, #8]
 8027ea4:	f023 0303 	bic.w	r3, r3, #3
 8027ea8:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8027eaa:	78fb      	ldrb	r3, [r7, #3]
 8027eac:	68ba      	ldr	r2, [r7, #8]
 8027eae:	4313      	orrs	r3, r2
 8027eb0:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8027eb2:	687b      	ldr	r3, [r7, #4]
 8027eb4:	68ba      	ldr	r2, [r7, #8]
 8027eb6:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	695b      	ldr	r3, [r3, #20]
 8027ebc:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8027ebe:	78bb      	ldrb	r3, [r7, #2]
 8027ec0:	2b01      	cmp	r3, #1
 8027ec2:	d104      	bne.n	8027ece <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8027ec4:	68fb      	ldr	r3, [r7, #12]
 8027ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027eca:	60fb      	str	r3, [r7, #12]
 8027ecc:	e003      	b.n	8027ed6 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8027ece:	68fb      	ldr	r3, [r7, #12]
 8027ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027ed4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8027ed6:	687b      	ldr	r3, [r7, #4]
 8027ed8:	68fa      	ldr	r2, [r7, #12]
 8027eda:	615a      	str	r2, [r3, #20]
}
 8027edc:	3714      	adds	r7, #20
 8027ede:	46bd      	mov	sp, r7
 8027ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ee4:	4770      	bx	lr
 8027ee6:	bf00      	nop

08027ee8 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 8027ee8:	b480      	push	{r7}
 8027eea:	b085      	sub	sp, #20
 8027eec:	af00      	add	r7, sp, #0
 8027eee:	6078      	str	r0, [r7, #4]
 8027ef0:	460b      	mov	r3, r1
 8027ef2:	70fb      	strb	r3, [r7, #3]
 8027ef4:	4613      	mov	r3, r2
 8027ef6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	685b      	ldr	r3, [r3, #4]
 8027efc:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8027efe:	68fb      	ldr	r3, [r7, #12]
 8027f00:	f023 030c 	bic.w	r3, r3, #12
 8027f04:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8027f06:	78fb      	ldrb	r3, [r7, #3]
 8027f08:	009b      	lsls	r3, r3, #2
 8027f0a:	68fa      	ldr	r2, [r7, #12]
 8027f0c:	4313      	orrs	r3, r2
 8027f0e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	68fa      	ldr	r2, [r7, #12]
 8027f14:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 8027f16:	687b      	ldr	r3, [r7, #4]
 8027f18:	695b      	ldr	r3, [r3, #20]
 8027f1a:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8027f1c:	68bb      	ldr	r3, [r7, #8]
 8027f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f22:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8027f24:	78bb      	ldrb	r3, [r7, #2]
 8027f26:	021b      	lsls	r3, r3, #8
 8027f28:	68ba      	ldr	r2, [r7, #8]
 8027f2a:	4313      	orrs	r3, r2
 8027f2c:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8027f2e:	687b      	ldr	r3, [r7, #4]
 8027f30:	68ba      	ldr	r2, [r7, #8]
 8027f32:	615a      	str	r2, [r3, #20]
}
 8027f34:	3714      	adds	r7, #20
 8027f36:	46bd      	mov	sp, r7
 8027f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f3c:	4770      	bx	lr
 8027f3e:	bf00      	nop

08027f40 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8027f40:	b480      	push	{r7}
 8027f42:	b085      	sub	sp, #20
 8027f44:	af00      	add	r7, sp, #0
 8027f46:	6078      	str	r0, [r7, #4]
 8027f48:	460b      	mov	r3, r1
 8027f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8027f4c:	687b      	ldr	r3, [r7, #4]
 8027f4e:	685b      	ldr	r3, [r3, #4]
 8027f50:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8027f52:	68fb      	ldr	r3, [r7, #12]
 8027f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8027f58:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 8027f5a:	78fb      	ldrb	r3, [r7, #3]
 8027f5c:	031b      	lsls	r3, r3, #12
 8027f5e:	68fa      	ldr	r2, [r7, #12]
 8027f60:	4313      	orrs	r3, r2
 8027f62:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	68fa      	ldr	r2, [r7, #12]
 8027f68:	605a      	str	r2, [r3, #4]
}
 8027f6a:	3714      	adds	r7, #20
 8027f6c:	46bd      	mov	sp, r7
 8027f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f72:	4770      	bx	lr

08027f74 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8027f74:	b480      	push	{r7}
 8027f76:	b085      	sub	sp, #20
 8027f78:	af00      	add	r7, sp, #0
 8027f7a:	6078      	str	r0, [r7, #4]
 8027f7c:	460b      	mov	r3, r1
 8027f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8027f80:	687b      	ldr	r3, [r7, #4]
 8027f82:	695b      	ldr	r3, [r3, #20]
 8027f84:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8027f86:	68fb      	ldr	r3, [r7, #12]
 8027f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8027f8c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 8027f8e:	78fb      	ldrb	r3, [r7, #3]
 8027f90:	01db      	lsls	r3, r3, #7
 8027f92:	68fa      	ldr	r2, [r7, #12]
 8027f94:	4313      	orrs	r3, r2
 8027f96:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8027f98:	687b      	ldr	r3, [r7, #4]
 8027f9a:	68fa      	ldr	r2, [r7, #12]
 8027f9c:	615a      	str	r2, [r3, #20]
}
 8027f9e:	3714      	adds	r7, #20
 8027fa0:	46bd      	mov	sp, r7
 8027fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fa6:	4770      	bx	lr

08027fa8 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8027fa8:	b480      	push	{r7}
 8027faa:	b085      	sub	sp, #20
 8027fac:	af00      	add	r7, sp, #0
 8027fae:	6078      	str	r0, [r7, #4]
 8027fb0:	4608      	mov	r0, r1
 8027fb2:	4611      	mov	r1, r2
 8027fb4:	461a      	mov	r2, r3
 8027fb6:	4603      	mov	r3, r0
 8027fb8:	70fb      	strb	r3, [r7, #3]
 8027fba:	460b      	mov	r3, r1
 8027fbc:	70bb      	strb	r3, [r7, #2]
 8027fbe:	4613      	mov	r3, r2
 8027fc0:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8027fc2:	687b      	ldr	r3, [r7, #4]
 8027fc4:	685b      	ldr	r3, [r3, #4]
 8027fc6:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8027fc8:	68bb      	ldr	r3, [r7, #8]
 8027fca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8027fce:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8027fd0:	78fb      	ldrb	r3, [r7, #3]
 8027fd2:	049b      	lsls	r3, r3, #18
 8027fd4:	68ba      	ldr	r2, [r7, #8]
 8027fd6:	4313      	orrs	r3, r2
 8027fd8:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8027fda:	687b      	ldr	r3, [r7, #4]
 8027fdc:	68ba      	ldr	r2, [r7, #8]
 8027fde:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	695b      	ldr	r3, [r3, #20]
 8027fe4:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8027fe6:	78bb      	ldrb	r3, [r7, #2]
 8027fe8:	2b01      	cmp	r3, #1
 8027fea:	d104      	bne.n	8027ff6 <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 8027fec:	68fb      	ldr	r3, [r7, #12]
 8027fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027ff2:	60fb      	str	r3, [r7, #12]
 8027ff4:	e003      	b.n	8027ffe <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8027ff6:	68fb      	ldr	r3, [r7, #12]
 8027ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 8027ffe:	7e3b      	ldrb	r3, [r7, #24]
 8028000:	2b00      	cmp	r3, #0
 8028002:	d004      	beq.n	802800e <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8028004:	68fb      	ldr	r3, [r7, #12]
 8028006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802800a:	60fb      	str	r3, [r7, #12]
 802800c:	e003      	b.n	8028016 <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 802800e:	68fb      	ldr	r3, [r7, #12]
 8028010:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8028014:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8028016:	68fb      	ldr	r3, [r7, #12]
 8028018:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 802801c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 802801e:	787b      	ldrb	r3, [r7, #1]
 8028020:	06db      	lsls	r3, r3, #27
 8028022:	68fa      	ldr	r2, [r7, #12]
 8028024:	4313      	orrs	r3, r2
 8028026:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8028028:	687b      	ldr	r3, [r7, #4]
 802802a:	68fa      	ldr	r2, [r7, #12]
 802802c:	615a      	str	r2, [r3, #20]
}
 802802e:	3714      	adds	r7, #20
 8028030:	46bd      	mov	sp, r7
 8028032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028036:	4770      	bx	lr

08028038 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8028038:	b480      	push	{r7}
 802803a:	b085      	sub	sp, #20
 802803c:	af00      	add	r7, sp, #0
 802803e:	6078      	str	r0, [r7, #4]
 8028040:	460b      	mov	r3, r1
 8028042:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8028044:	687b      	ldr	r3, [r7, #4]
 8028046:	685b      	ldr	r3, [r3, #4]
 8028048:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 802804a:	68fb      	ldr	r3, [r7, #12]
 802804c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8028050:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8028052:	78fb      	ldrb	r3, [r7, #3]
 8028054:	039b      	lsls	r3, r3, #14
 8028056:	68fa      	ldr	r2, [r7, #12]
 8028058:	4313      	orrs	r3, r2
 802805a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 802805c:	687b      	ldr	r3, [r7, #4]
 802805e:	68fa      	ldr	r2, [r7, #12]
 8028060:	605a      	str	r2, [r3, #4]
}
 8028062:	3714      	adds	r7, #20
 8028064:	46bd      	mov	sp, r7
 8028066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802806a:	4770      	bx	lr

0802806c <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 802806c:	b480      	push	{r7}
 802806e:	b085      	sub	sp, #20
 8028070:	af00      	add	r7, sp, #0
 8028072:	6078      	str	r0, [r7, #4]
 8028074:	460b      	mov	r3, r1
 8028076:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8028078:	687b      	ldr	r3, [r7, #4]
 802807a:	685b      	ldr	r3, [r3, #4]
 802807c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 802807e:	68fb      	ldr	r3, [r7, #12]
 8028080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028084:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 8028086:	78fb      	ldrb	r3, [r7, #3]
 8028088:	021b      	lsls	r3, r3, #8
 802808a:	68fa      	ldr	r2, [r7, #12]
 802808c:	4313      	orrs	r3, r2
 802808e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	68fa      	ldr	r2, [r7, #12]
 8028094:	605a      	str	r2, [r3, #4]
}
 8028096:	3714      	adds	r7, #20
 8028098:	46bd      	mov	sp, r7
 802809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802809e:	4770      	bx	lr

080280a0 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80280a0:	b480      	push	{r7}
 80280a2:	b085      	sub	sp, #20
 80280a4:	af00      	add	r7, sp, #0
 80280a6:	6078      	str	r0, [r7, #4]
 80280a8:	460b      	mov	r3, r1
 80280aa:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80280ac:	687b      	ldr	r3, [r7, #4]
 80280ae:	685b      	ldr	r3, [r3, #4]
 80280b0:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 80280b2:	68fb      	ldr	r3, [r7, #12]
 80280b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80280b8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 80280ba:	78fb      	ldrb	r3, [r7, #3]
 80280bc:	029b      	lsls	r3, r3, #10
 80280be:	68fa      	ldr	r2, [r7, #12]
 80280c0:	4313      	orrs	r3, r2
 80280c2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80280c4:	687b      	ldr	r3, [r7, #4]
 80280c6:	68fa      	ldr	r2, [r7, #12]
 80280c8:	605a      	str	r2, [r3, #4]
}
 80280ca:	3714      	adds	r7, #20
 80280cc:	46bd      	mov	sp, r7
 80280ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280d2:	4770      	bx	lr

080280d4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 80280d4:	b480      	push	{r7}
 80280d6:	b085      	sub	sp, #20
 80280d8:	af00      	add	r7, sp, #0
 80280da:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 80280dc:	687b      	ldr	r3, [r7, #4]
 80280de:	685b      	ldr	r3, [r3, #4]
 80280e0:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 80280e2:	68fb      	ldr	r3, [r7, #12]
 80280e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80280e8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 80280ea:	68fb      	ldr	r3, [r7, #12]
 80280ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280f0:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80280f2:	687b      	ldr	r3, [r7, #4]
 80280f4:	68fa      	ldr	r2, [r7, #12]
 80280f6:	605a      	str	r2, [r3, #4]
}
 80280f8:	3714      	adds	r7, #20
 80280fa:	46bd      	mov	sp, r7
 80280fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028100:	4770      	bx	lr
 8028102:	bf00      	nop

08028104 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8028104:	b480      	push	{r7}
 8028106:	b085      	sub	sp, #20
 8028108:	af00      	add	r7, sp, #0
 802810a:	6078      	str	r0, [r7, #4]
 802810c:	460b      	mov	r3, r1
 802810e:	70fb      	strb	r3, [r7, #3]
 8028110:	4613      	mov	r3, r2
 8028112:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8028114:	687b      	ldr	r3, [r7, #4]
 8028116:	685b      	ldr	r3, [r3, #4]
 8028118:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 802811a:	68bb      	ldr	r3, [r7, #8]
 802811c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8028120:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8028122:	68bb      	ldr	r3, [r7, #8]
 8028124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028128:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	68ba      	ldr	r2, [r7, #8]
 802812e:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	695b      	ldr	r3, [r3, #20]
 8028134:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8028136:	78bb      	ldrb	r3, [r7, #2]
 8028138:	2b00      	cmp	r3, #0
 802813a:	d004      	beq.n	8028146 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 802813c:	68fb      	ldr	r3, [r7, #12]
 802813e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8028142:	60fb      	str	r3, [r7, #12]
 8028144:	e003      	b.n	802814e <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8028146:	68fb      	ldr	r3, [r7, #12]
 8028148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802814c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 802814e:	78fb      	ldrb	r3, [r7, #3]
 8028150:	2b01      	cmp	r3, #1
 8028152:	d104      	bne.n	802815e <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802815a:	60fb      	str	r3, [r7, #12]
 802815c:	e003      	b.n	8028166 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 802815e:	68fb      	ldr	r3, [r7, #12]
 8028160:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8028164:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8028166:	687b      	ldr	r3, [r7, #4]
 8028168:	68fa      	ldr	r2, [r7, #12]
 802816a:	615a      	str	r2, [r3, #20]
}
 802816c:	3714      	adds	r7, #20
 802816e:	46bd      	mov	sp, r7
 8028170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028174:	4770      	bx	lr
 8028176:	bf00      	nop

08028178 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8028178:	b480      	push	{r7}
 802817a:	b087      	sub	sp, #28
 802817c:	af00      	add	r7, sp, #0
 802817e:	60f8      	str	r0, [r7, #12]
 8028180:	60b9      	str	r1, [r7, #8]
 8028182:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8028184:	68fb      	ldr	r3, [r7, #12]
 8028186:	681b      	ldr	r3, [r3, #0]
 8028188:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 802818a:	697b      	ldr	r3, [r7, #20]
 802818c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8028190:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8028192:	68bb      	ldr	r3, [r7, #8]
 8028194:	785b      	ldrb	r3, [r3, #1]
 8028196:	049b      	lsls	r3, r3, #18
 8028198:	697a      	ldr	r2, [r7, #20]
 802819a:	4313      	orrs	r3, r2
 802819c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 802819e:	697b      	ldr	r3, [r7, #20]
 80281a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80281a4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 80281a6:	687b      	ldr	r3, [r7, #4]
 80281a8:	785b      	ldrb	r3, [r3, #1]
 80281aa:	051b      	lsls	r3, r3, #20
 80281ac:	697a      	ldr	r2, [r7, #20]
 80281ae:	4313      	orrs	r3, r2
 80281b0:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 80281b2:	697b      	ldr	r3, [r7, #20]
 80281b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80281b8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 80281ba:	68bb      	ldr	r3, [r7, #8]
 80281bc:	789b      	ldrb	r3, [r3, #2]
 80281be:	05db      	lsls	r3, r3, #23
 80281c0:	697a      	ldr	r2, [r7, #20]
 80281c2:	4313      	orrs	r3, r2
 80281c4:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 80281c6:	697b      	ldr	r3, [r7, #20]
 80281c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80281cc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	789b      	ldrb	r3, [r3, #2]
 80281d2:	061b      	lsls	r3, r3, #24
 80281d4:	697a      	ldr	r2, [r7, #20]
 80281d6:	4313      	orrs	r3, r2
 80281d8:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 80281da:	697b      	ldr	r3, [r7, #20]
 80281dc:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80281e0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 80281e2:	68bb      	ldr	r3, [r7, #8]
 80281e4:	78db      	ldrb	r3, [r3, #3]
 80281e6:	06db      	lsls	r3, r3, #27
 80281e8:	697a      	ldr	r2, [r7, #20]
 80281ea:	4313      	orrs	r3, r2
 80281ec:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 80281ee:	697b      	ldr	r3, [r7, #20]
 80281f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80281f4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 80281f6:	687b      	ldr	r3, [r7, #4]
 80281f8:	78db      	ldrb	r3, [r3, #3]
 80281fa:	075b      	lsls	r3, r3, #29
 80281fc:	697a      	ldr	r2, [r7, #20]
 80281fe:	4313      	orrs	r3, r2
 8028200:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8028202:	697b      	ldr	r3, [r7, #20]
 8028204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8028208:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 802820a:	68bb      	ldr	r3, [r7, #8]
 802820c:	781b      	ldrb	r3, [r3, #0]
 802820e:	011b      	lsls	r3, r3, #4
 8028210:	697a      	ldr	r2, [r7, #20]
 8028212:	4313      	orrs	r3, r2
 8028214:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 8028216:	697b      	ldr	r3, [r7, #20]
 8028218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802821c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 802821e:	687b      	ldr	r3, [r7, #4]
 8028220:	781b      	ldrb	r3, [r3, #0]
 8028222:	021b      	lsls	r3, r3, #8
 8028224:	697a      	ldr	r2, [r7, #20]
 8028226:	4313      	orrs	r3, r2
 8028228:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 802822a:	68fb      	ldr	r3, [r7, #12]
 802822c:	697a      	ldr	r2, [r7, #20]
 802822e:	601a      	str	r2, [r3, #0]
#endif
}
 8028230:	371c      	adds	r7, #28
 8028232:	46bd      	mov	sp, r7
 8028234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028238:	4770      	bx	lr
 802823a:	bf00      	nop

0802823c <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 802823c:	b480      	push	{r7}
 802823e:	b089      	sub	sp, #36	; 0x24
 8028240:	af00      	add	r7, sp, #0
 8028242:	60f8      	str	r0, [r7, #12]
 8028244:	460b      	mov	r3, r1
 8028246:	607a      	str	r2, [r7, #4]
 8028248:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 802824a:	7afb      	ldrb	r3, [r7, #11]
 802824c:	3b01      	subs	r3, #1
 802824e:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8028250:	68fb      	ldr	r3, [r7, #12]
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8028256:	7ffb      	ldrb	r3, [r7, #31]
 8028258:	005b      	lsls	r3, r3, #1
 802825a:	b2db      	uxtb	r3, r3
 802825c:	3310      	adds	r3, #16
 802825e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8028260:	7dfb      	ldrb	r3, [r7, #23]
 8028262:	2203      	movs	r2, #3
 8028264:	fa02 f303 	lsl.w	r3, r2, r3
 8028268:	43db      	mvns	r3, r3
 802826a:	69ba      	ldr	r2, [r7, #24]
 802826c:	4013      	ands	r3, r2
 802826e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	785b      	ldrb	r3, [r3, #1]
 8028274:	461a      	mov	r2, r3
 8028276:	7dfb      	ldrb	r3, [r7, #23]
 8028278:	fa02 f303 	lsl.w	r3, r2, r3
 802827c:	69ba      	ldr	r2, [r7, #24]
 802827e:	4313      	orrs	r3, r2
 8028280:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8028282:	7ffb      	ldrb	r3, [r7, #31]
 8028284:	3316      	adds	r3, #22
 8028286:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8028288:	7dfb      	ldrb	r3, [r7, #23]
 802828a:	2201      	movs	r2, #1
 802828c:	fa02 f303 	lsl.w	r3, r2, r3
 8028290:	43db      	mvns	r3, r3
 8028292:	69ba      	ldr	r2, [r7, #24]
 8028294:	4013      	ands	r3, r2
 8028296:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8028298:	687b      	ldr	r3, [r7, #4]
 802829a:	789b      	ldrb	r3, [r3, #2]
 802829c:	461a      	mov	r2, r3
 802829e:	7dfb      	ldrb	r3, [r7, #23]
 80282a0:	fa02 f303 	lsl.w	r3, r2, r3
 80282a4:	69ba      	ldr	r2, [r7, #24]
 80282a6:	4313      	orrs	r3, r2
 80282a8:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80282aa:	7ffb      	ldrb	r3, [r7, #31]
 80282ac:	005b      	lsls	r3, r3, #1
 80282ae:	b2db      	uxtb	r3, r3
 80282b0:	3319      	adds	r3, #25
 80282b2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80282b4:	7dfb      	ldrb	r3, [r7, #23]
 80282b6:	2203      	movs	r2, #3
 80282b8:	fa02 f303 	lsl.w	r3, r2, r3
 80282bc:	43db      	mvns	r3, r3
 80282be:	69ba      	ldr	r2, [r7, #24]
 80282c0:	4013      	ands	r3, r2
 80282c2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	78db      	ldrb	r3, [r3, #3]
 80282c8:	461a      	mov	r2, r3
 80282ca:	7dfb      	ldrb	r3, [r7, #23]
 80282cc:	fa02 f303 	lsl.w	r3, r2, r3
 80282d0:	69ba      	ldr	r2, [r7, #24]
 80282d2:	4313      	orrs	r3, r2
 80282d4:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80282d6:	7ffb      	ldrb	r3, [r7, #31]
 80282d8:	009b      	lsls	r3, r3, #2
 80282da:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80282dc:	7dfb      	ldrb	r3, [r7, #23]
 80282de:	220f      	movs	r2, #15
 80282e0:	fa02 f303 	lsl.w	r3, r2, r3
 80282e4:	43db      	mvns	r3, r3
 80282e6:	69ba      	ldr	r2, [r7, #24]
 80282e8:	4013      	ands	r3, r2
 80282ea:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80282ec:	687b      	ldr	r3, [r7, #4]
 80282ee:	781b      	ldrb	r3, [r3, #0]
 80282f0:	461a      	mov	r2, r3
 80282f2:	7dfb      	ldrb	r3, [r7, #23]
 80282f4:	fa02 f303 	lsl.w	r3, r2, r3
 80282f8:	69ba      	ldr	r2, [r7, #24]
 80282fa:	4313      	orrs	r3, r2
 80282fc:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80282fe:	68fb      	ldr	r3, [r7, #12]
 8028300:	69ba      	ldr	r2, [r7, #24]
 8028302:	601a      	str	r2, [r3, #0]
#endif
}
 8028304:	3724      	adds	r7, #36	; 0x24
 8028306:	46bd      	mov	sp, r7
 8028308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802830c:	4770      	bx	lr
 802830e:	bf00      	nop

08028310 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8028310:	b480      	push	{r7}
 8028312:	b083      	sub	sp, #12
 8028314:	af00      	add	r7, sp, #0
 8028316:	6078      	str	r0, [r7, #4]
 8028318:	460b      	mov	r3, r1
 802831a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 802831c:	887a      	ldrh	r2, [r7, #2]
 802831e:	687b      	ldr	r3, [r7, #4]
 8028320:	635a      	str	r2, [r3, #52]	; 0x34
}
 8028322:	370c      	adds	r7, #12
 8028324:	46bd      	mov	sp, r7
 8028326:	f85d 7b04 	ldr.w	r7, [sp], #4
 802832a:	4770      	bx	lr

0802832c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 802832c:	b480      	push	{r7}
 802832e:	b083      	sub	sp, #12
 8028330:	af00      	add	r7, sp, #0
 8028332:	6078      	str	r0, [r7, #4]
 8028334:	460b      	mov	r3, r1
 8028336:	70fb      	strb	r3, [r7, #3]
 8028338:	4613      	mov	r3, r2
 802833a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 802833c:	78fb      	ldrb	r3, [r7, #3]
 802833e:	2b00      	cmp	r3, #0
 8028340:	d103      	bne.n	802834a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8028342:	883a      	ldrh	r2, [r7, #0]
 8028344:	687b      	ldr	r3, [r7, #4]
 8028346:	63da      	str	r2, [r3, #60]	; 0x3c
 8028348:	e002      	b.n	8028350 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 802834a:	883a      	ldrh	r2, [r7, #0]
 802834c:	687b      	ldr	r3, [r7, #4]
 802834e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8028350:	370c      	adds	r7, #12
 8028352:	46bd      	mov	sp, r7
 8028354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028358:	4770      	bx	lr
 802835a:	bf00      	nop

0802835c <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 802835c:	b480      	push	{r7}
 802835e:	b087      	sub	sp, #28
 8028360:	af00      	add	r7, sp, #0
 8028362:	6078      	str	r0, [r7, #4]
 8028364:	460b      	mov	r3, r1
 8028366:	70fb      	strb	r3, [r7, #3]
 8028368:	4613      	mov	r3, r2
 802836a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8028372:	60fb      	str	r3, [r7, #12]

  switch(event)
 8028374:	78fb      	ldrb	r3, [r7, #3]
 8028376:	2b09      	cmp	r3, #9
 8028378:	d831      	bhi.n	80283de <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 802837a:	a201      	add	r2, pc, #4	; (adr r2, 8028380 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 802837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028380:	080283a9 	.word	0x080283a9
 8028384:	080283a9 	.word	0x080283a9
 8028388:	080283b3 	.word	0x080283b3
 802838c:	080283b3 	.word	0x080283b3
 8028390:	080283bd 	.word	0x080283bd
 8028394:	080283bd 	.word	0x080283bd
 8028398:	080283df 	.word	0x080283df
 802839c:	080283df 	.word	0x080283df
 80283a0:	080283c7 	.word	0x080283c7
 80283a4:	080283d3 	.word	0x080283d3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80283a8:	2303      	movs	r3, #3
 80283aa:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80283ac:	2300      	movs	r3, #0
 80283ae:	613b      	str	r3, [r7, #16]
      break;
 80283b0:	e01b      	b.n	80283ea <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80283b2:	230c      	movs	r3, #12
 80283b4:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80283b6:	2302      	movs	r3, #2
 80283b8:	613b      	str	r3, [r7, #16]
      break;
 80283ba:	e016      	b.n	80283ea <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 80283bc:	2330      	movs	r3, #48	; 0x30
 80283be:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 80283c0:	2304      	movs	r3, #4
 80283c2:	613b      	str	r3, [r7, #16]
      break;
 80283c4:	e011      	b.n	80283ea <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 80283c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80283ca:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 80283cc:	2308      	movs	r3, #8
 80283ce:	613b      	str	r3, [r7, #16]
      break;
 80283d0:	e00b      	b.n	80283ea <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 80283d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80283d6:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 80283d8:	230a      	movs	r3, #10
 80283da:	613b      	str	r3, [r7, #16]
      break;
 80283dc:	e005      	b.n	80283ea <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 80283de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80283e2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 80283e4:	230c      	movs	r3, #12
 80283e6:	613b      	str	r3, [r7, #16]
      break;
 80283e8:	bf00      	nop
  }
  
  srs &= ~mask;
 80283ea:	697b      	ldr	r3, [r7, #20]
 80283ec:	43db      	mvns	r3, r3
 80283ee:	68fa      	ldr	r2, [r7, #12]
 80283f0:	4013      	ands	r3, r2
 80283f2:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80283f4:	78ba      	ldrb	r2, [r7, #2]
 80283f6:	693b      	ldr	r3, [r7, #16]
 80283f8:	fa02 f303 	lsl.w	r3, r2, r3
 80283fc:	68fa      	ldr	r2, [r7, #12]
 80283fe:	4313      	orrs	r3, r2
 8028400:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8028402:	687b      	ldr	r3, [r7, #4]
 8028404:	68fa      	ldr	r2, [r7, #12]
 8028406:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 802840a:	371c      	adds	r7, #28
 802840c:	46bd      	mov	sp, r7
 802840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028412:	4770      	bx	lr

08028414 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8028414:	b480      	push	{r7}
 8028416:	b083      	sub	sp, #12
 8028418:	af00      	add	r7, sp, #0
 802841a:	6078      	str	r0, [r7, #4]
 802841c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 802841e:	683b      	ldr	r3, [r7, #0]
 8028420:	685a      	ldr	r2, [r3, #4]
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8028426:	683b      	ldr	r3, [r7, #0]
 8028428:	689a      	ldr	r2, [r3, #8]
 802842a:	687b      	ldr	r3, [r7, #4]
 802842c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 802842e:	683b      	ldr	r3, [r7, #0]
 8028430:	681a      	ldr	r2, [r3, #0]
 8028432:	687b      	ldr	r3, [r7, #4]
 8028434:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8028436:	370c      	adds	r7, #12
 8028438:	46bd      	mov	sp, r7
 802843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802843e:	4770      	bx	lr

08028440 <XMC_ECAT_Enable>:
  ECAT0->MII_PDI_ACS_STATE = 0x0;
}

/* EtherCAT module clock ungating and deassert reset API (Enables ECAT) */
void XMC_ECAT_Enable(void)
{
 8028440:	b580      	push	{r7, lr}
 8028442:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 8028444:	4806      	ldr	r0, [pc, #24]	; (8028460 <XMC_ECAT_Enable+0x20>)
 8028446:	f7ff f903 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 802844a:	4805      	ldr	r0, [pc, #20]	; (8028460 <XMC_ECAT_Enable+0x20>)
 802844c:	f7fe ff78 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>

  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == true){}
 8028450:	bf00      	nop
 8028452:	4803      	ldr	r0, [pc, #12]	; (8028460 <XMC_ECAT_Enable+0x20>)
 8028454:	f7fe ff90 	bl	8027378 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8028458:	4603      	mov	r3, r0
 802845a:	2b00      	cmp	r3, #0
 802845c:	d1f9      	bne.n	8028452 <XMC_ECAT_Enable+0x12>
}
 802845e:	bd80      	pop	{r7, pc}
 8028460:	20000400 	.word	0x20000400

08028464 <XMC_ECAT_Init>:
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
}

/* EtherCAT initialization function */
void XMC_ECAT_Init(XMC_ECAT_CONFIG_t *const config)
{
 8028464:	b580      	push	{r7, lr}
 8028466:	b082      	sub	sp, #8
 8028468:	af00      	add	r7, sp, #0
 802846a:	6078      	str	r0, [r7, #4]
  XMC_ECAT_Enable();
 802846c:	f7ff ffe8 	bl	8028440 <XMC_ECAT_Enable>

  /* The process memory is not accessible until the ESC Configuration Area is loaded successfully. */
  
  /* words 0x0-0x3 */
  ECAT0->EEP_DATA[0U] = config->dword[0U];
 8028470:	4a19      	ldr	r2, [pc, #100]	; (80284d8 <XMC_ECAT_Init+0x74>)
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	681b      	ldr	r3, [r3, #0]
 8028476:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[1U];
 802847a:	4a17      	ldr	r2, [pc, #92]	; (80284d8 <XMC_ECAT_Init+0x74>)
 802847c:	687b      	ldr	r3, [r7, #4]
 802847e:	685b      	ldr	r3, [r3, #4]
 8028480:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8028484:	4a14      	ldr	r2, [pc, #80]	; (80284d8 <XMC_ECAT_Init+0x74>)
 8028486:	4b14      	ldr	r3, [pc, #80]	; (80284d8 <XMC_ECAT_Init+0x74>)
 8028488:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 802848c:	b29b      	uxth	r3, r3
 802848e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028492:	b29b      	uxth	r3, r3
 8028494:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  /* words 0x4-0x7 */
  ECAT0->EEP_DATA[0U] = config->dword[2U];
 8028498:	4a0f      	ldr	r2, [pc, #60]	; (80284d8 <XMC_ECAT_Init+0x74>)
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	689b      	ldr	r3, [r3, #8]
 802849e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[3U];
 80284a2:	4a0d      	ldr	r2, [pc, #52]	; (80284d8 <XMC_ECAT_Init+0x74>)
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	68db      	ldr	r3, [r3, #12]
 80284a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 80284ac:	4a0a      	ldr	r2, [pc, #40]	; (80284d8 <XMC_ECAT_Init+0x74>)
 80284ae:	4b0a      	ldr	r3, [pc, #40]	; (80284d8 <XMC_ECAT_Init+0x74>)
 80284b0:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 80284b4:	b29b      	uxth	r3, r3
 80284b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80284ba:	b29b      	uxth	r3, r3
 80284bc:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  while (ECAT0->EEP_CONT_STAT & ECAT_EEP_CONT_STAT_L_STAT_Msk)
 80284c0:	bf00      	nop
 80284c2:	4b05      	ldr	r3, [pc, #20]	; (80284d8 <XMC_ECAT_Init+0x74>)
 80284c4:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 80284c8:	b29b      	uxth	r3, r3
 80284ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80284ce:	2b00      	cmp	r3, #0
 80284d0:	d1f7      	bne.n	80284c2 <XMC_ECAT_Init+0x5e>
  {
    /* Wait until the EEPROM_Loaded signal is active */
  }

}
 80284d2:	3708      	adds	r7, #8
 80284d4:	46bd      	mov	sp, r7
 80284d6:	bd80      	pop	{r7, pc}
 80284d8:	54010000 	.word	0x54010000

080284dc <XMC_ECAT_DisableEvent>:
{
  ECAT0->AL_EVENT_MASK |= event;
}
/* EtherCAT application event disable API */
void XMC_ECAT_DisableEvent(uint32_t event)
{
 80284dc:	b480      	push	{r7}
 80284de:	b083      	sub	sp, #12
 80284e0:	af00      	add	r7, sp, #0
 80284e2:	6078      	str	r0, [r7, #4]
  ECAT0->AL_EVENT_MASK &= ~event;
 80284e4:	4906      	ldr	r1, [pc, #24]	; (8028500 <XMC_ECAT_DisableEvent+0x24>)
 80284e6:	4b06      	ldr	r3, [pc, #24]	; (8028500 <XMC_ECAT_DisableEvent+0x24>)
 80284e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80284ec:	687b      	ldr	r3, [r7, #4]
 80284ee:	43db      	mvns	r3, r3
 80284f0:	4013      	ands	r3, r2
 80284f2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
}
 80284f6:	370c      	adds	r7, #12
 80284f8:	46bd      	mov	sp, r7
 80284fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284fe:	4770      	bx	lr
 8028500:	54010000 	.word	0x54010000

08028504 <XMC_ECAT_DisableSyncManChannel>:
  return (ECAT0->AL_EVENT_REQ);
}

/* EtherCAT SyncManager channel disable function*/
void XMC_ECAT_DisableSyncManChannel(const uint8_t channel)
{
 8028504:	b480      	push	{r7}
 8028506:	b083      	sub	sp, #12
 8028508:	af00      	add	r7, sp, #0
 802850a:	4603      	mov	r3, r0
 802850c:	71fb      	strb	r3, [r7, #7]
  ((ECAT0_SM_Type *)(void*)((uint8_t *)(void*)ECAT0_SM0 + (channel * 8U)))->SM_PDI_CTR |= 0x1U;
 802850e:	79fb      	ldrb	r3, [r7, #7]
 8028510:	00db      	lsls	r3, r3, #3
 8028512:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8028516:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 802851a:	79fa      	ldrb	r2, [r7, #7]
 802851c:	00d2      	lsls	r2, r2, #3
 802851e:	f102 42a8 	add.w	r2, r2, #1409286144	; 0x54000000
 8028522:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8028526:	79d2      	ldrb	r2, [r2, #7]
 8028528:	b2d2      	uxtb	r2, r2
 802852a:	f042 0201 	orr.w	r2, r2, #1
 802852e:	b2d2      	uxtb	r2, r2
 8028530:	71da      	strb	r2, [r3, #7]
}
 8028532:	370c      	adds	r7, #12
 8028534:	46bd      	mov	sp, r7
 8028536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802853a:	4770      	bx	lr

0802853c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 802853c:	b580      	push	{r7, lr}
 802853e:	b084      	sub	sp, #16
 8028540:	af00      	add	r7, sp, #0
 8028542:	60f8      	str	r0, [r7, #12]
 8028544:	460b      	mov	r3, r1
 8028546:	607a      	str	r2, [r7, #4]
 8028548:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 802854a:	68f8      	ldr	r0, [r7, #12]
 802854c:	f7fe fc4c 	bl	8026de8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8028550:	68fb      	ldr	r3, [r7, #12]
 8028552:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8028554:	7afb      	ldrb	r3, [r7, #11]
 8028556:	009b      	lsls	r3, r3, #2
 8028558:	4619      	mov	r1, r3
 802855a:	230f      	movs	r3, #15
 802855c:	408b      	lsls	r3, r1
 802855e:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8028560:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	681b      	ldr	r3, [r3, #0]
 8028566:	7af9      	ldrb	r1, [r7, #11]
 8028568:	0089      	lsls	r1, r1, #2
 802856a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 802856c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 802856e:	68fb      	ldr	r3, [r7, #12]
 8028570:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8028572:	7afa      	ldrb	r2, [r7, #11]
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	6859      	ldr	r1, [r3, #4]
 8028578:	68fb      	ldr	r3, [r7, #12]
 802857a:	3204      	adds	r2, #4
 802857c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8028580:	3710      	adds	r7, #16
 8028582:	46bd      	mov	sp, r7
 8028584:	bd80      	pop	{r7, pc}
 8028586:	bf00      	nop

08028588 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8028588:	b580      	push	{r7, lr}
 802858a:	b084      	sub	sp, #16
 802858c:	af00      	add	r7, sp, #0
 802858e:	60f8      	str	r0, [r7, #12]
 8028590:	460b      	mov	r3, r1
 8028592:	607a      	str	r2, [r7, #4]
 8028594:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8028596:	68f8      	ldr	r0, [r7, #12]
 8028598:	f7fe fc26 	bl	8026de8 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 802859c:	7afa      	ldrb	r2, [r7, #11]
 802859e:	687b      	ldr	r3, [r7, #4]
 80285a0:	6819      	ldr	r1, [r3, #0]
 80285a2:	68fb      	ldr	r3, [r7, #12]
 80285a4:	3208      	adds	r2, #8
 80285a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80285aa:	3710      	adds	r7, #16
 80285ac:	46bd      	mov	sp, r7
 80285ae:	bd80      	pop	{r7, pc}

080285b0 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 80285b0:	b480      	push	{r7}
 80285b2:	b083      	sub	sp, #12
 80285b4:	af00      	add	r7, sp, #0
 80285b6:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 80285b8:	687b      	ldr	r3, [r7, #4]
 80285ba:	681b      	ldr	r3, [r3, #0]
 80285bc:	687a      	ldr	r2, [r7, #4]
 80285be:	6852      	ldr	r2, [r2, #4]
 80285c0:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	681b      	ldr	r3, [r3, #0]
 80285c6:	687a      	ldr	r2, [r7, #4]
 80285c8:	6892      	ldr	r2, [r2, #8]
 80285ca:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 80285cc:	2300      	movs	r3, #0
}
 80285ce:	4618      	mov	r0, r3
 80285d0:	370c      	adds	r7, #12
 80285d2:	46bd      	mov	sp, r7
 80285d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285d8:	4770      	bx	lr
 80285da:	bf00      	nop

080285dc <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 80285dc:	b580      	push	{r7, lr}
 80285de:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 80285e0:	4806      	ldr	r0, [pc, #24]	; (80285fc <XMC_FCE_Enable+0x20>)
 80285e2:	f7ff f835 	bl	8027650 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 80285e6:	4805      	ldr	r0, [pc, #20]	; (80285fc <XMC_FCE_Enable+0x20>)
 80285e8:	f7fe feaa 	bl	8027340 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 80285ec:	4a04      	ldr	r2, [pc, #16]	; (8028600 <XMC_FCE_Enable+0x24>)
 80285ee:	4b04      	ldr	r3, [pc, #16]	; (8028600 <XMC_FCE_Enable+0x24>)
 80285f0:	681b      	ldr	r3, [r3, #0]
 80285f2:	f023 0301 	bic.w	r3, r3, #1
 80285f6:	6013      	str	r3, [r2, #0]
}
 80285f8:	bd80      	pop	{r7, pc}
 80285fa:	bf00      	nop
 80285fc:	20000040 	.word	0x20000040
 8028600:	50020000 	.word	0x50020000

08028604 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8028604:	b480      	push	{r7}
 8028606:	b087      	sub	sp, #28
 8028608:	af00      	add	r7, sp, #0
 802860a:	60f8      	str	r0, [r7, #12]
 802860c:	60b9      	str	r1, [r7, #8]
 802860e:	607a      	str	r2, [r7, #4]
 8028610:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8028612:	2300      	movs	r3, #0
 8028614:	75fb      	strb	r3, [r7, #23]
                                                               (engine->kernel_ptr == XMC_FCE_CRC32_1)));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));

  /* Check length is a multiple of 4 */
  if ((length == 0) || ((length & 0x3U) != 0U))
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	2b00      	cmp	r3, #0
 802861a:	d004      	beq.n	8028626 <XMC_FCE_CalculateCRC32+0x22>
 802861c:	687b      	ldr	r3, [r7, #4]
 802861e:	f003 0303 	and.w	r3, r3, #3
 8028622:	2b00      	cmp	r3, #0
 8028624:	d002      	beq.n	802862c <XMC_FCE_CalculateCRC32+0x28>
  {
    status = XMC_FCE_STATUS_ERROR;
 8028626:	2302      	movs	r3, #2
 8028628:	75fb      	strb	r3, [r7, #23]
 802862a:	e013      	b.n	8028654 <XMC_FCE_CalculateCRC32+0x50>
  }
  else
  {
    while (0UL != length)
 802862c:	e00a      	b.n	8028644 <XMC_FCE_CalculateCRC32+0x40>
    {
      engine->kernel_ptr->IR = *data;
 802862e:	68fb      	ldr	r3, [r7, #12]
 8028630:	681b      	ldr	r3, [r3, #0]
 8028632:	68ba      	ldr	r2, [r7, #8]
 8028634:	6812      	ldr	r2, [r2, #0]
 8028636:	601a      	str	r2, [r3, #0]
      data++;
 8028638:	68bb      	ldr	r3, [r7, #8]
 802863a:	3304      	adds	r3, #4
 802863c:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	3b04      	subs	r3, #4
 8028642:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	2b00      	cmp	r3, #0
 8028648:	d1f1      	bne.n	802862e <XMC_FCE_CalculateCRC32+0x2a>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 802864a:	68fb      	ldr	r3, [r7, #12]
 802864c:	681b      	ldr	r3, [r3, #0]
 802864e:	699a      	ldr	r2, [r3, #24]
 8028650:	683b      	ldr	r3, [r7, #0]
 8028652:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8028654:	7dfb      	ldrb	r3, [r7, #23]
}
 8028656:	4618      	mov	r0, r3
 8028658:	371c      	adds	r7, #28
 802865a:	46bd      	mov	sp, r7
 802865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028660:	4770      	bx	lr
 8028662:	bf00      	nop

08028664 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8028664:	b480      	push	{r7}
 8028666:	b083      	sub	sp, #12
 8028668:	af00      	add	r7, sp, #0
 802866a:	6078      	str	r0, [r7, #4]
 802866c:	460b      	mov	r3, r1
 802866e:	70fb      	strb	r3, [r7, #3]
 8028670:	4613      	mov	r3, r2
 8028672:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8028674:	78fb      	ldrb	r3, [r7, #3]
 8028676:	089b      	lsrs	r3, r3, #2
 8028678:	b2db      	uxtb	r3, r3
 802867a:	4618      	mov	r0, r3
 802867c:	78fb      	ldrb	r3, [r7, #3]
 802867e:	089b      	lsrs	r3, r3, #2
 8028680:	b2db      	uxtb	r3, r3
 8028682:	461a      	mov	r2, r3
 8028684:	687b      	ldr	r3, [r7, #4]
 8028686:	3204      	adds	r2, #4
 8028688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802868c:	78fb      	ldrb	r3, [r7, #3]
 802868e:	f003 0303 	and.w	r3, r3, #3
 8028692:	00db      	lsls	r3, r3, #3
 8028694:	4619      	mov	r1, r3
 8028696:	23f8      	movs	r3, #248	; 0xf8
 8028698:	408b      	lsls	r3, r1
 802869a:	43db      	mvns	r3, r3
 802869c:	ea02 0103 	and.w	r1, r2, r3
 80286a0:	687b      	ldr	r3, [r7, #4]
 80286a2:	1d02      	adds	r2, r0, #4
 80286a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80286a8:	78fb      	ldrb	r3, [r7, #3]
 80286aa:	089b      	lsrs	r3, r3, #2
 80286ac:	b2db      	uxtb	r3, r3
 80286ae:	4618      	mov	r0, r3
 80286b0:	78fb      	ldrb	r3, [r7, #3]
 80286b2:	089b      	lsrs	r3, r3, #2
 80286b4:	b2db      	uxtb	r3, r3
 80286b6:	461a      	mov	r2, r3
 80286b8:	687b      	ldr	r3, [r7, #4]
 80286ba:	3204      	adds	r2, #4
 80286bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80286c0:	78bb      	ldrb	r3, [r7, #2]
 80286c2:	78f9      	ldrb	r1, [r7, #3]
 80286c4:	f001 0103 	and.w	r1, r1, #3
 80286c8:	00c9      	lsls	r1, r1, #3
 80286ca:	408b      	lsls	r3, r1
 80286cc:	ea42 0103 	orr.w	r1, r2, r3
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	1d02      	adds	r2, r0, #4
 80286d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80286d8:	370c      	adds	r7, #12
 80286da:	46bd      	mov	sp, r7
 80286dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286e0:	4770      	bx	lr
 80286e2:	bf00      	nop

080286e4 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80286e4:	b480      	push	{r7}
 80286e6:	b083      	sub	sp, #12
 80286e8:	af00      	add	r7, sp, #0
 80286ea:	6078      	str	r0, [r7, #4]
 80286ec:	460b      	mov	r3, r1
 80286ee:	70fb      	strb	r3, [r7, #3]
 80286f0:	4613      	mov	r3, r2
 80286f2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80286f8:	78fb      	ldrb	r3, [r7, #3]
 80286fa:	005b      	lsls	r3, r3, #1
 80286fc:	4619      	mov	r1, r3
 80286fe:	2303      	movs	r3, #3
 8028700:	408b      	lsls	r3, r1
 8028702:	43db      	mvns	r3, r3
 8028704:	401a      	ands	r2, r3
 8028706:	687b      	ldr	r3, [r7, #4]
 8028708:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 802870a:	687b      	ldr	r3, [r7, #4]
 802870c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 802870e:	78bb      	ldrb	r3, [r7, #2]
 8028710:	78f9      	ldrb	r1, [r7, #3]
 8028712:	0049      	lsls	r1, r1, #1
 8028714:	408b      	lsls	r3, r1
 8028716:	431a      	orrs	r2, r3
 8028718:	687b      	ldr	r3, [r7, #4]
 802871a:	675a      	str	r2, [r3, #116]	; 0x74
}
 802871c:	370c      	adds	r7, #12
 802871e:	46bd      	mov	sp, r7
 8028720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028724:	4770      	bx	lr
 8028726:	bf00      	nop

08028728 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8028728:	b580      	push	{r7, lr}
 802872a:	b084      	sub	sp, #16
 802872c:	af00      	add	r7, sp, #0
 802872e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8028730:	4b14      	ldr	r3, [pc, #80]	; (8028784 <_sbrk+0x5c>)
 8028732:	681b      	ldr	r3, [r3, #0]
 8028734:	2b00      	cmp	r3, #0
 8028736:	d102      	bne.n	802873e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8028738:	4b12      	ldr	r3, [pc, #72]	; (8028784 <_sbrk+0x5c>)
 802873a:	4a13      	ldr	r2, [pc, #76]	; (8028788 <_sbrk+0x60>)
 802873c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 802873e:	4b11      	ldr	r3, [pc, #68]	; (8028784 <_sbrk+0x5c>)
 8028740:	681b      	ldr	r3, [r3, #0]
 8028742:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	3303      	adds	r3, #3
 8028748:	f023 0303 	bic.w	r3, r3, #3
 802874c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 802874e:	4b0d      	ldr	r3, [pc, #52]	; (8028784 <_sbrk+0x5c>)
 8028750:	681a      	ldr	r2, [r3, #0]
 8028752:	687b      	ldr	r3, [r7, #4]
 8028754:	4413      	add	r3, r2
 8028756:	4a0d      	ldr	r2, [pc, #52]	; (802878c <_sbrk+0x64>)
 8028758:	4293      	cmp	r3, r2
 802875a:	d207      	bcs.n	802876c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 802875c:	4b09      	ldr	r3, [pc, #36]	; (8028784 <_sbrk+0x5c>)
 802875e:	681a      	ldr	r2, [r3, #0]
 8028760:	687b      	ldr	r3, [r7, #4]
 8028762:	4413      	add	r3, r2
 8028764:	4a07      	ldr	r2, [pc, #28]	; (8028784 <_sbrk+0x5c>)
 8028766:	6013      	str	r3, [r2, #0]
    return (base);
 8028768:	68fb      	ldr	r3, [r7, #12]
 802876a:	e006      	b.n	802877a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 802876c:	f002 fa08 	bl	802ab80 <__errno>
 8028770:	4602      	mov	r2, r0
 8028772:	230c      	movs	r3, #12
 8028774:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8028776:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 802877a:	4618      	mov	r0, r3
 802877c:	3710      	adds	r7, #16
 802877e:	46bd      	mov	sp, r7
 8028780:	bd80      	pop	{r7, pc}
 8028782:	bf00      	nop
 8028784:	1ffe9584 	.word	0x1ffe9584
 8028788:	20000000 	.word	0x20000000
 802878c:	2003ffc0 	.word	0x2003ffc0

08028790 <_init>:

/* Init */
void _init(void)
{}
 8028790:	b480      	push	{r7}
 8028792:	af00      	add	r7, sp, #0
 8028794:	46bd      	mov	sp, r7
 8028796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802879a:	4770      	bx	lr

0802879c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 802879c:	b480      	push	{r7}
 802879e:	b083      	sub	sp, #12
 80287a0:	af00      	add	r7, sp, #0
 80287a2:	6078      	str	r0, [r7, #4]
 80287a4:	460b      	mov	r3, r1
 80287a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80287a8:	687b      	ldr	r3, [r7, #4]
 80287aa:	68da      	ldr	r2, [r3, #12]
 80287ac:	78fb      	ldrb	r3, [r7, #3]
 80287ae:	2101      	movs	r1, #1
 80287b0:	fa01 f303 	lsl.w	r3, r1, r3
 80287b4:	431a      	orrs	r2, r3
 80287b6:	687b      	ldr	r3, [r7, #4]
 80287b8:	60da      	str	r2, [r3, #12]
}
 80287ba:	370c      	adds	r7, #12
 80287bc:	46bd      	mov	sp, r7
 80287be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c2:	4770      	bx	lr

080287c4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80287c4:	b480      	push	{r7}
 80287c6:	b083      	sub	sp, #12
 80287c8:	af00      	add	r7, sp, #0
 80287ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	2201      	movs	r2, #1
 80287d0:	60da      	str	r2, [r3, #12]
}
 80287d2:	370c      	adds	r7, #12
 80287d4:	46bd      	mov	sp, r7
 80287d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287da:	4770      	bx	lr

080287dc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80287dc:	b480      	push	{r7}
 80287de:	b083      	sub	sp, #12
 80287e0:	af00      	add	r7, sp, #0
 80287e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	2202      	movs	r2, #2
 80287e8:	611a      	str	r2, [r3, #16]
}
 80287ea:	370c      	adds	r7, #12
 80287ec:	46bd      	mov	sp, r7
 80287ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287f2:	4770      	bx	lr

080287f4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80287f4:	b480      	push	{r7}
 80287f6:	b083      	sub	sp, #12
 80287f8:	af00      	add	r7, sp, #0
 80287fa:	6078      	str	r0, [r7, #4]
 80287fc:	460b      	mov	r3, r1
 80287fe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8028800:	887a      	ldrh	r2, [r7, #2]
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	635a      	str	r2, [r3, #52]	; 0x34
}
 8028806:	370c      	adds	r7, #12
 8028808:	46bd      	mov	sp, r7
 802880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802880e:	4770      	bx	lr

08028810 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8028810:	b480      	push	{r7}
 8028812:	b083      	sub	sp, #12
 8028814:	af00      	add	r7, sp, #0
 8028816:	6078      	str	r0, [r7, #4]
 8028818:	460b      	mov	r3, r1
 802881a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 802881c:	887a      	ldrh	r2, [r7, #2]
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8028822:	370c      	adds	r7, #12
 8028824:	46bd      	mov	sp, r7
 8028826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802882a:	4770      	bx	lr

0802882c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 802882c:	b480      	push	{r7}
 802882e:	b083      	sub	sp, #12
 8028830:	af00      	add	r7, sp, #0
 8028832:	6078      	str	r0, [r7, #4]
 8028834:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8028836:	687b      	ldr	r3, [r7, #4]
 8028838:	683a      	ldr	r2, [r7, #0]
 802883a:	611a      	str	r2, [r3, #16]
}
 802883c:	370c      	adds	r7, #12
 802883e:	46bd      	mov	sp, r7
 8028840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028844:	4770      	bx	lr
 8028846:	bf00      	nop

08028848 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8028848:	b480      	push	{r7}
 802884a:	b083      	sub	sp, #12
 802884c:	af00      	add	r7, sp, #0
 802884e:	6078      	str	r0, [r7, #4]
 8028850:	460b      	mov	r3, r1
 8028852:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8028854:	687b      	ldr	r3, [r7, #4]
 8028856:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 802885a:	78fb      	ldrb	r3, [r7, #3]
 802885c:	2101      	movs	r1, #1
 802885e:	fa01 f303 	lsl.w	r3, r1, r3
 8028862:	431a      	orrs	r2, r3
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 802886a:	370c      	adds	r7, #12
 802886c:	46bd      	mov	sp, r7
 802886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028872:	4770      	bx	lr

08028874 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8028874:	b580      	push	{r7, lr}
 8028876:	b084      	sub	sp, #16
 8028878:	af00      	add	r7, sp, #0
 802887a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 802887c:	2300      	movs	r3, #0
 802887e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8028886:	f083 0301 	eor.w	r3, r3, #1
 802888a:	b2db      	uxtb	r3, r3
 802888c:	2b00      	cmp	r3, #0
 802888e:	d009      	beq.n	80288a4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8028890:	687b      	ldr	r3, [r7, #4]
 8028892:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028896:	2b00      	cmp	r3, #0
 8028898:	d104      	bne.n	80288a4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 802889a:	6878      	ldr	r0, [r7, #4]
 802889c:	f000 f826 	bl	80288ec <TIMER_CCU4_lInit>
 80288a0:	4603      	mov	r3, r0
 80288a2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80288a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80288a6:	4618      	mov	r0, r3
 80288a8:	3710      	adds	r7, #16
 80288aa:	46bd      	mov	sp, r7
 80288ac:	bd80      	pop	{r7, pc}
 80288ae:	bf00      	nop

080288b0 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80288b0:	b580      	push	{r7, lr}
 80288b2:	b084      	sub	sp, #16
 80288b4:	af00      	add	r7, sp, #0
 80288b6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80288b8:	687b      	ldr	r3, [r7, #4]
 80288ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80288be:	2b00      	cmp	r3, #0
 80288c0:	d00c      	beq.n	80288dc <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80288c2:	687b      	ldr	r3, [r7, #4]
 80288c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d104      	bne.n	80288d6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80288cc:	687b      	ldr	r3, [r7, #4]
 80288ce:	695b      	ldr	r3, [r3, #20]
 80288d0:	4618      	mov	r0, r3
 80288d2:	f7ff ff77 	bl	80287c4 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80288d6:	2300      	movs	r3, #0
 80288d8:	73fb      	strb	r3, [r7, #15]
 80288da:	e001      	b.n	80288e0 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80288dc:	2301      	movs	r3, #1
 80288de:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80288e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80288e2:	4618      	mov	r0, r3
 80288e4:	3710      	adds	r7, #16
 80288e6:	46bd      	mov	sp, r7
 80288e8:	bd80      	pop	{r7, pc}
 80288ea:	bf00      	nop

080288ec <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80288ec:	b580      	push	{r7, lr}
 80288ee:	b084      	sub	sp, #16
 80288f0:	af00      	add	r7, sp, #0
 80288f2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80288f4:	687b      	ldr	r3, [r7, #4]
 80288f6:	691b      	ldr	r3, [r3, #16]
 80288f8:	4618      	mov	r0, r3
 80288fa:	f000 fcbf 	bl	802927c <GLOBAL_CCU4_Init>
 80288fe:	4603      	mov	r3, r0
 8028900:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	691b      	ldr	r3, [r3, #16]
 8028906:	689a      	ldr	r2, [r3, #8]
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	7e1b      	ldrb	r3, [r3, #24]
 802890c:	4610      	mov	r0, r2
 802890e:	4619      	mov	r1, r3
 8028910:	f7ff ff44 	bl	802879c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	695a      	ldr	r2, [r3, #20]
 8028918:	687b      	ldr	r3, [r7, #4]
 802891a:	69db      	ldr	r3, [r3, #28]
 802891c:	4610      	mov	r0, r2
 802891e:	4619      	mov	r1, r3
 8028920:	f7ff f94e 	bl	8027bc0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8028924:	6878      	ldr	r0, [r7, #4]
 8028926:	f000 f82d 	bl	8028984 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8028930:	2b00      	cmp	r3, #0
 8028932:	d00f      	beq.n	8028954 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8028934:	687b      	ldr	r3, [r7, #4]
 8028936:	695a      	ldr	r2, [r3, #20]
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802893e:	4610      	mov	r0, r2
 8028940:	2100      	movs	r1, #0
 8028942:	461a      	mov	r2, r3
 8028944:	f7ff f972 	bl	8027c2c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8028948:	687b      	ldr	r3, [r7, #4]
 802894a:	695b      	ldr	r3, [r3, #20]
 802894c:	4618      	mov	r0, r3
 802894e:	2100      	movs	r1, #0
 8028950:	f7ff ff7a 	bl	8028848 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8028954:	687b      	ldr	r3, [r7, #4]
 8028956:	695b      	ldr	r3, [r3, #20]
 8028958:	4618      	mov	r0, r3
 802895a:	f7ff ff3f 	bl	80287dc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 802895e:	687b      	ldr	r3, [r7, #4]
 8028960:	2201      	movs	r2, #1
 8028962:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802896c:	2b00      	cmp	r3, #0
 802896e:	d004      	beq.n	802897a <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8028970:	687b      	ldr	r3, [r7, #4]
 8028972:	695b      	ldr	r3, [r3, #20]
 8028974:	4618      	mov	r0, r3
 8028976:	f7ff ff25 	bl	80287c4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 802897a:	7bfb      	ldrb	r3, [r7, #15]
}
 802897c:	4618      	mov	r0, r3
 802897e:	3710      	adds	r7, #16
 8028980:	46bd      	mov	sp, r7
 8028982:	bd80      	pop	{r7, pc}

08028984 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8028984:	b580      	push	{r7, lr}
 8028986:	b082      	sub	sp, #8
 8028988:	af00      	add	r7, sp, #0
 802898a:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	695a      	ldr	r2, [r3, #20]
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8028994:	4610      	mov	r0, r2
 8028996:	4619      	mov	r1, r3
 8028998:	f7ff ff2c 	bl	80287f4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 802899c:	687b      	ldr	r3, [r7, #4]
 802899e:	695b      	ldr	r3, [r3, #20]
 80289a0:	4618      	mov	r0, r3
 80289a2:	2100      	movs	r1, #0
 80289a4:	f7ff ff34 	bl	8028810 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80289a8:	687b      	ldr	r3, [r7, #4]
 80289aa:	691b      	ldr	r3, [r3, #16]
 80289ac:	689a      	ldr	r2, [r3, #8]
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	68db      	ldr	r3, [r3, #12]
 80289b2:	4610      	mov	r0, r2
 80289b4:	4619      	mov	r1, r3
 80289b6:	f7ff ff39 	bl	802882c <XMC_CCU4_EnableShadowTransfer>
}
 80289ba:	3708      	adds	r7, #8
 80289bc:	46bd      	mov	sp, r7
 80289be:	bd80      	pop	{r7, pc}

080289c0 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80289c0:	b480      	push	{r7}
 80289c2:	b083      	sub	sp, #12
 80289c4:	af00      	add	r7, sp, #0
 80289c6:	6078      	str	r0, [r7, #4]
 80289c8:	460b      	mov	r3, r1
 80289ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 80289cc:	687b      	ldr	r3, [r7, #4]
 80289ce:	68da      	ldr	r2, [r3, #12]
 80289d0:	78fb      	ldrb	r3, [r7, #3]
 80289d2:	2101      	movs	r1, #1
 80289d4:	fa01 f303 	lsl.w	r3, r1, r3
 80289d8:	431a      	orrs	r2, r3
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	60da      	str	r2, [r3, #12]
}
 80289de:	370c      	adds	r7, #12
 80289e0:	46bd      	mov	sp, r7
 80289e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289e6:	4770      	bx	lr

080289e8 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 80289e8:	b480      	push	{r7}
 80289ea:	b083      	sub	sp, #12
 80289ec:	af00      	add	r7, sp, #0
 80289ee:	6078      	str	r0, [r7, #4]
 80289f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80289f2:	687b      	ldr	r3, [r7, #4]
 80289f4:	695a      	ldr	r2, [r3, #20]
 80289f6:	683b      	ldr	r3, [r7, #0]
 80289f8:	045b      	lsls	r3, r3, #17
 80289fa:	431a      	orrs	r2, r3
 80289fc:	687b      	ldr	r3, [r7, #4]
 80289fe:	615a      	str	r2, [r3, #20]
}
 8028a00:	370c      	adds	r7, #12
 8028a02:	46bd      	mov	sp, r7
 8028a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a08:	4770      	bx	lr
 8028a0a:	bf00      	nop

08028a0c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8028a0c:	b480      	push	{r7}
 8028a0e:	b083      	sub	sp, #12
 8028a10:	af00      	add	r7, sp, #0
 8028a12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	2201      	movs	r2, #1
 8028a18:	60da      	str	r2, [r3, #12]
}
 8028a1a:	370c      	adds	r7, #12
 8028a1c:	46bd      	mov	sp, r7
 8028a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a22:	4770      	bx	lr

08028a24 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8028a24:	b480      	push	{r7}
 8028a26:	b083      	sub	sp, #12
 8028a28:	af00      	add	r7, sp, #0
 8028a2a:	6078      	str	r0, [r7, #4]
 8028a2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8028a2e:	687b      	ldr	r3, [r7, #4]
 8028a30:	683a      	ldr	r2, [r7, #0]
 8028a32:	611a      	str	r2, [r3, #16]
}
 8028a34:	370c      	adds	r7, #12
 8028a36:	46bd      	mov	sp, r7
 8028a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a3c:	4770      	bx	lr
 8028a3e:	bf00      	nop

08028a40 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8028a40:	b480      	push	{r7}
 8028a42:	b083      	sub	sp, #12
 8028a44:	af00      	add	r7, sp, #0
 8028a46:	6078      	str	r0, [r7, #4]
 8028a48:	460b      	mov	r3, r1
 8028a4a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8028a4c:	687b      	ldr	r3, [r7, #4]
 8028a4e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8028a52:	78fb      	ldrb	r3, [r7, #3]
 8028a54:	2101      	movs	r1, #1
 8028a56:	fa01 f303 	lsl.w	r3, r1, r3
 8028a5a:	431a      	orrs	r2, r3
 8028a5c:	687b      	ldr	r3, [r7, #4]
 8028a5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8028a62:	370c      	adds	r7, #12
 8028a64:	46bd      	mov	sp, r7
 8028a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a6a:	4770      	bx	lr

08028a6c <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
 8028a6c:	b480      	push	{r7}
 8028a6e:	b083      	sub	sp, #12
 8028a70:	af00      	add	r7, sp, #0
 8028a72:	6078      	str	r0, [r7, #4]
 8028a74:	460b      	mov	r3, r1
 8028a76:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
 8028a78:	687b      	ldr	r3, [r7, #4]
 8028a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8028a7e:	f023 0206 	bic.w	r2, r3, #6
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 8028a82:	78fb      	ldrb	r3, [r7, #3]
 8028a84:	005b      	lsls	r3, r3, #1
 8028a86:	f003 0306 	and.w	r3, r3, #6
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
 8028a8a:	431a      	orrs	r2, r3
 8028a8c:	687b      	ldr	r3, [r7, #4]
 8028a8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
 8028a92:	370c      	adds	r7, #12
 8028a94:	46bd      	mov	sp, r7
 8028a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a9a:	4770      	bx	lr

08028a9c <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 8028a9c:	b580      	push	{r7, lr}
 8028a9e:	b086      	sub	sp, #24
 8028aa0:	af00      	add	r7, sp, #0
 8028aa2:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 8028aa4:	2301      	movs	r3, #1
 8028aa6:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 8028aa8:	2301      	movs	r3, #1
 8028aaa:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	7f1b      	ldrb	r3, [r3, #28]
 8028ab0:	2b00      	cmp	r3, #0
 8028ab2:	f040 80a4 	bne.w	8028bfe <PWM_CCU8_Init+0x162>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 8028ab6:	687b      	ldr	r3, [r7, #4]
 8028ab8:	681b      	ldr	r3, [r3, #0]
 8028aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028abe:	4618      	mov	r0, r3
 8028ac0:	f000 fbac 	bl	802921c <GLOBAL_CCU8_Init>
 8028ac4:	4603      	mov	r3, r0
 8028ac6:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 8028ac8:	7dbb      	ldrb	r3, [r7, #22]
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	f040 8093 	bne.w	8028bf6 <PWM_CCU8_Init+0x15a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 8028ad0:	687b      	ldr	r3, [r7, #4]
 8028ad2:	689a      	ldr	r2, [r3, #8]
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	681b      	ldr	r3, [r3, #0]
 8028ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028ada:	4610      	mov	r0, r2
 8028adc:	4619      	mov	r1, r3
 8028ade:	f7ff f97f 	bl	8027de0 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 8028ae2:	687b      	ldr	r3, [r7, #4]
 8028ae4:	689a      	ldr	r2, [r3, #8]
 8028ae6:	687b      	ldr	r3, [r7, #4]
 8028ae8:	681b      	ldr	r3, [r3, #0]
 8028aea:	885b      	ldrh	r3, [r3, #2]
 8028aec:	4610      	mov	r0, r2
 8028aee:	4619      	mov	r1, r3
 8028af0:	f7ff fc0e 	bl	8028310 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8028af4:	687b      	ldr	r3, [r7, #4]
 8028af6:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 8028af8:	687b      	ldr	r3, [r7, #4]
 8028afa:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8028afc:	889b      	ldrh	r3, [r3, #4]
 8028afe:	4610      	mov	r0, r2
 8028b00:	2100      	movs	r1, #0
 8028b02:	461a      	mov	r2, r3
 8028b04:	f7ff fc12 	bl	802832c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8028b08:	687b      	ldr	r3, [r7, #4]
 8028b0a:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8028b10:	88db      	ldrh	r3, [r3, #6]
 8028b12:	4610      	mov	r0, r2
 8028b14:	2101      	movs	r1, #1
 8028b16:	461a      	mov	r2, r3
 8028b18:	f7ff fc08 	bl	802832c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	681b      	ldr	r3, [r3, #0]
 8028b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028b22:	78db      	ldrb	r3, [r3, #3]
 8028b24:	f003 0302 	and.w	r3, r3, #2
 8028b28:	b2db      	uxtb	r3, r3
 8028b2a:	2b00      	cmp	r3, #0
 8028b2c:	d108      	bne.n	8028b40 <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 8028b2e:	687b      	ldr	r3, [r7, #4]
 8028b30:	681b      	ldr	r3, [r3, #0]
 8028b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028b34:	78db      	ldrb	r3, [r3, #3]
 8028b36:	f003 0304 	and.w	r3, r3, #4
 8028b3a:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	d008      	beq.n	8028b52 <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8028b40:	687b      	ldr	r3, [r7, #4]
 8028b42:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8028b44:	687b      	ldr	r3, [r7, #4]
 8028b46:	681b      	ldr	r3, [r3, #0]
 8028b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8028b4a:	4610      	mov	r0, r2
 8028b4c:	4619      	mov	r1, r3
 8028b4e:	f7ff f981 	bl	8027e54 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
 8028b52:	687b      	ldr	r3, [r7, #4]
 8028b54:	689a      	ldr	r2, [r3, #8]
 8028b56:	687b      	ldr	r3, [r7, #4]
 8028b58:	681b      	ldr	r3, [r3, #0]
 8028b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028b5e:	4610      	mov	r0, r2
 8028b60:	4619      	mov	r1, r3
 8028b62:	f7ff ff83 	bl	8028a6c <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8028b66:	687b      	ldr	r3, [r7, #4]
 8028b68:	685a      	ldr	r2, [r3, #4]
 8028b6a:	687b      	ldr	r3, [r7, #4]
 8028b6c:	691b      	ldr	r3, [r3, #16]
 8028b6e:	4610      	mov	r0, r2
 8028b70:	4619      	mov	r1, r3
 8028b72:	f7ff ff57 	bl	8028a24 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8028b76:	687b      	ldr	r3, [r7, #4]
 8028b78:	685a      	ldr	r2, [r3, #4]
 8028b7a:	687b      	ldr	r3, [r7, #4]
 8028b7c:	695b      	ldr	r3, [r3, #20]
 8028b7e:	4610      	mov	r0, r2
 8028b80:	4619      	mov	r1, r3
 8028b82:	f7ff ff4f 	bl	8028a24 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 8028b86:	687b      	ldr	r3, [r7, #4]
 8028b88:	689a      	ldr	r2, [r3, #8]
 8028b8a:	687b      	ldr	r3, [r7, #4]
 8028b8c:	681b      	ldr	r3, [r3, #0]
 8028b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b90:	4610      	mov	r0, r2
 8028b92:	4619      	mov	r1, r3
 8028b94:	f7ff fc3e 	bl	8028414 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 8028b98:	6878      	ldr	r0, [r7, #4]
 8028b9a:	f000 f959 	bl	8028e50 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 8028b9e:	6878      	ldr	r0, [r7, #4]
 8028ba0:	f000 f834 	bl	8028c0c <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 8028ba4:	6878      	ldr	r0, [r7, #4]
 8028ba6:	f000 f8f5 	bl	8028d94 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 8028baa:	687b      	ldr	r3, [r7, #4]
 8028bac:	681b      	ldr	r3, [r3, #0]
 8028bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028bb2:	681b      	ldr	r3, [r3, #0]
 8028bb4:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 8028bb6:	687b      	ldr	r3, [r7, #4]
 8028bb8:	681b      	ldr	r3, [r3, #0]
 8028bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028bbc:	7b1b      	ldrb	r3, [r3, #12]
 8028bbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8028bc2:	b2db      	uxtb	r3, r3
 8028bc4:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8028bc6:	68fb      	ldr	r3, [r7, #12]
 8028bc8:	693a      	ldr	r2, [r7, #16]
 8028bca:	fa22 f303 	lsr.w	r3, r2, r3
 8028bce:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8028bd0:	687b      	ldr	r3, [r7, #4]
 8028bd2:	693a      	ldr	r2, [r7, #16]
 8028bd4:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 8028bd6:	687b      	ldr	r3, [r7, #4]
 8028bd8:	2201      	movs	r2, #1
 8028bda:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 8028bdc:	2300      	movs	r3, #0
 8028bde:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8028be0:	687b      	ldr	r3, [r7, #4]
 8028be2:	681b      	ldr	r3, [r3, #0]
 8028be4:	781b      	ldrb	r3, [r3, #0]
 8028be6:	2b00      	cmp	r3, #0
 8028be8:	d00b      	beq.n	8028c02 <PWM_CCU8_Init+0x166>
      {
        status = PWM_CCU8_Start(handle_ptr);
 8028bea:	6878      	ldr	r0, [r7, #4]
 8028bec:	f000 fa20 	bl	8029030 <PWM_CCU8_Start>
 8028bf0:	4603      	mov	r3, r0
 8028bf2:	75fb      	strb	r3, [r7, #23]
 8028bf4:	e005      	b.n	8028c02 <PWM_CCU8_Init+0x166>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	2200      	movs	r2, #0
 8028bfa:	771a      	strb	r2, [r3, #28]
 8028bfc:	e001      	b.n	8028c02 <PWM_CCU8_Init+0x166>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 8028bfe:	2302      	movs	r3, #2
 8028c00:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8028c02:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 8028c04:	4618      	mov	r0, r3
 8028c06:	3718      	adds	r7, #24
 8028c08:	46bd      	mov	sp, r7
 8028c0a:	bd80      	pop	{r7, pc}

08028c0c <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 8028c0c:	b580      	push	{r7, lr}
 8028c0e:	b082      	sub	sp, #8
 8028c10:	af00      	add	r7, sp, #0
 8028c12:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8028c14:	687b      	ldr	r3, [r7, #4]
 8028c16:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 8028c18:	687b      	ldr	r3, [r7, #4]
 8028c1a:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8028c1c:	7c5b      	ldrb	r3, [r3, #17]
 8028c1e:	4610      	mov	r0, r2
 8028c20:	2100      	movs	r1, #0
 8028c22:	461a      	mov	r2, r3
 8028c24:	f7ff fb9a 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8028c28:	687b      	ldr	r3, [r7, #4]
 8028c2a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 8028c2c:	687b      	ldr	r3, [r7, #4]
 8028c2e:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8028c30:	7c9b      	ldrb	r3, [r3, #18]
 8028c32:	4610      	mov	r0, r2
 8028c34:	2102      	movs	r1, #2
 8028c36:	461a      	mov	r2, r3
 8028c38:	f7ff fb90 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8028c3c:	687b      	ldr	r3, [r7, #4]
 8028c3e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 8028c40:	687b      	ldr	r3, [r7, #4]
 8028c42:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8028c44:	7cdb      	ldrb	r3, [r3, #19]
 8028c46:	4610      	mov	r0, r2
 8028c48:	2103      	movs	r1, #3
 8028c4a:	461a      	mov	r2, r3
 8028c4c:	f7ff fb86 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8028c50:	687b      	ldr	r3, [r7, #4]
 8028c52:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 8028c54:	687b      	ldr	r3, [r7, #4]
 8028c56:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8028c58:	7d1b      	ldrb	r3, [r3, #20]
 8028c5a:	4610      	mov	r0, r2
 8028c5c:	2104      	movs	r1, #4
 8028c5e:	461a      	mov	r2, r3
 8028c60:	f7ff fb7c 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8028c64:	687b      	ldr	r3, [r7, #4]
 8028c66:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 8028c68:	687b      	ldr	r3, [r7, #4]
 8028c6a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8028c6c:	7d5b      	ldrb	r3, [r3, #21]
 8028c6e:	4610      	mov	r0, r2
 8028c70:	2105      	movs	r1, #5
 8028c72:	461a      	mov	r2, r3
 8028c74:	f7ff fb72 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8028c78:	687b      	ldr	r3, [r7, #4]
 8028c7a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 8028c7c:	687b      	ldr	r3, [r7, #4]
 8028c7e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8028c80:	7d9b      	ldrb	r3, [r3, #22]
 8028c82:	4610      	mov	r0, r2
 8028c84:	2101      	movs	r1, #1
 8028c86:	461a      	mov	r2, r3
 8028c88:	f7ff fb68 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8028c8c:	687b      	ldr	r3, [r7, #4]
 8028c8e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 8028c90:	687b      	ldr	r3, [r7, #4]
 8028c92:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8028c94:	7ddb      	ldrb	r3, [r3, #23]
 8028c96:	4610      	mov	r0, r2
 8028c98:	2108      	movs	r1, #8
 8028c9a:	461a      	mov	r2, r3
 8028c9c:	f7ff fb5e 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8028ca0:	687b      	ldr	r3, [r7, #4]
 8028ca2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8028ca8:	7e1b      	ldrb	r3, [r3, #24]
 8028caa:	4610      	mov	r0, r2
 8028cac:	2109      	movs	r1, #9
 8028cae:	461a      	mov	r2, r3
 8028cb0:	f7ff fb54 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 8028cb8:	687b      	ldr	r3, [r7, #4]
 8028cba:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8028cbc:	7e5b      	ldrb	r3, [r3, #25]
 8028cbe:	4610      	mov	r0, r2
 8028cc0:	210a      	movs	r1, #10
 8028cc2:	461a      	mov	r2, r3
 8028cc4:	f7ff fb4a 	bl	802835c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8028cc8:	687b      	ldr	r3, [r7, #4]
 8028cca:	681b      	ldr	r3, [r3, #0]
 8028ccc:	7a1b      	ldrb	r3, [r3, #8]
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	d005      	beq.n	8028cde <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8028cd2:	687b      	ldr	r3, [r7, #4]
 8028cd4:	689b      	ldr	r3, [r3, #8]
 8028cd6:	4618      	mov	r0, r3
 8028cd8:	2100      	movs	r1, #0
 8028cda:	f7ff feb1 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 8028cde:	687b      	ldr	r3, [r7, #4]
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	7a5b      	ldrb	r3, [r3, #9]
 8028ce4:	2b00      	cmp	r3, #0
 8028ce6:	d005      	beq.n	8028cf4 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8028ce8:	687b      	ldr	r3, [r7, #4]
 8028cea:	689b      	ldr	r3, [r3, #8]
 8028cec:	4618      	mov	r0, r3
 8028cee:	2102      	movs	r1, #2
 8028cf0:	f7ff fea6 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 8028cf4:	687b      	ldr	r3, [r7, #4]
 8028cf6:	681b      	ldr	r3, [r3, #0]
 8028cf8:	7a9b      	ldrb	r3, [r3, #10]
 8028cfa:	2b00      	cmp	r3, #0
 8028cfc:	d005      	beq.n	8028d0a <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 8028cfe:	687b      	ldr	r3, [r7, #4]
 8028d00:	689b      	ldr	r3, [r3, #8]
 8028d02:	4618      	mov	r0, r3
 8028d04:	2103      	movs	r1, #3
 8028d06:	f7ff fe9b 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 8028d0a:	687b      	ldr	r3, [r7, #4]
 8028d0c:	681b      	ldr	r3, [r3, #0]
 8028d0e:	7adb      	ldrb	r3, [r3, #11]
 8028d10:	2b00      	cmp	r3, #0
 8028d12:	d005      	beq.n	8028d20 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8028d14:	687b      	ldr	r3, [r7, #4]
 8028d16:	689b      	ldr	r3, [r3, #8]
 8028d18:	4618      	mov	r0, r3
 8028d1a:	2104      	movs	r1, #4
 8028d1c:	f7ff fe90 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 8028d20:	687b      	ldr	r3, [r7, #4]
 8028d22:	681b      	ldr	r3, [r3, #0]
 8028d24:	7b1b      	ldrb	r3, [r3, #12]
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	d005      	beq.n	8028d36 <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 8028d2a:	687b      	ldr	r3, [r7, #4]
 8028d2c:	689b      	ldr	r3, [r3, #8]
 8028d2e:	4618      	mov	r0, r3
 8028d30:	2105      	movs	r1, #5
 8028d32:	f7ff fe85 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 8028d36:	687b      	ldr	r3, [r7, #4]
 8028d38:	681b      	ldr	r3, [r3, #0]
 8028d3a:	7b5b      	ldrb	r3, [r3, #13]
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d005      	beq.n	8028d4c <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	689b      	ldr	r3, [r3, #8]
 8028d44:	4618      	mov	r0, r3
 8028d46:	2101      	movs	r1, #1
 8028d48:	f7ff fe7a 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8028d4c:	687b      	ldr	r3, [r7, #4]
 8028d4e:	681b      	ldr	r3, [r3, #0]
 8028d50:	7b9b      	ldrb	r3, [r3, #14]
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	d005      	beq.n	8028d62 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 8028d56:	687b      	ldr	r3, [r7, #4]
 8028d58:	689b      	ldr	r3, [r3, #8]
 8028d5a:	4618      	mov	r0, r3
 8028d5c:	2108      	movs	r1, #8
 8028d5e:	f7ff fe6f 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	681b      	ldr	r3, [r3, #0]
 8028d66:	7bdb      	ldrb	r3, [r3, #15]
 8028d68:	2b00      	cmp	r3, #0
 8028d6a:	d005      	beq.n	8028d78 <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 8028d6c:	687b      	ldr	r3, [r7, #4]
 8028d6e:	689b      	ldr	r3, [r3, #8]
 8028d70:	4618      	mov	r0, r3
 8028d72:	2109      	movs	r1, #9
 8028d74:	f7ff fe64 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8028d78:	687b      	ldr	r3, [r7, #4]
 8028d7a:	681b      	ldr	r3, [r3, #0]
 8028d7c:	7c1b      	ldrb	r3, [r3, #16]
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	d005      	beq.n	8028d8e <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8028d82:	687b      	ldr	r3, [r7, #4]
 8028d84:	689b      	ldr	r3, [r3, #8]
 8028d86:	4618      	mov	r0, r3
 8028d88:	210a      	movs	r1, #10
 8028d8a:	f7ff fe59 	bl	8028a40 <XMC_CCU8_SLICE_EnableEvent>
  }
}
 8028d8e:	3708      	adds	r7, #8
 8028d90:	46bd      	mov	sp, r7
 8028d92:	bd80      	pop	{r7, pc}

08028d94 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 8028d94:	b580      	push	{r7, lr}
 8028d96:	b082      	sub	sp, #8
 8028d98:	af00      	add	r7, sp, #0
 8028d9a:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 8028d9c:	687b      	ldr	r3, [r7, #4]
 8028d9e:	681b      	ldr	r3, [r3, #0]
 8028da0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d00e      	beq.n	8028dc6 <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8028da8:	687b      	ldr	r3, [r7, #4]
 8028daa:	681b      	ldr	r3, [r3, #0]
 8028dac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8028dae:	687b      	ldr	r3, [r7, #4]
 8028db0:	681b      	ldr	r3, [r3, #0]
 8028db2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8028dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028dbc:	4608      	mov	r0, r1
 8028dbe:	4611      	mov	r1, r2
 8028dc0:	461a      	mov	r2, r3
 8028dc2:	f7fe f951 	bl	8027068 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 8028dc6:	687b      	ldr	r3, [r7, #4]
 8028dc8:	681b      	ldr	r3, [r3, #0]
 8028dca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8028dce:	2b00      	cmp	r3, #0
 8028dd0:	d00e      	beq.n	8028df0 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8028dd2:	687b      	ldr	r3, [r7, #4]
 8028dd4:	681b      	ldr	r3, [r3, #0]
 8028dd6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8028dd8:	687b      	ldr	r3, [r7, #4]
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 8028de0:	687b      	ldr	r3, [r7, #4]
 8028de2:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8028de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028de6:	4608      	mov	r0, r1
 8028de8:	4611      	mov	r1, r2
 8028dea:	461a      	mov	r2, r3
 8028dec:	f7fe f93c 	bl	8027068 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 8028df0:	687b      	ldr	r3, [r7, #4]
 8028df2:	681b      	ldr	r3, [r3, #0]
 8028df4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8028df8:	2b00      	cmp	r3, #0
 8028dfa:	d00e      	beq.n	8028e1a <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8028e02:	687b      	ldr	r3, [r7, #4]
 8028e04:	681b      	ldr	r3, [r3, #0]
 8028e06:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 8028e0a:	687b      	ldr	r3, [r7, #4]
 8028e0c:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8028e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8028e10:	4608      	mov	r0, r1
 8028e12:	4611      	mov	r1, r2
 8028e14:	461a      	mov	r2, r3
 8028e16:	f7fe f927 	bl	8027068 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 8028e1a:	687b      	ldr	r3, [r7, #4]
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8028e22:	2b00      	cmp	r3, #0
 8028e24:	d010      	beq.n	8028e48 <PWM_CCU8_lInit_GPIO+0xb4>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	681b      	ldr	r3, [r3, #0]
 8028e2a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8028e2e:	687b      	ldr	r3, [r7, #4]
 8028e30:	681b      	ldr	r3, [r3, #0]
 8028e32:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 8028e36:	687b      	ldr	r3, [r7, #4]
 8028e38:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8028e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028e3e:	4608      	mov	r0, r1
 8028e40:	4611      	mov	r1, r2
 8028e42:	461a      	mov	r2, r3
 8028e44:	f7fe f910 	bl	8027068 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 8028e48:	3708      	adds	r7, #8
 8028e4a:	46bd      	mov	sp, r7
 8028e4c:	bd80      	pop	{r7, pc}
 8028e4e:	bf00      	nop

08028e50 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 8028e50:	b580      	push	{r7, lr}
 8028e52:	b084      	sub	sp, #16
 8028e54:	af02      	add	r7, sp, #8
 8028e56:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8028e58:	687b      	ldr	r3, [r7, #4]
 8028e5a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8028e60:	69db      	ldr	r3, [r3, #28]
 8028e62:	4610      	mov	r0, r2
 8028e64:	2101      	movs	r1, #1
 8028e66:	461a      	mov	r2, r3
 8028e68:	f7ff f9e8 	bl	802823c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8028e6c:	687b      	ldr	r3, [r7, #4]
 8028e6e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8028e70:	687b      	ldr	r3, [r7, #4]
 8028e72:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8028e74:	6a1b      	ldr	r3, [r3, #32]
 8028e76:	4610      	mov	r0, r2
 8028e78:	2102      	movs	r1, #2
 8028e7a:	461a      	mov	r2, r3
 8028e7c:	f7ff f9de 	bl	802823c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8028e80:	687b      	ldr	r3, [r7, #4]
 8028e82:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8028e84:	687b      	ldr	r3, [r7, #4]
 8028e86:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8028e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028e8a:	4610      	mov	r0, r2
 8028e8c:	2103      	movs	r1, #3
 8028e8e:	461a      	mov	r2, r3
 8028e90:	f7ff f9d4 	bl	802823c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	681b      	ldr	r3, [r3, #0]
 8028e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8028e9c:	2b00      	cmp	r3, #0
 8028e9e:	d00e      	beq.n	8028ebe <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	6899      	ldr	r1, [r3, #8]
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	681b      	ldr	r3, [r3, #0]
 8028ea8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8028eb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8028eb4:	4608      	mov	r0, r1
 8028eb6:	4611      	mov	r1, r2
 8028eb8:	461a      	mov	r2, r3
 8028eba:	f7fe ffe7 	bl	8027e8c <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8028ebe:	687b      	ldr	r3, [r7, #4]
 8028ec0:	681b      	ldr	r3, [r3, #0]
 8028ec2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d00e      	beq.n	8028ee8 <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	6899      	ldr	r1, [r3, #8]
 8028ece:	687b      	ldr	r3, [r7, #4]
 8028ed0:	681b      	ldr	r3, [r3, #0]
 8028ed2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 8028ed6:	687b      	ldr	r3, [r7, #4]
 8028ed8:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8028eda:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8028ede:	4608      	mov	r0, r1
 8028ee0:	4611      	mov	r1, r2
 8028ee2:	461a      	mov	r2, r3
 8028ee4:	f7ff f800 	bl	8027ee8 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	681b      	ldr	r3, [r3, #0]
 8028eec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028ef0:	2b00      	cmp	r3, #0
 8028ef2:	d009      	beq.n	8028f08 <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	689a      	ldr	r2, [r3, #8]
 8028ef8:	687b      	ldr	r3, [r7, #4]
 8028efa:	681b      	ldr	r3, [r3, #0]
 8028efc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028f00:	4610      	mov	r0, r2
 8028f02:	4619      	mov	r1, r3
 8028f04:	f7ff f8cc 	bl	80280a0 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8028f08:	687b      	ldr	r3, [r7, #4]
 8028f0a:	681b      	ldr	r3, [r3, #0]
 8028f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8028f10:	2b00      	cmp	r3, #0
 8028f12:	d009      	beq.n	8028f28 <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	689a      	ldr	r2, [r3, #8]
 8028f18:	687b      	ldr	r3, [r7, #4]
 8028f1a:	681b      	ldr	r3, [r3, #0]
 8028f1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8028f20:	4610      	mov	r0, r2
 8028f22:	4619      	mov	r1, r3
 8028f24:	f7ff f8a2 	bl	802806c <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	681b      	ldr	r3, [r3, #0]
 8028f2c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	d009      	beq.n	8028f48 <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8028f34:	687b      	ldr	r3, [r7, #4]
 8028f36:	689a      	ldr	r2, [r3, #8]
 8028f38:	687b      	ldr	r3, [r7, #4]
 8028f3a:	681b      	ldr	r3, [r3, #0]
 8028f3c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8028f40:	4610      	mov	r0, r2
 8028f42:	4619      	mov	r1, r3
 8028f44:	f7ff f878 	bl	8028038 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8028f48:	687b      	ldr	r3, [r7, #4]
 8028f4a:	681b      	ldr	r3, [r3, #0]
 8028f4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	d013      	beq.n	8028f7c <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	689a      	ldr	r2, [r3, #8]
 8028f58:	687b      	ldr	r3, [r7, #4]
 8028f5a:	681b      	ldr	r3, [r3, #0]
 8028f5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8028f60:	4610      	mov	r0, r2
 8028f62:	4619      	mov	r1, r3
 8028f64:	f7fe ffec 	bl	8027f40 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 8028f68:	687b      	ldr	r3, [r7, #4]
 8028f6a:	689a      	ldr	r2, [r3, #8]
 8028f6c:	687b      	ldr	r3, [r7, #4]
 8028f6e:	681b      	ldr	r3, [r3, #0]
 8028f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8028f74:	4610      	mov	r0, r2
 8028f76:	4619      	mov	r1, r3
 8028f78:	f7fe fffc 	bl	8027f74 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8028f7c:	687b      	ldr	r3, [r7, #4]
 8028f7e:	681b      	ldr	r3, [r3, #0]
 8028f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	d011      	beq.n	8028fac <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8028f88:	687b      	ldr	r3, [r7, #4]
 8028f8a:	6898      	ldr	r0, [r3, #8]
 8028f8c:	687b      	ldr	r3, [r7, #4]
 8028f8e:	681b      	ldr	r3, [r3, #0]
 8028f90:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8028f98:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8028fa0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8028fa4:	9300      	str	r3, [sp, #0]
 8028fa6:	2303      	movs	r3, #3
 8028fa8:	f7fe fffe 	bl	8027fa8 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8028fac:	687b      	ldr	r3, [r7, #4]
 8028fae:	681b      	ldr	r3, [r3, #0]
 8028fb0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8028fb4:	2b03      	cmp	r3, #3
 8028fb6:	d11a      	bne.n	8028fee <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	6899      	ldr	r1, [r3, #8]
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 8028fc4:	687b      	ldr	r3, [r7, #4]
 8028fc6:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8028fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028fcc:	4608      	mov	r0, r1
 8028fce:	4611      	mov	r1, r2
 8028fd0:	461a      	mov	r2, r3
 8028fd2:	f7ff f897 	bl	8028104 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8028fd6:	687b      	ldr	r3, [r7, #4]
 8028fd8:	681b      	ldr	r3, [r3, #0]
 8028fda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8028fde:	2b00      	cmp	r3, #0
 8028fe0:	d005      	beq.n	8028fee <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 8028fe2:	687b      	ldr	r3, [r7, #4]
 8028fe4:	689b      	ldr	r3, [r3, #8]
 8028fe6:	4618      	mov	r0, r3
 8028fe8:	210f      	movs	r1, #15
 8028fea:	f7ff fcfd 	bl	80289e8 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8028fee:	687b      	ldr	r3, [r7, #4]
 8028ff0:	681b      	ldr	r3, [r3, #0]
 8028ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028ff6:	2b00      	cmp	r3, #0
 8028ff8:	d105      	bne.n	8029006 <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 8028ffa:	687b      	ldr	r3, [r7, #4]
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8029002:	2b00      	cmp	r3, #0
 8029004:	d011      	beq.n	802902a <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8029006:	687b      	ldr	r3, [r7, #4]
 8029008:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 802900a:	687b      	ldr	r3, [r7, #4]
 802900c:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 802900e:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8029010:	687b      	ldr	r3, [r7, #4]
 8029012:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8029014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029016:	4608      	mov	r0, r1
 8029018:	4611      	mov	r1, r2
 802901a:	461a      	mov	r2, r3
 802901c:	f7ff f8ac 	bl	8028178 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	689b      	ldr	r3, [r3, #8]
 8029024:	4618      	mov	r0, r3
 8029026:	f7ff f855 	bl	80280d4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 802902a:	3708      	adds	r7, #8
 802902c:	46bd      	mov	sp, r7
 802902e:	bd80      	pop	{r7, pc}

08029030 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 8029030:	b580      	push	{r7, lr}
 8029032:	b084      	sub	sp, #16
 8029034:	af00      	add	r7, sp, #0
 8029036:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8029038:	2301      	movs	r3, #1
 802903a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	7f1b      	ldrb	r3, [r3, #28]
 8029040:	2b01      	cmp	r3, #1
 8029042:	d003      	beq.n	802904c <PWM_CCU8_Start+0x1c>
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	7f1b      	ldrb	r3, [r3, #28]
 8029048:	2b03      	cmp	r3, #3
 802904a:	d117      	bne.n	802907c <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 802904c:	687b      	ldr	r3, [r7, #4]
 802904e:	685a      	ldr	r2, [r3, #4]
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	7b5b      	ldrb	r3, [r3, #13]
 8029054:	4610      	mov	r0, r2
 8029056:	4619      	mov	r1, r3
 8029058:	f7ff fcb2 	bl	80289c0 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 802905c:	687b      	ldr	r3, [r7, #4]
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029064:	2b00      	cmp	r3, #0
 8029066:	d104      	bne.n	8029072 <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8029068:	687b      	ldr	r3, [r7, #4]
 802906a:	689b      	ldr	r3, [r3, #8]
 802906c:	4618      	mov	r0, r3
 802906e:	f7ff fccd 	bl	8028a0c <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8029072:	687b      	ldr	r3, [r7, #4]
 8029074:	2202      	movs	r2, #2
 8029076:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8029078:	2300      	movs	r3, #0
 802907a:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 802907c:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 802907e:	4618      	mov	r0, r3
 8029080:	3710      	adds	r7, #16
 8029082:	46bd      	mov	sp, r7
 8029084:	bd80      	pop	{r7, pc}
 8029086:	bf00      	nop

08029088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8029088:	b480      	push	{r7}
 802908a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802908c:	4b04      	ldr	r3, [pc, #16]	; (80290a0 <__NVIC_GetPriorityGrouping+0x18>)
 802908e:	68db      	ldr	r3, [r3, #12]
 8029090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029094:	0a1b      	lsrs	r3, r3, #8
}
 8029096:	4618      	mov	r0, r3
 8029098:	46bd      	mov	sp, r7
 802909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802909e:	4770      	bx	lr
 80290a0:	e000ed00 	.word	0xe000ed00

080290a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80290a4:	b480      	push	{r7}
 80290a6:	b083      	sub	sp, #12
 80290a8:	af00      	add	r7, sp, #0
 80290aa:	4603      	mov	r3, r0
 80290ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80290ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	db0b      	blt.n	80290ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80290b6:	4908      	ldr	r1, [pc, #32]	; (80290d8 <__NVIC_EnableIRQ+0x34>)
 80290b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80290bc:	095b      	lsrs	r3, r3, #5
 80290be:	79fa      	ldrb	r2, [r7, #7]
 80290c0:	f002 021f 	and.w	r2, r2, #31
 80290c4:	2001      	movs	r0, #1
 80290c6:	fa00 f202 	lsl.w	r2, r0, r2
 80290ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80290ce:	370c      	adds	r7, #12
 80290d0:	46bd      	mov	sp, r7
 80290d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290d6:	4770      	bx	lr
 80290d8:	e000e100 	.word	0xe000e100

080290dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80290dc:	b480      	push	{r7}
 80290de:	b083      	sub	sp, #12
 80290e0:	af00      	add	r7, sp, #0
 80290e2:	4603      	mov	r3, r0
 80290e4:	6039      	str	r1, [r7, #0]
 80290e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80290e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80290ec:	2b00      	cmp	r3, #0
 80290ee:	db0a      	blt.n	8029106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80290f0:	490d      	ldr	r1, [pc, #52]	; (8029128 <__NVIC_SetPriority+0x4c>)
 80290f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80290f6:	683a      	ldr	r2, [r7, #0]
 80290f8:	b2d2      	uxtb	r2, r2
 80290fa:	0092      	lsls	r2, r2, #2
 80290fc:	b2d2      	uxtb	r2, r2
 80290fe:	440b      	add	r3, r1
 8029100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8029104:	e00a      	b.n	802911c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029106:	4909      	ldr	r1, [pc, #36]	; (802912c <__NVIC_SetPriority+0x50>)
 8029108:	79fb      	ldrb	r3, [r7, #7]
 802910a:	f003 030f 	and.w	r3, r3, #15
 802910e:	3b04      	subs	r3, #4
 8029110:	683a      	ldr	r2, [r7, #0]
 8029112:	b2d2      	uxtb	r2, r2
 8029114:	0092      	lsls	r2, r2, #2
 8029116:	b2d2      	uxtb	r2, r2
 8029118:	440b      	add	r3, r1
 802911a:	761a      	strb	r2, [r3, #24]
  }
}
 802911c:	370c      	adds	r7, #12
 802911e:	46bd      	mov	sp, r7
 8029120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029124:	4770      	bx	lr
 8029126:	bf00      	nop
 8029128:	e000e100 	.word	0xe000e100
 802912c:	e000ed00 	.word	0xe000ed00

08029130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8029130:	b480      	push	{r7}
 8029132:	b089      	sub	sp, #36	; 0x24
 8029134:	af00      	add	r7, sp, #0
 8029136:	60f8      	str	r0, [r7, #12]
 8029138:	60b9      	str	r1, [r7, #8]
 802913a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802913c:	68fb      	ldr	r3, [r7, #12]
 802913e:	f003 0307 	and.w	r3, r3, #7
 8029142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8029144:	69fb      	ldr	r3, [r7, #28]
 8029146:	f1c3 0307 	rsb	r3, r3, #7
 802914a:	2b06      	cmp	r3, #6
 802914c:	bf28      	it	cs
 802914e:	2306      	movcs	r3, #6
 8029150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8029152:	69fb      	ldr	r3, [r7, #28]
 8029154:	3306      	adds	r3, #6
 8029156:	2b06      	cmp	r3, #6
 8029158:	d902      	bls.n	8029160 <NVIC_EncodePriority+0x30>
 802915a:	69fb      	ldr	r3, [r7, #28]
 802915c:	3b01      	subs	r3, #1
 802915e:	e000      	b.n	8029162 <NVIC_EncodePriority+0x32>
 8029160:	2300      	movs	r3, #0
 8029162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029164:	69bb      	ldr	r3, [r7, #24]
 8029166:	2201      	movs	r2, #1
 8029168:	fa02 f303 	lsl.w	r3, r2, r3
 802916c:	1e5a      	subs	r2, r3, #1
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	401a      	ands	r2, r3
 8029172:	697b      	ldr	r3, [r7, #20]
 8029174:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8029176:	697b      	ldr	r3, [r7, #20]
 8029178:	2101      	movs	r1, #1
 802917a:	fa01 f303 	lsl.w	r3, r1, r3
 802917e:	1e59      	subs	r1, r3, #1
 8029180:	687b      	ldr	r3, [r7, #4]
 8029182:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8029184:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8029186:	4618      	mov	r0, r3
 8029188:	3724      	adds	r7, #36	; 0x24
 802918a:	46bd      	mov	sp, r7
 802918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029190:	4770      	bx	lr
 8029192:	bf00      	nop

08029194 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8029194:	b580      	push	{r7, lr}
 8029196:	b082      	sub	sp, #8
 8029198:	af00      	add	r7, sp, #0
 802919a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 802919c:	687b      	ldr	r3, [r7, #4]
 802919e:	781b      	ldrb	r3, [r3, #0]
 80291a0:	b25b      	sxtb	r3, r3
 80291a2:	4618      	mov	r0, r3
 80291a4:	f7ff ff7e 	bl	80290a4 <__NVIC_EnableIRQ>
}
 80291a8:	3708      	adds	r7, #8
 80291aa:	46bd      	mov	sp, r7
 80291ac:	bd80      	pop	{r7, pc}
 80291ae:	bf00      	nop

080291b0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80291b0:	b590      	push	{r4, r7, lr}
 80291b2:	b083      	sub	sp, #12
 80291b4:	af00      	add	r7, sp, #0
 80291b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	781c      	ldrb	r4, [r3, #0]
 80291bc:	f7ff ff64 	bl	8029088 <__NVIC_GetPriorityGrouping>
 80291c0:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80291c6:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80291cc:	4608      	mov	r0, r1
 80291ce:	4611      	mov	r1, r2
 80291d0:	461a      	mov	r2, r3
 80291d2:	f7ff ffad 	bl	8029130 <NVIC_EncodePriority>
 80291d6:	4602      	mov	r2, r0
 80291d8:	b263      	sxtb	r3, r4
 80291da:	4618      	mov	r0, r3
 80291dc:	4611      	mov	r1, r2
 80291de:	f7ff ff7d 	bl	80290dc <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80291e2:	687b      	ldr	r3, [r7, #4]
 80291e4:	78db      	ldrb	r3, [r3, #3]
 80291e6:	2b00      	cmp	r3, #0
 80291e8:	d002      	beq.n	80291f0 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80291ea:	6878      	ldr	r0, [r7, #4]
 80291ec:	f7ff ffd2 	bl	8029194 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80291f0:	2300      	movs	r3, #0
}
 80291f2:	4618      	mov	r0, r3
 80291f4:	370c      	adds	r7, #12
 80291f6:	46bd      	mov	sp, r7
 80291f8:	bd90      	pop	{r4, r7, pc}
 80291fa:	bf00      	nop

080291fc <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80291fc:	b480      	push	{r7}
 80291fe:	b083      	sub	sp, #12
 8029200:	af00      	add	r7, sp, #0
 8029202:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8029204:	687b      	ldr	r3, [r7, #4]
 8029206:	68db      	ldr	r3, [r3, #12]
 8029208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	60da      	str	r2, [r3, #12]
}
 8029210:	370c      	adds	r7, #12
 8029212:	46bd      	mov	sp, r7
 8029214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029218:	4770      	bx	lr
 802921a:	bf00      	nop

0802921c <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 802921c:	b580      	push	{r7, lr}
 802921e:	b082      	sub	sp, #8
 8029220:	af00      	add	r7, sp, #0
 8029222:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8029224:	687b      	ldr	r3, [r7, #4]
 8029226:	7b5b      	ldrb	r3, [r3, #13]
 8029228:	f083 0301 	eor.w	r3, r3, #1
 802922c:	b2db      	uxtb	r3, r3
 802922e:	2b00      	cmp	r3, #0
 8029230:	d00f      	beq.n	8029252 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8029232:	687b      	ldr	r3, [r7, #4]
 8029234:	689a      	ldr	r2, [r3, #8]
 8029236:	687b      	ldr	r3, [r7, #4]
 8029238:	7b1b      	ldrb	r3, [r3, #12]
 802923a:	4610      	mov	r0, r2
 802923c:	4619      	mov	r1, r3
 802923e:	f7fe fdb1 	bl	8027da4 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8029242:	687b      	ldr	r3, [r7, #4]
 8029244:	689b      	ldr	r3, [r3, #8]
 8029246:	4618      	mov	r0, r3
 8029248:	f7ff ffd8 	bl	80291fc <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 802924c:	687b      	ldr	r3, [r7, #4]
 802924e:	2201      	movs	r2, #1
 8029250:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8029252:	2300      	movs	r3, #0
}
 8029254:	4618      	mov	r0, r3
 8029256:	3708      	adds	r7, #8
 8029258:	46bd      	mov	sp, r7
 802925a:	bd80      	pop	{r7, pc}

0802925c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 802925c:	b480      	push	{r7}
 802925e:	b083      	sub	sp, #12
 8029260:	af00      	add	r7, sp, #0
 8029262:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8029264:	687b      	ldr	r3, [r7, #4]
 8029266:	68db      	ldr	r3, [r3, #12]
 8029268:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	60da      	str	r2, [r3, #12]
}
 8029270:	370c      	adds	r7, #12
 8029272:	46bd      	mov	sp, r7
 8029274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029278:	4770      	bx	lr
 802927a:	bf00      	nop

0802927c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 802927c:	b580      	push	{r7, lr}
 802927e:	b082      	sub	sp, #8
 8029280:	af00      	add	r7, sp, #0
 8029282:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	7b5b      	ldrb	r3, [r3, #13]
 8029288:	f083 0301 	eor.w	r3, r3, #1
 802928c:	b2db      	uxtb	r3, r3
 802928e:	2b00      	cmp	r3, #0
 8029290:	d00f      	beq.n	80292b2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8029292:	687b      	ldr	r3, [r7, #4]
 8029294:	689a      	ldr	r2, [r3, #8]
 8029296:	687b      	ldr	r3, [r7, #4]
 8029298:	7b1b      	ldrb	r3, [r3, #12]
 802929a:	4610      	mov	r0, r2
 802929c:	4619      	mov	r1, r3
 802929e:	f7fe fc71 	bl	8027b84 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80292a2:	687b      	ldr	r3, [r7, #4]
 80292a4:	689b      	ldr	r3, [r3, #8]
 80292a6:	4618      	mov	r0, r3
 80292a8:	f7ff ffd8 	bl	802925c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	2201      	movs	r2, #1
 80292b0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80292b2:	2300      	movs	r3, #0
}
 80292b4:	4618      	mov	r0, r3
 80292b6:	3708      	adds	r7, #8
 80292b8:	46bd      	mov	sp, r7
 80292ba:	bd80      	pop	{r7, pc}

080292bc <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 80292bc:	b480      	push	{r7}
 80292be:	b083      	sub	sp, #12
 80292c0:	af00      	add	r7, sp, #0
 80292c2:	4603      	mov	r3, r0
 80292c4:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 80292c6:	4909      	ldr	r1, [pc, #36]	; (80292ec <XMC_FLASH_SetMargin+0x30>)
 80292c8:	4b08      	ldr	r3, [pc, #32]	; (80292ec <XMC_FLASH_SetMargin+0x30>)
 80292ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80292ce:	3318      	adds	r3, #24
 80292d0:	681b      	ldr	r3, [r3, #0]
 80292d2:	f023 020f 	bic.w	r2, r3, #15
 80292d6:	79fb      	ldrb	r3, [r7, #7]
 80292d8:	431a      	orrs	r2, r3
 80292da:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80292de:	3318      	adds	r3, #24
 80292e0:	601a      	str	r2, [r3, #0]
}
 80292e2:	370c      	adds	r7, #12
 80292e4:	46bd      	mov	sp, r7
 80292e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292ea:	4770      	bx	lr
 80292ec:	58001000 	.word	0x58001000

080292f0 <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 80292f0:	b480      	push	{r7}
 80292f2:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 80292f4:	4907      	ldr	r1, [pc, #28]	; (8029314 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 80292f6:	4b07      	ldr	r3, [pc, #28]	; (8029314 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 80292f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80292fc:	3318      	adds	r3, #24
 80292fe:	681b      	ldr	r3, [r3, #0]
 8029300:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8029304:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8029308:	3318      	adds	r3, #24
 802930a:	601a      	str	r2, [r3, #0]
}
 802930c:	46bd      	mov	sp, r7
 802930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029312:	4770      	bx	lr
 8029314:	58001000 	.word	0x58001000

08029318 <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 8029318:	b480      	push	{r7}
 802931a:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 802931c:	4907      	ldr	r1, [pc, #28]	; (802933c <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 802931e:	4b07      	ldr	r3, [pc, #28]	; (802933c <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8029320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029324:	3318      	adds	r3, #24
 8029326:	681b      	ldr	r3, [r3, #0]
 8029328:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 802932c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8029330:	3318      	adds	r3, #24
 8029332:	601a      	str	r2, [r3, #0]
}
 8029334:	46bd      	mov	sp, r7
 8029336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802933a:	4770      	bx	lr
 802933c:	58001000 	.word	0x58001000

08029340 <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 8029340:	b480      	push	{r7}
 8029342:	b083      	sub	sp, #12
 8029344:	af00      	add	r7, sp, #0
 8029346:	6078      	str	r0, [r7, #4]
 8029348:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	681b      	ldr	r3, [r3, #0]
 802934e:	683a      	ldr	r2, [r7, #0]
 8029350:	619a      	str	r2, [r3, #24]
}
 8029352:	370c      	adds	r7, #12
 8029354:	46bd      	mov	sp, r7
 8029356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802935a:	4770      	bx	lr

0802935c <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 802935c:	b580      	push	{r7, lr}
 802935e:	b084      	sub	sp, #16
 8029360:	af00      	add	r7, sp, #0
 8029362:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))

  status = E_EEPROM_XMC4_STATUS_OK;
 8029364:	2300      	movs	r3, #0
 8029366:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	781b      	ldrb	r3, [r3, #0]
 802936c:	f083 0301 	eor.w	r3, r3, #1
 8029370:	b2db      	uxtb	r3, r3
 8029372:	2b00      	cmp	r3, #0
 8029374:	d04c      	beq.n	8029410 <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 8029376:	4b29      	ldr	r3, [pc, #164]	; (802941c <E_EEPROM_XMC4_Init+0xc0>)
 8029378:	2200      	movs	r2, #0
 802937a:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 802937c:	4b28      	ldr	r3, [pc, #160]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 802937e:	2200      	movs	r2, #0
 8029380:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 8029382:	2001      	movs	r0, #1
 8029384:	f7ff ff9a 	bl	80292bc <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 8029388:	f7ff ffc6 	bl	8029318 <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 802938c:	f7ff f926 	bl	80285dc <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8029390:	4824      	ldr	r0, [pc, #144]	; (8029424 <E_EEPROM_XMC4_Init+0xc8>)
 8029392:	f7ff f90d 	bl	80285b0 <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8029396:	2300      	movs	r3, #0
 8029398:	60fb      	str	r3, [r7, #12]
 802939a:	e005      	b.n	80293a8 <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 802939c:	68f8      	ldr	r0, [r7, #12]
 802939e:	f000 f941 	bl	8029624 <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 80293a2:	68fb      	ldr	r3, [r7, #12]
 80293a4:	3301      	adds	r3, #1
 80293a6:	60fb      	str	r3, [r7, #12]
 80293a8:	68fb      	ldr	r3, [r7, #12]
 80293aa:	2b03      	cmp	r3, #3
 80293ac:	d9f6      	bls.n	802939c <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 80293ae:	2000      	movs	r0, #0
 80293b0:	f7ff ff84 	bl	80292bc <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 80293b4:	7afb      	ldrb	r3, [r7, #11]
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d125      	bne.n	8029406 <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 80293ba:	f000 f989 	bl	80296d0 <E_EEPROM_XMC4_lInitEraseStateMachine>
 80293be:	4603      	mov	r3, r0
 80293c0:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 80293c2:	7afb      	ldrb	r3, [r7, #11]
 80293c4:	2b00      	cmp	r3, #0
 80293c6:	d11e      	bne.n	8029406 <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 80293c8:	4b15      	ldr	r3, [pc, #84]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293ca:	685b      	ldr	r3, [r3, #4]
 80293cc:	2b00      	cmp	r3, #0
 80293ce:	d106      	bne.n	80293de <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 80293d0:	4b13      	ldr	r3, [pc, #76]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293d2:	2200      	movs	r2, #0
 80293d4:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 80293d6:	4b12      	ldr	r3, [pc, #72]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293d8:	4a13      	ldr	r2, [pc, #76]	; (8029428 <E_EEPROM_XMC4_Init+0xcc>)
 80293da:	601a      	str	r2, [r3, #0]
 80293dc:	e013      	b.n	8029406 <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 80293de:	f000 f9cf 	bl	8029780 <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 80293e2:	4b0f      	ldr	r3, [pc, #60]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293e4:	681a      	ldr	r2, [r3, #0]
 80293e6:	4b0e      	ldr	r3, [pc, #56]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293e8:	685b      	ldr	r3, [r3, #4]
 80293ea:	1ad3      	subs	r3, r2, r3
 80293ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80293f0:	d001      	beq.n	80293f6 <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 80293f2:	2301      	movs	r3, #1
 80293f4:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 80293f6:	4b0a      	ldr	r3, [pc, #40]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	4a0c      	ldr	r2, [pc, #48]	; (802942c <E_EEPROM_XMC4_Init+0xd0>)
 80293fc:	4293      	cmp	r3, r2
 80293fe:	d902      	bls.n	8029406 <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8029400:	4b07      	ldr	r3, [pc, #28]	; (8029420 <E_EEPROM_XMC4_Init+0xc4>)
 8029402:	4a09      	ldr	r2, [pc, #36]	; (8029428 <E_EEPROM_XMC4_Init+0xcc>)
 8029404:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 8029406:	f7ff ff73 	bl	80292f0 <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 802940a:	687b      	ldr	r3, [r7, #4]
 802940c:	2201      	movs	r2, #1
 802940e:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 8029410:	7afb      	ldrb	r3, [r7, #11]
}
 8029412:	4618      	mov	r0, r3
 8029414:	3710      	adds	r7, #16
 8029416:	46bd      	mov	sp, r7
 8029418:	bd80      	pop	{r7, pc}
 802941a:	bf00      	nop
 802941c:	1ffe9588 	.word	0x1ffe9588
 8029420:	1ffe9484 	.word	0x1ffe9484
 8029424:	0802b7ec 	.word	0x0802b7ec
 8029428:	0c010000 	.word	0x0c010000
 802942c:	0c01ffff 	.word	0x0c01ffff

08029430 <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
bool E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 8029430:	b580      	push	{r7, lr}
 8029432:	b086      	sub	sp, #24
 8029434:	af00      	add	r7, sp, #0
 8029436:	4603      	mov	r3, r0
 8029438:	6039      	str	r1, [r7, #0]
 802943a:	80fb      	strh	r3, [r7, #6]
 802943c:	4613      	mov	r3, r2
 802943e:	80bb      	strh	r3, [r7, #4]

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8029440:	88fb      	ldrh	r3, [r7, #6]
 8029442:	3308      	adds	r3, #8
 8029444:	4a12      	ldr	r2, [pc, #72]	; (8029490 <E_EEPROM_XMC4_WriteArray+0x60>)
 8029446:	4413      	add	r3, r2
 8029448:	613b      	str	r3, [r7, #16]
  status = (memcmp(address_ptr, data, length) != 0);
 802944a:	88bb      	ldrh	r3, [r7, #4]
 802944c:	6938      	ldr	r0, [r7, #16]
 802944e:	6839      	ldr	r1, [r7, #0]
 8029450:	461a      	mov	r2, r3
 8029452:	f001 fbd1 	bl	802abf8 <memcmp>
 8029456:	4603      	mov	r3, r0
 8029458:	2b00      	cmp	r3, #0
 802945a:	bf14      	ite	ne
 802945c:	2301      	movne	r3, #1
 802945e:	2300      	moveq	r3, #0
 8029460:	73fb      	strb	r3, [r7, #15]

  for (i = 0U; i < length; i++)
 8029462:	2300      	movs	r3, #0
 8029464:	82fb      	strh	r3, [r7, #22]
 8029466:	e00a      	b.n	802947e <E_EEPROM_XMC4_WriteArray+0x4e>
  {
      *(address_ptr + i) = *(data + i);
 8029468:	8afb      	ldrh	r3, [r7, #22]
 802946a:	693a      	ldr	r2, [r7, #16]
 802946c:	4413      	add	r3, r2
 802946e:	8afa      	ldrh	r2, [r7, #22]
 8029470:	6839      	ldr	r1, [r7, #0]
 8029472:	440a      	add	r2, r1
 8029474:	7812      	ldrb	r2, [r2, #0]
 8029476:	701a      	strb	r2, [r3, #0]
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
  status = (memcmp(address_ptr, data, length) != 0);

  for (i = 0U; i < length; i++)
 8029478:	8afb      	ldrh	r3, [r7, #22]
 802947a:	3301      	adds	r3, #1
 802947c:	82fb      	strh	r3, [r7, #22]
 802947e:	8afa      	ldrh	r2, [r7, #22]
 8029480:	88bb      	ldrh	r3, [r7, #4]
 8029482:	429a      	cmp	r2, r3
 8029484:	d3f0      	bcc.n	8029468 <E_EEPROM_XMC4_WriteArray+0x38>
  {
      *(address_ptr + i) = *(data + i);
  }

  return status;
 8029486:	7bfb      	ldrb	r3, [r7, #15]
}
 8029488:	4618      	mov	r0, r3
 802948a:	3718      	adds	r7, #24
 802948c:	46bd      	mov	sp, r7
 802948e:	bd80      	pop	{r7, pc}
 8029490:	1ffe9588 	.word	0x1ffe9588

08029494 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 8029494:	b480      	push	{r7}
 8029496:	b085      	sub	sp, #20
 8029498:	af00      	add	r7, sp, #0
 802949a:	4603      	mov	r3, r0
 802949c:	6039      	str	r1, [r7, #0]
 802949e:	80fb      	strh	r3, [r7, #6]
 80294a0:	4613      	mov	r3, r2
 80294a2:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 80294a4:	88fb      	ldrh	r3, [r7, #6]
 80294a6:	3308      	adds	r3, #8
 80294a8:	4a0c      	ldr	r2, [pc, #48]	; (80294dc <E_EEPROM_XMC4_ReadArray+0x48>)
 80294aa:	4413      	add	r3, r2
 80294ac:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 80294ae:	2300      	movs	r3, #0
 80294b0:	81fb      	strh	r3, [r7, #14]
 80294b2:	e00a      	b.n	80294ca <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 80294b4:	89fb      	ldrh	r3, [r7, #14]
 80294b6:	683a      	ldr	r2, [r7, #0]
 80294b8:	4413      	add	r3, r2
 80294ba:	89fa      	ldrh	r2, [r7, #14]
 80294bc:	68b9      	ldr	r1, [r7, #8]
 80294be:	440a      	add	r2, r1
 80294c0:	7812      	ldrb	r2, [r2, #0]
 80294c2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 80294c4:	89fb      	ldrh	r3, [r7, #14]
 80294c6:	3301      	adds	r3, #1
 80294c8:	81fb      	strh	r3, [r7, #14]
 80294ca:	89fa      	ldrh	r2, [r7, #14]
 80294cc:	88bb      	ldrh	r3, [r7, #4]
 80294ce:	429a      	cmp	r2, r3
 80294d0:	d3f0      	bcc.n	80294b4 <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 80294d2:	3714      	adds	r7, #20
 80294d4:	46bd      	mov	sp, r7
 80294d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294da:	4770      	bx	lr
 80294dc:	1ffe9588 	.word	0x1ffe9588

080294e0 <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 80294e0:	b580      	push	{r7, lr}
 80294e2:	b082      	sub	sp, #8
 80294e4:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 80294e6:	2300      	movs	r3, #0
 80294e8:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 80294ea:	4b22      	ldr	r3, [pc, #136]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80294ec:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 80294ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80294f2:	3304      	adds	r3, #4
 80294f4:	039b      	lsls	r3, r3, #14
 80294f6:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 80294f8:	4b1e      	ldr	r3, [pc, #120]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80294fa:	681a      	ldr	r2, [r3, #0]
 80294fc:	683b      	ldr	r3, [r7, #0]
 80294fe:	429a      	cmp	r2, r3
 8029500:	d111      	bne.n	8029526 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 8029502:	4b1d      	ldr	r3, [pc, #116]	; (8029578 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8029504:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8029506:	2b00      	cmp	r3, #0
 8029508:	d00d      	beq.n	8029526 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 802950a:	4b1a      	ldr	r3, [pc, #104]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802950c:	685b      	ldr	r3, [r3, #4]
 802950e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 8029512:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8029514:	4a17      	ldr	r2, [pc, #92]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8029516:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 8029518:	4b16      	ldr	r3, [pc, #88]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802951a:	220f      	movs	r2, #15
 802951c:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 802951e:	f000 f8d7 	bl	80296d0 <E_EEPROM_XMC4_lInitEraseStateMachine>
 8029522:	4603      	mov	r3, r0
 8029524:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 8029526:	79fb      	ldrb	r3, [r7, #7]
 8029528:	2b00      	cmp	r3, #0
 802952a:	d11d      	bne.n	8029568 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 802952c:	4b12      	ldr	r3, [pc, #72]	; (8029578 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 802952e:	685b      	ldr	r3, [r3, #4]
 8029530:	3301      	adds	r3, #1
 8029532:	4a11      	ldr	r2, [pc, #68]	; (8029578 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8029534:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 8029536:	f000 f839 	bl	80295ac <E_EEPROM_XMC4_lWriteToFlash>
 802953a:	4603      	mov	r3, r0
 802953c:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 802953e:	79fb      	ldrb	r3, [r7, #7]
 8029540:	2b00      	cmp	r3, #0
 8029542:	d103      	bne.n	802954c <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 8029544:	4b0b      	ldr	r3, [pc, #44]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8029546:	681b      	ldr	r3, [r3, #0]
 8029548:	4a0a      	ldr	r2, [pc, #40]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802954a:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 802954c:	4b09      	ldr	r3, [pc, #36]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802954e:	681b      	ldr	r3, [r3, #0]
 8029550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029554:	4a07      	ldr	r2, [pc, #28]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8029556:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8029558:	4b06      	ldr	r3, [pc, #24]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802955a:	681b      	ldr	r3, [r3, #0]
 802955c:	4a07      	ldr	r2, [pc, #28]	; (802957c <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 802955e:	4293      	cmp	r3, r2
 8029560:	d902      	bls.n	8029568 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8029562:	4b04      	ldr	r3, [pc, #16]	; (8029574 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8029564:	4a06      	ldr	r2, [pc, #24]	; (8029580 <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 8029566:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8029568:	79fb      	ldrb	r3, [r7, #7]
}
 802956a:	4618      	mov	r0, r3
 802956c:	3708      	adds	r7, #8
 802956e:	46bd      	mov	sp, r7
 8029570:	bd80      	pop	{r7, pc}
 8029572:	bf00      	nop
 8029574:	1ffe9484 	.word	0x1ffe9484
 8029578:	1ffe9588 	.word	0x1ffe9588
 802957c:	0c01ffff 	.word	0x0c01ffff
 8029580:	0c010000 	.word	0x0c010000

08029584 <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 8029584:	b480      	push	{r7}
 8029586:	b083      	sub	sp, #12
 8029588:	af00      	add	r7, sp, #0
  bool status = false;
 802958a:	2300      	movs	r3, #0
 802958c:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 802958e:	4b06      	ldr	r3, [pc, #24]	; (80295a8 <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 8029590:	685b      	ldr	r3, [r3, #4]
 8029592:	2b00      	cmp	r3, #0
 8029594:	d101      	bne.n	802959a <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 8029596:	2301      	movs	r3, #1
 8029598:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 802959a:	79fb      	ldrb	r3, [r7, #7]
}
 802959c:	4618      	mov	r0, r3
 802959e:	370c      	adds	r7, #12
 80295a0:	46bd      	mov	sp, r7
 80295a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295a6:	4770      	bx	lr
 80295a8:	1ffe9484 	.word	0x1ffe9484

080295ac <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 80295ac:	b580      	push	{r7, lr}
 80295ae:	b084      	sub	sp, #16
 80295b0:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 80295b2:	2300      	movs	r3, #0
 80295b4:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 80295b6:	4b18      	ldr	r3, [pc, #96]	; (8029618 <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 80295b8:	681b      	ldr	r3, [r3, #0]
 80295ba:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 80295bc:	4b17      	ldr	r3, [pc, #92]	; (802961c <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80295be:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 80295c0:	4817      	ldr	r0, [pc, #92]	; (8029620 <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 80295c2:	f000 f8c5 	bl	8029750 <E_EEPROM_XMC4_lCalculateCRC>
 80295c6:	4602      	mov	r2, r0
 80295c8:	4b14      	ldr	r3, [pc, #80]	; (802961c <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80295ca:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 80295cc:	2300      	movs	r3, #0
 80295ce:	607b      	str	r3, [r7, #4]
 80295d0:	e019      	b.n	8029606 <E_EEPROM_XMC4_lWriteToFlash+0x5a>
  {
    XMC_FLASH_ClearStatus();
 80295d2:	f7fd fca5 	bl	8026f20 <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 80295d6:	68f8      	ldr	r0, [r7, #12]
 80295d8:	68b9      	ldr	r1, [r7, #8]
 80295da:	f7fd fcb5 	bl	8026f48 <XMC_FLASH_ProgramPage>

    if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 80295de:	f7fd fca5 	bl	8026f2c <XMC_FLASH_GetStatus>
 80295e2:	4603      	mov	r3, r0
 80295e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80295e8:	d102      	bne.n	80295f0 <E_EEPROM_XMC4_lWriteToFlash+0x44>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 80295ea:	2303      	movs	r3, #3
 80295ec:	70fb      	strb	r3, [r7, #3]
      break;
 80295ee:	e00d      	b.n	802960c <E_EEPROM_XMC4_lWriteToFlash+0x60>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 80295f0:	68bb      	ldr	r3, [r7, #8]
 80295f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80295f6:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 80295f8:	68fb      	ldr	r3, [r7, #12]
 80295fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80295fe:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	3301      	adds	r3, #1
 8029604:	607b      	str	r3, [r7, #4]
 8029606:	687b      	ldr	r3, [r7, #4]
 8029608:	2b0f      	cmp	r3, #15
 802960a:	d9e2      	bls.n	80295d2 <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 802960c:	78fb      	ldrb	r3, [r7, #3]
}
 802960e:	4618      	mov	r0, r3
 8029610:	3710      	adds	r7, #16
 8029612:	46bd      	mov	sp, r7
 8029614:	bd80      	pop	{r7, pc}
 8029616:	bf00      	nop
 8029618:	1ffe9484 	.word	0x1ffe9484
 802961c:	1ffe9588 	.word	0x1ffe9588
 8029620:	1ffe958c 	.word	0x1ffe958c

08029624 <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 8029624:	b580      	push	{r7, lr}
 8029626:	b08a      	sub	sp, #40	; 0x28
 8029628:	af00      	add	r7, sp, #0
 802962a:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 802962c:	687b      	ldr	r3, [r7, #4]
 802962e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8029632:	3304      	adds	r3, #4
 8029634:	039b      	lsls	r3, r3, #14
 8029636:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8029638:	69fb      	ldr	r3, [r7, #28]
 802963a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802963e:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 8029640:	2300      	movs	r3, #0
 8029642:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 8029644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029646:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8029648:	69bb      	ldr	r3, [r7, #24]
 802964a:	685b      	ldr	r3, [r3, #4]
 802964c:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 802964e:	697b      	ldr	r3, [r7, #20]
 8029650:	2b00      	cmp	r3, #0
 8029652:	d02e      	beq.n	80296b2 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8029654:	4b1c      	ldr	r3, [pc, #112]	; (80296c8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8029656:	68da      	ldr	r2, [r3, #12]
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	2101      	movs	r1, #1
 802965c:	fa01 f303 	lsl.w	r3, r1, r3
 8029660:	4313      	orrs	r3, r2
 8029662:	4a19      	ldr	r2, [pc, #100]	; (80296c8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8029664:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 8029666:	6a3b      	ldr	r3, [r7, #32]
 8029668:	2b00      	cmp	r3, #0
 802966a:	d103      	bne.n	8029674 <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 802966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029672:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8029674:	69bb      	ldr	r3, [r7, #24]
 8029676:	681b      	ldr	r3, [r3, #0]
 8029678:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 802967a:	69bb      	ldr	r3, [r7, #24]
 802967c:	3304      	adds	r3, #4
 802967e:	4618      	mov	r0, r3
 8029680:	f000 f866 	bl	8029750 <E_EEPROM_XMC4_lCalculateCRC>
 8029684:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 8029686:	68fa      	ldr	r2, [r7, #12]
 8029688:	693b      	ldr	r3, [r7, #16]
 802968a:	429a      	cmp	r2, r3
 802968c:	d111      	bne.n	80296b2 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 802968e:	4b0f      	ldr	r3, [pc, #60]	; (80296cc <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8029690:	685a      	ldr	r2, [r3, #4]
 8029692:	697b      	ldr	r3, [r7, #20]
 8029694:	429a      	cmp	r2, r3
 8029696:	d20c      	bcs.n	80296b2 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 8029698:	4a0c      	ldr	r2, [pc, #48]	; (80296cc <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 802969a:	697b      	ldr	r3, [r7, #20]
 802969c:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 802969e:	4a0a      	ldr	r2, [pc, #40]	; (80296c8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80296a0:	687b      	ldr	r3, [r7, #4]
 80296a2:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 80296a4:	4a08      	ldr	r2, [pc, #32]	; (80296c8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80296a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296a8:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 80296aa:	4a07      	ldr	r2, [pc, #28]	; (80296c8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80296ac:	6a3b      	ldr	r3, [r7, #32]
 80296ae:	6013      	str	r3, [r2, #0]
          break;
 80296b0:	e007      	b.n	80296c2 <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 80296b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296b4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80296b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 80296ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80296bc:	69fb      	ldr	r3, [r7, #28]
 80296be:	429a      	cmp	r2, r3
 80296c0:	d2c0      	bcs.n	8029644 <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 80296c2:	3728      	adds	r7, #40	; 0x28
 80296c4:	46bd      	mov	sp, r7
 80296c6:	bd80      	pop	{r7, pc}
 80296c8:	1ffe9484 	.word	0x1ffe9484
 80296cc:	1ffe9588 	.word	0x1ffe9588

080296d0 <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 80296d0:	b580      	push	{r7, lr}
 80296d2:	b084      	sub	sp, #16
 80296d4:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 80296d6:	2300      	movs	r3, #0
 80296d8:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 80296da:	2300      	movs	r3, #0
 80296dc:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 80296de:	4b1b      	ldr	r3, [pc, #108]	; (802974c <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80296e0:	689a      	ldr	r2, [r3, #8]
 80296e2:	68fb      	ldr	r3, [r7, #12]
 80296e4:	429a      	cmp	r2, r3
 80296e6:	d026      	beq.n	8029736 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 80296e8:	4b18      	ldr	r3, [pc, #96]	; (802974c <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80296ea:	68da      	ldr	r2, [r3, #12]
 80296ec:	68fb      	ldr	r3, [r7, #12]
 80296ee:	fa22 f303 	lsr.w	r3, r2, r3
 80296f2:	f003 0301 	and.w	r3, r3, #1
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d01d      	beq.n	8029736 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 80296fa:	68fb      	ldr	r3, [r7, #12]
 80296fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8029700:	3304      	adds	r3, #4
 8029702:	039b      	lsls	r3, r3, #14
 8029704:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 8029706:	f7fd fc0b 	bl	8026f20 <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	4618      	mov	r0, r3
 802970e:	f7fd fc4f 	bl	8026fb0 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8029712:	f7fd fc0b 	bl	8026f2c <XMC_FLASH_GetStatus>
 8029716:	4603      	mov	r3, r0
 8029718:	2b20      	cmp	r3, #32
 802971a:	d002      	beq.n	8029722 <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 802971c:	2304      	movs	r3, #4
 802971e:	72fb      	strb	r3, [r7, #11]
          break;
 8029720:	e00f      	b.n	8029742 <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8029722:	4b0a      	ldr	r3, [pc, #40]	; (802974c <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8029724:	68da      	ldr	r2, [r3, #12]
 8029726:	68fb      	ldr	r3, [r7, #12]
 8029728:	2101      	movs	r1, #1
 802972a:	fa01 f303 	lsl.w	r3, r1, r3
 802972e:	43db      	mvns	r3, r3
 8029730:	4013      	ands	r3, r2
 8029732:	4a06      	ldr	r2, [pc, #24]	; (802974c <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8029734:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 8029736:	68fb      	ldr	r3, [r7, #12]
 8029738:	3301      	adds	r3, #1
 802973a:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 802973c:	68fb      	ldr	r3, [r7, #12]
 802973e:	2b03      	cmp	r3, #3
 8029740:	d9cd      	bls.n	80296de <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 8029742:	7afb      	ldrb	r3, [r7, #11]
}
 8029744:	4618      	mov	r0, r3
 8029746:	3710      	adds	r7, #16
 8029748:	46bd      	mov	sp, r7
 802974a:	bd80      	pop	{r7, pc}
 802974c:	1ffe9484 	.word	0x1ffe9484

08029750 <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 8029750:	b580      	push	{r7, lr}
 8029752:	b084      	sub	sp, #16
 8029754:	af00      	add	r7, sp, #0
 8029756:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8029758:	4808      	ldr	r0, [pc, #32]	; (802977c <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 802975a:	2100      	movs	r1, #0
 802975c:	f7ff fdf0 	bl	8029340 <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8029760:	f107 030c 	add.w	r3, r7, #12
 8029764:	4805      	ldr	r0, [pc, #20]	; (802977c <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8029766:	6879      	ldr	r1, [r7, #4]
 8029768:	f640 72fc 	movw	r2, #4092	; 0xffc
 802976c:	f7fe ff4a 	bl	8028604 <XMC_FCE_CalculateCRC32>

  return (result);
 8029770:	68fb      	ldr	r3, [r7, #12]
}
 8029772:	4618      	mov	r0, r3
 8029774:	3710      	adds	r7, #16
 8029776:	46bd      	mov	sp, r7
 8029778:	bd80      	pop	{r7, pc}
 802977a:	bf00      	nop
 802977c:	0802b7ec 	.word	0x0802b7ec

08029780 <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 8029780:	b480      	push	{r7}
 8029782:	b085      	sub	sp, #20
 8029784:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 8029786:	4b0f      	ldr	r3, [pc, #60]	; (80297c4 <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 8029788:	685b      	ldr	r3, [r3, #4]
 802978a:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 802978c:	4b0e      	ldr	r3, [pc, #56]	; (80297c8 <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 802978e:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8029790:	2300      	movs	r3, #0
 8029792:	60fb      	str	r3, [r7, #12]
 8029794:	e00c      	b.n	80297b0 <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 8029796:	68fb      	ldr	r3, [r7, #12]
 8029798:	009b      	lsls	r3, r3, #2
 802979a:	687a      	ldr	r2, [r7, #4]
 802979c:	4413      	add	r3, r2
 802979e:	68fa      	ldr	r2, [r7, #12]
 80297a0:	0092      	lsls	r2, r2, #2
 80297a2:	68b9      	ldr	r1, [r7, #8]
 80297a4:	440a      	add	r2, r1
 80297a6:	6812      	ldr	r2, [r2, #0]
 80297a8:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 80297aa:	68fb      	ldr	r3, [r7, #12]
 80297ac:	3301      	adds	r3, #1
 80297ae:	60fb      	str	r3, [r7, #12]
 80297b0:	68fb      	ldr	r3, [r7, #12]
 80297b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80297b6:	d3ee      	bcc.n	8029796 <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 80297b8:	3714      	adds	r7, #20
 80297ba:	46bd      	mov	sp, r7
 80297bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297c0:	4770      	bx	lr
 80297c2:	bf00      	nop
 80297c4:	1ffe9484 	.word	0x1ffe9484
 80297c8:	1ffe9588 	.word	0x1ffe9588

080297cc <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 80297cc:	b580      	push	{r7, lr}
 80297ce:	b082      	sub	sp, #8
 80297d0:	af00      	add	r7, sp, #0
 80297d2:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	7b5b      	ldrb	r3, [r3, #13]
 80297d8:	f083 0301 	eor.w	r3, r3, #1
 80297dc:	b2db      	uxtb	r3, r3
 80297de:	2b00      	cmp	r3, #0
 80297e0:	d012      	beq.n	8029808 <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	6819      	ldr	r1, [r3, #0]
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	7b1a      	ldrb	r2, [r3, #12]
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	685b      	ldr	r3, [r3, #4]
 80297ee:	4608      	mov	r0, r1
 80297f0:	4611      	mov	r1, r2
 80297f2:	461a      	mov	r2, r3
 80297f4:	f7fe fec8 	bl	8028588 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 80297f8:	687b      	ldr	r3, [r7, #4]
 80297fa:	689b      	ldr	r3, [r3, #8]
 80297fc:	4618      	mov	r0, r3
 80297fe:	f7fd fd8d 	bl	802731c <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 8029802:	687b      	ldr	r3, [r7, #4]
 8029804:	2201      	movs	r2, #1
 8029806:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 8029808:	2300      	movs	r3, #0
}
 802980a:	4618      	mov	r0, r3
 802980c:	3708      	adds	r7, #8
 802980e:	46bd      	mov	sp, r7
 8029810:	bd80      	pop	{r7, pc}
 8029812:	bf00      	nop

08029814 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 8029814:	b580      	push	{r7, lr}
 8029816:	b082      	sub	sp, #8
 8029818:	af00      	add	r7, sp, #0
 802981a:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 802981c:	687b      	ldr	r3, [r7, #4]
 802981e:	7b1b      	ldrb	r3, [r3, #12]
 8029820:	f083 0301 	eor.w	r3, r3, #1
 8029824:	b2db      	uxtb	r3, r3
 8029826:	2b00      	cmp	r3, #0
 8029828:	d00d      	beq.n	8029846 <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	6819      	ldr	r1, [r3, #0]
 802982e:	687b      	ldr	r3, [r7, #4]
 8029830:	791a      	ldrb	r2, [r3, #4]
 8029832:	687b      	ldr	r3, [r7, #4]
 8029834:	689b      	ldr	r3, [r3, #8]
 8029836:	4608      	mov	r0, r1
 8029838:	4611      	mov	r1, r2
 802983a:	461a      	mov	r2, r3
 802983c:	f7fe fe7e 	bl	802853c <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 8029840:	687b      	ldr	r3, [r7, #4]
 8029842:	2201      	movs	r2, #1
 8029844:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 8029846:	2300      	movs	r3, #0
}
 8029848:	4618      	mov	r0, r3
 802984a:	3708      	adds	r7, #8
 802984c:	46bd      	mov	sp, r7
 802984e:	bd80      	pop	{r7, pc}

08029850 <ECAT_SSC_Init>:

/*
 * This function intialize's the EtherCAT slave controller.
 */
ECAT_SSC_STATUS_t ECAT_SSC_Init(ECAT_SSC_t *handle)
{
 8029850:	b580      	push	{r7, lr}
 8029852:	b084      	sub	sp, #16
 8029854:	af00      	add	r7, sp, #0
 8029856:	6078      	str	r0, [r7, #4]
  uint32_t status;

  status = (uint32_t)ECAT_SSC_STATUS_FAILURE;
 8029858:	2301      	movs	r3, #1
 802985a:	60fb      	str	r3, [r7, #12]

  /* Initialize the Flash Emulated EEPROM and copy the latest content to the internal working RAM buffer*/
  status = (uint32_t)E_EEPROM_XMC4_Init(handle->eeprom);
 802985c:	687b      	ldr	r3, [r7, #4]
 802985e:	681b      	ldr	r3, [r3, #0]
 8029860:	4618      	mov	r0, r3
 8029862:	f7ff fd7b 	bl	802935c <E_EEPROM_XMC4_Init>
 8029866:	4603      	mov	r3, r0
 8029868:	60fb      	str	r3, [r7, #12]

  if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 802986a:	68fb      	ldr	r3, [r7, #12]
 802986c:	2b00      	cmp	r3, #0
 802986e:	d141      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
  {
    /* Check if the slave configuration data is available in the Flash Emulated EEPROM*/
    if (E_EEPROM_XMC4_IsFlashEmpty())
 8029870:	f7ff fe88 	bl	8029584 <E_EEPROM_XMC4_IsFlashEmpty>
 8029874:	4603      	mov	r3, r0
 8029876:	2b00      	cmp	r3, #0
 8029878:	d00a      	beq.n	8029890 <ECAT_SSC_Init+0x40>
    {
      /* Prepare the default configuration out of the SSC for EEPROM */
      E_EEPROM_XMC4_WriteArray(0U, aEepromData, (uint16_t)ESC_EEPROM_SIZE);
 802987a:	2000      	movs	r0, #0
 802987c:	4920      	ldr	r1, [pc, #128]	; (8029900 <ECAT_SSC_Init+0xb0>)
 802987e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029882:	f7ff fdd5 	bl	8029430 <E_EEPROM_XMC4_WriteArray>

      /* Program the RAM contents to Emulated EEPROM*/
      status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 8029886:	f7ff fe2b 	bl	80294e0 <E_EEPROM_XMC4_UpdateFlashContents>
 802988a:	4603      	mov	r3, r0
 802988c:	60fb      	str	r3, [r7, #12]
 802988e:	e005      	b.n	802989c <ECAT_SSC_Init+0x4c>
    }
    else
    {
      /* Read the latest contents from RAM buffer which has the latest contents of EEPROM */
      E_EEPROM_XMC4_ReadArray(0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE);
 8029890:	2000      	movs	r0, #0
 8029892:	491b      	ldr	r1, [pc, #108]	; (8029900 <ECAT_SSC_Init+0xb0>)
 8029894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029898:	f7ff fdfc 	bl	8029494 <E_EEPROM_XMC4_ReadArray>
    }

    /* Initialize the 1 millisecond timer module*/
    if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 802989c:	68fb      	ldr	r3, [r7, #12]
 802989e:	2b00      	cmp	r3, #0
 80298a0:	d128      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
    {
      status = (uint32_t)TIMER_Init(handle->timer);
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	685b      	ldr	r3, [r3, #4]
 80298a6:	4618      	mov	r0, r3
 80298a8:	f7fe ffe4 	bl	8028874 <TIMER_Init>
 80298ac:	4603      	mov	r3, r0
 80298ae:	60fb      	str	r3, [r7, #12]
      /* Initialize the timer interrupt handler*/
      if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80298b0:	68fb      	ldr	r3, [r7, #12]
 80298b2:	2b00      	cmp	r3, #0
 80298b4:	d11e      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
      {
        status = (uint32_t)INTERRUPT_Init(handle->timer_irqhandler);
 80298b6:	687b      	ldr	r3, [r7, #4]
 80298b8:	689b      	ldr	r3, [r3, #8]
 80298ba:	4618      	mov	r0, r3
 80298bc:	f7ff fc78 	bl	80291b0 <INTERRUPT_Init>
 80298c0:	4603      	mov	r3, r0
 80298c2:	60fb      	str	r3, [r7, #12]
        /* Call Beckhoff HW abstraction layer API to initialize the XMC4800 ESC and supporting functions*/
        if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80298c4:	68fb      	ldr	r3, [r7, #12]
 80298c6:	2b00      	cmp	r3, #0
 80298c8:	d114      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
        {
          status = HW_Init();
 80298ca:	f000 f921 	bl	8029b10 <HW_Init>
 80298ce:	4603      	mov	r3, r0
 80298d0:	60fb      	str	r3, [r7, #12]
          /* Call Beckhoff HW abstraction layer API to start the stack interface initialization*/
          if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80298d2:	68fb      	ldr	r3, [r7, #12]
 80298d4:	2b00      	cmp	r3, #0
 80298d6:	d10d      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
          {
            status = MainInit();
 80298d8:	f7f7 fd0a 	bl	80212f0 <MainInit>
 80298dc:	4603      	mov	r3, r0
 80298de:	60fb      	str	r3, [r7, #12]
            if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80298e0:	68fb      	ldr	r3, [r7, #12]
 80298e2:	2b00      	cmp	r3, #0
 80298e4:	d106      	bne.n	80298f4 <ECAT_SSC_Init+0xa4>
            {
              /*Start the 1 millisec timer*/
              status = (uint32_t)TIMER_Start(handle->timer);
 80298e6:	687b      	ldr	r3, [r7, #4]
 80298e8:	685b      	ldr	r3, [r3, #4]
 80298ea:	4618      	mov	r0, r3
 80298ec:	f7fe ffe0 	bl	80288b0 <TIMER_Start>
 80298f0:	4603      	mov	r3, r0
 80298f2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ((ECAT_SSC_STATUS_t)status);
 80298f4:	68fb      	ldr	r3, [r7, #12]
 80298f6:	b2db      	uxtb	r3, r3
}
 80298f8:	4618      	mov	r0, r3
 80298fa:	3710      	adds	r7, #16
 80298fc:	46bd      	mov	sp, r7
 80298fe:	bd80      	pop	{r7, pc}
 8029900:	1ffe8be4 	.word	0x1ffe8be4

08029904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8029904:	b480      	push	{r7}
 8029906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8029908:	4b04      	ldr	r3, [pc, #16]	; (802991c <__NVIC_GetPriorityGrouping+0x18>)
 802990a:	68db      	ldr	r3, [r3, #12]
 802990c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029910:	0a1b      	lsrs	r3, r3, #8
}
 8029912:	4618      	mov	r0, r3
 8029914:	46bd      	mov	sp, r7
 8029916:	f85d 7b04 	ldr.w	r7, [sp], #4
 802991a:	4770      	bx	lr
 802991c:	e000ed00 	.word	0xe000ed00

08029920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8029920:	b480      	push	{r7}
 8029922:	b083      	sub	sp, #12
 8029924:	af00      	add	r7, sp, #0
 8029926:	4603      	mov	r3, r0
 8029928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802992a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802992e:	2b00      	cmp	r3, #0
 8029930:	db0b      	blt.n	802994a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8029932:	4908      	ldr	r1, [pc, #32]	; (8029954 <__NVIC_EnableIRQ+0x34>)
 8029934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029938:	095b      	lsrs	r3, r3, #5
 802993a:	79fa      	ldrb	r2, [r7, #7]
 802993c:	f002 021f 	and.w	r2, r2, #31
 8029940:	2001      	movs	r0, #1
 8029942:	fa00 f202 	lsl.w	r2, r0, r2
 8029946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802994a:	370c      	adds	r7, #12
 802994c:	46bd      	mov	sp, r7
 802994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029952:	4770      	bx	lr
 8029954:	e000e100 	.word	0xe000e100

08029958 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8029958:	b480      	push	{r7}
 802995a:	b083      	sub	sp, #12
 802995c:	af00      	add	r7, sp, #0
 802995e:	4603      	mov	r3, r0
 8029960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029966:	2b00      	cmp	r3, #0
 8029968:	db10      	blt.n	802998c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802996a:	490b      	ldr	r1, [pc, #44]	; (8029998 <__NVIC_DisableIRQ+0x40>)
 802996c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029970:	095b      	lsrs	r3, r3, #5
 8029972:	79fa      	ldrb	r2, [r7, #7]
 8029974:	f002 021f 	and.w	r2, r2, #31
 8029978:	2001      	movs	r0, #1
 802997a:	fa00 f202 	lsl.w	r2, r0, r2
 802997e:	3320      	adds	r3, #32
 8029980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8029984:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8029988:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 802998c:	370c      	adds	r7, #12
 802998e:	46bd      	mov	sp, r7
 8029990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029994:	4770      	bx	lr
 8029996:	bf00      	nop
 8029998:	e000e100 	.word	0xe000e100

0802999c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802999c:	b480      	push	{r7}
 802999e:	b083      	sub	sp, #12
 80299a0:	af00      	add	r7, sp, #0
 80299a2:	4603      	mov	r3, r0
 80299a4:	6039      	str	r1, [r7, #0]
 80299a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80299a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80299ac:	2b00      	cmp	r3, #0
 80299ae:	db0a      	blt.n	80299c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80299b0:	490d      	ldr	r1, [pc, #52]	; (80299e8 <__NVIC_SetPriority+0x4c>)
 80299b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80299b6:	683a      	ldr	r2, [r7, #0]
 80299b8:	b2d2      	uxtb	r2, r2
 80299ba:	0092      	lsls	r2, r2, #2
 80299bc:	b2d2      	uxtb	r2, r2
 80299be:	440b      	add	r3, r1
 80299c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80299c4:	e00a      	b.n	80299dc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80299c6:	4909      	ldr	r1, [pc, #36]	; (80299ec <__NVIC_SetPriority+0x50>)
 80299c8:	79fb      	ldrb	r3, [r7, #7]
 80299ca:	f003 030f 	and.w	r3, r3, #15
 80299ce:	3b04      	subs	r3, #4
 80299d0:	683a      	ldr	r2, [r7, #0]
 80299d2:	b2d2      	uxtb	r2, r2
 80299d4:	0092      	lsls	r2, r2, #2
 80299d6:	b2d2      	uxtb	r2, r2
 80299d8:	440b      	add	r3, r1
 80299da:	761a      	strb	r2, [r3, #24]
  }
}
 80299dc:	370c      	adds	r7, #12
 80299de:	46bd      	mov	sp, r7
 80299e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299e4:	4770      	bx	lr
 80299e6:	bf00      	nop
 80299e8:	e000e100 	.word	0xe000e100
 80299ec:	e000ed00 	.word	0xe000ed00

080299f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80299f0:	b480      	push	{r7}
 80299f2:	b089      	sub	sp, #36	; 0x24
 80299f4:	af00      	add	r7, sp, #0
 80299f6:	60f8      	str	r0, [r7, #12]
 80299f8:	60b9      	str	r1, [r7, #8]
 80299fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80299fc:	68fb      	ldr	r3, [r7, #12]
 80299fe:	f003 0307 	and.w	r3, r3, #7
 8029a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8029a04:	69fb      	ldr	r3, [r7, #28]
 8029a06:	f1c3 0307 	rsb	r3, r3, #7
 8029a0a:	2b06      	cmp	r3, #6
 8029a0c:	bf28      	it	cs
 8029a0e:	2306      	movcs	r3, #6
 8029a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8029a12:	69fb      	ldr	r3, [r7, #28]
 8029a14:	3306      	adds	r3, #6
 8029a16:	2b06      	cmp	r3, #6
 8029a18:	d902      	bls.n	8029a20 <NVIC_EncodePriority+0x30>
 8029a1a:	69fb      	ldr	r3, [r7, #28]
 8029a1c:	3b01      	subs	r3, #1
 8029a1e:	e000      	b.n	8029a22 <NVIC_EncodePriority+0x32>
 8029a20:	2300      	movs	r3, #0
 8029a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029a24:	69bb      	ldr	r3, [r7, #24]
 8029a26:	2201      	movs	r2, #1
 8029a28:	fa02 f303 	lsl.w	r3, r2, r3
 8029a2c:	1e5a      	subs	r2, r3, #1
 8029a2e:	68bb      	ldr	r3, [r7, #8]
 8029a30:	401a      	ands	r2, r3
 8029a32:	697b      	ldr	r3, [r7, #20]
 8029a34:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8029a36:	697b      	ldr	r3, [r7, #20]
 8029a38:	2101      	movs	r1, #1
 8029a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8029a3e:	1e59      	subs	r1, r3, #1
 8029a40:	687b      	ldr	r3, [r7, #4]
 8029a42:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8029a44:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8029a46:	4618      	mov	r0, r3
 8029a48:	3724      	adds	r7, #36	; 0x24
 8029a4a:	46bd      	mov	sp, r7
 8029a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a50:	4770      	bx	lr
 8029a52:	bf00      	nop

08029a54 <XMC_ECAT_SetPortControl>:
 * \par
 * The function sets the port control by writing the configuration into the ECAT CON register.
 *
 */
__STATIC_INLINE void XMC_ECAT_SetPortControl(const XMC_ECAT_PORT_CTRL_t port_ctrl)
{
 8029a54:	b480      	push	{r7}
 8029a56:	b085      	sub	sp, #20
 8029a58:	af00      	add	r7, sp, #0
 8029a5a:	1d3b      	adds	r3, r7, #4
 8029a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ECAT0_CON->CON = (uint32_t)port_ctrl.common.raw;
 8029a60:	4a06      	ldr	r2, [pc, #24]	; (8029a7c <XMC_ECAT_SetPortControl+0x28>)
 8029a62:	687b      	ldr	r3, [r7, #4]
 8029a64:	6013      	str	r3, [r2, #0]
  ECAT0_CON->CONP0 = (uint32_t)port_ctrl.port0.raw;
 8029a66:	4a05      	ldr	r2, [pc, #20]	; (8029a7c <XMC_ECAT_SetPortControl+0x28>)
 8029a68:	68bb      	ldr	r3, [r7, #8]
 8029a6a:	6053      	str	r3, [r2, #4]
  ECAT0_CON->CONP1 = (uint32_t)port_ctrl.port1.raw;
 8029a6c:	4a03      	ldr	r2, [pc, #12]	; (8029a7c <XMC_ECAT_SetPortControl+0x28>)
 8029a6e:	68fb      	ldr	r3, [r7, #12]
 8029a70:	6093      	str	r3, [r2, #8]
}
 8029a72:	3714      	adds	r7, #20
 8029a74:	46bd      	mov	sp, r7
 8029a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a7a:	4770      	bx	lr
 8029a7c:	500041b0 	.word	0x500041b0

08029a80 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8029a80:	b580      	push	{r7, lr}
 8029a82:	b082      	sub	sp, #8
 8029a84:	af00      	add	r7, sp, #0
 8029a86:	6078      	str	r0, [r7, #4]
 8029a88:	460b      	mov	r3, r1
 8029a8a:	807b      	strh	r3, [r7, #2]
 8029a8c:	4613      	mov	r3, r2
 8029a8e:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8029a90:	887b      	ldrh	r3, [r7, #2]
 8029a92:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8029a96:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8029a9a:	883a      	ldrh	r2, [r7, #0]
 8029a9c:	6878      	ldr	r0, [r7, #4]
 8029a9e:	4619      	mov	r1, r3
 8029aa0:	f001 f8ba 	bl	802ac18 <memcpy>
}
 8029aa4:	3708      	adds	r7, #8
 8029aa6:	46bd      	mov	sp, r7
 8029aa8:	bd80      	pop	{r7, pc}
 8029aaa:	bf00      	nop

08029aac <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8029aac:	b580      	push	{r7, lr}
 8029aae:	b082      	sub	sp, #8
 8029ab0:	af00      	add	r7, sp, #0
 8029ab2:	6078      	str	r0, [r7, #4]
 8029ab4:	460b      	mov	r3, r1
 8029ab6:	807b      	strh	r3, [r7, #2]
 8029ab8:	4613      	mov	r3, r2
 8029aba:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8029abc:	887b      	ldrh	r3, [r7, #2]
 8029abe:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8029ac2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8029ac6:	883a      	ldrh	r2, [r7, #0]
 8029ac8:	4618      	mov	r0, r3
 8029aca:	6879      	ldr	r1, [r7, #4]
 8029acc:	f001 f8a4 	bl	802ac18 <memcpy>
}
 8029ad0:	3708      	adds	r7, #8
 8029ad2:	46bd      	mov	sp, r7
 8029ad4:	bd80      	pop	{r7, pc}
 8029ad6:	bf00      	nop

08029ad8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8029ad8:	b580      	push	{r7, lr}
 8029ada:	b082      	sub	sp, #8
 8029adc:	af00      	add	r7, sp, #0
 8029ade:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8029ae0:	687b      	ldr	r3, [r7, #4]
 8029ae2:	781b      	ldrb	r3, [r3, #0]
 8029ae4:	b25b      	sxtb	r3, r3
 8029ae6:	4618      	mov	r0, r3
 8029ae8:	f7ff ff1a 	bl	8029920 <__NVIC_EnableIRQ>
}
 8029aec:	3708      	adds	r7, #8
 8029aee:	46bd      	mov	sp, r7
 8029af0:	bd80      	pop	{r7, pc}
 8029af2:	bf00      	nop

08029af4 <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 8029af4:	b580      	push	{r7, lr}
 8029af6:	b082      	sub	sp, #8
 8029af8:	af00      	add	r7, sp, #0
 8029afa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8029afc:	687b      	ldr	r3, [r7, #4]
 8029afe:	781b      	ldrb	r3, [r3, #0]
 8029b00:	b25b      	sxtb	r3, r3
 8029b02:	4618      	mov	r0, r3
 8029b04:	f7ff ff28 	bl	8029958 <__NVIC_DisableIRQ>
}
 8029b08:	3708      	adds	r7, #8
 8029b0a:	46bd      	mov	sp, r7
 8029b0c:	bd80      	pop	{r7, pc}
 8029b0e:	bf00      	nop

08029b10 <HW_Init>:
  __set_PRIMASK(status);
}

/* EtherCAT Beckhoff HW abstraction layer interface API to initialize XMC ESC */
UINT16 HW_Init(void)
{
 8029b10:	b580      	push	{r7, lr}
 8029b12:	b088      	sub	sp, #32
 8029b14:	af00      	add	r7, sp, #0
  uint8_t i;
  XMC_ECAT_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;

  /* EEPROM interface API registration */
  pEEPROM = &aEepromData[0U];
 8029b16:	4bda      	ldr	r3, [pc, #872]	; (8029e80 <HW_Init+0x370>)
 8029b18:	4ada      	ldr	r2, [pc, #872]	; (8029e84 <HW_Init+0x374>)
 8029b1a:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Reload = HW_EepromReload;
 8029b1c:	4bda      	ldr	r3, [pc, #872]	; (8029e88 <HW_Init+0x378>)
 8029b1e:	4adb      	ldr	r2, [pc, #876]	; (8029e8c <HW_Init+0x37c>)
 8029b20:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Write  = HW_EepromWrite;
 8029b22:	4bdb      	ldr	r3, [pc, #876]	; (8029e90 <HW_Init+0x380>)
 8029b24:	4adb      	ldr	r2, [pc, #876]	; (8029e94 <HW_Init+0x384>)
 8029b26:	601a      	str	r2, [r3, #0]

  /* EtherCAT slave physical layer pin settings */
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8029b28:	2300      	movs	r3, #0
 8029b2a:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LINK_STATUS, &gpio_config);
 8029b2c:	1d3b      	adds	r3, r7, #4
 8029b2e:	48da      	ldr	r0, [pc, #872]	; (8029e98 <HW_Init+0x388>)
 8029b30:	210f      	movs	r1, #15
 8029b32:	461a      	mov	r2, r3
 8029b34:	f7fd fa98 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD3, &gpio_config);
 8029b38:	1d3b      	adds	r3, r7, #4
 8029b3a:	48d8      	ldr	r0, [pc, #864]	; (8029e9c <HW_Init+0x38c>)
 8029b3c:	2107      	movs	r1, #7
 8029b3e:	461a      	mov	r2, r3
 8029b40:	f7fd fa92 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD2, &gpio_config);
 8029b44:	1d3b      	adds	r3, r7, #4
 8029b46:	48d5      	ldr	r0, [pc, #852]	; (8029e9c <HW_Init+0x38c>)
 8029b48:	2102      	movs	r1, #2
 8029b4a:	461a      	mov	r2, r3
 8029b4c:	f7fd fa8c 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD1, &gpio_config);
 8029b50:	1d3b      	adds	r3, r7, #4
 8029b52:	48d2      	ldr	r0, [pc, #840]	; (8029e9c <HW_Init+0x38c>)
 8029b54:	2101      	movs	r1, #1
 8029b56:	461a      	mov	r2, r3
 8029b58:	f7fd fa86 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD0, &gpio_config);
 8029b5c:	1d3b      	adds	r3, r7, #4
 8029b5e:	48cf      	ldr	r0, [pc, #828]	; (8029e9c <HW_Init+0x38c>)
 8029b60:	2100      	movs	r1, #0
 8029b62:	461a      	mov	r2, r3
 8029b64:	f7fd fa80 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_DV, &gpio_config);
 8029b68:	1d3b      	adds	r3, r7, #4
 8029b6a:	48cc      	ldr	r0, [pc, #816]	; (8029e9c <HW_Init+0x38c>)
 8029b6c:	2106      	movs	r1, #6
 8029b6e:	461a      	mov	r2, r3
 8029b70:	f7fd fa7a 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_CLK, &gpio_config);
 8029b74:	1d3b      	adds	r3, r7, #4
 8029b76:	48c9      	ldr	r0, [pc, #804]	; (8029e9c <HW_Init+0x38c>)
 8029b78:	2104      	movs	r1, #4
 8029b7a:	461a      	mov	r2, r3
 8029b7c:	f7fd fa74 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_ERR, &gpio_config);
 8029b80:	1d3b      	adds	r3, r7, #4
 8029b82:	48c7      	ldr	r0, [pc, #796]	; (8029ea0 <HW_Init+0x390>)
 8029b84:	2106      	movs	r1, #6
 8029b86:	461a      	mov	r2, r3
 8029b88:	f7fd fa6e 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_TX_CLK, &gpio_config);
 8029b8c:	1d3b      	adds	r3, r7, #4
 8029b8e:	48c3      	ldr	r0, [pc, #780]	; (8029e9c <HW_Init+0x38c>)
 8029b90:	2105      	movs	r1, #5
 8029b92:	461a      	mov	r2, r3
 8029b94:	f7fd fa68 	bl	8027068 <XMC_GPIO_Init>

  XMC_GPIO_Init(ECAT_P1_LINK_STATUS, &gpio_config);
 8029b98:	1d3b      	adds	r3, r7, #4
 8029b9a:	48c2      	ldr	r0, [pc, #776]	; (8029ea4 <HW_Init+0x394>)
 8029b9c:	2104      	movs	r1, #4
 8029b9e:	461a      	mov	r2, r3
 8029ba0:	f7fd fa62 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD3, &gpio_config);
 8029ba4:	1d3b      	adds	r3, r7, #4
 8029ba6:	48c0      	ldr	r0, [pc, #768]	; (8029ea8 <HW_Init+0x398>)
 8029ba8:	2104      	movs	r1, #4
 8029baa:	461a      	mov	r2, r3
 8029bac:	f7fd fa5c 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD2, &gpio_config);
 8029bb0:	1d3b      	adds	r3, r7, #4
 8029bb2:	48bd      	ldr	r0, [pc, #756]	; (8029ea8 <HW_Init+0x398>)
 8029bb4:	2105      	movs	r1, #5
 8029bb6:	461a      	mov	r2, r3
 8029bb8:	f7fd fa56 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD1, &gpio_config);
 8029bbc:	1d3b      	adds	r3, r7, #4
 8029bbe:	48ba      	ldr	r0, [pc, #744]	; (8029ea8 <HW_Init+0x398>)
 8029bc0:	2106      	movs	r1, #6
 8029bc2:	461a      	mov	r2, r3
 8029bc4:	f7fd fa50 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD0, &gpio_config);
 8029bc8:	1d3b      	adds	r3, r7, #4
 8029bca:	48b7      	ldr	r0, [pc, #732]	; (8029ea8 <HW_Init+0x398>)
 8029bcc:	210b      	movs	r1, #11
 8029bce:	461a      	mov	r2, r3
 8029bd0:	f7fd fa4a 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_DV, &gpio_config);
 8029bd4:	1d3b      	adds	r3, r7, #4
 8029bd6:	48b4      	ldr	r0, [pc, #720]	; (8029ea8 <HW_Init+0x398>)
 8029bd8:	2109      	movs	r1, #9
 8029bda:	461a      	mov	r2, r3
 8029bdc:	f7fd fa44 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_CLK, &gpio_config);
 8029be0:	1d3b      	adds	r3, r7, #4
 8029be2:	48b1      	ldr	r0, [pc, #708]	; (8029ea8 <HW_Init+0x398>)
 8029be4:	2101      	movs	r1, #1
 8029be6:	461a      	mov	r2, r3
 8029be8:	f7fd fa3e 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_ERR, &gpio_config);
 8029bec:	1d3b      	adds	r3, r7, #4
 8029bee:	48af      	ldr	r0, [pc, #700]	; (8029eac <HW_Init+0x39c>)
 8029bf0:	2102      	movs	r1, #2
 8029bf2:	461a      	mov	r2, r3
 8029bf4:	f7fd fa38 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_TX_CLK, &gpio_config);
 8029bf8:	1d3b      	adds	r3, r7, #4
 8029bfa:	48ab      	ldr	r0, [pc, #684]	; (8029ea8 <HW_Init+0x398>)
 8029bfc:	210a      	movs	r1, #10
 8029bfe:	461a      	mov	r2, r3
 8029c00:	f7fd fa32 	bl	8027068 <XMC_GPIO_Init>

  port_control.common.enable_rstreq = false;
 8029c04:	7c3b      	ldrb	r3, [r7, #16]
 8029c06:	f36f 0300 	bfc	r3, #0, #1
 8029c0a:	743b      	strb	r3, [r7, #16]
  port_control.common.mdio = XMC_ECAT_PORT_CTRL_MDIO_P0_12;
 8029c0c:	7cbb      	ldrb	r3, [r7, #18]
 8029c0e:	f36f 1387 	bfc	r3, #6, #2
 8029c12:	74bb      	strb	r3, [r7, #18]
  port_control.common.phyaddr_offset = 0;
 8029c14:	7cbb      	ldrb	r3, [r7, #18]
 8029c16:	f36f 0304 	bfc	r3, #0, #5
 8029c1a:	74bb      	strb	r3, [r7, #18]
  port_control.common.latch_input0 = XMC_ECAT_PORT_CTRL_LATCHIN0_P14_5;
 8029c1c:	7c7b      	ldrb	r3, [r7, #17]
 8029c1e:	f36f 0301 	bfc	r3, #0, #2
 8029c22:	747b      	strb	r3, [r7, #17]
  port_control.common.latch_input1 = XMC_ECAT_PORT_CTRL_LATCHIN1_P14_4;
 8029c24:	7c7b      	ldrb	r3, [r7, #17]
 8029c26:	f36f 1305 	bfc	r3, #4, #2
 8029c2a:	747b      	strb	r3, [r7, #17]
  port_control.port0.rxd0 = XMC_ECAT_PORT0_CTRL_RXD0_P5_0;
 8029c2c:	7d3b      	ldrb	r3, [r7, #20]
 8029c2e:	2201      	movs	r2, #1
 8029c30:	f362 0301 	bfi	r3, r2, #0, #2
 8029c34:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd1 = XMC_ECAT_PORT0_CTRL_RXD1_P5_1;
 8029c36:	7d3b      	ldrb	r3, [r7, #20]
 8029c38:	2201      	movs	r2, #1
 8029c3a:	f362 0383 	bfi	r3, r2, #2, #2
 8029c3e:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd2 = XMC_ECAT_PORT0_CTRL_RXD2_P5_2;
 8029c40:	7d3b      	ldrb	r3, [r7, #20]
 8029c42:	2201      	movs	r2, #1
 8029c44:	f362 1305 	bfi	r3, r2, #4, #2
 8029c48:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd3 = XMC_ECAT_PORT0_CTRL_RXD3_P5_7;
 8029c4a:	7d3b      	ldrb	r3, [r7, #20]
 8029c4c:	2201      	movs	r2, #1
 8029c4e:	f362 1387 	bfi	r3, r2, #6, #2
 8029c52:	753b      	strb	r3, [r7, #20]
  port_control.port0.rx_clk = XMC_ECAT_PORT0_CTRL_RX_CLK_P5_4;
 8029c54:	7d7b      	ldrb	r3, [r7, #21]
 8029c56:	2201      	movs	r2, #1
 8029c58:	f362 1305 	bfi	r3, r2, #4, #2
 8029c5c:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_dv = XMC_ECAT_PORT0_CTRL_RX_DV_P5_6;
 8029c5e:	7d7b      	ldrb	r3, [r7, #21]
 8029c60:	2201      	movs	r2, #1
 8029c62:	f362 0383 	bfi	r3, r2, #2, #2
 8029c66:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_err = XMC_ECAT_PORT0_CTRL_RX_ERR_P2_6;
 8029c68:	7d7b      	ldrb	r3, [r7, #21]
 8029c6a:	2201      	movs	r2, #1
 8029c6c:	f362 0301 	bfi	r3, r2, #0, #2
 8029c70:	757b      	strb	r3, [r7, #21]
  port_control.port0.link = XMC_ECAT_PORT0_CTRL_LINK_P1_15;
 8029c72:	7dbb      	ldrb	r3, [r7, #22]
 8029c74:	2201      	movs	r2, #1
 8029c76:	f362 0301 	bfi	r3, r2, #0, #2
 8029c7a:	75bb      	strb	r3, [r7, #22]
  port_control.port0.tx_clk = XMC_ECAT_PORT0_CTRL_TX_CLK_P5_5;
 8029c7c:	7dfb      	ldrb	r3, [r7, #23]
 8029c7e:	2201      	movs	r2, #1
 8029c80:	f362 1305 	bfi	r3, r2, #4, #2
 8029c84:	75fb      	strb	r3, [r7, #23]
  port_control.port0.tx_shift = XMC_ECAT_PORT0_CTRL_TX_SHIFT_0NS; 
 8029c86:	7dfb      	ldrb	r3, [r7, #23]
 8029c88:	f36f 1387 	bfc	r3, #6, #2
 8029c8c:	75fb      	strb	r3, [r7, #23]
  port_control.port1.rxd0 = XMC_ECAT_PORT1_CTRL_RXD0_P0_11;
 8029c8e:	7e3b      	ldrb	r3, [r7, #24]
 8029c90:	f36f 0301 	bfc	r3, #0, #2
 8029c94:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd1 = XMC_ECAT_PORT1_CTRL_RXD1_P0_6;
 8029c96:	7e3b      	ldrb	r3, [r7, #24]
 8029c98:	f36f 0383 	bfc	r3, #2, #2
 8029c9c:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd2 = XMC_ECAT_PORT1_CTRL_RXD2_P0_5;
 8029c9e:	7e3b      	ldrb	r3, [r7, #24]
 8029ca0:	f36f 1305 	bfc	r3, #4, #2
 8029ca4:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd3 = XMC_ECAT_PORT1_CTRL_RXD3_P0_4;
 8029ca6:	7e3b      	ldrb	r3, [r7, #24]
 8029ca8:	f36f 1387 	bfc	r3, #6, #2
 8029cac:	763b      	strb	r3, [r7, #24]
  port_control.port1.rx_clk = XMC_ECAT_PORT1_CTRL_RX_CLK_P0_1;
 8029cae:	7e7b      	ldrb	r3, [r7, #25]
 8029cb0:	f36f 1305 	bfc	r3, #4, #2
 8029cb4:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_dv = XMC_ECAT_PORT1_CTRL_RX_DV_P0_9;
 8029cb6:	7e7b      	ldrb	r3, [r7, #25]
 8029cb8:	f36f 0383 	bfc	r3, #2, #2
 8029cbc:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_err = XMC_ECAT_PORT1_CTRL_RX_ERR_P15_2;
 8029cbe:	7e7b      	ldrb	r3, [r7, #25]
 8029cc0:	2201      	movs	r2, #1
 8029cc2:	f362 0301 	bfi	r3, r2, #0, #2
 8029cc6:	767b      	strb	r3, [r7, #25]
  port_control.port1.link = XMC_ECAT_PORT1_CTRL_LINK_P3_4;
 8029cc8:	7ebb      	ldrb	r3, [r7, #26]
 8029cca:	f36f 0301 	bfc	r3, #0, #2
 8029cce:	76bb      	strb	r3, [r7, #26]
  port_control.port1.tx_clk = XMC_ECAT_PORT1_CTRL_TX_CLK_P0_10;
 8029cd0:	7efb      	ldrb	r3, [r7, #27]
 8029cd2:	f36f 1305 	bfc	r3, #4, #2
 8029cd6:	76fb      	strb	r3, [r7, #27]
  port_control.port1.tx_shift = XMC_ECAT_PORT1_CTRL_TX_SHIFT_0NS;
 8029cd8:	7efb      	ldrb	r3, [r7, #27]
 8029cda:	f36f 1387 	bfc	r3, #6, #2
 8029cde:	76fb      	strb	r3, [r7, #27]
  XMC_ECAT_SetPortControl(port_control);
 8029ce0:	f107 0310 	add.w	r3, r7, #16
 8029ce4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029ce8:	f7ff feb4 	bl	8029a54 <XMC_ECAT_SetPortControl>

  /* EtherCAT slave enable and intialization using LLD function */
  XMC_ECAT_Init((XMC_ECAT_CONFIG_t *)(void*)aEepromData);
 8029cec:	4865      	ldr	r0, [pc, #404]	; (8029e84 <HW_Init+0x374>)
 8029cee:	f7fe fbb9 	bl	8028464 <XMC_ECAT_Init>

  /* EtherCAT slave physical layer pin configurations */
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE;
 8029cf2:	2302      	movs	r3, #2
 8029cf4:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029cf6:	23a0      	movs	r3, #160	; 0xa0
 8029cf8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD3, &gpio_config);
 8029cfa:	1d3b      	adds	r3, r7, #4
 8029cfc:	486c      	ldr	r0, [pc, #432]	; (8029eb0 <HW_Init+0x3a0>)
 8029cfe:	2106      	movs	r1, #6
 8029d00:	461a      	mov	r2, r3
 8029d02:	f7fd f9b1 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d06:	23a0      	movs	r3, #160	; 0xa0
 8029d08:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD2, &gpio_config);
 8029d0a:	1d3b      	adds	r3, r7, #4
 8029d0c:	4868      	ldr	r0, [pc, #416]	; (8029eb0 <HW_Init+0x3a0>)
 8029d0e:	2105      	movs	r1, #5
 8029d10:	461a      	mov	r2, r3
 8029d12:	f7fd f9a9 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d16:	23a0      	movs	r3, #160	; 0xa0
 8029d18:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD1, &gpio_config);
 8029d1a:	1d3b      	adds	r3, r7, #4
 8029d1c:	4864      	ldr	r0, [pc, #400]	; (8029eb0 <HW_Init+0x3a0>)
 8029d1e:	2104      	movs	r1, #4
 8029d20:	461a      	mov	r2, r3
 8029d22:	f7fd f9a1 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d26:	23a0      	movs	r3, #160	; 0xa0
 8029d28:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD0, &gpio_config);
 8029d2a:	1d3b      	adds	r3, r7, #4
 8029d2c:	4860      	ldr	r0, [pc, #384]	; (8029eb0 <HW_Init+0x3a0>)
 8029d2e:	2102      	movs	r1, #2
 8029d30:	461a      	mov	r2, r3
 8029d32:	f7fd f999 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d36:	23a0      	movs	r3, #160	; 0xa0
 8029d38:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TX_EN, &gpio_config);
 8029d3a:	1d3b      	adds	r3, r7, #4
 8029d3c:	485c      	ldr	r0, [pc, #368]	; (8029eb0 <HW_Init+0x3a0>)
 8029d3e:	2101      	movs	r1, #1
 8029d40:	461a      	mov	r2, r3
 8029d42:	f7fd f991 	bl	8027068 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029d46:	2388      	movs	r3, #136	; 0x88
 8029d48:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD3, &gpio_config);
 8029d4a:	1d3b      	adds	r3, r7, #4
 8029d4c:	4856      	ldr	r0, [pc, #344]	; (8029ea8 <HW_Init+0x398>)
 8029d4e:	2103      	movs	r1, #3
 8029d50:	461a      	mov	r2, r3
 8029d52:	f7fd f989 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029d56:	2388      	movs	r3, #136	; 0x88
 8029d58:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD2, &gpio_config);
 8029d5a:	1d3b      	adds	r3, r7, #4
 8029d5c:	4852      	ldr	r0, [pc, #328]	; (8029ea8 <HW_Init+0x398>)
 8029d5e:	2102      	movs	r1, #2
 8029d60:	461a      	mov	r2, r3
 8029d62:	f7fd f981 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029d66:	2398      	movs	r3, #152	; 0x98
 8029d68:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD1, &gpio_config);
 8029d6a:	1d3b      	adds	r3, r7, #4
 8029d6c:	484d      	ldr	r0, [pc, #308]	; (8029ea4 <HW_Init+0x394>)
 8029d6e:	2102      	movs	r1, #2
 8029d70:	461a      	mov	r2, r3
 8029d72:	f7fd f979 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029d76:	2398      	movs	r3, #152	; 0x98
 8029d78:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD0, &gpio_config);
 8029d7a:	1d3b      	adds	r3, r7, #4
 8029d7c:	4849      	ldr	r0, [pc, #292]	; (8029ea4 <HW_Init+0x394>)
 8029d7e:	2101      	movs	r1, #1
 8029d80:	461a      	mov	r2, r3
 8029d82:	f7fd f971 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d86:	23a0      	movs	r3, #160	; 0xa0
 8029d88:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TX_EN, &gpio_config);
 8029d8a:	1d3b      	adds	r3, r7, #4
 8029d8c:	4845      	ldr	r0, [pc, #276]	; (8029ea4 <HW_Init+0x394>)
 8029d8e:	2100      	movs	r1, #0
 8029d90:	461a      	mov	r2, r3
 8029d92:	f7fd f969 	bl	8027068 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029d96:	23a0      	movs	r3, #160	; 0xa0
 8029d98:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_CLK25, &gpio_config);
 8029d9a:	1d3b      	adds	r3, r7, #4
 8029d9c:	4844      	ldr	r0, [pc, #272]	; (8029eb0 <HW_Init+0x3a0>)
 8029d9e:	2100      	movs	r1, #0
 8029da0:	461a      	mov	r2, r3
 8029da2:	f7fd f961 	bl	8027068 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029da6:	23a0      	movs	r3, #160	; 0xa0
 8029da8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MCLK, &gpio_config);
 8029daa:	1d3b      	adds	r3, r7, #4
 8029dac:	483d      	ldr	r0, [pc, #244]	; (8029ea4 <HW_Init+0x394>)
 8029dae:	2103      	movs	r1, #3
 8029db0:	461a      	mov	r2, r3
 8029db2:	f7fd f959 	bl	8027068 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8029db6:	2300      	movs	r3, #0
 8029db8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MDO, &gpio_config);
 8029dba:	1d3b      	adds	r3, r7, #4
 8029dbc:	483a      	ldr	r0, [pc, #232]	; (8029ea8 <HW_Init+0x398>)
 8029dbe:	210c      	movs	r1, #12
 8029dc0:	461a      	mov	r2, r3
 8029dc2:	f7fd f951 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_MDO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 8029dc6:	4838      	ldr	r0, [pc, #224]	; (8029ea8 <HW_Init+0x398>)
 8029dc8:	210c      	movs	r1, #12
 8029dca:	2201      	movs	r2, #1
 8029dcc:	f7fe fc8a 	bl	80286e4 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029dd0:	23a0      	movs	r3, #160	; 0xa0
 8029dd2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LED_LINK_ACT, &gpio_config);
 8029dd4:	1d3b      	adds	r3, r7, #4
 8029dd6:	4836      	ldr	r0, [pc, #216]	; (8029eb0 <HW_Init+0x3a0>)
 8029dd8:	2103      	movs	r1, #3
 8029dda:	461a      	mov	r2, r3
 8029ddc:	f7fd f944 	bl	8027068 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029de0:	2388      	movs	r3, #136	; 0x88
 8029de2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_LED_LINK_ACT, &gpio_config);
 8029de4:	1d3b      	adds	r3, r7, #4
 8029de6:	482f      	ldr	r0, [pc, #188]	; (8029ea4 <HW_Init+0x394>)
 8029de8:	210c      	movs	r1, #12
 8029dea:	461a      	mov	r2, r3
 8029dec:	f7fd f93c 	bl	8027068 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029df0:	2398      	movs	r3, #152	; 0x98
 8029df2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_RUN, &gpio_config);
 8029df4:	1d3b      	adds	r3, r7, #4
 8029df6:	482c      	ldr	r0, [pc, #176]	; (8029ea8 <HW_Init+0x398>)
 8029df8:	2108      	movs	r1, #8
 8029dfa:	461a      	mov	r2, r3
 8029dfc:	f7fd f934 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_RUN, XMC_GPIO_HWCTRL_DISABLED);
 8029e00:	4829      	ldr	r0, [pc, #164]	; (8029ea8 <HW_Init+0x398>)
 8029e02:	2108      	movs	r1, #8
 8029e04:	2200      	movs	r2, #0
 8029e06:	f7fe fc6d 	bl	80286e4 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8029e0a:	2398      	movs	r3, #152	; 0x98
 8029e0c:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_ERR, &gpio_config);
 8029e0e:	1d3b      	adds	r3, r7, #4
 8029e10:	4825      	ldr	r0, [pc, #148]	; (8029ea8 <HW_Init+0x398>)
 8029e12:	2107      	movs	r1, #7
 8029e14:	461a      	mov	r2, r3
 8029e16:	f7fd f927 	bl	8027068 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_ERR, XMC_GPIO_HWCTRL_DISABLED);
 8029e1a:	4823      	ldr	r0, [pc, #140]	; (8029ea8 <HW_Init+0x398>)
 8029e1c:	2107      	movs	r1, #7
 8029e1e:	2200      	movs	r2, #0
 8029e20:	f7fe fc60 	bl	80286e4 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8029e24:	2388      	movs	r3, #136	; 0x88
 8029e26:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);
 8029e28:	1d3b      	adds	r3, r7, #4
 8029e2a:	481f      	ldr	r0, [pc, #124]	; (8029ea8 <HW_Init+0x398>)
 8029e2c:	2100      	movs	r1, #0
 8029e2e:	461a      	mov	r2, r3
 8029e30:	f7fd f91a 	bl	8027068 <XMC_GPIO_Init>

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8029e34:	2300      	movs	r3, #0
 8029e36:	77fb      	strb	r3, [r7, #31]
 8029e38:	e006      	b.n	8029e48 <HW_Init+0x338>
  {
    XMC_ECAT_DisableSyncManChannel(i);
 8029e3a:	7ffb      	ldrb	r3, [r7, #31]
 8029e3c:	4618      	mov	r0, r3
 8029e3e:	f7fe fb61 	bl	8028504 <XMC_ECAT_DisableSyncManChannel>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8029e42:	7ffb      	ldrb	r3, [r7, #31]
 8029e44:	3301      	adds	r3, #1
 8029e46:	77fb      	strb	r3, [r7, #31]
 8029e48:	7ffb      	ldrb	r3, [r7, #31]
 8029e4a:	2b07      	cmp	r3, #7
 8029e4c:	d9f5      	bls.n	8029e3a <HW_Init+0x32a>
  {
    XMC_ECAT_DisableSyncManChannel(i);
  }

  /* EtherCAT slave event disable */
  XMC_ECAT_DisableEvent(0xffffffffU);
 8029e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8029e52:	f7fe fb43 	bl	80284dc <XMC_ECAT_DisableEvent>

  /* ECAT interrupt priority settings */
  NVIC_SetPriority(ECAT0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8029e56:	f7ff fd55 	bl	8029904 <__NVIC_GetPriorityGrouping>
 8029e5a:	4603      	mov	r3, r0
 8029e5c:	4618      	mov	r0, r3
 8029e5e:	213f      	movs	r1, #63	; 0x3f
 8029e60:	2200      	movs	r2, #0
 8029e62:	f7ff fdc5 	bl	80299f0 <NVIC_EncodePriority>
 8029e66:	4603      	mov	r3, r0
 8029e68:	206d      	movs	r0, #109	; 0x6d
 8029e6a:	4619      	mov	r1, r3
 8029e6c:	f7ff fd96 	bl	802999c <__NVIC_SetPriority>
                                                     63U,
                                                     0U));

  /* EtherCAT slave interrupt enable */
  ENABLE_ESC_INT();
 8029e70:	f000 f8c2 	bl	8029ff8 <ENABLE_ESC_INT>

  return ((uint16_t)0U);
 8029e74:	2300      	movs	r3, #0
}
 8029e76:	4618      	mov	r0, r3
 8029e78:	3720      	adds	r7, #32
 8029e7a:	46bd      	mov	sp, r7
 8029e7c:	bd80      	pop	{r7, pc}
 8029e7e:	bf00      	nop
 8029e80:	1ffea814 	.word	0x1ffea814
 8029e84:	1ffe8be4 	.word	0x1ffe8be4
 8029e88:	1ffea820 	.word	0x1ffea820
 8029e8c:	08029f49 	.word	0x08029f49
 8029e90:	1ffea7d0 	.word	0x1ffea7d0
 8029e94:	08029eb5 	.word	0x08029eb5
 8029e98:	48028100 	.word	0x48028100
 8029e9c:	48028500 	.word	0x48028500
 8029ea0:	48028200 	.word	0x48028200
 8029ea4:	48028300 	.word	0x48028300
 8029ea8:	48028000 	.word	0x48028000
 8029eac:	48028f00 	.word	0x48028f00
 8029eb0:	48028600 	.word	0x48028600

08029eb4 <HW_EepromWrite>:
}


/* Beckhoff Hw abstraction layer interface API to write new configuration parameters to slave EEPROM area */
UINT16 HW_EepromWrite(UINT32 wordaddr)
{
 8029eb4:	b580      	push	{r7, lr}
 8029eb6:	b086      	sub	sp, #24
 8029eb8:	af00      	add	r7, sp, #0
 8029eba:	6078      	str	r0, [r7, #4]
  UINT32 status;
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8029ebc:	2300      	movs	r3, #0
 8029ebe:	827b      	strh	r3, [r7, #18]
  status = 0U;
 8029ec0:	2300      	movs	r3, #0
 8029ec2:	617b      	str	r3, [r7, #20]
  if ((wordaddr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029eca:	d830      	bhi.n	8029f2e <HW_EepromWrite+0x7a>
 8029ecc:	4b1b      	ldr	r3, [pc, #108]	; (8029f3c <HW_EepromWrite+0x88>)
 8029ece:	681b      	ldr	r3, [r3, #0]
 8029ed0:	2b00      	cmp	r3, #0
 8029ed2:	d02c      	beq.n	8029f2e <HW_EepromWrite+0x7a>
  {
     UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8029ed4:	4b19      	ldr	r3, [pc, #100]	; (8029f3c <HW_EepromWrite+0x88>)
 8029ed6:	681b      	ldr	r3, [r3, #0]
 8029ed8:	60fb      	str	r3, [r7, #12]
     HW_EscRead((MEM_ADDR *)(void*)&pData[(wordaddr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_WRITE_SIZE);
 8029eda:	687b      	ldr	r3, [r7, #4]
 8029edc:	005b      	lsls	r3, r3, #1
 8029ede:	68fa      	ldr	r2, [r7, #12]
 8029ee0:	4413      	add	r3, r2
 8029ee2:	4618      	mov	r0, r3
 8029ee4:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8029ee8:	2202      	movs	r2, #2
 8029eea:	f7ff fdc9 	bl	8029a80 <HW_EscRead>
     if ( (wordaddr == (uint32_t)7U) || (wordaddr ==  (((uint32_t)ESC_EEPROM_SIZE >> (uint32_t)1U) - (uint32_t)1U)) )
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	2b07      	cmp	r3, #7
 8029ef2:	d004      	beq.n	8029efe <HW_EepromWrite+0x4a>
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029efa:	4293      	cmp	r3, r2
 8029efc:	d117      	bne.n	8029f2e <HW_EepromWrite+0x7a>
     {
       /*lets program the complete EEPROM new prepare Data for EEPROM */
       if (E_EEPROM_XMC4_WriteArray((uint16_t)0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE) == true)
 8029efe:	2000      	movs	r0, #0
 8029f00:	490f      	ldr	r1, [pc, #60]	; (8029f40 <HW_EepromWrite+0x8c>)
 8029f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8029f06:	f7ff fa93 	bl	8029430 <E_EEPROM_XMC4_WriteArray>
 8029f0a:	4603      	mov	r3, r0
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	d00e      	beq.n	8029f2e <HW_EepromWrite+0x7a>
       {
         HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8029f10:	4b0c      	ldr	r3, [pc, #48]	; (8029f44 <HW_EepromWrite+0x90>)
 8029f12:	881b      	ldrh	r3, [r3, #0]
 8029f14:	827b      	strh	r3, [r7, #18]
         HW_EscWriteWord(EEPROMReg & (~ESC_EEPROM_BUSY_MASK),ESC_EEPROM_CONTROL_OFFSET);
 8029f16:	4a0b      	ldr	r2, [pc, #44]	; (8029f44 <HW_EepromWrite+0x90>)
 8029f18:	8a7b      	ldrh	r3, [r7, #18]
 8029f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8029f1e:	b29b      	uxth	r3, r3
 8029f20:	8013      	strh	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8029f22:	b672      	cpsid	i

         __disable_irq();
         /* Program the RAM contents to Emulated EEPROM*/
         status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 8029f24:	f7ff fadc 	bl	80294e0 <E_EEPROM_XMC4_UpdateFlashContents>
 8029f28:	4603      	mov	r3, r0
 8029f2a:	617b      	str	r3, [r7, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8029f2c:	b662      	cpsie	i
         __enable_irq();
       }
     }
   }

   return (uint16_t)status;
 8029f2e:	697b      	ldr	r3, [r7, #20]
 8029f30:	b29b      	uxth	r3, r3
}
 8029f32:	4618      	mov	r0, r3
 8029f34:	3718      	adds	r7, #24
 8029f36:	46bd      	mov	sp, r7
 8029f38:	bd80      	pop	{r7, pc}
 8029f3a:	bf00      	nop
 8029f3c:	1ffea814 	.word	0x1ffea814
 8029f40:	1ffe8be4 	.word	0x1ffe8be4
 8029f44:	54010502 	.word	0x54010502

08029f48 <HW_EepromReload>:

/* Beckhoff Hw abstraction layer interface API to reload slave EEPROM area */
UINT16 HW_EepromReload(void)
{
 8029f48:	b580      	push	{r7, lr}
 8029f4a:	b084      	sub	sp, #16
 8029f4c:	af00      	add	r7, sp, #0
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8029f4e:	2300      	movs	r3, #0
 8029f50:	81fb      	strh	r3, [r7, #14]
  UINT32 cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8029f52:	89fb      	ldrh	r3, [r7, #14]
 8029f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029f58:	607b      	str	r3, [r7, #4]
  UINT32 addr;
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 8029f5a:	4b1b      	ldr	r3, [pc, #108]	; (8029fc8 <HW_EepromReload+0x80>)
 8029f5c:	681b      	ldr	r3, [r3, #0]
 8029f5e:	60bb      	str	r3, [r7, #8]
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8029f60:	68bb      	ldr	r3, [r7, #8]
 8029f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029f66:	d826      	bhi.n	8029fb6 <HW_EepromReload+0x6e>
 8029f68:	4b18      	ldr	r3, [pc, #96]	; (8029fcc <HW_EepromReload+0x84>)
 8029f6a:	681b      	ldr	r3, [r3, #0]
 8029f6c:	2b00      	cmp	r3, #0
 8029f6e:	d022      	beq.n	8029fb6 <HW_EepromReload+0x6e>
  {
    UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8029f70:	4b16      	ldr	r3, [pc, #88]	; (8029fcc <HW_EepromReload+0x84>)
 8029f72:	681b      	ldr	r3, [r3, #0]
 8029f74:	603b      	str	r3, [r7, #0]
    do
    {
    HW_EscWrite((MEM_ADDR *)(void*)&pData[(addr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_READ_SIZE);
 8029f76:	68bb      	ldr	r3, [r7, #8]
 8029f78:	005b      	lsls	r3, r3, #1
 8029f7a:	683a      	ldr	r2, [r7, #0]
 8029f7c:	4413      	add	r3, r2
 8029f7e:	4618      	mov	r0, r3
 8029f80:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8029f84:	2208      	movs	r2, #8
 8029f86:	f7ff fd91 	bl	8029aac <HW_EscWrite>

     /*Clear error bits */
     EEPROMReg &= (uint16_t)(~(uint16_t)(ESC_EEPROM_ERROR_MASK));
 8029f8a:	89fb      	ldrh	r3, [r7, #14]
 8029f8c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8029f90:	81fb      	strh	r3, [r7, #14]

     /*ack current reload segment */
     HW_EscWriteWord(EEPROMReg,(uint32_t)ESC_EEPROM_CONTROL_OFFSET);
 8029f92:	4a0f      	ldr	r2, [pc, #60]	; (8029fd0 <HW_EepromReload+0x88>)
 8029f94:	89fb      	ldrh	r3, [r7, #14]
 8029f96:	8013      	strh	r3, [r2, #0]

     /* read EEPROM control (to check if the reload is still pending) */
     HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8029f98:	4b0d      	ldr	r3, [pc, #52]	; (8029fd0 <HW_EepromReload+0x88>)
 8029f9a:	881b      	ldrh	r3, [r3, #0]
 8029f9c:	81fb      	strh	r3, [r7, #14]
     cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8029f9e:	89fb      	ldrh	r3, [r7, #14]
 8029fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029fa4:	607b      	str	r3, [r7, #4]

     HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 8029fa6:	4b08      	ldr	r3, [pc, #32]	; (8029fc8 <HW_EepromReload+0x80>)
 8029fa8:	681b      	ldr	r3, [r3, #0]
 8029faa:	60bb      	str	r3, [r7, #8]

    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029fb2:	d0e0      	beq.n	8029f76 <HW_EepromReload+0x2e>
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
  {
 8029fb4:	e003      	b.n	8029fbe <HW_EepromReload+0x76>
    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
  }
  else
  {
    /* Set Error  */
    EEPROMReg |= (uint16_t)ESC_EEPROM_ERROR_CMD_ACK;
 8029fb6:	89fb      	ldrh	r3, [r7, #14]
 8029fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8029fbc:	81fb      	strh	r3, [r7, #14]
  }
  return 0U;
 8029fbe:	2300      	movs	r3, #0
}
 8029fc0:	4618      	mov	r0, r3
 8029fc2:	3710      	adds	r7, #16
 8029fc4:	46bd      	mov	sp, r7
 8029fc6:	bd80      	pop	{r7, pc}
 8029fc8:	54010504 	.word	0x54010504
 8029fcc:	1ffea814 	.word	0x1ffea814
 8029fd0:	54010502 	.word	0x54010502

08029fd4 <ECAT0_0_IRQHandler>:

/* ECAT slave interrupt handler function */
void ECAT0_0_IRQHandler(void)
{
 8029fd4:	b580      	push	{r7, lr}
 8029fd6:	af00      	add	r7, sp, #0
  PDI_Isr();
 8029fd8:	f7f7 f814 	bl	8021004 <PDI_Isr>
}
 8029fdc:	bd80      	pop	{r7, pc}
 8029fde:	bf00      	nop

08029fe0 <CCU43_1_IRQHandler>:

/* ECAT slave timer interrupt handler function */
void ecat_ssc_timer_handler(void)
{
 8029fe0:	b580      	push	{r7, lr}
 8029fe2:	af00      	add	r7, sp, #0
  ticks++;
 8029fe4:	4b03      	ldr	r3, [pc, #12]	; (8029ff4 <CCU43_1_IRQHandler+0x14>)
 8029fe6:	681b      	ldr	r3, [r3, #0]
 8029fe8:	3301      	adds	r3, #1
 8029fea:	4a02      	ldr	r2, [pc, #8]	; (8029ff4 <CCU43_1_IRQHandler+0x14>)
 8029fec:	6013      	str	r3, [r2, #0]
#if ECAT_TIMER_INT == 1
  ECAT_CheckTimer();
 8029fee:	f7f6 ff15 	bl	8020e1c <ECAT_CheckTimer>
#endif
}
 8029ff2:	bd80      	pop	{r7, pc}
 8029ff4:	1ffea58c 	.word	0x1ffea58c

08029ff8 <ENABLE_ESC_INT>:
{
  ticks = 0;
}

void ENABLE_ESC_INT(void)
{
 8029ff8:	b580      	push	{r7, lr}
 8029ffa:	af00      	add	r7, sp, #0
  ENABLE_ESC_INT_USER();
 8029ffc:	f000 fda4 	bl	802ab48 <ENABLE_ESC_INT_USER>

  NVIC_EnableIRQ(ECAT0_0_IRQn);
 802a000:	206d      	movs	r0, #109	; 0x6d
 802a002:	f7ff fc8d 	bl	8029920 <__NVIC_EnableIRQ>
  INTERRUPT_Enable(&INTERRUPT_0);
 802a006:	4802      	ldr	r0, [pc, #8]	; (802a010 <ENABLE_ESC_INT+0x18>)
 802a008:	f7ff fd66 	bl	8029ad8 <INTERRUPT_Enable>
}
 802a00c:	bd80      	pop	{r7, pc}
 802a00e:	bf00      	nop
 802a010:	0802b7e0 	.word	0x0802b7e0

0802a014 <DISABLE_ESC_INT>:

void DISABLE_ESC_INT(void)
{
 802a014:	b580      	push	{r7, lr}
 802a016:	b086      	sub	sp, #24
 802a018:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802a01a:	f3ef 8310 	mrs	r3, PRIMASK
 802a01e:	613b      	str	r3, [r7, #16]
  return(result);
 802a020:	693b      	ldr	r3, [r7, #16]
extern void DISABLE_ESC_INT_USER(void);

__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
 802a022:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802a024:	b672      	cpsid	i
  __disable_irq ();
  return status;
 802a026:	68fb      	ldr	r3, [r7, #12]
}

void DISABLE_ESC_INT(void)
{
  uint32_t ics;
  ics = critical_section_enter();
 802a028:	617b      	str	r3, [r7, #20]

  DISABLE_ESC_INT_USER();
 802a02a:	f000 fd9b 	bl	802ab64 <DISABLE_ESC_INT_USER>

  NVIC_DisableIRQ(ECAT0_0_IRQn);
 802a02e:	206d      	movs	r0, #109	; 0x6d
 802a030:	f7ff fc92 	bl	8029958 <__NVIC_DisableIRQ>
  INTERRUPT_Disable(&INTERRUPT_0);
 802a034:	4806      	ldr	r0, [pc, #24]	; (802a050 <DISABLE_ESC_INT+0x3c>)
 802a036:	f7ff fd5d 	bl	8029af4 <INTERRUPT_Disable>
 802a03a:	697b      	ldr	r3, [r7, #20]
 802a03c:	60bb      	str	r3, [r7, #8]
 802a03e:	68bb      	ldr	r3, [r7, #8]
 802a040:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802a042:	687b      	ldr	r3, [r7, #4]
 802a044:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);
}
 802a048:	3718      	adds	r7, #24
 802a04a:	46bd      	mov	sp, r7
 802a04c:	bd80      	pop	{r7, pc}
 802a04e:	bf00      	nop
 802a050:	0802b7e0 	.word	0x0802b7e0

0802a054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802a054:	b480      	push	{r7}
 802a056:	b085      	sub	sp, #20
 802a058:	af00      	add	r7, sp, #0
 802a05a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802a05c:	687b      	ldr	r3, [r7, #4]
 802a05e:	f003 0307 	and.w	r3, r3, #7
 802a062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802a064:	4b0c      	ldr	r3, [pc, #48]	; (802a098 <__NVIC_SetPriorityGrouping+0x44>)
 802a066:	68db      	ldr	r3, [r3, #12]
 802a068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802a06a:	68ba      	ldr	r2, [r7, #8]
 802a06c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802a070:	4013      	ands	r3, r2
 802a072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802a078:	68bb      	ldr	r3, [r7, #8]
 802a07a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 802a07c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802a080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a084:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 802a086:	4a04      	ldr	r2, [pc, #16]	; (802a098 <__NVIC_SetPriorityGrouping+0x44>)
 802a088:	68bb      	ldr	r3, [r7, #8]
 802a08a:	60d3      	str	r3, [r2, #12]
}
 802a08c:	3714      	adds	r7, #20
 802a08e:	46bd      	mov	sp, r7
 802a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a094:	4770      	bx	lr
 802a096:	bf00      	nop
 802a098:	e000ed00 	.word	0xe000ed00

0802a09c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 802a09c:	b580      	push	{r7, lr}
 802a09e:	b082      	sub	sp, #8
 802a0a0:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 802a0a2:	2001      	movs	r0, #1
 802a0a4:	f7ff ffd6 	bl	802a054 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802a0a8:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 802a0aa:	4b21      	ldr	r3, [pc, #132]	; (802a130 <SystemCoreSetup+0x94>)
 802a0ac:	4a21      	ldr	r2, [pc, #132]	; (802a134 <SystemCoreSetup+0x98>)
 802a0ae:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802a0b0:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 802a0b4:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 802a0b6:	4a1e      	ldr	r2, [pc, #120]	; (802a130 <SystemCoreSetup+0x94>)
 802a0b8:	4b1d      	ldr	r3, [pc, #116]	; (802a130 <SystemCoreSetup+0x94>)
 802a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a0be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a0c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 802a0c6:	4b1c      	ldr	r3, [pc, #112]	; (802a138 <SystemCoreSetup+0x9c>)
 802a0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a0cc:	3314      	adds	r3, #20
 802a0ce:	681b      	ldr	r3, [r3, #0]
 802a0d0:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	f023 030f 	bic.w	r3, r3, #15
 802a0d8:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 802a0da:	687b      	ldr	r3, [r7, #4]
 802a0dc:	f043 0304 	orr.w	r3, r3, #4
 802a0e0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 802a0e2:	4b15      	ldr	r3, [pc, #84]	; (802a138 <SystemCoreSetup+0x9c>)
 802a0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a0e8:	3314      	adds	r3, #20
 802a0ea:	687a      	ldr	r2, [r7, #4]
 802a0ec:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 802a0ee:	4a10      	ldr	r2, [pc, #64]	; (802a130 <SystemCoreSetup+0x94>)
 802a0f0:	4b0f      	ldr	r3, [pc, #60]	; (802a130 <SystemCoreSetup+0x94>)
 802a0f2:	695b      	ldr	r3, [r3, #20]
 802a0f4:	f023 0310 	bic.w	r3, r3, #16
 802a0f8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 802a0fa:	4a0d      	ldr	r2, [pc, #52]	; (802a130 <SystemCoreSetup+0x94>)
 802a0fc:	4b0c      	ldr	r3, [pc, #48]	; (802a130 <SystemCoreSetup+0x94>)
 802a0fe:	695b      	ldr	r3, [r3, #20]
 802a100:	f023 0308 	bic.w	r3, r3, #8
 802a104:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 802a106:	4a0a      	ldr	r2, [pc, #40]	; (802a130 <SystemCoreSetup+0x94>)
 802a108:	4b09      	ldr	r3, [pc, #36]	; (802a130 <SystemCoreSetup+0x94>)
 802a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a110:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 802a112:	4a07      	ldr	r2, [pc, #28]	; (802a130 <SystemCoreSetup+0x94>)
 802a114:	4b06      	ldr	r3, [pc, #24]	; (802a130 <SystemCoreSetup+0x94>)
 802a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802a11c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 802a11e:	4a04      	ldr	r2, [pc, #16]	; (802a130 <SystemCoreSetup+0x94>)
 802a120:	4b03      	ldr	r3, [pc, #12]	; (802a130 <SystemCoreSetup+0x94>)
 802a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a128:	6253      	str	r3, [r2, #36]	; 0x24
}
 802a12a:	3708      	adds	r7, #8
 802a12c:	46bd      	mov	sp, r7
 802a12e:	bd80      	pop	{r7, pc}
 802a130:	e000ed00 	.word	0xe000ed00
 802a134:	08020000 	.word	0x08020000
 802a138:	58001000 	.word	0x58001000

0802a13c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 802a13c:	b480      	push	{r7}
 802a13e:	b085      	sub	sp, #20
 802a140:	af00      	add	r7, sp, #0
 802a142:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 802a144:	2300      	movs	r3, #0
 802a146:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 802a148:	687b      	ldr	r3, [r7, #4]
 802a14a:	2201      	movs	r2, #1
 802a14c:	701a      	strb	r2, [r3, #0]

  return (status);
 802a14e:	7bfb      	ldrb	r3, [r7, #15]
}
 802a150:	4618      	mov	r0, r3
 802a152:	3714      	adds	r7, #20
 802a154:	46bd      	mov	sp, r7
 802a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a15a:	4770      	bx	lr

0802a15c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 802a15c:	b480      	push	{r7}
 802a15e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 802a160:	4b02      	ldr	r3, [pc, #8]	; (802a16c <OSCHP_GetFrequency+0x10>)
}
 802a162:	4618      	mov	r0, r3
 802a164:	46bd      	mov	sp, r7
 802a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a16a:	4770      	bx	lr
 802a16c:	00b71b00 	.word	0x00b71b00

0802a170 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 802a170:	b480      	push	{r7}
 802a172:	b083      	sub	sp, #12
 802a174:	af00      	add	r7, sp, #0
 802a176:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 802a178:	4906      	ldr	r1, [pc, #24]	; (802a194 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 802a17a:	4b06      	ldr	r3, [pc, #24]	; (802a194 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 802a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a17e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	4313      	orrs	r3, r2
 802a186:	638b      	str	r3, [r1, #56]	; 0x38
                      ((uint32_t)source);
}
 802a188:	370c      	adds	r7, #12
 802a18a:	46bd      	mov	sp, r7
 802a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a190:	4770      	bx	lr
 802a192:	bf00      	nop
 802a194:	50004600 	.word	0x50004600

0802a198 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 802a198:	b5b0      	push	{r4, r5, r7, lr}
 802a19a:	b086      	sub	sp, #24
 802a19c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 802a19e:	4b15      	ldr	r3, [pc, #84]	; (802a1f4 <SystemCoreClockSetup+0x5c>)
 802a1a0:	1d3c      	adds	r4, r7, #4
 802a1a2:	461d      	mov	r5, r3
 802a1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1a8:	682b      	ldr	r3, [r5, #0]
 802a1aa:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 802a1ac:	1d3b      	adds	r3, r7, #4
 802a1ae:	4618      	mov	r0, r3
 802a1b0:	f7fd f83e 	bl	8027230 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 802a1b4:	2000      	movs	r0, #0
 802a1b6:	f7fd f95f 	bl	8027478 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 802a1ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 802a1be:	f7fd f913 	bl	80273e8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 802a1c2:	2006      	movs	r0, #6
 802a1c4:	f7fd f9e4 	bl	8027590 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 802a1c8:	2003      	movs	r0, #3
 802a1ca:	2164      	movs	r1, #100	; 0x64
 802a1cc:	f7fd fa5c 	bl	8027688 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 802a1d0:	2000      	movs	r0, #0
 802a1d2:	f7ff ffcd 	bl	802a170 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 802a1d6:	2002      	movs	r0, #2
 802a1d8:	f7fd fa16 	bl	8027608 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 802a1dc:	2000      	movs	r0, #0
 802a1de:	f7fd f917 	bl	8027410 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 802a1e2:	2001      	movs	r0, #1
 802a1e4:	f7fd f9fc 	bl	80275e0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 802a1e8:	2001      	movs	r0, #1
 802a1ea:	f7fd f9e5 	bl	80275b8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 802a1ee:	3718      	adds	r7, #24
 802a1f0:	46bd      	mov	sp, r7
 802a1f2:	bdb0      	pop	{r4, r5, r7, pc}
 802a1f4:	0802b81c 	.word	0x0802b81c

0802a1f8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 802a1f8:	b580      	push	{r7, lr}
 802a1fa:	b082      	sub	sp, #8
 802a1fc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 802a1fe:	2300      	movs	r3, #0
 802a200:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 802a202:	4825      	ldr	r0, [pc, #148]	; (802a298 <DAVE_Init+0xa0>)
 802a204:	f7ff ff9a 	bl	802a13c <CLOCK_XMC4_Init>
 802a208:	4603      	mov	r3, r0
 802a20a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 802a20c:	79fb      	ldrb	r3, [r7, #7]
 802a20e:	2b00      	cmp	r3, #0
 802a210:	d104      	bne.n	802a21c <DAVE_Init+0x24>
  {
	 /**  Initialization of ECAT_SSC APP instance ECAT_SSC_0 */
	 init_status = (DAVE_STATUS_t)ECAT_SSC_Init(&ECAT_SSC_0); 
 802a212:	4822      	ldr	r0, [pc, #136]	; (802a29c <DAVE_Init+0xa4>)
 802a214:	f7ff fb1c 	bl	8029850 <ECAT_SSC_Init>
 802a218:	4603      	mov	r3, r0
 802a21a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a21c:	79fb      	ldrb	r3, [r7, #7]
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d104      	bne.n	802a22c <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC1); 
 802a222:	481f      	ldr	r0, [pc, #124]	; (802a2a0 <DAVE_Init+0xa8>)
 802a224:	f7fe ffc4 	bl	80291b0 <INTERRUPT_Init>
 802a228:	4603      	mov	r3, r0
 802a22a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a22c:	79fb      	ldrb	r3, [r7, #7]
 802a22e:	2b00      	cmp	r3, #0
 802a230:	d104      	bne.n	802a23c <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC0); 
 802a232:	481c      	ldr	r0, [pc, #112]	; (802a2a4 <DAVE_Init+0xac>)
 802a234:	f7fe ffbc 	bl	80291b0 <INTERRUPT_Init>
 802a238:	4603      	mov	r3, r0
 802a23a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a23c:	79fb      	ldrb	r3, [r7, #7]
 802a23e:	2b00      	cmp	r3, #0
 802a240:	d104      	bne.n	802a24c <DAVE_Init+0x54>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC1); 
 802a242:	4819      	ldr	r0, [pc, #100]	; (802a2a8 <DAVE_Init+0xb0>)
 802a244:	f7ff fae6 	bl	8029814 <EVENT_DETECTOR_Init>
 802a248:	4603      	mov	r3, r0
 802a24a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a24c:	79fb      	ldrb	r3, [r7, #7]
 802a24e:	2b00      	cmp	r3, #0
 802a250:	d104      	bne.n	802a25c <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 802a252:	4816      	ldr	r0, [pc, #88]	; (802a2ac <DAVE_Init+0xb4>)
 802a254:	f7fe fc22 	bl	8028a9c <PWM_CCU8_Init>
 802a258:	4603      	mov	r3, r0
 802a25a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a25c:	79fb      	ldrb	r3, [r7, #7]
 802a25e:	2b00      	cmp	r3, #0
 802a260:	d104      	bne.n	802a26c <DAVE_Init+0x74>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC1); 
 802a262:	4813      	ldr	r0, [pc, #76]	; (802a2b0 <DAVE_Init+0xb8>)
 802a264:	f7ff fab2 	bl	80297cc <EVENT_GENERATOR_Init>
 802a268:	4603      	mov	r3, r0
 802a26a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a26c:	79fb      	ldrb	r3, [r7, #7]
 802a26e:	2b00      	cmp	r3, #0
 802a270:	d104      	bne.n	802a27c <DAVE_Init+0x84>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC0); 
 802a272:	4810      	ldr	r0, [pc, #64]	; (802a2b4 <DAVE_Init+0xbc>)
 802a274:	f7ff faaa 	bl	80297cc <EVENT_GENERATOR_Init>
 802a278:	4603      	mov	r3, r0
 802a27a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802a27c:	79fb      	ldrb	r3, [r7, #7]
 802a27e:	2b00      	cmp	r3, #0
 802a280:	d104      	bne.n	802a28c <DAVE_Init+0x94>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC0); 
 802a282:	480d      	ldr	r0, [pc, #52]	; (802a2b8 <DAVE_Init+0xc0>)
 802a284:	f7ff fac6 	bl	8029814 <EVENT_DETECTOR_Init>
 802a288:	4603      	mov	r3, r0
 802a28a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 802a28c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 802a28e:	4618      	mov	r0, r3
 802a290:	3708      	adds	r7, #8
 802a292:	46bd      	mov	sp, r7
 802a294:	bd80      	pop	{r7, pc}
 802a296:	bf00      	nop
 802a298:	1ffea590 	.word	0x1ffea590
 802a29c:	0802b810 	.word	0x0802b810
 802a2a0:	0802b7e4 	.word	0x0802b7e4
 802a2a4:	0802b7e8 	.word	0x0802b7e8
 802a2a8:	1ffe94b4 	.word	0x1ffe94b4
 802a2ac:	1ffe9430 	.word	0x1ffe9430
 802a2b0:	1ffe9494 	.word	0x1ffe9494
 802a2b4:	1ffe94a4 	.word	0x1ffe94a4
 802a2b8:	1ffe94c4 	.word	0x1ffe94c4

0802a2bc <FWUPDATE_StartDownload>:
/****************************************************************
* API PROTOTYPES
***************************************************************/

void FWUPDATE_StartDownload(void)
{
 802a2bc:	b580      	push	{r7, lr}
 802a2be:	af00      	add	r7, sp, #0
  /* Check if a download has already been started,
   * if yes, return error */
  if (g_firmware_download_started)
 802a2c0:	4b08      	ldr	r3, [pc, #32]	; (802a2e4 <FWUPDATE_StartDownload+0x28>)
 802a2c2:	781b      	ldrb	r3, [r3, #0]
 802a2c4:	2b00      	cmp	r3, #0
 802a2c6:	d000      	beq.n	802a2ca <FWUPDATE_StartDownload+0xe>
    return ECAT_FOE_ERRCODE_EXISTS;
 802a2c8:	e00a      	b.n	802a2e0 <FWUPDATE_StartDownload+0x24>

  /* remember a firmware download has started
   * --> issue system reset when INIT-state is requested
   * to flash new binary inside bootloader */
  g_firmware_download_started = 1;
 802a2ca:	4b06      	ldr	r3, [pc, #24]	; (802a2e4 <FWUPDATE_StartDownload+0x28>)
 802a2cc:	2201      	movs	r2, #1
 802a2ce:	701a      	strb	r2, [r3, #0]
   * - start address of backup partition
   * - MAX SIZE is limited by application partition
   * - Erase is already assured insid jhjhjhjhjhe bootloader executable
   * - Enable XMC flash programming check
   */
  FLASHPROG_Init(START_BACKUP_PARTITION, MAX_SIZE, FLASH_OPT_NO_ERASE, FLASH_OPT_CHECK);
 802a2d0:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 802a2d4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 802a2d8:	2265      	movs	r2, #101	; 0x65
 802a2da:	23c8      	movs	r3, #200	; 0xc8
 802a2dc:	f000 f8e6 	bl	802a4ac <FLASHPROG_Init>
}
 802a2e0:	bd80      	pop	{r7, pc}
 802a2e2:	bf00      	nop
 802a2e4:	1ffea694 	.word	0x1ffea694

0802a2e8 <FWUPDATE_StateTransitionInit>:

void FWUPDATE_StateTransitionInit(void)
{
 802a2e8:	b480      	push	{r7}
 802a2ea:	af00      	add	r7, sp, #0
  /* If download started before, it is finished now
   * --> issue system reset  from process_app
   * to update firmware and/or cleanup flash
   */
  if (g_firmware_download_started==1)
 802a2ec:	4b05      	ldr	r3, [pc, #20]	; (802a304 <FWUPDATE_StateTransitionInit+0x1c>)
 802a2ee:	781b      	ldrb	r3, [r3, #0]
 802a2f0:	2b01      	cmp	r3, #1
 802a2f2:	d102      	bne.n	802a2fa <FWUPDATE_StateTransitionInit+0x12>
    g_firmware_download_finished=1;
 802a2f4:	4b04      	ldr	r3, [pc, #16]	; (802a308 <FWUPDATE_StateTransitionInit+0x20>)
 802a2f6:	2201      	movs	r2, #1
 802a2f8:	701a      	strb	r2, [r3, #0]
}
 802a2fa:	46bd      	mov	sp, r7
 802a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a300:	4770      	bx	lr
 802a302:	bf00      	nop
 802a304:	1ffea694 	.word	0x1ffea694
 802a308:	1ffea695 	.word	0x1ffea695

0802a30c <FWUPDATE_GetDownloadFinished>:

uint8_t FWUPDATE_GetDownloadFinished(void)
{
 802a30c:	b480      	push	{r7}
 802a30e:	af00      	add	r7, sp, #0
	return g_firmware_download_finished;
 802a310:	4b03      	ldr	r3, [pc, #12]	; (802a320 <FWUPDATE_GetDownloadFinished+0x14>)
 802a312:	781b      	ldrb	r3, [r3, #0]
}
 802a314:	4618      	mov	r0, r3
 802a316:	46bd      	mov	sp, r7
 802a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a31c:	4770      	bx	lr
 802a31e:	bf00      	nop
 802a320:	1ffea695 	.word	0x1ffea695

0802a324 <FWUPDATE_Data>:

uint16_t FWUPDATE_Data(uint16_t *pdata, uint16_t size)
{
 802a324:	b580      	push	{r7, lr}
 802a326:	b084      	sub	sp, #16
 802a328:	af00      	add	r7, sp, #0
 802a32a:	6078      	str	r0, [r7, #4]
 802a32c:	460b      	mov	r3, r1
 802a32e:	807b      	strh	r3, [r7, #2]
  /* Next data of firmware file received
   * Proceed with programming
   */
  switch( FLASHPROG_Data((void*)pdata, (uint32_t)size) )
 802a330:	887b      	ldrh	r3, [r7, #2]
 802a332:	6878      	ldr	r0, [r7, #4]
 802a334:	4619      	mov	r1, r3
 802a336:	f000 f8f5 	bl	802a524 <FLASHPROG_Data>
 802a33a:	4603      	mov	r3, r0
 802a33c:	2b01      	cmp	r3, #1
 802a33e:	d002      	beq.n	802a346 <FWUPDATE_Data+0x22>
 802a340:	2b02      	cmp	r3, #2
 802a342:	d003      	beq.n	802a34c <FWUPDATE_Data+0x28>
 802a344:	e005      	b.n	802a352 <FWUPDATE_Data+0x2e>
  {
    case FLASH_FULL_ERROR:
    {
      /* Maximum firmware size reached */
      return ECAT_FOE_ERRCODE_DISKFULL;
 802a346:	f248 0303 	movw	r3, #32771	; 0x8003
 802a34a:	e04a      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
    }
    case FLASH_PROG_ERROR:
    {
      /* XMC flash programming error occured */
      return ECAT_FOE_ERRCODE_PROGERROR;
 802a34c:	f248 030b 	movw	r3, #32779	; 0x800b
 802a350:	e047      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
	}
  }

  if ( size == (u16ReceiveMbxSize - MBX_HEADER_SIZE - FOE_HEADER_SIZE) )
 802a352:	887a      	ldrh	r2, [r7, #2]
 802a354:	4b25      	ldr	r3, [pc, #148]	; (802a3ec <FWUPDATE_Data+0xc8>)
 802a356:	881b      	ldrh	r3, [r3, #0]
 802a358:	3b0c      	subs	r3, #12
 802a35a:	429a      	cmp	r2, r3
 802a35c:	d101      	bne.n	802a362 <FWUPDATE_Data+0x3e>
  {
    /* Further data will follow */
    return 0;
 802a35e:	2300      	movs	r3, #0
 802a360:	e03f      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
  }
  else
  {
    /* last part of the file received */
	/* Finalize XMC flash programming */
  	FLASHPROG_Close();
 802a362:	f000 f983 	bl	802a66c <FLASHPROG_Close>

  	/* Check CRC32 (last 4 bytes of image) */
   	if (FLASHPROG_CRC32_check(START_BACKUP_PARTITION, FLASHPROG_Bytes_written())==FLASH_CRC_ERROR)
 802a366:	f000 f9ad 	bl	802a6c4 <FLASHPROG_Bytes_written>
 802a36a:	4603      	mov	r3, r0
 802a36c:	f04f 6041 	mov.w	r0, #202375168	; 0xc100000
 802a370:	4619      	mov	r1, r3
 802a372:	f000 f9b3 	bl	802a6dc <FLASHPROG_CRC32_check>
 802a376:	4603      	mov	r3, r0
 802a378:	2b03      	cmp	r3, #3
 802a37a:	d102      	bne.n	802a382 <FWUPDATE_Data+0x5e>
   	{
   	  return ECAT_FOE_ERRCODE_INVALID_CHECKSUM;
 802a37c:	f248 030c 	movw	r3, #32780	; 0x800c
 802a380:	e02f      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
   	}

   	/* Downloaded firmware binary is ok
   	 * now prepare meta info page to proceed
   	 * with flashing application partition from bootloader executable*/
    for (uint32_t i = 0; i < XMC_FLASH_BYTES_PER_PAGE / 4; i++)
 802a382:	2300      	movs	r3, #0
 802a384:	60fb      	str	r3, [r7, #12]
 802a386:	e007      	b.n	802a398 <FWUPDATE_Data+0x74>
   	{
      meta_page[i] = 0;
 802a388:	4a19      	ldr	r2, [pc, #100]	; (802a3f0 <FWUPDATE_Data+0xcc>)
 802a38a:	68fb      	ldr	r3, [r7, #12]
 802a38c:	2100      	movs	r1, #0
 802a38e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	}

   	/* Downloaded firmware binary is ok
   	 * now prepare meta info page to proceed
   	 * with flashing application partition from bootloader executable*/
    for (uint32_t i = 0; i < XMC_FLASH_BYTES_PER_PAGE / 4; i++)
 802a392:	68fb      	ldr	r3, [r7, #12]
 802a394:	3301      	adds	r3, #1
 802a396:	60fb      	str	r3, [r7, #12]
 802a398:	68fb      	ldr	r3, [r7, #12]
 802a39a:	2b3f      	cmp	r3, #63	; 0x3f
 802a39c:	d9f4      	bls.n	802a388 <FWUPDATE_Data+0x64>
   	{
      meta_page[i] = 0;
    }
    /* Set meta info; firmware binary size */
    meta_page[63] = FLASHPROG_Bytes_written();
 802a39e:	f000 f991 	bl	802a6c4 <FLASHPROG_Bytes_written>
 802a3a2:	4602      	mov	r2, r0
 802a3a4:	4b12      	ldr	r3, [pc, #72]	; (802a3f0 <FWUPDATE_Data+0xcc>)
 802a3a6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  	/* store meta info */
    /* Initialize flash programming with offset to meta-info page */
   	FLASHPROG_Init(START_BACKUP_PARTITION + METAINFO_OFFSET, XMC_FLASH_BYTES_PER_PAGE, FLASH_OPT_NO_ERASE, FLASH_OPT_CHECK);
 802a3aa:	4812      	ldr	r0, [pc, #72]	; (802a3f4 <FWUPDATE_Data+0xd0>)
 802a3ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a3b0:	2265      	movs	r2, #101	; 0x65
 802a3b2:	23c8      	movs	r3, #200	; 0xc8
 802a3b4:	f000 f87a 	bl	802a4ac <FLASHPROG_Init>
    switch( FLASHPROG_Data((void*)meta_page, (uint32_t)256) )
 802a3b8:	480d      	ldr	r0, [pc, #52]	; (802a3f0 <FWUPDATE_Data+0xcc>)
 802a3ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a3be:	f000 f8b1 	bl	802a524 <FLASHPROG_Data>
 802a3c2:	4603      	mov	r3, r0
 802a3c4:	2b01      	cmp	r3, #1
 802a3c6:	d002      	beq.n	802a3ce <FWUPDATE_Data+0xaa>
 802a3c8:	2b02      	cmp	r3, #2
 802a3ca:	d003      	beq.n	802a3d4 <FWUPDATE_Data+0xb0>
 802a3cc:	e005      	b.n	802a3da <FWUPDATE_Data+0xb6>
    {
      case FLASH_FULL_ERROR:
      {
        /* can never happen; however to be code complete ... */
        return ECAT_FOE_ERRCODE_DISKFULL;
 802a3ce:	f248 0303 	movw	r3, #32771	; 0x8003
 802a3d2:	e006      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
      }
      case FLASH_PROG_ERROR:
      {
        /* XMC flash programming error occured */
        return ECAT_FOE_ERRCODE_PROGERROR;
 802a3d4:	f248 030b 	movw	r3, #32779	; 0x800b
 802a3d8:	e003      	b.n	802a3e2 <FWUPDATE_Data+0xbe>
      }
    }
    /* Finalize meta info programming inside XMC flash */
    FLASHPROG_Close();
 802a3da:	f000 f947 	bl	802a66c <FLASHPROG_Close>
    return FOE_ACKFINISHED;
 802a3de:	f647 73fc 	movw	r3, #32764	; 0x7ffc
  }
}
 802a3e2:	4618      	mov	r0, r3
 802a3e4:	3710      	adds	r7, #16
 802a3e6:	46bd      	mov	sp, r7
 802a3e8:	bd80      	pop	{r7, pc}
 802a3ea:	bf00      	nop
 802a3ec:	1ffea926 	.word	0x1ffea926
 802a3f0:	1ffea594 	.word	0x1ffea594
 802a3f4:	0c1fff00 	.word	0x0c1fff00

0802a3f8 <XMC_FCE_GetCRCResult>:
 *
 * \par<b>Description: </b><br>
 * Read the final CRC value from RES register <br>
 */
__STATIC_INLINE void XMC_FCE_GetCRCResult(const XMC_FCE_t *const engine, uint32_t *result)
{
 802a3f8:	b480      	push	{r7}
 802a3fa:	b083      	sub	sp, #12
 802a3fc:	af00      	add	r7, sp, #0
 802a3fe:	6078      	str	r0, [r7, #4]
 802a400:	6039      	str	r1, [r7, #0]
  *result= engine->kernel_ptr->RES;
 802a402:	687b      	ldr	r3, [r7, #4]
 802a404:	681b      	ldr	r3, [r3, #0]
 802a406:	685a      	ldr	r2, [r3, #4]
 802a408:	683b      	ldr	r3, [r7, #0]
 802a40a:	601a      	str	r2, [r3, #0]
}
 802a40c:	370c      	adds	r7, #12
 802a40e:	46bd      	mov	sp, r7
 802a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a414:	4770      	bx	lr
 802a416:	bf00      	nop

0802a418 <Flash_lGetPhysicalSector>:
 *
 * @return : start address of physical sector
 *
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
 802a418:	b480      	push	{r7}
 802a41a:	b085      	sub	sp, #20
 802a41c:	af00      	add	r7, sp, #0
 802a41e:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 802a420:	2300      	movs	r3, #0
 802a422:	73fb      	strb	r3, [r7, #15]
 802a424:	e016      	b.n	802a454 <Flash_lGetPhysicalSector+0x3c>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
 802a426:	7bfb      	ldrb	r3, [r7, #15]
 802a428:	4a0f      	ldr	r2, [pc, #60]	; (802a468 <Flash_lGetPhysicalSector+0x50>)
 802a42a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802a42e:	687b      	ldr	r3, [r7, #4]
 802a430:	429a      	cmp	r2, r3
 802a432:	d80c      	bhi.n	802a44e <Flash_lGetPhysicalSector+0x36>
 802a434:	7bfb      	ldrb	r3, [r7, #15]
 802a436:	3301      	adds	r3, #1
 802a438:	4a0b      	ldr	r2, [pc, #44]	; (802a468 <Flash_lGetPhysicalSector+0x50>)
 802a43a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802a43e:	687b      	ldr	r3, [r7, #4]
 802a440:	429a      	cmp	r2, r3
 802a442:	d904      	bls.n	802a44e <Flash_lGetPhysicalSector+0x36>
      return physical_sector_addresses[sector_number];
 802a444:	7bfb      	ldrb	r3, [r7, #15]
 802a446:	4a08      	ldr	r2, [pc, #32]	; (802a468 <Flash_lGetPhysicalSector+0x50>)
 802a448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a44c:	e006      	b.n	802a45c <Flash_lGetPhysicalSector+0x44>
 */
uint32_t* Flash_lGetPhysicalSector(uint32_t* address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 802a44e:	7bfb      	ldrb	r3, [r7, #15]
 802a450:	3301      	adds	r3, #1
 802a452:	73fb      	strb	r3, [r7, #15]
 802a454:	7bfb      	ldrb	r3, [r7, #15]
 802a456:	2b09      	cmp	r3, #9
 802a458:	d9e5      	bls.n	802a426 <Flash_lGetPhysicalSector+0xe>
  {
    if ((address>=physical_sector_addresses[sector_number]) && (address<physical_sector_addresses[sector_number+1]))
      return physical_sector_addresses[sector_number];
  }
  /* should not be reached */
  return 0;
 802a45a:	2300      	movs	r3, #0
}
 802a45c:	4618      	mov	r0, r3
 802a45e:	3714      	adds	r7, #20
 802a460:	46bd      	mov	sp, r7
 802a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a466:	4770      	bx	lr
 802a468:	1ffe94d4 	.word	0x1ffe94d4

0802a46c <Flash_lGetPhysicalSectorNumber>:
 *
 * @return : sector number
 *
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
 802a46c:	b480      	push	{r7}
 802a46e:	b085      	sub	sp, #20
 802a470:	af00      	add	r7, sp, #0
 802a472:	6078      	str	r0, [r7, #4]
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 802a474:	2300      	movs	r3, #0
 802a476:	73fb      	strb	r3, [r7, #15]
 802a478:	e00b      	b.n	802a492 <Flash_lGetPhysicalSectorNumber+0x26>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
 802a47a:	7bfb      	ldrb	r3, [r7, #15]
 802a47c:	4a0a      	ldr	r2, [pc, #40]	; (802a4a8 <Flash_lGetPhysicalSectorNumber+0x3c>)
 802a47e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802a482:	687b      	ldr	r3, [r7, #4]
 802a484:	429a      	cmp	r2, r3
 802a486:	d101      	bne.n	802a48c <Flash_lGetPhysicalSectorNumber+0x20>
      return sector_number;
 802a488:	7bfb      	ldrb	r3, [r7, #15]
 802a48a:	e006      	b.n	802a49a <Flash_lGetPhysicalSectorNumber+0x2e>
 */
uint8_t Flash_lGetPhysicalSectorNumber(uint32_t* physical_sector_start_address)
{
  uint8_t sector_number;

  for (sector_number=0; sector_number<XMC_FLASH_SECTOR_COUNT_MAX; sector_number++)
 802a48c:	7bfb      	ldrb	r3, [r7, #15]
 802a48e:	3301      	adds	r3, #1
 802a490:	73fb      	strb	r3, [r7, #15]
 802a492:	7bfb      	ldrb	r3, [r7, #15]
 802a494:	2b09      	cmp	r3, #9
 802a496:	d9f0      	bls.n	802a47a <Flash_lGetPhysicalSectorNumber+0xe>
  {
    if (physical_sector_start_address==physical_sector_addresses[sector_number])
      return sector_number;
  }
  return 0;
 802a498:	2300      	movs	r3, #0
}
 802a49a:	4618      	mov	r0, r3
 802a49c:	3714      	adds	r7, #20
 802a49e:	46bd      	mov	sp, r7
 802a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4a4:	4770      	bx	lr
 802a4a6:	bf00      	nop
 802a4a8:	1ffe94d4 	.word	0x1ffe94d4

0802a4ac <FLASHPROG_Init>:
 *
 * @return : none
 *
 */
void FLASHPROG_Init(uint32_t* dest_address, uint32_t max_size, uint8_t erase, uint8_t check_prog)
{
 802a4ac:	b480      	push	{r7}
 802a4ae:	b085      	sub	sp, #20
 802a4b0:	af00      	add	r7, sp, #0
 802a4b2:	60f8      	str	r0, [r7, #12]
 802a4b4:	60b9      	str	r1, [r7, #8]
 802a4b6:	4611      	mov	r1, r2
 802a4b8:	461a      	mov	r2, r3
 802a4ba:	460b      	mov	r3, r1
 802a4bc:	71fb      	strb	r3, [r7, #7]
 802a4be:	4613      	mov	r3, r2
 802a4c0:	71bb      	strb	r3, [r7, #6]
  gl_flash_write_address = dest_address;
 802a4c2:	4a11      	ldr	r2, [pc, #68]	; (802a508 <FLASHPROG_Init+0x5c>)
 802a4c4:	68fb      	ldr	r3, [r7, #12]
 802a4c6:	6013      	str	r3, [r2, #0]
  gl_flash_write_start_address = dest_address;
 802a4c8:	4a10      	ldr	r2, [pc, #64]	; (802a50c <FLASHPROG_Init+0x60>)
 802a4ca:	68fb      	ldr	r3, [r7, #12]
 802a4cc:	6013      	str	r3, [r2, #0]
  gl_flash_max_size = max_size;
 802a4ce:	4a10      	ldr	r2, [pc, #64]	; (802a510 <FLASHPROG_Init+0x64>)
 802a4d0:	68bb      	ldr	r3, [r7, #8]
 802a4d2:	6013      	str	r3, [r2, #0]
  gl_flash_check_prog = check_prog;
 802a4d4:	4a0f      	ldr	r2, [pc, #60]	; (802a514 <FLASHPROG_Init+0x68>)
 802a4d6:	79bb      	ldrb	r3, [r7, #6]
 802a4d8:	7013      	strb	r3, [r2, #0]
  gl_flash_bytes_written = 0;
 802a4da:	4b0f      	ldr	r3, [pc, #60]	; (802a518 <FLASHPROG_Init+0x6c>)
 802a4dc:	2200      	movs	r2, #0
 802a4de:	601a      	str	r2, [r3, #0]
  if (erase == FLASH_OPT_NO_ERASE)
 802a4e0:	79fb      	ldrb	r3, [r7, #7]
 802a4e2:	2b65      	cmp	r3, #101	; 0x65
 802a4e4:	d104      	bne.n	802a4f0 <FLASHPROG_Init+0x44>
    gl_flash_erased = 0xffffU;
 802a4e6:	4b0d      	ldr	r3, [pc, #52]	; (802a51c <FLASHPROG_Init+0x70>)
 802a4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a4ec:	801a      	strh	r2, [r3, #0]
 802a4ee:	e002      	b.n	802a4f6 <FLASHPROG_Init+0x4a>
  else
    gl_flash_erased = 0U;
 802a4f0:	4b0a      	ldr	r3, [pc, #40]	; (802a51c <FLASHPROG_Init+0x70>)
 802a4f2:	2200      	movs	r2, #0
 802a4f4:	801a      	strh	r2, [r3, #0]
  gl_flash_page_prep_index = 0U;
 802a4f6:	4b0a      	ldr	r3, [pc, #40]	; (802a520 <FLASHPROG_Init+0x74>)
 802a4f8:	2200      	movs	r2, #0
 802a4fa:	601a      	str	r2, [r3, #0]
}
 802a4fc:	3714      	adds	r7, #20
 802a4fe:	46bd      	mov	sp, r7
 802a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a504:	4770      	bx	lr
 802a506:	bf00      	nop
 802a508:	1ffea698 	.word	0x1ffea698
 802a50c:	1ffea69c 	.word	0x1ffea69c
 802a510:	1ffea6a8 	.word	0x1ffea6a8
 802a514:	1ffea6a4 	.word	0x1ffea6a4
 802a518:	1ffea6a0 	.word	0x1ffea6a0
 802a51c:	1ffea6a6 	.word	0x1ffea6a6
 802a520:	1ffea7ac 	.word	0x1ffea7ac

0802a524 <FLASHPROG_Data>:
 * @return : FLASH_FULL_ERROR - no more space left inside destination
 *           FLASH_PROG_ERROR - programming error
 *
 */
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
 802a524:	b580      	push	{r7, lr}
 802a526:	b088      	sub	sp, #32
 802a528:	af00      	add	r7, sp, #0
 802a52a:	6078      	str	r0, [r7, #4]
 802a52c:	6039      	str	r1, [r7, #0]
  uint32_t result = FLASH_OK;
 802a52e:	2300      	movs	r3, #0
 802a530:	61fb      	str	r3, [r7, #28]
  uint32_t bytes_processed = 0;
 802a532:	2300      	movs	r3, #0
 802a534:	61bb      	str	r3, [r7, #24]

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 802a536:	e07e      	b.n	802a636 <FLASHPROG_Data+0x112>
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 802a538:	e00f      	b.n	802a55a <FLASHPROG_Data+0x36>
    {
      gl_flash_page_prep[gl_flash_page_prep_index]=((uint8_t*)src_data)[bytes_processed];
 802a53a:	4b45      	ldr	r3, [pc, #276]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a53c:	681b      	ldr	r3, [r3, #0]
 802a53e:	6879      	ldr	r1, [r7, #4]
 802a540:	69ba      	ldr	r2, [r7, #24]
 802a542:	440a      	add	r2, r1
 802a544:	7811      	ldrb	r1, [r2, #0]
 802a546:	4a43      	ldr	r2, [pc, #268]	; (802a654 <FLASHPROG_Data+0x130>)
 802a548:	54d1      	strb	r1, [r2, r3]
      bytes_processed+=1;
 802a54a:	69bb      	ldr	r3, [r7, #24]
 802a54c:	3301      	adds	r3, #1
 802a54e:	61bb      	str	r3, [r7, #24]
      gl_flash_page_prep_index++;
 802a550:	4b3f      	ldr	r3, [pc, #252]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a552:	681b      	ldr	r3, [r3, #0]
 802a554:	3301      	adds	r3, #1
 802a556:	4a3e      	ldr	r2, [pc, #248]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a558:	6013      	str	r3, [r2, #0]
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
  {
    while((gl_flash_page_prep_index < XMC_FLASH_BYTES_PER_PAGE) && (size_bytes > bytes_processed))
 802a55a:	4b3d      	ldr	r3, [pc, #244]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a55c:	681b      	ldr	r3, [r3, #0]
 802a55e:	2bff      	cmp	r3, #255	; 0xff
 802a560:	d803      	bhi.n	802a56a <FLASHPROG_Data+0x46>
 802a562:	683a      	ldr	r2, [r7, #0]
 802a564:	69bb      	ldr	r3, [r7, #24]
 802a566:	429a      	cmp	r2, r3
 802a568:	d8e7      	bhi.n	802a53a <FLASHPROG_Data+0x16>
      bytes_processed+=1;
      gl_flash_page_prep_index++;
    }

    /* Complete page prepared ? */
    if (gl_flash_page_prep_index == XMC_FLASH_BYTES_PER_PAGE)
 802a56a:	4b39      	ldr	r3, [pc, #228]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a56c:	681b      	ldr	r3, [r3, #0]
 802a56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802a572:	d160      	bne.n	802a636 <FLASHPROG_Data+0x112>
    {
      if ((gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE) <= gl_flash_max_size)
 802a574:	4b38      	ldr	r3, [pc, #224]	; (802a658 <FLASHPROG_Data+0x134>)
 802a576:	681b      	ldr	r3, [r3, #0]
 802a578:	f503 7280 	add.w	r2, r3, #256	; 0x100
 802a57c:	4b37      	ldr	r3, [pc, #220]	; (802a65c <FLASHPROG_Data+0x138>)
 802a57e:	681b      	ldr	r3, [r3, #0]
 802a580:	429a      	cmp	r2, r3
 802a582:	d856      	bhi.n	802a632 <FLASHPROG_Data+0x10e>
      {
        /* One complete page is prepared; start programming */

        /* Check if physical sector already has been deleted; if not, delete */
        uint32_t* PhysicalSector = Flash_lGetPhysicalSector(gl_flash_write_address);
 802a584:	4b36      	ldr	r3, [pc, #216]	; (802a660 <FLASHPROG_Data+0x13c>)
 802a586:	681b      	ldr	r3, [r3, #0]
 802a588:	4618      	mov	r0, r3
 802a58a:	f7ff ff45 	bl	802a418 <Flash_lGetPhysicalSector>
 802a58e:	6138      	str	r0, [r7, #16]
        uint8_t PhysicalSectorNumber = Flash_lGetPhysicalSectorNumber(PhysicalSector);
 802a590:	6938      	ldr	r0, [r7, #16]
 802a592:	f7ff ff6b 	bl	802a46c <Flash_lGetPhysicalSectorNumber>
 802a596:	4603      	mov	r3, r0
 802a598:	73fb      	strb	r3, [r7, #15]
        if (!(gl_flash_erased & 1 << PhysicalSectorNumber))
 802a59a:	4b32      	ldr	r3, [pc, #200]	; (802a664 <FLASHPROG_Data+0x140>)
 802a59c:	881b      	ldrh	r3, [r3, #0]
 802a59e:	461a      	mov	r2, r3
 802a5a0:	7bfb      	ldrb	r3, [r7, #15]
 802a5a2:	fa42 f303 	asr.w	r3, r2, r3
 802a5a6:	f003 0301 	and.w	r3, r3, #1
 802a5aa:	2b00      	cmp	r3, #0
 802a5ac:	d10f      	bne.n	802a5ce <FLASHPROG_Data+0xaa>
        {
          XMC_FLASH_ErasePhysicalSector(PhysicalSector);
 802a5ae:	6938      	ldr	r0, [r7, #16]
 802a5b0:	f7fc fd42 	bl	8027038 <XMC_FLASH_ErasePhysicalSector>
          gl_flash_erased |= (1<<PhysicalSectorNumber);
 802a5b4:	7bfb      	ldrb	r3, [r7, #15]
 802a5b6:	2201      	movs	r2, #1
 802a5b8:	fa02 f303 	lsl.w	r3, r2, r3
 802a5bc:	b29a      	uxth	r2, r3
 802a5be:	4b29      	ldr	r3, [pc, #164]	; (802a664 <FLASHPROG_Data+0x140>)
 802a5c0:	881b      	ldrh	r3, [r3, #0]
 802a5c2:	b29b      	uxth	r3, r3
 802a5c4:	4313      	orrs	r3, r2
 802a5c6:	b29b      	uxth	r3, r3
 802a5c8:	b29a      	uxth	r2, r3
 802a5ca:	4b26      	ldr	r3, [pc, #152]	; (802a664 <FLASHPROG_Data+0x140>)
 802a5cc:	801a      	strh	r2, [r3, #0]
        }

        /* Program page */
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 802a5ce:	4b24      	ldr	r3, [pc, #144]	; (802a660 <FLASHPROG_Data+0x13c>)
 802a5d0:	681b      	ldr	r3, [r3, #0]
 802a5d2:	4618      	mov	r0, r3
 802a5d4:	491f      	ldr	r1, [pc, #124]	; (802a654 <FLASHPROG_Data+0x130>)
 802a5d6:	f7fc fcb7 	bl	8026f48 <XMC_FLASH_ProgramPage>

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
 802a5da:	4b23      	ldr	r3, [pc, #140]	; (802a668 <FLASHPROG_Data+0x144>)
 802a5dc:	781b      	ldrb	r3, [r3, #0]
 802a5de:	2bc8      	cmp	r3, #200	; 0xc8
 802a5e0:	d117      	bne.n	802a612 <FLASHPROG_Data+0xee>
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 802a5e2:	2300      	movs	r3, #0
 802a5e4:	617b      	str	r3, [r7, #20]
 802a5e6:	e011      	b.n	802a60c <FLASHPROG_Data+0xe8>
          {
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
 802a5e8:	4b1d      	ldr	r3, [pc, #116]	; (802a660 <FLASHPROG_Data+0x13c>)
 802a5ea:	681a      	ldr	r2, [r3, #0]
 802a5ec:	697b      	ldr	r3, [r7, #20]
 802a5ee:	009b      	lsls	r3, r3, #2
 802a5f0:	4413      	add	r3, r2
 802a5f2:	681a      	ldr	r2, [r3, #0]
 802a5f4:	697b      	ldr	r3, [r7, #20]
 802a5f6:	009b      	lsls	r3, r3, #2
 802a5f8:	4916      	ldr	r1, [pc, #88]	; (802a654 <FLASHPROG_Data+0x130>)
 802a5fa:	440b      	add	r3, r1
 802a5fc:	681b      	ldr	r3, [r3, #0]
 802a5fe:	429a      	cmp	r2, r3
 802a600:	d001      	beq.n	802a606 <FLASHPROG_Data+0xe2>
              result = FLASH_PROG_ERROR;
 802a602:	2302      	movs	r3, #2
 802a604:	61fb      	str	r3, [r7, #28]
        XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);

        /* Check for programming errors */
        if (gl_flash_check_prog == FLASH_OPT_CHECK)
        {
          for (uint32_t offset = 0; offset < 64; offset ++)
 802a606:	697b      	ldr	r3, [r7, #20]
 802a608:	3301      	adds	r3, #1
 802a60a:	617b      	str	r3, [r7, #20]
 802a60c:	697b      	ldr	r3, [r7, #20]
 802a60e:	2b3f      	cmp	r3, #63	; 0x3f
 802a610:	d9ea      	bls.n	802a5e8 <FLASHPROG_Data+0xc4>
            if ( gl_flash_write_address[offset] != ((uint32_t*)gl_flash_page_prep)[offset] )
              result = FLASH_PROG_ERROR;
          }
        }

        gl_flash_write_address = gl_flash_write_address + XMC_FLASH_BYTES_PER_PAGE / 4;
 802a612:	4b13      	ldr	r3, [pc, #76]	; (802a660 <FLASHPROG_Data+0x13c>)
 802a614:	681b      	ldr	r3, [r3, #0]
 802a616:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802a61a:	4a11      	ldr	r2, [pc, #68]	; (802a660 <FLASHPROG_Data+0x13c>)
 802a61c:	6013      	str	r3, [r2, #0]
        gl_flash_bytes_written = gl_flash_bytes_written + XMC_FLASH_BYTES_PER_PAGE;
 802a61e:	4b0e      	ldr	r3, [pc, #56]	; (802a658 <FLASHPROG_Data+0x134>)
 802a620:	681b      	ldr	r3, [r3, #0]
 802a622:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802a626:	4a0c      	ldr	r2, [pc, #48]	; (802a658 <FLASHPROG_Data+0x134>)
 802a628:	6013      	str	r3, [r2, #0]
        gl_flash_page_prep_index=0;
 802a62a:	4b09      	ldr	r3, [pc, #36]	; (802a650 <FLASHPROG_Data+0x12c>)
 802a62c:	2200      	movs	r2, #0
 802a62e:	601a      	str	r2, [r3, #0]
 802a630:	e001      	b.n	802a636 <FLASHPROG_Data+0x112>
      }
      else
      {
        result = FLASH_FULL_ERROR;
 802a632:	2301      	movs	r3, #1
 802a634:	61fb      	str	r3, [r7, #28]
uint32_t FLASHPROG_Data(void* src_data, uint32_t size_bytes)
{
  uint32_t result = FLASH_OK;
  uint32_t bytes_processed = 0;

  while((size_bytes > bytes_processed) && (result == FLASH_OK))
 802a636:	683a      	ldr	r2, [r7, #0]
 802a638:	69bb      	ldr	r3, [r7, #24]
 802a63a:	429a      	cmp	r2, r3
 802a63c:	d903      	bls.n	802a646 <FLASHPROG_Data+0x122>
 802a63e:	69fb      	ldr	r3, [r7, #28]
 802a640:	2b00      	cmp	r3, #0
 802a642:	f43f af79 	beq.w	802a538 <FLASHPROG_Data+0x14>
      {
        result = FLASH_FULL_ERROR;
      }
    }
  }
  return result;
 802a646:	69fb      	ldr	r3, [r7, #28]
}
 802a648:	4618      	mov	r0, r3
 802a64a:	3720      	adds	r7, #32
 802a64c:	46bd      	mov	sp, r7
 802a64e:	bd80      	pop	{r7, pc}
 802a650:	1ffea7ac 	.word	0x1ffea7ac
 802a654:	1ffea6ac 	.word	0x1ffea6ac
 802a658:	1ffea6a0 	.word	0x1ffea6a0
 802a65c:	1ffea6a8 	.word	0x1ffea6a8
 802a660:	1ffea698 	.word	0x1ffea698
 802a664:	1ffea6a6 	.word	0x1ffea6a6
 802a668:	1ffea6a4 	.word	0x1ffea6a4

0802a66c <FLASHPROG_Close>:
 *
 * @return : none
 *
 */
uint32_t FLASHPROG_Close(void)
{
 802a66c:	b580      	push	{r7, lr}
 802a66e:	af00      	add	r7, sp, #0
  /* Data remaining in page preparation ? */
  if (gl_flash_page_prep_index!=0)
 802a670:	4b0f      	ldr	r3, [pc, #60]	; (802a6b0 <FLASHPROG_Close+0x44>)
 802a672:	681b      	ldr	r3, [r3, #0]
 802a674:	2b00      	cmp	r3, #0
 802a676:	d017      	beq.n	802a6a8 <FLASHPROG_Close+0x3c>
  {
    if ((gl_flash_bytes_written + 256) < gl_flash_max_size)
 802a678:	4b0e      	ldr	r3, [pc, #56]	; (802a6b4 <FLASHPROG_Close+0x48>)
 802a67a:	681b      	ldr	r3, [r3, #0]
 802a67c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 802a680:	4b0d      	ldr	r3, [pc, #52]	; (802a6b8 <FLASHPROG_Close+0x4c>)
 802a682:	681b      	ldr	r3, [r3, #0]
 802a684:	429a      	cmp	r2, r3
 802a686:	d20d      	bcs.n	802a6a4 <FLASHPROG_Close+0x38>
    {
      /* Programm remaining data */
      XMC_FLASH_ProgramPage((void*)gl_flash_write_address,(void*)gl_flash_page_prep);
 802a688:	4b0c      	ldr	r3, [pc, #48]	; (802a6bc <FLASHPROG_Close+0x50>)
 802a68a:	681b      	ldr	r3, [r3, #0]
 802a68c:	4618      	mov	r0, r3
 802a68e:	490c      	ldr	r1, [pc, #48]	; (802a6c0 <FLASHPROG_Close+0x54>)
 802a690:	f7fc fc5a 	bl	8026f48 <XMC_FLASH_ProgramPage>
      gl_flash_bytes_written = gl_flash_bytes_written + gl_flash_page_prep_index;
 802a694:	4b07      	ldr	r3, [pc, #28]	; (802a6b4 <FLASHPROG_Close+0x48>)
 802a696:	681a      	ldr	r2, [r3, #0]
 802a698:	4b05      	ldr	r3, [pc, #20]	; (802a6b0 <FLASHPROG_Close+0x44>)
 802a69a:	681b      	ldr	r3, [r3, #0]
 802a69c:	4413      	add	r3, r2
 802a69e:	4a05      	ldr	r2, [pc, #20]	; (802a6b4 <FLASHPROG_Close+0x48>)
 802a6a0:	6013      	str	r3, [r2, #0]
 802a6a2:	e001      	b.n	802a6a8 <FLASHPROG_Close+0x3c>
    }
    else
    {
      return FLASH_FULL_ERROR;
 802a6a4:	2301      	movs	r3, #1
 802a6a6:	e000      	b.n	802a6aa <FLASHPROG_Close+0x3e>
    }
  }
  return FLASH_OK;
 802a6a8:	2300      	movs	r3, #0
}
 802a6aa:	4618      	mov	r0, r3
 802a6ac:	bd80      	pop	{r7, pc}
 802a6ae:	bf00      	nop
 802a6b0:	1ffea7ac 	.word	0x1ffea7ac
 802a6b4:	1ffea6a0 	.word	0x1ffea6a0
 802a6b8:	1ffea6a8 	.word	0x1ffea6a8
 802a6bc:	1ffea698 	.word	0x1ffea698
 802a6c0:	1ffea6ac 	.word	0x1ffea6ac

0802a6c4 <FLASHPROG_Bytes_written>:
 *
 * @return : number of bytes written
 *
 */
uint32_t FLASHPROG_Bytes_written(void)
{
 802a6c4:	b480      	push	{r7}
 802a6c6:	af00      	add	r7, sp, #0
  return gl_flash_bytes_written;
 802a6c8:	4b03      	ldr	r3, [pc, #12]	; (802a6d8 <FLASHPROG_Bytes_written+0x14>)
 802a6ca:	681b      	ldr	r3, [r3, #0]
}
 802a6cc:	4618      	mov	r0, r3
 802a6ce:	46bd      	mov	sp, r7
 802a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6d4:	4770      	bx	lr
 802a6d6:	bf00      	nop
 802a6d8:	1ffea6a0 	.word	0x1ffea6a0

0802a6dc <FLASHPROG_CRC32_check>:
 * @return : FLASH_OK - CRC32 check is ok
 *           FLAHS_CRC_ERROR - CRC32 check failed
 *
 */
uint32_t FLASHPROG_CRC32_check(uint32_t* ptr_startaddress, uint32_t size_bytes)
{
 802a6dc:	b580      	push	{r7, lr}
 802a6de:	b086      	sub	sp, #24
 802a6e0:	af00      	add	r7, sp, #0
 802a6e2:	6078      	str	r0, [r7, #4]
 802a6e4:	6039      	str	r1, [r7, #0]
  uint32_t crc32_result;
  uint32_t crc32_expected;
  XMC_FCE_STATUS_t fce_status;

  XMC_FCE_Enable();
 802a6e6:	f7fd ff79 	bl	80285dc <XMC_FCE_Enable>
  XMC_FCE_Init(&FCE_config0);
 802a6ea:	4815      	ldr	r0, [pc, #84]	; (802a740 <FLASHPROG_CRC32_check+0x64>)
 802a6ec:	f7fd ff60 	bl	80285b0 <XMC_FCE_Init>
  fce_status = XMC_FCE_CalculateCRC32(&FCE_config0,  ptr_startaddress, size_bytes - 4, &crc32_result);
 802a6f0:	683b      	ldr	r3, [r7, #0]
 802a6f2:	1f1a      	subs	r2, r3, #4
 802a6f4:	f107 030c 	add.w	r3, r7, #12
 802a6f8:	4811      	ldr	r0, [pc, #68]	; (802a740 <FLASHPROG_CRC32_check+0x64>)
 802a6fa:	6879      	ldr	r1, [r7, #4]
 802a6fc:	f7fd ff82 	bl	8028604 <XMC_FCE_CalculateCRC32>
 802a700:	4603      	mov	r3, r0
 802a702:	75fb      	strb	r3, [r7, #23]
  XMC_FCE_GetCRCResult(&FCE_config0, &crc32_result);
 802a704:	f107 030c 	add.w	r3, r7, #12
 802a708:	480d      	ldr	r0, [pc, #52]	; (802a740 <FLASHPROG_CRC32_check+0x64>)
 802a70a:	4619      	mov	r1, r3
 802a70c:	f7ff fe74 	bl	802a3f8 <XMC_FCE_GetCRCResult>
  if (fce_status == XMC_FCE_STATUS_OK)
 802a710:	7dfb      	ldrb	r3, [r7, #23]
 802a712:	2b00      	cmp	r3, #0
 802a714:	d10f      	bne.n	802a736 <FLASHPROG_CRC32_check+0x5a>
  {
    crc32_expected = *(ptr_startaddress + size_bytes/4 - 1);
 802a716:	683b      	ldr	r3, [r7, #0]
 802a718:	089b      	lsrs	r3, r3, #2
 802a71a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a71e:	3b01      	subs	r3, #1
 802a720:	009b      	lsls	r3, r3, #2
 802a722:	687a      	ldr	r2, [r7, #4]
 802a724:	4413      	add	r3, r2
 802a726:	681b      	ldr	r3, [r3, #0]
 802a728:	613b      	str	r3, [r7, #16]
    if (crc32_result != crc32_expected)
 802a72a:	68fa      	ldr	r2, [r7, #12]
 802a72c:	693b      	ldr	r3, [r7, #16]
 802a72e:	429a      	cmp	r2, r3
 802a730:	d001      	beq.n	802a736 <FLASHPROG_CRC32_check+0x5a>
    {
      return FLASH_CRC_ERROR;
 802a732:	2303      	movs	r3, #3
 802a734:	e000      	b.n	802a738 <FLASHPROG_CRC32_check+0x5c>
    }
  }
  return FLASH_OK;
 802a736:	2300      	movs	r3, #0
}
 802a738:	4618      	mov	r0, r3
 802a73a:	3718      	adds	r7, #24
 802a73c:	46bd      	mov	sp, r7
 802a73e:	bd80      	pop	{r7, pc}
 802a740:	1ffe9500 	.word	0x1ffe9500

0802a744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802a744:	b480      	push	{r7}
 802a746:	b083      	sub	sp, #12
 802a748:	af00      	add	r7, sp, #0
 802a74a:	4603      	mov	r3, r0
 802a74c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a752:	2b00      	cmp	r3, #0
 802a754:	db0b      	blt.n	802a76e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802a756:	4908      	ldr	r1, [pc, #32]	; (802a778 <__NVIC_EnableIRQ+0x34>)
 802a758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a75c:	095b      	lsrs	r3, r3, #5
 802a75e:	79fa      	ldrb	r2, [r7, #7]
 802a760:	f002 021f 	and.w	r2, r2, #31
 802a764:	2001      	movs	r0, #1
 802a766:	fa00 f202 	lsl.w	r2, r0, r2
 802a76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802a76e:	370c      	adds	r7, #12
 802a770:	46bd      	mov	sp, r7
 802a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a776:	4770      	bx	lr
 802a778:	e000e100 	.word	0xe000e100

0802a77c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802a77c:	b480      	push	{r7}
 802a77e:	b083      	sub	sp, #12
 802a780:	af00      	add	r7, sp, #0
 802a782:	4603      	mov	r3, r0
 802a784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a78a:	2b00      	cmp	r3, #0
 802a78c:	db10      	blt.n	802a7b0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802a78e:	490b      	ldr	r1, [pc, #44]	; (802a7bc <__NVIC_DisableIRQ+0x40>)
 802a790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a794:	095b      	lsrs	r3, r3, #5
 802a796:	79fa      	ldrb	r2, [r7, #7]
 802a798:	f002 021f 	and.w	r2, r2, #31
 802a79c:	2001      	movs	r0, #1
 802a79e:	fa00 f202 	lsl.w	r2, r0, r2
 802a7a2:	3320      	adds	r3, #32
 802a7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802a7a8:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 802a7ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 802a7b0:	370c      	adds	r7, #12
 802a7b2:	46bd      	mov	sp, r7
 802a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7b8:	4770      	bx	lr
 802a7ba:	bf00      	nop
 802a7bc:	e000e100 	.word	0xe000e100

0802a7c0 <XMC_SCU_RESET_ClearDeviceResetReason>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
{
 802a7c0:	b480      	push	{r7}
 802a7c2:	af00      	add	r7, sp, #0
  /* Clear RSTSTAT.RSTSTAT bitfield */
  SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 802a7c4:	4b03      	ldr	r3, [pc, #12]	; (802a7d4 <XMC_SCU_RESET_ClearDeviceResetReason+0x14>)
 802a7c6:	2201      	movs	r2, #1
 802a7c8:	609a      	str	r2, [r3, #8]
}
 802a7ca:	46bd      	mov	sp, r7
 802a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7d0:	4770      	bx	lr
 802a7d2:	bf00      	nop
 802a7d4:	50004400 	.word	0x50004400

0802a7d8 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 802a7d8:	b480      	push	{r7}
 802a7da:	b085      	sub	sp, #20
 802a7dc:	af00      	add	r7, sp, #0
 802a7de:	60f8      	str	r0, [r7, #12]
 802a7e0:	460b      	mov	r3, r1
 802a7e2:	607a      	str	r2, [r7, #4]
 802a7e4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 802a7e6:	7afb      	ldrb	r3, [r7, #11]
 802a7e8:	687a      	ldr	r2, [r7, #4]
 802a7ea:	409a      	lsls	r2, r3
 802a7ec:	68fb      	ldr	r3, [r7, #12]
 802a7ee:	605a      	str	r2, [r3, #4]
}
 802a7f0:	3714      	adds	r7, #20
 802a7f2:	46bd      	mov	sp, r7
 802a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7f8:	4770      	bx	lr
 802a7fa:	bf00      	nop

0802a7fc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 802a7fc:	b480      	push	{r7}
 802a7fe:	b083      	sub	sp, #12
 802a800:	af00      	add	r7, sp, #0
 802a802:	6078      	str	r0, [r7, #4]
 802a804:	460b      	mov	r3, r1
 802a806:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 802a808:	78fb      	ldrb	r3, [r7, #3]
 802a80a:	2201      	movs	r2, #1
 802a80c:	409a      	lsls	r2, r3
 802a80e:	687b      	ldr	r3, [r7, #4]
 802a810:	605a      	str	r2, [r3, #4]
}
 802a812:	370c      	adds	r7, #12
 802a814:	46bd      	mov	sp, r7
 802a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a81a:	4770      	bx	lr

0802a81c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 802a81c:	b480      	push	{r7}
 802a81e:	b083      	sub	sp, #12
 802a820:	af00      	add	r7, sp, #0
 802a822:	6078      	str	r0, [r7, #4]
 802a824:	460b      	mov	r3, r1
 802a826:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 802a828:	687b      	ldr	r3, [r7, #4]
 802a82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802a82c:	78fb      	ldrb	r3, [r7, #3]
 802a82e:	fa22 f303 	lsr.w	r3, r2, r3
 802a832:	f003 0301 	and.w	r3, r3, #1
}
 802a836:	4618      	mov	r0, r3
 802a838:	370c      	adds	r7, #12
 802a83a:	46bd      	mov	sp, r7
 802a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a840:	4770      	bx	lr
 802a842:	bf00      	nop

0802a844 <XMC_GPIO_EnableDigitalInput>:
 * Enable digital input path for analog pins and configures Pn_PDISC register.This configuration is applicable only for
 * analog port pins.
 *
 */
__STATIC_INLINE void XMC_GPIO_EnableDigitalInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 802a844:	b480      	push	{r7}
 802a846:	b083      	sub	sp, #12
 802a848:	af00      	add	r7, sp, #0
 802a84a:	6078      	str	r0, [r7, #4]
 802a84c:	460b      	mov	r3, r1
 802a84e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_EnableDigitalInput: Invalid analog port", XMC_GPIO_CHECK_ANALOG_PORT(port));
  
  port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 802a850:	687b      	ldr	r3, [r7, #4]
 802a852:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802a854:	78fb      	ldrb	r3, [r7, #3]
 802a856:	2101      	movs	r1, #1
 802a858:	fa01 f303 	lsl.w	r3, r1, r3
 802a85c:	43db      	mvns	r3, r3
 802a85e:	401a      	ands	r2, r3
 802a860:	687b      	ldr	r3, [r7, #4]
 802a862:	661a      	str	r2, [r3, #96]	; 0x60
}
 802a864:	370c      	adds	r7, #12
 802a866:	46bd      	mov	sp, r7
 802a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a86c:	4770      	bx	lr
 802a86e:	bf00      	nop

0802a870 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 802a870:	b580      	push	{r7, lr}
 802a872:	b082      	sub	sp, #8
 802a874:	af00      	add	r7, sp, #0
 802a876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 802a878:	687b      	ldr	r3, [r7, #4]
 802a87a:	781b      	ldrb	r3, [r3, #0]
 802a87c:	b25b      	sxtb	r3, r3
 802a87e:	4618      	mov	r0, r3
 802a880:	f7ff ff60 	bl	802a744 <__NVIC_EnableIRQ>
}
 802a884:	3708      	adds	r7, #8
 802a886:	46bd      	mov	sp, r7
 802a888:	bd80      	pop	{r7, pc}
 802a88a:	bf00      	nop

0802a88c <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 802a88c:	b580      	push	{r7, lr}
 802a88e:	b082      	sub	sp, #8
 802a890:	af00      	add	r7, sp, #0
 802a892:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 802a894:	687b      	ldr	r3, [r7, #4]
 802a896:	781b      	ldrb	r3, [r3, #0]
 802a898:	b25b      	sxtb	r3, r3
 802a89a:	4618      	mov	r0, r3
 802a89c:	f7ff ff6e 	bl	802a77c <__NVIC_DisableIRQ>
}
 802a8a0:	3708      	adds	r7, #8
 802a8a2:	46bd      	mov	sp, r7
 802a8a4:	bd80      	pop	{r7, pc}
 802a8a6:	bf00      	nop

0802a8a8 <Init_ECAT_Adapt_LED>:
 *
 * @return : none
 *
 */
void Init_ECAT_Adapt_LED ()
{
 802a8a8:	b580      	push	{r7, lr}
 802a8aa:	af00      	add	r7, sp, #0
  /* Set mode of all LED ports to push-pull and output level to low*/
  XMC_GPIO_SetMode(P_LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a8ac:	4824      	ldr	r0, [pc, #144]	; (802a940 <Init_ECAT_Adapt_LED+0x98>)
 802a8ae:	210e      	movs	r1, #14
 802a8b0:	2280      	movs	r2, #128	; 0x80
 802a8b2:	f7fd fed7 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED1);
 802a8b6:	4822      	ldr	r0, [pc, #136]	; (802a940 <Init_ECAT_Adapt_LED+0x98>)
 802a8b8:	210e      	movs	r1, #14
 802a8ba:	f7ff ff9f 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a8be:	4821      	ldr	r0, [pc, #132]	; (802a944 <Init_ECAT_Adapt_LED+0x9c>)
 802a8c0:	210e      	movs	r1, #14
 802a8c2:	2280      	movs	r2, #128	; 0x80
 802a8c4:	f7fd fece 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED2);
 802a8c8:	481e      	ldr	r0, [pc, #120]	; (802a944 <Init_ECAT_Adapt_LED+0x9c>)
 802a8ca:	210e      	movs	r1, #14
 802a8cc:	f7ff ff96 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED3, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a8d0:	481d      	ldr	r0, [pc, #116]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a8d2:	210e      	movs	r1, #14
 802a8d4:	2280      	movs	r2, #128	; 0x80
 802a8d6:	f7fd fec5 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED3);
 802a8da:	481b      	ldr	r0, [pc, #108]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a8dc:	210e      	movs	r1, #14
 802a8de:	f7ff ff8d 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED4, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a8e2:	4818      	ldr	r0, [pc, #96]	; (802a944 <Init_ECAT_Adapt_LED+0x9c>)
 802a8e4:	210f      	movs	r1, #15
 802a8e6:	2280      	movs	r2, #128	; 0x80
 802a8e8:	f7fd febc 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED4);
 802a8ec:	4815      	ldr	r0, [pc, #84]	; (802a944 <Init_ECAT_Adapt_LED+0x9c>)
 802a8ee:	210f      	movs	r1, #15
 802a8f0:	f7ff ff84 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED5, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a8f4:	4812      	ldr	r0, [pc, #72]	; (802a940 <Init_ECAT_Adapt_LED+0x98>)
 802a8f6:	2102      	movs	r1, #2
 802a8f8:	2280      	movs	r2, #128	; 0x80
 802a8fa:	f7fd feb3 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED5);
 802a8fe:	4810      	ldr	r0, [pc, #64]	; (802a940 <Init_ECAT_Adapt_LED+0x98>)
 802a900:	2102      	movs	r1, #2
 802a902:	f7ff ff7b 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED6, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a906:	4810      	ldr	r0, [pc, #64]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a908:	210d      	movs	r1, #13
 802a90a:	2280      	movs	r2, #128	; 0x80
 802a90c:	f7fd feaa 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED6);
 802a910:	480d      	ldr	r0, [pc, #52]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a912:	210d      	movs	r1, #13
 802a914:	f7ff ff72 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED7, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a918:	480c      	ldr	r0, [pc, #48]	; (802a94c <Init_ECAT_Adapt_LED+0xa4>)
 802a91a:	2103      	movs	r1, #3
 802a91c:	2280      	movs	r2, #128	; 0x80
 802a91e:	f7fd fea1 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED7);
 802a922:	480a      	ldr	r0, [pc, #40]	; (802a94c <Init_ECAT_Adapt_LED+0xa4>)
 802a924:	2103      	movs	r1, #3
 802a926:	f7ff ff69 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED8, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 802a92a:	4807      	ldr	r0, [pc, #28]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a92c:	210b      	movs	r1, #11
 802a92e:	2280      	movs	r2, #128	; 0x80
 802a930:	f7fd fe98 	bl	8028664 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED8);
 802a934:	4804      	ldr	r0, [pc, #16]	; (802a948 <Init_ECAT_Adapt_LED+0xa0>)
 802a936:	210b      	movs	r1, #11
 802a938:	f7ff ff60 	bl	802a7fc <XMC_GPIO_SetOutputHigh>
}
 802a93c:	bd80      	pop	{r7, pc}
 802a93e:	bf00      	nop
 802a940:	48028100 	.word	0x48028100
 802a944:	48028000 	.word	0x48028000
 802a948:	48028300 	.word	0x48028300
 802a94c:	48028500 	.word	0x48028500

0802a950 <Init_Relax_Button>:
 *
 * @return : none
 *
 */
void Init_Relax_Button ()
{
 802a950:	b580      	push	{r7, lr}
 802a952:	af00      	add	r7, sp, #0
  /* INITIALIZE BUTTON1 ON PORT 5.13 FOR INPUT */
  /* Set mode to input tristate */
  XMC_GPIO_SetMode(P15_13, XMC_GPIO_MODE_INPUT_TRISTATE);
 802a954:	4809      	ldr	r0, [pc, #36]	; (802a97c <Init_Relax_Button+0x2c>)
 802a956:	210d      	movs	r1, #13
 802a958:	2200      	movs	r2, #0
 802a95a:	f7fd fe83 	bl	8028664 <XMC_GPIO_SetMode>
  /* Enable digital input. Only needed because P15.13 is an analog port */
  XMC_GPIO_EnableDigitalInput(P15_13);
 802a95e:	4807      	ldr	r0, [pc, #28]	; (802a97c <Init_Relax_Button+0x2c>)
 802a960:	210d      	movs	r1, #13
 802a962:	f7ff ff6f 	bl	802a844 <XMC_GPIO_EnableDigitalInput>

  /* INITIALIZE BUTTON2 ON PORT 5.12 FOR INPUT */
  /* Set mode to input tristate */
  XMC_GPIO_SetMode(P15_12, XMC_GPIO_MODE_INPUT_TRISTATE);
 802a966:	4805      	ldr	r0, [pc, #20]	; (802a97c <Init_Relax_Button+0x2c>)
 802a968:	210c      	movs	r1, #12
 802a96a:	2200      	movs	r2, #0
 802a96c:	f7fd fe7a 	bl	8028664 <XMC_GPIO_SetMode>
  /* Enable digital input. Only needed because P15.12 is an analog port */
  XMC_GPIO_EnableDigitalInput(P15_12);
 802a970:	4802      	ldr	r0, [pc, #8]	; (802a97c <Init_Relax_Button+0x2c>)
 802a972:	210c      	movs	r1, #12
 802a974:	f7ff ff66 	bl	802a844 <XMC_GPIO_EnableDigitalInput>
}
 802a978:	bd80      	pop	{r7, pc}
 802a97a:	bf00      	nop
 802a97c:	48028f00 	.word	0x48028f00

0802a980 <process_app>:
 *
 * @return : none
 *
 */
void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC)
{
 802a980:	b580      	push	{r7, lr}
 802a982:	b082      	sub	sp, #8
 802a984:	af00      	add	r7, sp, #0
 802a986:	6078      	str	r0, [r7, #4]
 802a988:	6039      	str	r1, [r7, #0]
  /* Check if INIT state is entered, after firmware update was started
   * If yes, trigger system on reset to start bootloader
   */
  if (FWUPDATE_GetDownloadFinished()==1)
 802a98a:	f7ff fcbf 	bl	802a30c <FWUPDATE_GetDownloadFinished>
 802a98e:	4603      	mov	r3, r0
 802a990:	2b01      	cmp	r3, #1
 802a992:	d109      	bne.n	802a9a8 <process_app+0x28>
  {
    /* Restart in normal bootmode */
    /* Clear the reset cause field for proper reset detection of the ssw */
	XMC_SCU_RESET_ClearDeviceResetReason();
 802a994:	f7ff ff14 	bl	802a7c0 <XMC_SCU_RESET_ClearDeviceResetReason>
    /* Set normal boot mode */
    XMC_SCU_SetBootMode(XMC_SCU_BOOTMODE_NORMAL);
 802a998:	2000      	movs	r0, #0
 802a99a:	f7fc fc39 	bl	8027210 <XMC_SCU_SetBootMode>
    /* Trigger power on reset */
    PPB->AIRCR = 1 << PPB_AIRCR_SYSRESETREQ_Pos |0x5FA<<PPB_AIRCR_VECTKEY_Pos | 0x1 << PPB_AIRCR_PRIGROUP_Pos;
 802a99e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 802a9a2:	4a55      	ldr	r2, [pc, #340]	; (802aaf8 <process_app+0x178>)
 802a9a4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  }

  /* OUTPUT PROCESSING */
  /* Check bitfield set by master OUT_GEN_Bit1..8 and set LEDs accordingly */
  XMC_GPIO_SetOutputLevel(P_LED1, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit1));
 802a9a8:	687b      	ldr	r3, [r7, #4]
 802a9aa:	7a9b      	ldrb	r3, [r3, #10]
 802a9ac:	f003 0301 	and.w	r3, r3, #1
 802a9b0:	b2db      	uxtb	r3, r3
 802a9b2:	2b00      	cmp	r3, #0
 802a9b4:	d101      	bne.n	802a9ba <process_app+0x3a>
 802a9b6:	2301      	movs	r3, #1
 802a9b8:	e001      	b.n	802a9be <process_app+0x3e>
 802a9ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a9be:	484f      	ldr	r0, [pc, #316]	; (802aafc <process_app+0x17c>)
 802a9c0:	210e      	movs	r1, #14
 802a9c2:	461a      	mov	r2, r3
 802a9c4:	f7ff ff08 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED2, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit2));
 802a9c8:	687b      	ldr	r3, [r7, #4]
 802a9ca:	7a9b      	ldrb	r3, [r3, #10]
 802a9cc:	f003 0302 	and.w	r3, r3, #2
 802a9d0:	b2db      	uxtb	r3, r3
 802a9d2:	2b00      	cmp	r3, #0
 802a9d4:	d101      	bne.n	802a9da <process_app+0x5a>
 802a9d6:	2301      	movs	r3, #1
 802a9d8:	e001      	b.n	802a9de <process_app+0x5e>
 802a9da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a9de:	4848      	ldr	r0, [pc, #288]	; (802ab00 <process_app+0x180>)
 802a9e0:	210e      	movs	r1, #14
 802a9e2:	461a      	mov	r2, r3
 802a9e4:	f7ff fef8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED3, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit3));
 802a9e8:	687b      	ldr	r3, [r7, #4]
 802a9ea:	7a9b      	ldrb	r3, [r3, #10]
 802a9ec:	f003 0304 	and.w	r3, r3, #4
 802a9f0:	b2db      	uxtb	r3, r3
 802a9f2:	2b00      	cmp	r3, #0
 802a9f4:	d101      	bne.n	802a9fa <process_app+0x7a>
 802a9f6:	2301      	movs	r3, #1
 802a9f8:	e001      	b.n	802a9fe <process_app+0x7e>
 802a9fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802a9fe:	4841      	ldr	r0, [pc, #260]	; (802ab04 <process_app+0x184>)
 802aa00:	210e      	movs	r1, #14
 802aa02:	461a      	mov	r2, r3
 802aa04:	f7ff fee8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED4, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit4));
 802aa08:	687b      	ldr	r3, [r7, #4]
 802aa0a:	7a9b      	ldrb	r3, [r3, #10]
 802aa0c:	f003 0308 	and.w	r3, r3, #8
 802aa10:	b2db      	uxtb	r3, r3
 802aa12:	2b00      	cmp	r3, #0
 802aa14:	d101      	bne.n	802aa1a <process_app+0x9a>
 802aa16:	2301      	movs	r3, #1
 802aa18:	e001      	b.n	802aa1e <process_app+0x9e>
 802aa1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802aa1e:	4838      	ldr	r0, [pc, #224]	; (802ab00 <process_app+0x180>)
 802aa20:	210f      	movs	r1, #15
 802aa22:	461a      	mov	r2, r3
 802aa24:	f7ff fed8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED5, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit5));
 802aa28:	687b      	ldr	r3, [r7, #4]
 802aa2a:	7a9b      	ldrb	r3, [r3, #10]
 802aa2c:	f003 0310 	and.w	r3, r3, #16
 802aa30:	b2db      	uxtb	r3, r3
 802aa32:	2b00      	cmp	r3, #0
 802aa34:	d101      	bne.n	802aa3a <process_app+0xba>
 802aa36:	2301      	movs	r3, #1
 802aa38:	e001      	b.n	802aa3e <process_app+0xbe>
 802aa3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802aa3e:	482f      	ldr	r0, [pc, #188]	; (802aafc <process_app+0x17c>)
 802aa40:	2102      	movs	r1, #2
 802aa42:	461a      	mov	r2, r3
 802aa44:	f7ff fec8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED6, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit6));
 802aa48:	687b      	ldr	r3, [r7, #4]
 802aa4a:	7a9b      	ldrb	r3, [r3, #10]
 802aa4c:	f003 0320 	and.w	r3, r3, #32
 802aa50:	b2db      	uxtb	r3, r3
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	d101      	bne.n	802aa5a <process_app+0xda>
 802aa56:	2301      	movs	r3, #1
 802aa58:	e001      	b.n	802aa5e <process_app+0xde>
 802aa5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802aa5e:	4829      	ldr	r0, [pc, #164]	; (802ab04 <process_app+0x184>)
 802aa60:	210d      	movs	r1, #13
 802aa62:	461a      	mov	r2, r3
 802aa64:	f7ff feb8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED7, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit7));
 802aa68:	687b      	ldr	r3, [r7, #4]
 802aa6a:	7a9b      	ldrb	r3, [r3, #10]
 802aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802aa70:	b2db      	uxtb	r3, r3
 802aa72:	2b00      	cmp	r3, #0
 802aa74:	d101      	bne.n	802aa7a <process_app+0xfa>
 802aa76:	2301      	movs	r3, #1
 802aa78:	e001      	b.n	802aa7e <process_app+0xfe>
 802aa7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802aa7e:	4822      	ldr	r0, [pc, #136]	; (802ab08 <process_app+0x188>)
 802aa80:	2103      	movs	r1, #3
 802aa82:	461a      	mov	r2, r3
 802aa84:	f7ff fea8 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>
  XMC_GPIO_SetOutputLevel(P_LED8, MAP2LEVEL(OUT_GENERIC->OUT_GEN_Bit8));
 802aa88:	687b      	ldr	r3, [r7, #4]
 802aa8a:	7a9b      	ldrb	r3, [r3, #10]
 802aa8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802aa90:	b2db      	uxtb	r3, r3
 802aa92:	2b00      	cmp	r3, #0
 802aa94:	d101      	bne.n	802aa9a <process_app+0x11a>
 802aa96:	2301      	movs	r3, #1
 802aa98:	e001      	b.n	802aa9e <process_app+0x11e>
 802aa9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802aa9e:	4819      	ldr	r0, [pc, #100]	; (802ab04 <process_app+0x184>)
 802aaa0:	210b      	movs	r1, #11
 802aaa2:	461a      	mov	r2, r3
 802aaa4:	f7ff fe98 	bl	802a7d8 <XMC_GPIO_SetOutputLevel>

  /* INPUT PROCESSING */
  /*Check Button 1 and set IN_GEN_Bit1 which is sent to master accordingly*/
  if (XMC_GPIO_GetInput(P15_13))
 802aaa8:	4818      	ldr	r0, [pc, #96]	; (802ab0c <process_app+0x18c>)
 802aaaa:	210d      	movs	r1, #13
 802aaac:	f7ff feb6 	bl	802a81c <XMC_GPIO_GetInput>
 802aab0:	4603      	mov	r3, r0
 802aab2:	2b00      	cmp	r3, #0
 802aab4:	d005      	beq.n	802aac2 <process_app+0x142>
    IN_GENERIC->IN_GEN_Bit1 = 1;
 802aab6:	683a      	ldr	r2, [r7, #0]
 802aab8:	7a93      	ldrb	r3, [r2, #10]
 802aaba:	f043 0301 	orr.w	r3, r3, #1
 802aabe:	7293      	strb	r3, [r2, #10]
 802aac0:	e004      	b.n	802aacc <process_app+0x14c>
  else
    IN_GENERIC->IN_GEN_Bit1 = 0;
 802aac2:	683a      	ldr	r2, [r7, #0]
 802aac4:	7a93      	ldrb	r3, [r2, #10]
 802aac6:	f36f 0300 	bfc	r3, #0, #1
 802aaca:	7293      	strb	r3, [r2, #10]

  /*Check Button 2 and set IN_GEN_Bit2 which is sent to master accordingly*/
  if (XMC_GPIO_GetInput(P15_12))
 802aacc:	480f      	ldr	r0, [pc, #60]	; (802ab0c <process_app+0x18c>)
 802aace:	210c      	movs	r1, #12
 802aad0:	f7ff fea4 	bl	802a81c <XMC_GPIO_GetInput>
 802aad4:	4603      	mov	r3, r0
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	d005      	beq.n	802aae6 <process_app+0x166>
    IN_GENERIC->IN_GEN_Bit2 = 1;
 802aada:	683a      	ldr	r2, [r7, #0]
 802aadc:	7a93      	ldrb	r3, [r2, #10]
 802aade:	f043 0302 	orr.w	r3, r3, #2
 802aae2:	7293      	strb	r3, [r2, #10]
 802aae4:	e004      	b.n	802aaf0 <process_app+0x170>
  else
    IN_GENERIC->IN_GEN_Bit2 = 0;
 802aae6:	683a      	ldr	r2, [r7, #0]
 802aae8:	7a93      	ldrb	r3, [r2, #10]
 802aaea:	f36f 0341 	bfc	r3, #1, #1
 802aaee:	7293      	strb	r3, [r2, #10]
}
 802aaf0:	3708      	adds	r7, #8
 802aaf2:	46bd      	mov	sp, r7
 802aaf4:	bd80      	pop	{r7, pc}
 802aaf6:	bf00      	nop
 802aaf8:	05fa0104 	.word	0x05fa0104
 802aafc:	48028100 	.word	0x48028100
 802ab00:	48028000 	.word	0x48028000
 802ab04:	48028300 	.word	0x48028300
 802ab08:	48028500 	.word	0x48028500
 802ab0c:	48028f00 	.word	0x48028f00

0802ab10 <main>:
 *
 * Initializes all the consumed Apps & Creates and process SSC stack
 *
 * */
int main(void)
{
 802ab10:	b580      	push	{r7, lr}
 802ab12:	af00      	add	r7, sp, #0
  /*Initialize DAVE */
  if(DAVE_Init() == DAVE_STATUS_FAILURE)
 802ab14:	f7ff fb70 	bl	802a1f8 <DAVE_Init>
 802ab18:	4603      	mov	r3, r0
 802ab1a:	2b01      	cmp	r3, #1
 802ab1c:	d100      	bne.n	802ab20 <main+0x10>
    /* Placeholder for error handler code.*/
    XMC_DEBUG(("DAVE APPs initialization failed\n"));
    while(1U)
    {
      /* do nothing */
    }
 802ab1e:	e7fe      	b.n	802ab1e <main+0xe>
  }

  /* Initialize the ports which drive LEDs on EtherCat shield*/
  Init_ECAT_Adapt_LED ();
 802ab20:	f7ff fec2 	bl	802a8a8 <Init_ECAT_Adapt_LED>
  /* Initialize buttons on XMC4800 */
  Init_Relax_Button();
 802ab24:	f7ff ff14 	bl	802a950 <Init_Relax_Button>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  for( ;; )
  {
    MainLoop();
 802ab28:	f7f6 fc8c 	bl	8021444 <MainLoop>
  }
 802ab2c:	e7fc      	b.n	802ab28 <main+0x18>
 802ab2e:	bf00      	nop

0802ab30 <ERU1_0_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC0 Interrupts and need to call the SSC Stack
 */
void SYNC0IRQHandler (void)
{
 802ab30:	b580      	push	{r7, lr}
 802ab32:	af00      	add	r7, sp, #0
	Sync0_Isr();
 802ab34:	f7f6 fb0e 	bl	8021154 <Sync0_Isr>
}
 802ab38:	bd80      	pop	{r7, pc}
 802ab3a:	bf00      	nop

0802ab3c <ERU1_3_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC1 Interrupts and need to call the SSC Stack
 */
void SYNC1IRQHandler (void)
{
 802ab3c:	b580      	push	{r7, lr}
 802ab3e:	af00      	add	r7, sp, #0
	Sync1_Isr();
 802ab40:	f7f6 fbb4 	bl	80212ac <Sync1_Isr>
}
 802ab44:	bd80      	pop	{r7, pc}
 802ab46:	bf00      	nop

0802ab48 <ENABLE_ESC_INT_USER>:
 *
 * <b>Details of function</b><br>
 * This routine is called from ECAT_APP on request of SSC stack once interrupts (sync1/sync0) need to be enabled
 */
void ENABLE_ESC_INT_USER()
{
 802ab48:	b580      	push	{r7, lr}
 802ab4a:	af00      	add	r7, sp, #0
	INTERRUPT_Enable(&INT_SYNC0);
 802ab4c:	4803      	ldr	r0, [pc, #12]	; (802ab5c <ENABLE_ESC_INT_USER+0x14>)
 802ab4e:	f7ff fe8f 	bl	802a870 <INTERRUPT_Enable>
	INTERRUPT_Enable(&INT_SYNC1);
 802ab52:	4803      	ldr	r0, [pc, #12]	; (802ab60 <ENABLE_ESC_INT_USER+0x18>)
 802ab54:	f7ff fe8c 	bl	802a870 <INTERRUPT_Enable>
}
 802ab58:	bd80      	pop	{r7, pc}
 802ab5a:	bf00      	nop
 802ab5c:	0802b7e8 	.word	0x0802b7e8
 802ab60:	0802b7e4 	.word	0x0802b7e4

0802ab64 <DISABLE_ESC_INT_USER>:
 *
 * <b>Details of function</b><br>
 * This routine is called from ECAT_APP on request of SSC stack once interrupts (sync1/sync0) need to be disabled
 */
void DISABLE_ESC_INT_USER()
{
 802ab64:	b580      	push	{r7, lr}
 802ab66:	af00      	add	r7, sp, #0
	INTERRUPT_Disable(&INT_SYNC0);
 802ab68:	4803      	ldr	r0, [pc, #12]	; (802ab78 <DISABLE_ESC_INT_USER+0x14>)
 802ab6a:	f7ff fe8f 	bl	802a88c <INTERRUPT_Disable>
	INTERRUPT_Disable(&INT_SYNC1);
 802ab6e:	4803      	ldr	r0, [pc, #12]	; (802ab7c <DISABLE_ESC_INT_USER+0x18>)
 802ab70:	f7ff fe8c 	bl	802a88c <INTERRUPT_Disable>
}
 802ab74:	bd80      	pop	{r7, pc}
 802ab76:	bf00      	nop
 802ab78:	0802b7e8 	.word	0x0802b7e8
 802ab7c:	0802b7e4 	.word	0x0802b7e4

0802ab80 <__errno>:
 802ab80:	4b01      	ldr	r3, [pc, #4]	; (802ab88 <__errno+0x8>)
 802ab82:	6818      	ldr	r0, [r3, #0]
 802ab84:	4770      	bx	lr
 802ab86:	bf00      	nop
 802ab88:	1ffe956c 	.word	0x1ffe956c

0802ab8c <__libc_init_array>:
 802ab8c:	b570      	push	{r4, r5, r6, lr}
 802ab8e:	4b0e      	ldr	r3, [pc, #56]	; (802abc8 <__libc_init_array+0x3c>)
 802ab90:	4c0e      	ldr	r4, [pc, #56]	; (802abcc <__libc_init_array+0x40>)
 802ab92:	1ae4      	subs	r4, r4, r3
 802ab94:	10a4      	asrs	r4, r4, #2
 802ab96:	2500      	movs	r5, #0
 802ab98:	461e      	mov	r6, r3
 802ab9a:	42a5      	cmp	r5, r4
 802ab9c:	d004      	beq.n	802aba8 <__libc_init_array+0x1c>
 802ab9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802aba2:	4798      	blx	r3
 802aba4:	3501      	adds	r5, #1
 802aba6:	e7f8      	b.n	802ab9a <__libc_init_array+0xe>
 802aba8:	f7fd fdf2 	bl	8028790 <_init>
 802abac:	4c08      	ldr	r4, [pc, #32]	; (802abd0 <__libc_init_array+0x44>)
 802abae:	4b09      	ldr	r3, [pc, #36]	; (802abd4 <__libc_init_array+0x48>)
 802abb0:	1ae4      	subs	r4, r4, r3
 802abb2:	10a4      	asrs	r4, r4, #2
 802abb4:	2500      	movs	r5, #0
 802abb6:	461e      	mov	r6, r3
 802abb8:	42a5      	cmp	r5, r4
 802abba:	d004      	beq.n	802abc6 <__libc_init_array+0x3a>
 802abbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802abc0:	4798      	blx	r3
 802abc2:	3501      	adds	r5, #1
 802abc4:	e7f8      	b.n	802abb8 <__libc_init_array+0x2c>
 802abc6:	bd70      	pop	{r4, r5, r6, pc}
 802abc8:	1ffe9570 	.word	0x1ffe9570
 802abcc:	1ffe9570 	.word	0x1ffe9570
 802abd0:	1ffe9570 	.word	0x1ffe9570
 802abd4:	1ffe9570 	.word	0x1ffe9570

0802abd8 <malloc>:
 802abd8:	4b02      	ldr	r3, [pc, #8]	; (802abe4 <malloc+0xc>)
 802abda:	4601      	mov	r1, r0
 802abdc:	6818      	ldr	r0, [r3, #0]
 802abde:	f000 b873 	b.w	802acc8 <_malloc_r>
 802abe2:	bf00      	nop
 802abe4:	1ffe956c 	.word	0x1ffe956c

0802abe8 <free>:
 802abe8:	4b02      	ldr	r3, [pc, #8]	; (802abf4 <free+0xc>)
 802abea:	4601      	mov	r1, r0
 802abec:	6818      	ldr	r0, [r3, #0]
 802abee:	f000 b827 	b.w	802ac40 <_free_r>
 802abf2:	bf00      	nop
 802abf4:	1ffe956c 	.word	0x1ffe956c

0802abf8 <memcmp>:
 802abf8:	b510      	push	{r4, lr}
 802abfa:	440a      	add	r2, r1
 802abfc:	1e44      	subs	r4, r0, #1
 802abfe:	4291      	cmp	r1, r2
 802ac00:	d008      	beq.n	802ac14 <memcmp+0x1c>
 802ac02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802ac06:	7808      	ldrb	r0, [r1, #0]
 802ac08:	4283      	cmp	r3, r0
 802ac0a:	d001      	beq.n	802ac10 <memcmp+0x18>
 802ac0c:	1a18      	subs	r0, r3, r0
 802ac0e:	bd10      	pop	{r4, pc}
 802ac10:	3101      	adds	r1, #1
 802ac12:	e7f4      	b.n	802abfe <memcmp+0x6>
 802ac14:	2000      	movs	r0, #0
 802ac16:	bd10      	pop	{r4, pc}

0802ac18 <memcpy>:
 802ac18:	b510      	push	{r4, lr}
 802ac1a:	1e43      	subs	r3, r0, #1
 802ac1c:	440a      	add	r2, r1
 802ac1e:	4291      	cmp	r1, r2
 802ac20:	d004      	beq.n	802ac2c <memcpy+0x14>
 802ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ac2a:	e7f8      	b.n	802ac1e <memcpy+0x6>
 802ac2c:	bd10      	pop	{r4, pc}

0802ac2e <memset>:
 802ac2e:	4402      	add	r2, r0
 802ac30:	4603      	mov	r3, r0
 802ac32:	4293      	cmp	r3, r2
 802ac34:	d002      	beq.n	802ac3c <memset+0xe>
 802ac36:	f803 1b01 	strb.w	r1, [r3], #1
 802ac3a:	e7fa      	b.n	802ac32 <memset+0x4>
 802ac3c:	4770      	bx	lr
	...

0802ac40 <_free_r>:
 802ac40:	b530      	push	{r4, r5, lr}
 802ac42:	2900      	cmp	r1, #0
 802ac44:	d03d      	beq.n	802acc2 <_free_r+0x82>
 802ac46:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802ac4a:	1f0b      	subs	r3, r1, #4
 802ac4c:	491d      	ldr	r1, [pc, #116]	; (802acc4 <_free_r+0x84>)
 802ac4e:	2a00      	cmp	r2, #0
 802ac50:	bfb8      	it	lt
 802ac52:	189b      	addlt	r3, r3, r2
 802ac54:	680a      	ldr	r2, [r1, #0]
 802ac56:	460c      	mov	r4, r1
 802ac58:	b912      	cbnz	r2, 802ac60 <_free_r+0x20>
 802ac5a:	605a      	str	r2, [r3, #4]
 802ac5c:	600b      	str	r3, [r1, #0]
 802ac5e:	bd30      	pop	{r4, r5, pc}
 802ac60:	4293      	cmp	r3, r2
 802ac62:	d20d      	bcs.n	802ac80 <_free_r+0x40>
 802ac64:	6819      	ldr	r1, [r3, #0]
 802ac66:	1858      	adds	r0, r3, r1
 802ac68:	4290      	cmp	r0, r2
 802ac6a:	bf01      	itttt	eq
 802ac6c:	585a      	ldreq	r2, [r3, r1]
 802ac6e:	1852      	addeq	r2, r2, r1
 802ac70:	601a      	streq	r2, [r3, #0]
 802ac72:	6842      	ldreq	r2, [r0, #4]
 802ac74:	605a      	str	r2, [r3, #4]
 802ac76:	6023      	str	r3, [r4, #0]
 802ac78:	bd30      	pop	{r4, r5, pc}
 802ac7a:	4299      	cmp	r1, r3
 802ac7c:	d803      	bhi.n	802ac86 <_free_r+0x46>
 802ac7e:	460a      	mov	r2, r1
 802ac80:	6851      	ldr	r1, [r2, #4]
 802ac82:	2900      	cmp	r1, #0
 802ac84:	d1f9      	bne.n	802ac7a <_free_r+0x3a>
 802ac86:	6814      	ldr	r4, [r2, #0]
 802ac88:	1915      	adds	r5, r2, r4
 802ac8a:	429d      	cmp	r5, r3
 802ac8c:	d10a      	bne.n	802aca4 <_free_r+0x64>
 802ac8e:	681b      	ldr	r3, [r3, #0]
 802ac90:	4423      	add	r3, r4
 802ac92:	18d0      	adds	r0, r2, r3
 802ac94:	4288      	cmp	r0, r1
 802ac96:	6013      	str	r3, [r2, #0]
 802ac98:	d113      	bne.n	802acc2 <_free_r+0x82>
 802ac9a:	6808      	ldr	r0, [r1, #0]
 802ac9c:	4403      	add	r3, r0
 802ac9e:	6013      	str	r3, [r2, #0]
 802aca0:	684b      	ldr	r3, [r1, #4]
 802aca2:	e00d      	b.n	802acc0 <_free_r+0x80>
 802aca4:	d902      	bls.n	802acac <_free_r+0x6c>
 802aca6:	230c      	movs	r3, #12
 802aca8:	6003      	str	r3, [r0, #0]
 802acaa:	bd30      	pop	{r4, r5, pc}
 802acac:	681c      	ldr	r4, [r3, #0]
 802acae:	1918      	adds	r0, r3, r4
 802acb0:	4288      	cmp	r0, r1
 802acb2:	bf04      	itt	eq
 802acb4:	6808      	ldreq	r0, [r1, #0]
 802acb6:	6849      	ldreq	r1, [r1, #4]
 802acb8:	6059      	str	r1, [r3, #4]
 802acba:	bf04      	itt	eq
 802acbc:	1900      	addeq	r0, r0, r4
 802acbe:	6018      	streq	r0, [r3, #0]
 802acc0:	6053      	str	r3, [r2, #4]
 802acc2:	bd30      	pop	{r4, r5, pc}
 802acc4:	1ffea7b4 	.word	0x1ffea7b4

0802acc8 <_malloc_r>:
 802acc8:	b570      	push	{r4, r5, r6, lr}
 802acca:	1ccc      	adds	r4, r1, #3
 802accc:	f024 0403 	bic.w	r4, r4, #3
 802acd0:	3408      	adds	r4, #8
 802acd2:	2c0c      	cmp	r4, #12
 802acd4:	bf38      	it	cc
 802acd6:	240c      	movcc	r4, #12
 802acd8:	2c00      	cmp	r4, #0
 802acda:	4606      	mov	r6, r0
 802acdc:	da03      	bge.n	802ace6 <_malloc_r+0x1e>
 802acde:	230c      	movs	r3, #12
 802ace0:	6033      	str	r3, [r6, #0]
 802ace2:	2000      	movs	r0, #0
 802ace4:	bd70      	pop	{r4, r5, r6, pc}
 802ace6:	428c      	cmp	r4, r1
 802ace8:	d3f9      	bcc.n	802acde <_malloc_r+0x16>
 802acea:	4a20      	ldr	r2, [pc, #128]	; (802ad6c <_malloc_r+0xa4>)
 802acec:	6813      	ldr	r3, [r2, #0]
 802acee:	4610      	mov	r0, r2
 802acf0:	4619      	mov	r1, r3
 802acf2:	b1a1      	cbz	r1, 802ad1e <_malloc_r+0x56>
 802acf4:	680a      	ldr	r2, [r1, #0]
 802acf6:	1b12      	subs	r2, r2, r4
 802acf8:	d40e      	bmi.n	802ad18 <_malloc_r+0x50>
 802acfa:	2a0b      	cmp	r2, #11
 802acfc:	d903      	bls.n	802ad06 <_malloc_r+0x3e>
 802acfe:	600a      	str	r2, [r1, #0]
 802ad00:	188b      	adds	r3, r1, r2
 802ad02:	508c      	str	r4, [r1, r2]
 802ad04:	e01f      	b.n	802ad46 <_malloc_r+0x7e>
 802ad06:	428b      	cmp	r3, r1
 802ad08:	bf0d      	iteet	eq
 802ad0a:	685a      	ldreq	r2, [r3, #4]
 802ad0c:	684a      	ldrne	r2, [r1, #4]
 802ad0e:	605a      	strne	r2, [r3, #4]
 802ad10:	6002      	streq	r2, [r0, #0]
 802ad12:	bf18      	it	ne
 802ad14:	460b      	movne	r3, r1
 802ad16:	e016      	b.n	802ad46 <_malloc_r+0x7e>
 802ad18:	460b      	mov	r3, r1
 802ad1a:	6849      	ldr	r1, [r1, #4]
 802ad1c:	e7e9      	b.n	802acf2 <_malloc_r+0x2a>
 802ad1e:	4d14      	ldr	r5, [pc, #80]	; (802ad70 <_malloc_r+0xa8>)
 802ad20:	682b      	ldr	r3, [r5, #0]
 802ad22:	b91b      	cbnz	r3, 802ad2c <_malloc_r+0x64>
 802ad24:	4630      	mov	r0, r6
 802ad26:	f000 f825 	bl	802ad74 <_sbrk_r>
 802ad2a:	6028      	str	r0, [r5, #0]
 802ad2c:	4630      	mov	r0, r6
 802ad2e:	4621      	mov	r1, r4
 802ad30:	f000 f820 	bl	802ad74 <_sbrk_r>
 802ad34:	1c42      	adds	r2, r0, #1
 802ad36:	4603      	mov	r3, r0
 802ad38:	d0d1      	beq.n	802acde <_malloc_r+0x16>
 802ad3a:	1cc5      	adds	r5, r0, #3
 802ad3c:	f025 0503 	bic.w	r5, r5, #3
 802ad40:	4285      	cmp	r5, r0
 802ad42:	d10a      	bne.n	802ad5a <_malloc_r+0x92>
 802ad44:	601c      	str	r4, [r3, #0]
 802ad46:	f103 000b 	add.w	r0, r3, #11
 802ad4a:	1d1a      	adds	r2, r3, #4
 802ad4c:	f020 0007 	bic.w	r0, r0, #7
 802ad50:	1a82      	subs	r2, r0, r2
 802ad52:	d00a      	beq.n	802ad6a <_malloc_r+0xa2>
 802ad54:	4251      	negs	r1, r2
 802ad56:	5099      	str	r1, [r3, r2]
 802ad58:	bd70      	pop	{r4, r5, r6, pc}
 802ad5a:	4630      	mov	r0, r6
 802ad5c:	1ae9      	subs	r1, r5, r3
 802ad5e:	f000 f809 	bl	802ad74 <_sbrk_r>
 802ad62:	3001      	adds	r0, #1
 802ad64:	d0bb      	beq.n	802acde <_malloc_r+0x16>
 802ad66:	462b      	mov	r3, r5
 802ad68:	e7ec      	b.n	802ad44 <_malloc_r+0x7c>
 802ad6a:	bd70      	pop	{r4, r5, r6, pc}
 802ad6c:	1ffea7b4 	.word	0x1ffea7b4
 802ad70:	1ffea7b0 	.word	0x1ffea7b0

0802ad74 <_sbrk_r>:
 802ad74:	b538      	push	{r3, r4, r5, lr}
 802ad76:	4c06      	ldr	r4, [pc, #24]	; (802ad90 <_sbrk_r+0x1c>)
 802ad78:	2300      	movs	r3, #0
 802ad7a:	4605      	mov	r5, r0
 802ad7c:	4608      	mov	r0, r1
 802ad7e:	6023      	str	r3, [r4, #0]
 802ad80:	f7fd fcd2 	bl	8028728 <_sbrk>
 802ad84:	1c43      	adds	r3, r0, #1
 802ad86:	d102      	bne.n	802ad8e <_sbrk_r+0x1a>
 802ad88:	6823      	ldr	r3, [r4, #0]
 802ad8a:	b103      	cbz	r3, 802ad8e <_sbrk_r+0x1a>
 802ad8c:	602b      	str	r3, [r5, #0]
 802ad8e:	bd38      	pop	{r3, r4, r5, pc}
 802ad90:	1ffeaa10 	.word	0x1ffeaa10

0802ad94 <strlen>:
 802ad94:	4603      	mov	r3, r0
 802ad96:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ad9a:	2a00      	cmp	r2, #0
 802ad9c:	d1fb      	bne.n	802ad96 <strlen+0x2>
 802ad9e:	1a18      	subs	r0, r3, r0
 802ada0:	3801      	subs	r0, #1
 802ada2:	4770      	bx	lr

0802ada4 <asEntryDesc0x1600>:
 802ada4:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802adb4:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802adc4:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802add4:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802ade4:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802adf4 <aName0x1600>:
 802adf4:	554f 5f54 4547 454e 4952 2043 7270 636f     OUT_GENERIC proc
 802ae04:	7365 2073 6164 6174 6d20 7061 6970 676e     ess data mapping
 802ae14:	5300 6275 6e49 6564 2078 3030 0031 7553     .SubIndex 001.Su
 802ae24:	4962 646e 7865 3020 3230 5300 6275 6e49     bIndex 002.SubIn
 802ae34:	6564 2078 3030 0033 7553 4962 646e 7865     dex 003.SubIndex
 802ae44:	3020 3430 5300 6275 6e49 6564 2078 3030      004.SubIndex 00
 802ae54:	0035 7553 4962 646e 7865 3020 3630 5300     5.SubIndex 006.S
 802ae64:	6275 6e49 6564 2078 3030 0037 7553 4962     ubIndex 007.SubI
 802ae74:	646e 7865 3020 3830 5300 6275 6e49 6564     ndex 008.SubInde
 802ae84:	2078 3030 0039 7553 4962 646e 7865 3020     x 009.SubIndex 0
 802ae94:	3031 5300 6275 6e49 6564 2078 3130 0031     10.SubIndex 011.
 802aea4:	7553 4962 646e 7865 3020 3231 ff00 0000     SubIndex 012....

0802aeb4 <asEntryDesc0x1A00>:
 802aeb4:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802aec4:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802aed4:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802aee4:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802aef4:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802af04 <aName0x1A00>:
 802af04:	4e49 475f 4e45 5245 4349 7020 6f72 6563     IN_GENERIC proce
 802af14:	7373 6420 7461 2061 616d 7070 6e69 0067     ss data mapping.
 802af24:	7553 4962 646e 7865 3020 3130 5300 6275     SubIndex 001.Sub
 802af34:	6e49 6564 2078 3030 0032 7553 4962 646e     Index 002.SubInd
 802af44:	7865 3020 3330 5300 6275 6e49 6564 2078     ex 003.SubIndex 
 802af54:	3030 0034 7553 4962 646e 7865 3020 3530     004.SubIndex 005
 802af64:	5300 6275 6e49 6564 2078 3030 0036 7553     .SubIndex 006.Su
 802af74:	4962 646e 7865 3020 3730 5300 6275 6e49     bIndex 007.SubIn
 802af84:	6564 2078 3030 0038 7553 4962 646e 7865     dex 008.SubIndex
 802af94:	3020 3930 5300 6275 6e49 6564 2078 3130      009.SubIndex 01
 802afa4:	0030 7553 4962 646e 7865 3020 3131 5300     0.SubIndex 011.S
 802afb4:	6275 6e49 6564 2078 3130 0032 00ff 0000     ubIndex 012.....

0802afc4 <asEntryDesc0x1C12>:
 802afc4:	0005 0008 0007 0006 0010 0007               ............

0802afd0 <aName0x1C12>:
 802afd0:	7953 636e 614d 616e 6567 2072 2032 7361     SyncManager 2 as
 802afe0:	6973 6e67 656d 746e ff00 0000               signment....

0802afec <asEntryDesc0x1C13>:
 802afec:	0005 0008 0007 0006 0010 0007               ............

0802aff8 <aName0x1C13>:
 802aff8:	7953 636e 614d 616e 6567 2072 2033 7361     SyncManager 3 as
 802b008:	6973 6e67 656d 746e ff00 0000               signment....

0802b014 <asEntryDesc0x6000>:
 802b014:	0005 0008 0007 0006 0010 0007 0006 0010     ................
 802b024:	0007 0006 0010 0007 0006 0010 0007 0001     ................
 802b034:	0001 0007 0001 0001 0007 0001 0001 0007     ................
 802b044:	0001 0001 0007 0001 0001 0007 0001 0001     ................
 802b054:	0007 0001 0001 0007 0001 0001 0007 0000     ................

0802b064 <aName0x6000>:
 802b064:	4e49 475f 4e45 5245 4349 4900 5f4e 4547     IN_GENERIC.IN_GE
 802b074:	5f4e 4e49 3154 4900 5f4e 4547 5f4e 4e49     N_INT1.IN_GEN_IN
 802b084:	3254 4900 5f4e 4547 5f4e 4e49 3354 4900     T2.IN_GEN_INT3.I
 802b094:	5f4e 4547 5f4e 4e49 3454 4900 5f4e 4547     N_GEN_INT4.IN_GE
 802b0a4:	5f4e 6942 3174 4900 5f4e 4547 5f4e 6942     N_Bit1.IN_GEN_Bi
 802b0b4:	3274 4900 5f4e 4547 5f4e 6942 3374 4900     t2.IN_GEN_Bit3.I
 802b0c4:	5f4e 4547 5f4e 6942 3474 4900 5f4e 4547     N_GEN_Bit4.IN_GE
 802b0d4:	5f4e 6942 3574 4900 5f4e 4547 5f4e 6942     N_Bit5.IN_GEN_Bi
 802b0e4:	3674 4900 5f4e 4547 5f4e 6942 3774 4900     t6.IN_GEN_Bit7.I
 802b0f4:	5f4e 4547 5f4e 6942 3874 ff00 0000 0000     N_GEN_Bit8......

0802b104 <asEntryDesc0x7000>:
 802b104:	0005 0008 0007 0006 0010 003f 0006 0010     ..........?.....
 802b114:	003f 0006 0010 003f 0006 0010 003f 0001     ?.....?.....?...
 802b124:	0001 003f 0001 0001 003f 0001 0001 003f     ..?.....?.....?.
 802b134:	0001 0001 003f 0001 0001 003f 0001 0001     ....?.....?.....
 802b144:	003f 0001 0001 003f 0001 0001 003f 0000     ?.....?.....?...

0802b154 <aName0x7000>:
 802b154:	554f 5f54 4547 454e 4952 0043 554f 5f54     OUT_GENERIC.OUT_
 802b164:	4547 5f4e 4e49 3154 4f00 5455 475f 4e45     GEN_INT1.OUT_GEN
 802b174:	495f 544e 0032 554f 5f54 4547 5f4e 4e49     _INT2.OUT_GEN_IN
 802b184:	3354 4f00 5455 475f 4e45 495f 544e 0034     T3.OUT_GEN_INT4.
 802b194:	554f 5f54 4547 5f4e 6942 3174 4f00 5455     OUT_GEN_Bit1.OUT
 802b1a4:	475f 4e45 425f 7469 0032 554f 5f54 4547     _GEN_Bit2.OUT_GE
 802b1b4:	5f4e 6942 3374 4f00 5455 475f 4e45 425f     N_Bit3.OUT_GEN_B
 802b1c4:	7469 0034 554f 5f54 4547 5f4e 6942 3574     it4.OUT_GEN_Bit5
 802b1d4:	4f00 5455 475f 4e45 425f 7469 0036 554f     .OUT_GEN_Bit6.OU
 802b1e4:	5f54 4547 5f4e 6942 3774 4f00 5455 475f     T_GEN_Bit7.OUT_G
 802b1f4:	4e45 425f 7469 0038 00ff 0000               EN_Bit8.....

0802b200 <asEntryDesc0xF000>:
 802b200:	0005 0008 0007 0006 0010 0007 0006 0010     ................
 802b210:	0007 0000                                   ....

0802b214 <aName0xF000>:
 802b214:	6f4d 7564 616c 2072 6544 6976 6563 5020     Modular Device P
 802b224:	6f72 6966 656c 4900 646e 7865 6420 7369     rofile.Index dis
 802b234:	6174 636e 2065 4d00 7861 6d69 6d75 6e20     tance .Maximum n
 802b244:	6d75 6562 2072 666f 6d20 646f 6c75 7365     umber of modules
 802b254:	0020 00ff                                    ...

0802b258 <sEntryDesc0x1000>:
 802b258:	0007 0020 0007 0000                         .. .....

0802b260 <aName0x1000>:
 802b260:	6544 6976 6563 7420 7079 0065               Device type.

0802b26c <sEntryDesc0x1001>:
 802b26c:	0005 0008 0007 0000                         ........

0802b274 <aName0x1001>:
 802b274:	7245 6f72 2072 6572 6967 7473 7265 0000     Error register..

0802b284 <sEntryDesc0x1008>:
 802b284:	0009 0038 0007 0000                         ..8.....

0802b28c <aName0x1008>:
 802b28c:	6544 6976 6563 6e20 6d61 0065               Device name.

0802b298 <sEntryDesc0x1009>:
 802b298:	0009 0018 0007 0000                         ........

0802b2a0 <aName0x1009>:
 802b2a0:	6148 6472 6177 6572 7620 7265 6973 6e6f     Hardware version
 802b2b0:	0000 0000                                   ....

0802b2b4 <sEntryDesc0x100A>:
 802b2b4:	0009 0020 0007 0000                         .. .....

0802b2bc <aName0x100A>:
 802b2bc:	6f53 7466 6177 6572 7620 7265 6973 6e6f     Software version
 802b2cc:	0000 0000                                   ....

0802b2d0 <asEntryDesc0x1018>:
 802b2d0:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802b2e0:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802b2f0 <aName0x1018>:
 802b2f0:	6449 6e65 6974 7974 5600 6e65 6f64 2072     Identity.Vendor 
 802b300:	4449 5000 6f72 7564 7463 6320 646f 0065     ID.Product code.
 802b310:	6552 6976 6973 6e6f 5300 7265 6169 206c     Revision.Serial 
 802b320:	756e 626d 7265 ff00 0000 0000               number......

0802b32c <asEntryDesc0x10F1>:
 802b32c:	0005 0008 0007 0007 0020 003f 0006 0010     ........ .?.....
 802b33c:	003f 0000                                   ?...

0802b340 <aName0x10F1>:
 802b340:	7245 6f72 2072 6553 7474 6e69 7367 4c00     Error Settings.L
 802b350:	636f 6c61 4520 7272 726f 5220 6165 7463     ocal Error React
 802b360:	6f69 006e 7953 636e 4520 7272 726f 4320     ion.Sync Error C
 802b370:	756f 746e 7265 4c20 6d69 7469 ff00 0000     ounter Limit....

0802b380 <sEntryDesc0x10F8>:
 802b380:	001b 0040 00bf 0000                         ..@.....

0802b388 <aName0x10F8>:
 802b388:	6954 656d 7473 6d61 2070 624f 656a 7463     Timestamp Object
 802b398:	ff00 0000                                   ....

0802b39c <asEntryDesc0x1C00>:
 802b39c:	0005 0008 0007 0005 0008 0007               ............

0802b3a8 <aName0x1C00>:
 802b3a8:	7953 636e 6d20 6e61 6761 7265 7420 7079     Sync manager typ
 802b3b8:	0065 0000                                   e...

0802b3bc <asEntryDesc0x1C3x>:
 802b3bc:	0005 0008 0007 0006 0010 000f 0007 0020     .............. .
 802b3cc:	0007 0000 0020 0000 0006 0010 0007 0007     .... ...........
 802b3dc:	0020 0007 0007 0020 0007 0000 0020 0000      ..... ..... ...
 802b3ec:	0006 0010 003f 0007 0020 0007 0007 0020     ....?... ..... .
 802b3fc:	003f 0006 0010 0007 0006 0010 0007 0000     ?...............
 802b40c:	0010 0000 0000 0010 0000 0000 0020 0000     ............ ...
 802b41c:	0000 0020 0000 0000 0020 0000 0000 0020     .. ..... ..... .
	...
 802b47c:	0001 0001 0007 0000                         ........

0802b484 <aName0x1C32>:
 802b484:	4d53 6f20 7475 7570 2074 6170 6172 656d     SM output parame
 802b494:	6574 0072 7953 636e 7268 6e6f 7a69 7461     ter.Synchronizat
 802b4a4:	6f69 206e 7954 6570 4300 6379 656c 5420     ion Type.Cycle T
 802b4b4:	6d69 0065 5300 6e79 6863 6f72 696e 617a     ime..Synchroniza
 802b4c4:	6974 6e6f 5420 7079 7365 7320 7075 6f70     tion Types suppo
 802b4d4:	7472 6465 4d00 6e69 6d69 6d75 4320 6379     rted.Minimum Cyc
 802b4e4:	656c 5420 6d69 0065 6143 636c 6120 646e     le Time.Calc and
 802b4f4:	4320 706f 2079 6954 656d 0000 6547 2074      Copy Time..Get 
 802b504:	7943 6c63 2065 6954 656d 4400 6c65 7961     Cycle Time.Delay
 802b514:	5420 6d69 0065 7953 636e 2030 7943 6c63      Time.Sync0 Cycl
 802b524:	2065 6954 656d 5300 2d4d 7645 6e65 2074     e Time.SM-Event 
 802b534:	694d 7373 6465 4300 6379 656c 5420 6d69     Missed.Cycle Tim
 802b544:	2065 6f54 206f 6d53 6c61 006c 6853 6669     e Too Small.Shif
 802b554:	2074 6954 656d 5420 6f6f 5320 6f68 7472     t Time Too Short
	...
 802b574:	0000 5300 6e79 2063 7245 6f72 0072 00ff     ...Sync Error...

0802b584 <aName0x1C33>:
 802b584:	4d53 6920 706e 7475 7020 7261 6d61 7465     SM input paramet
 802b594:	7265 5300 6e79 6863 6f72 696e 617a 6974     er.Synchronizati
 802b5a4:	6e6f 5420 7079 0065 7943 6c63 2065 6954     on Type.Cycle Ti
 802b5b4:	656d 0000 7953 636e 7268 6e6f 7a69 7461     me..Synchronizat
 802b5c4:	6f69 206e 7954 6570 2073 7573 7070 726f     ion Types suppor
 802b5d4:	6574 0064 694d 696e 756d 206d 7943 6c63     ted.Minimum Cycl
 802b5e4:	2065 6954 656d 4300 6c61 2063 6e61 2064     e Time.Calc and 
 802b5f4:	6f43 7970 5420 6d69 0065 4700 7465 4320     Copy Time..Get C
 802b604:	6379 656c 5420 6d69 0065 6544 616c 2079     ycle Time.Delay 
 802b614:	6954 656d 5300 6e79 3063 4320 6379 656c     Time.Sync0 Cycle
 802b624:	5420 6d69 0065 4d53 452d 6576 746e 4d20      Time.SM-Event M
 802b634:	7369 6573 0064 7943 6c63 2065 6954 656d     issed.Cycle Time
 802b644:	5420 6f6f 5320 616d 6c6c 5300 6968 7466      Too Small.Shift
 802b654:	5420 6d69 2065 6f54 206f 6853 726f 0074      Time Too Short.
	...
 802b674:	0000 7953 636e 4520 7272 726f ff00 0000     ..Sync Error....

0802b684 <cBitMask>:
 802b684:	0000 0001 0003 0007 000f 001f 003f 007f     ............?...
 802b694:	00ff 01ff 03ff 07ff 0fff 1fff 3fff 7fff     .............?..

0802b6a4 <cAbortCode>:
 802b6a4:	0000 0000 0000 0503 0000 0504 0001 0504     ................
 802b6b4:	0005 0504 0000 0601 0001 0601 0002 0601     ................
 802b6c4:	0000 0602 0041 0604 0042 0604 0043 0604     ....A...B...C...
 802b6d4:	0047 0604 0000 0606 0010 0607 0012 0607     G...............
 802b6e4:	0013 0607 0011 0609 0030 0609 0031 0609     ........0...1...
 802b6f4:	0032 0609 0033 0609 0036 0609 0000 0800     2...3...6.......
 802b704:	0020 0800 0021 0800 0022 0800 0023 0800      ...!..."...#...
 802b714:	0003 0601 0004 0601                         ........

0802b71c <PWM_CCU8_0_timer_handle>:
	...
 802b724:	0014 0000 000d 0000                         ........

0802b72c <PWM_CCU8_0_event0_config>:
 802b72c:	0000 0001                                   ....

0802b730 <PWM_CCU8_0_event1_config>:
 802b730:	0000 0001                                   ....

0802b734 <PWM_CCU8_0_event2_config>:
 802b734:	0000 0001                                   ....

0802b738 <PWM_CCU8_0_dt_config>:
	...

0802b744 <PWM_CCU8_0_ch1_out1_config>:
 802b744:	0098 0000 0000 0001 0004 0000               ............

0802b750 <PWM_CCU8_0_config_handle>:
 802b750:	0001 036d 01b7 01b6 0000 0000 0000 0000     ..m.............
	...
 802b76c:	b72c 0802 b730 0802 b734 0802 0000 0000     ,...0...4.......
	...
 802b788:	0001 0000 0000 0400 b738 0802 0001 0000     ........8.......
 802b798:	b71c 0802 0000 0000 0000 0000 0000 0000     ................
 802b7a8:	0000 0000 0001 0000 8500 4802 0008 0000     ...........H....
 802b7b8:	b744 0802 0000 0000 0000 0000 0000 0000     D...............
	...
 802b7dc:	9464 1ffe                                   d...

0802b7e0 <INTERRUPT_0>:
 802b7e0:	1e39 0100                                   9...

0802b7e4 <INT_SYNC1>:
 802b7e4:	1e08 0100                                   ....

0802b7e8 <INT_SYNC0>:
 802b7e8:	1e05 0100                                   ....

0802b7ec <e_eeprom_xmc4_fce>:
 802b7ec:	0020 5002 0700 0000 0000 0000                ..P........

0802b7f8 <EG_SYNC1_OGU_Config>:
 802b7f8:	0010 0000                                   ....

0802b7fc <EG_SYNC0_OGU_Config>:
 802b7fc:	0010 0000                                   ....

0802b800 <ED_SYNC1_ETL_Config>:
 802b800:	0003 0000 0035 0000                         ....5...

0802b808 <ED_SYNC0_ETL_Config>:
 802b808:	000c 0000 0105 0000                         ........

0802b810 <ECAT_SSC_0>:
 802b810:	a588 1ffe 9408 1ffe b7e0 0802 0230 0101     ............0...
 802b820:	0000 0001 0000 0000 0000 0001 0102 0101     ................
 802b830:	0043                                        C.
