   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "XMC_ESC.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global OUT_GENERICProcessDataMapping0x1600
  20              	 .section .data.OUT_GENERICProcessDataMapping0x1600,"aw",%progbits
  21              	 .align 2
  24              	OUT_GENERICProcessDataMapping0x1600:
  25 0000 0C00     	 .short 12
  26 0002 0000     	 .space 2
  27 0004 10010070 	 .word 1879048464
  28 0008 10020070 	 .word 1879048720
  29 000c 10030070 	 .word 1879048976
  30 0010 10040070 	 .word 1879049232
  31 0014 01050070 	 .word 1879049473
  32 0018 01060070 	 .word 1879049729
  33 001c 01070070 	 .word 1879049985
  34 0020 01080070 	 .word 1879050241
  35 0024 01090070 	 .word 1879050497
  36 0028 010A0070 	 .word 1879050753
  37 002c 010B0070 	 .word 1879051009
  38 0030 010C0070 	 .word 1879051265
  39              	 .global IN_GENERICProcessDataMapping0x1A00
  40              	 .section .data.IN_GENERICProcessDataMapping0x1A00,"aw",%progbits
  41              	 .align 2
  44              	IN_GENERICProcessDataMapping0x1A00:
  45 0000 0C00     	 .short 12
  46 0002 0000     	 .space 2
  47 0004 10010060 	 .word 1610613008
  48 0008 10020060 	 .word 1610613264
  49 000c 10030060 	 .word 1610613520
  50 0010 10040060 	 .word 1610613776
  51 0014 01050060 	 .word 1610614017
  52 0018 01060060 	 .word 1610614273
  53 001c 01070060 	 .word 1610614529
  54 0020 01080060 	 .word 1610614785
  55 0024 01090060 	 .word 1610615041
  56 0028 010A0060 	 .word 1610615297
  57 002c 010B0060 	 .word 1610615553
  58 0030 010C0060 	 .word 1610615809
  59              	 .global sRxPDOassign
  60              	 .section .data.sRxPDOassign,"aw",%progbits
  61              	 .align 2
  64              	sRxPDOassign:
  65 0000 0100     	 .short 1
  66 0002 0016     	 .short 5632
  67              	 .global sTxPDOassign
  68              	 .section .data.sTxPDOassign,"aw",%progbits
  69              	 .align 2
  72              	sTxPDOassign:
  73 0000 0100     	 .short 1
  74 0002 001A     	 .short 6656
  75              	 .global IN_GENERIC0x6000
  76              	 .section .data.IN_GENERIC0x6000,"aw",%progbits
  77              	 .align 2
  80              	IN_GENERIC0x6000:
  81 0000 0C00     	 .short 12
  82 0002 0000     	 .short 0
  83 0004 0000     	 .short 0
  84 0006 0000     	 .short 0
  85 0008 0000     	 .short 0
  86 000a 00       	 .byte 0
  87 000b 00       	 .space 1
  88              	 .global OUT_GENERIC0x7000
  89              	 .section .data.OUT_GENERIC0x7000,"aw",%progbits
  90              	 .align 2
  93              	OUT_GENERIC0x7000:
  94 0000 0C00     	 .short 12
  95 0002 0000     	 .short 0
  96 0004 0000     	 .short 0
  97 0006 0000     	 .short 0
  98 0008 0000     	 .short 0
  99 000a 00       	 .byte 0
 100 000b 00       	 .space 1
 101              	 .section .text.APPL_AckErrorInd,"ax",%progbits
 102              	 .align 2
 103              	 .global APPL_AckErrorInd
 104              	 .thumb
 105              	 .thumb_func
 107              	APPL_AckErrorInd:
 108              	.LFB172:
 109              	 .file 1 "../SSC/Src/XMC_ESC.c"
   1:../SSC/Src/XMC_ESC.c **** /**
   2:../SSC/Src/XMC_ESC.c **** \addtogroup XMC_ESC XMC_ESC
   3:../SSC/Src/XMC_ESC.c **** @{
   4:../SSC/Src/XMC_ESC.c **** */
   5:../SSC/Src/XMC_ESC.c **** 
   6:../SSC/Src/XMC_ESC.c **** /**
   7:../SSC/Src/XMC_ESC.c **** \file XMC_ESC.c
   8:../SSC/Src/XMC_ESC.c **** \brief Implementation
   9:../SSC/Src/XMC_ESC.c **** 
  10:../SSC/Src/XMC_ESC.c **** \version 1.0.0.11
  11:../SSC/Src/XMC_ESC.c **** */
  12:../SSC/Src/XMC_ESC.c **** 
  13:../SSC/Src/XMC_ESC.c **** 
  14:../SSC/Src/XMC_ESC.c **** /*-----------------------------------------------------------------------------------------
  15:../SSC/Src/XMC_ESC.c **** ------
  16:../SSC/Src/XMC_ESC.c **** ------    Includes
  17:../SSC/Src/XMC_ESC.c **** ------
  18:../SSC/Src/XMC_ESC.c **** -----------------------------------------------------------------------------------------*/
  19:../SSC/Src/XMC_ESC.c **** #include "ecat_def.h"
  20:../SSC/Src/XMC_ESC.c **** 
  21:../SSC/Src/XMC_ESC.c **** #include "applInterface.h"
  22:../SSC/Src/XMC_ESC.c **** 
  23:../SSC/Src/XMC_ESC.c **** #define _XMC__ESC_ 1
  24:../SSC/Src/XMC_ESC.c **** #include "XMC_ESC.h"
  25:../SSC/Src/XMC_ESC.c **** #undef _XMC__ESC_
  26:../SSC/Src/XMC_ESC.c **** /*--------------------------------------------------------------------------------------
  27:../SSC/Src/XMC_ESC.c **** ------
  28:../SSC/Src/XMC_ESC.c **** ------    local types and defines
  29:../SSC/Src/XMC_ESC.c **** ------
  30:../SSC/Src/XMC_ESC.c **** --------------------------------------------------------------------------------------*/
  31:../SSC/Src/XMC_ESC.c **** 
  32:../SSC/Src/XMC_ESC.c **** /*-----------------------------------------------------------------------------------------
  33:../SSC/Src/XMC_ESC.c **** ------
  34:../SSC/Src/XMC_ESC.c **** ------    local variables and constants
  35:../SSC/Src/XMC_ESC.c **** ------
  36:../SSC/Src/XMC_ESC.c **** -----------------------------------------------------------------------------------------*/
  37:../SSC/Src/XMC_ESC.c **** 
  38:../SSC/Src/XMC_ESC.c **** /*-----------------------------------------------------------------------------------------
  39:../SSC/Src/XMC_ESC.c **** ------
  40:../SSC/Src/XMC_ESC.c **** ------    application specific functions
  41:../SSC/Src/XMC_ESC.c **** ------
  42:../SSC/Src/XMC_ESC.c **** -----------------------------------------------------------------------------------------*/
  43:../SSC/Src/XMC_ESC.c **** 
  44:../SSC/Src/XMC_ESC.c **** /*-----------------------------------------------------------------------------------------
  45:../SSC/Src/XMC_ESC.c **** ------
  46:../SSC/Src/XMC_ESC.c **** ------    generic functions
  47:../SSC/Src/XMC_ESC.c **** ------
  48:../SSC/Src/XMC_ESC.c **** -----------------------------------------------------------------------------------------*/
  49:../SSC/Src/XMC_ESC.c **** 
  50:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
  51:../SSC/Src/XMC_ESC.c **** /**
  52:../SSC/Src/XMC_ESC.c ****  \brief    The function is called when an error state was acknowledged by the master
  53:../SSC/Src/XMC_ESC.c **** 
  54:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
  55:../SSC/Src/XMC_ESC.c **** 
  56:../SSC/Src/XMC_ESC.c **** void    APPL_AckErrorInd(UINT16 stateTrans)
  57:../SSC/Src/XMC_ESC.c **** {
 110              	 .loc 1 57 0
 111              	 .cfi_startproc
 112              	 
 113              	 
 114              	 
 115 0000 80B4     	 push {r7}
 116              	.LCFI0:
 117              	 .cfi_def_cfa_offset 4
 118              	 .cfi_offset 7,-4
 119 0002 83B0     	 sub sp,sp,#12
 120              	.LCFI1:
 121              	 .cfi_def_cfa_offset 16
 122 0004 00AF     	 add r7,sp,#0
 123              	.LCFI2:
 124              	 .cfi_def_cfa_register 7
 125 0006 0346     	 mov r3,r0
 126 0008 FB80     	 strh r3,[r7,#6]
  58:../SSC/Src/XMC_ESC.c **** 
  59:../SSC/Src/XMC_ESC.c **** }
 127              	 .loc 1 59 0
 128 000a 0C37     	 adds r7,r7,#12
 129              	.LCFI3:
 130              	 .cfi_def_cfa_offset 4
 131 000c BD46     	 mov sp,r7
 132              	.LCFI4:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 000e 5DF8047B 	 ldr r7,[sp],#4
 136              	.LCFI5:
 137              	 .cfi_restore 7
 138              	 .cfi_def_cfa_offset 0
 139 0012 7047     	 bx lr
 140              	 .cfi_endproc
 141              	.LFE172:
 143              	 .section .text.APPL_StartMailboxHandler,"ax",%progbits
 144              	 .align 2
 145              	 .global APPL_StartMailboxHandler
 146              	 .thumb
 147              	 .thumb_func
 149              	APPL_StartMailboxHandler:
 150              	.LFB173:
  60:../SSC/Src/XMC_ESC.c **** 
  61:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
  62:../SSC/Src/XMC_ESC.c **** /**
  63:../SSC/Src/XMC_ESC.c ****  \return    AL Status Code (see ecatslv.h ALSTATUSCODE_....)
  64:../SSC/Src/XMC_ESC.c **** 
  65:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from INIT to PREOP when
  66:../SSC/Src/XMC_ESC.c ****              all general settings were checked to start the mailbox handler. This function
  67:../SSC/Src/XMC_ESC.c ****              informs the application about the state transition, the application can refuse
  68:../SSC/Src/XMC_ESC.c ****              the state transition when returning an AL Status error code.
  69:../SSC/Src/XMC_ESC.c ****             The return code NOERROR_INWORK can be used, if the application cannot confirm
  70:../SSC/Src/XMC_ESC.c ****             the state transition immediately, in that case this function will be called cyclically
  71:../SSC/Src/XMC_ESC.c ****             until a value unequal NOERROR_INWORK is returned
  72:../SSC/Src/XMC_ESC.c **** 
  73:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
  74:../SSC/Src/XMC_ESC.c **** 
  75:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StartMailboxHandler(void)
  76:../SSC/Src/XMC_ESC.c **** {
 151              	 .loc 1 76 0
 152              	 .cfi_startproc
 153              	 
 154              	 
 155              	 
 156 0000 80B4     	 push {r7}
 157              	.LCFI6:
 158              	 .cfi_def_cfa_offset 4
 159              	 .cfi_offset 7,-4
 160 0002 00AF     	 add r7,sp,#0
 161              	.LCFI7:
 162              	 .cfi_def_cfa_register 7
  77:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 163              	 .loc 1 77 0
 164 0004 0023     	 movs r3,#0
  78:../SSC/Src/XMC_ESC.c **** }
 165              	 .loc 1 78 0
 166 0006 1846     	 mov r0,r3
 167 0008 BD46     	 mov sp,r7
 168              	.LCFI8:
 169              	 .cfi_def_cfa_register 13
 170              	 
 171 000a 5DF8047B 	 ldr r7,[sp],#4
 172              	.LCFI9:
 173              	 .cfi_restore 7
 174              	 .cfi_def_cfa_offset 0
 175 000e 7047     	 bx lr
 176              	 .cfi_endproc
 177              	.LFE173:
 179              	 .section .text.APPL_StopMailboxHandler,"ax",%progbits
 180              	 .align 2
 181              	 .global APPL_StopMailboxHandler
 182              	 .thumb
 183              	 .thumb_func
 185              	APPL_StopMailboxHandler:
 186              	.LFB174:
  79:../SSC/Src/XMC_ESC.c **** 
  80:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
  81:../SSC/Src/XMC_ESC.c **** /**
  82:../SSC/Src/XMC_ESC.c ****  \return     0, NOERROR_INWORK
  83:../SSC/Src/XMC_ESC.c **** 
  84:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from PREEOP to INIT
  85:../SSC/Src/XMC_ESC.c ****              to stop the mailbox handler. This functions informs the application
  86:../SSC/Src/XMC_ESC.c ****              about the state transition, the application cannot refuse
  87:../SSC/Src/XMC_ESC.c ****              the state transition.
  88:../SSC/Src/XMC_ESC.c **** 
  89:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
  90:../SSC/Src/XMC_ESC.c **** void FWUPDATE_StateTransitionInit(void);
  91:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StopMailboxHandler(void)
  92:../SSC/Src/XMC_ESC.c **** {
 187              	 .loc 1 92 0
 188              	 .cfi_startproc
 189              	 
 190              	 
 191 0000 80B5     	 push {r7,lr}
 192              	.LCFI10:
 193              	 .cfi_def_cfa_offset 8
 194              	 .cfi_offset 7,-8
 195              	 .cfi_offset 14,-4
 196 0002 00AF     	 add r7,sp,#0
 197              	.LCFI11:
 198              	 .cfi_def_cfa_register 7
  93:../SSC/Src/XMC_ESC.c **** 	FWUPDATE_StateTransitionInit();
 199              	 .loc 1 93 0
 200 0004 FFF7FEFF 	 bl FWUPDATE_StateTransitionInit
  94:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 201              	 .loc 1 94 0
 202 0008 0023     	 movs r3,#0
  95:../SSC/Src/XMC_ESC.c **** }
 203              	 .loc 1 95 0
 204 000a 1846     	 mov r0,r3
 205 000c 80BD     	 pop {r7,pc}
 206              	 .cfi_endproc
 207              	.LFE174:
 209 000e 00BF     	 .section .text.APPL_StartInputHandler,"ax",%progbits
 210              	 .align 2
 211              	 .global APPL_StartInputHandler
 212              	 .thumb
 213              	 .thumb_func
 215              	APPL_StartInputHandler:
 216              	.LFB175:
  96:../SSC/Src/XMC_ESC.c **** 
  97:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
  98:../SSC/Src/XMC_ESC.c **** /**
  99:../SSC/Src/XMC_ESC.c ****  \param    pIntMask    pointer to the AL Event Mask which will be written to the AL event Mask
 100:../SSC/Src/XMC_ESC.c ****                         register (0x204) when this function is succeeded. The event mask can be ada
 101:../SSC/Src/XMC_ESC.c ****                         in this function
 102:../SSC/Src/XMC_ESC.c ****  \return    AL Status Code (see ecatslv.h ALSTATUSCODE_....)
 103:../SSC/Src/XMC_ESC.c **** 
 104:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from PREOP to SAFEOP when
 105:../SSC/Src/XMC_ESC.c ****            all general settings were checked to start the input handler. This function
 106:../SSC/Src/XMC_ESC.c ****            informs the application about the state transition, the application can refuse
 107:../SSC/Src/XMC_ESC.c ****            the state transition when returning an AL Status error code.
 108:../SSC/Src/XMC_ESC.c ****            The return code NOERROR_INWORK can be used, if the application cannot confirm
 109:../SSC/Src/XMC_ESC.c ****            the state transition immediately, in that case the application need to be complete 
 110:../SSC/Src/XMC_ESC.c ****            the transition by calling ECAT_StateChange.
 111:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 112:../SSC/Src/XMC_ESC.c **** 
 113:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
 114:../SSC/Src/XMC_ESC.c **** {
 217              	 .loc 1 114 0
 218              	 .cfi_startproc
 219              	 
 220              	 
 221              	 
 222 0000 80B4     	 push {r7}
 223              	.LCFI12:
 224              	 .cfi_def_cfa_offset 4
 225              	 .cfi_offset 7,-4
 226 0002 83B0     	 sub sp,sp,#12
 227              	.LCFI13:
 228              	 .cfi_def_cfa_offset 16
 229 0004 00AF     	 add r7,sp,#0
 230              	.LCFI14:
 231              	 .cfi_def_cfa_register 7
 232 0006 7860     	 str r0,[r7,#4]
 115:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 233              	 .loc 1 115 0
 234 0008 0023     	 movs r3,#0
 116:../SSC/Src/XMC_ESC.c **** }
 235              	 .loc 1 116 0
 236 000a 1846     	 mov r0,r3
 237 000c 0C37     	 adds r7,r7,#12
 238              	.LCFI15:
 239              	 .cfi_def_cfa_offset 4
 240 000e BD46     	 mov sp,r7
 241              	.LCFI16:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0010 5DF8047B 	 ldr r7,[sp],#4
 245              	.LCFI17:
 246              	 .cfi_restore 7
 247              	 .cfi_def_cfa_offset 0
 248 0014 7047     	 bx lr
 249              	 .cfi_endproc
 250              	.LFE175:
 252 0016 00BF     	 .section .text.APPL_StopInputHandler,"ax",%progbits
 253              	 .align 2
 254              	 .global APPL_StopInputHandler
 255              	 .thumb
 256              	 .thumb_func
 258              	APPL_StopInputHandler:
 259              	.LFB176:
 117:../SSC/Src/XMC_ESC.c **** 
 118:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 119:../SSC/Src/XMC_ESC.c **** /**
 120:../SSC/Src/XMC_ESC.c ****  \return     0, NOERROR_INWORK
 121:../SSC/Src/XMC_ESC.c **** 
 122:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from SAFEOP to PREEOP
 123:../SSC/Src/XMC_ESC.c ****              to stop the input handler. This functions informs the application
 124:../SSC/Src/XMC_ESC.c ****              about the state transition, the application cannot refuse
 125:../SSC/Src/XMC_ESC.c ****              the state transition.
 126:../SSC/Src/XMC_ESC.c **** 
 127:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 128:../SSC/Src/XMC_ESC.c **** 
 129:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StopInputHandler(void)
 130:../SSC/Src/XMC_ESC.c **** {
 260              	 .loc 1 130 0
 261              	 .cfi_startproc
 262              	 
 263              	 
 264              	 
 265 0000 80B4     	 push {r7}
 266              	.LCFI18:
 267              	 .cfi_def_cfa_offset 4
 268              	 .cfi_offset 7,-4
 269 0002 00AF     	 add r7,sp,#0
 270              	.LCFI19:
 271              	 .cfi_def_cfa_register 7
 131:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 272              	 .loc 1 131 0
 273 0004 0023     	 movs r3,#0
 132:../SSC/Src/XMC_ESC.c **** }
 274              	 .loc 1 132 0
 275 0006 1846     	 mov r0,r3
 276 0008 BD46     	 mov sp,r7
 277              	.LCFI20:
 278              	 .cfi_def_cfa_register 13
 279              	 
 280 000a 5DF8047B 	 ldr r7,[sp],#4
 281              	.LCFI21:
 282              	 .cfi_restore 7
 283              	 .cfi_def_cfa_offset 0
 284 000e 7047     	 bx lr
 285              	 .cfi_endproc
 286              	.LFE176:
 288              	 .section .text.APPL_StartOutputHandler,"ax",%progbits
 289              	 .align 2
 290              	 .global APPL_StartOutputHandler
 291              	 .thumb
 292              	 .thumb_func
 294              	APPL_StartOutputHandler:
 295              	.LFB177:
 133:../SSC/Src/XMC_ESC.c **** 
 134:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 135:../SSC/Src/XMC_ESC.c **** /**
 136:../SSC/Src/XMC_ESC.c ****  \return    AL Status Code (see ecatslv.h ALSTATUSCODE_....)
 137:../SSC/Src/XMC_ESC.c **** 
 138:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from SAFEOP to OP when
 139:../SSC/Src/XMC_ESC.c ****              all general settings were checked to start the output handler. This function
 140:../SSC/Src/XMC_ESC.c ****              informs the application about the state transition, the application can refuse
 141:../SSC/Src/XMC_ESC.c ****              the state transition when returning an AL Status error code.
 142:../SSC/Src/XMC_ESC.c ****            The return code NOERROR_INWORK can be used, if the application cannot confirm
 143:../SSC/Src/XMC_ESC.c ****            the state transition immediately, in that case the application need to be complete 
 144:../SSC/Src/XMC_ESC.c ****            the transition by calling ECAT_StateChange.
 145:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 146:../SSC/Src/XMC_ESC.c **** 
 147:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StartOutputHandler(void)
 148:../SSC/Src/XMC_ESC.c **** {
 296              	 .loc 1 148 0
 297              	 .cfi_startproc
 298              	 
 299              	 
 300              	 
 301 0000 80B4     	 push {r7}
 302              	.LCFI22:
 303              	 .cfi_def_cfa_offset 4
 304              	 .cfi_offset 7,-4
 305 0002 00AF     	 add r7,sp,#0
 306              	.LCFI23:
 307              	 .cfi_def_cfa_register 7
 149:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 308              	 .loc 1 149 0
 309 0004 0023     	 movs r3,#0
 150:../SSC/Src/XMC_ESC.c **** }
 310              	 .loc 1 150 0
 311 0006 1846     	 mov r0,r3
 312 0008 BD46     	 mov sp,r7
 313              	.LCFI24:
 314              	 .cfi_def_cfa_register 13
 315              	 
 316 000a 5DF8047B 	 ldr r7,[sp],#4
 317              	.LCFI25:
 318              	 .cfi_restore 7
 319              	 .cfi_def_cfa_offset 0
 320 000e 7047     	 bx lr
 321              	 .cfi_endproc
 322              	.LFE177:
 324              	 .section .text.APPL_StopOutputHandler,"ax",%progbits
 325              	 .align 2
 326              	 .global APPL_StopOutputHandler
 327              	 .thumb
 328              	 .thumb_func
 330              	APPL_StopOutputHandler:
 331              	.LFB178:
 151:../SSC/Src/XMC_ESC.c **** 
 152:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 153:../SSC/Src/XMC_ESC.c **** /**
 154:../SSC/Src/XMC_ESC.c ****  \return     0, NOERROR_INWORK
 155:../SSC/Src/XMC_ESC.c **** 
 156:../SSC/Src/XMC_ESC.c ****  \brief    The function is called in the state transition from OP to SAFEOP
 157:../SSC/Src/XMC_ESC.c ****              to stop the output handler. This functions informs the application
 158:../SSC/Src/XMC_ESC.c ****              about the state transition, the application cannot refuse
 159:../SSC/Src/XMC_ESC.c ****              the state transition.
 160:../SSC/Src/XMC_ESC.c **** 
 161:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 162:../SSC/Src/XMC_ESC.c **** 
 163:../SSC/Src/XMC_ESC.c **** UINT16 APPL_StopOutputHandler(void)
 164:../SSC/Src/XMC_ESC.c **** {
 332              	 .loc 1 164 0
 333              	 .cfi_startproc
 334              	 
 335              	 
 336              	 
 337 0000 80B4     	 push {r7}
 338              	.LCFI26:
 339              	 .cfi_def_cfa_offset 4
 340              	 .cfi_offset 7,-4
 341 0002 00AF     	 add r7,sp,#0
 342              	.LCFI27:
 343              	 .cfi_def_cfa_register 7
 165:../SSC/Src/XMC_ESC.c ****     return ALSTATUSCODE_NOERROR;
 344              	 .loc 1 165 0
 345 0004 0023     	 movs r3,#0
 166:../SSC/Src/XMC_ESC.c **** }
 346              	 .loc 1 166 0
 347 0006 1846     	 mov r0,r3
 348 0008 BD46     	 mov sp,r7
 349              	.LCFI28:
 350              	 .cfi_def_cfa_register 13
 351              	 
 352 000a 5DF8047B 	 ldr r7,[sp],#4
 353              	.LCFI29:
 354              	 .cfi_restore 7
 355              	 .cfi_def_cfa_offset 0
 356 000e 7047     	 bx lr
 357              	 .cfi_endproc
 358              	.LFE178:
 360              	 .section .text.APPL_GenerateMapping,"ax",%progbits
 361              	 .align 2
 362              	 .global APPL_GenerateMapping
 363              	 .thumb
 364              	 .thumb_func
 366              	APPL_GenerateMapping:
 367              	.LFB179:
 167:../SSC/Src/XMC_ESC.c **** 
 168:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 169:../SSC/Src/XMC_ESC.c **** /**
 170:../SSC/Src/XMC_ESC.c **** \return     0(ALSTATUSCODE_NOERROR), NOERROR_INWORK
 171:../SSC/Src/XMC_ESC.c **** \param      pInputSize  pointer to save the input process data length
 172:../SSC/Src/XMC_ESC.c **** \param      pOutputSize  pointer to save the output process data length
 173:../SSC/Src/XMC_ESC.c **** 
 174:../SSC/Src/XMC_ESC.c **** \brief    This function calculates the process data sizes from the actual SM-PDO-Assign
 175:../SSC/Src/XMC_ESC.c ****             and PDO mapping
 176:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 177:../SSC/Src/XMC_ESC.c **** UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
 178:../SSC/Src/XMC_ESC.c **** {
 368              	 .loc 1 178 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372 0000 90B5     	 push {r4,r7,lr}
 373              	.LCFI30:
 374              	 .cfi_def_cfa_offset 12
 375              	 .cfi_offset 4,-12
 376              	 .cfi_offset 7,-8
 377              	 .cfi_offset 14,-4
 378 0002 89B0     	 sub sp,sp,#36
 379              	.LCFI31:
 380              	 .cfi_def_cfa_offset 48
 381 0004 00AF     	 add r7,sp,#0
 382              	.LCFI32:
 383              	 .cfi_def_cfa_register 7
 384 0006 7860     	 str r0,[r7,#4]
 385 0008 3960     	 str r1,[r7]
 179:../SSC/Src/XMC_ESC.c ****     UINT16 result = ALSTATUSCODE_NOERROR;
 386              	 .loc 1 179 0
 387 000a 0023     	 movs r3,#0
 388 000c FB83     	 strh r3,[r7,#30]
 180:../SSC/Src/XMC_ESC.c ****     UINT16 InputSize = 0;
 389              	 .loc 1 180 0
 390 000e 0023     	 movs r3,#0
 391 0010 BB83     	 strh r3,[r7,#28]
 181:../SSC/Src/XMC_ESC.c ****     UINT16 OutputSize = 0;
 392              	 .loc 1 181 0
 393 0012 0023     	 movs r3,#0
 394 0014 7B83     	 strh r3,[r7,#26]
 182:../SSC/Src/XMC_ESC.c **** 
 183:../SSC/Src/XMC_ESC.c **** #if COE_SUPPORTED
 184:../SSC/Src/XMC_ESC.c ****     UINT16 PDOAssignEntryCnt = 0;
 395              	 .loc 1 184 0
 396 0016 0023     	 movs r3,#0
 397 0018 3B83     	 strh r3,[r7,#24]
 185:../SSC/Src/XMC_ESC.c ****     OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 398              	 .loc 1 185 0
 399 001a 0023     	 movs r3,#0
 400 001c 3B61     	 str r3,[r7,#16]
 186:../SSC/Src/XMC_ESC.c ****     UINT16 PDOSubindex0 = 0;
 401              	 .loc 1 186 0
 402 001e 0023     	 movs r3,#0
 403 0020 FB81     	 strh r3,[r7,#14]
 187:../SSC/Src/XMC_ESC.c ****     UINT32 *pPDOEntry = NULL;
 404              	 .loc 1 187 0
 405 0022 0023     	 movs r3,#0
 406 0024 BB60     	 str r3,[r7,#8]
 188:../SSC/Src/XMC_ESC.c ****     UINT16 PDOEntryCnt = 0;
 407              	 .loc 1 188 0
 408 0026 0023     	 movs r3,#0
 409 0028 FB82     	 strh r3,[r7,#22]
 189:../SSC/Src/XMC_ESC.c ****    
 190:../SSC/Src/XMC_ESC.c ****     /*Scan object 0x1C12 RXPDO assign*/
 191:../SSC/Src/XMC_ESC.c ****     for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 410              	 .loc 1 191 0
 411 002a 0023     	 movs r3,#0
 412 002c 3B83     	 strh r3,[r7,#24]
 413 002e 39E0     	 b .L15
 414              	.L21:
 192:../SSC/Src/XMC_ESC.c ****     {
 193:../SSC/Src/XMC_ESC.c ****         pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 415              	 .loc 1 193 0
 416 0030 3B8B     	 ldrh r3,[r7,#24]
 417 0032 4B4A     	 ldr r2,.L32
 418 0034 5B00     	 lsls r3,r3,#1
 419 0036 1344     	 add r3,r3,r2
 420 0038 5B88     	 ldrh r3,[r3,#2]
 421 003a 1846     	 mov r0,r3
 422 003c FFF7FEFF 	 bl OBJ_GetObjectHandle
 423 0040 3861     	 str r0,[r7,#16]
 194:../SSC/Src/XMC_ESC.c ****         if(pPDO != NULL)
 424              	 .loc 1 194 0
 425 0042 3B69     	 ldr r3,[r7,#16]
 426 0044 002B     	 cmp r3,#0
 427 0046 25D0     	 beq .L16
 195:../SSC/Src/XMC_ESC.c ****         {
 196:../SSC/Src/XMC_ESC.c ****             PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 428              	 .loc 1 196 0
 429 0048 3B69     	 ldr r3,[r7,#16]
 430 004a 9B69     	 ldr r3,[r3,#24]
 431 004c 1B88     	 ldrh r3,[r3]
 432 004e FB81     	 strh r3,[r7,#14]
 197:../SSC/Src/XMC_ESC.c ****             for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 433              	 .loc 1 197 0
 434 0050 0023     	 movs r3,#0
 435 0052 FB82     	 strh r3,[r7,#22]
 436 0054 19E0     	 b .L17
 437              	.L18:
 198:../SSC/Src/XMC_ESC.c ****             {
 199:../SSC/Src/XMC_ESC.c ****                 pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1)
 438              	 .loc 1 199 0 discriminator 3
 439 0056 3B69     	 ldr r3,[r7,#16]
 440 0058 9C69     	 ldr r4,[r3,#24]
 441 005a FB8A     	 ldrh r3,[r7,#22]
 442 005c DBB2     	 uxtb r3,r3
 443 005e 0133     	 adds r3,r3,#1
 444 0060 DBB2     	 uxtb r3,r3
 445 0062 1846     	 mov r0,r3
 446 0064 3969     	 ldr r1,[r7,#16]
 447 0066 FFF7FEFF 	 bl OBJ_GetEntryOffset
 448 006a 0346     	 mov r3,r0
 449 006c DB08     	 lsrs r3,r3,#3
 450 006e 9BB2     	 uxth r3,r3
 451 0070 2344     	 add r3,r3,r4
 452 0072 BB60     	 str r3,[r7,#8]
 200:../SSC/Src/XMC_ESC.c ****                 // we increment the expected output size depending on the mapped Entry
 201:../SSC/Src/XMC_ESC.c ****                 OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 453              	 .loc 1 201 0 discriminator 3
 454 0074 BB68     	 ldr r3,[r7,#8]
 455 0076 1B68     	 ldr r3,[r3]
 456 0078 9BB2     	 uxth r3,r3
 457 007a DBB2     	 uxtb r3,r3
 458 007c 9AB2     	 uxth r2,r3
 459 007e 7B8B     	 ldrh r3,[r7,#26]
 460 0080 1344     	 add r3,r3,r2
 461 0082 7B83     	 strh r3,[r7,#26]
 197:../SSC/Src/XMC_ESC.c ****             {
 462              	 .loc 1 197 0 discriminator 3
 463 0084 FB8A     	 ldrh r3,[r7,#22]
 464 0086 0133     	 adds r3,r3,#1
 465 0088 FB82     	 strh r3,[r7,#22]
 466              	.L17:
 197:../SSC/Src/XMC_ESC.c ****             {
 467              	 .loc 1 197 0 is_stmt 0 discriminator 1
 468 008a FA8A     	 ldrh r2,[r7,#22]
 469 008c FB89     	 ldrh r3,[r7,#14]
 470 008e 9A42     	 cmp r2,r3
 471 0090 E1D3     	 bcc .L18
 472 0092 04E0     	 b .L30
 473              	.L16:
 202:../SSC/Src/XMC_ESC.c ****             }
 203:../SSC/Src/XMC_ESC.c ****         }
 204:../SSC/Src/XMC_ESC.c ****         else
 205:../SSC/Src/XMC_ESC.c ****         {
 206:../SSC/Src/XMC_ESC.c ****             /*assigned PDO was not found in object dictionary. return invalid mapping*/
 207:../SSC/Src/XMC_ESC.c ****             OutputSize = 0;
 474              	 .loc 1 207 0 is_stmt 1
 475 0094 0023     	 movs r3,#0
 476 0096 7B83     	 strh r3,[r7,#26]
 208:../SSC/Src/XMC_ESC.c ****             result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 477              	 .loc 1 208 0
 478 0098 2523     	 movs r3,#37
 479 009a FB83     	 strh r3,[r7,#30]
 209:../SSC/Src/XMC_ESC.c ****             break;
 480              	 .loc 1 209 0
 481 009c 07E0     	 b .L20
 482              	.L30:
 191:../SSC/Src/XMC_ESC.c ****     {
 483              	 .loc 1 191 0 discriminator 2
 484 009e 3B8B     	 ldrh r3,[r7,#24]
 485 00a0 0133     	 adds r3,r3,#1
 486 00a2 3B83     	 strh r3,[r7,#24]
 487              	.L15:
 191:../SSC/Src/XMC_ESC.c ****     {
 488              	 .loc 1 191 0 is_stmt 0 discriminator 1
 489 00a4 2E4B     	 ldr r3,.L32
 490 00a6 1B88     	 ldrh r3,[r3]
 491 00a8 3A8B     	 ldrh r2,[r7,#24]
 492 00aa 9A42     	 cmp r2,r3
 493 00ac C0D3     	 bcc .L21
 494              	.L20:
 210:../SSC/Src/XMC_ESC.c ****         }
 211:../SSC/Src/XMC_ESC.c ****     }
 212:../SSC/Src/XMC_ESC.c **** 
 213:../SSC/Src/XMC_ESC.c ****     OutputSize = (OutputSize + 7) >> 3;
 495              	 .loc 1 213 0 is_stmt 1
 496 00ae 7B8B     	 ldrh r3,[r7,#26]
 497 00b0 0733     	 adds r3,r3,#7
 498 00b2 DB10     	 asrs r3,r3,#3
 499 00b4 7B83     	 strh r3,[r7,#26]
 214:../SSC/Src/XMC_ESC.c **** 
 215:../SSC/Src/XMC_ESC.c ****     if(result == 0)
 500              	 .loc 1 215 0
 501 00b6 FB8B     	 ldrh r3,[r7,#30]
 502 00b8 002B     	 cmp r3,#0
 503 00ba 41D1     	 bne .L22
 216:../SSC/Src/XMC_ESC.c ****     {
 217:../SSC/Src/XMC_ESC.c ****         /*Scan Object 0x1C13 TXPDO assign*/
 218:../SSC/Src/XMC_ESC.c ****         for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt
 504              	 .loc 1 218 0
 505 00bc 0023     	 movs r3,#0
 506 00be 3B83     	 strh r3,[r7,#24]
 507 00c0 39E0     	 b .L23
 508              	.L28:
 219:../SSC/Src/XMC_ESC.c ****         {
 220:../SSC/Src/XMC_ESC.c ****             pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 509              	 .loc 1 220 0
 510 00c2 3B8B     	 ldrh r3,[r7,#24]
 511 00c4 274A     	 ldr r2,.L32+4
 512 00c6 5B00     	 lsls r3,r3,#1
 513 00c8 1344     	 add r3,r3,r2
 514 00ca 5B88     	 ldrh r3,[r3,#2]
 515 00cc 1846     	 mov r0,r3
 516 00ce FFF7FEFF 	 bl OBJ_GetObjectHandle
 517 00d2 3861     	 str r0,[r7,#16]
 221:../SSC/Src/XMC_ESC.c ****             if(pPDO != NULL)
 518              	 .loc 1 221 0
 519 00d4 3B69     	 ldr r3,[r7,#16]
 520 00d6 002B     	 cmp r3,#0
 521 00d8 25D0     	 beq .L24
 222:../SSC/Src/XMC_ESC.c ****             {
 223:../SSC/Src/XMC_ESC.c ****                 PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 522              	 .loc 1 223 0
 523 00da 3B69     	 ldr r3,[r7,#16]
 524 00dc 9B69     	 ldr r3,[r3,#24]
 525 00de 1B88     	 ldrh r3,[r3]
 526 00e0 FB81     	 strh r3,[r7,#14]
 224:../SSC/Src/XMC_ESC.c ****                 for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 527              	 .loc 1 224 0
 528 00e2 0023     	 movs r3,#0
 529 00e4 FB82     	 strh r3,[r7,#22]
 530 00e6 19E0     	 b .L25
 531              	.L26:
 225:../SSC/Src/XMC_ESC.c ****                 {
 226:../SSC/Src/XMC_ESC.c ****                     pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCn
 532              	 .loc 1 226 0 discriminator 3
 533 00e8 3B69     	 ldr r3,[r7,#16]
 534 00ea 9C69     	 ldr r4,[r3,#24]
 535 00ec FB8A     	 ldrh r3,[r7,#22]
 536 00ee DBB2     	 uxtb r3,r3
 537 00f0 0133     	 adds r3,r3,#1
 538 00f2 DBB2     	 uxtb r3,r3
 539 00f4 1846     	 mov r0,r3
 540 00f6 3969     	 ldr r1,[r7,#16]
 541 00f8 FFF7FEFF 	 bl OBJ_GetEntryOffset
 542 00fc 0346     	 mov r3,r0
 543 00fe DB08     	 lsrs r3,r3,#3
 544 0100 9BB2     	 uxth r3,r3
 545 0102 2344     	 add r3,r3,r4
 546 0104 BB60     	 str r3,[r7,#8]
 227:../SSC/Src/XMC_ESC.c ****                     // we increment the expected output size depending on the mapped Entry
 228:../SSC/Src/XMC_ESC.c ****                     InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 547              	 .loc 1 228 0 discriminator 3
 548 0106 BB68     	 ldr r3,[r7,#8]
 549 0108 1B68     	 ldr r3,[r3]
 550 010a 9BB2     	 uxth r3,r3
 551 010c DBB2     	 uxtb r3,r3
 552 010e 9AB2     	 uxth r2,r3
 553 0110 BB8B     	 ldrh r3,[r7,#28]
 554 0112 1344     	 add r3,r3,r2
 555 0114 BB83     	 strh r3,[r7,#28]
 224:../SSC/Src/XMC_ESC.c ****                 {
 556              	 .loc 1 224 0 discriminator 3
 557 0116 FB8A     	 ldrh r3,[r7,#22]
 558 0118 0133     	 adds r3,r3,#1
 559 011a FB82     	 strh r3,[r7,#22]
 560              	.L25:
 224:../SSC/Src/XMC_ESC.c ****                 {
 561              	 .loc 1 224 0 is_stmt 0 discriminator 1
 562 011c FA8A     	 ldrh r2,[r7,#22]
 563 011e FB89     	 ldrh r3,[r7,#14]
 564 0120 9A42     	 cmp r2,r3
 565 0122 E1D3     	 bcc .L26
 566 0124 04E0     	 b .L31
 567              	.L24:
 229:../SSC/Src/XMC_ESC.c ****                 }
 230:../SSC/Src/XMC_ESC.c ****             }
 231:../SSC/Src/XMC_ESC.c ****             else
 232:../SSC/Src/XMC_ESC.c ****             {
 233:../SSC/Src/XMC_ESC.c ****                 /*assigned PDO was not found in object dictionary. return invalid mapping*/
 234:../SSC/Src/XMC_ESC.c ****                 InputSize = 0;
 568              	 .loc 1 234 0 is_stmt 1
 569 0126 0023     	 movs r3,#0
 570 0128 BB83     	 strh r3,[r7,#28]
 235:../SSC/Src/XMC_ESC.c ****                 result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 571              	 .loc 1 235 0
 572 012a 2423     	 movs r3,#36
 573 012c FB83     	 strh r3,[r7,#30]
 236:../SSC/Src/XMC_ESC.c ****                 break;
 574              	 .loc 1 236 0
 575 012e 07E0     	 b .L22
 576              	.L31:
 218:../SSC/Src/XMC_ESC.c ****         {
 577              	 .loc 1 218 0 discriminator 2
 578 0130 3B8B     	 ldrh r3,[r7,#24]
 579 0132 0133     	 adds r3,r3,#1
 580 0134 3B83     	 strh r3,[r7,#24]
 581              	.L23:
 218:../SSC/Src/XMC_ESC.c ****         {
 582              	 .loc 1 218 0 is_stmt 0 discriminator 1
 583 0136 0B4B     	 ldr r3,.L32+4
 584 0138 1B88     	 ldrh r3,[r3]
 585 013a 3A8B     	 ldrh r2,[r7,#24]
 586 013c 9A42     	 cmp r2,r3
 587 013e C0D3     	 bcc .L28
 588              	.L22:
 237:../SSC/Src/XMC_ESC.c ****             }
 238:../SSC/Src/XMC_ESC.c ****         }
 239:../SSC/Src/XMC_ESC.c ****     }
 240:../SSC/Src/XMC_ESC.c ****     InputSize = (InputSize + 7) >> 3;
 589              	 .loc 1 240 0 is_stmt 1
 590 0140 BB8B     	 ldrh r3,[r7,#28]
 591 0142 0733     	 adds r3,r3,#7
 592 0144 DB10     	 asrs r3,r3,#3
 593 0146 BB83     	 strh r3,[r7,#28]
 241:../SSC/Src/XMC_ESC.c **** 
 242:../SSC/Src/XMC_ESC.c **** #else
 243:../SSC/Src/XMC_ESC.c **** #if _WIN32
 244:../SSC/Src/XMC_ESC.c ****    #pragma message ("Warning: Define 'InputSize' and 'OutputSize'.")
 245:../SSC/Src/XMC_ESC.c **** #else
 246:../SSC/Src/XMC_ESC.c ****     #warning "Define 'InputSize' and 'OutputSize'."
 247:../SSC/Src/XMC_ESC.c **** #endif
 248:../SSC/Src/XMC_ESC.c **** #endif
 249:../SSC/Src/XMC_ESC.c **** 
 250:../SSC/Src/XMC_ESC.c ****     *pInputSize = InputSize;
 594              	 .loc 1 250 0
 595 0148 7B68     	 ldr r3,[r7,#4]
 596 014a BA8B     	 ldrh r2,[r7,#28]
 597 014c 1A80     	 strh r2,[r3]
 251:../SSC/Src/XMC_ESC.c ****     *pOutputSize = OutputSize;
 598              	 .loc 1 251 0
 599 014e 3B68     	 ldr r3,[r7]
 600 0150 7A8B     	 ldrh r2,[r7,#26]
 601 0152 1A80     	 strh r2,[r3]
 252:../SSC/Src/XMC_ESC.c ****     return result;
 602              	 .loc 1 252 0
 603 0154 FB8B     	 ldrh r3,[r7,#30]
 253:../SSC/Src/XMC_ESC.c **** }
 604              	 .loc 1 253 0
 605 0156 1846     	 mov r0,r3
 606 0158 2437     	 adds r7,r7,#36
 607              	.LCFI33:
 608              	 .cfi_def_cfa_offset 12
 609 015a BD46     	 mov sp,r7
 610              	.LCFI34:
 611              	 .cfi_def_cfa_register 13
 612              	 
 613 015c 90BD     	 pop {r4,r7,pc}
 614              	.L33:
 615 015e 00BF     	 .align 2
 616              	.L32:
 617 0160 00000000 	 .word sRxPDOassign
 618 0164 00000000 	 .word sTxPDOassign
 619              	 .cfi_endproc
 620              	.LFE179:
 622              	 .section .text.APPL_InputMapping,"ax",%progbits
 623              	 .align 2
 624              	 .global APPL_InputMapping
 625              	 .thumb
 626              	 .thumb_func
 628              	APPL_InputMapping:
 629              	.LFB180:
 254:../SSC/Src/XMC_ESC.c **** 
 255:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 256:../SSC/Src/XMC_ESC.c **** /**
 257:../SSC/Src/XMC_ESC.c **** \param      pData  pointer to input process data
 258:../SSC/Src/XMC_ESC.c **** 
 259:../SSC/Src/XMC_ESC.c **** \brief      This function will copies the inputs from the local memory to the ESC memory
 260:../SSC/Src/XMC_ESC.c ****             to the hardware
 261:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 262:../SSC/Src/XMC_ESC.c **** void APPL_InputMapping(UINT16* pData)
 263:../SSC/Src/XMC_ESC.c **** {
 630              	 .loc 1 263 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634 0000 80B5     	 push {r7,lr}
 635              	.LCFI35:
 636              	 .cfi_def_cfa_offset 8
 637              	 .cfi_offset 7,-8
 638              	 .cfi_offset 14,-4
 639 0002 82B0     	 sub sp,sp,#8
 640              	.LCFI36:
 641              	 .cfi_def_cfa_offset 16
 642 0004 00AF     	 add r7,sp,#0
 643              	.LCFI37:
 644              	 .cfi_def_cfa_register 7
 645 0006 7860     	 str r0,[r7,#4]
 264:../SSC/Src/XMC_ESC.c **** 	memcpy(pData, &(((UINT16 *)&IN_GENERIC0x6000)[1]), SIZEOF(IN_GENERIC0x6000));
 646              	 .loc 1 264 0
 647 0008 7868     	 ldr r0,[r7,#4]
 648 000a 0349     	 ldr r1,.L35
 649 000c 0C22     	 movs r2,#12
 650 000e FFF7FEFF 	 bl memcpy
 265:../SSC/Src/XMC_ESC.c **** }
 651              	 .loc 1 265 0
 652 0012 0837     	 adds r7,r7,#8
 653              	.LCFI38:
 654              	 .cfi_def_cfa_offset 8
 655 0014 BD46     	 mov sp,r7
 656              	.LCFI39:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0016 80BD     	 pop {r7,pc}
 660              	.L36:
 661              	 .align 2
 662              	.L35:
 663 0018 02000000 	 .word IN_GENERIC0x6000+2
 664              	 .cfi_endproc
 665              	.LFE180:
 667              	 .section .text.APPL_OutputMapping,"ax",%progbits
 668              	 .align 2
 669              	 .global APPL_OutputMapping
 670              	 .thumb
 671              	 .thumb_func
 673              	APPL_OutputMapping:
 674              	.LFB181:
 266:../SSC/Src/XMC_ESC.c **** 
 267:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 268:../SSC/Src/XMC_ESC.c **** /**
 269:../SSC/Src/XMC_ESC.c **** \param      pData  pointer to output process data
 270:../SSC/Src/XMC_ESC.c **** 
 271:../SSC/Src/XMC_ESC.c **** \brief    This function will copies the outputs from the ESC memory to the local memory
 272:../SSC/Src/XMC_ESC.c ****             to the hardware
 273:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 274:../SSC/Src/XMC_ESC.c **** void APPL_OutputMapping(UINT16* pData)
 275:../SSC/Src/XMC_ESC.c **** {
 675              	 .loc 1 275 0
 676              	 .cfi_startproc
 677              	 
 678              	 
 679 0000 80B5     	 push {r7,lr}
 680              	.LCFI40:
 681              	 .cfi_def_cfa_offset 8
 682              	 .cfi_offset 7,-8
 683              	 .cfi_offset 14,-4
 684 0002 82B0     	 sub sp,sp,#8
 685              	.LCFI41:
 686              	 .cfi_def_cfa_offset 16
 687 0004 00AF     	 add r7,sp,#0
 688              	.LCFI42:
 689              	 .cfi_def_cfa_register 7
 690 0006 7860     	 str r0,[r7,#4]
 276:../SSC/Src/XMC_ESC.c **** 	memcpy(&(((UINT16 *)&OUT_GENERIC0x7000)[1]), pData, SIZEOF(IN_GENERIC0x6000));
 691              	 .loc 1 276 0
 692 0008 0348     	 ldr r0,.L38
 693 000a 7968     	 ldr r1,[r7,#4]
 694 000c 0C22     	 movs r2,#12
 695 000e FFF7FEFF 	 bl memcpy
 277:../SSC/Src/XMC_ESC.c **** }
 696              	 .loc 1 277 0
 697 0012 0837     	 adds r7,r7,#8
 698              	.LCFI43:
 699              	 .cfi_def_cfa_offset 8
 700 0014 BD46     	 mov sp,r7
 701              	.LCFI44:
 702              	 .cfi_def_cfa_register 13
 703              	 
 704 0016 80BD     	 pop {r7,pc}
 705              	.L39:
 706              	 .align 2
 707              	.L38:
 708 0018 02000000 	 .word OUT_GENERIC0x7000+2
 709              	 .cfi_endproc
 710              	.LFE181:
 712              	 .section .text.APPL_Application,"ax",%progbits
 713              	 .align 2
 714              	 .global APPL_Application
 715              	 .thumb
 716              	 .thumb_func
 718              	APPL_Application:
 719              	.LFB182:
 278:../SSC/Src/XMC_ESC.c **** 
 279:../SSC/Src/XMC_ESC.c **** /////////////////////////////////////////////////////////////////////////////////////////
 280:../SSC/Src/XMC_ESC.c **** /**
 281:../SSC/Src/XMC_ESC.c **** \brief    This function will called from the synchronisation ISR 
 282:../SSC/Src/XMC_ESC.c ****             or from the mainloop if no synchronisation is supported
 283:../SSC/Src/XMC_ESC.c **** *////////////////////////////////////////////////////////////////////////////////////////
 284:../SSC/Src/XMC_ESC.c **** 
 285:../SSC/Src/XMC_ESC.c **** void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC);
 286:../SSC/Src/XMC_ESC.c **** void APPL_Application(void)
 287:../SSC/Src/XMC_ESC.c **** {
 720              	 .loc 1 287 0
 721              	 .cfi_startproc
 722              	 
 723              	 
 724 0000 80B5     	 push {r7,lr}
 725              	.LCFI45:
 726              	 .cfi_def_cfa_offset 8
 727              	 .cfi_offset 7,-8
 728              	 .cfi_offset 14,-4
 729 0002 00AF     	 add r7,sp,#0
 730              	.LCFI46:
 731              	 .cfi_def_cfa_register 7
 288:../SSC/Src/XMC_ESC.c **** 	process_app(&OUT_GENERIC0x7000, &IN_GENERIC0x6000);
 732              	 .loc 1 288 0
 733 0004 0248     	 ldr r0,.L41
 734 0006 0349     	 ldr r1,.L41+4
 735 0008 FFF7FEFF 	 bl process_app
 289:../SSC/Src/XMC_ESC.c **** }
 736              	 .loc 1 289 0
 737 000c 80BD     	 pop {r7,pc}
 738              	.L42:
 739 000e 00BF     	 .align 2
 740              	.L41:
 741 0010 00000000 	 .word OUT_GENERIC0x7000
 742 0014 00000000 	 .word IN_GENERIC0x6000
 743              	 .cfi_endproc
 744              	.LFE182:
 746              	 .text
 747              	.Letext0:
 748              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 749              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 750              	 .file 4 "../SSC/Src/sdoserv.h"
 751              	 .file 5 "../SSC/Src/objdef.h"
 752              	 .file 6 "../SSC/Src/XMC_ESCObjects.h"
 753              	 .file 7 "C:/Workspaces/SOES-FW-UPDATE/ETHCAT_FWUPDATE_SSC_APPLICATION_XMC48/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 XMC_ESC.c
    {standard input}:24     .data.OUT_GENERICProcessDataMapping0x1600:00000000 OUT_GENERICProcessDataMapping0x1600
    {standard input}:21     .data.OUT_GENERICProcessDataMapping0x1600:00000000 $d
    {standard input}:44     .data.IN_GENERICProcessDataMapping0x1A00:00000000 IN_GENERICProcessDataMapping0x1A00
    {standard input}:41     .data.IN_GENERICProcessDataMapping0x1A00:00000000 $d
    {standard input}:64     .data.sRxPDOassign:00000000 sRxPDOassign
    {standard input}:61     .data.sRxPDOassign:00000000 $d
    {standard input}:72     .data.sTxPDOassign:00000000 sTxPDOassign
    {standard input}:69     .data.sTxPDOassign:00000000 $d
    {standard input}:80     .data.IN_GENERIC0x6000:00000000 IN_GENERIC0x6000
    {standard input}:77     .data.IN_GENERIC0x6000:00000000 $d
    {standard input}:93     .data.OUT_GENERIC0x7000:00000000 OUT_GENERIC0x7000
    {standard input}:90     .data.OUT_GENERIC0x7000:00000000 $d
    {standard input}:102    .text.APPL_AckErrorInd:00000000 $t
    {standard input}:107    .text.APPL_AckErrorInd:00000000 APPL_AckErrorInd
    {standard input}:144    .text.APPL_StartMailboxHandler:00000000 $t
    {standard input}:149    .text.APPL_StartMailboxHandler:00000000 APPL_StartMailboxHandler
    {standard input}:180    .text.APPL_StopMailboxHandler:00000000 $t
    {standard input}:185    .text.APPL_StopMailboxHandler:00000000 APPL_StopMailboxHandler
    {standard input}:210    .text.APPL_StartInputHandler:00000000 $t
    {standard input}:215    .text.APPL_StartInputHandler:00000000 APPL_StartInputHandler
    {standard input}:253    .text.APPL_StopInputHandler:00000000 $t
    {standard input}:258    .text.APPL_StopInputHandler:00000000 APPL_StopInputHandler
    {standard input}:289    .text.APPL_StartOutputHandler:00000000 $t
    {standard input}:294    .text.APPL_StartOutputHandler:00000000 APPL_StartOutputHandler
    {standard input}:325    .text.APPL_StopOutputHandler:00000000 $t
    {standard input}:330    .text.APPL_StopOutputHandler:00000000 APPL_StopOutputHandler
    {standard input}:361    .text.APPL_GenerateMapping:00000000 $t
    {standard input}:366    .text.APPL_GenerateMapping:00000000 APPL_GenerateMapping
    {standard input}:617    .text.APPL_GenerateMapping:00000160 $d
    {standard input}:623    .text.APPL_InputMapping:00000000 $t
    {standard input}:628    .text.APPL_InputMapping:00000000 APPL_InputMapping
    {standard input}:663    .text.APPL_InputMapping:00000018 $d
    {standard input}:668    .text.APPL_OutputMapping:00000000 $t
    {standard input}:673    .text.APPL_OutputMapping:00000000 APPL_OutputMapping
    {standard input}:708    .text.APPL_OutputMapping:00000018 $d
    {standard input}:713    .text.APPL_Application:00000000 $t
    {standard input}:718    .text.APPL_Application:00000000 APPL_Application
    {standard input}:741    .text.APPL_Application:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FWUPDATE_StateTransitionInit
OBJ_GetObjectHandle
OBJ_GetEntryOffset
memcpy
process_app
