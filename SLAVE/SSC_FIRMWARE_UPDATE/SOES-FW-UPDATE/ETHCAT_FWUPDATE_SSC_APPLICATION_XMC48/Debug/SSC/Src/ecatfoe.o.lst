   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ecatfoe.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm u32PacketNo,4,4
  20              	 .comm u32FileOffset,4,4
  21              	 .comm u32LastFileOffset,4,4
  22              	 .comm u16FileAccessState,2,2
  23              	 .comm pFoeSendStored,4,4
  24              	 .section .text.FOE_Init,"ax",%progbits
  25              	 .align 2
  26              	 .global FOE_Init
  27              	 .thumb
  28              	 .thumb_func
  30              	FOE_Init:
  31              	.LFB172:
  32              	 .file 1 "../SSC/Src/ecatfoe.c"
   1:../SSC/Src/ecatfoe.c **** /**
   2:../SSC/Src/ecatfoe.c **** \addtogroup FoE FileTransfer over EtherCAT
   3:../SSC/Src/ecatfoe.c **** @{
   4:../SSC/Src/ecatfoe.c **** */
   5:../SSC/Src/ecatfoe.c **** 
   6:../SSC/Src/ecatfoe.c **** /**
   7:../SSC/Src/ecatfoe.c **** \file ecatfoe.c
   8:../SSC/Src/ecatfoe.c **** \author EthercatSSC@beckhoff.com
   9:../SSC/Src/ecatfoe.c **** \brief Implementation
  10:../SSC/Src/ecatfoe.c **** This file contains the FoE mailbox interface
  11:../SSC/Src/ecatfoe.c **** 
  12:../SSC/Src/ecatfoe.c **** \version 5.11
  13:../SSC/Src/ecatfoe.c **** 
  14:../SSC/Src/ecatfoe.c **** <br>Changes to version V5.10:<br>
  15:../SSC/Src/ecatfoe.c **** V5.11 FOE1: handle busy on a read request, change OPMode to OPCode (same terms as in the spec)<br>
  16:../SSC/Src/ecatfoe.c **** <br>Changes to version V5.0:<br>
  17:../SSC/Src/ecatfoe.c **** V5.10 MBX1: Remove multiple swapping of length filed in mailbox header<br>
  18:../SSC/Src/ecatfoe.c **** <br>Changes to version V4.40:<br>
  19:../SSC/Src/ecatfoe.c **** V5.0 FOE1: Free memory if FoE_ServciceInd() is left.<br>
  20:../SSC/Src/ecatfoe.c **** V5.0 FOE2: Update error code (Bit 15 shall not be set).<br>
  21:../SSC/Src/ecatfoe.c **** V5.0 FOE3: Update byte swapping for big endian and big endian 16 configurations.<br>
  22:../SSC/Src/ecatfoe.c **** V5.0 FOE4: Update Error text handling for 16Bit operations.<br>
  23:../SSC/Src/ecatfoe.c **** <br>Changes to version V4.11:<br>
  24:../SSC/Src/ecatfoe.c **** V4.40 FOE1: correct FoE busy values<br>
  25:../SSC/Src/ecatfoe.c **** V4.40 MBX2: HW_CopyToSendMailbox merge to a generic function (new: MBX_CopyToSendMailbox)<br>
  26:../SSC/Src/ecatfoe.c **** <br>Changes to version V4.10:<br>
  27:../SSC/Src/ecatfoe.c **** V4.11 FOE 1 fixed a problem with a huge FOE_MADATA define<br>
  28:../SSC/Src/ecatfoe.c **** V4.11 FOE 2 u16PacketNo is now a 32bit variable (u32PacketNo) to conform with the spec<br>
  29:../SSC/Src/ecatfoe.c **** <br>Changes to version V4.00:<br>
  30:../SSC/Src/ecatfoe.c **** V4.10 FOE 1-3 when downloading the firmware the FoE state machine was not set to FOE_READY<br>
  31:../SSC/Src/ecatfoe.c ****               when the last data segment was downloaded so that the next FoE service failed<br>
  32:../SSC/Src/ecatfoe.c **** <br>Changes to version V3.20:<br>
  33:../SSC/Src/ecatfoe.c **** V4.00 FOE 1 - if a FoE Error service is received it should not be acknowledged<br>
  34:../SSC/Src/ecatfoe.c **** V4.00 FOE 2 - if a FoE service response could not be sent because the mailbox is full<br>
  35:../SSC/Src/ecatfoe.c ****               it has to be re-transmit otherwise the response get lost<br>
  36:../SSC/Src/ecatfoe.c **** 
  37:../SSC/Src/ecatfoe.c **** */
  38:../SSC/Src/ecatfoe.c **** 
  39:../SSC/Src/ecatfoe.c **** /*-----------------------------------------------------------------------------------------
  40:../SSC/Src/ecatfoe.c **** ------
  41:../SSC/Src/ecatfoe.c **** ------    Includes
  42:../SSC/Src/ecatfoe.c **** ------
  43:../SSC/Src/ecatfoe.c **** -----------------------------------------------------------------------------------------*/
  44:../SSC/Src/ecatfoe.c **** 
  45:../SSC/Src/ecatfoe.c **** #include "ecat_def.h"
  46:../SSC/Src/ecatfoe.c **** 
  47:../SSC/Src/ecatfoe.c **** 
  48:../SSC/Src/ecatfoe.c **** #include "ecatslv.h"
  49:../SSC/Src/ecatfoe.c **** 
  50:../SSC/Src/ecatfoe.c **** #define    _ECATFOE_ 1
  51:../SSC/Src/ecatfoe.c **** #include "ecatfoe.h"
  52:../SSC/Src/ecatfoe.c **** #undef    _ECATFOE_
  53:../SSC/Src/ecatfoe.c **** #define    _ECATFOE_ 0
  54:../SSC/Src/ecatfoe.c **** 
  55:../SSC/Src/ecatfoe.c **** #include "foeappl.h"
  56:../SSC/Src/ecatfoe.c **** /*-----------------------------------------------------------------------------------------
  57:../SSC/Src/ecatfoe.c **** ------
  58:../SSC/Src/ecatfoe.c **** ------    functions
  59:../SSC/Src/ecatfoe.c **** ------
  60:../SSC/Src/ecatfoe.c **** -----------------------------------------------------------------------------------------*/
  61:../SSC/Src/ecatfoe.c **** 
  62:../SSC/Src/ecatfoe.c **** /////////////////////////////////////////////////////////////////////////////////////////
  63:../SSC/Src/ecatfoe.c **** /**
  64:../SSC/Src/ecatfoe.c **** 
  65:../SSC/Src/ecatfoe.c ****  \brief    This function intialize the FoE Interface.
  66:../SSC/Src/ecatfoe.c **** *////////////////////////////////////////////////////////////////////////////////////////
  67:../SSC/Src/ecatfoe.c **** 
  68:../SSC/Src/ecatfoe.c **** void FOE_Init(void)
  69:../SSC/Src/ecatfoe.c **** {
  33              	 .loc 1 69 0
  34              	 .cfi_startproc
  35              	 
  36              	 
  37              	 
  38 0000 80B4     	 push {r7}
  39              	.LCFI0:
  40              	 .cfi_def_cfa_offset 4
  41              	 .cfi_offset 7,-4
  42 0002 00AF     	 add r7,sp,#0
  43              	.LCFI1:
  44              	 .cfi_def_cfa_register 7
  70:../SSC/Src/ecatfoe.c ****     /* no file transmission sequence is running */
  71:../SSC/Src/ecatfoe.c ****     u16FileAccessState    = FOE_READY;
  45              	 .loc 1 71 0
  46 0004 064B     	 ldr r3,.L2
  47 0006 0022     	 movs r2,#0
  48 0008 1A80     	 strh r2,[r3]
  72:../SSC/Src/ecatfoe.c ****     /* initialize the expected packet number */
  73:../SSC/Src/ecatfoe.c ****     u32PacketNo = 0;
  49              	 .loc 1 73 0
  50 000a 064B     	 ldr r3,.L2+4
  51 000c 0022     	 movs r2,#0
  52 000e 1A60     	 str r2,[r3]
  74:../SSC/Src/ecatfoe.c ****     pFoeSendStored = NULL;
  53              	 .loc 1 74 0
  54 0010 054B     	 ldr r3,.L2+8
  55 0012 0022     	 movs r2,#0
  56 0014 1A60     	 str r2,[r3]
  75:../SSC/Src/ecatfoe.c **** }
  57              	 .loc 1 75 0
  58 0016 BD46     	 mov sp,r7
  59              	.LCFI2:
  60              	 .cfi_def_cfa_register 13
  61              	 
  62 0018 5DF8047B 	 ldr r7,[sp],#4
  63              	.LCFI3:
  64              	 .cfi_restore 7
  65              	 .cfi_def_cfa_offset 0
  66 001c 7047     	 bx lr
  67              	.L3:
  68 001e 00BF     	 .align 2
  69              	.L2:
  70 0020 00000000 	 .word u16FileAccessState
  71 0024 00000000 	 .word u32PacketNo
  72 0028 00000000 	 .word pFoeSendStored
  73              	 .cfi_endproc
  74              	.LFE172:
  76              	 .section .text.FOE_ServiceInd,"ax",%progbits
  77              	 .align 2
  78              	 .global FOE_ServiceInd
  79              	 .thumb
  80              	 .thumb_func
  82              	FOE_ServiceInd:
  83              	.LFB173:
  76:../SSC/Src/ecatfoe.c **** 
  77:../SSC/Src/ecatfoe.c **** 
  78:../SSC/Src/ecatfoe.c **** /////////////////////////////////////////////////////////////////////////////////////////
  79:../SSC/Src/ecatfoe.c **** /**
  80:../SSC/Src/ecatfoe.c ****  \param     pFoeInd      Pointer to the received mailbox data from the master.
  81:../SSC/Src/ecatfoe.c **** 
  82:../SSC/Src/ecatfoe.c ****  \return    result of the operation (0 (success) or mailbox error code (MBXERR_.... defined in
  83:../SSC/Src/ecatfoe.c ****             mailbox.h))
  84:../SSC/Src/ecatfoe.c **** 
  85:../SSC/Src/ecatfoe.c ****  \brief    This function is called when a FoE (File Access over EtherCAT) service is received from
  86:../SSC/Src/ecatfoe.c ****              the master.
  87:../SSC/Src/ecatfoe.c **** *////////////////////////////////////////////////////////////////////////////////////////
  88:../SSC/Src/ecatfoe.c **** 
  89:../SSC/Src/ecatfoe.c **** UINT8 FOE_ServiceInd(TFOEMBX MBXMEM * pFoeInd)
  90:../SSC/Src/ecatfoe.c **** {
  84              	 .loc 1 90 0
  85              	 .cfi_startproc
  86              	 
  87              	 
  88 0000 80B5     	 push {r7,lr}
  89              	.LCFI4:
  90              	 .cfi_def_cfa_offset 8
  91              	 .cfi_offset 7,-8
  92              	 .cfi_offset 14,-4
  93 0002 8CB0     	 sub sp,sp,#48
  94              	.LCFI5:
  95              	 .cfi_def_cfa_offset 56
  96 0004 00AF     	 add r7,sp,#0
  97              	.LCFI6:
  98              	 .cfi_def_cfa_register 7
  99 0006 7860     	 str r0,[r7,#4]
  91:../SSC/Src/ecatfoe.c ****     /* initialize the result of the service checking */
  92:../SSC/Src/ecatfoe.c ****     UINT16 nextState = ECAT_FOE_ERRCODE_ILLEGAL;
 100              	 .loc 1 92 0
 101 0008 48F20403 	 movw r3,#32772
 102 000c FB85     	 strh r3,[r7,#46]
  93:../SSC/Src/ecatfoe.c ****     /* dataSize contains the size of the file data */
  94:../SSC/Src/ecatfoe.c ****     UINT16 dataSize = SWAPWORD(pFoeInd->MbxHeader.Length) - FOE_HEADER_SIZE;
 103              	 .loc 1 94 0
 104 000e 7B68     	 ldr r3,[r7,#4]
 105 0010 1B88     	 ldrh r3,[r3]
 106 0012 9BB2     	 uxth r3,r3
 107 0014 063B     	 subs r3,r3,#6
 108 0016 7B85     	 strh r3,[r7,#42]
  95:../SSC/Src/ecatfoe.c **** 
  96:../SSC/Src/ecatfoe.c **** 
  97:../SSC/Src/ecatfoe.c ****     /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
  98:../SSC/Src/ecatfoe.c ****        great enough for the service header of the FoE service */
  99:../SSC/Src/ecatfoe.c ****     if ( SWAPWORD(pFoeInd->MbxHeader.Length) < FOE_HEADER_SIZE )
 109              	 .loc 1 99 0
 110 0018 7B68     	 ldr r3,[r7,#4]
 111 001a 1B88     	 ldrh r3,[r3]
 112 001c 9BB2     	 uxth r3,r3
 113 001e 052B     	 cmp r3,#5
 114 0020 01D8     	 bhi .L5
 100:../SSC/Src/ecatfoe.c ****         return MBXERR_SIZETOOSHORT;
 115              	 .loc 1 100 0
 116 0022 0623     	 movs r3,#6
 117 0024 F3E1     	 b .L6
 118              	.L5:
 101:../SSC/Src/ecatfoe.c **** 
 102:../SSC/Src/ecatfoe.c ****     switch ( SWAPWORD(pFoeInd->FoeHeader.OpCode) )
 119              	 .loc 1 102 0
 120 0026 7B68     	 ldr r3,[r7,#4]
 121 0028 DB88     	 ldrh r3,[r3,#6]
 122 002a 9BB2     	 uxth r3,r3
 123 002c 013B     	 subs r3,r3,#1
 124 002e 052B     	 cmp r3,#5
 125 0030 00F2DA80 	 bhi .L7
 126 0034 01A2     	 adr r2,.L9
 127 0036 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 128 003a 00BF     	 .p2align 2
 129              	.L9:
 130 003c 55000000 	 .word .L8+1
 131 0040 BD000000 	 .word .L10+1
 132 0044 F7000000 	 .word .L11+1
 133 0048 43010000 	 .word .L12+1
 134 004c 9B010000 	 .word .L13+1
 135 0050 B9010000 	 .word .L14+1
 136              	 .p2align 1
 137              	.L8:
 103:../SSC/Src/ecatfoe.c ****     {
 104:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_RRQ:
 105:../SSC/Src/ecatfoe.c ****         /* file read is requested */
 106:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState == FOE_READY )
 138              	 .loc 1 106 0
 139 0054 9F4B     	 ldr r3,.L49
 140 0056 1B88     	 ldrh r3,[r3]
 141 0058 002B     	 cmp r3,#0
 142 005a 2ED1     	 bne .L15
 143              	.LBB2:
 107:../SSC/Src/ecatfoe.c ****         {
 108:../SSC/Src/ecatfoe.c ****             UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 144              	 .loc 1 108 0
 145 005c 7B68     	 ldr r3,[r7,#4]
 146 005e 9B68     	 ldr r3,[r3,#8]
 147 0060 7B62     	 str r3,[r7,#36]
 109:../SSC/Src/ecatfoe.c ****             /* last FoE sequence was finished, call application function */
 110:../SSC/Src/ecatfoe.c ****             nextState = FOE_Read(pFoeInd->Data, dataSize, pFoeInd->Data, SWAPDWORD(u32Password));
 148              	 .loc 1 110 0
 149 0062 7B68     	 ldr r3,[r7,#4]
 150 0064 03F10C01 	 add r1,r3,#12
 151 0068 7B68     	 ldr r3,[r7,#4]
 152 006a 0C33     	 adds r3,r3,#12
 153 006c 7A8D     	 ldrh r2,[r7,#42]
 154 006e 0846     	 mov r0,r1
 155 0070 1146     	 mov r1,r2
 156 0072 1A46     	 mov r2,r3
 157 0074 7B6A     	 ldr r3,[r7,#36]
 158 0076 FFF7FEFF 	 bl FOE_Read
 159 007a 0346     	 mov r3,r0
 160 007c FB85     	 strh r3,[r7,#46]
 111:../SSC/Src/ecatfoe.c **** 
 112:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_START(V5.11) FOE1*/
 113:../SSC/Src/ecatfoe.c ****             /* u32LastFileOffset contains the offset of the file which is sent now */
 114:../SSC/Src/ecatfoe.c ****             u32LastFileOffset = 0;
 161              	 .loc 1 114 0
 162 007e 964B     	 ldr r3,.L49+4
 163 0080 0022     	 movs r2,#0
 164 0082 1A60     	 str r2,[r3]
 115:../SSC/Src/ecatfoe.c **** 
 116:../SSC/Src/ecatfoe.c ****             if (nextState <= FOE_MAXDATA)
 165              	 .loc 1 116 0
 166 0084 FB8D     	 ldrh r3,[r7,#46]
 167 0086 47F69572 	 movw r2,#32661
 168 008a 9342     	 cmp r3,r2
 169 008c 06D8     	 bhi .L16
 117:../SSC/Src/ecatfoe.c ****             {
 118:../SSC/Src/ecatfoe.c ****                 /* the first data packet shall be sent */
 119:../SSC/Src/ecatfoe.c ****                 u32PacketNo    = 1;
 170              	 .loc 1 119 0
 171 008e 934B     	 ldr r3,.L49+8
 172 0090 0122     	 movs r2,#1
 173 0092 1A60     	 str r2,[r3]
 120:../SSC/Src/ecatfoe.c ****                 /* u32FileOffset contains the offset of the file which shall be sent when the next 
 121:../SSC/Src/ecatfoe.c ****                 u32FileOffset = nextState;
 174              	 .loc 1 121 0
 175 0094 FB8D     	 ldrh r3,[r7,#46]
 176 0096 924A     	 ldr r2,.L49+12
 177 0098 1360     	 str r3,[r2]
 178 009a 0EE0     	 b .L15
 179              	.L16:
 122:../SSC/Src/ecatfoe.c ****             }
 123:../SSC/Src/ecatfoe.c ****             else if (nextState <= FOE_MAXBUSY)
 180              	 .loc 1 123 0
 181 009c FB8D     	 ldrh r3,[r7,#46]
 182 009e 47F6FA72 	 movw r2,#32762
 183 00a2 9342     	 cmp r3,r2
 184 00a4 09D8     	 bhi .L15
 124:../SSC/Src/ecatfoe.c ****             {
 125:../SSC/Src/ecatfoe.c ****                 u32PacketNo    = 0;
 185              	 .loc 1 125 0
 186 00a6 8D4B     	 ldr r3,.L49+8
 187 00a8 0022     	 movs r2,#0
 188 00aa 1A60     	 str r2,[r3]
 126:../SSC/Src/ecatfoe.c ****                 u32FileOffset = 0;
 189              	 .loc 1 126 0
 190 00ac 8C4B     	 ldr r3,.L49+12
 191 00ae 0022     	 movs r2,#0
 192 00b0 1A60     	 str r2,[r3]
 127:../SSC/Src/ecatfoe.c ****                 u16FileAccessState = FOE_WAIT_FOR_ACK;
 193              	 .loc 1 127 0
 194 00b2 884B     	 ldr r3,.L49
 195 00b4 0122     	 movs r2,#1
 196 00b6 1A80     	 strh r2,[r3]
 197              	.LBE2:
 128:../SSC/Src/ecatfoe.c ****             }
 129:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_END(V5.11) FOE1*/
 130:../SSC/Src/ecatfoe.c ****         }
 131:../SSC/Src/ecatfoe.c ****         break;
 198              	 .loc 1 131 0
 199 00b8 96E0     	 b .L7
 200              	.L15:
 201 00ba 95E0     	 b .L7
 202              	.L10:
 132:../SSC/Src/ecatfoe.c **** 
 133:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_WRQ:
 134:../SSC/Src/ecatfoe.c ****         /* file write is requested */
 135:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState == FOE_READY )
 203              	 .loc 1 135 0
 204 00bc 854B     	 ldr r3,.L49
 205 00be 1B88     	 ldrh r3,[r3]
 206 00c0 002B     	 cmp r3,#0
 207 00c2 17D1     	 bne .L17
 208              	.LBB3:
 136:../SSC/Src/ecatfoe.c ****         {
 137:../SSC/Src/ecatfoe.c ****             UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 209              	 .loc 1 137 0
 210 00c4 7B68     	 ldr r3,[r7,#4]
 211 00c6 9B68     	 ldr r3,[r3,#8]
 212 00c8 3B62     	 str r3,[r7,#32]
 138:../SSC/Src/ecatfoe.c ****             /* last FoE sequence was finished, call application function */
 139:../SSC/Src/ecatfoe.c ****             nextState = FOE_Write(pFoeInd->Data, dataSize, SWAPDWORD(u32Password));
 213              	 .loc 1 139 0
 214 00ca 7B68     	 ldr r3,[r7,#4]
 215 00cc 03F10C02 	 add r2,r3,#12
 216 00d0 7B8D     	 ldrh r3,[r7,#42]
 217 00d2 1046     	 mov r0,r2
 218 00d4 1946     	 mov r1,r3
 219 00d6 3A6A     	 ldr r2,[r7,#32]
 220 00d8 FFF7FEFF 	 bl FOE_Write
 221 00dc 0346     	 mov r3,r0
 222 00de FB85     	 strh r3,[r7,#46]
 140:../SSC/Src/ecatfoe.c ****             if ( nextState == 0 )
 223              	 .loc 1 140 0
 224 00e0 FB8D     	 ldrh r3,[r7,#46]
 225 00e2 002B     	 cmp r3,#0
 226 00e4 02D1     	 bne .L18
 141:../SSC/Src/ecatfoe.c ****             {
 142:../SSC/Src/ecatfoe.c ****                 /* checking was successful, sent a FoE Ack service */
 143:../SSC/Src/ecatfoe.c ****                 nextState = FOE_ACK;
 227              	 .loc 1 143 0
 228 00e6 47F6FD73 	 movw r3,#32765
 229 00ea FB85     	 strh r3,[r7,#46]
 230              	.L18:
 144:../SSC/Src/ecatfoe.c ****             }
 145:../SSC/Src/ecatfoe.c ****             /* initialize the packet number */
 146:../SSC/Src/ecatfoe.c ****             u32PacketNo    = 0;
 231              	 .loc 1 146 0
 232 00ec 7B4B     	 ldr r3,.L49+8
 233 00ee 0022     	 movs r2,#0
 234 00f0 1A60     	 str r2,[r3]
 235              	.LBE3:
 147:../SSC/Src/ecatfoe.c ****         }
 148:../SSC/Src/ecatfoe.c ****         break;
 236              	 .loc 1 148 0
 237 00f2 79E0     	 b .L7
 238              	.L17:
 239 00f4 78E0     	 b .L7
 240              	.L11:
 149:../SSC/Src/ecatfoe.c **** 
 150:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_DATA:
 151:../SSC/Src/ecatfoe.c ****         /* file data is received */
 152:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState == FOE_WAIT_FOR_DATA
 241              	 .loc 1 152 0
 242 00f6 774B     	 ldr r3,.L49
 243 00f8 1B88     	 ldrh r3,[r3]
 244 00fa 022B     	 cmp r3,#2
 245 00fc 03D0     	 beq .L19
 153:../SSC/Src/ecatfoe.c ****           || u16FileAccessState == FOE_WAIT_FOR_LAST_DATA )
 246              	 .loc 1 153 0
 247 00fe 754B     	 ldr r3,.L49
 248 0100 1B88     	 ldrh r3,[r3]
 249 0102 062B     	 cmp r3,#6
 250 0104 1CD1     	 bne .L20
 251              	.L19:
 252              	.LBB4:
 154:../SSC/Src/ecatfoe.c ****         {
 155:../SSC/Src/ecatfoe.c ****             UINT32 u32CmdPacketNo = SWAPDWORD(pFoeInd->FoeHeader.Cmd.PacketNo);
 253              	 .loc 1 155 0
 254 0106 7B68     	 ldr r3,[r7,#4]
 255 0108 9B68     	 ldr r3,[r3,#8]
 256 010a FB61     	 str r3,[r7,#28]
 156:../SSC/Src/ecatfoe.c ****             /* we are waiting for file data, service is correct */
 157:../SSC/Src/ecatfoe.c ****             if ( u32CmdPacketNo == u32PacketNo )
 257              	 .loc 1 157 0
 258 010c 734B     	 ldr r3,.L49+8
 259 010e 1B68     	 ldr r3,[r3]
 260 0110 FA69     	 ldr r2,[r7,#28]
 261 0112 9A42     	 cmp r2,r3
 262 0114 10D1     	 bne .L21
 158:../SSC/Src/ecatfoe.c ****             {
 159:../SSC/Src/ecatfoe.c ****                 /* the packet number is correct, call application function to store the file data *
 160:../SSC/Src/ecatfoe.c ****                 nextState = FOE_Data(pFoeInd->Data, dataSize);
 263              	 .loc 1 160 0
 264 0116 7B68     	 ldr r3,[r7,#4]
 265 0118 03F10C02 	 add r2,r3,#12
 266 011c 7B8D     	 ldrh r3,[r7,#42]
 267 011e 1046     	 mov r0,r2
 268 0120 1946     	 mov r1,r3
 269 0122 FFF7FEFF 	 bl FOE_Data
 270 0126 0346     	 mov r3,r0
 271 0128 FB85     	 strh r3,[r7,#46]
 161:../SSC/Src/ecatfoe.c ****                 if ( nextState == 0 )
 272              	 .loc 1 161 0
 273 012a FB8D     	 ldrh r3,[r7,#46]
 274 012c 002B     	 cmp r3,#0
 275 012e 07D1     	 bne .L20
 162:../SSC/Src/ecatfoe.c ****                 {
 163:../SSC/Src/ecatfoe.c ****                     /* checking was successful, sent a FoE Ack service */
 164:../SSC/Src/ecatfoe.c ****                     nextState = FOE_ACK;
 276              	 .loc 1 164 0
 277 0130 47F6FD73 	 movw r3,#32765
 278 0134 FB85     	 strh r3,[r7,#46]
 279              	.LBE4:
 165:../SSC/Src/ecatfoe.c ****                 }
 166:../SSC/Src/ecatfoe.c ****             }
 167:../SSC/Src/ecatfoe.c ****             else
 168:../SSC/Src/ecatfoe.c ****                 nextState = ECAT_FOE_ERRCODE_PACKENO;
 169:../SSC/Src/ecatfoe.c ****         }
 170:../SSC/Src/ecatfoe.c ****         break;
 280              	 .loc 1 170 0
 281 0136 57E0     	 b .L7
 282              	.L21:
 283              	.LBB5:
 168:../SSC/Src/ecatfoe.c ****         }
 284              	 .loc 1 168 0
 285 0138 48F20503 	 movw r3,#32773
 286 013c FB85     	 strh r3,[r7,#46]
 287              	.LBE5:
 288              	 .loc 1 170 0
 289 013e 53E0     	 b .L7
 290              	.L20:
 291              	 .loc 1 170 0 is_stmt 0 discriminator 1
 292 0140 52E0     	 b .L7
 293              	.L12:
 171:../SSC/Src/ecatfoe.c **** 
 172:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_ACK:
 173:../SSC/Src/ecatfoe.c ****         /* acknowledge is received, next file part can be sent */
 174:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState == FOE_WAIT_FOR_ACK )
 294              	 .loc 1 174 0 is_stmt 1
 295 0142 644B     	 ldr r3,.L49
 296 0144 1B88     	 ldrh r3,[r3]
 297 0146 012B     	 cmp r3,#1
 298 0148 1ED1     	 bne .L23
 175:../SSC/Src/ecatfoe.c ****         {
 176:../SSC/Src/ecatfoe.c ****             /* we are waiting for an acknowledge, service is correct, call the application function
 177:../SSC/Src/ecatfoe.c ****                to get the next part of the file */
 178:../SSC/Src/ecatfoe.c ****             nextState = FOE_Ack( u32FileOffset, pFoeInd->Data );
 299              	 .loc 1 178 0
 300 014a 654B     	 ldr r3,.L49+12
 301 014c 1A68     	 ldr r2,[r3]
 302 014e 7B68     	 ldr r3,[r7,#4]
 303 0150 0C33     	 adds r3,r3,#12
 304 0152 1046     	 mov r0,r2
 305 0154 1946     	 mov r1,r3
 306 0156 FFF7FEFF 	 bl FOE_Ack
 307 015a 0346     	 mov r3,r0
 308 015c FB85     	 strh r3,[r7,#46]
 179:../SSC/Src/ecatfoe.c ****             /* u32LastFileOffset contains the offset of the file which is sent now */
 180:../SSC/Src/ecatfoe.c ****             u32LastFileOffset = u32FileOffset;
 309              	 .loc 1 180 0
 310 015e 604B     	 ldr r3,.L49+12
 311 0160 1B68     	 ldr r3,[r3]
 312 0162 5D4A     	 ldr r2,.L49+4
 313 0164 1360     	 str r3,[r2]
 181:../SSC/Src/ecatfoe.c **** 
 182:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_START(V5.11) FOE1*/
 183:../SSC/Src/ecatfoe.c ****             if (nextState <= FOE_MAXDATA) 
 314              	 .loc 1 183 0
 315 0166 FB8D     	 ldrh r3,[r7,#46]
 316 0168 47F69572 	 movw r2,#32661
 317 016c 9342     	 cmp r3,r2
 318 016e 13D8     	 bhi .L25
 184:../SSC/Src/ecatfoe.c ****             {
 185:../SSC/Src/ecatfoe.c ****                 /* u32FileOffset contains the offset of the file which shall be sent when the next 
 186:../SSC/Src/ecatfoe.c ****                 u32FileOffset += nextState;
 319              	 .loc 1 186 0
 320 0170 FA8D     	 ldrh r2,[r7,#46]
 321 0172 5B4B     	 ldr r3,.L49+12
 322 0174 1B68     	 ldr r3,[r3]
 323 0176 1344     	 add r3,r3,r2
 324 0178 594A     	 ldr r2,.L49+12
 325 017a 1360     	 str r3,[r2]
 187:../SSC/Src/ecatfoe.c ****                 /* increment the packet number */
 188:../SSC/Src/ecatfoe.c ****                 u32PacketNo++;
 326              	 .loc 1 188 0
 327 017c 574B     	 ldr r3,.L49+8
 328 017e 1B68     	 ldr r3,[r3]
 329 0180 0133     	 adds r3,r3,#1
 330 0182 564A     	 ldr r2,.L49+8
 331 0184 1360     	 str r3,[r2]
 189:../SSC/Src/ecatfoe.c ****             }
 190:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_END(V5.11) FOE1*/  
 191:../SSC/Src/ecatfoe.c ****         }
 192:../SSC/Src/ecatfoe.c ****         else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 193:../SSC/Src/ecatfoe.c ****         {
 194:../SSC/Src/ecatfoe.c ****             /* we were waiting for the last acknowledge, now the sequence is finished */
 195:../SSC/Src/ecatfoe.c ****             nextState = FOE_FINISHED_NOACK;
 196:../SSC/Src/ecatfoe.c ****         }
 197:../SSC/Src/ecatfoe.c ****         break;
 332              	 .loc 1 197 0
 333 0186 2FE0     	 b .L7
 334              	.L23:
 192:../SSC/Src/ecatfoe.c ****         {
 335              	 .loc 1 192 0
 336 0188 524B     	 ldr r3,.L49
 337 018a 1B88     	 ldrh r3,[r3]
 338 018c 042B     	 cmp r3,#4
 339 018e 03D1     	 bne .L25
 195:../SSC/Src/ecatfoe.c ****         }
 340              	 .loc 1 195 0
 341 0190 47F6FE73 	 movw r3,#32766
 342 0194 FB85     	 strh r3,[r7,#46]
 343              	 .loc 1 197 0
 344 0196 27E0     	 b .L7
 345              	.L25:
 346              	 .loc 1 197 0 is_stmt 0 discriminator 2
 347 0198 26E0     	 b .L7
 348              	.L13:
 198:../SSC/Src/ecatfoe.c **** 
 199:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_ERR:
 200:../SSC/Src/ecatfoe.c ****         /* a FoE Error service is received */
 201:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState != FOE_READY )
 349              	 .loc 1 201 0 is_stmt 1
 350 019a 4E4B     	 ldr r3,.L49
 351 019c 1B88     	 ldrh r3,[r3]
 352 019e 002B     	 cmp r3,#0
 353 01a0 09D0     	 beq .L26
 354              	.LBB6:
 202:../SSC/Src/ecatfoe.c ****         {
 203:../SSC/Src/ecatfoe.c ****             UINT32 u32CmdErrorCode = SWAPDWORD(pFoeInd->FoeHeader.Cmd.ErrorCode);
 355              	 .loc 1 203 0
 356 01a2 7B68     	 ldr r3,[r7,#4]
 357 01a4 9B68     	 ldr r3,[r3,#8]
 358 01a6 BB61     	 str r3,[r7,#24]
 204:../SSC/Src/ecatfoe.c ****             /* a file transmission sequence is active, inform the application, that this sequence
 205:../SSC/Src/ecatfoe.c ****                was stopped */
 206:../SSC/Src/ecatfoe.c ****             FOE_Error( u32CmdErrorCode );
 359              	 .loc 1 206 0
 360 01a8 B869     	 ldr r0,[r7,#24]
 361 01aa FFF7FEFF 	 bl FOE_Error
 207:../SSC/Src/ecatfoe.c ****             nextState = FOE_FINISHED;
 362              	 .loc 1 207 0
 363 01ae 47F6FF73 	 movw r3,#32767
 364 01b2 FB85     	 strh r3,[r7,#46]
 365              	.LBE6:
 208:../SSC/Src/ecatfoe.c ****         }
 209:../SSC/Src/ecatfoe.c ****         break;
 366              	 .loc 1 209 0
 367 01b4 18E0     	 b .L7
 368              	.L26:
 369 01b6 17E0     	 b .L7
 370              	.L14:
 210:../SSC/Src/ecatfoe.c **** 
 211:../SSC/Src/ecatfoe.c ****     case ECAT_FOE_OPCODE_BUSY:
 212:../SSC/Src/ecatfoe.c ****         /* a FoE Busy service is received */
 213:../SSC/Src/ecatfoe.c ****         if ( u16FileAccessState == FOE_WAIT_FOR_ACK
 371              	 .loc 1 213 0
 372 01b8 464B     	 ldr r3,.L49
 373 01ba 1B88     	 ldrh r3,[r3]
 374 01bc 012B     	 cmp r3,#1
 375 01be 03D0     	 beq .L27
 214:../SSC/Src/ecatfoe.c ****           || u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 376              	 .loc 1 214 0
 377 01c0 444B     	 ldr r3,.L49
 378 01c2 1B88     	 ldrh r3,[r3]
 379 01c4 042B     	 cmp r3,#4
 380 01c6 0ED1     	 bne .L28
 381              	.L27:
 215:../SSC/Src/ecatfoe.c ****         {
 216:../SSC/Src/ecatfoe.c ****             /* we are waiting for an acknowledge, service is correct, call the application function
 217:../SSC/Src/ecatfoe.c ****                to resend the last part of the file */
 218:../SSC/Src/ecatfoe.c ****             nextState = FOE_Busy( SWAPWORD(pFoeInd->FoeHeader.Cmd.Busy.Done), u32LastFileOffset, pF
 382              	 .loc 1 218 0
 383 01c8 7B68     	 ldr r3,[r7,#4]
 384 01ca 1B89     	 ldrh r3,[r3,#8]
 385 01cc 99B2     	 uxth r1,r3
 386 01ce 424B     	 ldr r3,.L49+4
 387 01d0 1A68     	 ldr r2,[r3]
 388 01d2 7B68     	 ldr r3,[r7,#4]
 389 01d4 0C33     	 adds r3,r3,#12
 390 01d6 0846     	 mov r0,r1
 391 01d8 1146     	 mov r1,r2
 392 01da 1A46     	 mov r2,r3
 393 01dc FFF7FEFF 	 bl FOE_Busy
 394 01e0 0346     	 mov r3,r0
 395 01e2 FB85     	 strh r3,[r7,#46]
 219:../SSC/Src/ecatfoe.c ****         }
 220:../SSC/Src/ecatfoe.c ****         break;
 396              	 .loc 1 220 0
 397 01e4 FFE7     	 b .L48
 398              	.L28:
 399              	.L48:
 400 01e6 00BF     	 nop
 401              	.L7:
 221:../SSC/Src/ecatfoe.c **** 
 222:../SSC/Src/ecatfoe.c ****     }
 223:../SSC/Src/ecatfoe.c **** 
 224:../SSC/Src/ecatfoe.c ****     if ( nextState <= FOE_MAXDATA )
 402              	 .loc 1 224 0
 403 01e8 FB8D     	 ldrh r3,[r7,#46]
 404 01ea 47F69572 	 movw r2,#32661
 405 01ee 9342     	 cmp r3,r2
 406 01f0 1FD8     	 bhi .L29
 407              	.LBB7:
 225:../SSC/Src/ecatfoe.c ****     {
 226:../SSC/Src/ecatfoe.c ****         /* we send DATA and wait for ACK */
 227:../SSC/Src/ecatfoe.c ****         UINT32 d = SWAPDWORD(u32PacketNo);
 408              	 .loc 1 227 0
 409 01f2 3A4B     	 ldr r3,.L49+8
 410 01f4 1B68     	 ldr r3,[r3]
 411 01f6 BB60     	 str r3,[r7,#8]
 228:../SSC/Src/ecatfoe.c **** 
 229:../SSC/Src/ecatfoe.c ****         /* store the OpCode in the mailbox buffer */
 230:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.OpCode           = SWAPWORD(ECAT_FOE_OPCODE_DATA);
 412              	 .loc 1 230 0
 413 01f8 7B68     	 ldr r3,[r7,#4]
 414 01fa 0022     	 movs r2,#0
 415 01fc 42F00302 	 orr r2,r2,#3
 416 0200 9A71     	 strb r2,[r3,#6]
 417 0202 0022     	 movs r2,#0
 418 0204 DA71     	 strb r2,[r3,#7]
 231:../SSC/Src/ecatfoe.c ****         /* store the packet number in the mailbox buffer */
 232:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.Cmd.PacketNo     = d;
 419              	 .loc 1 232 0
 420 0206 7B68     	 ldr r3,[r7,#4]
 421 0208 BA68     	 ldr r2,[r7,#8]
 422 020a 9A60     	 str r2,[r3,#8]
 233:../SSC/Src/ecatfoe.c ****      
 234:../SSC/Src/ecatfoe.c ****         /* store the size of the mailbox data in the mailbox buffer */
 235:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Length           = FOE_HEADER_SIZE + nextState;
 423              	 .loc 1 235 0
 424 020c FB8D     	 ldrh r3,[r7,#46]
 425 020e 0633     	 adds r3,r3,#6
 426 0210 9AB2     	 uxth r2,r3
 427 0212 7B68     	 ldr r3,[r7,#4]
 428 0214 1A80     	 strh r2,[r3]
 236:../SSC/Src/ecatfoe.c **** 
 237:../SSC/Src/ecatfoe.c ****         if ( nextState == u16SendMbxSize - FOE_HEADER_SIZE - MBX_HEADER_SIZE )
 429              	 .loc 1 237 0
 430 0216 FA8D     	 ldrh r2,[r7,#46]
 431 0218 324B     	 ldr r3,.L49+16
 432 021a 1B88     	 ldrh r3,[r3]
 433 021c 0C3B     	 subs r3,r3,#12
 434 021e 9A42     	 cmp r2,r3
 435 0220 03D1     	 bne .L30
 238:../SSC/Src/ecatfoe.c ****         {
 239:../SSC/Src/ecatfoe.c ****             /* packets still following, we wait for an ACK */
 240:../SSC/Src/ecatfoe.c ****             u16FileAccessState = FOE_WAIT_FOR_ACK;
 436              	 .loc 1 240 0
 437 0222 2C4B     	 ldr r3,.L49
 438 0224 0122     	 movs r2,#1
 439 0226 1A80     	 strh r2,[r3]
 440 0228 BCE0     	 b .L32
 441              	.L30:
 241:../SSC/Src/ecatfoe.c ****         }
 242:../SSC/Src/ecatfoe.c ****         else
 243:../SSC/Src/ecatfoe.c ****         {
 244:../SSC/Src/ecatfoe.c ****             /* it was the last Packet, we wait for the last ACK */
 245:../SSC/Src/ecatfoe.c ****             u16FileAccessState = FOE_WAIT_FOR_LAST_ACK;
 442              	 .loc 1 245 0
 443 022a 2A4B     	 ldr r3,.L49
 444 022c 0422     	 movs r2,#4
 445 022e 1A80     	 strh r2,[r3]
 446              	.LBE7:
 447 0230 B8E0     	 b .L32
 448              	.L29:
 246:../SSC/Src/ecatfoe.c ****         }
 247:../SSC/Src/ecatfoe.c ****     }
 248:../SSC/Src/ecatfoe.c ****     else if ( nextState <= FOE_MAXBUSY )
 449              	 .loc 1 248 0
 450 0232 FB8D     	 ldrh r3,[r7,#46]
 451 0234 47F6FA72 	 movw r2,#32762
 452 0238 9342     	 cmp r3,r2
 453 023a 1AD8     	 bhi .L33
 249:../SSC/Src/ecatfoe.c ****     {
 250:../SSC/Src/ecatfoe.c ****         /* we are still storing the received file data (in flash for example) and
 251:../SSC/Src/ecatfoe.c ****            send BUSY and wait for the DATA to be sent again */
 252:../SSC/Src/ecatfoe.c ****         /* store the OpCode in the mailbox buffer */
 253:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_BUSY);
 454              	 .loc 1 253 0
 455 023c 7B68     	 ldr r3,[r7,#4]
 456 023e 0022     	 movs r2,#0
 457 0240 42F00602 	 orr r2,r2,#6
 458 0244 9A71     	 strb r2,[r3,#6]
 459 0246 0022     	 movs r2,#0
 460 0248 DA71     	 strb r2,[r3,#7]
 254:../SSC/Src/ecatfoe.c ****         /* store the information how much progress we made until we can receive file data again */
 255:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_START(V5.11) FOE1*/
 256:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.Cmd.Busy.Done            = SWAPWORD(nextState-FOE_MAXBUSY_ZERO);
 461              	 .loc 1 256 0
 462 024a FB8D     	 ldrh r3,[r7,#46]
 463 024c A3F5FF43 	 sub r3,r3,#32640
 464 0250 163B     	 subs r3,r3,#22
 465 0252 9AB2     	 uxth r2,r3
 466 0254 7B68     	 ldr r3,[r7,#4]
 467 0256 1A81     	 strh r2,[r3,#8]
 257:../SSC/Src/ecatfoe.c **** /* ECATCHANGE_END(V5.11) FOE1*/
 258:../SSC/Src/ecatfoe.c **** 
 259:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.Cmd.Busy.Entire          = 0;
 468              	 .loc 1 259 0
 469 0258 7B68     	 ldr r3,[r7,#4]
 470 025a 0022     	 movs r2,#0
 471 025c 9A72     	 strb r2,[r3,#10]
 472 025e 0022     	 movs r2,#0
 473 0260 DA72     	 strb r2,[r3,#11]
 260:../SSC/Src/ecatfoe.c ****         /* store the size of the mailbox data in the mailbox buffer */
 261:../SSC/Src/ecatfoe.c **** 
 262:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
 474              	 .loc 1 262 0
 475 0262 7B68     	 ldr r3,[r7,#4]
 476 0264 0022     	 movs r2,#0
 477 0266 42F00602 	 orr r2,r2,#6
 478 026a 1A70     	 strb r2,[r3]
 479 026c 0022     	 movs r2,#0
 480 026e 5A70     	 strb r2,[r3,#1]
 481 0270 98E0     	 b .L32
 482              	.L33:
 263:../SSC/Src/ecatfoe.c ****     }
 264:../SSC/Src/ecatfoe.c ****     else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
 483              	 .loc 1 264 0
 484 0272 FB8D     	 ldrh r3,[r7,#46]
 485 0274 47F6FD72 	 movw r2,#32765
 486 0278 9342     	 cmp r3,r2
 487 027a 04D0     	 beq .L34
 488              	 .loc 1 264 0 is_stmt 0 discriminator 1
 489 027c FB8D     	 ldrh r3,[r7,#46]
 490 027e 47F6FC72 	 movw r2,#32764
 491 0282 9342     	 cmp r3,r2
 492 0284 30D1     	 bne .L35
 493              	.L34:
 494              	.LBB8:
 265:../SSC/Src/ecatfoe.c ****     {
 266:../SSC/Src/ecatfoe.c ****         /* we send ACK and wait for DATA
 267:../SSC/Src/ecatfoe.c ****             the next file data is expected with an incremented packet number, but
 268:../SSC/Src/ecatfoe.c ****             we have to acknowledge the old packet first */
 269:../SSC/Src/ecatfoe.c ****         UINT32 d = SWAPDWORD(u32PacketNo);
 495              	 .loc 1 269 0 is_stmt 1
 496 0286 154B     	 ldr r3,.L49+8
 497 0288 1B68     	 ldr r3,[r3]
 498 028a FB60     	 str r3,[r7,#12]
 270:../SSC/Src/ecatfoe.c ****         u32PacketNo++;
 499              	 .loc 1 270 0
 500 028c 134B     	 ldr r3,.L49+8
 501 028e 1B68     	 ldr r3,[r3]
 502 0290 0133     	 adds r3,r3,#1
 503 0292 124A     	 ldr r2,.L49+8
 504 0294 1360     	 str r3,[r2]
 271:../SSC/Src/ecatfoe.c ****         /* store the OpCode in the mailbox buffer */
 272:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_ACK);
 505              	 .loc 1 272 0
 506 0296 7B68     	 ldr r3,[r7,#4]
 507 0298 0022     	 movs r2,#0
 508 029a 42F00402 	 orr r2,r2,#4
 509 029e 9A71     	 strb r2,[r3,#6]
 510 02a0 0022     	 movs r2,#0
 511 02a2 DA71     	 strb r2,[r3,#7]
 273:../SSC/Src/ecatfoe.c ****         /* store the packet number in the mailbox buffer */
 274:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.Cmd.PacketNo             = d;
 512              	 .loc 1 274 0
 513 02a4 7B68     	 ldr r3,[r7,#4]
 514 02a6 FA68     	 ldr r2,[r7,#12]
 515 02a8 9A60     	 str r2,[r3,#8]
 275:../SSC/Src/ecatfoe.c ****         /* store the size of the mailbox data in the mailbox buffer */
 276:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 516              	 .loc 1 276 0
 517 02aa 7B68     	 ldr r3,[r7,#4]
 518 02ac 0022     	 movs r2,#0
 519 02ae 42F00602 	 orr r2,r2,#6
 520 02b2 1A70     	 strb r2,[r3]
 521 02b4 0022     	 movs r2,#0
 522 02b6 5A70     	 strb r2,[r3,#1]
 277:../SSC/Src/ecatfoe.c **** 
 278:../SSC/Src/ecatfoe.c ****         /* we wait for the next data part */
 279:../SSC/Src/ecatfoe.c ****         if ( nextState == FOE_ACK )
 523              	 .loc 1 279 0
 524 02b8 FB8D     	 ldrh r3,[r7,#46]
 525 02ba 47F6FD72 	 movw r2,#32765
 526 02be 9342     	 cmp r3,r2
 527 02c0 03D1     	 bne .L36
 280:../SSC/Src/ecatfoe.c ****             /* we wait for the next data part */
 281:../SSC/Src/ecatfoe.c ****             u16FileAccessState = FOE_WAIT_FOR_DATA;
 528              	 .loc 1 281 0
 529 02c2 044B     	 ldr r3,.L49
 530 02c4 0222     	 movs r2,#2
 531 02c6 1A80     	 strh r2,[r3]
 532              	.LBE8:
 265:../SSC/Src/ecatfoe.c ****         /* we send ACK and wait for DATA
 533              	 .loc 1 265 0
 534 02c8 6CE0     	 b .L32
 535              	.L36:
 536              	.LBB9:
 282:../SSC/Src/ecatfoe.c ****         else
 283:../SSC/Src/ecatfoe.c ****             /* the last data part was received */
 284:../SSC/Src/ecatfoe.c ****             u16FileAccessState = FOE_READY;
 537              	 .loc 1 284 0
 538 02ca 024B     	 ldr r3,.L49
 539 02cc 0022     	 movs r2,#0
 540 02ce 1A80     	 strh r2,[r3]
 541              	.LBE9:
 265:../SSC/Src/ecatfoe.c ****         /* we send ACK and wait for DATA
 542              	 .loc 1 265 0
 543 02d0 68E0     	 b .L32
 544              	.L50:
 545 02d2 00BF     	 .align 2
 546              	.L49:
 547 02d4 00000000 	 .word u16FileAccessState
 548 02d8 00000000 	 .word u32LastFileOffset
 549 02dc 00000000 	 .word u32PacketNo
 550 02e0 00000000 	 .word u32FileOffset
 551 02e4 00000000 	 .word u16SendMbxSize
 552              	.L35:
 285:../SSC/Src/ecatfoe.c ****     }
 286:../SSC/Src/ecatfoe.c ****     else if ( nextState < FOE_ERROR )
 553              	 .loc 1 286 0
 554 02e8 FB8D     	 ldrh r3,[r7,#46]
 555 02ea 1BB2     	 sxth r3,r3
 556 02ec 002B     	 cmp r3,#0
 557 02ee 07DB     	 blt .L38
 287:../SSC/Src/ecatfoe.c ****     {
 288:../SSC/Src/ecatfoe.c ****         /* the file transmission sequence is finished, we have to send nothing */
 289:../SSC/Src/ecatfoe.c ****         u16FileAccessState = FOE_READY;
 558              	 .loc 1 289 0
 559 02f0 494B     	 ldr r3,.L51
 560 02f2 0022     	 movs r2,#0
 561 02f4 1A80     	 strh r2,[r3]
 290:../SSC/Src/ecatfoe.c ****         APPL_FreeMailboxBuffer(pFoeInd);
 562              	 .loc 1 290 0
 563 02f6 7868     	 ldr r0,[r7,#4]
 564 02f8 FFF7FEFF 	 bl free
 291:../SSC/Src/ecatfoe.c ****         return 0;
 565              	 .loc 1 291 0
 566 02fc 0023     	 movs r3,#0
 567 02fe 86E0     	 b .L6
 568              	.L38:
 569              	.LBB10:
 292:../SSC/Src/ecatfoe.c ****     }
 293:../SSC/Src/ecatfoe.c ****     else
 294:../SSC/Src/ecatfoe.c ****     {
 295:../SSC/Src/ecatfoe.c ****         UINT32 d = SWAPDWORD(nextState);
 570              	 .loc 1 295 0
 571 0300 FB8D     	 ldrh r3,[r7,#46]
 572 0302 7B61     	 str r3,[r7,#20]
 296:../SSC/Src/ecatfoe.c ****         UINT8 b = 0;
 573              	 .loc 1 296 0
 574 0304 0023     	 movs r3,#0
 575 0306 87F82D30 	 strb r3,[r7,#45]
 297:../SSC/Src/ecatfoe.c **** 
 298:../SSC/Src/ecatfoe.c ****         /* store the OpCode in the mailbox buffer */
 299:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.OpCode                    = SWAPWORD(ECAT_FOE_OPCODE_ERR);
 576              	 .loc 1 299 0
 577 030a 7B68     	 ldr r3,[r7,#4]
 578 030c 0022     	 movs r2,#0
 579 030e 42F00502 	 orr r2,r2,#5
 580 0312 9A71     	 strb r2,[r3,#6]
 581 0314 0022     	 movs r2,#0
 582 0316 DA71     	 strb r2,[r3,#7]
 300:../SSC/Src/ecatfoe.c ****         /* store the ErrorCode in the mailbox buffer */
 301:../SSC/Src/ecatfoe.c ****         pFoeInd->FoeHeader.Cmd.ErrorCode            = d;
 583              	 .loc 1 301 0
 584 0318 7B68     	 ldr r3,[r7,#4]
 585 031a 7A69     	 ldr r2,[r7,#20]
 586 031c 9A60     	 str r2,[r3,#8]
 302:../SSC/Src/ecatfoe.c ****         /* store the size of the mailbox data in the mailbox buffer */
 303:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 587              	 .loc 1 303 0
 588 031e 7B68     	 ldr r3,[r7,#4]
 589 0320 0022     	 movs r2,#0
 590 0322 42F00602 	 orr r2,r2,#6
 591 0326 1A70     	 strb r2,[r3]
 592 0328 0022     	 movs r2,#0
 593 032a 5A70     	 strb r2,[r3,#1]
 304:../SSC/Src/ecatfoe.c **** 
 305:../SSC/Src/ecatfoe.c ****         /* Error Text is returned in pFoeInd->Data */
 306:../SSC/Src/ecatfoe.c ****         while (b < 32)
 594              	 .loc 1 306 0
 595 032c 23E0     	 b .L39
 596              	.L43:
 597              	.LBB11:
 307:../SSC/Src/ecatfoe.c ****         {
 308:../SSC/Src/ecatfoe.c ****             UINT16 data = ((UINT16 MBXMEM *) pFoeInd->Data)[(b >> 1)];
 598              	 .loc 1 308 0
 599 032e 97F82D30 	 ldrb r3,[r7,#45]
 600 0332 5B08     	 lsrs r3,r3,#1
 601 0334 DBB2     	 uxtb r3,r3
 602 0336 7A68     	 ldr r2,[r7,#4]
 603 0338 191D     	 adds r1,r3,#4
 604 033a 4B00     	 lsls r3,r1,#1
 605 033c 1344     	 add r3,r3,r2
 606 033e 1879     	 ldrb r0,[r3,#4]
 607 0340 4B00     	 lsls r3,r1,#1
 608 0342 1344     	 add r3,r3,r2
 609 0344 5B79     	 ldrb r3,[r3,#5]
 610 0346 1B02     	 lsls r3,r3,#8
 611 0348 0343     	 orrs r3,r3,r0
 612 034a 7B82     	 strh r3,[r7,#18]
 309:../SSC/Src/ecatfoe.c **** 
 310:../SSC/Src/ecatfoe.c ****             if ((data & 0x00FF) == 0)
 613              	 .loc 1 310 0
 614 034c 7B8A     	 ldrh r3,[r7,#18]
 615 034e DBB2     	 uxtb r3,r3
 616 0350 002B     	 cmp r3,#0
 617 0352 00D1     	 bne .L40
 311:../SSC/Src/ecatfoe.c ****                 break;
 618              	 .loc 1 311 0
 619 0354 13E0     	 b .L41
 620              	.L40:
 312:../SSC/Src/ecatfoe.c ****             b++;
 621              	 .loc 1 312 0
 622 0356 97F82D30 	 ldrb r3,[r7,#45]
 623 035a 0133     	 adds r3,r3,#1
 624 035c 87F82D30 	 strb r3,[r7,#45]
 313:../SSC/Src/ecatfoe.c ****         
 314:../SSC/Src/ecatfoe.c ****             if ((data & 0xFF00) == 0)
 625              	 .loc 1 314 0
 626 0360 7B8A     	 ldrh r3,[r7,#18]
 627 0362 03F47F43 	 and r3,r3,#65280
 628 0366 002B     	 cmp r3,#0
 629 0368 00D1     	 bne .L42
 315:../SSC/Src/ecatfoe.c ****                 break;
 630              	 .loc 1 315 0
 631 036a 08E0     	 b .L41
 632              	.L42:
 316:../SSC/Src/ecatfoe.c ****             b++;
 633              	 .loc 1 316 0
 634 036c 97F82D30 	 ldrb r3,[r7,#45]
 635 0370 0133     	 adds r3,r3,#1
 636 0372 87F82D30 	 strb r3,[r7,#45]
 637              	.L39:
 638              	.LBE11:
 306:../SSC/Src/ecatfoe.c ****         {
 639              	 .loc 1 306 0
 640 0376 97F82D30 	 ldrb r3,[r7,#45]
 641 037a 1F2B     	 cmp r3,#31
 642 037c D7D9     	 bls .L43
 643              	.L41:
 317:../SSC/Src/ecatfoe.c ****         }
 318:../SSC/Src/ecatfoe.c ****         if ( b < 32 )
 644              	 .loc 1 318 0
 645 037e 97F82D30 	 ldrb r3,[r7,#45]
 646 0382 1F2B     	 cmp r3,#31
 647 0384 0BD8     	 bhi .L44
 319:../SSC/Src/ecatfoe.c ****         {
 320:../SSC/Src/ecatfoe.c ****             pFoeInd->MbxHeader.Length    += b+1;
 648              	 .loc 1 320 0
 649 0386 7B68     	 ldr r3,[r7,#4]
 650 0388 1B88     	 ldrh r3,[r3]
 651 038a 9AB2     	 uxth r2,r3
 652 038c 97F82D30 	 ldrb r3,[r7,#45]
 653 0390 9BB2     	 uxth r3,r3
 654 0392 1344     	 add r3,r3,r2
 655 0394 9BB2     	 uxth r3,r3
 656 0396 0133     	 adds r3,r3,#1
 657 0398 9AB2     	 uxth r2,r3
 658 039a 7B68     	 ldr r3,[r7,#4]
 659 039c 1A80     	 strh r2,[r3]
 660              	.L44:
 321:../SSC/Src/ecatfoe.c ****         }
 322:../SSC/Src/ecatfoe.c **** 
 323:../SSC/Src/ecatfoe.c ****         /* the file transmission sequence is finished */
 324:../SSC/Src/ecatfoe.c ****         u16FileAccessState = FOE_READY;
 661              	 .loc 1 324 0
 662 039e 1E4B     	 ldr r3,.L51
 663 03a0 0022     	 movs r2,#0
 664 03a2 1A80     	 strh r2,[r3]
 665              	.L32:
 666              	.LBE10:
 325:../SSC/Src/ecatfoe.c ****     }
 326:../SSC/Src/ecatfoe.c **** 
 327:../SSC/Src/ecatfoe.c ****     if ( bBootMode )
 667              	 .loc 1 327 0
 668 03a4 1D4B     	 ldr r3,.L51+4
 669 03a6 1B78     	 ldrb r3,[r3]
 670 03a8 002B     	 cmp r3,#0
 671 03aa 25D0     	 beq .L45
 328:../SSC/Src/ecatfoe.c ****     {
 329:../SSC/Src/ecatfoe.c ****         /* in BOOT mode the mailbox buffer is not sent via the mailbox functions
 330:../SSC/Src/ecatfoe.c ****            because only FoE is allowed in BOOT mode, so we have to include the
 331:../SSC/Src/ecatfoe.c ****             mailbox data link layer counter */
 332:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 672              	 .loc 1 332 0
 673 03ac 7B68     	 ldr r3,[r7,#4]
 674 03ae 5B79     	 ldrb r3,[r3,#5]
 675 03b0 03F00F03 	 and r3,r3,#15
 676 03b4 DAB2     	 uxtb r2,r3
 677 03b6 7B68     	 ldr r3,[r7,#4]
 678 03b8 5A71     	 strb r2,[r3,#5]
 333:../SSC/Src/ecatfoe.c ****         if ( (u8MbxReadCounter & 0x07) == 0 )
 679              	 .loc 1 333 0
 680 03ba 194B     	 ldr r3,.L51+8
 681 03bc 1B78     	 ldrb r3,[r3]
 682 03be 03F00703 	 and r3,r3,#7
 683 03c2 002B     	 cmp r3,#0
 684 03c4 02D1     	 bne .L46
 334:../SSC/Src/ecatfoe.c ****             /* counter 0 is not allowed if mailbox data link layer is supported */
 335:../SSC/Src/ecatfoe.c ****             u8MbxReadCounter = 1;
 685              	 .loc 1 335 0
 686 03c6 164B     	 ldr r3,.L51+8
 687 03c8 0122     	 movs r2,#1
 688 03ca 1A70     	 strb r2,[r3]
 689              	.L46:
 336:../SSC/Src/ecatfoe.c ****         /* store the counter in the mailbox header */
 337:../SSC/Src/ecatfoe.c ****         pFoeInd->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 690              	 .loc 1 337 0
 691 03cc 7B68     	 ldr r3,[r7,#4]
 692 03ce 5B79     	 ldrb r3,[r3,#5]
 693 03d0 DAB2     	 uxtb r2,r3
 694 03d2 134B     	 ldr r3,.L51+8
 695 03d4 1B78     	 ldrb r3,[r3]
 696 03d6 1B01     	 lsls r3,r3,#4
 697 03d8 DBB2     	 uxtb r3,r3
 698 03da 1343     	 orrs r3,r3,r2
 699 03dc DBB2     	 uxtb r3,r3
 700 03de DAB2     	 uxtb r2,r3
 701 03e0 7B68     	 ldr r3,[r7,#4]
 702 03e2 5A71     	 strb r2,[r3,#5]
 338:../SSC/Src/ecatfoe.c ****         /* increment the counter for the next service */
 339:../SSC/Src/ecatfoe.c ****           u8MbxReadCounter++;
 703              	 .loc 1 339 0
 704 03e4 0E4B     	 ldr r3,.L51+8
 705 03e6 1B78     	 ldrb r3,[r3]
 706 03e8 0133     	 adds r3,r3,#1
 707 03ea DAB2     	 uxtb r2,r3
 708 03ec 0C4B     	 ldr r3,.L51+8
 709 03ee 1A70     	 strb r2,[r3]
 340:../SSC/Src/ecatfoe.c ****         /* call the function to send the mailbox service directly,
 341:../SSC/Src/ecatfoe.c ****            in BOOT mode we can be sure that the send mailbox is empty
 342:../SSC/Src/ecatfoe.c ****            because no parallel services are allowed */
 343:../SSC/Src/ecatfoe.c ****         MBX_CopyToSendMailbox((TMBX MBXMEM *) pFoeInd);
 710              	 .loc 1 343 0
 711 03f0 7868     	 ldr r0,[r7,#4]
 712 03f2 FFF7FEFF 	 bl MBX_CopyToSendMailbox
 713 03f6 09E0     	 b .L47
 714              	.L45:
 344:../SSC/Src/ecatfoe.c ****     }
 345:../SSC/Src/ecatfoe.c ****     else
 346:../SSC/Src/ecatfoe.c ****     {
 347:../SSC/Src/ecatfoe.c ****         if ( MBX_MailboxSendReq((TMBX MBXMEM *) pFoeInd, FOE_SERVICE) != 0 )
 715              	 .loc 1 347 0
 716 03f8 7868     	 ldr r0,[r7,#4]
 717 03fa 4021     	 movs r1,#64
 718 03fc FFF7FEFF 	 bl MBX_MailboxSendReq
 719 0400 0346     	 mov r3,r0
 720 0402 002B     	 cmp r3,#0
 721 0404 02D0     	 beq .L47
 348:../SSC/Src/ecatfoe.c ****         {
 349:../SSC/Src/ecatfoe.c ****             /* if the mailbox service could not be sent (or stored), the response will be
 350:../SSC/Src/ecatfoe.c ****                stored in the variable pFoeSendStored and will be sent automatically
 351:../SSC/Src/ecatfoe.c ****                 from the mailbox handler (FOE_ContinueInd) when the send mailbox will be read
 352:../SSC/Src/ecatfoe.c ****                 the next time from the master */
 353:../SSC/Src/ecatfoe.c ****             pFoeSendStored = (TMBX MBXMEM *) pFoeInd;
 722              	 .loc 1 353 0
 723 0406 074A     	 ldr r2,.L51+12
 724 0408 7B68     	 ldr r3,[r7,#4]
 725 040a 1360     	 str r3,[r2]
 726              	.L47:
 354:../SSC/Src/ecatfoe.c ****         }
 355:../SSC/Src/ecatfoe.c ****     }
 356:../SSC/Src/ecatfoe.c **** 
 357:../SSC/Src/ecatfoe.c ****     return 0;
 727              	 .loc 1 357 0
 728 040c 0023     	 movs r3,#0
 729              	.L6:
 358:../SSC/Src/ecatfoe.c **** }
 730              	 .loc 1 358 0
 731 040e 1846     	 mov r0,r3
 732 0410 3037     	 adds r7,r7,#48
 733              	.LCFI7:
 734              	 .cfi_def_cfa_offset 8
 735 0412 BD46     	 mov sp,r7
 736              	.LCFI8:
 737              	 .cfi_def_cfa_register 13
 738              	 
 739 0414 80BD     	 pop {r7,pc}
 740              	.L52:
 741 0416 00BF     	 .align 2
 742              	.L51:
 743 0418 00000000 	 .word u16FileAccessState
 744 041c 00000000 	 .word bBootMode
 745 0420 00000000 	 .word u8MbxReadCounter
 746 0424 00000000 	 .word pFoeSendStored
 747              	 .cfi_endproc
 748              	.LFE173:
 750              	 .section .text.FOE_ContinueInd,"ax",%progbits
 751              	 .align 2
 752              	 .global FOE_ContinueInd
 753              	 .thumb
 754              	 .thumb_func
 756              	FOE_ContinueInd:
 757              	.LFB174:
 359:../SSC/Src/ecatfoe.c **** 
 360:../SSC/Src/ecatfoe.c **** 
 361:../SSC/Src/ecatfoe.c **** /////////////////////////////////////////////////////////////////////////////////////////
 362:../SSC/Src/ecatfoe.c **** /**
 363:../SSC/Src/ecatfoe.c ****  \param     pMbx      Pointer to the free mailbox buffer
 364:../SSC/Src/ecatfoe.c **** 
 365:../SSC/Src/ecatfoe.c ****  \brief    This function is called when the next mailbox fragment can be sent.
 366:../SSC/Src/ecatfoe.c **** *////////////////////////////////////////////////////////////////////////////////////////
 367:../SSC/Src/ecatfoe.c **** 
 368:../SSC/Src/ecatfoe.c **** void FOE_ContinueInd(TMBX MBXMEM * pMbx)
 369:../SSC/Src/ecatfoe.c **** {
 758              	 .loc 1 369 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762 0000 80B5     	 push {r7,lr}
 763              	.LCFI9:
 764              	 .cfi_def_cfa_offset 8
 765              	 .cfi_offset 7,-8
 766              	 .cfi_offset 14,-4
 767 0002 82B0     	 sub sp,sp,#8
 768              	.LCFI10:
 769              	 .cfi_def_cfa_offset 16
 770 0004 00AF     	 add r7,sp,#0
 771              	.LCFI11:
 772              	 .cfi_def_cfa_register 7
 773 0006 7860     	 str r0,[r7,#4]
 370:../SSC/Src/ecatfoe.c ****     if ( pFoeSendStored )
 774              	 .loc 1 370 0
 775 0008 074B     	 ldr r3,.L55
 776 000a 1B68     	 ldr r3,[r3]
 777 000c 002B     	 cmp r3,#0
 778 000e 08D0     	 beq .L53
 371:../SSC/Src/ecatfoe.c ****     {
 372:../SSC/Src/ecatfoe.c ****         /* send the stored FoE service which could not be sent before */
 373:../SSC/Src/ecatfoe.c ****         MBX_MailboxSendReq(pFoeSendStored, 0);
 779              	 .loc 1 373 0
 780 0010 054B     	 ldr r3,.L55
 781 0012 1B68     	 ldr r3,[r3]
 782 0014 1846     	 mov r0,r3
 783 0016 0021     	 movs r1,#0
 784 0018 FFF7FEFF 	 bl MBX_MailboxSendReq
 374:../SSC/Src/ecatfoe.c ****         pFoeSendStored = 0;
 785              	 .loc 1 374 0
 786 001c 024B     	 ldr r3,.L55
 787 001e 0022     	 movs r2,#0
 788 0020 1A60     	 str r2,[r3]
 789              	.L53:
 375:../SSC/Src/ecatfoe.c ****     }
 376:../SSC/Src/ecatfoe.c **** }
 790              	 .loc 1 376 0
 791 0022 0837     	 adds r7,r7,#8
 792              	.LCFI12:
 793              	 .cfi_def_cfa_offset 8
 794 0024 BD46     	 mov sp,r7
 795              	.LCFI13:
 796              	 .cfi_def_cfa_register 13
 797              	 
 798 0026 80BD     	 pop {r7,pc}
 799              	.L56:
 800              	 .align 2
 801              	.L55:
 802 0028 00000000 	 .word pFoeSendStored
 803              	 .cfi_endproc
 804              	.LFE174:
 806              	 .text
 807              	.Letext0:
 808              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 809              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 810              	 .file 4 "../SSC/Src/mailbox.h"
 811              	 .file 5 "../SSC/Src/ecatfoe.h"
 812              	 .file 6 "C:/Workspaces/SOES-FW-UPDATE/ETHCAT_FWUPDATE_SSC_APPLICATION_XMC48/Libraries/CMSIS/Include/core_cm4.h"
 813              	 .file 7 "../SSC/Src/ecatslv.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ecatfoe.c
                            *COM*:00000004 u32PacketNo
                            *COM*:00000004 u32FileOffset
                            *COM*:00000004 u32LastFileOffset
                            *COM*:00000002 u16FileAccessState
                            *COM*:00000004 pFoeSendStored
    {standard input}:25     .text.FOE_Init:00000000 $t
    {standard input}:30     .text.FOE_Init:00000000 FOE_Init
    {standard input}:70     .text.FOE_Init:00000020 $d
    {standard input}:77     .text.FOE_ServiceInd:00000000 $t
    {standard input}:82     .text.FOE_ServiceInd:00000000 FOE_ServiceInd
    {standard input}:130    .text.FOE_ServiceInd:0000003c $d
    {standard input}:136    .text.FOE_ServiceInd:00000054 $t
    {standard input}:547    .text.FOE_ServiceInd:000002d4 $d
    {standard input}:554    .text.FOE_ServiceInd:000002e8 $t
    {standard input}:743    .text.FOE_ServiceInd:00000418 $d
    {standard input}:751    .text.FOE_ContinueInd:00000000 $t
    {standard input}:756    .text.FOE_ContinueInd:00000000 FOE_ContinueInd
    {standard input}:802    .text.FOE_ContinueInd:00000028 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
FOE_Read
FOE_Write
FOE_Data
FOE_Ack
FOE_Error
FOE_Busy
u16SendMbxSize
free
MBX_CopyToSendMailbox
MBX_MailboxSendReq
bBootMode
u8MbxReadCounter
