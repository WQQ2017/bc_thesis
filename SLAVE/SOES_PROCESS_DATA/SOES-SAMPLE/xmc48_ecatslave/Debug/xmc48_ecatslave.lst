
xmc48_ecatslave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000560c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000174  1ffe8800  0c00560c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000223c  1ffe8974  0c005780  00010974  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000aa8  00000000  00000000  00010978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd3f  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002019  00000000  00000000  0001f15f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ec8  00000000  00000000  00021178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c70  00000000  00000000  00025040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000601c  00000000  00000000  00027cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005840  00000000  00000000  0002dccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  0003350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000482  00000000  00000000  00033e7c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00560c 	.word	0x0c00560c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000174 	.word	0x00000174
 8000254:	0c00560c 	.word	0x0c00560c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8974 	.word	0x1ffe8974
 8000264:	0000223c 	.word	0x0000223c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080002c5 	.word	0x080002c5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004cfd 	.word	0x08004cfd
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001665 	.word	0x08001665

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e003      	b.n	80002b2 <delay+0x16>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80002aa:	bf00      	nop
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3f7      	bcc.n	80002aa <delay+0xe>
  {
    __NOP();
  }
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002c4:	b598      	push	{r3, r4, r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x1c>)
 80002ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ce:	4614      	mov	r4, r2
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002d6:	f000 f805 	bl	80002e4 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002da:	f000 f83b 	bl	8000354 <SystemCoreClockSetup>
}
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	2003ffc4 	.word	0x2003ffc4

080002e4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ea:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemCoreSetup+0x64>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <SystemCoreSetup+0x68>)
 80002f0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002f2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
  __DSB();
  __enable_irq();

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <SystemCoreSetup+0x64>)
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemCoreSetup+0x64>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemCoreSetup+0x6c>)
 8000316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800031a:	3314      	adds	r3, #20
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <SystemCoreSetup+0x6c>)
 8000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000336:	3314      	adds	r3, #20
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	08000000 	.word	0x08000000
 8000350:	58001000 	.word	0x58001000

08000354 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000358:	4ba4      	ldr	r3, [pc, #656]	; (80005ec <SystemCoreClockSetup+0x298>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10c      	bne.n	800037e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000364:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	bf00      	nop
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <SystemCoreClockSetup+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000386:	2b00      	cmp	r3, #0
 8000388:	d009      	beq.n	800039e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800038a:	4a99      	ldr	r2, [pc, #612]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038c:	4b98      	ldr	r3, [pc, #608]	; (80005f0 <SystemCoreClockSetup+0x29c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000394:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000396:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800039a:	f7ff ff7f 	bl	800029c <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800039e:	4a95      	ldr	r2, [pc, #596]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a0:	4b94      	ldr	r3, [pc, #592]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ae:	f7ff ff75 	bl	800029c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003b2:	4a90      	ldr	r2, [pc, #576]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b4:	4b8f      	ldr	r3, [pc, #572]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d029      	beq.n	8000422 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003ce:	4a8a      	ldr	r2, [pc, #552]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d0:	4b89      	ldr	r3, [pc, #548]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003de:	f000 f993 	bl	8000708 <OSCHP_GetFrequency>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b85      	ldr	r3, [pc, #532]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	0d1b      	lsrs	r3, r3, #20
 80003ec:	3b01      	subs	r3, #1
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	4981      	ldr	r1, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f2:	4a81      	ldr	r2, [pc, #516]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80003fa:	4a7e      	ldr	r2, [pc, #504]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fc:	4b7d      	ldr	r3, [pc, #500]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000406:	4a7b      	ldr	r2, [pc, #492]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000408:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000410:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000412:	bf00      	nop
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800041c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000420:	d1f8      	bne.n	8000414 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a74      	ldr	r2, [pc, #464]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000424:	4b73      	ldr	r3, [pc, #460]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800042e:	4a71      	ldr	r2, [pc, #452]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800043c:	4a70      	ldr	r2, [pc, #448]	; (8000600 <SystemCoreClockSetup+0x2ac>)
 800043e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000440:	4a6c      	ldr	r2, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000442:	4b6c      	ldr	r3, [pc, #432]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800044c:	4a69      	ldr	r2, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800044e:	4b69      	ldr	r3, [pc, #420]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045a:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000462:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000464:	bf00      	nop
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000472:	4a60      	ldr	r2, [pc, #384]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800047e:	bf00      	nop
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1f9      	bne.n	8000480 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 800048c:	4b5d      	ldr	r3, [pc, #372]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800048e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000492:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 8000494:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 800049a:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80004ac:	4b55      	ldr	r3, [pc, #340]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004b4:	4a54      	ldr	r2, [pc, #336]	; (8000608 <SystemCoreClockSetup+0x2b4>)
 80004b6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80004c0:	4a52      	ldr	r2, [pc, #328]	; (800060c <SystemCoreClockSetup+0x2b8>)
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c4:	4a4b      	ldr	r2, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ce:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <SystemCoreClockSetup+0x2bc>)
 80004d4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80004d6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80004da:	f7ff fedf 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004e0:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <SystemCoreClockSetup+0x2c0>)
 80004e2:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 80004e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80004e8:	f7ff fed8 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <SystemCoreClockSetup+0x2c4>)
 80004f0:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 80004f2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80004f6:	f7ff fed1 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemCoreClockSetup+0x2c8>)
 80004fe:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8000500:	f241 7070 	movw	r0, #6000	; 0x1770
 8000504:	f7ff feca 	bl	800029c <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <SystemCoreClockSetup+0x2cc>)
 800050c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800050e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8000512:	f7ff fec3 	bl	800029c <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d031      	beq.n	8000596 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <SystemCoreClockSetup+0x2d0>)
 8000538:	4013      	ands	r3, r2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000548:	f023 0302 	bic.w	r3, r3, #2
 800054c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800055c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800055e:	f000 f8d3 	bl	8000708 <OSCHP_GetFrequency>
 8000562:	4602      	mov	r2, r0
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemCoreClockSetup+0x2a8>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	0d1b      	lsrs	r3, r3, #20
 800056c:	3b01      	subs	r3, #1
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4921      	ldr	r1, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemCoreClockSetup+0x2a4>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000584:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000586:	bf00      	nop
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000590:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000594:	d1f8      	bne.n	8000588 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <SystemCoreClockSetup+0x2d4>)
 80005b2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockSetup+0x2a0>)
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <SystemCoreClockSetup+0x2b0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01f      	b.n	800062c <SystemCoreClockSetup+0x2d8>
 80005ec:	50004200 	.word	0x50004200
 80005f0:	50004400 	.word	0x50004400
 80005f4:	50004710 	.word	0x50004710
 80005f8:	50004700 	.word	0x50004700
 80005fc:	6b5fca6b 	.word	0x6b5fca6b
 8000600:	010b2f00 	.word	0x010b2f00
 8000604:	50004600 	.word	0x50004600
 8000608:	00010005 	.word	0x00010005
 800060c:	01200003 	.word	0x01200003
 8000610:	01052f00 	.word	0x01052f00
 8000614:	01032f00 	.word	0x01032f00
 8000618:	01022f00 	.word	0x01022f00
 800061c:	01012f00 	.word	0x01012f00
 8000620:	01002f00 	.word	0x01002f00
 8000624:	00010002 	.word	0x00010002
 8000628:	02006300 	.word	0x02006300
 800062c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800062e:	f000 f801 	bl	8000634 <SystemCoreClockUpdate>
}
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d03e      	beq.n	80006c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000658:	f000 f856 	bl	8000708 <OSCHP_GetFrequency>
 800065c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d020      	beq.n	80006ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemCoreClockUpdate+0xc8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SystemCoreClockUpdate+0xcc>)
 80006c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <SystemCoreClockUpdate+0xc4>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	3301      	adds	r3, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <SystemCoreClockUpdate+0xd0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600
 80006fc:	50004710 	.word	0x50004710
 8000700:	016e3600 	.word	0x016e3600
 8000704:	2003ffc0 	.word	0x2003ffc0

08000708 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <OSCHP_GetFrequency+0x10>)
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	00b71b00 	.word	0x00b71b00

0800071c <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8000724:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2250      	movs	r2, #80	; 0x50
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	0c005554 	.word	0x0c005554

0800073c <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <XMC_FLASH_lLoadPageCommand+0x28>)
 8000748:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <XMC_FLASH_lLoadPageCommand+0x2c>)
 8000752:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	0c0055f0 	.word	0x0c0055f0
 8000768:	0c0055f4 	.word	0x0c0055f4

0800076c <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <XMC_FLASH_lWritePageCommand+0x3c>)
 8000776:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	22aa      	movs	r2, #170	; 0xaa
 800077c:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <XMC_FLASH_lWritePageCommand+0x40>)
 8000780:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <XMC_FLASH_lWritePageCommand+0x3c>)
 800078a:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	22a0      	movs	r2, #160	; 0xa0
 8000790:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	22aa      	movs	r2, #170	; 0xaa
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	0c005554 	.word	0x0c005554
 80007ac:	0c00aaa8 	.word	0x0c00aaa8

080007b0 <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80007ba:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	22aa      	movs	r2, #170	; 0xaa
 80007c0:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80007c4:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2255      	movs	r2, #85	; 0x55
 80007ca:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80007ce:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80007d8:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	22aa      	movs	r2, #170	; 0xaa
 80007de:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80007e2:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2255      	movs	r2, #85	; 0x55
 80007e8:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2230      	movs	r2, #48	; 0x30
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	0c005554 	.word	0x0c005554
 8000804:	0c00aaa8 	.word	0x0c00aaa8

08000808 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <XMC_FLASH_lClearStatusCommand+0x1c>)
 8000810:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	22f5      	movs	r2, #245	; 0xf5
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	0c005554 	.word	0x0c005554

08000828 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 8000832:	f7ff ffe9 	bl	8000808 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 8000836:	f7ff ff71 	bl	800071c <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e011      	b.n	8000864 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	4413      	add	r3, r2
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4608      	mov	r0, r1
 8000858:	4619      	mov	r1, r3
 800085a:	f7ff ff6f 	bl	800073c <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3302      	adds	r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b3f      	cmp	r3, #63	; 0x3f
 8000868:	d9ea      	bls.n	8000840 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff7e 	bl	800076c <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000870:	bf00      	nop
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_FLASH_ProgramPage+0x64>)
 8000874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000878:	3310      	adds	r3, #16
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f6      	bne.n	8000872 <XMC_FLASH_ProgramPage+0x4a>
}
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	58001000 	.word	0x58001000

08000890 <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8000898:	f7ff ffb6 	bl	8000808 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff87 	bl	80007b0 <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80008a2:	bf00      	nop
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <XMC_FLASH_EraseSector+0x2c>)
 80008a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008aa:	3310      	adds	r3, #16
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f6      	bne.n	80008a4 <XMC_FLASH_EraseSector+0x14>
}
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58001000 	.word	0x58001000

080008c0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3204      	adds	r2, #4
 80008e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4619      	mov	r1, r3
 80008f0:	23f8      	movs	r3, #248	; 0xf8
 80008f2:	408b      	lsls	r3, r1
 80008f4:	43db      	mvns	r3, r3
 80008f6:	ea02 0103 	and.w	r1, r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	1d02      	adds	r2, r0, #4
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4619      	mov	r1, r3
 800090c:	2303      	movs	r3, #3
 800090e:	408b      	lsls	r3, r1
 8000910:	43db      	mvns	r3, r3
 8000912:	401a      	ands	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <XMC_GPIO_Init+0x138>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d003      	beq.n	8000928 <XMC_GPIO_Init+0x68>
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <XMC_GPIO_Init+0x13c>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d10a      	bne.n	800093e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	401a      	ands	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	661a      	str	r2, [r3, #96]	; 0x60
 800093c:	e03c      	b.n	80009b8 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	409a      	lsls	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3210      	adds	r2, #16
 800095e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4619      	mov	r1, r3
 800096c:	2307      	movs	r3, #7
 800096e:	408b      	lsls	r3, r1
 8000970:	43db      	mvns	r3, r3
 8000972:	ea02 0103 	and.w	r1, r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f100 0210 	add.w	r2, r0, #16
 800097c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3210      	adds	r2, #16
 8000994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	4619      	mov	r1, r3
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	ea42 0103 	orr.w	r1, r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f100 0210 	add.w	r2, r0, #16
 80009b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	7afb      	ldrb	r3, [r7, #11]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3204      	adds	r2, #4
 80009cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	ea42 0103 	orr.w	r1, r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1d02      	adds	r2, r0, #4
 80009ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	48028e00 	.word	0x48028e00
 80009fc:	48028f00 	.word	0x48028f00

08000a00 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0f1b      	lsrs	r3, r3, #28
 8000a0c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a14:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 8000a24:	4413      	add	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	50004410 	.word	0x50004410

08000a38 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0f1b      	lsrs	r3, r3, #28
 8000a44:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a4c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000a5c:	4413      	add	r3, r2
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	50004414 	.word	0x50004414

08000a70 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0f1b      	lsrs	r3, r3, #28
 8000a7c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a84:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000a94:	4413      	add	r3, r2
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	5000440c 	.word	0x5000440c

08000ab8 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0f1b      	lsrs	r3, r3, #28
 8000ac4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000acc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <XMC_SCU_CLOCK_GatePeripheralClock+0x34>)
 8000adc:	4413      	add	r3, r2
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	50004644 	.word	0x50004644

08000af0 <XMC_SCU_CLOCK_UngatePeripheralClock>:

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0f1b      	lsrs	r3, r3, #28
 8000afc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000b04:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000b14:	4413      	add	r3, r2
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	50004648 	.word	0x50004648

08000b28 <XMC_ECAT_Enable>:
  ECAT0->MII_PDI_ACS_STATE |= 0x01;
}

/* EtherCAT module clock ungating and deassert reset API (Enables ECAT) */
void XMC_ECAT_Enable(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <XMC_ECAT_Enable+0x20>)
 8000b2e:	f7ff ffdf 	bl	8000af0 <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <XMC_ECAT_Enable+0x20>)
 8000b34:	f7ff ff80 	bl	8000a38 <XMC_SCU_RESET_DeassertPeripheralReset>

  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == true){}
 8000b38:	bf00      	nop
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <XMC_ECAT_Enable+0x20>)
 8000b3c:	f7ff ff98 	bl	8000a70 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f9      	bne.n	8000b3a <XMC_ECAT_Enable+0x12>
}
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000400 	.word	0x20000400

08000b4c <XMC_ECAT_Disable>:

/* EtherCAT module clock gating and assert reset API (Disables ECAT)*/
void XMC_ECAT_Disable(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <XMC_ECAT_Disable+0x28>)
 8000b52:	f7ff ff55 	bl	8000a00 <XMC_SCU_RESET_AssertPeripheralReset>
  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == false){}
 8000b56:	bf00      	nop
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <XMC_ECAT_Disable+0x28>)
 8000b5a:	f7ff ff89 	bl	8000a70 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f083 0301 	eor.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f6      	bne.n	8000b58 <XMC_ECAT_Disable+0xc>

  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 8000b6a:	4802      	ldr	r0, [pc, #8]	; (8000b74 <XMC_ECAT_Disable+0x28>)
 8000b6c:	f7ff ffa4 	bl	8000ab8 <XMC_SCU_CLOCK_GatePeripheralClock>
}
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000400 	.word	0x20000400

08000b78 <XMC_ECAT_Init>:

/* EtherCAT initialization function */
void XMC_ECAT_Init(XMC_ECAT_CONFIG_t *const config)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  XMC_ECAT_Enable();
 8000b80:	f7ff ffd2 	bl	8000b28 <XMC_ECAT_Enable>

  /* The process memory is not accessible until the ESC Configuration Area is loaded successfully. */
  
  /* words 0x0-0x3 */
  ECAT0->EEP_DATA[0U] = config->dword[0U];
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[1U];
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000b9c:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  /* words 0x4-0x7 */
  ECAT0->EEP_DATA[0U] = config->dword[2U];
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[3U];
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000bc4:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  while (ECAT0->EEP_CONT_STAT & ECAT_EEP_CONT_STAT_L_STAT_Msk)
 8000bd4:	bf00      	nop
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <XMC_ECAT_Init+0x74>)
 8000bd8:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f7      	bne.n	8000bd6 <XMC_ECAT_Init+0x5e>
  {
    /* Wait until the EEPROM_Loaded signal is active */
  }

}
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	54010000 	.word	0x54010000

08000bf0 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6852      	ldr	r2, [r2, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6892      	ldr	r2, [r2, #8]
 8000c0a:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <XMC_FCE_Enable+0x20>)
 8000c22:	f7ff ff65 	bl	8000af0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <XMC_FCE_Enable+0x20>)
 8000c28:	f7ff ff06 	bl	8000a38 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <XMC_FCE_Enable+0x24>)
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <XMC_FCE_Enable+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000040 	.word	0x20000040
 8000c40:	50020000 	.word	0x50020000

08000c44 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <XMC_FCE_CalculateCRC32+0x26>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <XMC_FCE_CalculateCRC32+0x2c>
  {
    status = XMC_FCE_STATUS_ERROR;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	75fb      	strb	r3, [r7, #23]
 8000c6e:	e013      	b.n	8000c98 <XMC_FCE_CalculateCRC32+0x54>
  }
  else
  {
    while (0UL != length)
 8000c70:	e00a      	b.n	8000c88 <XMC_FCE_CalculateCRC32+0x44>
    {
      engine->kernel_ptr->IR = *data;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	601a      	str	r2, [r3, #0]
      data++;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3b04      	subs	r3, #4
 8000c86:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f1      	bne.n	8000c72 <XMC_FCE_CalculateCRC32+0x2e>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	699a      	ldr	r2, [r3, #24]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	371c      	adds	r7, #28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	401a      	ands	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000cd2:	78bb      	ldrb	r3, [r7, #2]
 8000cd4:	78f9      	ldrb	r1, [r7, #3]
 8000cd6:	0049      	lsls	r1, r1, #1
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <XMC_ECAT_SetPortControl>:
 * \par
 * The function sets the port control by writing the configuration into the ECAT CON register.
 *
 */
__STATIC_INLINE void XMC_ECAT_SetPortControl(const XMC_ECAT_PORT_CTRL_t port_ctrl)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ECAT0_CON->CON = (uint32_t)port_ctrl.common.raw;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <XMC_ECAT_SetPortControl+0x28>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  ECAT0_CON->CONP0 = (uint32_t)port_ctrl.port0.raw;
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <XMC_ECAT_SetPortControl+0x28>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	6053      	str	r3, [r2, #4]
  ECAT0_CON->CONP1 = (uint32_t)port_ctrl.port1.raw;
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <XMC_ECAT_SetPortControl+0x28>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6093      	str	r3, [r2, #8]
}
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	500041b0 	.word	0x500041b0

08000d24 <init_input>:
  .output_strength = 0
};


static void init_input(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
  XMC_GPIO_Init(port, pin, &gpio_config_input);
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <init_input+0x20>)
 8000d38:	f7ff fdc2 	bl	80008c0 <XMC_GPIO_Init>
}
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08004fc0 	.word	0x08004fc0

08000d48 <init_output>:

static void init_output(XMC_GPIO_PORT_t *const port, const uint8_t pin,
                                      uint32_t function, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	72fb      	strb	r3, [r7, #11]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	72bb      	strb	r3, [r7, #10]
  XMC_GPIO_CONFIG_t config;

  config.mode = (XMC_GPIO_MODE_t)((uint32_t)XMC_GPIO_MODE_OUTPUT_PUSH_PULL | function);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	753b      	strb	r3, [r7, #20]
  config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	61bb      	str	r3, [r7, #24]
  config.output_strength = strength;
 8000d6e:	7abb      	ldrb	r3, [r7, #10]
 8000d70:	773b      	strb	r3, [r7, #28]

  XMC_GPIO_Init(port, pin, &config);
 8000d72:	7afa      	ldrb	r2, [r7, #11]
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f7ff fd9f 	bl	80008c0 <XMC_GPIO_Init>
}
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	80fb      	strh	r3, [r7, #6]
 8000d94:	4613      	mov	r3, r2
 8000d96:	80bb      	strh	r3, [r7, #4]
   ESCvar.ALevent = etohs ((uint16_t)ECAT0->AL_EVENT_REQ);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <ESC_read+0x40>)
 8000d9a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <ESC_read+0x44>)
 8000da2:	f8b3 10d0 	ldrh.w	r1, [r3, #208]	; 0xd0
 8000da6:	2100      	movs	r1, #0
 8000da8:	430a      	orrs	r2, r1
 8000daa:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
   memcpy (buf, ESCADDR(address), len);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8000db4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000db8:	88ba      	ldrh	r2, [r7, #4]
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f003 ffc5 	bl	8004d4c <memcpy>
}
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	54010000 	.word	0x54010000
 8000dcc:	1ffea940 	.word	0x1ffea940

08000dd0 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	80bb      	strh	r3, [r7, #4]
   ESCvar.ALevent = etohs ((uint16_t)ECAT0->AL_EVENT_REQ);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <ESC_write+0x40>)
 8000de2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <ESC_write+0x44>)
 8000dea:	f8b3 10d0 	ldrh.w	r1, [r3, #208]	; 0xd0
 8000dee:	2100      	movs	r1, #0
 8000df0:	430a      	orrs	r2, r1
 8000df2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
   memcpy(ESCADDR(address), buf, len);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8000dfc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	f003 ffa1 	bl	8004d4c <memcpy>
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	54010000 	.word	0x54010000
 8000e14:	1ffea940 	.word	0x1ffea940

08000e18 <ESC_eep_handler>:

/** ESC emulated EEPROM handler
 */
void ESC_eep_handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
   EEP_process ();
 8000e1c:	f003 fbaa 	bl	8004574 <EEP_process>
   EEP_hw_process();
 8000e20:	f000 f9b8 	bl	8001194 <EEP_hw_process>
}
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop

08000e28 <ESC_reset>:

void ESC_reset (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* disable ESC to force reset */
  XMC_ECAT_Disable();
 8000e2c:	f7ff fe8e 	bl	8000b4c <XMC_ECAT_Disable>

  /* initialize EEPROM emulation */
  EEP_init();
 8000e30:	f000 f942 	bl	80010b8 <EEP_init>
}
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop

08000e38 <ESC_init>:

void ESC_init (const esc_cfg_t * cfg)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  XMC_ECAT_CONFIG_t ecat_config;

  ESC_reset();
 8000e40:	f7ff fff2 	bl	8000e28 <ESC_reset>

  /* configure inputs */
  init_input(ECAT_P0_LINK_STATUS);
 8000e44:	486a      	ldr	r0, [pc, #424]	; (8000ff0 <ESC_init+0x1b8>)
 8000e46:	210f      	movs	r1, #15
 8000e48:	f7ff ff6c 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RXD3);
 8000e4c:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <ESC_init+0x1bc>)
 8000e4e:	2107      	movs	r1, #7
 8000e50:	f7ff ff68 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RXD2);
 8000e54:	4867      	ldr	r0, [pc, #412]	; (8000ff4 <ESC_init+0x1bc>)
 8000e56:	2102      	movs	r1, #2
 8000e58:	f7ff ff64 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RXD1);
 8000e5c:	4865      	ldr	r0, [pc, #404]	; (8000ff4 <ESC_init+0x1bc>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	f7ff ff60 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RXD0);
 8000e64:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <ESC_init+0x1bc>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	f7ff ff5c 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RX_DV);
 8000e6c:	4861      	ldr	r0, [pc, #388]	; (8000ff4 <ESC_init+0x1bc>)
 8000e6e:	2106      	movs	r1, #6
 8000e70:	f7ff ff58 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RX_CLK);
 8000e74:	485f      	ldr	r0, [pc, #380]	; (8000ff4 <ESC_init+0x1bc>)
 8000e76:	2104      	movs	r1, #4
 8000e78:	f7ff ff54 	bl	8000d24 <init_input>
  init_input(ECAT_P0_RX_ERR);
 8000e7c:	485e      	ldr	r0, [pc, #376]	; (8000ff8 <ESC_init+0x1c0>)
 8000e7e:	2106      	movs	r1, #6
 8000e80:	f7ff ff50 	bl	8000d24 <init_input>
  init_input(ECAT_P0_TX_CLK);
 8000e84:	485b      	ldr	r0, [pc, #364]	; (8000ff4 <ESC_init+0x1bc>)
 8000e86:	2105      	movs	r1, #5
 8000e88:	f7ff ff4c 	bl	8000d24 <init_input>

  init_input(ECAT_P1_LINK_STATUS);
 8000e8c:	485b      	ldr	r0, [pc, #364]	; (8000ffc <ESC_init+0x1c4>)
 8000e8e:	2104      	movs	r1, #4
 8000e90:	f7ff ff48 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RXD3);
 8000e94:	485a      	ldr	r0, [pc, #360]	; (8001000 <ESC_init+0x1c8>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	f7ff ff44 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RXD2);
 8000e9c:	4858      	ldr	r0, [pc, #352]	; (8001000 <ESC_init+0x1c8>)
 8000e9e:	2105      	movs	r1, #5
 8000ea0:	f7ff ff40 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RXD1);
 8000ea4:	4856      	ldr	r0, [pc, #344]	; (8001000 <ESC_init+0x1c8>)
 8000ea6:	2106      	movs	r1, #6
 8000ea8:	f7ff ff3c 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RXD0);
 8000eac:	4854      	ldr	r0, [pc, #336]	; (8001000 <ESC_init+0x1c8>)
 8000eae:	210b      	movs	r1, #11
 8000eb0:	f7ff ff38 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RX_DV);
 8000eb4:	4852      	ldr	r0, [pc, #328]	; (8001000 <ESC_init+0x1c8>)
 8000eb6:	2109      	movs	r1, #9
 8000eb8:	f7ff ff34 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RX_CLK);
 8000ebc:	4850      	ldr	r0, [pc, #320]	; (8001000 <ESC_init+0x1c8>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f7ff ff30 	bl	8000d24 <init_input>
  init_input(ECAT_P1_RX_ERR);
 8000ec4:	484f      	ldr	r0, [pc, #316]	; (8001004 <ESC_init+0x1cc>)
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	f7ff ff2c 	bl	8000d24 <init_input>
  init_input(ECAT_P1_TX_CLK);
 8000ecc:	484c      	ldr	r0, [pc, #304]	; (8001000 <ESC_init+0x1c8>)
 8000ece:	210a      	movs	r1, #10
 8000ed0:	f7ff ff28 	bl	8000d24 <init_input>

  init_input(ECAT_MDO);
 8000ed4:	484a      	ldr	r0, [pc, #296]	; (8001000 <ESC_init+0x1c8>)
 8000ed6:	210c      	movs	r1, #12
 8000ed8:	f7ff ff24 	bl	8000d24 <init_input>

  XMC_ECAT_SetPortControl(port_control);
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <ESC_init+0x1d0>)
 8000ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ee2:	f7ff ff09 	bl	8000cf8 <XMC_ECAT_SetPortControl>

  /* read config from emulated EEPROM */
  memset(&ecat_config, 0, sizeof(XMC_ECAT_CONFIG_t));
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	2210      	movs	r2, #16
 8000ef0:	f003 ffc6 	bl	8004e80 <memset>
  EEP_read (0, (uint8_t *) &ecat_config, sizeof(XMC_ECAT_CONFIG_t));
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2000      	movs	r0, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	2210      	movs	r2, #16
 8000efe:	f000 f9e3 	bl	80012c8 <EEP_read>
  XMC_ECAT_Init(&ecat_config);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe36 	bl	8000b78 <XMC_ECAT_Init>

  /* configure outputs */
  init_output_sharp(ECAT_P0_TXD3, AF_ECAT0_P0_TXD3);
 8000f0c:	483f      	ldr	r0, [pc, #252]	; (800100c <ESC_init+0x1d4>)
 8000f0e:	2106      	movs	r1, #6
 8000f10:	2220      	movs	r2, #32
 8000f12:	2300      	movs	r3, #0
 8000f14:	f7ff ff18 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P0_TXD2, AF_ECAT0_P0_TXD2);
 8000f18:	483c      	ldr	r0, [pc, #240]	; (800100c <ESC_init+0x1d4>)
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f7ff ff12 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P0_TXD1, AF_ECAT0_P0_TXD1);
 8000f24:	4839      	ldr	r0, [pc, #228]	; (800100c <ESC_init+0x1d4>)
 8000f26:	2104      	movs	r1, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f7ff ff0c 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P0_TXD0, AF_ECAT0_P0_TXD0);
 8000f30:	4836      	ldr	r0, [pc, #216]	; (800100c <ESC_init+0x1d4>)
 8000f32:	2102      	movs	r1, #2
 8000f34:	2220      	movs	r2, #32
 8000f36:	2300      	movs	r3, #0
 8000f38:	f7ff ff06 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P0_TX_EN, AF_ECAT0_P0_TX_EN);
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <ESC_init+0x1d4>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2220      	movs	r2, #32
 8000f42:	2300      	movs	r3, #0
 8000f44:	f7ff ff00 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P1_TXD3, AF_ECAT0_P1_TXD3);
 8000f48:	482d      	ldr	r0, [pc, #180]	; (8001000 <ESC_init+0x1c8>)
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f7ff fefa 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P1_TXD2, AF_ECAT0_P1_TXD2);
 8000f54:	482a      	ldr	r0, [pc, #168]	; (8001000 <ESC_init+0x1c8>)
 8000f56:	2102      	movs	r1, #2
 8000f58:	2208      	movs	r2, #8
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f7ff fef4 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P1_TXD1, AF_ECAT0_P1_TXD1);
 8000f60:	4826      	ldr	r0, [pc, #152]	; (8000ffc <ESC_init+0x1c4>)
 8000f62:	2102      	movs	r1, #2
 8000f64:	2218      	movs	r2, #24
 8000f66:	2300      	movs	r3, #0
 8000f68:	f7ff feee 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P1_TXD0, AF_ECAT0_P1_TXD0);
 8000f6c:	4823      	ldr	r0, [pc, #140]	; (8000ffc <ESC_init+0x1c4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2218      	movs	r2, #24
 8000f72:	2300      	movs	r3, #0
 8000f74:	f7ff fee8 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_P1_TX_EN, AF_ECAT0_P1_TX_EN);
 8000f78:	4820      	ldr	r0, [pc, #128]	; (8000ffc <ESC_init+0x1c4>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f7ff fee2 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_CLK25, AF_ECAT0_CLK25);
 8000f84:	4821      	ldr	r0, [pc, #132]	; (800100c <ESC_init+0x1d4>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	2220      	movs	r2, #32
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f7ff fedc 	bl	8000d48 <init_output>
  init_output_sharp(ECAT_MCLK, AF_ECAT0_MCLK);
 8000f90:	481a      	ldr	r0, [pc, #104]	; (8000ffc <ESC_init+0x1c4>)
 8000f92:	2103      	movs	r1, #3
 8000f94:	2220      	movs	r2, #32
 8000f96:	2300      	movs	r3, #0
 8000f98:	f7ff fed6 	bl	8000d48 <init_output>

  init_output_soft(ECAT_P0_LED_LINK_ACT, AF_ECAT0_P0_LED_LINK_ACT);
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <ESC_init+0x1d4>)
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f7ff fed0 	bl	8000d48 <init_output>
  init_output_soft(ECAT_P1_LED_LINK_ACT, AF_ECAT0_P1_LED_LINK_ACT);
 8000fa8:	4814      	ldr	r0, [pc, #80]	; (8000ffc <ESC_init+0x1c4>)
 8000faa:	210c      	movs	r1, #12
 8000fac:	2208      	movs	r2, #8
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f7ff feca 	bl	8000d48 <init_output>
  init_output_soft(ECAT_LED_RUN, AF_ECAT0_LED_RUN);
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <ESC_init+0x1c8>)
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	2218      	movs	r2, #24
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f7ff fec4 	bl	8000d48 <init_output>
  init_output_soft(ECAT_LED_ERR, AF_ECAT0_LED_ERR);
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <ESC_init+0x1c8>)
 8000fc2:	2107      	movs	r1, #7
 8000fc4:	2218      	movs	r2, #24
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f7ff febe 	bl	8000d48 <init_output>

  init_input(ECAT_MDO);
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <ESC_init+0x1c8>)
 8000fce:	210c      	movs	r1, #12
 8000fd0:	f7ff fea8 	bl	8000d24 <init_input>
  XMC_GPIO_SetHardwareControl(ECAT_MDO, AF_ECAT0_MDO);
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <ESC_init+0x1c8>)
 8000fd6:	210c      	movs	r1, #12
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f7ff fe65 	bl	8000ca8 <XMC_GPIO_SetHardwareControl>

  init_output_soft(ECAT_PHY_RESET, AF_ECAT0_PHY_RESET);
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <ESC_init+0x1c8>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f7ff feaf 	bl	8000d48 <init_output>
}
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	48028100 	.word	0x48028100
 8000ff4:	48028500 	.word	0x48028500
 8000ff8:	48028200 	.word	0x48028200
 8000ffc:	48028300 	.word	0x48028300
 8001000:	48028000 	.word	0x48028000
 8001004:	48028f00 	.word	0x48028f00
 8001008:	08004fb4 	.word	0x08004fb4
 800100c:	48028600 	.word	0x48028600

08001010 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2201      	movs	r2, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
}
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	f003 0301 	and.w	r3, r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	619a      	str	r2, [r3, #24]
}
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <XMC_FCE_GetCRCResult>:
 *
 * \par<b>Description: </b><br>
 * Read the final CRC value from RES register <br>
 */
__STATIC_INLINE void XMC_FCE_GetCRCResult(const XMC_FCE_t *const engine, uint32_t *result)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  *result= engine->kernel_ptr->RES;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <EEP_init>:

/** Initialize EEPROM emulation (load default data, validate checksums, ...).
 *
 */
void EEP_init (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
   /* initialize write buffer */
   memset(&eep_write_buf, 0, EEP_BYTES_PER_BLOCK);
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <EEP_init+0xa4>)
 80010be:	2100      	movs	r1, #0
 80010c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c4:	f003 fedc 	bl	8004e80 <memset>

   /* configure I/Os */
   EEP_DEFAULT_BTN_INIT();
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <EEP_init+0xa8>)
 80010ca:	210d      	movs	r1, #13
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <EEP_init+0xac>)
 80010ce:	f7ff fbf7 	bl	80008c0 <XMC_GPIO_Init>
   EEP_BUSY_LED_INIT();
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <EEP_init+0xb0>)
 80010d4:	2109      	movs	r1, #9
 80010d6:	4a25      	ldr	r2, [pc, #148]	; (800116c <EEP_init+0xb4>)
 80010d8:	f7ff fbf2 	bl	80008c0 <XMC_GPIO_Init>

   /* Enable FCE module */
   XMC_FCE_Enable();
 80010dc:	f7ff fd9e 	bl	8000c1c <XMC_FCE_Enable>

   /* Initialize the FCE Configuration */
   XMC_FCE_Init(&fce_config);
 80010e0:	4823      	ldr	r0, [pc, #140]	; (8001170 <EEP_init+0xb8>)
 80010e2:	f7ff fd85 	bl	8000bf0 <XMC_FCE_Init>

   /* try to find latest block in both sectors */
   eep_curr_block = NULL;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <EEP_init+0xbc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
   if (!EEP_DEFAULT_BTN_STATE()) {
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <EEP_init+0xa8>)
 80010ee:	210d      	movs	r1, #13
 80010f0:	f7ff ffb0 	bl	8001054 <XMC_GPIO_GetInput>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <EEP_init+0x4e>
      find_latest_block((eep_block_t *) EEP_SECTOR_A);
 80010fa:	481f      	ldr	r0, [pc, #124]	; (8001178 <EEP_init+0xc0>)
 80010fc:	f000 f982 	bl	8001404 <find_latest_block>
      find_latest_block((eep_block_t *) EEP_SECTOR_B);
 8001100:	481e      	ldr	r0, [pc, #120]	; (800117c <EEP_init+0xc4>)
 8001102:	f000 f97f 	bl	8001404 <find_latest_block>
   }

   EEP_BUSY_LED_ON();
 8001106:	4818      	ldr	r0, [pc, #96]	; (8001168 <EEP_init+0xb0>)
 8001108:	2109      	movs	r1, #9
 800110a:	f7ff ff81 	bl	8001010 <XMC_GPIO_SetOutputHigh>

   /* no valid block found -> initialize flash with default data */
   if (eep_curr_block == NULL) {
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <EEP_init+0xbc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <EEP_init+0x62>
      init_flash_data();
 8001116:	f000 f927 	bl	8001368 <init_flash_data>
   }

   /* cleanup unused block */
   cleanup_unused_sect(eep_curr_block);
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <EEP_init+0xbc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f9be 	bl	80014a0 <cleanup_unused_sect>

   /* copy data from block to emu buffer */
   memcpy(eep_buf, eep_curr_block->data, EEP_EMU_BYTES);
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <EEP_init+0xbc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <EEP_init+0xc8>)
 800112a:	4611      	mov	r1, r2
 800112c:	3308      	adds	r3, #8
 800112e:	f44f 6278 	mov.w	r2, #3968	; 0xf80
 8001132:	4608      	mov	r0, r1
 8001134:	4619      	mov	r1, r3
 8001136:	f003 fe09 	bl	8004d4c <memcpy>

   EEP_BUSY_LED_OFF();
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <EEP_init+0xb0>)
 800113c:	2109      	movs	r1, #9
 800113e:	f7ff ff77 	bl	8001030 <XMC_GPIO_SetOutputLow>

   /* initialize state variables */
   eep_buf_dirty = 0;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <EEP_init+0xcc>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
   eep_last_write = 0;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <EEP_init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
   eep_write_req = 0;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <EEP_init+0xd4>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
   eep_next_block = NULL;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <EEP_init+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bd80      	pop	{r7, pc}
 800115c:	1ffe9914 	.word	0x1ffe9914
 8001160:	48028f00 	.word	0x48028f00
 8001164:	08004fd8 	.word	0x08004fd8
 8001168:	48028500 	.word	0x48028500
 800116c:	08004fe4 	.word	0x08004fe4
 8001170:	08004fcc 	.word	0x08004fcc
 8001174:	1ffe9900 	.word	0x1ffe9900
 8001178:	0c180000 	.word	0x0c180000
 800117c:	0c1c0000 	.word	0x0c1c0000
 8001180:	1ffe8974 	.word	0x1ffe8974
 8001184:	1ffe98f4 	.word	0x1ffe98f4
 8001188:	1ffe98f8 	.word	0x1ffe98f8
 800118c:	1ffe98fc 	.word	0x1ffe98fc
 8001190:	1ffe9904 	.word	0x1ffe9904

08001194 <EEP_hw_process>:

/** EEPROM emulation controller side periodic task.
 *
 */
void EEP_hw_process (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
   /* check for dirty buffer and set write */
   if (eep_buf_dirty) {
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <EEP_hw_process+0xfc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d011      	beq.n	80011c6 <EEP_hw_process+0x32>
      int32_t idle_time = ((int32_t) ESCvar.Time) - ((int32_t) eep_last_write);
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <EEP_hw_process+0x100>)
 80011a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <EEP_hw_process+0x104>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	607b      	str	r3, [r7, #4]
      if (idle_time > EEP_IDLE_TIMEOUT) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a39      	ldr	r2, [pc, #228]	; (800129c <EEP_hw_process+0x108>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dd05      	ble.n	80011c6 <EEP_hw_process+0x32>
         eep_buf_dirty = 0;
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <EEP_hw_process+0xfc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
         eep_write_req = 1;
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <EEP_hw_process+0x10c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
      }
   }

   /* check for write process */
   if (eep_next_block != NULL) {
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <EEP_hw_process+0x110>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d029      	beq.n	8001222 <EEP_hw_process+0x8e>
      /* write flash page */
      XMC_FLASH_ProgramPage(eep_write_dst, eep_write_src);
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <EEP_hw_process+0x114>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <EEP_hw_process+0x118>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fb25 	bl	8000828 <XMC_FLASH_ProgramPage>
      eep_write_src += XMC_FLASH_WORDS_PER_PAGE;
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <EEP_hw_process+0x118>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <EEP_hw_process+0x118>)
 80011e8:	6013      	str	r3, [r2, #0]
      eep_write_dst += XMC_FLASH_WORDS_PER_PAGE;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <EEP_hw_process+0x114>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <EEP_hw_process+0x114>)
 80011f4:	6013      	str	r3, [r2, #0]

      /* update counter */
      eep_write_page++;
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <EEP_hw_process+0x11c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a2c      	ldr	r2, [pc, #176]	; (80012b0 <EEP_hw_process+0x11c>)
 80011fe:	6013      	str	r3, [r2, #0]

      /* check for finished job */
      if (eep_write_page >= EEP_PAGES_PER_BLOCK) {
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <EEP_hw_process+0x11c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d90b      	bls.n	8001220 <EEP_hw_process+0x8c>
         /* update block pointer and reset write state */
         eep_curr_block = eep_next_block;
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <EEP_hw_process+0x110>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <EEP_hw_process+0x120>)
 800120e:	6013      	str	r3, [r2, #0]
         eep_next_block = NULL;
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <EEP_hw_process+0x110>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

         EEP_BUSY_LED_OFF();
 8001216:	4828      	ldr	r0, [pc, #160]	; (80012b8 <EEP_hw_process+0x124>)
 8001218:	2109      	movs	r1, #9
 800121a:	f7ff ff09 	bl	8001030 <XMC_GPIO_SetOutputLow>
      }

      return;
 800121e:	e034      	b.n	800128a <EEP_hw_process+0xf6>
 8001220:	e033      	b.n	800128a <EEP_hw_process+0xf6>
   }

   /* start write of new block */
   if (eep_write_req) {
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <EEP_hw_process+0x10c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d02f      	beq.n	800128a <EEP_hw_process+0xf6>
      EEP_BUSY_LED_ON();
 800122a:	4823      	ldr	r0, [pc, #140]	; (80012b8 <EEP_hw_process+0x124>)
 800122c:	2109      	movs	r1, #9
 800122e:	f7ff feef 	bl	8001010 <XMC_GPIO_SetOutputHigh>

      /* get next block */
      eep_next_block = get_next_block(eep_curr_block);
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <EEP_hw_process+0x120>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f918 	bl	800146c <get_next_block>
 800123c:	4602      	mov	r2, r0
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <EEP_hw_process+0x110>)
 8001240:	601a      	str	r2, [r3, #0]

      /* copy data */
      memcpy(eep_write_buf.data, eep_buf, EEP_EMU_BYTES);
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <EEP_hw_process+0x128>)
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <EEP_hw_process+0x12c>)
 8001246:	3308      	adds	r3, #8
 8001248:	4611      	mov	r1, r2
 800124a:	f44f 6278 	mov.w	r2, #3968	; 0xf80
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fd7c 	bl	8004d4c <memcpy>

      /* setup header */
      eep_write_buf.header.seq = eep_curr_block->header.seq + 1;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <EEP_hw_process+0x120>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <EEP_hw_process+0x128>)
 800125e:	6013      	str	r3, [r2, #0]
      eep_write_buf.header.crc = crc32 (eep_write_buf.data, EEP_DATA_BYTES);
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <EEP_hw_process+0x130>)
 8001262:	f640 71f8 	movw	r1, #4088	; 0xff8
 8001266:	f000 f95d 	bl	8001524 <crc32>
 800126a:	4602      	mov	r2, r0
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <EEP_hw_process+0x128>)
 800126e:	605a      	str	r2, [r3, #4]

      /* initialize write position */
      eep_write_src = (uint32_t *) &eep_write_buf;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <EEP_hw_process+0x118>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <EEP_hw_process+0x128>)
 8001274:	601a      	str	r2, [r3, #0]
      eep_write_dst = (uint32_t *) eep_next_block;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <EEP_hw_process+0x110>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <EEP_hw_process+0x114>)
 800127c:	6013      	str	r3, [r2, #0]
      eep_write_page = 0;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <EEP_hw_process+0x11c>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

      /* reset write request */
      eep_write_req = 0;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <EEP_hw_process+0x10c>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
   }
}
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	1ffe98f4 	.word	0x1ffe98f4
 8001294:	1ffea940 	.word	0x1ffea940
 8001298:	1ffe98f8 	.word	0x1ffe98f8
 800129c:	05f5e100 	.word	0x05f5e100
 80012a0:	1ffe98fc 	.word	0x1ffe98fc
 80012a4:	1ffe9904 	.word	0x1ffe9904
 80012a8:	1ffe990c 	.word	0x1ffe990c
 80012ac:	1ffe9908 	.word	0x1ffe9908
 80012b0:	1ffe9910 	.word	0x1ffe9910
 80012b4:	1ffe9900 	.word	0x1ffe9900
 80012b8:	48028500 	.word	0x48028500
 80012bc:	1ffe9914 	.word	0x1ffe9914
 80012c0:	1ffe8974 	.word	0x1ffe8974
 80012c4:	1ffe991c 	.word	0x1ffe991c

080012c8 <EEP_read>:
 * @param[out]  data     = pointer to buffer of output data
 * @param[in]   count    = number of bytes to read
 * @return 0 on OK, 1 on error
 */
int8_t EEP_read (uint32_t addr, uint8_t *data, uint16_t count)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	80fb      	strh	r3, [r7, #6]
   if (addr >= EEP_EMU_BYTES) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80012dc:	d301      	bcc.n	80012e2 <EEP_read+0x1a>
      return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e009      	b.n	80012f6 <EEP_read+0x2e>
   }

   /* read data from ram buffer */
   memcpy(data, eep_buf + addr, count);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <EEP_read+0x38>)
 80012e6:	441a      	add	r2, r3
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	4611      	mov	r1, r2
 80012ee:	461a      	mov	r2, r3
 80012f0:	f003 fd2c 	bl	8004d4c <memcpy>

   return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	b25b      	sxtb	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	1ffe8974 	.word	0x1ffe8974

08001304 <EEP_write>:
 * @param[out]  data     = pointer to buffer of input data
 * @param[in]   count    = number of bytes to write
 * @return 0 on OK, 1 on error
 */
int8_t EEP_write (uint32_t addr, uint8_t *data, uint16_t count)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
   if (addr >= EEP_EMU_BYTES) {
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8001318:	d301      	bcc.n	800131e <EEP_write+0x1a>
      return 1;
 800131a:	2301      	movs	r3, #1
 800131c:	e014      	b.n	8001348 <EEP_write+0x44>
   }

   /* write data to ram buffer */
   memcpy(eep_buf + addr, data, count);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <EEP_write+0x50>)
 8001322:	441a      	add	r2, r3
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4610      	mov	r0, r2
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	461a      	mov	r2, r3
 800132c:	f003 fd0e 	bl	8004d4c <memcpy>

   /* mark buffer as dirty */
   eep_buf_dirty = 1;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <EEP_write+0x54>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
   eep_write_req = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <EEP_write+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
   eep_last_write = ESCvar.Time;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <EEP_write+0x5c>)
 800133e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <EEP_write+0x60>)
 8001344:	6013      	str	r3, [r2, #0]

   return 0;
 8001346:	2300      	movs	r3, #0
 8001348:	b25b      	sxtb	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	1ffe8974 	.word	0x1ffe8974
 8001358:	1ffe98f4 	.word	0x1ffe98f4
 800135c:	1ffe98fc 	.word	0x1ffe98fc
 8001360:	1ffea940 	.word	0x1ffea940
 8001364:	1ffe98f8 	.word	0x1ffe98f8

08001368 <init_flash_data>:

static void init_flash_data(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
   uint32_t i;
   const uint32_t *src;
   uint32_t *dst;

   /* erase both sectors */
   XMC_FLASH_EraseSector(EEP_SECTOR_A);
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <init_flash_data+0x80>)
 8001370:	f7ff fa8e 	bl	8000890 <XMC_FLASH_EraseSector>
   XMC_FLASH_EraseSector(EEP_SECTOR_B);
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <init_flash_data+0x84>)
 8001376:	f7ff fa8b 	bl	8000890 <XMC_FLASH_EraseSector>

   /* copy default data to write buffer */
   memcpy(eep_write_buf.data, SII_EE_DEFLT, (SII_EE_DEFLT_SIZE < EEP_EMU_BYTES) ? SII_EE_DEFLT_SIZE : EEP_EMU_BYTES);
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <init_flash_data+0x88>)
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <init_flash_data+0x8c>)
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8001384:	bf28      	it	cs
 8001386:	f44f 6378 	movcs.w	r3, #3968	; 0xf80
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <init_flash_data+0x90>)
 800138c:	4919      	ldr	r1, [pc, #100]	; (80013f4 <init_flash_data+0x8c>)
 800138e:	461a      	mov	r2, r3
 8001390:	f003 fcdc 	bl	8004d4c <memcpy>

   /* setup header data */
   eep_write_buf.header.seq = 0;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <init_flash_data+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
   eep_write_buf.header.crc = crc32 (eep_write_buf.data, EEP_DATA_BYTES);
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <init_flash_data+0x90>)
 800139c:	f640 71f8 	movw	r1, #4088	; 0xff8
 80013a0:	f000 f8c0 	bl	8001524 <crc32>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <init_flash_data+0x94>)
 80013a8:	605a      	str	r2, [r3, #4]

   /* write pages */
   src = (const uint32_t *) &eep_write_buf;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <init_flash_data+0x94>)
 80013ac:	60bb      	str	r3, [r7, #8]
   dst = EEP_SECTOR_A;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <init_flash_data+0x80>)
 80013b0:	607b      	str	r3, [r7, #4]
   for (i = 0; i < EEP_PAGES_PER_BLOCK; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e00e      	b.n	80013d6 <init_flash_data+0x6e>
      XMC_FLASH_ProgramPage(dst, src);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	f7ff fa34 	bl	8000828 <XMC_FLASH_ProgramPage>
      src += XMC_FLASH_WORDS_PER_PAGE;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013c6:	60bb      	str	r3, [r7, #8]
      dst += XMC_FLASH_WORDS_PER_PAGE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013ce:	607b      	str	r3, [r7, #4]
   eep_write_buf.header.crc = crc32 (eep_write_buf.data, EEP_DATA_BYTES);

   /* write pages */
   src = (const uint32_t *) &eep_write_buf;
   dst = EEP_SECTOR_A;
   for (i = 0; i < EEP_PAGES_PER_BLOCK; i++) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d9ed      	bls.n	80013b8 <init_flash_data+0x50>
      src += XMC_FLASH_WORDS_PER_PAGE;
      dst += XMC_FLASH_WORDS_PER_PAGE;
   }

   /* set current block */
   eep_curr_block = (eep_block_t *) EEP_SECTOR_A;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <init_flash_data+0x98>)
 80013de:	4a02      	ldr	r2, [pc, #8]	; (80013e8 <init_flash_data+0x80>)
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	0c180000 	.word	0x0c180000
 80013ec:	0c1c0000 	.word	0x0c1c0000
 80013f0:	1ffe8900 	.word	0x1ffe8900
 80013f4:	1ffe8800 	.word	0x1ffe8800
 80013f8:	1ffe991c 	.word	0x1ffe991c
 80013fc:	1ffe9914 	.word	0x1ffe9914
 8001400:	1ffe9900 	.word	0x1ffe9900

08001404 <find_latest_block>:

static void find_latest_block(eep_block_t *addr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
   uint32_t blk, crc;

   for (blk = 0; blk < EPP_BLOCKS_PER_SECT; blk++, addr++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e023      	b.n	800145a <find_latest_block+0x56>
      /* check crc, skip invalid blocks */
      crc = crc32 (addr->data, EEP_DATA_BYTES);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3308      	adds	r3, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f640 71f8 	movw	r1, #4088	; 0xff8
 800141c:	f000 f882 	bl	8001524 <crc32>
 8001420:	60b8      	str	r0, [r7, #8]
      if (addr->header.crc != crc) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	429a      	cmp	r2, r3
 800142a:	d000      	beq.n	800142e <find_latest_block+0x2a>
         continue;
 800142c:	e00e      	b.n	800144c <find_latest_block+0x48>
      }

      /* check sequence number and update last pointer */
      if (eep_curr_block == NULL || (addr->header.seq - eep_curr_block->header.seq) > 0) {
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <find_latest_block+0x64>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <find_latest_block+0x42>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <find_latest_block+0x64>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	dd02      	ble.n	800144c <find_latest_block+0x48>
         eep_curr_block = addr;
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <find_latest_block+0x64>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]

static void find_latest_block(eep_block_t *addr)
{
   uint32_t blk, crc;

   for (blk = 0; blk < EPP_BLOCKS_PER_SECT; blk++, addr++) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b3f      	cmp	r3, #63	; 0x3f
 800145e:	d9d8      	bls.n	8001412 <find_latest_block+0xe>
      /* check sequence number and update last pointer */
      if (eep_curr_block == NULL || (addr->header.seq - eep_curr_block->header.seq) > 0) {
         eep_curr_block = addr;
      }
   }
}
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	1ffe9900 	.word	0x1ffe9900

0800146c <get_next_block>:

static eep_block_t *get_next_block(eep_block_t *block)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
   /* simple case: new block fits in current sector */
   uint32_t sect_offset = ((uint32_t)block) & (EEP_BYTES_PER_SECTOR - 1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800147a:	60fb      	str	r3, [r7, #12]
   if ((sect_offset + EEP_BYTES_PER_BLOCK) < EEP_BYTES_PER_SECTOR) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001486:	d203      	bcs.n	8001490 <get_next_block+0x24>
      return block + 1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148e:	e003      	b.n	8001498 <get_next_block+0x2c>
   }

   /* use other sector */
   return cleanup_unused_sect(block);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f805 	bl	80014a0 <cleanup_unused_sect>
 8001496:	4603      	mov	r3, r0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <cleanup_unused_sect>:

static eep_block_t *cleanup_unused_sect(eep_block_t *block)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
   /* get other sector */
   uint32_t *sect_addr = (uint32_t *) (((uint32_t)block) & ~(EEP_BYTES_PER_SECTOR - 1));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0c9b      	lsrs	r3, r3, #18
 80014ac:	049b      	lsls	r3, r3, #18
 80014ae:	60fb      	str	r3, [r7, #12]
   if (sect_addr == EEP_SECTOR_A) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <cleanup_unused_sect+0x40>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d102      	bne.n	80014be <cleanup_unused_sect+0x1e>
      sect_addr = EEP_SECTOR_B;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <cleanup_unused_sect+0x44>)
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e001      	b.n	80014c2 <cleanup_unused_sect+0x22>
   } else {
      sect_addr = EEP_SECTOR_A;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <cleanup_unused_sect+0x40>)
 80014c0:	60fb      	str	r3, [r7, #12]
   }

   /* check if sector is empty, erase if not */
   if (!is_sector_empty(sect_addr)) {
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f810 	bl	80014e8 <is_sector_empty>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <cleanup_unused_sect+0x34>
      XMC_FLASH_EraseSector(sect_addr);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff f9de 	bl	8000890 <XMC_FLASH_EraseSector>
   }

   return (eep_block_t *) sect_addr;
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0c180000 	.word	0x0c180000
 80014e4:	0c1c0000 	.word	0x0c1c0000

080014e8 <is_sector_empty>:

static int32_t is_sector_empty(uint32_t *addr)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
   uint32_t i;

   /* check for all bytes erased */
   for (i=0; i<EEP_BYTES_PER_SECTOR; i+=sizeof(uint32_t), addr++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e00b      	b.n	800150e <is_sector_empty+0x26>
      if (*addr != 0) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <is_sector_empty+0x1a>
        return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e00a      	b.n	8001518 <is_sector_empty+0x30>
static int32_t is_sector_empty(uint32_t *addr)
{
   uint32_t i;

   /* check for all bytes erased */
   for (i=0; i<EEP_BYTES_PER_SECTOR; i+=sizeof(uint32_t), addr++) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3304      	adds	r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3304      	adds	r3, #4
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001514:	d3ef      	bcc.n	80014f6 <is_sector_empty+0xe>
      if (*addr != 0) {
        return 0;
      }
   }
   return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <crc32>:

static uint32_t crc32(const uint8_t *data, uint32_t length)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
   uint32_t crc;

   XMC_FCE_InitializeSeedValue(&fce_config, 0xffffffff);
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <crc32+0x3c>)
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	f7ff fda2 	bl	800107c <XMC_FCE_InitializeSeedValue>
   XMC_FCE_CalculateCRC32(&fce_config, (const uint32_t *) data, length & ~3L, &crc);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <crc32+0x3c>)
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f7ff fb7d 	bl	8000c44 <XMC_FCE_CalculateCRC32>
   XMC_FCE_GetCRCResult(&fce_config, &crc);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <crc32+0x3c>)
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fda1 	bl	8001098 <XMC_FCE_GetCRCResult>

   return crc;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	08004fcc 	.word	0x08004fcc

08001564 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2201      	movs	r2, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001596:	409a      	lsls	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
}
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	f003 0301 	and.w	r3, r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <cb_get_Buttons>:
};
/**
 * This function gets input values and updates Rb.Buttons
 */
void cb_get_Buttons(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	Rb.Buttons.Button1 = (uint8_t)XMC_GPIO_GetInput(GPIO_BUTTON1);
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <cb_get_Buttons+0x28>)
 80015d6:	210d      	movs	r1, #13
 80015d8:	f7ff ffe6 	bl	80015a8 <XMC_GPIO_GetInput>
 80015dc:	4603      	mov	r3, r0
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <cb_get_Buttons+0x2c>)
 80015e2:	701a      	strb	r2, [r3, #0]
	Rb.Buttons.Button2 = (uint8_t)XMC_GPIO_GetInput(GPIO_BUTTON2);
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <cb_get_Buttons+0x28>)
 80015e6:	210c      	movs	r1, #12
 80015e8:	f7ff ffde 	bl	80015a8 <XMC_GPIO_GetInput>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <cb_get_Buttons+0x2c>)
 80015f2:	705a      	strb	r2, [r3, #1]

}
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	48028f00 	.word	0x48028f00
 80015fc:	1ffeab9c 	.word	0x1ffeab9c

08001600 <cb_set_LEDs>:
/**
 * This function sets output values according to Wb.LEDs
 */
void cb_set_LEDs(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if(Wb.LEDs.LED1)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <cb_set_LEDs+0x54>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <cb_set_LEDs+0x16>
	{
		XMC_GPIO_SetOutputHigh(GPIO_LED1);
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <cb_set_LEDs+0x58>)
 800160e:	210e      	movs	r1, #14
 8001610:	f7ff ffa8 	bl	8001564 <XMC_GPIO_SetOutputHigh>
 8001614:	e003      	b.n	800161e <cb_set_LEDs+0x1e>
	}
	else
	{
		XMC_GPIO_SetOutputLow(GPIO_LED1);
 8001616:	4810      	ldr	r0, [pc, #64]	; (8001658 <cb_set_LEDs+0x58>)
 8001618:	210e      	movs	r1, #14
 800161a:	f7ff ffb3 	bl	8001584 <XMC_GPIO_SetOutputLow>
	}

	if(Wb.LEDs.LED2)
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <cb_set_LEDs+0x54>)
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <cb_set_LEDs+0x30>
	{
		XMC_GPIO_SetOutputHigh(GPIO_LED2);
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <cb_set_LEDs+0x5c>)
 8001628:	210e      	movs	r1, #14
 800162a:	f7ff ff9b 	bl	8001564 <XMC_GPIO_SetOutputHigh>
 800162e:	e003      	b.n	8001638 <cb_set_LEDs+0x38>
	}
	else
	{
		XMC_GPIO_SetOutputLow(GPIO_LED2);
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <cb_set_LEDs+0x5c>)
 8001632:	210e      	movs	r1, #14
 8001634:	f7ff ffa6 	bl	8001584 <XMC_GPIO_SetOutputLow>
	}

	if(Wb.LEDs.LED3)
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <cb_set_LEDs+0x54>)
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <cb_set_LEDs+0x4a>
	{
		XMC_GPIO_SetOutputHigh(GPIO_LED3);
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <cb_set_LEDs+0x60>)
 8001642:	210e      	movs	r1, #14
 8001644:	f7ff ff8e 	bl	8001564 <XMC_GPIO_SetOutputHigh>
 8001648:	e003      	b.n	8001652 <cb_set_LEDs+0x52>
	}
	else
	{
		XMC_GPIO_SetOutputLow(GPIO_LED3);
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <cb_set_LEDs+0x60>)
 800164c:	210e      	movs	r1, #14
 800164e:	f7ff ff99 	bl	8001584 <XMC_GPIO_SetOutputLow>
	}
}
 8001652:	bd80      	pop	{r7, pc}
 8001654:	1ffeab94 	.word	0x1ffeab94
 8001658:	48028100 	.word	0x48028100
 800165c:	48028000 	.word	0x48028000
 8001660:	48028300 	.word	0x48028300

08001664 <main>:
   .esc_hw_interrupt_disable = NULL,
   .esc_hw_eep_handler = ESC_eep_handler
};

int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  XMC_GPIO_Init(GPIO_BUTTON1, &gpio_config_btn1);
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <main+0x44>)
 800166a:	210d      	movs	r1, #13
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <main+0x48>)
 800166e:	f7ff f927 	bl	80008c0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2, &gpio_config_btn2);
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <main+0x44>)
 8001674:	210c      	movs	r1, #12
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <main+0x4c>)
 8001678:	f7ff f922 	bl	80008c0 <XMC_GPIO_Init>

  XMC_GPIO_Init(GPIO_LED1, &gpio_config_led1);
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <main+0x50>)
 800167e:	210e      	movs	r1, #14
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <main+0x54>)
 8001682:	f7ff f91d 	bl	80008c0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_LED2, &gpio_config_led2);
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <main+0x58>)
 8001688:	210e      	movs	r1, #14
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <main+0x5c>)
 800168c:	f7ff f918 	bl	80008c0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_LED3, &gpio_config_led3);
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <main+0x60>)
 8001692:	210e      	movs	r1, #14
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <main+0x64>)
 8001696:	f7ff f913 	bl	80008c0 <XMC_GPIO_Init>

  ecat_slv_init(&config);
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <main+0x68>)
 800169c:	f000 f9e4 	bl	8001a68 <ecat_slv_init>

  while(1)
  {
    ecat_slv();
 80016a0:	f000 f9da 	bl	8001a58 <ecat_slv>
  }
 80016a4:	e7fc      	b.n	80016a0 <main+0x3c>
 80016a6:	bf00      	nop
 80016a8:	48028f00 	.word	0x48028f00
 80016ac:	08004ff0 	.word	0x08004ff0
 80016b0:	08004ffc 	.word	0x08004ffc
 80016b4:	48028100 	.word	0x48028100
 80016b8:	08005008 	.word	0x08005008
 80016bc:	48028000 	.word	0x48028000
 80016c0:	08005014 	.word	0x08005014
 80016c4:	48028300 	.word	0x48028300
 80016c8:	08005020 	.word	0x08005020
 80016cc:	1ffe8900 	.word	0x1ffe8900

080016d0 <ESC_pre_objecthandler>:
 * @param[in] index      = index of SDO download request to check
 * @param[in] sub-index  = sub-index of SDO download request to check
 * @return 1 if the SDO Download is correct. 0 If not correct.
 */
int ESC_pre_objecthandler (uint16_t index, uint8_t subindex)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	717b      	strb	r3, [r7, #5]
   int result = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]

   if(ESCvar.pre_object_download_hook)
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <ESC_pre_objecthandler+0x38>)
 80016e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <ESC_pre_objecthandler+0x2c>
   {
      result = (ESCvar.pre_object_download_hook)(index, subindex);
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <ESC_pre_objecthandler+0x38>)
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	88f9      	ldrh	r1, [r7, #6]
 80016f2:	797a      	ldrb	r2, [r7, #5]
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	4798      	blx	r3
 80016fa:	60f8      	str	r0, [r7, #12]
   }

   return result;
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	1ffea940 	.word	0x1ffea940

0800170c <ESC_objecthandler>:
 *
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 */
void ESC_objecthandler (uint16_t index, uint8_t subindex)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	4613      	mov	r3, r2
 800171a:	717b      	strb	r3, [r7, #5]
   switch (index)
   {
   /* Handle post-write of parameter values */
   default:
   {
      if(ESCvar.post_object_download_hook != NULL)
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <ESC_objecthandler+0x30>)
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <ESC_objecthandler+0x26>
      {
         (ESCvar.post_object_download_hook)(index, subindex);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <ESC_objecthandler+0x30>)
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	88f9      	ldrh	r1, [r7, #6]
 800172a:	797a      	ldrb	r2, [r7, #5]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	4798      	blx	r3
      }
      break;
 8001732:	bf00      	nop
   }
   }
}
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	1ffea940 	.word	0x1ffea940

08001740 <APP_safeoutput>:
/** Mandatory: Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 * set
 */
void APP_safeoutput (void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <APP_safeoutput+0x28>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <APP_safeoutput+0x14>
   {
      (ESCvar.safeoutput_override)();
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <APP_safeoutput+0x28>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4798      	blx	r3
 8001752:	e008      	b.n	8001766 <APP_safeoutput+0x26>
   }
   else
   {
      // Set safe values for Wb.LEDs
      Wb.LEDs.LED1 = 0;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <APP_safeoutput+0x2c>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
      Wb.LEDs.LED2 = 0;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <APP_safeoutput+0x2c>)
 800175c:	2200      	movs	r2, #0
 800175e:	705a      	strb	r2, [r3, #1]
      Wb.LEDs.LED3 = 0;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <APP_safeoutput+0x2c>)
 8001762:	2200      	movs	r2, #0
 8001764:	709a      	strb	r2, [r3, #2]
   }
}
 8001766:	bd80      	pop	{r7, pc}
 8001768:	1ffea940 	.word	0x1ffea940
 800176c:	1ffeab94 	.word	0x1ffeab94

08001770 <TXPDO_update>:

/** Mandatory: Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <TXPDO_update+0x2c>)
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <TXPDO_update+0x2c>)
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	4798      	blx	r3
 8001782:	e009      	b.n	8001798 <TXPDO_update+0x28>
   }
   else
   {
      ESC_write (SM3_sma, &Rb, ESCvar.TXPDOsize);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <TXPDO_update+0x2c>)
 8001786:	f8b3 307d 	ldrh.w	r3, [r3, #125]	; 0x7d
 800178a:	b29b      	uxth	r3, r3
 800178c:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 8001790:	4903      	ldr	r1, [pc, #12]	; (80017a0 <TXPDO_update+0x30>)
 8001792:	461a      	mov	r2, r3
 8001794:	f7ff fb1c 	bl	8000dd0 <ESC_write>
   }
}
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	1ffea940 	.word	0x1ffea940
 80017a0:	1ffeab9c 	.word	0x1ffeab9c

080017a4 <RXPDO_update>:

/** Mandatory: Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <RXPDO_update+0x2c>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <RXPDO_update+0x2c>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	4798      	blx	r3
 80017b6:	e009      	b.n	80017cc <RXPDO_update+0x28>
   }
   else
   {
      ESC_read (SM2_sma, &Wb, ESCvar.RXPDOsize);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <RXPDO_update+0x2c>)
 80017ba:	f8b3 307f 	ldrh.w	r3, [r3, #127]	; 0x7f
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <RXPDO_update+0x30>)
 80017c6:	461a      	mov	r2, r3
 80017c8:	f7ff fade 	bl	8000d88 <ESC_read>
   }
}
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	1ffea940 	.word	0x1ffea940
 80017d4:	1ffeab94 	.word	0x1ffeab94

080017d8 <DIG_process>:
/** Mandatory: Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dd45      	ble.n	8001878 <DIG_process+0xa0>
   {

      if (CC_ATOMIC_GET(watchdog) > 0)
 80017ec:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <DIG_process+0x214>)
 80017ee:	f3bf 8f5f 	dmb	sy
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3bf 8f5f 	dmb	sy
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd0c      	ble.n	8001816 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 80017fc:	4b7b      	ldr	r3, [pc, #492]	; (80019ec <DIG_process+0x214>)
 80017fe:	f3bf 8f5f 	dmb	sy
 8001802:	e853 2f00 	ldrex	r2, [r3]
 8001806:	f102 32ff 	add.w	r2, r2, #4294967295
 800180a:	e843 2100 	strex	r1, r2, [r3]
 800180e:	2900      	cmp	r1, #0
 8001810:	d1f7      	bne.n	8001802 <DIG_process+0x2a>
 8001812:	f3bf 8f5f 	dmb	sy
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8001816:	4b75      	ldr	r3, [pc, #468]	; (80019ec <DIG_process+0x214>)
 8001818:	f3bf 8f5f 	dmb	sy
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f3bf 8f5f 	dmb	sy
 8001822:	2b00      	cmp	r3, #0
 8001824:	dc13      	bgt.n	800184e <DIG_process+0x76>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 8001826:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <DIG_process+0x218>)
 8001828:	f3bf 8f5f 	dmb	sy
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f3bf 8f5f 	dmb	sy
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 0302 	and.w	r3, r3, #2
      if (CC_ATOMIC_GET(watchdog) > 0)
      {
         CC_ATOMIC_SUB(watchdog, 1);
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd08      	ble.n	800184e <DIG_process+0x76>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_stopoutput();
 800183c:	f001 f862 	bl	8002904 <ESC_stopoutput>
         /* watchdog, invalid outputs */
         ESC_ALerror (ALERR_WATCHDOG);
 8001840:	201b      	movs	r0, #27
 8001842:	f000 f96d 	bl	8001b20 <ESC_ALerror>
         /* goto safe-op with error bit set */
         ESC_ALstatus (ESCsafeop | ESCerror);
 8001846:	2014      	movs	r0, #20
 8001848:	f000 f982 	bl	8001b50 <ESC_ALstatus>
 800184c:	e014      	b.n	8001878 <DIG_process+0xa0>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800184e:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <DIG_process+0x218>)
 8001850:	f3bf 8f5f 	dmb	sy
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f3bf 8f5f 	dmb	sy
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <DIG_process+0xa0>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8001864:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <DIG_process+0x21c>)
 8001866:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800186a:	461a      	mov	r2, r3
 800186c:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <DIG_process+0x214>)
 800186e:	f3bf 8f5f 	dmb	sy
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f3bf 8f5f 	dmb	sy
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	dd3d      	ble.n	80018fe <DIG_process+0x126>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8001882:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <DIG_process+0x218>)
 8001884:	f3bf 8f5f 	dmb	sy
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f3bf 8f5f 	dmb	sy
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	dd28      	ble.n	80018ea <DIG_process+0x112>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <DIG_process+0x21c>)
 800189a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <DIG_process+0x112>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
      {
         RXPDO_update();
 80018a8:	f7ff ff7c 	bl	80017a4 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 80018ac:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <DIG_process+0x21c>)
 80018ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <DIG_process+0x214>)
 80018b6:	f3bf 8f5f 	dmb	sy
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f3bf 8f5f 	dmb	sy
         if(ESCvar.dcsync > 0)
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <DIG_process+0x21c>)
 80018c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00c      	beq.n	80018e4 <DIG_process+0x10c>
         {
            CC_ATOMIC_ADD(ESCvar.synccounter, 1);
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <DIG_process+0x220>)
 80018cc:	f3bf 8f5f 	dmb	sy
 80018d0:	e8d3 2f4f 	ldrexb	r2, [r3]
 80018d4:	f102 0201 	add.w	r2, r2, #1
 80018d8:	e8c3 2f41 	strexb	r1, r2, [r3]
 80018dc:	2900      	cmp	r1, #0
 80018de:	d1f7      	bne.n	80018d0 <DIG_process+0xf8>
 80018e0:	f3bf 8f5f 	dmb	sy
         }
         /* Set outputs */
         cb_set_LEDs();
 80018e4:	f7ff fe8c 	bl	8001600 <cb_set_LEDs>
 80018e8:	e009      	b.n	80018fe <DIG_process+0x126>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <DIG_process+0x21c>)
 80018ec:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <DIG_process+0x126>
      {
         RXPDO_update();
 80018fa:	f7ff ff53 	bl	80017a4 <RXPDO_update>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	dd5c      	ble.n	80019c2 <DIG_process+0x1ea>
   {

      if((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <DIG_process+0x218>)
 800190a:	f3bf 8f5f 	dmb	sy
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f3bf 8f5f 	dmb	sy
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	dd0c      	ble.n	8001938 <DIG_process+0x160>
      {
         CC_ATOMIC_SUB(ESCvar.synccounter, 1);
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <DIG_process+0x220>)
 8001920:	f3bf 8f5f 	dmb	sy
 8001924:	e8d3 2f4f 	ldrexb	r2, [r3]
 8001928:	f102 32ff 	add.w	r2, r2, #4294967295
 800192c:	e8c3 2f41 	strexb	r1, r2, [r3]
 8001930:	2900      	cmp	r1, #0
 8001932:	d1f7      	bne.n	8001924 <DIG_process+0x14c>
 8001934:	f3bf 8f5f 	dmb	sy
      }

      if((ESCvar.dcsync > 0) &&
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <DIG_process+0x21c>)
 800193a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800193e:	2b00      	cmp	r3, #0
 8001940:	d038      	beq.n	80019b4 <DIG_process+0x1dc>
            ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <DIG_process+0x220>)
 8001944:	f3bf 8f5f 	dmb	sy
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f3bf 8f5f 	dmb	sy
 800194e:	b2db      	uxtb	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	b25a      	sxtb	r2, r3
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <DIG_process+0x21c>)
 8001956:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800195a:	b29b      	uxth	r3, r3
 800195c:	425b      	negs	r3, r3
      if((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
      {
         CC_ATOMIC_SUB(ESCvar.synccounter, 1);
      }

      if((ESCvar.dcsync > 0) &&
 800195e:	429a      	cmp	r2, r3
 8001960:	db0e      	blt.n	8001980 <DIG_process+0x1a8>
            ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
             (CC_ATOMIC_GET(ESCvar.synccounter) > ESCvar.synccounterlimit)))
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <DIG_process+0x220>)
 8001964:	f3bf 8f5f 	dmb	sy
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	f3bf 8f5f 	dmb	sy
 800196e:	b2db      	uxtb	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <DIG_process+0x21c>)
 8001976:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800197a:	b292      	uxth	r2, r2
      {
         CC_ATOMIC_SUB(ESCvar.synccounter, 1);
      }

      if((ESCvar.dcsync > 0) &&
            ((CC_ATOMIC_GET(ESCvar.synccounter) < -ESCvar.synccounterlimit) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	dd19      	ble.n	80019b4 <DIG_process+0x1dc>
             (CC_ATOMIC_GET(ESCvar.synccounter) > ESCvar.synccounterlimit)))
      {
         if((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <DIG_process+0x218>)
 8001982:	f3bf 8f5f 	dmb	sy
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f3bf 8f5f 	dmb	sy
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	dd0e      	ble.n	80019b4 <DIG_process+0x1dc>
         {
            DPRINT("sync error = %d\n", ESCvar.synccounter);
            ESC_stopoutput();
 8001996:	f000 ffb5 	bl	8002904 <ESC_stopoutput>
            /* Sync error */
            ESC_ALerror (ALERR_SYNCERROR);
 800199a:	201a      	movs	r0, #26
 800199c:	f000 f8c0 	bl	8001b20 <ESC_ALerror>
            /* goto safe-op with error bit set */
            ESC_ALstatus (ESCsafeop | ESCerror);
 80019a0:	2014      	movs	r0, #20
 80019a2:	f000 f8d5 	bl	8001b50 <ESC_ALstatus>
            CC_ATOMIC_SET(ESCvar.synccounter, 0);
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <DIG_process+0x220>)
 80019a8:	f3bf 8f5f 	dmb	sy
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	f3bf 8f5f 	dmb	sy
         }
      }
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <DIG_process+0x21c>)
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <DIG_process+0x1ea>
      {
         (ESCvar.application_hook)();
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <DIG_process+0x21c>)
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dd0c      	ble.n	80019e6 <DIG_process+0x20e>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <DIG_process+0x218>)
 80019ce:	f3bf 8f5f 	dmb	sy
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f3bf 8f5f 	dmb	sy
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <DIG_process+0x20e>
      {
         /* Update inputs */
         cb_get_Buttons();
 80019de:	f7ff fdf7 	bl	80015d0 <cb_get_Buttons>
         TXPDO_update();
 80019e2:	f7ff fec5 	bl	8001770 <TXPDO_update>
      }
   }
}
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	1ffea914 	.word	0x1ffea914
 80019f0:	1ffeaa13 	.word	0x1ffeaa13
 80019f4:	1ffea940 	.word	0x1ffea940
 80019f8:	1ffeaa12 	.word	0x1ffeaa12

080019fc <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8001a00:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8001a04:	4912      	ldr	r1, [pc, #72]	; (8001a50 <ecat_slv_poll+0x54>)
 8001a06:	2204      	movs	r2, #4
 8001a08:	f7ff f9be 	bl	8000d88 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <ecat_slv_poll+0x58>)
 8001a0e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <ecat_slv_poll+0x58>)
 8001a14:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001a18:	2100      	movs	r1, #0
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

   /* Check the state machine */
   ESC_state();
 8001a20:	f001 f83c 	bl	8002a9c <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8001a24:	f000 ff86 	bl	8002934 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8001a28:	f000 fce2 	bl	80023f0 <ESC_mbxprocess>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <ecat_slv_poll+0x42>
   {
      ESC_coeprocess();
 8001a32:	f002 fcdb 	bl	80043ec <ESC_coeprocess>
      ESC_foeprocess();
 8001a36:	f003 f90b 	bl	8004c50 <ESC_foeprocess>
      ESC_xoeprocess();
 8001a3a:	f000 fe15 	bl	8002668 <ESC_xoeprocess>
   }

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <ecat_slv_poll+0x58>)
 8001a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <ecat_slv_poll+0x50>
   {
      (ESCvar.esc_hw_eep_handler)();
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <ecat_slv_poll+0x58>)
 8001a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a4a:	4798      	blx	r3
   }
}
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	1ffeaa0c 	.word	0x1ffeaa0c
 8001a54:	1ffea940 	.word	0x1ffea940

08001a58 <ecat_slv>:

void ecat_slv (void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 8001a5c:	f7ff ffce 	bl	80019fc <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 8001a60:	200f      	movs	r0, #15
 8001a62:	f7ff feb9 	bl	80017d8 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ecat_slv_init>:

/**
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   ESCvar.TXPDOsize = ESCvar.ESC_SM3_sml = sizeOfPDO(TX_PDO_OBJIDX);
 8001a70:	f641 4013 	movw	r0, #7187	; 0x1c13
 8001a74:	f001 fcb4 	bl	80033e0 <sizeOfPDO>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <ecat_slv_init+0xac>)
 8001a7e:	f8a3 207b 	strh.w	r2, [r3, #123]	; 0x7b
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <ecat_slv_init+0xac>)
 8001a84:	f8b3 307b 	ldrh.w	r3, [r3, #123]	; 0x7b
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <ecat_slv_init+0xac>)
 8001a8c:	f8a3 207d 	strh.w	r2, [r3, #125]	; 0x7d
   ESCvar.RXPDOsize = ESCvar.ESC_SM2_sml = sizeOfPDO(RX_PDO_OBJIDX);
 8001a90:	f641 4012 	movw	r0, #7186	; 0x1c12
 8001a94:	f001 fca4 	bl	80033e0 <sizeOfPDO>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <ecat_slv_init+0xac>)
 8001a9e:	f8a3 2079 	strh.w	r2, [r3, #121]	; 0x79
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <ecat_slv_init+0xac>)
 8001aa4:	f8b3 3079 	ldrh.w	r3, [r3, #121]	; 0x79
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <ecat_slv_init+0xac>)
 8001aac:	f8a3 207f 	strh.w	r2, [r3, #127]	; 0x7f

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <ecat_slv_init+0xb0>)
 8001ab6:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 fa0b 	bl	8002ed4 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff f9ba 	bl	8000e38 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8001ac4:	e00c      	b.n	8001ae0 <ecat_slv_init+0x78>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 8001ac6:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <ecat_slv_init+0xb4>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	f7ff f95b 	bl	8000d88 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <ecat_slv_init+0xac>)
 8001ad4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <ecat_slv_init+0xac>)
 8001adc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
   ESC_config (config);
   /* Call HW init */
   ESC_init (config);

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <ecat_slv_init+0xac>)
 8001ae2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ea      	beq.n	8001ac6 <ecat_slv_init+0x5e>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
   }

   /* Init FoE */
   FOE_init();
 8001af0:	f002 ff38 	bl	8004964 <FOE_init>

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f000 f82b 	bl	8001b50 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f810 	bl	8001b20 <ESC_ALerror>
   ESC_stopmbx();
 8001b00:	f000 faa8 	bl	8002054 <ESC_stopmbx>
   ESC_stopinput();
 8001b04:	f000 fec0 	bl	8002888 <ESC_stopinput>
   ESC_stopoutput();
 8001b08:	f000 fefc 	bl	8002904 <ESC_stopoutput>
}
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	1ffea940 	.word	0x1ffea940
 8001b18:	1ffea914 	.word	0x1ffea914
 8001b1c:	1ffea9ca 	.word	0x1ffea9ca

08001b20 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <ESC_ALerror+0x2c>)
 8001b2c:	88fa      	ldrh	r2, [r7, #6]
 8001b2e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
   dummy = htoes (errornumber);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 8001b36:	f107 030e 	add.w	r3, r7, #14
 8001b3a:	f44f 709a 	mov.w	r0, #308	; 0x134
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2202      	movs	r2, #2
 8001b42:	f7ff f945 	bl	8000dd0 <ESC_write>
}
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	1ffea940 	.word	0x1ffea940

08001b50 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <ESC_ALstatus+0x30>)
 8001b60:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dummy = htoes ((uint16_t) status);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 8001b6a:	f107 030e 	add.w	r3, r7, #14
 8001b6e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001b72:	4619      	mov	r1, r3
 8001b74:	2202      	movs	r2, #2
 8001b76:	f7ff f92b 	bl	8000dd0 <ESC_write>
}
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	1ffea940 	.word	0x1ffea940

08001b84 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESC_read (ESCREG_SM0STATUS + (n << 3), &dummy, 2);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f107 030e 	add.w	r3, r7, #14
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f7ff f8ef 	bl	8000d88 <ESC_read>
}
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   uint16_t temp;
   sm = (_ESCsm2 *) & ESCvar.SM[n];
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3315      	adds	r3, #21
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <ESC_SMstatus+0x4c>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
   ESC_read (ESCREG_SM0STATUS + (n << 3), &temp, 2);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f107 030a 	add.w	r3, r7, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f7ff f8d3 	bl	8000d88 <ESC_read>
#if defined(EC_LITTLE_ENDIAN)
   sm->ActESC = temp >> 8;
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	719a      	strb	r2, [r3, #6]
   sm->Status = temp;
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	715a      	strb	r2, [r3, #5]

#if defined(EC_BIG_ENDIAN)
   sm->ActESC = temp;
   sm->Status = temp >> 8;
#endif
}
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	1ffea940 	.word	0x1ffea940

08001c00 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *) & ESCvar.SM[n];
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	3315      	adds	r3, #21
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <ESC_SMwritepdi+0x38>)
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_SM0PDI + (n << 3), &(sm->ActPDI), 1);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3307      	adds	r3, #7
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f7ff f8cf 	bl	8000dd0 <ESC_write>
}
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	1ffea940 	.word	0x1ffea940

08001c3c <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *) & ESCvar.SM[n];
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	3315      	adds	r3, #21
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <ESC_SMenable+0x34>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= ~ESCREG_SMENABLE_BIT;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	79db      	ldrb	r3, [r3, #7]
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffcc 	bl	8001c00 <ESC_SMwritepdi>
}
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	1ffea940 	.word	0x1ffea940

08001c74 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *) & ESCvar.SM[n];
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3315      	adds	r3, #21
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <ESC_SMdisable+0x34>)
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	79db      	ldrb	r3, [r3, #7]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffb0 	bl	8001c00 <ESC_SMwritepdi>
}
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	1ffea940 	.word	0x1ffea940

08001cac <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	4906      	ldr	r1, [pc, #24]	; (8001ccc <ESC_address+0x20>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f7ff f867 	bl	8000d88 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <ESC_address+0x24>)
 8001cbc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <ESC_address+0x24>)
 8001cc4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	1ffea9cc 	.word	0x1ffea9cc
 8001cd0:	1ffea940 	.word	0x1ffea940

08001cd4 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	f640 1081 	movw	r0, #2433	; 0x981
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f7ff f850 	bl	8000d88 <ESC_read>
   return activation;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop

08001cf4 <ESC_SYNC0cycletime>:
/** Read SYNC0 cycle time
 *
 * @return value of register SYNC0 cycle time
 */
uint32_t ESC_SYNC0cycletime (void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
   uint32_t cycletime;
   ESC_read (ESCREG_SYNC0_CYCLE_TIME, &cycletime, sizeof(cycletime));
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	f44f 601a 	mov.w	r0, #2464	; 0x9a0
 8001d00:	4619      	mov	r1, r3
 8001d02:	2204      	movs	r2, #4
 8001d04:	f7ff f840 	bl	8000d88 <ESC_read>
   cycletime = etohl (cycletime);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	607b      	str	r3, [r7, #4]
   return cycletime;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop

08001d18 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	81fb      	strh	r3, [r7, #14]

   uint8_t sync_act = ESC_SYNCactivation();
 8001d22:	f7ff ffd7 	bl	8001cd4 <ESC_SYNCactivation>
 8001d26:	4603      	mov	r3, r0
 8001d28:	737b      	strb	r3, [r7, #13]
   uint32_t sync0_cycletime = ESC_SYNC0cycletime();
 8001d2a:	f7ff ffe3 	bl	8001cf4 <ESC_SYNC0cycletime>
 8001d2e:	60b8      	str	r0, [r7, #8]
   uint16_t sync_type_supported1c32 = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	80fb      	strh	r3, [r7, #6]
   uint32_t mincycletime = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]

   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8001d38:	7b7b      	ldrb	r3, [r7, #13]
 8001d3a:	f003 0309 	and.w	r3, r3, #9
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dd5e      	ble.n	8001e00 <ESC_checkDC+0xe8>
   {
      /* If the sync unit is active at least on signal should be activated */
      if(COE_getSyncMgrPara(0x1c32, 0x4, &sync_type_supported1c32, DTYPE_UNSIGNED16) == 0)
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	f641 4032 	movw	r0, #7218	; 0x1c32
 8001d48:	2104      	movs	r1, #4
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	f001 f9c1 	bl	80030d4 <COE_getSyncMgrPara>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <ESC_checkDC+0x46>
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001d58:	2330      	movs	r3, #48	; 0x30
 8001d5a:	81fb      	strh	r3, [r7, #14]
 8001d5c:	e058      	b.n	8001e10 <ESC_checkDC+0xf8>

      }
      else if(COE_getSyncMgrPara(0x1c32, 0x5, &mincycletime, DTYPE_UNSIGNED32) == 0)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	f641 4032 	movw	r0, #7218	; 0x1c32
 8001d64:	2105      	movs	r1, #5
 8001d66:	461a      	mov	r2, r3
 8001d68:	2307      	movs	r3, #7
 8001d6a:	f001 f9b3 	bl	80030d4 <COE_getSyncMgrPara>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <ESC_checkDC+0x62>
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001d74:	2330      	movs	r3, #48	; 0x30
 8001d76:	81fb      	strh	r3, [r7, #14]
 8001d78:	e04a      	b.n	8001e10 <ESC_checkDC+0xf8>
      }
      else if(COE_getSyncMgrPara(0x10F1, 0x2, &ESCvar.synccounterlimit, DTYPE_UNSIGNED16) == 0)
 8001d7a:	f241 00f1 	movw	r0, #4337	; 0x10f1
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <ESC_checkDC+0x104>)
 8001d82:	2306      	movs	r3, #6
 8001d84:	f001 f9a6 	bl	80030d4 <COE_getSyncMgrPara>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <ESC_checkDC+0x7c>
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001d8e:	2330      	movs	r3, #48	; 0x30
 8001d90:	81fb      	strh	r3, [r7, #14]
 8001d92:	e03d      	b.n	8001e10 <ESC_checkDC+0xf8>
      }
      else if((sync_act & (ESCREG_SYNC_SYNC0_EN | ESCREG_SYNC_SYNC1_EN)) == 0)
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	f003 0306 	and.w	r3, r3, #6
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <ESC_checkDC+0x8c>
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001d9e:	2330      	movs	r3, #48	; 0x30
 8001da0:	81fb      	strh	r3, [r7, #14]
 8001da2:	e035      	b.n	8001e10 <ESC_checkDC+0xf8>
      }
      /* Do we support activated signals */
      else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC0) == 0) &&
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <ESC_checkDC+0xa6>
            ((sync_act & ESCREG_SYNC_SYNC0_EN) > 0))
 8001dae:	7b7b      	ldrb	r3, [r7, #13]
 8001db0:	f003 0302 	and.w	r3, r3, #2
      else if((sync_act & (ESCREG_SYNC_SYNC0_EN | ESCREG_SYNC_SYNC1_EN)) == 0)
      {
         ret = ALERR_DCINVALIDSYNCCFG;
      }
      /* Do we support activated signals */
      else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC0) == 0) &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	dd02      	ble.n	8001dbe <ESC_checkDC+0xa6>
            ((sync_act & ESCREG_SYNC_SYNC0_EN) > 0))
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001db8:	2330      	movs	r3, #48	; 0x30
 8001dba:	81fb      	strh	r3, [r7, #14]
 8001dbc:	e01f      	b.n	8001dfe <ESC_checkDC+0xe6>
      }
      /* Do we support activated signals */
      else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC1) == 0) &&
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <ESC_checkDC+0xc0>
            ((sync_act & ESCREG_SYNC_SYNC1_EN) > 0))
 8001dc8:	7b7b      	ldrb	r3, [r7, #13]
 8001dca:	f003 0304 	and.w	r3, r3, #4
            ((sync_act & ESCREG_SYNC_SYNC0_EN) > 0))
      {
         ret = ALERR_DCINVALIDSYNCCFG;
      }
      /* Do we support activated signals */
      else if(((sync_type_supported1c32 & SYNCTYPE_SUPPORT_DCSYNC1) == 0) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dd02      	ble.n	8001dd8 <ESC_checkDC+0xc0>
            ((sync_act & ESCREG_SYNC_SYNC1_EN) > 0))
      {
         ret = ALERR_DCINVALIDSYNCCFG;
 8001dd2:	2330      	movs	r3, #48	; 0x30
 8001dd4:	81fb      	strh	r3, [r7, #14]
 8001dd6:	e012      	b.n	8001dfe <ESC_checkDC+0xe6>
      }
      else if((sync0_cycletime != 0) && (sync0_cycletime < mincycletime))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <ESC_checkDC+0xd4>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d202      	bcs.n	8001dec <ESC_checkDC+0xd4>
      {
         ret = ALERR_DCSYNC0CYCLETIME;
 8001de6:	2336      	movs	r3, #54	; 0x36
 8001de8:	81fb      	strh	r3, [r7, #14]
 8001dea:	e008      	b.n	8001dfe <ESC_checkDC+0xe6>
      }
      else
      {
         ESCvar.dcsync = 1;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <ESC_checkDC+0x108>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
         ESCvar.synccounter = 0;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <ESC_checkDC+0x108>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8001dfc:	e008      	b.n	8001e10 <ESC_checkDC+0xf8>
 8001dfe:	e007      	b.n	8001e10 <ESC_checkDC+0xf8>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <ESC_checkDC+0x108>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      ESCvar.synccounter = 0;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <ESC_checkDC+0x108>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
   }

   return ret;
 8001e10:	89fb      	ldrh	r3, [r7, #14]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	1ffea9c2 	.word	0x1ffea9c2
 8001e20:	1ffea940 	.word	0x1ffea940

08001e24 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8001e2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e32:	4937      	ldr	r1, [pc, #220]	; (8001f10 <ESC_checkmbx+0xec>)
 8001e34:	2208      	movs	r2, #8
 8001e36:	f7fe ffa7 	bl	8000d88 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8001e3a:	f640 0008 	movw	r0, #2056	; 0x808
 8001e3e:	4935      	ldr	r1, [pc, #212]	; (8001f14 <ESC_checkmbx+0xf0>)
 8001e40:	2208      	movs	r2, #8
 8001e42:	f7fe ffa1 	bl	8000d88 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <ESC_checkmbx+0xec>)
 8001e48:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001e52:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d118      	bne.n	8001e8e <ESC_checkmbx+0x6a>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001e64:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8001e68:	885b      	ldrh	r3, [r3, #2]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d10f      	bne.n	8001e8e <ESC_checkmbx+0x6a>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	791a      	ldrb	r2, [r3, #4]
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001e74:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8001e78:	799b      	ldrb	r3, [r3, #6]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d107      	bne.n	8001e8e <ESC_checkmbx+0x6a>
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001e80:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <ESC_checkmbx+0x82>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      ESC_SMdisable (0);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff feec 	bl	8001c74 <ESC_SMdisable>
      ESC_SMdisable (1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff fee9 	bl	8001c74 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8001ea2:	2311      	movs	r3, #17
 8001ea4:	e030      	b.n	8001f08 <ESC_checkmbx+0xe4>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <ESC_checkmbx+0xf0>)
 8001ea8:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001eb2:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d118      	bne.n	8001eee <ESC_checkmbx+0xca>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001ec4:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8001ec8:	885b      	ldrh	r3, [r3, #2]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d10f      	bne.n	8001eee <ESC_checkmbx+0xca>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	791a      	ldrb	r2, [r3, #4]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001ed4:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8001ed8:	799b      	ldrb	r3, [r3, #6]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d107      	bne.n	8001eee <ESC_checkmbx+0xca>
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001ee0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10b      	bne.n	8001f06 <ESC_checkmbx+0xe2>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <ESC_checkmbx+0xf4>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      ESC_SMdisable (0);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff febc 	bl	8001c74 <ESC_SMdisable>
      ESC_SMdisable (1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff feb9 	bl	8001c74 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8001f02:	2311      	movs	r3, #17
 8001f04:	e000      	b.n	8001f08 <ESC_checkmbx+0xe4>
   }
   return state;
 8001f06:	79fb      	ldrb	r3, [r7, #7]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	1ffea9e8 	.word	0x1ffea9e8
 8001f14:	1ffea9f0 	.word	0x1ffea9f0
 8001f18:	1ffea940 	.word	0x1ffea940

08001f1c <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = ESCvar.mbxsize;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <ESC_startmbx+0x90>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <ESC_startmbx+0x90>)
 8001f2c:	f8c2 306d 	str.w	r3, [r2, #109]	; 0x6d
   ESCvar.activemb0 = &ESCvar.mb[0];
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <ESC_startmbx+0x90>)
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <ESC_startmbx+0x94>)
 8001f34:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
   ESCvar.activemb1 = &ESCvar.mb[1];
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <ESC_startmbx+0x90>)
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <ESC_startmbx+0x98>)
 8001f3c:	f8c3 2075 	str.w	r2, [r3, #117]	; 0x75


   ESC_SMenable (0);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fe7b 	bl	8001c3c <ESC_SMenable>
   ESC_SMenable (1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff fe78 	bl	8001c3c <ESC_SMenable>
   ESC_SMstatus (0);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fe2f 	bl	8001bb0 <ESC_SMstatus>
   ESC_SMstatus (1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff fe2c 	bl	8001bb0 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff62 	bl	8001e24 <ESC_checkmbx>
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <ESC_startmbx+0x62>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001f6e:	2016      	movs	r0, #22
 8001f70:	f7ff fdd6 	bl	8001b20 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <ESC_startmbx+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001f7c:	e010      	b.n	8001fa0 <ESC_startmbx+0x84>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <ESC_startmbx+0x90>)
 8001f80:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8001f84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <ESC_startmbx+0x90>)
 8001f8c:	f892 30a0 	ldrb.w	r3, [r2, #160]	; 0xa0
 8001f90:	f361 0341 	bfi	r3, r1, #1, #1
 8001f94:	f882 30a0 	strb.w	r3, [r2, #160]	; 0xa0
      ESCvar.MBXrun = 1;
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <ESC_startmbx+0x90>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   }
   return state;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	1ffea940 	.word	0x1ffea940
 8001fb0:	1ffea950 	.word	0x1ffea950
 8001fb4:	1ffea958 	.word	0x1ffea958

08001fb8 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = ESCvar.mbxsizeboot;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <ESC_startmbxboot+0x90>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a20      	ldr	r2, [pc, #128]	; (8002048 <ESC_startmbxboot+0x90>)
 8001fc8:	f8c2 306d 	str.w	r3, [r2, #109]	; 0x6d
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <ESC_startmbxboot+0x90>)
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <ESC_startmbxboot+0x94>)
 8001fd0:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <ESC_startmbxboot+0x90>)
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <ESC_startmbxboot+0x98>)
 8001fd8:	f8c3 2075 	str.w	r2, [r3, #117]	; 0x75

   ESC_SMenable (0);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fe2d 	bl	8001c3c <ESC_SMenable>
   ESC_SMenable (1);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff fe2a 	bl	8001c3c <ESC_SMenable>
   ESC_SMstatus (0);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fde1 	bl	8001bb0 <ESC_SMstatus>
   ESC_SMstatus (1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff fdde 	bl	8001bb0 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff14 	bl	8001e24 <ESC_checkmbx>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <ESC_startmbxboot+0x62>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 800200a:	2015      	movs	r0, #21
 800200c:	f7ff fd88 	bl	8001b20 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <ESC_startmbxboot+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002018:	e010      	b.n	800203c <ESC_startmbxboot+0x84>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <ESC_startmbxboot+0x90>)
 800201c:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002020:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <ESC_startmbxboot+0x90>)
 8002028:	f892 30a0 	ldrb.w	r3, [r2, #160]	; 0xa0
 800202c:	f361 0341 	bfi	r3, r1, #1, #1
 8002030:	f882 30a0 	strb.w	r3, [r2, #160]	; 0xa0
      ESCvar.MBXrun = 1;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <ESC_startmbxboot+0x90>)
 8002036:	2201      	movs	r2, #1
 8002038:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   }
   return state;
 800203c:	79fb      	ldrb	r3, [r7, #7]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	1ffea940 	.word	0x1ffea940
 800204c:	1ffea960 	.word	0x1ffea960
 8002050:	1ffea968 	.word	0x1ffea968

08002054 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <ESC_stopmbx+0xa0>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   ESC_SMdisable (0);
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff fe06 	bl	8001c74 <ESC_SMdisable>
   ESC_SMdisable (1);
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff fe03 	bl	8001c74 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e006      	b.n	8002082 <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <ESC_stopmbx+0xa4>)
 8002078:	2100      	movs	r1, #0
 800207a:	54d1      	strb	r1, [r2, r3]
{
   uint8_t n;
   ESCvar.MBXrun = 0;
   ESC_SMdisable (0);
   ESC_SMdisable (1);
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	3301      	adds	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <ESC_stopmbx+0xa0>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbf3      	blt.n	8002074 <ESC_stopmbx+0x20>
   {
      MBXcontrol[n].state = MBXstate_idle;
   }
   ESCvar.mbxoutpost = 0;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <ESC_stopmbx+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   ESCvar.mbxbackup = 0;
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <ESC_stopmbx+0xa0>)
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.xoe = 0;
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <ESC_stopmbx+0xa0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
   ESCvar.mbxfree = 1;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   ESCvar.toggle = 0;
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020ae:	f892 30a0 	ldrb.w	r3, [r2, #160]	; 0xa0
 80020b2:	f36f 0341 	bfc	r3, #1, #1
 80020b6:	f882 30a0 	strb.w	r3, [r2, #160]	; 0xa0
   ESCvar.mbxincnt = 0;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.segmented = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
   ESCvar.frags = 0;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
   ESCvar.fragsleft = 0;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   ESCvar.txcue = 0;
 80020e6:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <ESC_stopmbx+0xa0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	1ffea940 	.word	0x1ffea940
 80020f8:	1ffeab98 	.word	0x1ffeab98

080020fc <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <ESC_readmbx+0x90>)
 8002104:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <ESC_readmbx+0x94>)
 8002108:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	2206      	movs	r2, #6
 8002114:	f7fe fe38 	bl	8000d88 <ESC_read>
   length = etohs (MB->header.length);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	461a      	mov	r2, r3
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <ESC_readmbx+0x94>)
 8002126:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 800212a:	885b      	ldrh	r3, [r3, #2]
 800212c:	3b06      	subs	r3, #6
 800212e:	429a      	cmp	r2, r3
 8002130:	d906      	bls.n	8002140 <ESC_readmbx+0x44>
   {
      length = ESC_MBX0_sml - ESC_MBXHSIZE;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <ESC_readmbx+0x94>)
 8002134:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	3b06      	subs	r3, #6
 800213c:	b29b      	uxth	r3, r3
 800213e:	807b      	strh	r3, [r7, #2]
   }
   ESC_read (ESC_MBX0_sma + ESC_MBXHSIZE, MB->b, length);
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <ESC_readmbx+0x94>)
 8002142:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	3306      	adds	r3, #6
 800214a:	b299      	uxth	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	1d9a      	adds	r2, r3, #6
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	f7fe fe16 	bl	8000d88 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	3306      	adds	r3, #6
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <ESC_readmbx+0x94>)
 8002162:	f8d2 2071 	ldr.w	r2, [r2, #113]	; 0x71
 8002166:	8852      	ldrh	r2, [r2, #2]
 8002168:	4293      	cmp	r3, r2
 800216a:	d209      	bcs.n	8002180 <ESC_readmbx+0x84>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <ESC_readmbx+0x94>)
 800216e:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8002172:	889a      	ldrh	r2, [r3, #4]
 8002174:	1cbb      	adds	r3, r7, #2
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	2201      	movs	r2, #1
 800217c:	f7fe fe04 	bl	8000d88 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <ESC_readmbx+0x98>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	1ffeaa14 	.word	0x1ffeaa14
 8002190:	1ffea940 	.word	0x1ffea940
 8002194:	1ffeab98 	.word	0x1ffeab98

08002198 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <ESC_writembx+0x94>)
 80021a6:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a20      	ldr	r2, [pc, #128]	; (8002230 <ESC_writembx+0x98>)
 80021b0:	4413      	add	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	4313      	orrs	r3, r2
 80021c2:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 80021c4:	8afa      	ldrh	r2, [r7, #22]
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <ESC_writembx+0x94>)
 80021c8:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	3b06      	subs	r3, #6
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d905      	bls.n	80021e0 <ESC_writembx+0x48>
   {
      length = ESC_MBX1_sml - ESC_MBXHSIZE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <ESC_writembx+0x94>)
 80021d6:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 80021da:	885b      	ldrh	r3, [r3, #2]
 80021dc:	3b06      	subs	r3, #6
 80021de:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <ESC_writembx+0x94>)
 80021e2:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	3306      	adds	r3, #6
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7fe fdec 	bl	8000dd0 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	3306      	adds	r3, #6
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <ESC_writembx+0x94>)
 80021fe:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 8002202:	8852      	ldrh	r2, [r2, #2]
 8002204:	4293      	cmp	r3, r2
 8002206:	d20a      	bcs.n	800221e <ESC_writembx+0x86>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <ESC_writembx+0x94>)
 800220a:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 800220e:	889a      	ldrh	r2, [r3, #4]
 8002210:	f107 030f 	add.w	r3, r7, #15
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	2201      	movs	r2, #1
 800221a:	f7fe fdd9 	bl	8000dd0 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 800221e:	4b03      	ldr	r3, [pc, #12]	; (800222c <ESC_writembx+0x94>)
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	1ffea940 	.word	0x1ffea940
 8002230:	1ffeaa14 	.word	0x1ffeaa14

08002234 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <ESC_ackmbxread+0x2c>)
 8002240:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	2201      	movs	r2, #1
 800224e:	f7fe fdbf 	bl	8000dd0 <ESC_write>
   ESCvar.mbxfree = 1;
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <ESC_ackmbxread+0x2c>)
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	1ffea940 	.word	0x1ffea940

08002264 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <ESC_claimbuffer+0xd0>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8002274:	e002      	b.n	800227c <ESC_claimbuffer+0x18>
   {
      n--;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	3b01      	subs	r3, #1
 800227a:	71fb      	strb	r3, [r7, #7]
 */
uint8_t ESC_claimbuffer (void)
{
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
   while ((n > 0) && (MBXcontrol[n].state))
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <ESC_claimbuffer+0x28>
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <ESC_claimbuffer+0xd4>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f4      	bne.n	8002276 <ESC_claimbuffer+0x12>
   {
      n--;
   }
   if (n)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d048      	beq.n	8002324 <ESC_claimbuffer+0xc0>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4a28      	ldr	r2, [pc, #160]	; (8002338 <ESC_claimbuffer+0xd4>)
 8002296:	2102      	movs	r1, #2
 8002298:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <ESC_claimbuffer+0xd0>)
 800229e:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a25      	ldr	r2, [pc, #148]	; (800233c <ESC_claimbuffer+0xd8>)
 80022a8:	4413      	add	r3, r2
 80022aa:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022ae:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022be:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022ca:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      if (ESCvar.mbxcnt == 0)
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022d0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <ESC_claimbuffer+0x7c>
      {
         ESCvar.mbxcnt = 1;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <ESC_claimbuffer+0xd0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      }
      MBh->address = htoes (0x0000);      // destination is master
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	709a      	strb	r2, [r3, #2]
 80022e6:	2200      	movs	r2, #0
 80022e8:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	7913      	ldrb	r3, [r2, #4]
 80022ee:	f36f 0305 	bfc	r3, #0, #6
 80022f2:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	7913      	ldrb	r3, [r2, #4]
 80022f8:	f36f 1387 	bfc	r3, #6, #2
 80022fc:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt;
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <ESC_claimbuffer+0xd0>)
 8002300:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	7953      	ldrb	r3, [r2, #5]
 800230e:	f361 1307 	bfi	r3, r1, #4, #4
 8002312:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <ESC_claimbuffer+0xd0>)
 8002316:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800231a:	3301      	adds	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <ESC_claimbuffer+0xd0>)
 8002320:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
   }
   return n;
 8002324:	79fb      	ldrb	r3, [r7, #7]
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	1ffea940 	.word	0x1ffea940
 8002338:	1ffeab98 	.word	0x1ffeab98
 800233c:	1ffeaa14 	.word	0x1ffeaa14

08002340 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <ESC_outreqbuffer+0x38>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8002350:	e002      	b.n	8002358 <ESC_outreqbuffer+0x18>
   {
      n--;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	3b01      	subs	r3, #1
 8002356:	71fb      	strb	r3, [r7, #7]
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
   uint8_t n = ESC_MBXBUFFERS - 1;
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <ESC_outreqbuffer+0x28>
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <ESC_outreqbuffer+0x3c>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d1f4      	bne.n	8002352 <ESC_outreqbuffer+0x12>
   {
      n--;
   }
   return n;
 8002368:	79fb      	ldrb	r3, [r7, #7]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	1ffea940 	.word	0x1ffea940
 800237c:	1ffeab98 	.word	0x1ffeab98

08002380 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 800238a:	f7ff ff6b 	bl	8002264 <ESC_claimbuffer>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d022      	beq.n	80023de <MBX_error+0x5e>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <MBX_error+0x64>)
 800239c:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <MBX_error+0x68>)
 80023a6:	4413      	add	r3, r2
 80023a8:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f042 0204 	orr.w	r2, r2, #4
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	7953      	ldrb	r3, [r2, #5]
 80023bc:	f36f 0303 	bfc	r3, #0, #4
 80023c0:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	719a      	strb	r2, [r3, #6]
 80023cc:	2200      	movs	r2, #0
 80023ce:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <MBX_error+0x6c>)
 80023da:	2103      	movs	r1, #3
 80023dc:	54d1      	strb	r1, [r2, r3]
   }
}
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	1ffea940 	.word	0x1ffea940
 80023e8:	1ffeaa14 	.word	0x1ffeaa14
 80023ec:	1ffeab98 	.word	0x1ffeab98

080023f0 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 80023fa:	4b98      	ldr	r3, [pc, #608]	; (800265c <ESC_mbxprocess+0x26c>)
 80023fc:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 80023fe:	4b98      	ldr	r3, [pc, #608]	; (8002660 <ESC_mbxprocess+0x270>)
 8002400:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 8002408:	2300      	movs	r3, #0
 800240a:	e123      	b.n	8002654 <ESC_mbxprocess+0x264>
   }

   /* SM0/1 access or SMn change event */
   if (ESCvar.ALevent & ESCREG_ALEVENT_SM_MASK)
 800240c:	4b94      	ldr	r3, [pc, #592]	; (8002660 <ESC_mbxprocess+0x270>)
 800240e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002412:	b29b      	uxth	r3, r3
 8002414:	f403 7344 	and.w	r3, r3, #784	; 0x310
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <ESC_mbxprocess+0x38>
   {
      ESC_SMstatus (0);
 800241c:	2000      	movs	r0, #0
 800241e:	f7ff fbc7 	bl	8001bb0 <ESC_SMstatus>
      ESC_SMstatus (1);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff fbc4 	bl	8001bb0 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && ESCvar.SM[1].IntR)
 8002428:	4b8d      	ldr	r3, [pc, #564]	; (8002660 <ESC_mbxprocess+0x270>)
 800242a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03d      	beq.n	80024ae <ESC_mbxprocess+0xbe>
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <ESC_mbxprocess+0x270>)
 8002434:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d035      	beq.n	80024ae <ESC_mbxprocess+0xbe>
   {
      ESC_ackmbxread ();
 8002442:	f7ff fef7 	bl	8002234 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 8002446:	4b86      	ldr	r3, [pc, #536]	; (8002660 <ESC_mbxprocess+0x270>)
 8002448:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <ESC_mbxprocess+0x6e>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 8002450:	4b83      	ldr	r3, [pc, #524]	; (8002660 <ESC_mbxprocess+0x270>)
 8002452:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002456:	461a      	mov	r2, r3
 8002458:	4b82      	ldr	r3, [pc, #520]	; (8002664 <ESC_mbxprocess+0x274>)
 800245a:	2100      	movs	r1, #0
 800245c:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800245e:	4b80      	ldr	r3, [pc, #512]	; (8002660 <ESC_mbxprocess+0x270>)
 8002460:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002464:	461a      	mov	r2, r3
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <ESC_mbxprocess+0x274>)
 8002468:	5c9b      	ldrb	r3, [r3, r2]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d105      	bne.n	800247a <ESC_mbxprocess+0x8a>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 800246e:	4b7c      	ldr	r3, [pc, #496]	; (8002660 <ESC_mbxprocess+0x270>)
 8002470:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe8f 	bl	8002198 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800247a:	4b79      	ldr	r3, [pc, #484]	; (8002660 <ESC_mbxprocess+0x270>)
 800247c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002480:	461a      	mov	r2, r3
 8002482:	4b78      	ldr	r3, [pc, #480]	; (8002664 <ESC_mbxprocess+0x274>)
 8002484:	2105      	movs	r1, #5
 8002486:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <ESC_mbxprocess+0x270>)
 800248a:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800248e:	4b74      	ldr	r3, [pc, #464]	; (8002660 <ESC_mbxprocess+0x270>)
 8002490:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      ESCvar.mbxoutpost = 0;
 8002494:	4b72      	ldr	r3, [pc, #456]	; (8002660 <ESC_mbxprocess+0x270>)
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 800249c:	4b70      	ldr	r3, [pc, #448]	; (8002660 <ESC_mbxprocess+0x270>)
 800249e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <ESC_mbxprocess+0xba>
      {
         return 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0d4      	b.n	8002654 <ESC_mbxprocess+0x264>
      }
      return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e0d2      	b.n	8002654 <ESC_mbxprocess+0x264>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 80024ae:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <ESC_mbxprocess+0x270>)
 80024b0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 80024b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b69      	ldr	r3, [pc, #420]	; (8002660 <ESC_mbxprocess+0x270>)
 80024bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d047      	beq.n	800255a <ESC_mbxprocess+0x16a>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <ESC_mbxprocess+0x270>)
 80024cc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <ESC_mbxprocess+0xee>
 80024d4:	4b62      	ldr	r3, [pc, #392]	; (8002660 <ESC_mbxprocess+0x270>)
 80024d6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03b      	beq.n	8002556 <ESC_mbxprocess+0x166>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <ESC_mbxprocess+0x270>)
 80024e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <ESC_mbxprocess+0x106>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 80024e8:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <ESC_mbxprocess+0x270>)
 80024ea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fe52 	bl	8002198 <ESC_writembx>
 80024f4:	e012      	b.n	800251c <ESC_mbxprocess+0x12c>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7ff fbbc 	bl	8001c74 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <ESC_mbxprocess+0x270>)
 80024fe:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002502:	461a      	mov	r2, r3
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <ESC_mbxprocess+0x274>)
 8002506:	2106      	movs	r1, #6
 8002508:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff fb96 	bl	8001c3c <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <ESC_mbxprocess+0x270>)
 8002512:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe3e 	bl	8002198 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <ESC_mbxprocess+0x270>)
 800251e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002522:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002526:	b2d9      	uxtb	r1, r3
 8002528:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <ESC_mbxprocess+0x270>)
 800252a:	f892 30a0 	ldrb.w	r3, [r2, #160]	; 0xa0
 800252e:	f361 0341 	bfi	r3, r1, #1, #1
 8002532:	f882 30a0 	strb.w	r3, [r2, #160]	; 0xa0
         ESCvar.SM[1].PDIrep = ESCvar.toggle;
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <ESC_mbxprocess+0x270>)
 8002538:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800253c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002540:	b2d9      	uxtb	r1, r3
 8002542:	4a47      	ldr	r2, [pc, #284]	; (8002660 <ESC_mbxprocess+0x270>)
 8002544:	f892 30b7 	ldrb.w	r3, [r2, #183]	; 0xb7
 8002548:	f361 0341 	bfi	r3, r1, #1, #1
 800254c:	f882 30b7 	strb.w	r3, [r2, #183]	; 0xb7
         ESC_SMwritepdi (1);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff fb55 	bl	8001c00 <ESC_SMwritepdi>
      }
      return 0;
 8002556:	2300      	movs	r3, #0
 8002558:	e07c      	b.n	8002654 <ESC_mbxprocess+0x264>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <ESC_mbxprocess+0x270>)
 800255c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02c      	beq.n	80025be <ESC_mbxprocess+0x1ce>
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <ESC_mbxprocess+0x270>)
 8002566:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <ESC_mbxprocess+0x18e>
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <ESC_mbxprocess+0x270>)
 8002570:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11f      	bne.n	80025be <ESC_mbxprocess+0x1ce>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 800257e:	f7ff fedf 	bl	8002340 <ESC_outreqbuffer>
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d018      	beq.n	80025be <ESC_mbxprocess+0x1ce>
      {
         ESC_writembx (mbxhandle);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe02 	bl	8002198 <ESC_writembx>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <ESC_mbxprocess+0x274>)
 8002598:	2104      	movs	r1, #4
 800259a:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 800259c:	4a30      	ldr	r2, [pc, #192]	; (8002660 <ESC_mbxprocess+0x270>)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
         if (ESCvar.txcue)
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <ESC_mbxprocess+0x270>)
 80025a6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <ESC_mbxprocess+0x1ce>
         {
            ESCvar.txcue--;
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <ESC_mbxprocess+0x270>)
 80025b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <ESC_mbxprocess+0x270>)
 80025ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <ESC_mbxprocess+0x270>)
 80025c0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d041      	beq.n	8002652 <ESC_mbxprocess+0x262>
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <ESC_mbxprocess+0x274>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d13d      	bne.n	8002652 <ESC_mbxprocess+0x262>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <ESC_mbxprocess+0x270>)
 80025d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d138      	bne.n	8002652 <ESC_mbxprocess+0x262>
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <ESC_mbxprocess+0x270>)
 80025e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d133      	bne.n	8002652 <ESC_mbxprocess+0x262>
   {
      ESC_readmbx ();
 80025ea:	f7ff fd87 	bl	80020fc <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <ESC_mbxprocess+0x270>)
 80025f0:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 80025f4:	f36f 03c3 	bfc	r3, #3, #1
 80025f8:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
      if (etohs (MBh->length) == 0)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <ESC_mbxprocess+0x222>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8002606:	2005      	movs	r0, #5
 8002608:	f7ff feba 	bl	8002380 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <ESC_mbxprocess+0x274>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	795b      	ldrb	r3, [r3, #5]
 8002616:	f023 030f 	bic.w	r3, r3, #15
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <ESC_mbxprocess+0x24c>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	795b      	ldrb	r3, [r3, #5]
 8002624:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <ESC_mbxprocess+0x270>)
 800262e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002632:	429a      	cmp	r2, r3
 8002634:	d102      	bne.n	800263c <ESC_mbxprocess+0x24c>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <ESC_mbxprocess+0x274>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	795b      	ldrb	r3, [r3, #5]
 8002640:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <ESC_mbxprocess+0x270>)
 800264a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
      return 1;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <ESC_mbxprocess+0x264>
   }

   return 0;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	1ffeaa14 	.word	0x1ffeaa14
 8002660:	1ffea940 	.word	0x1ffea940
 8002664:	1ffeab98 	.word	0x1ffeab98

08002668 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <ESC_xoeprocess+0x5c>)
 8002670:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <ESC_xoeprocess+0x12>
   {
      return;
 8002678:	e020      	b.n	80026bc <ESC_xoeprocess+0x54>
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <ESC_xoeprocess+0x5c>)
 800267c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11b      	bne.n	80026bc <ESC_xoeprocess+0x54>
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <ESC_xoeprocess+0x60>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d117      	bne.n	80026bc <ESC_xoeprocess+0x54>
   {
      mbh = (_MBXh *) &MBX[0];
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <ESC_xoeprocess+0x64>)
 800268e:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	795b      	ldrb	r3, [r3, #5]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <ESC_xoeprocess+0x40>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <ESC_xoeprocess+0x48>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 80026a8:	2005      	movs	r0, #5
 80026aa:	f7ff fe69 	bl	8002380 <MBX_error>
 80026ae:	e002      	b.n	80026b6 <ESC_xoeprocess+0x4e>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f7ff fe65 	bl	8002380 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <ESC_xoeprocess+0x60>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
   }
}
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	1ffea940 	.word	0x1ffea940
 80026c8:	1ffeab98 	.word	0x1ffeab98
 80026cc:	1ffeaa14 	.word	0x1ffeaa14

080026d0 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 80026da:	f44f 6001 	mov.w	r0, #2064	; 0x810
 80026de:	4930      	ldr	r1, [pc, #192]	; (80027a0 <ESC_checkSM23+0xd0>)
 80026e0:	2208      	movs	r2, #8
 80026e2:	f7fe fb51 	bl	8000d88 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 80026e6:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <ESC_checkSM23+0xd0>)
 80026e8:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM2_sma) || (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <ESC_checkSM23+0xd4>)
 80026f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d118      	bne.n	800272c <ESC_checkSM23+0x5c>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002702:	f8b3 3079 	ldrh.w	r3, [r3, #121]	; 0x79
 8002706:	b29b      	uxth	r3, r3
 8002708:	429a      	cmp	r2, r3
 800270a:	d10f      	bne.n	800272c <ESC_checkSM23+0x5c>
       || (SM->Command != ESC_SM2_smc) || !(SM->ActESC & ESC_SM2_act))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	791a      	ldrb	r2, [r3, #4]
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002712:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002716:	429a      	cmp	r2, r3
 8002718:	d108      	bne.n	800272c <ESC_checkSM23+0x5c>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	799a      	ldrb	r2, [r3, #6]
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002720:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002724:	4013      	ands	r3, r2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <ESC_checkSM23+0x68>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <ESC_checkSM23+0xd4>)
 800272e:	2204      	movs	r2, #4
 8002730:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      /* fail state change */
      return (ESCpreop | ESCerror);
 8002734:	2312      	movs	r3, #18
 8002736:	e02f      	b.n	8002798 <ESC_checkSM23+0xc8>
   }
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8002738:	f640 0018 	movw	r0, #2072	; 0x818
 800273c:	491a      	ldr	r1, [pc, #104]	; (80027a8 <ESC_checkSM23+0xd8>)
 800273e:	2208      	movs	r2, #8
 8002740:	f7fe fb22 	bl	8000d88 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <ESC_checkSM23+0xd8>)
 8002746:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM3_sma) || (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002750:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002752:	b29b      	uxth	r3, r3
 8002754:	429a      	cmp	r2, r3
 8002756:	d118      	bne.n	800278a <ESC_checkSM23+0xba>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	885b      	ldrh	r3, [r3, #2]
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002760:	f8b3 307b 	ldrh.w	r3, [r3, #123]	; 0x7b
 8002764:	b29b      	uxth	r3, r3
 8002766:	429a      	cmp	r2, r3
 8002768:	d10f      	bne.n	800278a <ESC_checkSM23+0xba>
       || (SM->Command != ESC_SM3_smc) || !(SM->ActESC & ESC_SM3_act))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	791a      	ldrb	r2, [r3, #4]
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <ESC_checkSM23+0xd4>)
 8002770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002774:	429a      	cmp	r2, r3
 8002776:	d108      	bne.n	800278a <ESC_checkSM23+0xba>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	799a      	ldrb	r2, [r3, #6]
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <ESC_checkSM23+0xd4>)
 800277e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002782:	4013      	ands	r3, r2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <ESC_checkSM23+0xd4>)
 800278c:	2208      	movs	r2, #8
 800278e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      /* fail state change */
      return (ESCpreop | ESCerror);
 8002792:	2312      	movs	r3, #18
 8002794:	e000      	b.n	8002798 <ESC_checkSM23+0xc8>
   }
   return state;
 8002796:	79fb      	ldrb	r3, [r7, #7]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	1ffea9f8 	.word	0x1ffea9f8
 80027a4:	1ffea940 	.word	0x1ffea940
 80027a8:	1ffeaa00 	.word	0x1ffeaa00

080027ac <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff89 	bl	80026d0 <ESC_checkSM23>
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d00a      	beq.n	80027de <ESC_startinput+0x32>
   {
      ESC_SMenable (3);
 80027c8:	2003      	movs	r0, #3
 80027ca:	f7ff fa37 	bl	8001c3c <ESC_SMenable>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <ESC_startinput+0xd4>)
 80027d0:	f3bf 8f5f 	dmb	sy
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	f3bf 8f5f 	dmb	sy
 80027dc:	e013      	b.n	8002806 <ESC_startinput+0x5a>
   }
   else
   {
      ESC_SMdisable (2);
 80027de:	2002      	movs	r0, #2
 80027e0:	f7ff fa48 	bl	8001c74 <ESC_SMdisable>
      ESC_SMdisable (3);
 80027e4:	2003      	movs	r0, #3
 80027e6:	f7ff fa45 	bl	8001c74 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <ESC_startinput+0xd8>)
 80027ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <ESC_startinput+0x54>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 80027f8:	201e      	movs	r0, #30
 80027fa:	f7ff f991 	bl	8001b20 <ESC_ALerror>
 80027fe:	e002      	b.n	8002806 <ESC_startinput+0x5a>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8002800:	201d      	movs	r0, #29
 8002802:	f7ff f98d 	bl	8001b20 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <ESC_startinput+0xd8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <ESC_startinput+0x66>
   {
      return state;
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	e032      	b.n	8002878 <ESC_startinput+0xcc>
   }

   if (state != (ESCpreop | ESCerror))
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d02e      	beq.n	8002876 <ESC_startinput+0xca>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 8002818:	f7ff fa7e 	bl	8001d18 <ESC_checkDC>
 800281c:	4603      	mov	r3, r0
 800281e:	81fb      	strh	r3, [r7, #14]
      if(dc_check_result > 0)
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <ESC_startinput+0xa2>
      {
         ESC_ALerror (dc_check_result);
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f979 	bl	8001b20 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 800282e:	2312      	movs	r3, #18
 8002830:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 8002832:	2002      	movs	r0, #2
 8002834:	f7ff fa1e 	bl	8001c74 <ESC_SMdisable>
         ESC_SMdisable (3);
 8002838:	2003      	movs	r0, #3
 800283a:	f7ff fa1b 	bl	8001c74 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <ESC_startinput+0xd4>)
 8002840:	f3bf 8f5f 	dmb	sy
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	f3bf 8f5f 	dmb	sy
 800284c:	e013      	b.n	8002876 <ESC_startinput+0xca>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <ESC_startinput+0xd8>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00f      	beq.n	8002876 <ESC_startinput+0xca>
         {
            if(ESCvar.dcsync > 0)
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <ESC_startinput+0xd8>)
 8002858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <ESC_startinput+0xc0>
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_DC_SYNC0 |
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <ESC_startinput+0xd8>)
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	f240 4004 	movw	r0, #1028	; 0x404
 8002868:	4798      	blx	r3
 800286a:	e004      	b.n	8002876 <ESC_startinput+0xca>
                     ESCREG_ALEVENT_SM2);
            }
            else
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_SM2);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <ESC_startinput+0xd8>)
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002874:	4798      	blx	r3
            }
         }
      }
   }

   return state;
 8002876:	79fb      	ldrb	r3, [r7, #7]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	1ffeaa13 	.word	0x1ffeaa13
 8002884:	1ffea940 	.word	0x1ffea940

08002888 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <ESC_stopinput+0x3c>)
 800288e:	f3bf 8f5f 	dmb	sy
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	f3bf 8f5f 	dmb	sy
   ESC_SMdisable (3);
 800289a:	2003      	movs	r0, #3
 800289c:	f7ff f9ea 	bl	8001c74 <ESC_SMdisable>
   ESC_SMdisable (2);
 80028a0:	2002      	movs	r0, #2
 80028a2:	f7ff f9e7 	bl	8001c74 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <ESC_stopinput+0x40>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <ESC_stopinput+0x40>)
 80028b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
   ESC_SMdisable (3);
   ESC_SMdisable (2);

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <ESC_stopinput+0x40>)
 80028b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ba:	f240 4004 	movw	r0, #1028	; 0x404
 80028be:	4798      	blx	r3
            ESCREG_ALEVENT_SM2);
   }
}
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	1ffeaa13 	.word	0x1ffeaa13
 80028c8:	1ffea940 	.word	0x1ffea940

080028cc <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]

   ESC_SMenable (2);
 80028d6:	2002      	movs	r0, #2
 80028d8:	f7ff f9b0 	bl	8001c3c <ESC_SMenable>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <ESC_startoutput+0x34>)
 80028de:	f3bf 8f5f 	dmb	sy
 80028e2:	e8d3 2f4f 	ldrexb	r2, [r3]
 80028e6:	f042 0202 	orr.w	r2, r2, #2
 80028ea:	e8c3 2f41 	strexb	r1, r2, [r3]
 80028ee:	2900      	cmp	r1, #0
 80028f0:	d1f7      	bne.n	80028e2 <ESC_startoutput+0x16>
 80028f2:	f3bf 8f5f 	dmb	sy
   return state;
 80028f6:	79fb      	ldrb	r3, [r7, #7]

}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	1ffeaa13 	.word	0x1ffeaa13

08002904 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <ESC_stopoutput+0x2c>)
 800290a:	f3bf 8f5f 	dmb	sy
 800290e:	e8d3 2f4f 	ldrexb	r2, [r3]
 8002912:	f002 0201 	and.w	r2, r2, #1
 8002916:	e8c3 2f41 	strexb	r1, r2, [r3]
 800291a:	2900      	cmp	r1, #0
 800291c:	d1f7      	bne.n	800290e <ESC_stopoutput+0xa>
 800291e:	f3bf 8f5f 	dmb	sy
   ESC_SMdisable (2);
 8002922:	2002      	movs	r0, #2
 8002924:	f7ff f9a6 	bl	8001c74 <ESC_SMdisable>
   APP_safeoutput ();
 8002928:	f7fe ff0a 	bl	8001740 <APP_safeoutput>
}
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	1ffeaa13 	.word	0x1ffeaa13

08002934 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 800293a:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <ESC_sm_act_event+0x160>)
 800293c:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002940:	b29b      	uxth	r3, r3
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d100      	bne.n	800294c <ESC_sm_act_event+0x18>
   {
      /* nothing to do */
      return;
 800294a:	e09f      	b.n	8002a8c <ESC_sm_act_event+0x158>
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <ESC_sm_act_event+0x160>)
 800294e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002952:	b29b      	uxth	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <ESC_sm_act_event+0x160>)
 800295e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002962:	b29b      	uxth	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	717b      	strb	r3, [r7, #5]
   an = as;
 800296c:	797b      	ldrb	r3, [r7, #5]
 800296e:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <ESC_sm_act_event+0x4c>
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <ESC_sm_act_event+0x5c>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 8002990:	797b      	ldrb	r3, [r7, #5]
 8002992:	f003 030e 	and.w	r3, r3, #14
 8002996:	2b00      	cmp	r3, #0
 8002998:	d060      	beq.n	8002a5c <ESC_sm_act_event+0x128>
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d05d      	beq.n	8002a5c <ESC_sm_act_event+0x128>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <ESC_sm_act_event+0x160>)
 80029a2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d058      	beq.n	8002a5c <ESC_sm_act_event+0x128>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 80029aa:	797b      	ldrb	r3, [r7, #5]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fa39 	bl	8001e24 <ESC_checkmbx>
 80029b2:	4603      	mov	r3, r0
 80029b4:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 80029b6:	797b      	ldrb	r3, [r7, #5]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe89 	bl	80026d0 <ESC_checkSM23>
 80029be:	4603      	mov	r3, r0
 80029c0:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80029c2:	79bb      	ldrb	r3, [r7, #6]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <ESC_sm_act_event+0xa4>
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d100      	bne.n	80029d8 <ESC_sm_act_event+0xa4>
 80029d6:	e040      	b.n	8002a5a <ESC_sm_act_event+0x126>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 80029d8:	793b      	ldrb	r3, [r7, #4]
 80029da:	2b11      	cmp	r3, #17
 80029dc:	d11a      	bne.n	8002a14 <ESC_sm_act_event+0xe0>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <ESC_sm_act_event+0x164>)
 80029e0:	f3bf 8f5f 	dmb	sy
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	f3bf 8f5f 	dmb	sy
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <ESC_sm_act_event+0xc4>
         {
            ESC_stopoutput ();
 80029f0:	f7ff ff88 	bl	8002904 <ESC_stopoutput>
            ESC_stopinput ();
 80029f4:	f7ff ff48 	bl	8002888 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 80029f8:	f7ff fb2c 	bl	8002054 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 80029fc:	2016      	movs	r0, #22
 80029fe:	f7ff f88f 	bl	8001b20 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <ESC_sm_act_event+0x160>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
         ESC_ALstatus (ax);
 8002a0a:	793b      	ldrb	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f89f 	bl	8001b50 <ESC_ALstatus>
         return;
 8002a12:	e03b      	b.n	8002a8c <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <ESC_sm_act_event+0x164>)
 8002a16:	f3bf 8f5f 	dmb	sy
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	f3bf 8f5f 	dmb	sy
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d019      	beq.n	8002a5a <ESC_sm_act_event+0x126>
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d116      	bne.n	8002a5a <ESC_sm_act_event+0x126>
      {
         ESC_stopoutput ();
 8002a2c:	f7ff ff6a 	bl	8002904 <ESC_stopoutput>
         ESC_stopinput ();
 8002a30:	f7ff ff2a 	bl	8002888 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <ESC_sm_act_event+0x160>)
 8002a36:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <ESC_sm_act_event+0x116>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8002a42:	201e      	movs	r0, #30
 8002a44:	f7ff f86c 	bl	8001b20 <ESC_ALerror>
 8002a48:	e002      	b.n	8002a50 <ESC_sm_act_event+0x11c>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8002a4a:	201d      	movs	r0, #29
 8002a4c:	f7ff f868 	bl	8001b20 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f87c 	bl	8001b50 <ESC_ALstatus>
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
      ax23 = ESC_checkSM23 (as);
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8002a58:	e018      	b.n	8002a8c <ESC_sm_act_event+0x158>
 8002a5a:	e017      	b.n	8002a8c <ESC_sm_act_event+0x158>
         ESC_ALstatus (ax23);
      }
   }
   else
   {
      ESC_SMack (0);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff f891 	bl	8001b84 <ESC_SMack>
      ESC_SMack (1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f7ff f88e 	bl	8001b84 <ESC_SMack>
      ESC_SMack (2);
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7ff f88b 	bl	8001b84 <ESC_SMack>
      ESC_SMack (3);
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f7ff f888 	bl	8001b84 <ESC_SMack>
      ESC_SMack (4);
 8002a74:	2004      	movs	r0, #4
 8002a76:	f7ff f885 	bl	8001b84 <ESC_SMack>
      ESC_SMack (5);
 8002a7a:	2005      	movs	r0, #5
 8002a7c:	f7ff f882 	bl	8001b84 <ESC_SMack>
      ESC_SMack (6);
 8002a80:	2006      	movs	r0, #6
 8002a82:	f7ff f87f 	bl	8001b84 <ESC_SMack>
      ESC_SMack (7);
 8002a86:	2007      	movs	r0, #7
 8002a88:	f7ff f87c 	bl	8001b84 <ESC_SMack>
   }
}
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	1ffea940 	.word	0x1ffea940
 8002a98:	1ffeaa13 	.word	0x1ffeaa13

08002a9c <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8002aa2:	4bde      	ldr	r3, [pc, #888]	; (8002e1c <ESC_state+0x380>)
 8002aa4:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d025      	beq.n	8002afe <ESC_state+0x62>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 8002ab2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8002ab6:	49da      	ldr	r1, [pc, #872]	; (8002e20 <ESC_state+0x384>)
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f7fe f965 	bl	8000d88 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 8002abe:	4bd7      	ldr	r3, [pc, #860]	; (8002e1c <ESC_state+0x380>)
 8002ac0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4bd5      	ldr	r3, [pc, #852]	; (8002e1c <ESC_state+0x380>)
 8002ac8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8002acc:	4bd3      	ldr	r3, [pc, #844]	; (8002e1c <ESC_state+0x380>)
 8002ace:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8002adc:	4bcf      	ldr	r3, [pc, #828]	; (8002e1c <ESC_state+0x380>)
 8002ade:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	717b      	strb	r3, [r7, #5]
   an = as;
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <ESC_state+0x6a>
 8002afc:	e000      	b.n	8002b00 <ESC_state+0x64>
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
   }
   else
   {
      /* nothing to do */
      return;
 8002afe:	e1e3      	b.n	8002ec8 <ESC_state+0x42c>
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
   an = as;
   if (((ac & ESCerror) || (ac == ESCinit)))
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d108      	bne.n	8002b18 <ESC_state+0x7c>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8002b0e:	79bb      	ldrb	r3, [r7, #6]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <ESC_state+0x92>
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d100      	bne.n	8002b2e <ESC_state+0x92>
   {
      return;
 8002b2c:	e1cc      	b.n	8002ec8 <ESC_state+0x42c>
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (ac << 4) | (as & 0x0f);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	797b      	ldrb	r3, [r7, #5]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8002b46:	4bb5      	ldr	r3, [pc, #724]	; (8002e1c <ESC_state+0x380>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <ESC_state+0xc0>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8002b4e:	4bb3      	ldr	r3, [pc, #716]	; (8002e1c <ESC_state+0x380>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	1d79      	adds	r1, r7, #5
 8002b54:	1dba      	adds	r2, r7, #6
 8002b56:	4608      	mov	r0, r1
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 8002b5c:	797b      	ldrb	r3, [r7, #5]
 8002b5e:	3b11      	subs	r3, #17
 8002b60:	2b77      	cmp	r3, #119	; 0x77
 8002b62:	f200 817e 	bhi.w	8002e62 <ESC_state+0x3c6>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <ESC_state+0xd0>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002e8d 	.word	0x08002e8d
 8002b70:	08002da1 	.word	0x08002da1
 8002b74:	08002dab 	.word	0x08002dab
 8002b78:	08002d93 	.word	0x08002d93
 8002b7c:	08002e63 	.word	0x08002e63
 8002b80:	08002e63 	.word	0x08002e63
 8002b84:	08002e63 	.word	0x08002e63
 8002b88:	08002d81 	.word	0x08002d81
 8002b8c:	08002e63 	.word	0x08002e63
 8002b90:	08002e63 	.word	0x08002e63
 8002b94:	08002e63 	.word	0x08002e63
 8002b98:	08002e63 	.word	0x08002e63
 8002b9c:	08002e63 	.word	0x08002e63
 8002ba0:	08002e63 	.word	0x08002e63
 8002ba4:	08002e63 	.word	0x08002e63
 8002ba8:	08002e63 	.word	0x08002e63
 8002bac:	08002d4d 	.word	0x08002d4d
 8002bb0:	08002e8d 	.word	0x08002e8d
 8002bb4:	08002db5 	.word	0x08002db5
 8002bb8:	08002e25 	.word	0x08002e25
 8002bbc:	08002e63 	.word	0x08002e63
 8002bc0:	08002e63 	.word	0x08002e63
 8002bc4:	08002e63 	.word	0x08002e63
 8002bc8:	08002e0f 	.word	0x08002e0f
 8002bcc:	08002e63 	.word	0x08002e63
 8002bd0:	08002e63 	.word	0x08002e63
 8002bd4:	08002e63 	.word	0x08002e63
 8002bd8:	08002e63 	.word	0x08002e63
 8002bdc:	08002e63 	.word	0x08002e63
 8002be0:	08002e63 	.word	0x08002e63
 8002be4:	08002e63 	.word	0x08002e63
 8002be8:	08002e63 	.word	0x08002e63
 8002bec:	08002d63 	.word	0x08002d63
 8002bf0:	08002db5 	.word	0x08002db5
 8002bf4:	08002d63 	.word	0x08002d63
 8002bf8:	08002e2f 	.word	0x08002e2f
 8002bfc:	08002e63 	.word	0x08002e63
 8002c00:	08002e63 	.word	0x08002e63
 8002c04:	08002e63 	.word	0x08002e63
 8002c08:	08002e49 	.word	0x08002e49
 8002c0c:	08002e63 	.word	0x08002e63
 8002c10:	08002e63 	.word	0x08002e63
 8002c14:	08002e63 	.word	0x08002e63
 8002c18:	08002e63 	.word	0x08002e63
 8002c1c:	08002e63 	.word	0x08002e63
 8002c20:	08002e63 	.word	0x08002e63
 8002c24:	08002e63 	.word	0x08002e63
 8002c28:	08002e63 	.word	0x08002e63
 8002c2c:	08002d75 	.word	0x08002d75
 8002c30:	08002dc1 	.word	0x08002dc1
 8002c34:	08002db5 	.word	0x08002db5
 8002c38:	08002dc1 	.word	0x08002dc1
 8002c3c:	08002e63 	.word	0x08002e63
 8002c40:	08002e63 	.word	0x08002e63
 8002c44:	08002e63 	.word	0x08002e63
 8002c48:	08002e59 	.word	0x08002e59
 8002c4c:	08002e63 	.word	0x08002e63
 8002c50:	08002e63 	.word	0x08002e63
 8002c54:	08002e63 	.word	0x08002e63
 8002c58:	08002e63 	.word	0x08002e63
 8002c5c:	08002e63 	.word	0x08002e63
 8002c60:	08002e63 	.word	0x08002e63
 8002c64:	08002e63 	.word	0x08002e63
 8002c68:	08002e63 	.word	0x08002e63
 8002c6c:	08002e63 	.word	0x08002e63
 8002c70:	08002e63 	.word	0x08002e63
 8002c74:	08002e63 	.word	0x08002e63
 8002c78:	08002e63 	.word	0x08002e63
 8002c7c:	08002e63 	.word	0x08002e63
 8002c80:	08002e63 	.word	0x08002e63
 8002c84:	08002e63 	.word	0x08002e63
 8002c88:	08002e63 	.word	0x08002e63
 8002c8c:	08002e63 	.word	0x08002e63
 8002c90:	08002e63 	.word	0x08002e63
 8002c94:	08002e63 	.word	0x08002e63
 8002c98:	08002e63 	.word	0x08002e63
 8002c9c:	08002e63 	.word	0x08002e63
 8002ca0:	08002e63 	.word	0x08002e63
 8002ca4:	08002e63 	.word	0x08002e63
 8002ca8:	08002e63 	.word	0x08002e63
 8002cac:	08002e63 	.word	0x08002e63
 8002cb0:	08002e63 	.word	0x08002e63
 8002cb4:	08002e63 	.word	0x08002e63
 8002cb8:	08002e63 	.word	0x08002e63
 8002cbc:	08002e63 	.word	0x08002e63
 8002cc0:	08002e63 	.word	0x08002e63
 8002cc4:	08002e63 	.word	0x08002e63
 8002cc8:	08002e63 	.word	0x08002e63
 8002ccc:	08002e63 	.word	0x08002e63
 8002cd0:	08002e63 	.word	0x08002e63
 8002cd4:	08002e63 	.word	0x08002e63
 8002cd8:	08002e63 	.word	0x08002e63
 8002cdc:	08002e63 	.word	0x08002e63
 8002ce0:	08002e63 	.word	0x08002e63
 8002ce4:	08002e63 	.word	0x08002e63
 8002ce8:	08002e63 	.word	0x08002e63
 8002cec:	08002e63 	.word	0x08002e63
 8002cf0:	08002e63 	.word	0x08002e63
 8002cf4:	08002e63 	.word	0x08002e63
 8002cf8:	08002e63 	.word	0x08002e63
 8002cfc:	08002e63 	.word	0x08002e63
 8002d00:	08002e63 	.word	0x08002e63
 8002d04:	08002e63 	.word	0x08002e63
 8002d08:	08002e63 	.word	0x08002e63
 8002d0c:	08002e63 	.word	0x08002e63
 8002d10:	08002e63 	.word	0x08002e63
 8002d14:	08002e63 	.word	0x08002e63
 8002d18:	08002e63 	.word	0x08002e63
 8002d1c:	08002e63 	.word	0x08002e63
 8002d20:	08002e63 	.word	0x08002e63
 8002d24:	08002e63 	.word	0x08002e63
 8002d28:	08002e63 	.word	0x08002e63
 8002d2c:	08002d75 	.word	0x08002d75
 8002d30:	08002e03 	.word	0x08002e03
 8002d34:	08002db5 	.word	0x08002db5
 8002d38:	08002e3b 	.word	0x08002e3b
 8002d3c:	08002e63 	.word	0x08002e63
 8002d40:	08002e63 	.word	0x08002e63
 8002d44:	08002e63 	.word	0x08002e63
 8002d48:	08002e8d 	.word	0x08002e8d
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8002d4c:	f7fe ffae 	bl	8001cac <ESC_address>
         COE_initDefaultSyncMgrPara ();
 8002d50:	f000 fa98 	bl	8003284 <COE_initDefaultSyncMgrPara>
         an = ESC_startmbx (ac);
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f8e0 	bl	8001f1c <ESC_startmbx>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71bb      	strb	r3, [r7, #6]
         break;
 8002d60:	e095      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8002d62:	f7fe ffa3 	bl	8001cac <ESC_address>
         an = ESC_startmbxboot (ac);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f925 	bl	8001fb8 <ESC_startmbxboot>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71bb      	strb	r3, [r7, #6]
         break;
 8002d72:	e08c      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8002d74:	2311      	movs	r3, #17
 8002d76:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002d78:	2011      	movs	r0, #17
 8002d7a:	f7fe fed1 	bl	8001b20 <ESC_ALerror>
         break;
 8002d7e:	e086      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8002d80:	f7ff fdc0 	bl	8002904 <ESC_stopoutput>
         ESC_stopinput ();
 8002d84:	f7ff fd80 	bl	8002888 <ESC_stopinput>
         ESC_stopmbx ();
 8002d88:	f7ff f964 	bl	8002054 <ESC_stopmbx>
         an = ESCinit;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	71bb      	strb	r3, [r7, #6]
         break;
 8002d90:	e07d      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8002d92:	f7ff fd79 	bl	8002888 <ESC_stopinput>
         ESC_stopmbx ();
 8002d96:	f7ff f95d 	bl	8002054 <ESC_stopmbx>
         an = ESCinit;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	71bb      	strb	r3, [r7, #6]
         break;
 8002d9e:	e076      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8002da0:	f7ff f958 	bl	8002054 <ESC_stopmbx>
         an = ESCinit;
 8002da4:	2301      	movs	r3, #1
 8002da6:	71bb      	strb	r3, [r7, #6]
         break;
 8002da8:	e071      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8002daa:	f7ff f953 	bl	8002054 <ESC_stopmbx>
         an = ESCinit;
 8002dae:	2301      	movs	r3, #1
 8002db0:	71bb      	strb	r3, [r7, #6]
         break;
 8002db2:	e06c      	b.n	8002e8e <ESC_state+0x3f2>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8002db4:	2312      	movs	r3, #18
 8002db6:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002db8:	2011      	movs	r0, #17
 8002dba:	f7fe feb1 	bl	8001b20 <ESC_ALerror>
         break;
 8002dbe:	e066      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX);
 8002dc0:	f641 4012 	movw	r0, #7186	; 0x1c12
 8002dc4:	f000 fb0c 	bl	80033e0 <sizeOfPDO>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <ESC_state+0x380>)
 8002dce:	f8a3 2079 	strh.w	r2, [r3, #121]	; 0x79
         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX);
 8002dd2:	f641 4013 	movw	r0, #7187	; 0x1c13
 8002dd6:	f000 fb03 	bl	80033e0 <sizeOfPDO>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <ESC_state+0x380>)
 8002de0:	f8a3 207b 	strh.w	r2, [r3, #123]	; 0x7b
         an = ESC_startinput (ac);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fce0 	bl	80027ac <ESC_startinput>
 8002dec:	4603      	mov	r3, r0
 8002dee:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8002df0:	79bb      	ldrb	r3, [r7, #6]
 8002df2:	79fa      	ldrb	r2, [r7, #7]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d103      	bne.n	8002e00 <ESC_state+0x364>
         {
            ESC_SMenable (2);
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f7fe ff1f 	bl	8001c3c <ESC_SMenable>
         }
         break;
 8002dfe:	e046      	b.n	8002e8e <ESC_state+0x3f2>
 8002e00:	e045      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8002e02:	2312      	movs	r3, #18
 8002e04:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002e06:	2011      	movs	r0, #17
 8002e08:	f7fe fe8a 	bl	8001b20 <ESC_ALerror>
         break;
 8002e0c:	e03f      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8002e0e:	f7ff fd79 	bl	8002904 <ESC_stopoutput>
         ESC_stopinput ();
 8002e12:	f7ff fd39 	bl	8002888 <ESC_stopinput>
         an = ESCpreop;
 8002e16:	2302      	movs	r3, #2
 8002e18:	71bb      	strb	r3, [r7, #6]
         break;
 8002e1a:	e038      	b.n	8002e8e <ESC_state+0x3f2>
 8002e1c:	1ffea940 	.word	0x1ffea940
 8002e20:	1ffea9c6 	.word	0x1ffea9c6
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8002e24:	f7ff fd30 	bl	8002888 <ESC_stopinput>
         an = ESCpreop;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	71bb      	strb	r3, [r7, #6]
         break;
 8002e2c:	e02f      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8002e2e:	2314      	movs	r3, #20
 8002e30:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002e32:	2011      	movs	r0, #17
 8002e34:	f7fe fe74 	bl	8001b20 <ESC_ALerror>
         break;
 8002e38:	e029      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd45 	bl	80028cc <ESC_startoutput>
 8002e42:	4603      	mov	r3, r0
 8002e44:	71bb      	strb	r3, [r7, #6]
         break;
 8002e46:	e022      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8002e48:	2314      	movs	r3, #20
 8002e4a:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002e4c:	2011      	movs	r0, #17
 8002e4e:	f7fe fe67 	bl	8001b20 <ESC_ALerror>
         ESC_stopoutput ();
 8002e52:	f7ff fd57 	bl	8002904 <ESC_stopoutput>
         break;
 8002e56:	e01a      	b.n	8002e8e <ESC_state+0x3f2>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 8002e58:	2304      	movs	r3, #4
 8002e5a:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 8002e5c:	f7ff fd52 	bl	8002904 <ESC_stopoutput>
         break;
 8002e60:	e015      	b.n	8002e8e <ESC_state+0x3f2>
      }
      default:
      {
         if (an == ESCop)
 8002e62:	79bb      	ldrb	r3, [r7, #6]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d103      	bne.n	8002e70 <ESC_state+0x3d4>
         {
            ESC_stopoutput ();
 8002e68:	f7ff fd4c 	bl	8002904 <ESC_stopoutput>
            an = ESCsafeop;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8002e70:	797b      	ldrb	r3, [r7, #5]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d101      	bne.n	8002e7a <ESC_state+0x3de>
         {
            ESC_stopinput ();
 8002e76:	f7ff fd07 	bl	8002888 <ESC_stopinput>
         }
         an |= ESCerror;
 8002e7a:	79bb      	ldrb	r3, [r7, #6]
 8002e7c:	f043 0310 	orr.w	r3, r3, #16
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8002e84:	2012      	movs	r0, #18
 8002e86:	f7fe fe4b 	bl	8001b20 <ESC_ALerror>
         break;
 8002e8a:	e000      	b.n	8002e8e <ESC_state+0x3f2>
   {
      case INIT_TO_INIT:
      case PREOP_TO_PREOP:
      case OP_TO_OP:
      {
         break;
 8002e8c:	bf00      	nop
         break;
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <ESC_state+0x434>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <ESC_state+0x408>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <ESC_state+0x434>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	1d79      	adds	r1, r7, #5
 8002e9c:	1dba      	adds	r2, r7, #6
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <ESC_state+0x424>
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <ESC_state+0x434>)
 8002eb0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <ESC_state+0x424>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fe fe30 	bl	8001b20 <ESC_ALerror>
   }

   ESC_ALstatus (an);
 8002ec0:	79bb      	ldrb	r3, [r7, #6]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fe44 	bl	8001b50 <ESC_ALstatus>

}
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	1ffea940 	.word	0x1ffea940

08002ed4 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
   /* Copy configuration data */
   ESCvar.use_interrupt = cfg->use_interrupt;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <ESC_config+0xf0>)
 8002ee2:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <ESC_config+0xf0>)
 8002eea:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8002eee:	2100      	movs	r1, #0
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   ESCvar.mbxsize = cfg->mbxsize;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a32      	ldr	r2, [pc, #200]	; (8002fc4 <ESC_config+0xf0>)
 8002efc:	6053      	str	r3, [r2, #4]
   ESCvar.mbxsizeboot = cfg->mbxsizeboot;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <ESC_config+0xf0>)
 8002f04:	6093      	str	r3, [r2, #8]
   ESCvar.mbxbuffers = cfg->mbxbuffers;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <ESC_config+0xf0>)
 8002f0c:	60d3      	str	r3, [r2, #12]

   ESCvar.mb[0] = cfg->mb[0];
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <ESC_config+0xf0>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3210      	adds	r2, #16
 8002f14:	3318      	adds	r3, #24
 8002f16:	cb03      	ldmia	r3!, {r0, r1}
 8002f18:	6010      	str	r0, [r2, #0]
 8002f1a:	6051      	str	r1, [r2, #4]
   ESCvar.mb[1] = cfg->mb[1];
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <ESC_config+0xf0>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3218      	adds	r2, #24
 8002f22:	3320      	adds	r3, #32
 8002f24:	cb03      	ldmia	r3!, {r0, r1}
 8002f26:	6010      	str	r0, [r2, #0]
 8002f28:	6051      	str	r1, [r2, #4]
   ESCvar.mbboot[0] = cfg->mb_boot[0];
 8002f2a:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <ESC_config+0xf0>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3220      	adds	r2, #32
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	cb03      	ldmia	r3!, {r0, r1}
 8002f34:	6010      	str	r0, [r2, #0]
 8002f36:	6051      	str	r1, [r2, #4]
   ESCvar.mbboot[1] = cfg->mb_boot[1];
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <ESC_config+0xf0>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3228      	adds	r2, #40	; 0x28
 8002f3e:	3330      	adds	r3, #48	; 0x30
 8002f40:	cb03      	ldmia	r3!, {r0, r1}
 8002f42:	6010      	str	r0, [r2, #0]
 8002f44:	6051      	str	r1, [r2, #4]
   ESCvar.pdosm[0] = cfg->pdosm[0];
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <ESC_config+0xf0>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3230      	adds	r2, #48	; 0x30
 8002f4c:	3338      	adds	r3, #56	; 0x38
 8002f4e:	cb03      	ldmia	r3!, {r0, r1}
 8002f50:	6010      	str	r0, [r2, #0]
 8002f52:	6051      	str	r1, [r2, #4]
   ESCvar.pdosm[1] = cfg->pdosm[1];
 8002f54:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <ESC_config+0xf0>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3238      	adds	r2, #56	; 0x38
 8002f5a:	3340      	adds	r3, #64	; 0x40
 8002f5c:	cb03      	ldmia	r3!, {r0, r1}
 8002f5e:	6010      	str	r0, [r2, #0]
 8002f60:	6051      	str	r1, [r2, #4]

   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <ESC_config+0xf0>)
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <ESC_config+0xf0>)
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.application_hook = cfg->application_hook;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <ESC_config+0xf0>)
 8002f78:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <ESC_config+0xf0>)
 8002f80:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <ESC_config+0xf0>)
 8002f88:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <ESC_config+0xf0>)
 8002f90:	6553      	str	r3, [r2, #84]	; 0x54
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <ESC_config+0xf0>)
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
   ESCvar.txpdo_override = cfg->txpdo_override;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <ESC_config+0xf0>)
 8002fa0:	65d3      	str	r3, [r2, #92]	; 0x5c
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <ESC_config+0xf0>)
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <ESC_config+0xf0>)
 8002fb0:	6653      	str	r3, [r2, #100]	; 0x64
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <ESC_config+0xf0>)
 8002fb8:	6693      	str	r3, [r2, #104]	; 0x68
}
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	1ffea940 	.word	0x1ffea940

08002fc8 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int16_t nidx, uint8_t subindex)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	80fb      	strh	r3, [r7, #6]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	717b      	strb	r3, [r7, #5]
   const _objd *objd;
   int16_t n = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8002fdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fe0:	4923      	ldr	r1, [pc, #140]	; (8003070 <SDO_findsubindex+0xa8>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	3308      	adds	r3, #8
 8002fee:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002ff2:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 8002ff4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ff8:	491d      	ldr	r1, [pc, #116]	; (8003070 <SDO_findsubindex+0xa8>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	440b      	add	r3, r1
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	73fb      	strb	r3, [r7, #15]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8003008:	e004      	b.n	8003014 <SDO_findsubindex+0x4c>
   {
      n++;
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	b29b      	uxth	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	82fb      	strh	r3, [r7, #22]
   const _objd *objd;
   int16_t n = 0;
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
   maxsub = SDOobjects[nidx].maxsub;
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8003014:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29a      	uxth	r2, r3
 800302a:	797b      	ldrb	r3, [r7, #5]
 800302c:	b29b      	uxth	r3, r3
 800302e:	429a      	cmp	r2, r3
 8003030:	d204      	bcs.n	800303c <SDO_findsubindex+0x74>
 8003032:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	429a      	cmp	r2, r3
 800303a:	dbe6      	blt.n	800300a <SDO_findsubindex+0x42>
   {
      n++;
   }
   if ((objd + n)->subindex != subindex)
 800303c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	461a      	mov	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29a      	uxth	r2, r3
 8003052:	797b      	ldrb	r3, [r7, #5]
 8003054:	b29b      	uxth	r3, r3
 8003056:	429a      	cmp	r2, r3
 8003058:	d002      	beq.n	8003060 <SDO_findsubindex+0x98>
   {
      return -1;
 800305a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800305e:	e000      	b.n	8003062 <SDO_findsubindex+0x9a>
   }
   return n;
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	b21b      	sxth	r3, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	08005554 	.word	0x08005554

08003074 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8003082:	e002      	b.n	800308a <SDO_findobject+0x16>
   {
      n++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
   int32_t n = 0;
   while (SDOobjects[n].index < index)
 800308a:	4911      	ldr	r1, [pc, #68]	; (80030d0 <SDO_findobject+0x5c>)
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8f0      	bhi.n	8003084 <SDO_findobject+0x10>
   {
      n++;
   }
   if (SDOobjects[n].index != index)
 80030a2:	490b      	ldr	r1, [pc, #44]	; (80030d0 <SDO_findobject+0x5c>)
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d002      	beq.n	80030c0 <SDO_findobject+0x4c>
   {
      return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	e000      	b.n	80030c2 <SDO_findobject+0x4e>
   }
   return n;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	08005554 	.word	0x08005554

080030d4 <COE_getSyncMgrPara>:
 * @param[out] buf     = buf to copy value to
 * @param[in] datatype = EtherCAT datatype of buf
 * @return 1 if value was found, else 0.
 */
int COE_getSyncMgrPara (uint16_t index, uint8_t subindex, void * buf, uint16_t datatype)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60ba      	str	r2, [r7, #8]
 80030dc:	461a      	mov	r2, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	81fb      	strh	r3, [r7, #14]
 80030e2:	460b      	mov	r3, r1
 80030e4:	737b      	strb	r3, [r7, #13]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
   int result = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
   int32_t nidx;
   int32_t snidx;
   const _objd *objd;

   nidx = SDO_findobject(index);
 80030ee:	89fb      	ldrh	r3, [r7, #14]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ffbf 	bl	8003074 <SDO_findobject>
 80030f6:	61b8      	str	r0, [r7, #24]

   if(nidx < 0)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da01      	bge.n	8003102 <COE_getSyncMgrPara+0x2e>
   {
      return result;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	e0b9      	b.n	8003276 <COE_getSyncMgrPara+0x1a2>
   }
   else if((index != 0x1c32) && (index != 0x1c33) && (index != 0x10F1))
 8003102:	89fb      	ldrh	r3, [r7, #14]
 8003104:	f641 4232 	movw	r2, #7218	; 0x1c32
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <COE_getSyncMgrPara+0x50>
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	f641 4233 	movw	r2, #7219	; 0x1c33
 8003112:	4293      	cmp	r3, r2
 8003114:	d006      	beq.n	8003124 <COE_getSyncMgrPara+0x50>
 8003116:	89fb      	ldrh	r3, [r7, #14]
 8003118:	f241 02f1 	movw	r2, #4337	; 0x10f1
 800311c:	4293      	cmp	r3, r2
 800311e:	d001      	beq.n	8003124 <COE_getSyncMgrPara+0x50>
   {
      return result;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	e0a8      	b.n	8003276 <COE_getSyncMgrPara+0x1a2>
   }

   snidx = SDO_findsubindex(nidx, subindex);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	b29b      	uxth	r3, r3
 8003128:	b21a      	sxth	r2, r3
 800312a:	7b7b      	ldrb	r3, [r7, #13]
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f7ff ff4a 	bl	8002fc8 <SDO_findsubindex>
 8003134:	4603      	mov	r3, r0
 8003136:	617b      	str	r3, [r7, #20]

   if(snidx >= 0)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f2c0 809a 	blt.w	8003274 <COE_getSyncMgrPara+0x1a0>
   {
      objd = SDOobjects[nidx].objdesc;
 8003140:	494f      	ldr	r1, [pc, #316]	; (8003280 <COE_getSyncMgrPara+0x1ac>)
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	3308      	adds	r3, #8
 8003150:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003154:	613b      	str	r3, [r7, #16]

      if((objd[snidx].data != NULL) &&
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d028      	beq.n	80031be <COE_getSyncMgrPara+0xea>
         (objd[snidx].datatype == datatype))
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	461a      	mov	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	885b      	ldrh	r3, [r3, #2]
 800317e:	b29b      	uxth	r3, r3

   if(snidx >= 0)
   {
      objd = SDOobjects[nidx].objdesc;

      if((objd[snidx].data != NULL) &&
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	429a      	cmp	r2, r3
 8003184:	d11b      	bne.n	80031be <COE_getSyncMgrPara+0xea>
         (objd[snidx].datatype == datatype))
      {
         memcpy(buf, objd[snidx].data, objd[snidx].bitlength / 8 );
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	461a      	mov	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	6919      	ldr	r1, [r3, #16]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	68b8      	ldr	r0, [r7, #8]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f001 fdca 	bl	8004d4c <memcpy>
         result = 1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e05a      	b.n	8003274 <COE_getSyncMgrPara+0x1a0>
      }
      else
      {
         if((datatype == DTYPE_UNSIGNED32) &&
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d11a      	bne.n	80031fa <COE_getSyncMgrPara+0x126>
            (objd[snidx].datatype == datatype))
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	461a      	mov	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	885b      	ldrh	r3, [r3, #2]
 80031d6:	b29b      	uxth	r3, r3
         memcpy(buf, objd[snidx].data, objd[snidx].bitlength / 8 );
         result = 1;
      }
      else
      {
         if((datatype == DTYPE_UNSIGNED32) &&
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10d      	bne.n	80031fa <COE_getSyncMgrPara+0x126>
            (objd[snidx].datatype == datatype))
         {
            *(uint32_t *)buf = objd[snidx].value;
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	461a      	mov	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	601a      	str	r2, [r3, #0]
            result = 1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e03c      	b.n	8003274 <COE_getSyncMgrPara+0x1a0>
         }
         else if((datatype == DTYPE_UNSIGNED16) &&
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d11b      	bne.n	8003238 <COE_getSyncMgrPara+0x164>
                 (objd[snidx].datatype == datatype))
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	885b      	ldrh	r3, [r3, #2]
 8003212:	b29b      	uxth	r3, r3
            (objd[snidx].datatype == datatype))
         {
            *(uint32_t *)buf = objd[snidx].value;
            result = 1;
         }
         else if((datatype == DTYPE_UNSIGNED16) &&
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10e      	bne.n	8003238 <COE_getSyncMgrPara+0x164>
                 (objd[snidx].datatype == datatype))
         {
            *(uint16_t *)buf = (uint16_t)objd[snidx].value;
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	461a      	mov	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	b29a      	uxth	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	801a      	strh	r2, [r3, #0]
            result = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e01d      	b.n	8003274 <COE_getSyncMgrPara+0x1a0>

         }
         else if((datatype == DTYPE_UNSIGNED8) &&
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d11a      	bne.n	8003274 <COE_getSyncMgrPara+0x1a0>
                 (objd[snidx].datatype == datatype))
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	461a      	mov	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	885b      	ldrh	r3, [r3, #2]
 8003250:	b29b      	uxth	r3, r3
         {
            *(uint16_t *)buf = (uint16_t)objd[snidx].value;
            result = 1;

         }
         else if((datatype == DTYPE_UNSIGNED8) &&
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	429a      	cmp	r2, r3
 8003256:	d10d      	bne.n	8003274 <COE_getSyncMgrPara+0x1a0>
                 (objd[snidx].datatype == datatype))
         {
            *(uint8_t *)buf = (uint8_t)objd[snidx].value;
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	701a      	strb	r2, [r3, #0]
            result = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
         }
      }
   }

   return result;
 8003274:	69fb      	ldr	r3, [r7, #28]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	08005554 	.word	0x08005554

08003284 <COE_initDefaultSyncMgrPara>:

/** Init default values for SDO Sync Objects
 *
 */
void COE_initDefaultSyncMgrPara (void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
   uint32_t i,j;
   const _objd *objd;
   int32_t n = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]

   /* 1C3x */
   for(i = 0x1C32; i <= 0x1C33; i ++)
 800328e:	f641 4332 	movw	r3, #7218	; 0x1c32
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e05d      	b.n	8003352 <COE_initDefaultSyncMgrPara+0xce>
   {
      /* Look if index is present */
      n = SDO_findobject(i);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff feea 	bl	8003074 <SDO_findobject>
 80032a0:	6078      	str	r0, [r7, #4]
      if(n < 0)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da00      	bge.n	80032aa <COE_initDefaultSyncMgrPara+0x26>
      {
         continue;
 80032a8:	e050      	b.n	800334c <COE_initDefaultSyncMgrPara+0xc8>
      }

      /* Load default values */
      objd = SDOobjects[n].objdesc;
 80032aa:	494c      	ldr	r1, [pc, #304]	; (80033dc <COE_initDefaultSyncMgrPara+0x158>)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	440b      	add	r3, r1
 80032b8:	3308      	adds	r3, #8
 80032ba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80032be:	603b      	str	r3, [r7, #0]
      for(j = 1; j <= SDOobjects[n].maxsub; j++ )
 80032c0:	2301      	movs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	e036      	b.n	8003334 <COE_initDefaultSyncMgrPara+0xb0>
      {
         if(objd[j].data != NULL)
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <COE_initDefaultSyncMgrPara+0x7e>
         {
            *(uint32_t *)objd[j].data = objd[j].value;
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	461a      	mov	r2, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	600b      	str	r3, [r1, #0]
         }
         if(objd[j].subindex >= SDOobjects[n].maxsub)
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	461a      	mov	r2, r3
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b299      	uxth	r1, r3
 8003316:	4831      	ldr	r0, [pc, #196]	; (80033dc <COE_initDefaultSyncMgrPara+0x158>)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4403      	add	r3, r0
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4299      	cmp	r1, r3
 800332a:	d300      	bcc.n	800332e <COE_initDefaultSyncMgrPara+0xaa>
         {
            break;
 800332c:	e00e      	b.n	800334c <COE_initDefaultSyncMgrPara+0xc8>
         continue;
      }

      /* Load default values */
      objd = SDOobjects[n].objdesc;
      for(j = 1; j <= SDOobjects[n].maxsub; j++ )
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3301      	adds	r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	4929      	ldr	r1, [pc, #164]	; (80033dc <COE_initDefaultSyncMgrPara+0x158>)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	440b      	add	r3, r1
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	d2bc      	bcs.n	80032c6 <COE_initDefaultSyncMgrPara+0x42>
   uint32_t i,j;
   const _objd *objd;
   int32_t n = 0;

   /* 1C3x */
   for(i = 0x1C32; i <= 0x1C33; i ++)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f641 4233 	movw	r2, #7219	; 0x1c33
 8003358:	4293      	cmp	r3, r2
 800335a:	d99c      	bls.n	8003296 <COE_initDefaultSyncMgrPara+0x12>
         }
      }
   }

   /* Look if index is present */
   n = SDO_findobject(0x10F1);
 800335c:	f241 00f1 	movw	r0, #4337	; 0x10f1
 8003360:	f7ff fe88 	bl	8003074 <SDO_findobject>
 8003364:	6078      	str	r0, [r7, #4]
   if(n >= 0)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db33      	blt.n	80033d4 <COE_initDefaultSyncMgrPara+0x150>
   {
      /* Load default values */
      objd = SDOobjects[n].objdesc;
 800336c:	491b      	ldr	r1, [pc, #108]	; (80033dc <COE_initDefaultSyncMgrPara+0x158>)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	3308      	adds	r3, #8
 800337c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003380:	603b      	str	r3, [r7, #0]
      for(j = 1; j <= objd[0].value; j++ )
 8003382:	2301      	movs	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	e020      	b.n	80033ca <COE_initDefaultSyncMgrPara+0x146>
      {
         if(objd[j].data != NULL)
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	461a      	mov	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4413      	add	r3, r2
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <COE_initDefaultSyncMgrPara+0x140>
         {
            *(uint32_t *)objd[j].data = objd[j].value;
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	6919      	ldr	r1, [r3, #16]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4413      	add	r3, r2
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	600b      	str	r3, [r1, #0]
   n = SDO_findobject(0x10F1);
   if(n >= 0)
   {
      /* Load default values */
      objd = SDOobjects[n].objdesc;
      for(j = 1; j <= objd[0].value; j++ )
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d2d9      	bcs.n	8003388 <COE_initDefaultSyncMgrPara+0x104>
            *(uint32_t *)objd[j].data = objd[j].value;
         }
      }

   }
}
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	08005554 	.word	0x08005554

080033e0 <sizeOfPDO>:
 * SDO 1C1x.
 *
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
   uint16_t size = 0, hobj, l, si, c, sic;
 80033ea:	2300      	movs	r3, #0
 80033ec:	83fb      	strh	r3, [r7, #30]
   int16_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;

   nidx = SDO_findobject (index);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe3f 	bl	8003074 <SDO_findobject>
 80033f6:	4603      	mov	r3, r0
 80033f8:	82bb      	strh	r3, [r7, #20]

   if(nidx < 0)
 80033fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da01      	bge.n	8003406 <sizeOfPDO+0x26>
   {
      return size;
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	e08b      	b.n	800351e <sizeOfPDO+0x13e>
   }
   else if((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	f641 4212 	movw	r2, #7186	; 0x1c12
 800340c:	4293      	cmp	r3, r2
 800340e:	d006      	beq.n	800341e <sizeOfPDO+0x3e>
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	f641 4213 	movw	r2, #7187	; 0x1c13
 8003416:	4293      	cmp	r3, r2
 8003418:	d001      	beq.n	800341e <sizeOfPDO+0x3e>
   {
      return size;
 800341a:	8bfb      	ldrh	r3, [r7, #30]
 800341c:	e07f      	b.n	800351e <sizeOfPDO+0x13e>
   }

   objd1c1x = objd = SDOobjects[nidx].objdesc;
 800341e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003422:	4941      	ldr	r1, [pc, #260]	; (8003528 <sizeOfPDO+0x148>)
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	440b      	add	r3, r1
 800342e:	3308      	adds	r3, #8
 8003430:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	60fb      	str	r3, [r7, #12]

   if (objd1c1x[0].data)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <sizeOfPDO+0x6c>
   {
      si = *((uint8_t *) objd1c1x[0].data);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	837b      	strh	r3, [r7, #26]
 800344a:	e003      	b.n	8003454 <sizeOfPDO+0x74>
   }
   else
   {
      si = (uint8_t) objd1c1x[0].value;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	837b      	strh	r3, [r7, #26]
   }
   if (si)
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d05d      	beq.n	8003516 <sizeOfPDO+0x136>
   {
      for (sic = 1; sic <= si; sic++)
 800345a:	2301      	movs	r3, #1
 800345c:	82fb      	strh	r3, [r7, #22]
 800345e:	e056      	b.n	800350e <sizeOfPDO+0x12e>
      {
         if (objd1c1x[sic].data)
 8003460:	8afa      	ldrh	r2, [r7, #22]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <sizeOfPDO+0xae>
         {
            hobj = *((uint16_t *) objd1c1x[sic].data);
 8003476:	8afa      	ldrh	r2, [r7, #22]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	83bb      	strh	r3, [r7, #28]
 800348c:	e009      	b.n	80034a2 <sizeOfPDO+0xc2>
            hobj = htoes(hobj);
         }
         else
         {
            hobj = (uint16_t) objd1c1x[sic].value;
 800348e:	8afa      	ldrh	r2, [r7, #22]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	461a      	mov	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	83bb      	strh	r3, [r7, #28]
         }
         nidx = SDO_findobject (hobj);
 80034a2:	8bbb      	ldrh	r3, [r7, #28]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fde5 	bl	8003074 <SDO_findobject>
 80034aa:	4603      	mov	r3, r0
 80034ac:	82bb      	strh	r3, [r7, #20]
         if (nidx > 0)
 80034ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dd28      	ble.n	8003508 <sizeOfPDO+0x128>
         {
            objd = SDOobjects[nidx].objdesc;
 80034b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80034ba:	491b      	ldr	r1, [pc, #108]	; (8003528 <sizeOfPDO+0x148>)
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	3308      	adds	r3, #8
 80034c8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80034cc:	613b      	str	r3, [r7, #16]
            l = (uint8_t) objd->value;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	817b      	strh	r3, [r7, #10]
            for (c = 1; c <= l; c++)
 80034d6:	2301      	movs	r3, #1
 80034d8:	833b      	strh	r3, [r7, #24]
 80034da:	e011      	b.n	8003500 <sizeOfPDO+0x120>
            {
               size += ((objd + c)->value & 0xff);
 80034dc:	8b3a      	ldrh	r2, [r7, #24]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	461a      	mov	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	8bfb      	ldrh	r3, [r7, #30]
 80034f6:	4413      	add	r3, r2
 80034f8:	83fb      	strh	r3, [r7, #30]
         nidx = SDO_findobject (hobj);
         if (nidx > 0)
         {
            objd = SDOobjects[nidx].objdesc;
            l = (uint8_t) objd->value;
            for (c = 1; c <= l; c++)
 80034fa:	8b3b      	ldrh	r3, [r7, #24]
 80034fc:	3301      	adds	r3, #1
 80034fe:	833b      	strh	r3, [r7, #24]
 8003500:	8b3a      	ldrh	r2, [r7, #24]
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	429a      	cmp	r2, r3
 8003506:	d9e9      	bls.n	80034dc <sizeOfPDO+0xfc>
   {
      si = (uint8_t) objd1c1x[0].value;
   }
   if (si)
   {
      for (sic = 1; sic <= si; sic++)
 8003508:	8afb      	ldrh	r3, [r7, #22]
 800350a:	3301      	adds	r3, #1
 800350c:	82fb      	strh	r3, [r7, #22]
 800350e:	8afa      	ldrh	r2, [r7, #22]
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	429a      	cmp	r2, r3
 8003514:	d9a4      	bls.n	8003460 <sizeOfPDO+0x80>
               size += ((objd + c)->value & 0xff);
            }
         }
      }
   }
   return BITS2BYTES (size);
 8003516:	8bfb      	ldrh	r3, [r7, #30]
 8003518:	3307      	adds	r3, #7
 800351a:	10db      	asrs	r3, r3, #3
 800351c:	b29b      	uxth	r3, r3
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	08005554 	.word	0x08005554

0800352c <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
void copy2mbx (void *source, void *dest, uint16_t size)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
   memcpy (dest, source, size);
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	68b8      	ldr	r0, [r7, #8]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	461a      	mov	r2, r3
 8003542:	f001 fc03 	bl	8004d4c <memcpy>
}
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
void SDO_abort (uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	603a      	str	r2, [r7, #0]
 8003556:	80fb      	strh	r3, [r7, #6]
 8003558:	460b      	mov	r3, r1
 800355a:	717b      	strb	r3, [r7, #5]
   uint8_t MBXout;
   _COEsdo *coeres;
   MBXout = ESC_claimbuffer ();
 800355c:	f7fe fe82 	bl	8002264 <ESC_claimbuffer>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02d      	beq.n	80035c6 <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <SDO_abort+0x80>)
 800356e:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <SDO_abort+0x84>)
 8003578:	4413      	add	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	f042 020a 	orr.w	r2, r2, #10
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	7953      	ldrb	r3, [r2, #5]
 800358e:	2103      	movs	r1, #3
 8003590:	f361 0303 	bfi	r3, r1, #0, #4
 8003594:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	719a      	strb	r2, [r3, #6]
 800359c:	2200      	movs	r2, #0
 800359e:	f042 0220 	orr.w	r2, r2, #32
 80035a2:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	797a      	ldrb	r2, [r7, #5]
 80035b0:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <SDO_abort+0x88>)
 80035c2:	2103      	movs	r1, #3
 80035c4:	54d1      	strb	r1, [r2, r3]
   }
}
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	1ffea940 	.word	0x1ffea940
 80035d0:	1ffeaa14 	.word	0x1ffeaa14
 80035d4:	1ffeab98 	.word	0x1ffeab98

080035d8 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
void SDO_upload (void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
   int16_t nidx, nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 80035de:	4b91      	ldr	r3, [pc, #580]	; (8003824 <SDO_upload+0x24c>)
 80035e0:	617b      	str	r3, [r7, #20]
   index = etohs (coesdo->index);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	7a5a      	ldrb	r2, [r3, #9]
 80035e6:	7a9b      	ldrb	r3, [r3, #10]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4313      	orrs	r3, r2
 80035ec:	827b      	strh	r3, [r7, #18]
   subindex = coesdo->subindex;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	7adb      	ldrb	r3, [r3, #11]
 80035f2:	747b      	strb	r3, [r7, #17]
   nidx = SDO_findobject (index);
 80035f4:	8a7b      	ldrh	r3, [r7, #18]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fd3c 	bl	8003074 <SDO_findobject>
 80035fc:	4603      	mov	r3, r0
 80035fe:	81fb      	strh	r3, [r7, #14]
   if (nidx >= 0)
 8003600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f2c0 80fc 	blt.w	8003802 <SDO_upload+0x22a>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800360a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800360e:	7c7b      	ldrb	r3, [r7, #17]
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f7ff fcd8 	bl	8002fc8 <SDO_findsubindex>
 8003618:	4603      	mov	r3, r0
 800361a:	81bb      	strh	r3, [r7, #12]
      if (nsub >= 0)
 800361c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f2c0 80e6 	blt.w	80037f2 <SDO_upload+0x21a>
      {
         objd = SDOobjects[nidx].objdesc;
 8003626:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800362a:	497f      	ldr	r1, [pc, #508]	; (8003828 <SDO_upload+0x250>)
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	440b      	add	r3, r1
 8003636:	3308      	adds	r3, #8
 8003638:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800363c:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 800363e:	f7fe fe11 	bl	8002264 <ESC_claimbuffer>
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80e1 	beq.w	8003810 <SDO_upload+0x238>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4a76      	ldr	r2, [pc, #472]	; (800382c <SDO_upload+0x254>)
 8003652:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a72      	ldr	r2, [pc, #456]	; (8003824 <SDO_upload+0x24c>)
 800365c:	4413      	add	r3, r2
 800365e:	603b      	str	r3, [r7, #0]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2200      	movs	r2, #0
 8003664:	f042 020a 	orr.w	r2, r2, #10
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	705a      	strb	r2, [r3, #1]
            coeres->mbxheader.mbxtype = MBXCOE;
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	7953      	ldrb	r3, [r2, #5]
 8003672:	2103      	movs	r1, #3
 8003674:	f361 0303 	bfi	r3, r1, #0, #4
 8003678:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	719a      	strb	r2, [r3, #6]
 8003680:	2200      	movs	r2, #0
 8003682:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003686:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 8003688:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	461a      	mov	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	889b      	ldrh	r3, [r3, #4]
 800369c:	b29b      	uxth	r3, r3
 800369e:	61fb      	str	r3, [r7, #28]
            /* expedited bits used calculation */
            dss = 0x0c;
 80036a0:	230c      	movs	r3, #12
 80036a2:	76fb      	strb	r3, [r7, #27]
            if (size > 8)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d901      	bls.n	80036ae <SDO_upload+0xd6>
            {
               dss = 0x08;
 80036aa:	2308      	movs	r3, #8
 80036ac:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 16)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d901      	bls.n	80036b8 <SDO_upload+0xe0>
            {
               dss = 0x04;
 80036b4:	2304      	movs	r3, #4
 80036b6:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 24)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b18      	cmp	r3, #24
 80036bc:	d901      	bls.n	80036c2 <SDO_upload+0xea>
            {
               dss = 0x00;
 80036be:	2300      	movs	r3, #0
 80036c0:	76fb      	strb	r3, [r7, #27]
            }
            coeres->index = htoes (index);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	8a7a      	ldrh	r2, [r7, #18]
 80036c6:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	7c7a      	ldrb	r2, [r7, #17]
 80036ce:	72da      	strb	r2, [r3, #11]
            if (size <= 32)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d836      	bhi.n	8003744 <SDO_upload+0x16c>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 80036d6:	7efb      	ldrb	r3, [r7, #27]
 80036d8:	3343      	adds	r3, #67	; 0x43
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	721a      	strb	r2, [r3, #8]
                  COE_SIZE_INDICATOR + COE_EXPEDITED_INDICATOR + dss;
               if ((objd + nsub)->data == NULL)
 80036e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4413      	add	r3, r2
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <SDO_upload+0x13a>
               {
                  /* use constant value */
                  coeres->size = htoel ((objd + nsub)->value);
 80036f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e06a      	b.n	80037e8 <SDO_upload+0x210>
               }
               else
               {
                  /* convert bits to bytes */
                  size = (size + 7) >> 3;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3307      	adds	r3, #7
 8003716:	08db      	lsrs	r3, r3, #3
 8003718:	61fb      	str	r3, [r7, #28]
                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800371a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4413      	add	r3, r2
 800372c:	6919      	ldr	r1, [r3, #16]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f103 020c 	add.w	r2, r3, #12
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	b29b      	uxth	r3, r3
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	f7ff fef5 	bl	800352c <copy2mbx>
 8003742:	e051      	b.n	80037e8 <SDO_upload+0x210>
               }
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2241      	movs	r2, #65	; 0x41
 8003748:	721a      	strb	r2, [r3, #8]
                  COE_SIZE_INDICATOR;
               /* convert bits to bytes */
               size = (size + 7) >> 3;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3307      	adds	r3, #7
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	61fb      	str	r3, [r7, #28]
               coeres->size = htoel (size);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	60da      	str	r2, [r3, #12]
               if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f103 020a 	add.w	r2, r3, #10
 800375e:	4b33      	ldr	r3, [pc, #204]	; (800382c <SDO_upload+0x254>)
 8003760:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8003764:	3b06      	subs	r3, #6
 8003766:	429a      	cmp	r2, r3
 8003768:	d920      	bls.n	80037ac <SDO_upload+0x1d4>
               {
                  /* segmented transfer needed */
                  /* set total size in bytes */
                  ESCvar.frags = size;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	b29a      	uxth	r2, r3
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <SDO_upload+0x254>)
 8003770:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                  /* limit to mailbox size */
                  size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <SDO_upload+0x254>)
 8003776:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 800377a:	3b10      	subs	r3, #16
 800377c:	61fb      	str	r3, [r7, #28]
                  /* number of bytes done */
                  ESCvar.fragsleft = size;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	b29a      	uxth	r2, r3
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <SDO_upload+0x254>)
 8003784:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSEU;
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <SDO_upload+0x254>)
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                  ESCvar.data = (objd + nsub)->data;
 8003790:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <SDO_upload+0x254>)
 80037a6:	f8c2 3096 	str.w	r3, [r2, #150]	; 0x96
 80037aa:	e003      	b.n	80037b4 <SDO_upload+0x1dc>
               }
               else
               {
                  ESCvar.segmented = 0;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <SDO_upload+0x254>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
               }
               coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	330a      	adds	r3, #10
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	801a      	strh	r2, [r3, #0]
               /* use dynamic data */
               copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 80037c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4413      	add	r3, r2
 80037d2:	6919      	ldr	r1, [r3, #16]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4608      	mov	r0, r1
 80037e0:	4611      	mov	r1, r2
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7ff fea2 	bl	800352c <copy2mbx>
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <SDO_upload+0x258>)
 80037ec:	2103      	movs	r1, #3
 80037ee:	54d1      	strb	r1, [r2, r3]
 80037f0:	e00e      	b.n	8003810 <SDO_upload+0x238>
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 80037f2:	8a7a      	ldrh	r2, [r7, #18]
 80037f4:	7c7b      	ldrb	r3, [r7, #17]
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <SDO_upload+0x25c>)
 80037fc:	f7ff fea6 	bl	800354c <SDO_abort>
 8003800:	e006      	b.n	8003810 <SDO_upload+0x238>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8003802:	8a7a      	ldrh	r2, [r7, #18]
 8003804:	7c7b      	ldrb	r3, [r7, #17]
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <SDO_upload+0x260>)
 800380c:	f7ff fe9e 	bl	800354c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <SDO_upload+0x258>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <SDO_upload+0x254>)
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	1ffeaa14 	.word	0x1ffeaa14
 8003828:	08005554 	.word	0x08005554
 800382c:	1ffea940 	.word	0x1ffea940
 8003830:	1ffeab98 	.word	0x1ffeab98
 8003834:	06090011 	.word	0x06090011
 8003838:	06020000 	.word	0x06020000

0800383c <SDO_uploadsegment>:
/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 *
 */
void SDO_uploadsegment (void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset;
   coesdo = (_COEsdo *) &MBX[0];
 8003842:	4b54      	ldr	r3, [pc, #336]	; (8003994 <SDO_uploadsegment+0x158>)
 8003844:	613b      	str	r3, [r7, #16]
   MBXout = ESC_claimbuffer ();
 8003846:	f7fe fd0d 	bl	8002264 <ESC_claimbuffer>
 800384a:	4603      	mov	r3, r0
 800384c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8095 	beq.w	8003980 <SDO_uploadsegment+0x144>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <SDO_uploadsegment+0x15c>)
 800385a:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <SDO_uploadsegment+0x158>)
 8003864:	4413      	add	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
      offset = ESCvar.fragsleft;
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <SDO_uploadsegment+0x15c>)
 800386a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800386e:	b29b      	uxth	r3, r3
 8003870:	607b      	str	r3, [r7, #4]
      size = ESCvar.frags - ESCvar.fragsleft;
 8003872:	4b49      	ldr	r3, [pc, #292]	; (8003998 <SDO_uploadsegment+0x15c>)
 8003874:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <SDO_uploadsegment+0x15c>)
 800387e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003882:	b29b      	uxth	r3, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	617b      	str	r3, [r7, #20]
      coeres->mbxheader.mbxtype = MBXCOE;
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	7953      	ldrb	r3, [r2, #5]
 800388c:	2103      	movs	r1, #3
 800388e:	f361 0303 	bfi	r3, r1, #0, #4
 8003892:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	719a      	strb	r2, [r3, #6]
 800389a:	2200      	movs	r2, #0
 800389c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80038a0:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
      coeres->command = COE_COMMAND_UPLOADSEGMENT + (coesdo->command & COE_TOGGLEBIT);  // copy toggle bit
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	7a1b      	ldrb	r3, [r3, #8]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	721a      	strb	r2, [r3, #8]
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1cda      	adds	r2, r3, #3
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038b6:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 80038ba:	3b06      	subs	r3, #6
 80038bc:	429a      	cmp	r2, r3
 80038be:	d916      	bls.n	80038ee <SDO_uploadsegment+0xb2>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 80038c0:	4b35      	ldr	r3, [pc, #212]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038c2:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 80038c6:	3b09      	subs	r3, #9
 80038c8:	617b      	str	r3, [r7, #20]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80038ca:	4b33      	ldr	r3, [pc, #204]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038cc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	b29a      	uxth	r2, r3
 80038da:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038dc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3303      	adds	r3, #3
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	e035      	b.n	800395a <SDO_uploadsegment+0x11e>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
         ESCvar.frags = 0;
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <SDO_uploadsegment+0x15c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         ESCvar.fragsleft = 0;
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <SDO_uploadsegment+0x15c>)
 8003906:	2200      	movs	r2, #0
 8003908:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800390c:	2200      	movs	r2, #0
 800390e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
         coeres->command += COE_COMMAND_LASTSEGMENTBIT;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	7a1b      	ldrb	r3, [r3, #8]
 8003916:	3301      	adds	r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d906      	bls.n	8003932 <SDO_uploadsegment+0xf6>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	b29b      	uxth	r3, r3
 8003928:	3303      	adds	r3, #3
 800392a:	b29a      	uxth	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e013      	b.n	800395a <SDO_uploadsegment+0x11e>
         }
         else
         {
            coeres->command += (7 - size) << 1;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	7a1a      	ldrb	r2, [r3, #8]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	b2db      	uxtb	r3, r3
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4413      	add	r3, r2
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	f042 020a 	orr.w	r2, r2, #10
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	705a      	strb	r2, [r3, #1]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1, size);        //copy to mailbox
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <SDO_uploadsegment+0x15c>)
 800395c:	f8d3 2096 	ldr.w	r2, [r3, #150]	; 0x96
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	18d1      	adds	r1, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3308      	adds	r3, #8
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	461a      	mov	r2, r3
 8003974:	f7ff fdda 	bl	800352c <copy2mbx>

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <SDO_uploadsegment+0x160>)
 800397c:	2103      	movs	r1, #3
 800397e:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <SDO_uploadsegment+0x160>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <SDO_uploadsegment+0x15c>)
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	1ffeaa14 	.word	0x1ffeaa14
 8003998:	1ffea940 	.word	0x1ffea940
 800399c:	1ffeab98 	.word	0x1ffeab98

080039a0 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
void SDO_download (void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
   int16_t nidx, nsub;
   uint8_t MBXout;
   uint16_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   coesdo = (_COEsdo *) &MBX[0];
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <SDO_download+0x23c>)
 80039a8:	617b      	str	r3, [r7, #20]
   index = etohs (coesdo->index);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	7a5a      	ldrb	r2, [r3, #9]
 80039ae:	7a9b      	ldrb	r3, [r3, #10]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	4313      	orrs	r3, r2
 80039b4:	827b      	strh	r3, [r7, #18]
   subindex = coesdo->subindex;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	7adb      	ldrb	r3, [r3, #11]
 80039ba:	747b      	strb	r3, [r7, #17]
   nidx = SDO_findobject (index);
 80039bc:	8a7b      	ldrh	r3, [r7, #18]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fb58 	bl	8003074 <SDO_findobject>
 80039c4:	4603      	mov	r3, r0
 80039c6:	81fb      	strh	r3, [r7, #14]
   if (nidx >= 0)
 80039c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f2c0 80f4 	blt.w	8003bba <SDO_download+0x21a>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80039d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039d6:	7c7b      	ldrb	r3, [r7, #17]
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	f7ff faf4 	bl	8002fc8 <SDO_findsubindex>
 80039e0:	4603      	mov	r3, r0
 80039e2:	81bb      	strh	r3, [r7, #12]
      if (nsub >= 0)
 80039e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f2c0 80de 	blt.w	8003baa <SDO_download+0x20a>
      {
         objd = SDOobjects[nidx].objdesc;
 80039ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039f2:	497b      	ldr	r1, [pc, #492]	; (8003be0 <SDO_download+0x240>)
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	3308      	adds	r3, #8
 8003a00:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003a04:	60bb      	str	r3, [r7, #8]
         if (((objd + nsub)->access == ATYPE_RW) ||
 8003a06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4413      	add	r3, r2
 8003a18:	88db      	ldrh	r3, [r3, #6]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8003a1e:	d016      	beq.n	8003a4e <SDO_download+0xae>
             (((objd + nsub)->access == ATYPE_RWpre)
 8003a20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4413      	add	r3, r2
 8003a32:	88db      	ldrh	r3, [r3, #6]
 8003a34:	b29b      	uxth	r3, r3
   {
      nsub = SDO_findsubindex (nidx, subindex);
      if (nsub >= 0)
      {
         objd = SDOobjects[nidx].objdesc;
         if (((objd + nsub)->access == ATYPE_RW) ||
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f040 8099 	bne.w	8003b6e <SDO_download+0x1ce>
             (((objd + nsub)->access == ATYPE_RWpre)
              && ((ESCvar.ALstatus & 0x0f) == ESCpreop)))
 8003a3c:	4b69      	ldr	r3, [pc, #420]	; (8003be4 <SDO_download+0x244>)
 8003a3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	f040 8090 	bne.w	8003b6e <SDO_download+0x1ce>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	7a1b      	ldrb	r3, [r3, #8]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <SDO_download+0xd4>
            {
               size = 4 - ((coesdo->command & 0x0c) >> 2);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	7a1b      	ldrb	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	109b      	asrs	r3, r3, #2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f1c3 0304 	rsb	r3, r3, #4
 8003a6a:	83fb      	strh	r3, [r7, #30]
               mbxdata = &(coesdo->size);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e006      	b.n	8003a82 <SDO_download+0xe2>
            }
            else
            {
               /* normal upload */
               size = (etohl (coesdo->size) & 0xffff);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	83fb      	strh	r3, [r7, #30]
               mbxdata = (&(coesdo->size)) + 1;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	3304      	adds	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
 8003a82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4413      	add	r3, r2
 8003a94:	889b      	ldrh	r3, [r3, #4]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3307      	adds	r3, #7
 8003a9a:	10db      	asrs	r3, r3, #3
 8003a9c:	80fb      	strh	r3, [r7, #6]
            if (actsize == size)
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	8bfb      	ldrh	r3, [r7, #30]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d15a      	bne.n	8003b5c <SDO_download+0x1bc>
            {
               if (ESC_pre_objecthandler (index, subindex))
 8003aa6:	8a7a      	ldrh	r2, [r7, #18]
 8003aa8:	7c7b      	ldrb	r3, [r7, #17]
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7fd fe0f 	bl	80016d0 <ESC_pre_objecthandler>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d059      	beq.n	8003b6c <SDO_download+0x1cc>
               {
                  copy2mbx (mbxdata, (objd + nsub)->data, size);
 8003ab8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4413      	add	r3, r2
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	8bfb      	ldrh	r3, [r7, #30]
 8003ace:	69b8      	ldr	r0, [r7, #24]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f7ff fd2a 	bl	800352c <copy2mbx>
                  MBXout = ESC_claimbuffer ();
 8003ad8:	f7fe fbc4 	bl	8002264 <ESC_claimbuffer>
 8003adc:	4603      	mov	r3, r0
 8003ade:	717b      	strb	r3, [r7, #5]
                  if (MBXout)
 8003ae0:	797b      	ldrb	r3, [r7, #5]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d033      	beq.n	8003b4e <SDO_download+0x1ae>
                  {
                     coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8003ae6:	797b      	ldrb	r3, [r7, #5]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	; (8003be4 <SDO_download+0x244>)
 8003aea:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <SDO_download+0x23c>)
 8003af4:	4413      	add	r3, r2
 8003af6:	603b      	str	r3, [r7, #0]
                     coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f042 020a 	orr.w	r2, r2, #10
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	705a      	strb	r2, [r3, #1]
                     coeres->mbxheader.mbxtype = MBXCOE;
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	7953      	ldrb	r3, [r2, #5]
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	f361 0303 	bfi	r3, r1, #0, #4
 8003b10:	7153      	strb	r3, [r2, #5]
                     coeres->coeheader.numberservice =
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	719a      	strb	r2, [r3, #6]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003b1e:	71da      	strb	r2, [r3, #7]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                     coeres->index = htoes (index);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	8a7a      	ldrh	r2, [r7, #18]
 8003b24:	f8a3 2009 	strh.w	r2, [r3, #9]
                     coeres->subindex = subindex;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	7c7a      	ldrb	r2, [r7, #17]
 8003b2c:	72da      	strb	r2, [r3, #11]
                     coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2260      	movs	r2, #96	; 0x60
 8003b32:	721a      	strb	r2, [r3, #8]
                     coeres->size = htoel (0);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	731a      	strb	r2, [r3, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	735a      	strb	r2, [r3, #13]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	739a      	strb	r2, [r3, #14]
 8003b42:	2200      	movs	r2, #0
 8003b44:	73da      	strb	r2, [r3, #15]
                     MBXcontrol[MBXout].state = MBXstate_outreq;
 8003b46:	797b      	ldrb	r3, [r7, #5]
 8003b48:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <SDO_download+0x248>)
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	54d1      	strb	r1, [r2, r3]
                  }
                 /* external object write handler */
                 ESC_objecthandler (index, subindex);
 8003b4e:	8a7a      	ldrh	r2, [r7, #18]
 8003b50:	7c7b      	ldrb	r3, [r7, #17]
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7fd fdd9 	bl	800170c <ESC_objecthandler>
               /* normal upload */
               size = (etohl (coesdo->size) & 0xffff);
               mbxdata = (&(coesdo->size)) + 1;
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
            if (actsize == size)
 8003b5a:	e025      	b.n	8003ba8 <SDO_download+0x208>
                 ESC_objecthandler (index, subindex);
               }
            }
            else
            {
               SDO_abort (index, subindex, ABORT_TYPEMISMATCH);
 8003b5c:	8a7a      	ldrh	r2, [r7, #18]
 8003b5e:	7c7b      	ldrb	r3, [r7, #17]
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	4a21      	ldr	r2, [pc, #132]	; (8003bec <SDO_download+0x24c>)
 8003b66:	f7ff fcf1 	bl	800354c <SDO_abort>
               /* normal upload */
               size = (etohl (coesdo->size) & 0xffff);
               mbxdata = (&(coesdo->size)) + 1;
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
            if (actsize == size)
 8003b6a:	e01d      	b.n	8003ba8 <SDO_download+0x208>
 8003b6c:	e01c      	b.n	8003ba8 <SDO_download+0x208>
               SDO_abort (index, subindex, ABORT_TYPEMISMATCH);
            }
         }
         else
         {
            if ((objd + nsub)->access == ATYPE_RWpre)
 8003b6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4413      	add	r3, r2
 8003b80:	88db      	ldrh	r3, [r3, #6]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b0f      	cmp	r3, #15
 8003b86:	d107      	bne.n	8003b98 <SDO_download+0x1f8>
            {
               SDO_abort (index, subindex, ABORT_NOTINTHISSTATE);
 8003b88:	8a7a      	ldrh	r2, [r7, #18]
 8003b8a:	7c7b      	ldrb	r3, [r7, #17]
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4a17      	ldr	r2, [pc, #92]	; (8003bf0 <SDO_download+0x250>)
 8003b92:	f7ff fcdb 	bl	800354c <SDO_abort>
 8003b96:	e017      	b.n	8003bc8 <SDO_download+0x228>
            }
            else
            {
               SDO_abort (index, subindex, ABORT_READONLY);
 8003b98:	8a7a      	ldrh	r2, [r7, #18]
 8003b9a:	7c7b      	ldrb	r3, [r7, #17]
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <SDO_download+0x254>)
 8003ba2:	f7ff fcd3 	bl	800354c <SDO_abort>
 8003ba6:	e00f      	b.n	8003bc8 <SDO_download+0x228>
 8003ba8:	e00e      	b.n	8003bc8 <SDO_download+0x228>
            }
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 8003baa:	8a7a      	ldrh	r2, [r7, #18]
 8003bac:	7c7b      	ldrb	r3, [r7, #17]
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <SDO_download+0x258>)
 8003bb4:	f7ff fcca 	bl	800354c <SDO_abort>
 8003bb8:	e006      	b.n	8003bc8 <SDO_download+0x228>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8003bba:	8a7a      	ldrh	r2, [r7, #18]
 8003bbc:	7c7b      	ldrb	r3, [r7, #17]
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <SDO_download+0x25c>)
 8003bc4:	f7ff fcc2 	bl	800354c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <SDO_download+0x248>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <SDO_download+0x244>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	1ffeaa14 	.word	0x1ffeaa14
 8003be0:	08005554 	.word	0x08005554
 8003be4:	1ffea940 	.word	0x1ffea940
 8003be8:	1ffeab98 	.word	0x1ffeab98
 8003bec:	06070010 	.word	0x06070010
 8003bf0:	08000022 	.word	0x08000022
 8003bf4:	06010002 	.word	0x06010002
 8003bf8:	06090011 	.word	0x06090011
 8003bfc:	06020000 	.word	0x06020000

08003c00 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
void SDO_infoerror (uint32_t abortcode)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8003c08:	f7fe fb2c 	bl	8002264 <ESC_claimbuffer>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03e      	beq.n	8003c94 <SDO_infoerror+0x94>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <SDO_infoerror+0x9c>)
 8003c1a:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <SDO_infoerror+0xa0>)
 8003c24:	4413      	add	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes ((uint16_t) 0x0a);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f042 020a 	orr.w	r2, r2, #10
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	7953      	ldrb	r3, [r2, #5]
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	f361 0303 	bfi	r3, r1, #0, #4
 8003c40:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	719a      	strb	r2, [r3, #6]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4e:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	7a13      	ldrb	r3, [r2, #8]
 8003c54:	2107      	movs	r1, #7
 8003c56:	f361 0306 	bfi	r3, r1, #0, #7
 8003c5a:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	7a13      	ldrb	r3, [r2, #8]
 8003c60:	f36f 13c7 	bfc	r3, #7, #1
 8003c64:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	729a      	strb	r2, [r3, #10]
 8003c72:	2200      	movs	r2, #0
 8003c74:	72da      	strb	r2, [r3, #11]
      coeres->index = htoel (abortcode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	819a      	strh	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <SDO_infoerror+0xa4>)
 8003c82:	2103      	movs	r1, #3
 8003c84:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <SDO_infoerror+0xa4>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <SDO_infoerror+0x9c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
   }
}
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	1ffea940 	.word	0x1ffea940
 8003ca0:	1ffeaa14 	.word	0x1ffeaa14
 8003ca4:	1ffeab98 	.word	0x1ffeab98

08003ca8 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
void SDO_getodlist (void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
   uint16_t frags;
   uint8_t MBXout = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 8003cb6:	e002      	b.n	8003cbe <SDO_getodlist+0x16>
   {
      entries++;
 8003cb8:	8abb      	ldrh	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	82bb      	strh	r3, [r7, #20]
   uint16_t entries = 0;
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 8003cbe:	8aba      	ldrh	r2, [r7, #20]
 8003cc0:	498b      	ldr	r1, [pc, #556]	; (8003ef0 <SDO_getodlist+0x248>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	440b      	add	r3, r1
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d1ef      	bne.n	8003cb8 <SDO_getodlist+0x10>
   {
      entries++;
   }
   ESCvar.entries = entries;
 8003cd8:	4b86      	ldr	r3, [pc, #536]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003cda:	8aba      	ldrh	r2, [r7, #20]
 8003cdc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
   frags = ((entries << 1) + ODLISTSIZE - 1);
 8003ce0:	8abb      	ldrh	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003ce8:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8003cec:	885b      	ldrh	r3, [r3, #2]
 8003cee:	3b0e      	subs	r3, #14
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	817b      	strh	r3, [r7, #10]
   frags /= ODLISTSIZE;
 8003d00:	897a      	ldrh	r2, [r7, #10]
 8003d02:	4b7c      	ldr	r3, [pc, #496]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003d04:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8003d08:	885b      	ldrh	r3, [r3, #2]
 8003d0a:	f1a3 010e 	sub.w	r1, r3, #14
 8003d0e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003d12:	400b      	ands	r3, r1
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	817b      	strh	r3, [r7, #10]
   coer = (_COEobjdesc *) &MBX[0];
 8003d1a:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <SDO_getodlist+0x250>)
 8003d1c:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	899b      	ldrh	r3, [r3, #12]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d903      	bls.n	8003d30 <SDO_getodlist+0x88>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8003d28:	4874      	ldr	r0, [pc, #464]	; (8003efc <SDO_getodlist+0x254>)
 8003d2a:	f7ff ff69 	bl	8003c00 <SDO_infoerror>
 8003d2e:	e003      	b.n	8003d38 <SDO_getodlist+0x90>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8003d30:	f7fe fa98 	bl	8002264 <ESC_claimbuffer>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80d4 	beq.w	8003ee8 <SDO_getodlist+0x240>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003d44:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <SDO_getodlist+0x250>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	7953      	ldrb	r3, [r2, #5]
 8003d56:	2103      	movs	r1, #3
 8003d58:	f361 0303 	bfi	r3, r1, #0, #4
 8003d5c:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	719a      	strb	r2, [r3, #6]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d6a:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	7a13      	ldrb	r3, [r2, #8]
 8003d70:	2102      	movs	r1, #2
 8003d72:	f361 0306 	bfi	r3, r1, #0, #7
 8003d76:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	899b      	ldrh	r3, [r3, #12]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d147      	bne.n	8003e12 <SDO_getodlist+0x16a>
      {
         coel->index = htoes ((uint16_t) 0x00);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	731a      	strb	r2, [r3, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	735a      	strb	r2, [r3, #13]
         coel->infoheader.incomplete = 0;
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	7a13      	ldrb	r3, [r2, #8]
 8003d90:	f36f 13c7 	bfc	r3, #7, #1
 8003d94:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	729a      	strb	r2, [r3, #10]
 8003da2:	2200      	movs	r2, #0
 8003da4:	72da      	strb	r2, [r3, #11]
         MBXcontrol[0].state = MBXstate_idle;
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <SDO_getodlist+0x258>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003dac:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
         ESCvar.frags = frags;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003db6:	897a      	ldrh	r2, [r7, #10]
 8003db8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8003dbc:	897b      	ldrh	r3, [r7, #10]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	4b4c      	ldr	r3, [pc, #304]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003dc4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
         p = &(coel->datatype);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	330e      	adds	r3, #14
 8003dcc:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8aba      	ldrh	r2, [r7, #20]
 8003dd2:	801a      	strh	r2, [r3, #0]
         p++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	801a      	strh	r2, [r3, #0]
         p++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3302      	adds	r3, #2
 8003de4:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	801a      	strh	r2, [r3, #0]
         p++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3302      	adds	r3, #2
 8003df0:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	801a      	strh	r2, [r3, #0]
         p++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f042 0212 	orr.w	r2, r2, #18
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	705a      	strb	r2, [r3, #1]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	899b      	ldrh	r3, [r3, #12]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d161      	bne.n	8003ee0 <SDO_getodlist+0x238>
      {
         if (frags > 1)
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d914      	bls.n	8003e4c <SDO_getodlist+0x1a4>
         {
            coel->infoheader.incomplete = 1;
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	7a13      	ldrb	r3, [r2, #8]
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e2e:	2213      	movs	r2, #19
 8003e30:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            n = ODLISTSIZE >> 1;
 8003e34:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e36:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8003e3a:	885b      	ldrh	r3, [r3, #2]
 8003e3c:	f1a3 020e 	sub.w	r2, r3, #14
 8003e40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e44:	4013      	ands	r3, r2
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	823b      	strh	r3, [r7, #16]
 8003e4a:	e00d      	b.n	8003e68 <SDO_getodlist+0x1c0>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	7a13      	ldrb	r3, [r2, #8]
 8003e50:	f36f 13c7 	bfc	r3, #7, #1
 8003e54:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <SDO_getodlist+0x258>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            n = entries;
 8003e64:	8abb      	ldrh	r3, [r7, #20]
 8003e66:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e70:	897a      	ldrh	r2, [r7, #10]
 8003e72:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e7e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <SDO_getodlist+0x24c>)
 8003e84:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	815a      	strh	r2, [r3, #10]
         coel->index = htoes ((uint16_t) 0x01);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	731a      	strb	r2, [r3, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	735a      	strb	r2, [r3, #13]

         p = &(coel->datatype);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	330e      	adds	r3, #14
 8003ea0:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	827b      	strh	r3, [r7, #18]
 8003ea6:	e010      	b.n	8003eca <SDO_getodlist+0x222>
         {
            *p = htoes (SDOobjects[i].index);
 8003ea8:	8a7a      	ldrh	r2, [r7, #18]
 8003eaa:	4911      	ldr	r1, [pc, #68]	; (8003ef0 <SDO_getodlist+0x248>)
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	801a      	strh	r2, [r3, #0]
            p++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	60fb      	str	r3, [r7, #12]
         ESCvar.fragsleft = frags - 1;
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
         coel->index = htoes ((uint16_t) 0x01);

         p = &(coel->datatype);
         for (i = 0; i < n; i++)
 8003ec4:	8a7b      	ldrh	r3, [r7, #18]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	827b      	strh	r3, [r7, #18]
 8003eca:	8a7a      	ldrh	r2, [r7, #18]
 8003ecc:	8a3b      	ldrh	r3, [r7, #16]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3ea      	bcc.n	8003ea8 <SDO_getodlist+0x200>
         {
            *p = htoes (SDOobjects[i].index);
            p++;
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 8003ed2:	8a3b      	ldrh	r3, [r7, #16]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3308      	adds	r3, #8
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <SDO_getodlist+0x258>)
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	54d1      	strb	r1, [r2, r3]
   }
}
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	08005554 	.word	0x08005554
 8003ef4:	1ffea940 	.word	0x1ffea940
 8003ef8:	1ffeaa14 	.word	0x1ffeaa14
 8003efc:	06010000 	.word	0x06010000
 8003f00:	1ffeab98 	.word	0x1ffeab98

08003f04 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 *
 */
void SDO_getodlistcont (void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 8003f0a:	f7fe f9ab 	bl	8002264 <ESC_claimbuffer>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 809e 	beq.w	8004056 <SDO_getodlistcont+0x152>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <SDO_getodlistcont+0x158>)
 8003f1e:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	4a4e      	ldr	r2, [pc, #312]	; (8004060 <SDO_getodlistcont+0x15c>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	7953      	ldrb	r3, [r2, #5]
 8003f30:	2103      	movs	r1, #3
 8003f32:	f361 0303 	bfi	r3, r1, #0, #4
 8003f36:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	719a      	strb	r2, [r3, #6]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f44:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	7a13      	ldrb	r3, [r2, #8]
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f361 0306 	bfi	r3, r1, #0, #7
 8003f50:	7213      	strb	r3, [r2, #8]
      s = (ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1);
 8003f52:	4b42      	ldr	r3, [pc, #264]	; (800405c <SDO_getodlistcont+0x158>)
 8003f54:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	; (800405c <SDO_getodlistcont+0x158>)
 8003f5e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <SDO_getodlistcont+0x158>)
 8003f6a:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8003f6e:	885b      	ldrh	r3, [r3, #2]
 8003f70:	f1a3 010e 	sub.w	r1, r3, #14
 8003f74:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003f78:	400b      	ands	r3, r1
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	fb12 f303 	smulbb	r3, r2, r3
 8003f82:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <SDO_getodlistcont+0x158>)
 8003f86:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d913      	bls.n	8003fb8 <SDO_getodlistcont+0xb4>
      {
         coel->infoheader.incomplete = 1;
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	7a13      	ldrb	r3, [r2, #8]
 8003f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f98:	7213      	strb	r3, [r2, #8]
         n = s + (ODLISTSIZE >> 1);
 8003f9a:	4b30      	ldr	r3, [pc, #192]	; (800405c <SDO_getodlistcont+0x158>)
 8003f9c:	f8d3 3075 	ldr.w	r3, [r3, #117]	; 0x75
 8003fa0:	885b      	ldrh	r3, [r3, #2]
 8003fa2:	f1a3 020e 	sub.w	r2, r3, #14
 8003fa6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003faa:	4013      	ands	r3, r2
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	82bb      	strh	r3, [r7, #20]
 8003fb6:	e013      	b.n	8003fe0 <SDO_getodlistcont+0xdc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	7a13      	ldrb	r3, [r2, #8]
 8003fbc:	f36f 13c7 	bfc	r3, #7, #1
 8003fc0:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8003fc2:	4b28      	ldr	r3, [pc, #160]	; (8004064 <SDO_getodlistcont+0x160>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <SDO_getodlistcont+0x158>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
         n = ESCvar.entries;
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <SDO_getodlistcont+0x158>)
 8003fd2:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 8003fd6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	; (800405c <SDO_getodlistcont+0x158>)
 8003fe8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <SDO_getodlistcont+0x158>)
 8003ff4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
      coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8003ff8:	4b18      	ldr	r3, [pc, #96]	; (800405c <SDO_getodlistcont+0x158>)
 8003ffa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	330c      	adds	r3, #12
 8004008:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	82fb      	strh	r3, [r7, #22]
 800400e:	e010      	b.n	8004032 <SDO_getodlistcont+0x12e>
      {
         *p = htoes (SDOobjects[i].index);
 8004010:	8afa      	ldrh	r2, [r7, #22]
 8004012:	4915      	ldr	r1, [pc, #84]	; (8004068 <SDO_getodlistcont+0x164>)
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	440b      	add	r3, r1
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	801a      	strh	r2, [r3, #0]
         p++;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3302      	adds	r3, #2
 800402a:	613b      	str	r3, [r7, #16]
      coel->infoheader.reserved = 0x00;
      ESCvar.fragsleft--;
      coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
      for (i = s; i < n; i++)
 800402c:	8afb      	ldrh	r3, [r7, #22]
 800402e:	3301      	adds	r3, #1
 8004030:	82fb      	strh	r3, [r7, #22]
 8004032:	8afa      	ldrh	r2, [r7, #22]
 8004034:	8abb      	ldrh	r3, [r7, #20]
 8004036:	429a      	cmp	r2, r3
 8004038:	d3ea      	bcc.n	8004010 <SDO_getodlistcont+0x10c>
      {
         *p = htoes (SDOobjects[i].index);
         p++;
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800403a:	8aba      	ldrh	r2, [r7, #20]
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	b29b      	uxth	r3, r3
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	3306      	adds	r3, #6
 8004048:	b29a      	uxth	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <SDO_getodlistcont+0x160>)
 8004052:	2103      	movs	r1, #3
 8004054:	54d1      	strb	r1, [r2, r3]
   }
}
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	1ffea940 	.word	0x1ffea940
 8004060:	1ffeaa14 	.word	0x1ffeaa14
 8004064:	1ffeab98 	.word	0x1ffeab98
 8004068:	08005554 	.word	0x08005554

0800406c <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_getod (void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <SDO_getod+0x1a8>)
 8004078:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	7b1a      	ldrb	r2, [r3, #12]
 800407e:	7b5b      	ldrb	r3, [r3, #13]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	82fb      	strh	r3, [r7, #22]
   nidx = SDO_findobject (index);
 8004086:	8afb      	ldrh	r3, [r7, #22]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fff3 	bl	8003074 <SDO_findobject>
 800408e:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f2c0 80b7 	blt.w	8004206 <SDO_getod+0x19a>
   {
      MBXout = ESC_claimbuffer ();
 8004098:	f7fe f8e4 	bl	8002264 <ESC_claimbuffer>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
      if (MBXout)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80b2 	beq.w	800420c <SDO_getod+0x1a0>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <SDO_getod+0x1ac>)
 80040ac:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	4a57      	ldr	r2, [pc, #348]	; (8004214 <SDO_getod+0x1a8>)
 80040b6:	4413      	add	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]
         coel->mbxheader.mbxtype = MBXCOE;
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	7953      	ldrb	r3, [r2, #5]
 80040be:	2103      	movs	r1, #3
 80040c0:	f361 0303 	bfi	r3, r1, #0, #4
 80040c4:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	719a      	strb	r2, [r3, #6]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d2:	71da      	strb	r2, [r3, #7]
            htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
         coel->infoheader.opcode = COE_GETODRESPONSE;
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	7a13      	ldrb	r3, [r2, #8]
 80040d8:	2104      	movs	r1, #4
 80040da:	f361 0306 	bfi	r3, r1, #0, #7
 80040de:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	7a13      	ldrb	r3, [r2, #8]
 80040e4:	f36f 13c7 	bfc	r3, #7, #1
 80040e8:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	729a      	strb	r2, [r3, #10]
 80040f6:	2200      	movs	r2, #0
 80040f8:	72da      	strb	r2, [r3, #11]
         coel->index = htoes (index);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	8afa      	ldrh	r2, [r7, #22]
 80040fe:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8004100:	4946      	ldr	r1, [pc, #280]	; (800421c <SDO_getod+0x1b0>)
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	885b      	ldrh	r3, [r3, #2]
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b07      	cmp	r3, #7
 8004114:	d120      	bne.n	8004158 <SDO_getod+0xec>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	b29b      	uxth	r3, r3
 800411a:	b21b      	sxth	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f7fe ff52 	bl	8002fc8 <SDO_findsubindex>
 8004124:	4603      	mov	r3, r0
 8004126:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8004128:	493c      	ldr	r1, [pc, #240]	; (800421c <SDO_getod+0x1b0>)
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	3308      	adds	r3, #8
 8004138:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800413c:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	461a      	mov	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	885b      	ldrh	r3, [r3, #2]
 8004150:	b29a      	uxth	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	81da      	strh	r2, [r3, #14]
 8004156:	e004      	b.n	8004162 <SDO_getod+0xf6>
         }
         else
         {
            coel->datatype = htoes (0);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	739a      	strb	r2, [r3, #14]
 800415e:	2200      	movs	r2, #0
 8004160:	73da      	strb	r2, [r3, #15]
         }
         coel->maxsub = SDOobjects[nidx].maxsub;
 8004162:	492e      	ldr	r1, [pc, #184]	; (800421c <SDO_getod+0x1b0>)
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	440b      	add	r3, r1
 8004170:	791a      	ldrb	r2, [r3, #4]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	741a      	strb	r2, [r3, #16]
         coel->objectcode = SDOobjects[nidx].objtype;
 8004176:	4929      	ldr	r1, [pc, #164]	; (800421c <SDO_getod+0x1b0>)
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	440b      	add	r3, r1
 8004184:	885b      	ldrh	r3, [r3, #2]
 8004186:	b29b      	uxth	r3, r3
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 800418e:	4923      	ldr	r1, [pc, #140]	; (800421c <SDO_getod+0x1b0>)
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	440b      	add	r3, r1
 800419c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80041a0:	623b      	str	r3, [r7, #32]
         d = (uint8_t *) &(coel->name);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3312      	adds	r3, #18
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 80041a8:	e00c      	b.n	80041c4 <SDO_getod+0x158>
         {
            *d = *s;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	701a      	strb	r2, [r3, #0]
            n++;
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	3301      	adds	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
            s++;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	3301      	adds	r3, #1
 80041bc:	623b      	str	r3, [r7, #32]
            d++;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	3301      	adds	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
         }
         coel->maxsub = SDOobjects[nidx].maxsub;
         coel->objectcode = SDOobjects[nidx].objtype;
         s = (uint8_t *) SDOobjects[nidx].name;
         d = (uint8_t *) &(coel->name);
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d006      	beq.n	80041da <SDO_getod+0x16e>
 80041cc:	7ffa      	ldrb	r2, [r7, #31]
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <SDO_getod+0x1ac>)
 80041d0:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 80041d4:	3b12      	subs	r3, #18
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3e7      	bcc.n	80041aa <SDO_getod+0x13e>
            *d = *s;
            n++;
            s++;
            d++;
         }
         *d = *s;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes ((uint16_t) 0x0c + n);
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	330c      	adds	r3, #12
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <SDO_getod+0x1b4>)
 80041f2:	2103      	movs	r1, #3
 80041f4:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <SDO_getod+0x1b4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <SDO_getod+0x1ac>)
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8004204:	e002      	b.n	800420c <SDO_getod+0x1a0>
      }
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
 8004206:	4807      	ldr	r0, [pc, #28]	; (8004224 <SDO_getod+0x1b8>)
 8004208:	f7ff fcfa 	bl	8003c00 <SDO_infoerror>
   }
}
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	1ffeaa14 	.word	0x1ffeaa14
 8004218:	1ffea940 	.word	0x1ffea940
 800421c:	08005554 	.word	0x08005554
 8004220:	1ffeab98 	.word	0x1ffeab98
 8004224:	06020000 	.word	0x06020000

08004228 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_geted (void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
   int32_t nidx, nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8004232:	4b68      	ldr	r3, [pc, #416]	; (80043d4 <SDO_geted+0x1ac>)
 8004234:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	7b1a      	ldrb	r2, [r3, #12]
 800423a:	7b5b      	ldrb	r3, [r3, #13]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4313      	orrs	r3, r2
 8004240:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	7b9b      	ldrb	r3, [r3, #14]
 8004246:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 8004248:	8afb      	ldrh	r3, [r7, #22]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe ff12 	bl	8003074 <SDO_findobject>
 8004250:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f2c0 80b7 	blt.w	80043c8 <SDO_geted+0x1a0>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	b29b      	uxth	r3, r3
 800425e:	b21a      	sxth	r2, r3
 8004260:	7d7b      	ldrb	r3, [r7, #21]
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fe feaf 	bl	8002fc8 <SDO_findsubindex>
 800426a:	4603      	mov	r3, r0
 800426c:	60fb      	str	r3, [r7, #12]
      if (nsub >= 0)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f2c0 80a5 	blt.w	80043c0 <SDO_geted+0x198>
      {
         objd = SDOobjects[nidx].objdesc;
 8004276:	4958      	ldr	r1, [pc, #352]	; (80043d8 <SDO_geted+0x1b0>)
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	440b      	add	r3, r1
 8004284:	3308      	adds	r3, #8
 8004286:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800428a:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 800428c:	f7fd ffea 	bl	8002264 <ESC_claimbuffer>
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8099 	beq.w	80043ce <SDO_geted+0x1a6>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <SDO_geted+0x1b4>)
 80042a0:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	4a4a      	ldr	r2, [pc, #296]	; (80043d4 <SDO_geted+0x1ac>)
 80042aa:	4413      	add	r3, r2
 80042ac:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	7953      	ldrb	r3, [r2, #5]
 80042b2:	2103      	movs	r1, #3
 80042b4:	f361 0303 	bfi	r3, r1, #0, #4
 80042b8:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	719a      	strb	r2, [r3, #6]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c6:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	7a13      	ldrb	r3, [r2, #8]
 80042cc:	2106      	movs	r1, #6
 80042ce:	f361 0306 	bfi	r3, r1, #0, #7
 80042d2:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	7a13      	ldrb	r3, [r2, #8]
 80042d8:	f36f 13c7 	bfc	r3, #7, #1
 80042dc:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	729a      	strb	r2, [r3, #10]
 80042ea:	2200      	movs	r2, #0
 80042ec:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	8afa      	ldrh	r2, [r7, #22]
 80042f2:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	7d7a      	ldrb	r2, [r7, #21]
 80042f8:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2207      	movs	r2, #7
 80042fe:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4413      	add	r3, r2
 8004310:	885b      	ldrh	r3, [r3, #2]
 8004312:	b29a      	uxth	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4413      	add	r3, r2
 8004328:	889b      	ldrh	r3, [r3, #4]
 800432a:	b29a      	uxth	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->access);
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4413      	add	r3, r2
 8004340:	88db      	ldrh	r3, [r3, #6]
 8004342:	b29a      	uxth	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4413      	add	r3, r2
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3316      	adds	r3, #22
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8004362:	e00c      	b.n	800437e <SDO_geted+0x156>
            {
               *d = *s;
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	701a      	strb	r2, [r3, #0]
               n++;
 800436c:	7ffb      	ldrb	r3, [r7, #31]
 800436e:	3301      	adds	r3, #1
 8004370:	77fb      	strb	r3, [r7, #31]
               s++;
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	3301      	adds	r3, #1
 8004376:	623b      	str	r3, [r7, #32]
               d++;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	3301      	adds	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
            coel->datatype = htoes ((objd + nsub)->datatype);
            coel->bitlength = htoes ((objd + nsub)->bitlength);
            coel->access = htoes ((objd + nsub)->access);
            s = (uint8_t *) (objd + nsub)->name;
            d = (uint8_t *) &(coel->name);
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <SDO_geted+0x16c>
 8004386:	7ffa      	ldrb	r2, [r7, #31]
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <SDO_geted+0x1b4>)
 800438a:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 800438e:	3b16      	subs	r3, #22
 8004390:	429a      	cmp	r2, r3
 8004392:	d3e7      	bcc.n	8004364 <SDO_geted+0x13c>
               *d = *s;
               n++;
               s++;
               d++;
            }
            *d = *s;
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes ((uint16_t) 0x10 + n);
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3310      	adds	r3, #16
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <SDO_geted+0x1b8>)
 80043ac:	2103      	movs	r1, #3
 80043ae:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <SDO_geted+0x1b8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <SDO_geted+0x1b4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80043be:	e006      	b.n	80043ce <SDO_geted+0x1a6>
         }
      }
      else
      {
         SDO_infoerror (ABORT_NOSUBINDEX);
 80043c0:	4808      	ldr	r0, [pc, #32]	; (80043e4 <SDO_geted+0x1bc>)
 80043c2:	f7ff fc1d 	bl	8003c00 <SDO_infoerror>
 80043c6:	e002      	b.n	80043ce <SDO_geted+0x1a6>
      }
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
 80043c8:	4807      	ldr	r0, [pc, #28]	; (80043e8 <SDO_geted+0x1c0>)
 80043ca:	f7ff fc19 	bl	8003c00 <SDO_infoerror>
   }
}
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	1ffeaa14 	.word	0x1ffeaa14
 80043d8:	08005554 	.word	0x08005554
 80043dc:	1ffea940 	.word	0x1ffea940
 80043e0:	1ffeab98 	.word	0x1ffeab98
 80043e4:	06090011 	.word	0x06090011
 80043e8:	06020000 	.word	0x06020000

080043ec <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint8_t service;
   if (ESCvar.MBXrun == 0)
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <ESC_coeprocess+0x178>)
 80043f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d100      	bne.n	80043fe <ESC_coeprocess+0x12>
   {
      return;
 80043fc:	e0ae      	b.n	800455c <ESC_coeprocess+0x170>
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <ESC_coeprocess+0x178>)
 8004400:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004404:	2b00      	cmp	r3, #0
 8004406:	d119      	bne.n	800443c <ESC_coeprocess+0x50>
 8004408:	4b57      	ldr	r3, [pc, #348]	; (8004568 <ESC_coeprocess+0x17c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <ESC_coeprocess+0x180>)
 8004412:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	795b      	ldrb	r3, [r3, #5]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d10c      	bne.n	800443c <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b07      	cmp	r3, #7
 800442a:	d803      	bhi.n	8004434 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 800442c:	2008      	movs	r0, #8
 800442e:	f7fd ffa7 	bl	8002380 <MBX_error>
 8004432:	e003      	b.n	800443c <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 8004434:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <ESC_coeprocess+0x178>)
 8004436:	2203      	movs	r2, #3
 8004438:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 800443c:	4b49      	ldr	r3, [pc, #292]	; (8004564 <ESC_coeprocess+0x178>)
 800443e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004442:	2b13      	cmp	r3, #19
 8004444:	d106      	bne.n	8004454 <ESC_coeprocess+0x68>
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <ESC_coeprocess+0x178>)
 8004448:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 8004450:	f7ff fd58 	bl	8003f04 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <ESC_coeprocess+0x178>)
 8004456:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800445a:	2b03      	cmp	r3, #3
 800445c:	d17e      	bne.n	800455c <ESC_coeprocess+0x170>
   {
      coesdo = (_COEsdo *) &MBX[0];
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <ESC_coeprocess+0x180>)
 8004460:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 8004462:	4b42      	ldr	r3, [pc, #264]	; (800456c <ESC_coeprocess+0x180>)
 8004464:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	88db      	ldrh	r3, [r3, #6]
 800446a:	b29b      	uxth	r3, r3
 800446c:	0b1b      	lsrs	r3, r3, #12
 800446e:	b29b      	uxth	r3, r3
 8004470:	70fb      	strb	r3, [r7, #3]
      /* initiate SDO upload request */
      if ((service == COE_SDOREQUEST)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d10a      	bne.n	800448e <ESC_coeprocess+0xa2>
          && (coesdo->command == COE_COMMAND_UPLOADREQUEST)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	7a1b      	ldrb	r3, [r3, #8]
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d106      	bne.n	800448e <ESC_coeprocess+0xa2>
          && (etohs (coesdo->mbxheader.length) == 0x0a))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b0a      	cmp	r3, #10
 8004488:	d101      	bne.n	800448e <ESC_coeprocess+0xa2>
      {
         SDO_upload ();
 800448a:	f7ff f8a5 	bl	80035d8 <SDO_upload>
      }
      /* SDO upload segment request */
      if ((service == COE_SDOREQUEST)
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d112      	bne.n	80044ba <ESC_coeprocess+0xce>
          && ((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	7a1b      	ldrb	r3, [r3, #8]
 8004498:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d10c      	bne.n	80044ba <ESC_coeprocess+0xce>
          && (etohs (coesdo->mbxheader.length) == 0x0a)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b0a      	cmp	r3, #10
 80044a8:	d107      	bne.n	80044ba <ESC_coeprocess+0xce>
          && (ESCvar.segmented == MBXSEU))
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <ESC_coeprocess+0x178>)
 80044ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d102      	bne.n	80044ba <ESC_coeprocess+0xce>
      {
         SDO_uploadsegment ();
 80044b4:	f7ff f9c2 	bl	800383c <SDO_uploadsegment>
 80044b8:	e050      	b.n	800455c <ESC_coeprocess+0x170>
      }
      /* initiate SDO download request */
      else
      {
         if ((service == COE_SDOREQUEST) && ((coesdo->command & 0xf1) == 0x21))
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d108      	bne.n	80044d2 <ESC_coeprocess+0xe6>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	7a1b      	ldrb	r3, [r3, #8]
 80044c4:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 80044c8:	2b21      	cmp	r3, #33	; 0x21
 80044ca:	d102      	bne.n	80044d2 <ESC_coeprocess+0xe6>
         {
            SDO_download ();
 80044cc:	f7ff fa68 	bl	80039a0 <SDO_download>
 80044d0:	e044      	b.n	800455c <ESC_coeprocess+0x170>
         }
         /* initiate SDO get OD list */
         else
         {
            if ((service == COE_SDOINFORMATION)
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d109      	bne.n	80044ec <ESC_coeprocess+0x100>
                && (coeobjdesc->infoheader.opcode == 0x01))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7a1b      	ldrb	r3, [r3, #8]
 80044dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <ESC_coeprocess+0x100>
            {
               SDO_getodlist ();
 80044e6:	f7ff fbdf 	bl	8003ca8 <SDO_getodlist>
 80044ea:	e037      	b.n	800455c <ESC_coeprocess+0x170>
            }
            /* initiate SDO get OD */
            else
            {
               if ((service == COE_SDOINFORMATION)
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d109      	bne.n	8004506 <ESC_coeprocess+0x11a>
                   && (coeobjdesc->infoheader.opcode == 0x03))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	7a1b      	ldrb	r3, [r3, #8]
 80044f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d102      	bne.n	8004506 <ESC_coeprocess+0x11a>
               {
                  SDO_getod ();
 8004500:	f7ff fdb4 	bl	800406c <SDO_getod>
 8004504:	e02a      	b.n	800455c <ESC_coeprocess+0x170>
               }
               /* initiate SDO get ED */
               else
               {
                  if ((service == COE_SDOINFORMATION)
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <ESC_coeprocess+0x134>
                      && (coeobjdesc->infoheader.opcode == 0x05))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7a1b      	ldrb	r3, [r3, #8]
 8004510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b05      	cmp	r3, #5
 8004518:	d102      	bne.n	8004520 <ESC_coeprocess+0x134>
                  {
                     SDO_geted ();
 800451a:	f7ff fe85 	bl	8004228 <SDO_geted>
 800451e:	e01d      	b.n	800455c <ESC_coeprocess+0x170>
                  }
                  else
                  {
                     /* COE not recognised above */
                     if (ESCvar.xoe == MBXCOE)
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <ESC_coeprocess+0x178>)
 8004522:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004526:	2b03      	cmp	r3, #3
 8004528:	d118      	bne.n	800455c <ESC_coeprocess+0x170>
                     {
                        if (service == 0)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <ESC_coeprocess+0x14c>
                        {
                           MBX_error (MBXERR_INVALIDHEADER);
 8004530:	2005      	movs	r0, #5
 8004532:	f7fd ff25 	bl	8002380 <MBX_error>
 8004536:	e00a      	b.n	800454e <ESC_coeprocess+0x162>
                        }
                        else
                        {
                           SDO_abort (etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800453e:	b29a      	uxth	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	7adb      	ldrb	r3, [r3, #11]
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <ESC_coeprocess+0x184>)
 800454a:	f7fe ffff 	bl	800354c <SDO_abort>
                        }
                        MBXcontrol[0].state = MBXstate_idle;
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <ESC_coeprocess+0x17c>)
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
                        ESCvar.xoe = 0;
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <ESC_coeprocess+0x178>)
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
               }
            }
         }
      }
   }
}
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	1ffea940 	.word	0x1ffea940
 8004568:	1ffeab98 	.word	0x1ffeab98
 800456c:	1ffeaa14 	.word	0x1ffeaa14
 8004570:	06010000 	.word	0x06010000

08004574 <EEP_process>:

/** EPP periodic task of ESC side EEPROM emulation.
 *
 */
void EEP_process (void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
   eep_stat_t stat;

   /* check for eeprom event */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_EEP) == 0) {
 800457a:	4b40      	ldr	r3, [pc, #256]	; (800467c <EEP_process+0x108>)
 800457c:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8004580:	b29b      	uxth	r3, r3
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d100      	bne.n	800458c <EEP_process+0x18>
     return;
 800458a:	e073      	b.n	8004674 <EEP_process+0x100>
   }

   while (1) {
      /* read eeprom status */
      ESC_read (ESCREG_EECONTSTAT, &stat, sizeof (eep_stat_t));
 800458c:	463b      	mov	r3, r7
 800458e:	f240 5002 	movw	r0, #1282	; 0x502
 8004592:	4619      	mov	r1, r3
 8004594:	2206      	movs	r2, #6
 8004596:	f7fc fbf7 	bl	8000d88 <ESC_read>
      stat.contstat.reg = etohs(stat.contstat.reg);
 800459a:	883b      	ldrh	r3, [r7, #0]
 800459c:	803b      	strh	r3, [r7, #0]
      stat.addr = etohl(stat.addr);
 800459e:	f8d7 3002 	ldr.w	r3, [r7, #2]
 80045a2:	f8c7 3002 	str.w	r3, [r7, #2]

      /* check busy flag, exit if job finished */
      if (!stat.contstat.bits.busy) {
 80045a6:	787b      	ldrb	r3, [r7, #1]
 80045a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d100      	bne.n	80045b4 <EEP_process+0x40>
        return;
 80045b2:	e05f      	b.n	8004674 <EEP_process+0x100>
      }

      /* clear error bits */
      stat.contstat.bits.csumErr = 0;
 80045b4:	787b      	ldrb	r3, [r7, #1]
 80045b6:	f36f 03c3 	bfc	r3, #3, #1
 80045ba:	707b      	strb	r3, [r7, #1]
      stat.contstat.bits.eeLoading = 0;
 80045bc:	787b      	ldrb	r3, [r7, #1]
 80045be:	f36f 1304 	bfc	r3, #4, #1
 80045c2:	707b      	strb	r3, [r7, #1]
      stat.contstat.bits.ackErr = 0;
 80045c4:	787b      	ldrb	r3, [r7, #1]
 80045c6:	f36f 1345 	bfc	r3, #5, #1
 80045ca:	707b      	strb	r3, [r7, #1]
      stat.contstat.bits.wrErr = 0;
 80045cc:	787b      	ldrb	r3, [r7, #1]
 80045ce:	f36f 1386 	bfc	r3, #6, #1
 80045d2:	707b      	strb	r3, [r7, #1]

      /* process commands */
      switch (stat.contstat.bits.cmdReg) {
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d839      	bhi.n	8004654 <EEP_process+0xe0>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <EEP_process+0x74>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800465f 	.word	0x0800465f
 80045ec:	080045f9 	.word	0x080045f9
 80045f0:	08004627 	.word	0x08004627
 80045f4:	080045f9 	.word	0x080045f9
            break;

         case EEP_CMD_READ:
         case EEP_CMD_RELOAD:
            /* handle read request */
            if (EEP_read (stat.addr * sizeof(uint16_t), eep_buf, EEP_READ_SIZE) != 0) {
 80045f8:	f8d7 3002 	ldr.w	r3, [r7, #2]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	491f      	ldr	r1, [pc, #124]	; (8004680 <EEP_process+0x10c>)
 8004602:	2208      	movs	r2, #8
 8004604:	f7fc fe60 	bl	80012c8 <EEP_read>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <EEP_process+0xa4>
               stat.contstat.bits.ackErr = 1;
 800460e:	787b      	ldrb	r3, [r7, #1]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	707b      	strb	r3, [r7, #1]
            } else {
               ESC_write (ESCREG_EEDATA, eep_buf, EEP_READ_SIZE);
            }
            break;
 8004616:	e023      	b.n	8004660 <EEP_process+0xec>
         case EEP_CMD_RELOAD:
            /* handle read request */
            if (EEP_read (stat.addr * sizeof(uint16_t), eep_buf, EEP_READ_SIZE) != 0) {
               stat.contstat.bits.ackErr = 1;
            } else {
               ESC_write (ESCREG_EEDATA, eep_buf, EEP_READ_SIZE);
 8004618:	f44f 60a1 	mov.w	r0, #1288	; 0x508
 800461c:	4918      	ldr	r1, [pc, #96]	; (8004680 <EEP_process+0x10c>)
 800461e:	2208      	movs	r2, #8
 8004620:	f7fc fbd6 	bl	8000dd0 <ESC_write>
            }
            break;
 8004624:	e01c      	b.n	8004660 <EEP_process+0xec>

         case EEP_CMD_WRITE:
            /* handle write request */
            ESC_read (ESCREG_EEDATA, eep_buf, EEP_WRITE_SIZE);
 8004626:	f44f 60a1 	mov.w	r0, #1288	; 0x508
 800462a:	4915      	ldr	r1, [pc, #84]	; (8004680 <EEP_process+0x10c>)
 800462c:	2202      	movs	r2, #2
 800462e:	f7fc fbab 	bl	8000d88 <ESC_read>
            if (EEP_write (stat.addr * sizeof(uint16_t), eep_buf, EEP_WRITE_SIZE) != 0) {
 8004632:	f8d7 3002 	ldr.w	r3, [r7, #2]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4618      	mov	r0, r3
 800463a:	4911      	ldr	r1, [pc, #68]	; (8004680 <EEP_process+0x10c>)
 800463c:	2202      	movs	r2, #2
 800463e:	f7fc fe61 	bl	8001304 <EEP_write>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <EEP_process+0xde>
               stat.contstat.bits.ackErr = 1;
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	f043 0320 	orr.w	r3, r3, #32
 800464e:	707b      	strb	r3, [r7, #1]
            }
            break;
 8004650:	e006      	b.n	8004660 <EEP_process+0xec>
 8004652:	e005      	b.n	8004660 <EEP_process+0xec>

         default:
            stat.contstat.bits.ackErr = 1;
 8004654:	787b      	ldrb	r3, [r7, #1]
 8004656:	f043 0320 	orr.w	r3, r3, #32
 800465a:	707b      	strb	r3, [r7, #1]
 800465c:	e000      	b.n	8004660 <EEP_process+0xec>
      stat.contstat.bits.wrErr = 0;

      /* process commands */
      switch (stat.contstat.bits.cmdReg) {
         case EEP_CMD_IDLE:
            break;
 800465e:	bf00      	nop
         default:
            stat.contstat.bits.ackErr = 1;
      }

      /* acknowledge command */
      stat.contstat.reg = htoes(stat.contstat.reg);
 8004660:	883b      	ldrh	r3, [r7, #0]
 8004662:	803b      	strh	r3, [r7, #0]
      ESC_write (ESCREG_EECONTSTAT, &stat.contstat.reg, sizeof(uint16_t));
 8004664:	463b      	mov	r3, r7
 8004666:	f240 5002 	movw	r0, #1282	; 0x502
 800466a:	4619      	mov	r1, r3
 800466c:	2202      	movs	r2, #2
 800466e:	f7fc fbaf 	bl	8000dd0 <ESC_write>
   }
 8004672:	e78b      	b.n	800458c <EEP_process+0x18>
}
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	1ffea940 	.word	0x1ffea940
 8004680:	1ffea918 	.word	0x1ffea918

08004684 <FOE_fopen>:
 * @param[in] op        = Request op-code
 * @return 0= if we succeed, FOE_ERR_NOTFOUND something wrong with filename or
 * password
 */
int FOE_fopen (char *name, uint8_t num_chars, uint32_t pass, uint8_t op)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	72fb      	strb	r3, [r7, #11]
 8004694:	4613      	mov	r3, r2
 8004696:	72bb      	strb	r3, [r7, #10]
   uint32_t i;

   /* Unpack the file name into characters we can look at. */
   if (num_chars > FOE_FN_MAX)
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	d901      	bls.n	80046a2 <FOE_fopen+0x1e>
   {
      num_chars = FOE_FN_MAX;
 800469e:	230f      	movs	r3, #15
 80046a0:	72fb      	strb	r3, [r7, #11]
   }

   for (i = 0; i < num_chars; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e00b      	b.n	80046c0 <FOE_fopen+0x3c>
   {
      foe_file_name[i] = name[i];
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	4413      	add	r3, r2
 80046ae:	7819      	ldrb	r1, [r3, #0]
 80046b0:	4a43      	ldr	r2, [pc, #268]	; (80047c0 <FOE_fopen+0x13c>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	460a      	mov	r2, r1
 80046b8:	701a      	strb	r2, [r3, #0]
   if (num_chars > FOE_FN_MAX)
   {
      num_chars = FOE_FN_MAX;
   }

   for (i = 0; i < num_chars; i++)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	3301      	adds	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	7afa      	ldrb	r2, [r7, #11]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d8ef      	bhi.n	80046a8 <FOE_fopen+0x24>
   {
      foe_file_name[i] = name[i];
   }
   foe_file_name[i] = '\0';
 80046c8:	4a3d      	ldr	r2, [pc, #244]	; (80047c0 <FOE_fopen+0x13c>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4413      	add	r3, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e066      	b.n	80047a6 <FOE_fopen+0x122>
   {
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 80046d8:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <FOE_fopen+0x140>)
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	4834      	ldr	r0, [pc, #208]	; (80047c0 <FOE_fopen+0x13c>)
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	f000 fc13 	bl	8004f1c <strncmp>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d151      	bne.n	80047a0 <FOE_fopen+0x11c>
          (pass == foe_files[i].filepass))
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <FOE_fopen+0x140>)
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	695a      	ldr	r2, [r3, #20]
   foe_file_name[i] = '\0';

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
   {
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d145      	bne.n	80047a0 <FOE_fopen+0x11c>
          (pass == foe_files[i].filepass))
      {
         foe_file = &foe_files[i];
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <FOE_fopen+0x140>)
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <FOE_fopen+0x144>)
 8004726:	6013      	str	r3, [r2, #0]
         foe_file->address_offset = 0;
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <FOE_fopen+0x144>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
         foe_file->total_size = 0;
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <FOE_fopen+0x144>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
         switch (op)
 8004738:	7abb      	ldrb	r3, [r7, #10]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d002      	beq.n	8004744 <FOE_fopen+0xc0>
 800473e:	2b02      	cmp	r3, #2
 8004740:	d017      	beq.n	8004772 <FOE_fopen+0xee>
 8004742:	e02d      	b.n	80047a0 <FOE_fopen+0x11c>
         {
            case FOE_OP_RRQ:
            {
               FOEvar.fposition = 0;
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <FOE_fopen+0x148>)
 8004746:	2200      	movs	r2, #0
 8004748:	71da      	strb	r2, [r3, #7]
 800474a:	2200      	movs	r2, #0
 800474c:	721a      	strb	r2, [r3, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	725a      	strb	r2, [r3, #9]
 8004752:	2200      	movs	r2, #0
 8004754:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <FOE_fopen+0x140>)
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <FOE_fopen+0x148>)
 800476a:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 800476e:	2300      	movs	r3, #0
 8004770:	e021      	b.n	80047b6 <FOE_fopen+0x132>
            }
            case FOE_OP_WRQ:
            {
               FOEvar.fposition = 0;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <FOE_fopen+0x148>)
 8004774:	2200      	movs	r2, #0
 8004776:	71da      	strb	r2, [r3, #7]
 8004778:	2200      	movs	r2, #0
 800477a:	721a      	strb	r2, [r3, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	725a      	strb	r2, [r3, #9]
 8004780:	2200      	movs	r2, #0
 8004782:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <FOE_fopen+0x140>)
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <FOE_fopen+0x148>)
 8004798:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 800479c:	2300      	movs	r3, #0
 800479e:	e00a      	b.n	80047b6 <FOE_fopen+0x132>
      foe_file_name[i] = name[i];
   }
   foe_file_name[i] = '\0';

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <FOE_fopen+0x14c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d892      	bhi.n	80046d8 <FOE_fopen+0x54>
            }
         }
      }
   }

   return FOE_ERR_NOTFOUND;
 80047b2:	f248 0301 	movw	r3, #32769	; 0x8001
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	1ffeaba0 	.word	0x1ffeaba0
 80047c4:	1ffea924 	.word	0x1ffea924
 80047c8:	1ffea928 	.word	0x1ffea928
 80047cc:	1ffea92c 	.word	0x1ffea92c
 80047d0:	1ffea920 	.word	0x1ffea920

080047d4 <FOE_fwrite>:
 * @param[in] length = Length of data to read

 * @return Number of copied bytes.
 */
uint16_t FOE_fwrite (uint8_t *data, uint16_t length)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
    uint16_t ncopied = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	81fb      	strh	r3, [r7, #14]
    uint32_t failed = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

    DPRINT("FOE_fwrite\n");
    FOEvar.fprevposition = FOEvar.fposition;
 80047e8:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <FOE_fwrite+0xe0>)
 80047ea:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80047ee:	4a31      	ldr	r2, [pc, #196]	; (80048b4 <FOE_fwrite+0xe0>)
 80047f0:	f8c2 300b 	str.w	r3, [r2, #11]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 80047f4:	e043      	b.n	800487e <FOE_fwrite+0xaa>
    {
       length--;
 80047f6:	887b      	ldrh	r3, [r7, #2]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	807b      	strh	r3, [r7, #2]
       foe_cfg->fbuffer[FOEvar.fbufposition++] = *(data++);
 80047fc:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <FOE_fwrite+0xe4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <FOE_fwrite+0xe0>)
 8004804:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004808:	b29b      	uxth	r3, r3
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	b288      	uxth	r0, r1
 800480e:	4929      	ldr	r1, [pc, #164]	; (80048b4 <FOE_fwrite+0xe0>)
 8004810:	f8a1 0001 	strh.w	r0, [r1, #1]
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1c59      	adds	r1, r3, #1
 800481a:	6079      	str	r1, [r7, #4]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	7013      	strb	r3, [r2, #0]
       if(FOEvar.fbufposition >= foe_cfg->buffer_size)
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <FOE_fwrite+0xe0>)
 8004822:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <FOE_fwrite+0xe4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d31a      	bcc.n	800486a <FOE_fwrite+0x96>
       {
          failed = foe_file->write_function (foe_file, foe_cfg->fbuffer);
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <FOE_fwrite+0xe8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	4a20      	ldr	r2, [pc, #128]	; (80048bc <FOE_fwrite+0xe8>)
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <FOE_fwrite+0xe4>)
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	4798      	blx	r3
 800484a:	60b8      	str	r0, [r7, #8]
          FOEvar.fbufposition = 0;
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <FOE_fwrite+0xe0>)
 800484e:	2200      	movs	r2, #0
 8004850:	705a      	strb	r2, [r3, #1]
 8004852:	2200      	movs	r2, #0
 8004854:	709a      	strb	r2, [r3, #2]
          foe_file->address_offset += foe_cfg->buffer_size;
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <FOE_fwrite+0xe8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <FOE_fwrite+0xe8>)
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	68d1      	ldr	r1, [r2, #12]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <FOE_fwrite+0xe4>)
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	6892      	ldr	r2, [r2, #8]
 8004866:	440a      	add	r2, r1
 8004868:	60da      	str	r2, [r3, #12]
       }
       FOEvar.fposition++;
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <FOE_fwrite+0xe0>)
 800486c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004870:	3301      	adds	r3, #1
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <FOE_fwrite+0xe0>)
 8004874:	f8c2 3007 	str.w	r3, [r2, #7]
       ncopied++;
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	3301      	adds	r3, #1
 800487c:	81fb      	strh	r3, [r7, #14]
    uint16_t ncopied = 0;
    uint32_t failed = 0;

    DPRINT("FOE_fwrite\n");
    FOEvar.fprevposition = FOEvar.fposition;
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <FOE_fwrite+0xc6>
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <FOE_fwrite+0xe0>)
 8004886:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <FOE_fwrite+0xe0>)
 800488c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004890:	429a      	cmp	r2, r3
 8004892:	d002      	beq.n	800489a <FOE_fwrite+0xc6>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ad      	beq.n	80047f6 <FOE_fwrite+0x22>
       }
       FOEvar.fposition++;
       ncopied++;
    }

    foe_file->total_size += ncopied;
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <FOE_fwrite+0xe8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <FOE_fwrite+0xe8>)
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	6911      	ldr	r1, [r2, #16]
 80048a4:	89fa      	ldrh	r2, [r7, #14]
 80048a6:	440a      	add	r2, r1
 80048a8:	611a      	str	r2, [r3, #16]

    DPRINT("FOE_fwrite END with : %d\n",ncopied);
    return ncopied;
 80048aa:	89fb      	ldrh	r3, [r7, #14]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	1ffea92c 	.word	0x1ffea92c
 80048b8:	1ffea920 	.word	0x1ffea920
 80048bc:	1ffea928 	.word	0x1ffea928

080048c0 <FOE_fclose>:
 * if we have filled the buffers or not.
 *
 * @return Number of copied bytes on success, 0= if failed.
 */
uint32_t FOE_fclose (void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
   uint32_t i;
   uint32_t failed = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]

   DPRINT("FOE_fclose\n");
   if (FOEvar.fbufposition)
 80048ca:	4b23      	ldr	r3, [pc, #140]	; (8004958 <FOE_fclose+0x98>)
 80048cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03a      	beq.n	800494c <FOE_fclose+0x8c>
   {

      DPRINT("FOE_fclose EXTRA write\n");
      for(i = FOEvar.fbufposition; i < foe_cfg->buffer_size; i++)
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <FOE_fclose+0x98>)
 80048d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	e013      	b.n	800490a <FOE_fclose+0x4a>
      {
         foe_cfg->fbuffer[FOEvar.fbufposition++] = foe_cfg->empty_write;
 80048e2:	4b1e      	ldr	r3, [pc, #120]	; (800495c <FOE_fclose+0x9c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <FOE_fclose+0x98>)
 80048ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	b288      	uxth	r0, r1
 80048f4:	4918      	ldr	r1, [pc, #96]	; (8004958 <FOE_fclose+0x98>)
 80048f6:	f8a1 0001 	strh.w	r0, [r1, #1]
 80048fa:	4413      	add	r3, r2
 80048fc:	4a17      	ldr	r2, [pc, #92]	; (800495c <FOE_fclose+0x9c>)
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	7912      	ldrb	r2, [r2, #4]
 8004902:	701a      	strb	r2, [r3, #0]
   DPRINT("FOE_fclose\n");
   if (FOEvar.fbufposition)
   {

      DPRINT("FOE_fclose EXTRA write\n");
      for(i = FOEvar.fbufposition; i < foe_cfg->buffer_size; i++)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3301      	adds	r3, #1
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <FOE_fclose+0x9c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d8e5      	bhi.n	80048e2 <FOE_fclose+0x22>
      {
         foe_cfg->fbuffer[FOEvar.fbufposition++] = foe_cfg->empty_write;
      }
      failed = foe_file->write_function (foe_file, foe_cfg->fbuffer);
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <FOE_fclose+0xa0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <FOE_fclose+0xa0>)
 800491e:	6811      	ldr	r1, [r2, #0]
 8004920:	4a0e      	ldr	r2, [pc, #56]	; (800495c <FOE_fclose+0x9c>)
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	4798      	blx	r3
 800492c:	6038      	str	r0, [r7, #0]
      FOEvar.fbufposition = 0;
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <FOE_fclose+0x98>)
 8004930:	2200      	movs	r2, #0
 8004932:	705a      	strb	r2, [r3, #1]
 8004934:	2200      	movs	r2, #0
 8004936:	709a      	strb	r2, [r3, #2]
      foe_file->address_offset += foe_cfg->buffer_size;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <FOE_fclose+0xa0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <FOE_fclose+0xa0>)
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	68d1      	ldr	r1, [r2, #12]
 8004942:	4a06      	ldr	r2, [pc, #24]	; (800495c <FOE_fclose+0x9c>)
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	440a      	add	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
      DPRINT("FOE_fclose EXTRA write ended\n");
   }
   return failed;
 800494c:	683b      	ldr	r3, [r7, #0]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	1ffea92c 	.word	0x1ffea92c
 800495c:	1ffea920 	.word	0x1ffea920
 8004960:	1ffea928 	.word	0x1ffea928

08004964 <FOE_init>:

/** Initialize by clearing all current status variables.
 *
 */
void FOE_init ()
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
   DPRINT("FOE_init\n");
   FOEvar.foepacket = 0;
 8004968:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <FOE_init+0x54>)
 800496a:	2200      	movs	r2, #0
 800496c:	70da      	strb	r2, [r3, #3]
 800496e:	2200      	movs	r2, #0
 8004970:	711a      	strb	r2, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	715a      	strb	r2, [r3, #5]
 8004976:	2200      	movs	r2, #0
 8004978:	719a      	strb	r2, [r3, #6]
   FOEvar.foestate = FOE_READY;
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <FOE_init+0x54>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
   FOEvar.fposition = 0;
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <FOE_init+0x54>)
 8004982:	2200      	movs	r2, #0
 8004984:	71da      	strb	r2, [r3, #7]
 8004986:	2200      	movs	r2, #0
 8004988:	721a      	strb	r2, [r3, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	725a      	strb	r2, [r3, #9]
 800498e:	2200      	movs	r2, #0
 8004990:	729a      	strb	r2, [r3, #10]
   FOEvar.fprevposition = 0;
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <FOE_init+0x54>)
 8004994:	2200      	movs	r2, #0
 8004996:	72da      	strb	r2, [r3, #11]
 8004998:	2200      	movs	r2, #0
 800499a:	731a      	strb	r2, [r3, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	735a      	strb	r2, [r3, #13]
 80049a0:	2200      	movs	r2, #0
 80049a2:	739a      	strb	r2, [r3, #14]
   FOEvar.fbufposition = 0;
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <FOE_init+0x54>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	705a      	strb	r2, [r3, #1]
 80049aa:	2200      	movs	r2, #0
 80049ac:	709a      	strb	r2, [r3, #2]
}
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	1ffea92c 	.word	0x1ffea92c

080049bc <FOE_abort>:
/** Function for sending an FOE abort frame.
 *
 * @param[in] code   = abort code
 */
void FOE_abort (uint32_t code)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
   _FOE *foembx;
   uint8_t mbxhandle;

   if (code)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d026      	beq.n	8004a18 <FOE_abort+0x5c>
   {
      /* Send back an error packet. */
      mbxhandle = ESC_claimbuffer ();
 80049ca:	f7fd fc4b 	bl	8002264 <ESC_claimbuffer>
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]
      if (mbxhandle)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01f      	beq.n	8004a18 <FOE_abort+0x5c>
      {
         foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <FOE_abort+0x68>)
 80049dc:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <FOE_abort+0x6c>)
 80049e6:	4413      	add	r3, r2
 80049e8:	60bb      	str	r3, [r7, #8]
         foembx->mbxheader.length = htoes (ESC_FOEHSIZE);   /* Don't bother with error text for now. */
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f042 0206 	orr.w	r2, r2, #6
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
         foembx->mbxheader.mbxtype = MBXFOE;
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	7953      	ldrb	r3, [r2, #5]
 80049fc:	2104      	movs	r1, #4
 80049fe:	f361 0303 	bfi	r3, r1, #0, #4
 8004a02:	7153      	strb	r3, [r2, #5]
         foembx->foeheader.opcode = FOE_OP_ERR;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2205      	movs	r2, #5
 8004a08:	719a      	strb	r2, [r3, #6]
         foembx->foeheader.errorcode = htoel (code);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
         MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <FOE_abort+0x70>)
 8004a14:	2103      	movs	r1, #3
 8004a16:	54d1      	strb	r1, [r2, r3]
      }
      /* Nothing we can do if we can't get an outbound mailbox. */
   }
   DPRINT("FOE_abort: 0x%X\n", code);
   FOE_init ();
 8004a18:	f7ff ffa4 	bl	8004964 <FOE_init>
}
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	1ffea940 	.word	0x1ffea940
 8004a28:	1ffeaa14 	.word	0x1ffeaa14
 8004a2c:	1ffeab98 	.word	0x1ffeab98

08004a30 <FOE_send_ack>:
/** Sends an FoE ack data frame.

 * @return 0= or error number.
 */
int FOE_send_ack ()
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint8_t mbxhandle;

   mbxhandle = ESC_claimbuffer ();
 8004a36:	f7fd fc15 	bl	8002264 <ESC_claimbuffer>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
   if (mbxhandle)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02a      	beq.n	8004a9a <FOE_send_ack+0x6a>
   {
      DPRINT("FOE_send_ack\n");
      foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <FOE_send_ack+0x78>)
 8004a48:	f8d2 206d 	ldr.w	r2, [r2, #109]	; 0x6d
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <FOE_send_ack+0x7c>)
 8004a52:	4413      	add	r3, r2
 8004a54:	603b      	str	r3, [r7, #0]
      foembx->mbxheader.length = htoes (ESC_FOEHSIZE);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f042 0206 	orr.w	r2, r2, #6
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	2200      	movs	r2, #0
 8004a62:	705a      	strb	r2, [r3, #1]
      foembx->mbxheader.mbxtype = MBXFOE;
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	7953      	ldrb	r3, [r2, #5]
 8004a68:	2104      	movs	r1, #4
 8004a6a:	f361 0303 	bfi	r3, r1, #0, #4
 8004a6e:	7153      	strb	r3, [r2, #5]
      foembx->foeheader.opcode = FOE_OP_ACK;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2204      	movs	r2, #4
 8004a74:	719a      	strb	r2, [r3, #6]
      foembx->foeheader.packetnumber = htoel (FOEvar.foepacket);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <FOE_send_ack+0x80>)
 8004a78:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	609a      	str	r2, [r3, #8]
      FOEvar.foepacket++;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <FOE_send_ack+0x80>)
 8004a82:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <FOE_send_ack+0x80>)
 8004a8a:	f8c2 3003 	str.w	r3, [r2, #3]
      MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <FOE_send_ack+0x84>)
 8004a92:	2103      	movs	r1, #3
 8004a94:	54d1      	strb	r1, [r2, r3]
      return 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e001      	b.n	8004a9e <FOE_send_ack+0x6e>
   }
   else
   {
      DPRINT("ERROR:FOE_send_ack\n");
      return FOE_ERR_PROGERROR;
 8004a9a:	f248 030b 	movw	r3, #32779	; 0x800b
   }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	1ffea940 	.word	0x1ffea940
 8004aac:	1ffeaa14 	.word	0x1ffeaa14
 8004ab0:	1ffea92c 	.word	0x1ffea92c
 8004ab4:	1ffeab98 	.word	0x1ffeab98

08004ab8 <FOE_write>:
/** FoE write request handler. Starts with Initialize, Open and Ack that we can/will
 * receive data. On error we will send FOE Abort.
 *
 */
void FOE_write ()
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t data_len;
   uint32_t password;
   int res;

   if (FOEvar.foestate != FOE_READY)
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <FOE_write+0x7c>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <FOE_write+0x18>
   {
      FOE_abort (FOE_ERR_ILLEGAL);
 8004ac6:	f248 0004 	movw	r0, #32772	; 0x8004
 8004aca:	f7ff ff77 	bl	80049bc <FOE_abort>
      return;
 8004ace:	e02d      	b.n	8004b2c <FOE_write+0x74>
   }

   FOE_init ();
 8004ad0:	f7ff ff48 	bl	8004964 <FOE_init>
   foembx = (_FOE *) &MBX[0];
 8004ad4:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <FOE_write+0x80>)
 8004ad6:	60fb      	str	r3, [r7, #12]
   data_len = etohs (foembx->mbxheader.length) - ESC_FOEHSIZE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b06      	subs	r3, #6
 8004ae0:	60bb      	str	r3, [r7, #8]
   password = etohl (foembx->foeheader.password);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	607b      	str	r3, [r7, #4]

   /* Get an address we can write the file to, if possible. */
   res = FOE_fopen (foembx->filename, data_len, password, FOE_OP_WRQ);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f103 020c 	add.w	r2, r3, #12
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	2302      	movs	r3, #2
 8004afa:	f7ff fdc3 	bl	8004684 <FOE_fopen>
 8004afe:	6038      	str	r0, [r7, #0]
   DPRINT("FOE_write\n");
   if (res == 0)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10e      	bne.n	8004b24 <FOE_write+0x6c>
   {
      res = FOE_send_ack ();
 8004b06:	f7ff ff93 	bl	8004a30 <FOE_send_ack>
 8004b0a:	6038      	str	r0, [r7, #0]
      if (res)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <FOE_write+0x64>
      {
         FOE_abort (res);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff ff51 	bl	80049bc <FOE_abort>
 8004b1a:	e007      	b.n	8004b2c <FOE_write+0x74>
      }
      else
      {
         FOEvar.foestate = FOE_WAIT_FOR_DATA;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <FOE_write+0x7c>)
 8004b1e:	2203      	movs	r2, #3
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e003      	b.n	8004b2c <FOE_write+0x74>
      }
   }
   else
   {
      FOE_abort (res);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff48 	bl	80049bc <FOE_abort>
   }
}
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	1ffea92c 	.word	0x1ffea92c
 8004b38:	1ffeaa14 	.word	0x1ffeaa14

08004b3c <FOE_data>:
/** FoE data request handler. Validates and reads data until we're finsihed. Every
 * read frame follwed by an Ack frame. On error we will send FOE Abort.
 *
 */
void FOE_data ()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t packet;
   uint16_t data_len, ncopied;
   int res;

   if(FOEvar.foestate != FOE_WAIT_FOR_DATA)
 8004b42:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <FOE_data+0xfc>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d004      	beq.n	8004b54 <FOE_data+0x18>
   {
      FOE_abort(FOE_ERR_ILLEGAL);
 8004b4a:	f248 0004 	movw	r0, #32772	; 0x8004
 8004b4e:	f7ff ff35 	bl	80049bc <FOE_abort>
      return;
 8004b52:	e06d      	b.n	8004c30 <FOE_data+0xf4>
   }

   foembx = (_FOE*)&MBX[0];
 8004b54:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <FOE_data+0x100>)
 8004b56:	617b      	str	r3, [r7, #20]
   data_len = etohs(foembx->mbxheader.length) - ESC_FOEHSIZE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b06      	subs	r3, #6
 8004b60:	827b      	strh	r3, [r7, #18]
   packet = etohl(foembx->foeheader.packetnumber);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60fb      	str	r3, [r7, #12]

   if (packet != FOEvar.foepacket)
 8004b68:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <FOE_data+0xfc>)
 8004b6a:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d004      	beq.n	8004b7e <FOE_data+0x42>
   {
      DPRINT("FOE_data packet error,packet: %d foeheader.packet: %d\n",packet,FOEvar.foepacket);
      FOE_abort (FOE_ERR_PACKETNO);
 8004b74:	f248 0005 	movw	r0, #32773	; 0x8005
 8004b78:	f7ff ff20 	bl	80049bc <FOE_abort>
 8004b7c:	e058      	b.n	8004c30 <FOE_data+0xf4>
   }
   else if (data_len == 0)
 8004b7e:	8a7b      	ldrh	r3, [r7, #18]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <FOE_data+0x58>
   {
      DPRINT("FOE_data completed\n");
      FOE_fclose ();
 8004b84:	f7ff fe9c 	bl	80048c0 <FOE_fclose>
      res = FOE_send_ack ();
 8004b88:	f7ff ff52 	bl	8004a30 <FOE_send_ack>
 8004b8c:	60b8      	str	r0, [r7, #8]
      FOE_init ();
 8004b8e:	f7ff fee9 	bl	8004964 <FOE_init>
 8004b92:	e04d      	b.n	8004c30 <FOE_data+0xf4>
   }
   else if (FOEvar.fposition + data_len > FOEvar.fend)
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <FOE_data+0xfc>)
 8004b96:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8004b9a:	8a7b      	ldrh	r3, [r7, #18]
 8004b9c:	441a      	add	r2, r3
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <FOE_data+0xfc>)
 8004ba0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d904      	bls.n	8004bb2 <FOE_data+0x76>
   {
      DPRINT("FOE_data disk full\n");
      FOE_abort (FOE_ERR_DISKFULL);
 8004ba8:	f248 0003 	movw	r0, #32771	; 0x8003
 8004bac:	f7ff ff06 	bl	80049bc <FOE_abort>
 8004bb0:	e03e      	b.n	8004c30 <FOE_data+0xf4>
   }
   else
   {
      ncopied = FOE_fwrite (foembx->data, data_len);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f103 020c 	add.w	r2, r3, #12
 8004bb8:	8a7b      	ldrh	r3, [r7, #18]
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7ff fe09 	bl	80047d4 <FOE_fwrite>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
      if (!ncopied)
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <FOE_data+0x9a>
      {
         DPRINT("FOE_data no copied\n");
         FOE_abort (FOE_ERR_PROGERROR);
 8004bcc:	f248 000b 	movw	r0, #32779	; 0x800b
 8004bd0:	f7ff fef4 	bl	80049bc <FOE_abort>
 8004bd4:	e02c      	b.n	8004c30 <FOE_data+0xf4>
      }
      else if (data_len == ESC_FOE_DATA_SIZE)
 8004bd6:	8a7a      	ldrh	r2, [r7, #18]
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <FOE_data+0x104>)
 8004bda:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8004bde:	3b0c      	subs	r3, #12
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d112      	bne.n	8004c0a <FOE_data+0xce>
      {
         DPRINT("FOE_data data_len == FOE_DATA_SIZE\n");
         if (ncopied != data_len)
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	8a7b      	ldrh	r3, [r7, #18]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d003      	beq.n	8004bf4 <FOE_data+0xb8>
         {
            DPRINT("FOE_data only %d of %d copied\n",ncopied, data_len);
            FOE_abort (FOE_ERR_PROGERROR);
 8004bec:	f248 000b 	movw	r0, #32779	; 0x800b
 8004bf0:	f7ff fee4 	bl	80049bc <FOE_abort>
         }
         res = FOE_send_ack ();
 8004bf4:	f7ff ff1c 	bl	8004a30 <FOE_send_ack>
 8004bf8:	60b8      	str	r0, [r7, #8]
         if (res)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d017      	beq.n	8004c30 <FOE_data+0xf4>
         {
            FOE_abort (res);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff feda 	bl	80049bc <FOE_abort>
 8004c08:	e012      	b.n	8004c30 <FOE_data+0xf4>
         }
      }
      else
      {
         if ((ncopied != data_len) || FOE_fclose ())
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	8a7b      	ldrh	r3, [r7, #18]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d104      	bne.n	8004c1c <FOE_data+0xe0>
 8004c12:	f7ff fe55 	bl	80048c0 <FOE_fclose>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <FOE_data+0xea>
         {
            DPRINT("FOE_fclose failed to write extra buffer\n");
            FOE_abort (FOE_ERR_PROGERROR);
 8004c1c:	f248 000b 	movw	r0, #32779	; 0x800b
 8004c20:	f7ff fecc 	bl	80049bc <FOE_abort>
 8004c24:	e004      	b.n	8004c30 <FOE_data+0xf4>
         }
         else
         {
            DPRINT("FOE_data completed\n");
            res = FOE_send_ack ();
 8004c26:	f7ff ff03 	bl	8004a30 <FOE_send_ack>
 8004c2a:	60b8      	str	r0, [r7, #8]
            FOE_init ();
 8004c2c:	f7ff fe9a 	bl	8004964 <FOE_init>
         }
      }
   }
}
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	1ffea92c 	.word	0x1ffea92c
 8004c3c:	1ffeaa14 	.word	0x1ffeaa14
 8004c40:	1ffea940 	.word	0x1ffea940

08004c44 <FOE_error>:

/** FoE error requesthandler. Send an FOE Abort.
 *
 */
void FOE_error ()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
   /* Master panic! abort the transfer. */
   FOE_abort (0);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7ff feb7 	bl	80049bc <FOE_abort>
}
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <ESC_foeprocess>:
 * data, distributing the mailboxes to appropriate FOE functions depending
 * on requested opcode.
 * On Error an FoE Error or FoE Abort will be sent.
 */
void ESC_foeprocess (void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _FOE *foembx;

   if (ESCvar.MBXrun == 0)
 8004c56:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <ESC_foeprocess+0xa0>)
 8004c58:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d100      	bne.n	8004c62 <ESC_foeprocess+0x12>
   {
      return;
 8004c60:	e042      	b.n	8004ce8 <ESC_foeprocess+0x98>
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <ESC_foeprocess+0xa0>)
 8004c64:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <ESC_foeprocess+0x3e>
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <ESC_foeprocess+0xa4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10c      	bne.n	8004c8e <ESC_foeprocess+0x3e>
   {
      mbh = (_MBXh *) &MBX[0];
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <ESC_foeprocess+0xa8>)
 8004c76:	607b      	str	r3, [r7, #4]
      if (mbh->mbxtype == MBXFOE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	795b      	ldrb	r3, [r3, #5]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d103      	bne.n	8004c8e <ESC_foeprocess+0x3e>
      {
         ESCvar.xoe = MBXFOE;
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <ESC_foeprocess+0xa0>)
 8004c88:	2204      	movs	r2, #4
 8004c8a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      }
   }
   if (ESCvar.xoe == MBXFOE)
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <ESC_foeprocess+0xa0>)
 8004c90:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d127      	bne.n	8004ce8 <ESC_foeprocess+0x98>
   {
      foembx = (_FOE *) &MBX[0];
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <ESC_foeprocess+0xa8>)
 8004c9a:	603b      	str	r3, [r7, #0]
      /* Verify the size of the file data. */
      if (etohs (foembx->mbxheader.length) < ESC_FOEHSIZE)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d803      	bhi.n	8004cae <ESC_foeprocess+0x5e>
      {
         FOE_abort (MBXERR_SIZETOOSHORT);
 8004ca6:	2006      	movs	r0, #6
 8004ca8:	f7ff fe88 	bl	80049bc <FOE_abort>
 8004cac:	e015      	b.n	8004cda <ESC_foeprocess+0x8a>
      }
      else
      {
         switch (foembx->foeheader.opcode)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	799b      	ldrb	r3, [r3, #6]
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d006      	beq.n	8004cc4 <ESC_foeprocess+0x74>
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d007      	beq.n	8004cca <ESC_foeprocess+0x7a>
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d108      	bne.n	8004cd0 <ESC_foeprocess+0x80>
         {
            case FOE_OP_WRQ:
            {
               DPRINT("FOE_OP_WRQ\n");
               FOE_write ();
 8004cbe:	f7ff fefb 	bl	8004ab8 <FOE_write>
               break;
 8004cc2:	e00a      	b.n	8004cda <ESC_foeprocess+0x8a>
            }
            case FOE_OP_DATA:
            {
               DPRINT("FOE_OP_DATA\n");
               FOE_data ();
 8004cc4:	f7ff ff3a 	bl	8004b3c <FOE_data>
               break;
 8004cc8:	e007      	b.n	8004cda <ESC_foeprocess+0x8a>
            }
#endif
            case FOE_OP_ERR:
            {
               DPRINT("FOE_OP_ERR\n");
               FOE_error ();
 8004cca:	f7ff ffbb 	bl	8004c44 <FOE_error>
               break;
 8004cce:	e004      	b.n	8004cda <ESC_foeprocess+0x8a>
            }
            default:
            {
               DPRINT("FOE_ERR_NOTDEFINED\n");
               FOE_abort (FOE_ERR_NOTDEFINED);
 8004cd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cd4:	f7ff fe72 	bl	80049bc <FOE_abort>
               break;
 8004cd8:	bf00      	nop
            }
         }
      }
      MBXcontrol[0].state = MBXstate_idle;
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <ESC_foeprocess+0xa4>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <ESC_foeprocess+0xa0>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
   }
}
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	1ffea940 	.word	0x1ffea940
 8004cf4:	1ffeab98 	.word	0x1ffeab98
 8004cf8:	1ffeaa14 	.word	0x1ffeaa14

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0f      	ldr	r6, [pc, #60]	; (8004d3c <__libc_init_array+0x40>)
 8004d00:	4d0f      	ldr	r5, [pc, #60]	; (8004d40 <__libc_init_array+0x44>)
 8004d02:	1b76      	subs	r6, r6, r5
 8004d04:	10b6      	asrs	r6, r6, #2
 8004d06:	bf18      	it	ne
 8004d08:	2400      	movne	r4, #0
 8004d0a:	d005      	beq.n	8004d18 <__libc_init_array+0x1c>
 8004d0c:	3401      	adds	r4, #1
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d1f9      	bne.n	8004d0c <__libc_init_array+0x10>
 8004d18:	4e0a      	ldr	r6, [pc, #40]	; (8004d44 <__libc_init_array+0x48>)
 8004d1a:	4d0b      	ldr	r5, [pc, #44]	; (8004d48 <__libc_init_array+0x4c>)
 8004d1c:	1b76      	subs	r6, r6, r5
 8004d1e:	f7fb ffe5 	bl	8000cec <_init>
 8004d22:	10b6      	asrs	r6, r6, #2
 8004d24:	bf18      	it	ne
 8004d26:	2400      	movne	r4, #0
 8004d28:	d006      	beq.n	8004d38 <__libc_init_array+0x3c>
 8004d2a:	3401      	adds	r4, #1
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d1f9      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	bd70      	pop	{r4, r5, r6, pc}
 8004d3a:	bf00      	nop
 8004d3c:	1ffe8974 	.word	0x1ffe8974
 8004d40:	1ffe8974 	.word	0x1ffe8974
 8004d44:	1ffe8974 	.word	0x1ffe8974
 8004d48:	1ffe8974 	.word	0x1ffe8974

08004d4c <memcpy>:
 8004d4c:	4684      	mov	ip, r0
 8004d4e:	ea41 0300 	orr.w	r3, r1, r0
 8004d52:	f013 0303 	ands.w	r3, r3, #3
 8004d56:	d16d      	bne.n	8004e34 <memcpy+0xe8>
 8004d58:	3a40      	subs	r2, #64	; 0x40
 8004d5a:	d341      	bcc.n	8004de0 <memcpy+0x94>
 8004d5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d60:	f840 3b04 	str.w	r3, [r0], #4
 8004d64:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d68:	f840 3b04 	str.w	r3, [r0], #4
 8004d6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d70:	f840 3b04 	str.w	r3, [r0], #4
 8004d74:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d78:	f840 3b04 	str.w	r3, [r0], #4
 8004d7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d80:	f840 3b04 	str.w	r3, [r0], #4
 8004d84:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d88:	f840 3b04 	str.w	r3, [r0], #4
 8004d8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d90:	f840 3b04 	str.w	r3, [r0], #4
 8004d94:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d98:	f840 3b04 	str.w	r3, [r0], #4
 8004d9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004da0:	f840 3b04 	str.w	r3, [r0], #4
 8004da4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004da8:	f840 3b04 	str.w	r3, [r0], #4
 8004dac:	f851 3b04 	ldr.w	r3, [r1], #4
 8004db0:	f840 3b04 	str.w	r3, [r0], #4
 8004db4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004db8:	f840 3b04 	str.w	r3, [r0], #4
 8004dbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dc0:	f840 3b04 	str.w	r3, [r0], #4
 8004dc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dc8:	f840 3b04 	str.w	r3, [r0], #4
 8004dcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dd0:	f840 3b04 	str.w	r3, [r0], #4
 8004dd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dd8:	f840 3b04 	str.w	r3, [r0], #4
 8004ddc:	3a40      	subs	r2, #64	; 0x40
 8004dde:	d2bd      	bcs.n	8004d5c <memcpy+0x10>
 8004de0:	3230      	adds	r2, #48	; 0x30
 8004de2:	d311      	bcc.n	8004e08 <memcpy+0xbc>
 8004de4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004de8:	f840 3b04 	str.w	r3, [r0], #4
 8004dec:	f851 3b04 	ldr.w	r3, [r1], #4
 8004df0:	f840 3b04 	str.w	r3, [r0], #4
 8004df4:	f851 3b04 	ldr.w	r3, [r1], #4
 8004df8:	f840 3b04 	str.w	r3, [r0], #4
 8004dfc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e00:	f840 3b04 	str.w	r3, [r0], #4
 8004e04:	3a10      	subs	r2, #16
 8004e06:	d2ed      	bcs.n	8004de4 <memcpy+0x98>
 8004e08:	320c      	adds	r2, #12
 8004e0a:	d305      	bcc.n	8004e18 <memcpy+0xcc>
 8004e0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e10:	f840 3b04 	str.w	r3, [r0], #4
 8004e14:	3a04      	subs	r2, #4
 8004e16:	d2f9      	bcs.n	8004e0c <memcpy+0xc0>
 8004e18:	3204      	adds	r2, #4
 8004e1a:	d008      	beq.n	8004e2e <memcpy+0xe2>
 8004e1c:	07d2      	lsls	r2, r2, #31
 8004e1e:	bf1c      	itt	ne
 8004e20:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004e24:	f800 3b01 	strbne.w	r3, [r0], #1
 8004e28:	d301      	bcc.n	8004e2e <memcpy+0xe2>
 8004e2a:	880b      	ldrh	r3, [r1, #0]
 8004e2c:	8003      	strh	r3, [r0, #0]
 8004e2e:	4660      	mov	r0, ip
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2a08      	cmp	r2, #8
 8004e36:	d313      	bcc.n	8004e60 <memcpy+0x114>
 8004e38:	078b      	lsls	r3, r1, #30
 8004e3a:	d08d      	beq.n	8004d58 <memcpy+0xc>
 8004e3c:	f010 0303 	ands.w	r3, r0, #3
 8004e40:	d08a      	beq.n	8004d58 <memcpy+0xc>
 8004e42:	f1c3 0304 	rsb	r3, r3, #4
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	07db      	lsls	r3, r3, #31
 8004e4a:	bf1c      	itt	ne
 8004e4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004e50:	f800 3b01 	strbne.w	r3, [r0], #1
 8004e54:	d380      	bcc.n	8004d58 <memcpy+0xc>
 8004e56:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004e5a:	f820 3b02 	strh.w	r3, [r0], #2
 8004e5e:	e77b      	b.n	8004d58 <memcpy+0xc>
 8004e60:	3a04      	subs	r2, #4
 8004e62:	d3d9      	bcc.n	8004e18 <memcpy+0xcc>
 8004e64:	3a01      	subs	r2, #1
 8004e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6a:	f800 3b01 	strb.w	r3, [r0], #1
 8004e6e:	d2f9      	bcs.n	8004e64 <memcpy+0x118>
 8004e70:	780b      	ldrb	r3, [r1, #0]
 8004e72:	7003      	strb	r3, [r0, #0]
 8004e74:	784b      	ldrb	r3, [r1, #1]
 8004e76:	7043      	strb	r3, [r0, #1]
 8004e78:	788b      	ldrb	r3, [r1, #2]
 8004e7a:	7083      	strb	r3, [r0, #2]
 8004e7c:	4660      	mov	r0, ip
 8004e7e:	4770      	bx	lr

08004e80 <memset>:
 8004e80:	b470      	push	{r4, r5, r6}
 8004e82:	0784      	lsls	r4, r0, #30
 8004e84:	d046      	beq.n	8004f14 <memset+0x94>
 8004e86:	1e54      	subs	r4, r2, #1
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d041      	beq.n	8004f10 <memset+0x90>
 8004e8c:	b2cd      	uxtb	r5, r1
 8004e8e:	4603      	mov	r3, r0
 8004e90:	e002      	b.n	8004e98 <memset+0x18>
 8004e92:	1e62      	subs	r2, r4, #1
 8004e94:	b3e4      	cbz	r4, 8004f10 <memset+0x90>
 8004e96:	4614      	mov	r4, r2
 8004e98:	f803 5b01 	strb.w	r5, [r3], #1
 8004e9c:	079a      	lsls	r2, r3, #30
 8004e9e:	d1f8      	bne.n	8004e92 <memset+0x12>
 8004ea0:	2c03      	cmp	r4, #3
 8004ea2:	d92e      	bls.n	8004f02 <memset+0x82>
 8004ea4:	b2cd      	uxtb	r5, r1
 8004ea6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004eaa:	2c0f      	cmp	r4, #15
 8004eac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004eb0:	d919      	bls.n	8004ee6 <memset+0x66>
 8004eb2:	f103 0210 	add.w	r2, r3, #16
 8004eb6:	4626      	mov	r6, r4
 8004eb8:	3e10      	subs	r6, #16
 8004eba:	2e0f      	cmp	r6, #15
 8004ebc:	f842 5c10 	str.w	r5, [r2, #-16]
 8004ec0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004ec4:	f842 5c08 	str.w	r5, [r2, #-8]
 8004ec8:	f842 5c04 	str.w	r5, [r2, #-4]
 8004ecc:	f102 0210 	add.w	r2, r2, #16
 8004ed0:	d8f2      	bhi.n	8004eb8 <memset+0x38>
 8004ed2:	f1a4 0210 	sub.w	r2, r4, #16
 8004ed6:	f022 020f 	bic.w	r2, r2, #15
 8004eda:	f004 040f 	and.w	r4, r4, #15
 8004ede:	3210      	adds	r2, #16
 8004ee0:	2c03      	cmp	r4, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	d90d      	bls.n	8004f02 <memset+0x82>
 8004ee6:	461e      	mov	r6, r3
 8004ee8:	4622      	mov	r2, r4
 8004eea:	3a04      	subs	r2, #4
 8004eec:	2a03      	cmp	r2, #3
 8004eee:	f846 5b04 	str.w	r5, [r6], #4
 8004ef2:	d8fa      	bhi.n	8004eea <memset+0x6a>
 8004ef4:	1f22      	subs	r2, r4, #4
 8004ef6:	f022 0203 	bic.w	r2, r2, #3
 8004efa:	3204      	adds	r2, #4
 8004efc:	4413      	add	r3, r2
 8004efe:	f004 0403 	and.w	r4, r4, #3
 8004f02:	b12c      	cbz	r4, 8004f10 <memset+0x90>
 8004f04:	b2c9      	uxtb	r1, r1
 8004f06:	441c      	add	r4, r3
 8004f08:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d1fb      	bne.n	8004f08 <memset+0x88>
 8004f10:	bc70      	pop	{r4, r5, r6}
 8004f12:	4770      	bx	lr
 8004f14:	4614      	mov	r4, r2
 8004f16:	4603      	mov	r3, r0
 8004f18:	e7c2      	b.n	8004ea0 <memset+0x20>
 8004f1a:	bf00      	nop

08004f1c <strncmp>:
 8004f1c:	2a00      	cmp	r2, #0
 8004f1e:	d03e      	beq.n	8004f9e <strncmp+0x82>
 8004f20:	ea40 0301 	orr.w	r3, r0, r1
 8004f24:	f013 0303 	ands.w	r3, r3, #3
 8004f28:	b4f0      	push	{r4, r5, r6, r7}
 8004f2a:	d125      	bne.n	8004f78 <strncmp+0x5c>
 8004f2c:	2a03      	cmp	r2, #3
 8004f2e:	d923      	bls.n	8004f78 <strncmp+0x5c>
 8004f30:	6804      	ldr	r4, [r0, #0]
 8004f32:	680d      	ldr	r5, [r1, #0]
 8004f34:	42ac      	cmp	r4, r5
 8004f36:	d11f      	bne.n	8004f78 <strncmp+0x5c>
 8004f38:	3a04      	subs	r2, #4
 8004f3a:	d032      	beq.n	8004fa2 <strncmp+0x86>
 8004f3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8004f40:	ea25 0404 	bic.w	r4, r5, r4
 8004f44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004f48:	d12e      	bne.n	8004fa8 <strncmp+0x8c>
 8004f4a:	1d07      	adds	r7, r0, #4
 8004f4c:	1d0d      	adds	r5, r1, #4
 8004f4e:	e00d      	b.n	8004f6c <strncmp+0x50>
 8004f50:	f857 3b04 	ldr.w	r3, [r7], #4
 8004f54:	680e      	ldr	r6, [r1, #0]
 8004f56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8004f5a:	42b3      	cmp	r3, r6
 8004f5c:	ea24 0403 	bic.w	r4, r4, r3
 8004f60:	d10a      	bne.n	8004f78 <strncmp+0x5c>
 8004f62:	3a04      	subs	r2, #4
 8004f64:	d01d      	beq.n	8004fa2 <strncmp+0x86>
 8004f66:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004f6a:	d120      	bne.n	8004fae <strncmp+0x92>
 8004f6c:	2a03      	cmp	r2, #3
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4638      	mov	r0, r7
 8004f72:	f105 0504 	add.w	r5, r5, #4
 8004f76:	d8eb      	bhi.n	8004f50 <strncmp+0x34>
 8004f78:	7803      	ldrb	r3, [r0, #0]
 8004f7a:	780c      	ldrb	r4, [r1, #0]
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f82:	d109      	bne.n	8004f98 <strncmp+0x7c>
 8004f84:	b16a      	cbz	r2, 8004fa2 <strncmp+0x86>
 8004f86:	b17b      	cbz	r3, 8004fa8 <strncmp+0x8c>
 8004f88:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004f8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f96:	d0f5      	beq.n	8004f84 <strncmp+0x68>
 8004f98:	1b18      	subs	r0, r3, r4
 8004f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8004f9c:	4770      	bx	lr
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4770      	bx	lr
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	bcf0      	pop	{r4, r5, r6, r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bcf0      	pop	{r4, r5, r6, r7}
 8004fac:	4770      	bx	lr
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e7f3      	b.n	8004f9a <strncmp+0x7e>
 8004fb2:	bf00      	nop

08004fb4 <port_control>:
 8004fb4:	0000 0000 1555 1001 0100 0000               ....U.......

08004fc0 <gpio_config_input>:
	...

08004fcc <fce_config>:
 8004fcc:	0020 5002 0000 0000 0000 0000                ..P........

08004fd8 <gpio_config_btn>:
 8004fd8:	0030 0000 0000 0000 0000 0000               0...........

08004fe4 <gpio_config_led>:
 8004fe4:	0080 0000 0000 0001 0002 0000               ............

08004ff0 <gpio_config_btn1>:
 8004ff0:	0030 0000 0000 0000 0000 0000               0...........

08004ffc <gpio_config_btn2>:
 8004ffc:	0030 0000 0000 0000 0000 0000               0...........

08005008 <gpio_config_led1>:
 8005008:	0080 0000 0000 0001 0002 0000               ............

08005014 <gpio_config_led2>:
 8005014:	0080 0000 0000 0001 0002 0000               ............

08005020 <gpio_config_led3>:
 8005020:	0080 0000 0000 0001 0002 0000               ............

0800502c <acName1000>:
 800502c:	6544 6976 6563 5420 7079 0065               Device Type.

08005038 <acName1000_0>:
 8005038:	6544 6976 6563 5420 7079 0065               Device Type.

08005044 <acName1008>:
 8005044:	6544 6976 6563 4e20 6d61 0065               Device Name.

08005050 <acName1008_0>:
 8005050:	6544 6976 6563 4e20 6d61 0065               Device Name.

0800505c <acName1009>:
 800505c:	6148 6472 6177 6572 5620 7265 6973 6e6f     Hardware Version
 800506c:	0000 0000                                   ....

08005070 <acName1009_0>:
 8005070:	6148 6472 6177 6572 5620 7265 6973 6e6f     Hardware Version
 8005080:	0000 0000                                   ....

08005084 <acName100A>:
 8005084:	6f53 7466 6177 6572 5620 7265 6973 6e6f     Software Version
 8005094:	0000 0000                                   ....

08005098 <acName100A_0>:
 8005098:	6f53 7466 6177 6572 5620 7265 6973 6e6f     Software Version
 80050a8:	0000 0000                                   ....

080050ac <acName1018>:
 80050ac:	6449 6e65 6974 7974 4f20 6a62 6365 0074     Identity Object.

080050bc <acName1018_00>:
 80050bc:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

080050cc <acName1018_01>:
 80050cc:	6556 646e 726f 4920 0044 0000               Vendor ID...

080050d8 <acName1018_02>:
 80050d8:	7250 646f 6375 2074 6f43 6564 0000 0000     Product Code....

080050e8 <acName1018_03>:
 80050e8:	6552 6976 6973 6e6f 4e20 6d75 6562 0072     Revision Number.

080050f8 <acName1018_04>:
 80050f8:	6553 6972 6c61 4e20 6d75 6562 0072 0000     Serial Number...

08005108 <acName1600>:
 8005108:	454c 7344 0000 0000                         LEDs....

08005110 <acName1600_00>:
 8005110:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

08005120 <acName1600_01>:
 8005120:	454c 3144 0000 0000                         LED1....

08005128 <acName1600_02>:
 8005128:	454c 3244 0000 0000                         LED2....

08005130 <acName1600_03>:
 8005130:	454c 3344 0000 0000                         LED3....

08005138 <acName1A00>:
 8005138:	7542 7474 6e6f 0073                         Buttons.

08005140 <acName1A00_00>:
 8005140:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

08005150 <acName1A00_01>:
 8005150:	7542 7474 6e6f 0031                         Button1.

08005158 <acName1A00_02>:
 8005158:	7542 7474 6e6f 0032                         Button2.

08005160 <acName1C00>:
 8005160:	7953 636e 4d20 6e61 6761 7265 4320 6d6f     Sync Manager Com
 8005170:	756d 696e 6163 6974 6e6f 5420 7079 0065     munication Type.

08005180 <acName1C00_00>:
 8005180:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

08005190 <acName1C00_01>:
 8005190:	6f43 6d6d 6e75 6369 7461 6f69 736e 5420     Communications T
 80051a0:	7079 2065 4d53 0030                         ype SM0.

080051a8 <acName1C00_02>:
 80051a8:	6f43 6d6d 6e75 6369 7461 6f69 736e 5420     Communications T
 80051b8:	7079 2065 4d53 0031                         ype SM1.

080051c0 <acName1C00_03>:
 80051c0:	6f43 6d6d 6e75 6369 7461 6f69 736e 5420     Communications T
 80051d0:	7079 2065 4d53 0032                         ype SM2.

080051d8 <acName1C00_04>:
 80051d8:	6f43 6d6d 6e75 6369 7461 6f69 736e 5420     Communications T
 80051e8:	7079 2065 4d53 0033                         ype SM3.

080051f0 <acName1C12>:
 80051f0:	7953 636e 4d20 6e61 6761 7265 3220 5020     Sync Manager 2 P
 8005200:	4f44 4120 7373 6769 6d6e 6e65 0074 0000     DO Assignment...

08005210 <acName1C12_00>:
 8005210:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

08005220 <acName1C12_01>:
 8005220:	4450 204f 614d 7070 6e69 0067               PDO Mapping.

0800522c <acName1C13>:
 800522c:	7953 636e 4d20 6e61 6761 7265 3320 5020     Sync Manager 3 P
 800523c:	4f44 4120 7373 6769 6d6e 6e65 0074 0000     DO Assignment...

0800524c <acName1C13_00>:
 800524c:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

0800525c <acName1C13_01>:
 800525c:	4450 204f 614d 7070 6e69 0067               PDO Mapping.

08005268 <acName6000>:
 8005268:	7542 7474 6e6f 0073                         Buttons.

08005270 <acName6000_00>:
 8005270:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

08005280 <acName6000_01>:
 8005280:	7542 7474 6e6f 0031                         Button1.

08005288 <acName6000_02>:
 8005288:	7542 7474 6e6f 0032                         Button2.

08005290 <acName7000>:
 8005290:	454c 7344 0000 0000                         LEDs....

08005298 <acName7000_00>:
 8005298:	614d 2078 7553 4962 646e 7865 0000 0000     Max SubIndex....

080052a8 <acName7000_01>:
 80052a8:	454c 3144 0000 0000                         LED1....

080052b0 <acName7000_02>:
 80052b0:	454c 3244 0000 0000                         LED2....

080052b8 <acName7000_03>:
 80052b8:	454c 3344 0000 0000                         LED3....

080052c0 <SDO1000>:
 80052c0:	0000 0007 0020 0007 5038 0800 1389 0000     .... ...8P......
 80052d0:	0000 0000 6d78 3463 3038 5f30 6c73 7661     ....xmc4800_slav
 80052e0:	0065 0000 2e31 0030                         e...1.0.

080052e8 <SDO1008>:
 80052e8:	0000 0009 0068 0007 5050 0800 0000 0000     ....h...PP......
 80052f8:	52d4 0800                                   .R..

080052fc <SDO1009>:
 80052fc:	0000 0009 0018 0007 5070 0800 0000 0000     ........pP......
 800530c:	52e4 0800                                   .R..

08005310 <SDO100A>:
 8005310:	0000 0009 0018 0007 5098 0800 0000 0000     .........P......
 8005320:	52e4 0800                                   .R..

08005324 <SDO1018>:
 8005324:	0000 0005 0008 0007 50bc 0800 0004 0000     .........P......
 8005334:	0000 0000 0001 0007 0020 0007 50cc 0800     ........ ....P..
 8005344:	1337 0000 0000 0000 0002 0007 0020 0007     7........... ...
 8005354:	50d8 0800 2345 0001 0000 0000 0003 0007     .P..E#..........
 8005364:	0020 0007 50e8 0800 0000 0000 0000 0000      ....P..........
 8005374:	0004 0007 0020 0007 50f8 0800 0000 0000     .... ....P......
 8005384:	0000 0000                                   ....

08005388 <SDO1600>:
 8005388:	0000 0005 0008 0007 5110 0800 0003 0000     .........Q......
 8005398:	0000 0000 0001 0007 0020 0007 5120 0800     ........ ... Q..
 80053a8:	0108 7000 0000 0000 0002 0007 0020 0007     ...p........ ...
 80053b8:	5128 0800 0208 7000 0000 0000 0003 0007     (Q.....p........
 80053c8:	0020 0007 5130 0800 0308 7000 0000 0000      ...0Q.....p....

080053d8 <SDO1A00>:
 80053d8:	0000 0005 0008 0007 5140 0800 0002 0000     ........@Q......
 80053e8:	0000 0000 0001 0007 0020 0007 5150 0800     ........ ...PQ..
 80053f8:	0108 6000 0000 0000 0002 0007 0020 0007     ...`........ ...
 8005408:	5158 0800 0208 6000 0000 0000               XQ.....`....

08005414 <SDO1C00>:
 8005414:	0000 0005 0008 0007 5180 0800 0004 0000     .........Q......
 8005424:	0000 0000 0001 0005 0008 0007 5190 0800     .............Q..
 8005434:	0001 0000 0000 0000 0002 0005 0008 0007     ................
 8005444:	51a8 0800 0002 0000 0000 0000 0003 0005     .Q..............
 8005454:	0008 0007 51c0 0800 0003 0000 0000 0000     .....Q..........
 8005464:	0004 0005 0008 0007 51d8 0800 0004 0000     .........Q......
 8005474:	0000 0000                                   ....

08005478 <SDO1C12>:
 8005478:	0000 0005 0008 0007 5210 0800 0001 0000     .........R......
 8005488:	0000 0000 0001 0006 0010 0007 5220 0800     ............ R..
 8005498:	1600 0000 0000 0000                         ........

080054a0 <SDO1C13>:
 80054a0:	0000 0005 0008 0007 524c 0800 0001 0000     ........LR......
 80054b0:	0000 0000 0001 0006 0010 0007 525c 0800     ............\R..
 80054c0:	1a00 0000 0000 0000                         ........

080054c8 <SDO6000>:
 80054c8:	0000 0005 0008 0007 5270 0800 0002 0000     ........pR......
 80054d8:	0000 0000 0001 0005 0008 0007 5280 0800     .............R..
 80054e8:	0000 0000 ab9c 1ffe 0002 0005 0008 0007     ................
 80054f8:	5288 0800 0000 0000 ab9d 1ffe               .R..........

08005504 <SDO7000>:
 8005504:	0000 0005 0008 0007 5298 0800 0003 0000     .........R......
 8005514:	0000 0000 0001 0005 0008 0007 52a8 0800     .............R..
 8005524:	0000 0000 ab94 1ffe 0002 0005 0008 0007     ................
 8005534:	52b0 0800 0000 0000 ab95 1ffe 0003 0005     .R..............
 8005544:	0008 0007 52b8 0800 0000 0000 ab96 1ffe     .....R..........

08005554 <SDOobjects>:
 8005554:	1000 0007 0000 502c 0800 52c0 0800 1008     ......,P...R....
 8005564:	0007 0000 5044 0800 52e8 0800 1009 0007     ....DP...R......
 8005574:	0000 505c 0800 52fc 0800 100a 0007 0000     ..\P...R........
 8005584:	5084 0800 5310 0800 1018 0009 0004 50ac     .P...S.........P
 8005594:	0800 5324 0800 1600 0009 0003 5108 0800     ..$S.........Q..
 80055a4:	5388 0800 1a00 0009 0002 5138 0800 53d8     .S........8Q...S
 80055b4:	0800 1c00 0008 0004 5160 0800 5414 0800     ........`Q...T..
 80055c4:	1c12 0008 0001 51f0 0800 5478 0800 1c13     .......Q..xT....
 80055d4:	0008 0001 522c 0800 54a0 0800 6000 0009     ....,R...T...`..
 80055e4:	0002 5268 0800 54c8 0800 7000 0009 0003     ..hR...T...p....
 80055f4:	5290 0800 5504 0800 ffff 00ff ffff 0000     .R...U..........
	...
